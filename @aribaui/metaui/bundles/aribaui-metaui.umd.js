(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@aribaui/core'), require('typescript-collections'), require('@aribaui/components'), require('@angular/core'), require('@angular/forms'), require('@angular/common'), require('@angular/router'), require('@angular/platform-browser')) :
    typeof define === 'function' && define.amd ? define('@aribaui/metaui', ['exports', '@aribaui/core', 'typescript-collections', '@aribaui/components', '@angular/core', '@angular/forms', '@angular/common', '@angular/router', '@angular/platform-browser'], factory) :
    (factory((global.aribaui = global.aribaui || {}, global.aribaui.metaui = {}),global.core,global.Collections,global.components,global.ng.core,global.ng.forms,global.ng.common,global.ng.router,global.ng.platformBrowser));
}(this, (function (exports,core,Collections,components,core$1,forms,common,router,platformBrowser) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Represents a set of matching rules resulting from looking up a set of key/values
     *  against the Meta rule base.
     *
     * Instances of the Match superclass are simply immutable snapshots of previous matches
     * (used as keys in Match -> Properties lookup caches).
     * The more meaty class is its static inner subclass, Match.MatchResult.
     */
    var Match = (function () {
        function Match(_matches, _keysMatchedMask, _matchPathCRC) {
            if (_matchPathCRC === void 0) {
                _matchPathCRC = 0;
            }
            this._matches = _matches;
            this._keysMatchedMask = _keysMatchedMask;
            this._matchPathCRC = _matchPathCRC;
        }
        // Word lists are int arrays with the first element holding the length
        /**
         * @param {?} intArr
         * @param {?} val
         * @return {?}
         */
        Match.addInt = /**
         * @param {?} intArr
         * @param {?} val
         * @return {?}
         */
            function (intArr, val) {
                if (core.isBlank(intArr)) {
                    /** @type {?} */
                    var r = new Array(4);
                    r[0] = 1;
                    r[1] = val;
                    return r;
                }
                /** @type {?} */
                var newPos = intArr[0];
                if (intArr[newPos++] === val) {
                    return intArr;
                } // already here...
                if (newPos >= intArr.length) {
                    /** @type {?} */
                    var a = new Array(newPos * 2);
                    a = intArr.slice(0, newPos);
                    intArr = a;
                }
                intArr[newPos] = val;
                intArr[0] = newPos;
                return intArr;
            };
        // only rules that use only the activated (queried) keys
        /**
         * @param {?} rules
         * @param {?} arr
         * @param {?} usesMask
         * @return {?}
         */
        Match.filterMustUse = /**
         * @param {?} rules
         * @param {?} arr
         * @param {?} usesMask
         * @return {?}
         */
            function (rules, arr, usesMask) {
                if (core.isBlank(arr)) {
                    return null;
                }
                /** @type {?} */
                var result;
                /** @type {?} */
                var count = arr[0];
                for (var i = 0; i < count; i++) {
                    /** @type {?} */
                    var r = arr[i + 1];
                    /** @type {?} */
                    var rule = rules[r];
                    if ((rule.keyMatchesMask & usesMask) !== 0) {
                        result = Match.addInt(result, r);
                    }
                }
                return result;
            };
        /**
         * Intersects two rulevecs.  This is not a traditional intersection where only items in both
         * inputs are included in the result: we only intersect rules that match on common keys;
         * others are unioned.
         *
         * For instance, say we have the following inputs:
         *      a:  [matched on: class, layout]  (class=Foo, layout=Inspect)
         *          1) class=Foo layout=Inspect { ... }
         *          2) class=Foo operation=edit { ... }
         *          3) layout=Inspect operation=view { ... }
         *
         *      b:  [matched on: operation]  (operation=view)
         *          3) layout=Inspect operation=view { ... }
         *          4) operation=view type=String { ... }
         *          5) operation=view layout=Tabs { ... }
         *
         * The result should be: 1, 3, 4
         * I.e.: items that appear in both (#3 above) are included, as are items that appear in just
         * one,
         * *but don't match on the keys in the other* (#1 and #4 above).
         *
         * @param allRules the full rule base
         * @param a first vector of rule indexes
         * @param b second vector of rule indexes
         * @param aMask mask indicating the keys against which the first rule vectors items have
         *     already been matched
         * @param bMask mask indicating the keys against which the second rule vectors items have
         *     already been matched
         * @return rule vector for the matches
         */
        /**
         * Intersects two rulevecs.  This is not a traditional intersection where only items in both
         * inputs are included in the result: we only intersect rules that match on common keys;
         * others are unioned.
         *
         * For instance, say we have the following inputs:
         *      a:  [matched on: class, layout]  (class=Foo, layout=Inspect)
         *          1) class=Foo layout=Inspect { ... }
         *          2) class=Foo operation=edit { ... }
         *          3) layout=Inspect operation=view { ... }
         *
         *      b:  [matched on: operation]  (operation=view)
         *          3) layout=Inspect operation=view { ... }
         *          4) operation=view type=String { ... }
         *          5) operation=view layout=Tabs { ... }
         *
         * The result should be: 1, 3, 4
         * I.e.: items that appear in both (#3 above) are included, as are items that appear in just
         * one,
         * *but don't match on the keys in the other* (#1 and #4 above).
         *
         * @param {?} allRules the full rule base
         * @param {?} a first vector of rule indexes
         * @param {?} b second vector of rule indexes
         * @param {?} aMask mask indicating the keys against which the first rule vectors items have
         *     already been matched
         * @param {?} bMask mask indicating the keys against which the second rule vectors items have
         *     already been matched
         * @return {?} rule vector for the matches
         */
        Match.intersect = /**
         * Intersects two rulevecs.  This is not a traditional intersection where only items in both
         * inputs are included in the result: we only intersect rules that match on common keys;
         * others are unioned.
         *
         * For instance, say we have the following inputs:
         *      a:  [matched on: class, layout]  (class=Foo, layout=Inspect)
         *          1) class=Foo layout=Inspect { ... }
         *          2) class=Foo operation=edit { ... }
         *          3) layout=Inspect operation=view { ... }
         *
         *      b:  [matched on: operation]  (operation=view)
         *          3) layout=Inspect operation=view { ... }
         *          4) operation=view type=String { ... }
         *          5) operation=view layout=Tabs { ... }
         *
         * The result should be: 1, 3, 4
         * I.e.: items that appear in both (#3 above) are included, as are items that appear in just
         * one,
         * *but don't match on the keys in the other* (#1 and #4 above).
         *
         * @param {?} allRules the full rule base
         * @param {?} a first vector of rule indexes
         * @param {?} b second vector of rule indexes
         * @param {?} aMask mask indicating the keys against which the first rule vectors items have
         *     already been matched
         * @param {?} bMask mask indicating the keys against which the second rule vectors items have
         *     already been matched
         * @return {?} rule vector for the matches
         */
            function (allRules, a, b, aMask, bMask) {
                if (core.isBlank(a)) {
                    return b;
                }
                /** @type {?} */
                var result;
                /** @type {?} */
                var iA = 1;
                /** @type {?} */
                var sizeA = core.isPresent(a[0]) ? a[0] : 0;
                /** @type {?} */
                var iB = 1;
                /** @type {?} */
                var sizeB = core.isPresent(b[0]) ? b[0] : 0;
                Match._Debug_ElementProcessCount += sizeA + sizeB;
                while (iA <= sizeA || iB <= sizeB) {
                    /** @type {?} */
                    var iAMask = (iA <= sizeA) ? allRules[a[iA]].keyIndexedMask : 0;
                    /** @type {?} */
                    var iBMask = (iB <= sizeB) ? allRules[b[iB]].keyIndexedMask : 0;
                    /** @type {?} */
                    var c = (iA > sizeA ? 1 : (iB > sizeB ? -1 : (a[iA] - b[iB])));
                    if (c === 0) {
                        result = Match.addInt(result, a[iA]);
                        iA++;
                        iB++;
                    }
                    else if (c < 0) {
                        // If A not in B, but A doesn't filter on B's mask, then add it
                        if ((iAMask & bMask) === 0) {
                            result = Match.addInt(result, a[iA]);
                        }
                        iA++;
                    }
                    else {
                        if ((iBMask & aMask) === 0) {
                            result = Match.addInt(result, b[iB]);
                        }
                        iB++;
                    }
                }
                return result;
            };
        /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        Match.union = /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
            function (a, b) {
                if (core.isBlank(a)) {
                    return b;
                }
                if (core.isBlank(b)) {
                    return a;
                }
                /** @type {?} */
                var sizeA = a[0];
                /** @type {?} */
                var sizeB = b[0];
                if (sizeA === 0) {
                    return b;
                }
                if (sizeB === 0) {
                    return a;
                }
                Match._Debug_ElementProcessCount += (sizeA + sizeB);
                /** @type {?} */
                var result;
                /** @type {?} */
                var iA = 1;
                /** @type {?} */
                var vA = a[1];
                /** @type {?} */
                var iB = 1;
                /** @type {?} */
                var vB = b[1];
                while (iA <= sizeA || iB <= sizeB) {
                    /** @type {?} */
                    var c = vA - vB;
                    result = Match.addInt(result, ((c <= 0) ? vA : vB));
                    if (c <= 0) {
                        iA++;
                        vA = (iA <= sizeA) ? a[iA] : Number.MAX_VALUE;
                    }
                    if (c >= 0) {
                        iB++;
                        vB = (iB <= sizeB) ? b[iB] : Number.MAX_VALUE;
                    }
                }
                return result;
            };
        /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        Match._arrayEq = /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
            function (a, b) {
                if (a === b) {
                    return true;
                }
                if (a === null || b === null) {
                    return false;
                }
                /** @type {?} */
                var count = a[0];
                if (count !== b[0]) {
                    return false;
                }
                for (var i = 1; i <= count; i++) {
                    if (a[i] !== b[i]) {
                        return false;
                    }
                }
                return true;
            };
        /**
         * Filter a partially matched set of rules down to the actual matches.
         * The input set of rules, matchesArr, is based on a *partial* match, and so includes rules
         * that were touched by some of the queried keys, but that may also require *additional* keys
         * that we have not matched on -- these must now be removed. Also, when 'partial indexing',
         * rules are indexed on a subset of their keys, so matchesArr will contain rules that need to
         * be evaluated against those MatchValues upon which they were not indexed (and therefore not
         * intersected / filtered on in the lookup process).
         */
        /**
         * Filter a partially matched set of rules down to the actual matches.
         * The input set of rules, matchesArr, is based on a *partial* match, and so includes rules
         * that were touched by some of the queried keys, but that may also require *additional* keys
         * that we have not matched on -- these must now be removed. Also, when 'partial indexing',
         * rules are indexed on a subset of their keys, so matchesArr will contain rules that need to
         * be evaluated against those MatchValues upon which they were not indexed (and therefore not
         * intersected / filtered on in the lookup process).
         * @param {?} allRules
         * @param {?} maxRule
         * @param {?} matchesArr
         * @param {?} queriedMask
         * @param {?} matchArray
         * @return {?}
         */
        Match.prototype.filter = /**
         * Filter a partially matched set of rules down to the actual matches.
         * The input set of rules, matchesArr, is based on a *partial* match, and so includes rules
         * that were touched by some of the queried keys, but that may also require *additional* keys
         * that we have not matched on -- these must now be removed. Also, when 'partial indexing',
         * rules are indexed on a subset of their keys, so matchesArr will contain rules that need to
         * be evaluated against those MatchValues upon which they were not indexed (and therefore not
         * intersected / filtered on in the lookup process).
         * @param {?} allRules
         * @param {?} maxRule
         * @param {?} matchesArr
         * @param {?} queriedMask
         * @param {?} matchArray
         * @return {?}
         */
            function (allRules, maxRule, matchesArr, queriedMask, matchArray) {
                if (core.isBlank(matchesArr)) {
                    return null;
                }
                /** @type {?} */
                var result;
                /** @type {?} */
                var count = matchesArr[0];
                for (var i = 0; i < count; i++) {
                    /** @type {?} */
                    var r = matchesArr[i + 1];
                    if (r >= maxRule) {
                        continue;
                    }
                    /** @type {?} */
                    var rule = allRules[r];
                    if (rule.disabled() || (rule.keyAntiMask & queriedMask) !== 0) {
                        continue;
                    }
                    // Must have matched on (activate) all match keys for this rule, *and*
                    // if have any non-indexed rules, need to check match on those
                    if (((rule.keyMatchesMask & ~queriedMask) === 0) &&
                        ((rule.keyMatchesMask === rule.keyIndexedMask)
                            ||
                                (core.isPresent(matchArray) && rule.matches(matchArray)))) {
                        if (Meta._DebugDoubleCheckMatches && !(matchArray != null && rule.matches(matchArray))) {
                            core.assert(false, 'Inconsistent (negative) match on rule: ' + rule);
                        }
                        result = Match.addInt(result, r);
                    }
                    else if (Meta._DebugDoubleCheckMatches && (matchArray != null && rule.matches(matchArray))) ;
                }
                // if (isPresent(result) && result.length > 0) {
                //     print('\n\n\n #### Filtering RESULT: ' + result[0]);
                //
                //     for (let i = 1; i <= result[0]; i++) {
                //         print('## ' + result[i] + '): ' + allRules[result[i]].toString());
                //     }
                // }
                return result;
            };
        /**
         * @return {?}
         */
        Match.prototype.hashCode = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var ret = this._keysMatchedMask * 31 + this._matchPathCRC;
                if (core.isPresent(this._matches)) {
                    for (var i = 0, c = this._matches[0]; i < c; i++) {
                        ret = core.crc32(ret, this._matches[i + 1]);
                    }
                }
                return ret;
            };
        Object.defineProperty(Match.prototype, "keysMatchedMask", {
            get: /**
             * @return {?}
             */ function () {
                return this._keysMatchedMask;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} o
         * @return {?}
         */
        Match.prototype.equalsTo = /**
         * @param {?} o
         * @return {?}
         */
            function (o) {
                return ((o instanceof Match) && this._keysMatchedMask === o._keysMatchedMask) &&
                    this._matchPathCRC === o._matchPathCRC &&
                    Match._arrayEq(this._matches, o._matches);
            };
        /**
         * @return {?}
         */
        Match.prototype.toString = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var buf = new core.StringJoiner([]);
                buf.add('_matches');
                buf.add((core.isPresent(this._matches) ? this._matches.length : 0) + '');
                buf.add('_keysMatchedMask');
                buf.add(this._keysMatchedMask + '');
                buf.add('_keysMatchedMask');
                buf.add(this._matchPathCRC + '');
                buf.add('hashcode');
                buf.add(this.hashCode() + '');
                return buf.toString();
            };
        Match.EmptyMatchArray = [];
        Match._Debug_ElementProcessCount = 0;
        return Match;
    }());
    /**
     *  An Match which includes a UnionMatchResult part (which is used by Context to
     * represent the set of overridden key/values up the stack)
     */
    var /**
     *  An Match which includes a UnionMatchResult part (which is used by Context to
     * represent the set of overridden key/values up the stack)
     */ MatchWithUnion = (function (_super) {
        __extends(MatchWithUnion, _super);
        function MatchWithUnion(_matches, _keysMatchedMask, _matchPathCRC, _overUnionMatch) {
            if (_matchPathCRC === void 0) {
                _matchPathCRC = 0;
            }
            var _this = _super.call(this, _matches, _keysMatchedMask, _matchPathCRC) || this;
            _this._matches = _matches;
            _this._keysMatchedMask = _keysMatchedMask;
            _this._matchPathCRC = _matchPathCRC;
            _this._overUnionMatch = _overUnionMatch;
            return _this;
        }
        /**
         * @param {?} o
         * @return {?}
         */
        MatchWithUnion.prototype.equalsTo = /**
         * @param {?} o
         * @return {?}
         */
            function (o) {
                return _super.prototype.equalsTo.call(this, o) && ((this._overUnionMatch === o._overUnionMatch) ||
                    ((core.isPresent(this._overUnionMatch)) && core.isPresent(o._overUnionMatch) && this._overUnionMatch.equalsTo(o._overUnionMatch)));
            };
        return MatchWithUnion;
    }(Match));
    /**
     *  MatchResult represents the result of computing the set of matching rules
     *  based on the key/value on this instance, and the other key/value pairs
     * on its predecessor chain.  I.e. to find the matching rules for the context keys
     * {operation=edit; layout=Inspect; class=Foo}, first a MatchResult is created for
     * 'operation=edit' and passed as the 'prev' to the creation of another for 'layout=Inspect',
     * and so on.  In this way the MatchResults form a *(sharable) partial-match tree.*
     *
     * The ability to result previous partial match 'paths' is an important optimization:
     * the primary client of MatchResult (and of rule matching in general) is the Context, when each
     * assignment pushes a record on a stack that (roughly) extends the Match from the previous
     * assignment.  By caching MatchResult instances on the _Assignment records, matching is limited
     *  to the *incremental* matching on just the new assignment, not a full match on all keys in the
     *  context.
     *
     * Further, a MatchResult caches the *property map* resulting from the application of the rules
     *  that it matches.  By caching MatchResult objects (and caching the map from
     *  Rule vector (AKA Match) -> MatchResult -> PropertyMap), redudant rule application (and creation
     * of additional property maps) is avoided.
     */
    var /**
     *  MatchResult represents the result of computing the set of matching rules
     *  based on the key/value on this instance, and the other key/value pairs
     * on its predecessor chain.  I.e. to find the matching rules for the context keys
     * {operation=edit; layout=Inspect; class=Foo}, first a MatchResult is created for
     * 'operation=edit' and passed as the 'prev' to the creation of another for 'layout=Inspect',
     * and so on.  In this way the MatchResults form a *(sharable) partial-match tree.*
     *
     * The ability to result previous partial match 'paths' is an important optimization:
     * the primary client of MatchResult (and of rule matching in general) is the Context, when each
     * assignment pushes a record on a stack that (roughly) extends the Match from the previous
     * assignment.  By caching MatchResult instances on the _Assignment records, matching is limited
     *  to the *incremental* matching on just the new assignment, not a full match on all keys in the
     *  context.
     *
     * Further, a MatchResult caches the *property map* resulting from the application of the rules
     *  that it matches.  By caching MatchResult objects (and caching the map from
     *  Rule vector (AKA Match) -> MatchResult -> PropertyMap), redudant rule application (and creation
     * of additional property maps) is avoided.
     */ MatchResult = (function (_super) {
        __extends(MatchResult, _super);
        // Meta meta, Meta.KeyData keyData, Object value, MatchResult prev)
        function MatchResult(_meta, _keyData, _value, _prevMatch) {
            var _this = _super.call(this, null, null, 0, (_prevMatch != null) ? _prevMatch._overUnionMatch : null) || this;
            _this._meta = _meta;
            _this._keyData = _keyData;
            _this._value = _value;
            _this._prevMatch = _prevMatch;
            _this._metaGeneration = 0;
            _this._initMatch();
            return _this;
        }
        /**
         * @param {?} over
         * @return {?}
         */
        MatchResult.prototype.setOverridesMatch = /**
         * @param {?} over
         * @return {?}
         */
            function (over) {
                this._overUnionMatch = over;
            };
        /**
         * @return {?}
         */
        MatchResult.prototype.matches = /**
         * @return {?}
         */
            function () {
                this._invalidateIfStale();
                if (core.isBlank(this._matches)) {
                    this._initMatch();
                }
                return this._matches;
            };
        /**
         * @return {?}
         */
        MatchResult.prototype.filterResult = /**
         * @return {?}
         */
            function () {
                return this.filter(this._meta._rules, this._meta._ruleCount, this.matches(), this._keysMatchedMask, null);
            };
        /**
         * Fill in matchArray with MatchValues to use in Selector matching
         * @param matchArray
         */
        /**
         * Fill in matchArray with MatchValues to use in Selector matching
         * @param {?} matchArray
         * @return {?}
         */
        MatchResult.prototype.initMatchValues = /**
         * Fill in matchArray with MatchValues to use in Selector matching
         * @param {?} matchArray
         * @return {?}
         */
            function (matchArray) {
                if (core.isPresent(this._prevMatch)) {
                    this._prevMatch.initMatchValues(matchArray);
                }
                if (core.isPresent(this._overUnionMatch)) {
                    this._overUnionMatch.initMatchValues(matchArray);
                }
                this._meta.matchArrayAssign(matchArray, this._keyData, this._keyData.matchValue(this._value));
            };
        /**
         * @return {?}
         */
        MatchResult.prototype.filteredMatches = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var matches = this.matches();
                /** @type {?} */
                var keysMatchedMask = this._keysMatchedMask | (core.isPresent(this._overUnionMatch) ? this._overUnionMatch._keysMatchedMask : 0);
                /** @type {?} */
                var overrideMatches;
                if (core.isPresent(this._overUnionMatch) && core.isPresent((overrideMatches = this._overUnionMatch.matches()))) {
                    if (core.isBlank(matches)) {
                        matches = overrideMatches;
                    }
                    else {
                        matches = Match.intersect(this._meta._rules, matches, overrideMatches, this._keysMatchedMask, this._overUnionMatch._keysMatchedMask);
                    }
                }
                /** @type {?} */
                var matchArray;
                if (Meta._UsePartialIndexing) {
                    matchArray = this._meta.newMatchArray();
                    this.initMatchValues(matchArray);
                }
                return this.filter(this._meta._rules, this._meta._ruleCount, matches, keysMatchedMask, matchArray);
            };
        /**
         * @param {?} key
         * @return {?}
         */
        MatchResult.prototype.valueForKey = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return (this._keyData._key === key) ? this._value :
                    (core.isPresent(this._prevMatch) ? this._prevMatch.valueForKey(key) : null);
            };
        /**
         * @return {?}
         */
        MatchResult.prototype.immutableCopy = /**
         * @return {?}
         */
            function () {
                this._invalidateIfStale();
                return new MatchWithUnion(this.matches(), this._keysMatchedMask, this._matchPathCRC, this._overUnionMatch);
            };
        /**
         * @return {?}
         */
        MatchResult.prototype._invalidateIfStale = /**
         * @return {?}
         */
            function () {
                if (this._metaGeneration < this._meta.ruleSetGeneration) {
                    this._initMatch();
                }
            };
        /**
         * @param {?} a
         * @param {?} b
         * @param {?} aMask
         * @param {?} bMask
         * @return {?}
         */
        MatchResult.prototype.join = /**
         * @param {?} a
         * @param {?} b
         * @param {?} aMask
         * @param {?} bMask
         * @return {?}
         */
            function (a, b, aMask, bMask) {
                return Match.intersect(this._meta._rules, a, b, aMask, bMask);
            };
        /**
         * @return {?}
         */
        MatchResult.prototype._initMatch = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var keyMask = core.shiftLeft(1, this._keyData._id);
                /** @type {?} */
                var newArr;
                if (core.isArray(this._value)) {
                    try {
                        for (var _a = __values(this._value), _b = _a.next(); !_b.done; _b = _a.next()) {
                            var v = _b.value;
                            /** @type {?} */
                            var a = this._keyData.lookup(this._meta, v);
                            newArr = Match.union(a, newArr);
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (_b && !_b.done && (_c = _a.return))
                                _c.call(_a);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                }
                else {
                    newArr = this._keyData.lookup(this._meta, this._value);
                }
                /** @type {?} */
                var prevMatches = (core.isBlank(this._prevMatch)) ? null : this._prevMatch.matches();
                this._keysMatchedMask = (core.isBlank(this._prevMatch)) ? keyMask : (keyMask | this._prevMatch._keysMatchedMask);
                if (core.isBlank(prevMatches)) {
                    this._matches = newArr;
                    // Todo: not clear why this is needed, but without it we end up failing to filter
                    // certain matches that should be filtered (resulting in bad matches)
                    if (!Meta._UsePartialIndexing) {
                        this._keysMatchedMask = keyMask;
                    }
                }
                else {
                    if (core.isBlank(newArr)) {
                        newArr = Match.EmptyMatchArray;
                    }
                    // Join
                    this._matches = this.join(newArr, prevMatches, keyMask, this._prevMatch._keysMatchedMask);
                }
                // compute path CRC
                this._matchPathCRC = -1;
                for (var mr = this; mr != null; mr = mr._prevMatch) {
                    this._matchPathCRC = core.crc32(this._matchPathCRC, mr._keyData._key.length);
                    if (core.isPresent(mr._value)) {
                        /** @type {?} */
                        var value = core.isArray(mr._value) ? mr._value.join(',') : mr._value;
                        this._matchPathCRC = core.crc32(this._matchPathCRC, core.hashCode(value));
                    }
                }
                if (this._matchPathCRC === 0) {
                    this._matchPathCRC = 1;
                }
                this._metaGeneration = this._meta.ruleSetGeneration;
                this._properties = null;
                var e_1, _c;
            };
        /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        MatchResult.prototype._logMatchDiff = /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
            function (a, b) {
                /** @type {?} */
                var iA = 1;
                /** @type {?} */
                var sizeA = a[0];
                /** @type {?} */
                var iB = 1;
                /** @type {?} */
                var sizeB = b[0];
                while (iA <= sizeA || iB <= sizeB) {
                    /** @type {?} */
                    var c = (iA > sizeA ? 1 : (iB > sizeB ? -1 : (a[iA] - b[iB])));
                    if (c === 0) {
                        iA++;
                        iB++;
                    }
                    else if (c < 0) {
                        // If A not in B, but A doesn't filter on B's mask, then add it
                        core.print('  -- Only in A: ' + this._meta._rules[a[iA]]);
                        iA++;
                    }
                    else {
                        core.print('  -- Only in B: ' + this._meta._rules[b[iB]]);
                        iB++;
                    }
                }
            };
        /**
         * @return {?}
         */
        MatchResult.prototype.properties = /**
         * @return {?}
         */
            function () {
                this._invalidateIfStale();
                if (core.isBlank(this._properties)) {
                    this._properties = this._meta.propertiesForMatch(this);
                }
                return this._properties;
            };
        /**
         * @return {?}
         */
        MatchResult.prototype.debugString = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var sj = new core.StringJoiner(['Match Result path: \n']);
                this._appendPrevPath(sj);
                if (core.isPresent(this._overUnionMatch)) {
                    sj.add('\nOverrides path: ');
                    this._overUnionMatch._appendPrevPath(sj);
                }
                return sj.toString();
            };
        /**
         * @param {?} buf
         * @return {?}
         */
        MatchResult.prototype._appendPrevPath = /**
         * @param {?} buf
         * @return {?}
         */
            function (buf) {
                if (core.isPresent(this._prevMatch)) {
                    this._prevMatch._appendPrevPath(buf);
                    buf.add(' -> ');
                }
                buf.add(this._keyData._key);
                buf.add('=');
                buf.add(this._value);
            };
        /**
         * @param {?} values
         * @param {?} meta
         * @return {?}
         */
        MatchResult.prototype._checkMatch = /**
         * @param {?} values
         * @param {?} meta
         * @return {?}
         */
            function (values, meta) {
                /** @type {?} */
                var arr = this.filterResult();
                if (core.isBlank(arr)) {
                    return;
                }
                /** @type {?} */
                var count = arr[0];
                for (var i = 0; i < count; i++) {
                    /** @type {?} */
                    var r = this._meta._rules[arr[i + 1]];
                    r._checkRule(values, meta);
                }
            };
        /**
         * @param {?} o
         * @return {?}
         */
        MatchResult.prototype.equalsTo = /**
         * @param {?} o
         * @return {?}
         */
            function (o) {
                return (o instanceof MatchResult) && _super.prototype.equalsTo.call(this, o) && (o._metaGeneration === this._metaGeneration) &&
                    o._properties.size === this._properties.size;
            };
        return MatchResult;
    }(MatchWithUnion));
    var UnionMatchResult = (function (_super) {
        __extends(UnionMatchResult, _super);
        function UnionMatchResult(meta, keyData, value, prevMatch) {
            return _super.call(this, meta, keyData, value, prevMatch) || this;
        }
        /**
         * @param {?} a
         * @param {?} b
         * @param {?} aMask
         * @param {?} bMask
         * @return {?}
         */
        UnionMatchResult.prototype.join = /**
         * @param {?} a
         * @param {?} b
         * @param {?} aMask
         * @param {?} bMask
         * @return {?}
         */
            function (a, b, aMask, bMask) {
                return Match.union(a, b);
            };
        return UnionMatchResult;
    }(MatchResult));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * A map that masks on top of an (immutable) parent map
     * @template K, V
     */
    var NestedMap = (function () {
        function NestedMap(_parent, _map) {
            this._parent = _parent;
            this._map = _map;
            this._overrideCount = 0;
            this._size = 0;
            if (core.isBlank(_map)) {
                this._map = new Map();
            }
        }
        /**
         * @param {?} iteratorResult
         * @return {?}
         */
        NestedMap.toMapEntry = /**
         * @param {?} iteratorResult
         * @return {?}
         */
            function (iteratorResult) {
                /** @type {?} */
                var value = iteratorResult.value;
                if (core.isPresent(value) && NestedMap.isMapEntry(value)) {
                    return value;
                }
                /** @type {?} */
                var entry = {
                    key: (core.isPresent(iteratorResult.value)) ? iteratorResult.value[0] : iteratorResult.value,
                    value: (core.isPresent(iteratorResult.value)) ? iteratorResult.value[1] : iteratorResult.value,
                    hasNext: !iteratorResult.done
                };
                return entry;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NestedMap.isMapEntry = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return core.isPresent(value) && core.isPresent(value.hasNext);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NestedMap.isNMNullMarker = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return core.isPresent(value) && value['nesnullmarker'];
            };
        /**
         * @return {?}
         */
        NestedMap.prototype.toMap = /**
         * @return {?}
         */
            function () {
                return this._parent;
            };
        /**
         * @param {?} newParent
         * @return {?}
         */
        NestedMap.prototype.reparentedMap = /**
         * @param {?} newParent
         * @return {?}
         */
            function (newParent) {
                /** @type {?} */
                var newMap = new NestedMap(newParent, this._map);
                newMap._overrideCount = this._overrideCount;
                return newMap;
            };
        /**
         * @param {?} key
         * @return {?}
         */
        NestedMap.prototype.get = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                /** @type {?} */
                var val = this._map.has(key) ? this._map.get(key) : this._parent.get(key);
                return NestedMap.isNMNullMarker(val) ? null : val;
            };
        /**
         * @return {?}
         */
        NestedMap.prototype.keys = /**
         * @return {?}
         */
            function () {
                return core.unimplemented();
            };
        /**
         * @return {?}
         */
        NestedMap.prototype.values = /**
         * @return {?}
         */
            function () {
                return core.unimplemented();
            };
        /**
         * @return {?}
         */
        NestedMap.prototype.clear = /**
         * @return {?}
         */
            function () {
                this._parent.clear();
                this._map.clear();
            };
        /**
         * @param {?} key
         * @param {?=} value
         * @return {?}
         */
        NestedMap.prototype.set = /**
         * @param {?} key
         * @param {?=} value
         * @return {?}
         */
            function (key, value) {
                /** @type {?} */
                var orig = this._map.get(key);
                if ((NestedMap.isNMNullMarker(orig) || core.isBlank(orig)) && this._parent.has(key)) {
                    this._overrideCount += (NestedMap.isNMNullMarker(orig) ? -1 : 1);
                }
                this._map.set(key, value);
                return this;
            };
        /**
         * @param {?} key
         * @return {?}
         */
        NestedMap.prototype.delete = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                /** @type {?} */
                var returnVal = false;
                /** @type {?} */
                var orig = null;
                if (this._map.has(key)) {
                    orig = this._map.delete(key);
                    returnVal = true;
                    // print('Removing: ' , orig);
                    if (this._parent.has(key)) {
                        this._map.set(key, NestedMap._NullMarker);
                        // _overrideCount--;
                        this._overrideCount++;
                    }
                }
                else if (this._parent.has(key)) {
                    // we're "removing" a value we don't have (but that our parent does)
                    // we need to store a null override
                    orig = this._parent.get(key);
                    // print('Removing: ' , orig);
                    this._map.set(key, NestedMap._NullMarker);
                    this._overrideCount += 2;
                }
                return returnVal;
            };
        /**
         * @param {?} callbackfn
         * @param {?=} thisArg
         * @return {?}
         */
        NestedMap.prototype.forEach = /**
         * @param {?} callbackfn
         * @param {?=} thisArg
         * @return {?}
         */
            function (callbackfn, thisArg) {
                /** @type {?} */
                var entries = this.entries();
                /** @type {?} */
                var nextEntry;
                while ((nextEntry = NestedMap.toMapEntry(entries.next())) && nextEntry.hasNext) {
                    callbackfn(nextEntry.value, nextEntry.key, this._parent);
                }
            };
        /**
         * @param {?} key
         * @return {?}
         */
        NestedMap.prototype.has = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return this._map.has(key) ? (!NestedMap.isNMNullMarker(this._map.get(key))) : this._parent.has(key);
            };
        /**
         * @return {?}
         */
        NestedMap.prototype[Symbol.iterator] = /**
         * @return {?}
         */
            function () {
                return new NestedEntryIterator(this);
            };
        /**
         * @return {?}
         */
        NestedMap.prototype.entries = /**
         * @return {?}
         */
            function () {
                return new NestedEntryIterator(this);
            };
        Object.defineProperty(NestedMap.prototype, "size", {
            get: /**
             * @return {?}
             */ function () {
                return this._parent.size + this._map.size - this._overrideCount;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NestedMap.prototype, "map", {
            get: /**
             * @return {?}
             */ function () {
                return this._map;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NestedMap.prototype, "parent", {
            get: /**
             * @return {?}
             */ function () {
                return this._parent;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NestedMap.prototype.toString = /**
         * @return {?}
         */
            function () {
                return 'NestedMap';
            };
        NestedMap._NullMarker = { nesnullmarker: true };
        return NestedMap;
    }());
    /**
     * @template K, V
     */
    var /**
     * @template K, V
     */ NestedEntryIterator = (function () {
        function NestedEntryIterator(_nestedMap) {
            this._nestedMap = _nestedMap;
            this._parentIterator = _nestedMap.parent.entries();
            this._nestedIterator = _nestedMap.map.entries();
            this.advanceToNext();
        }
        /**
         * @return {?}
         */
        NestedEntryIterator.prototype.next = /**
         * @return {?}
         */
            function () {
                // assert(isPresent(this._nextEntry) , 'next() when no more elements"');
                this._currentEntry = this._nextEntry;
                this.advanceToNext();
                /** @type {?} */
                var next = {
                    value: this._currentEntry,
                    done: !this._currentEntry.hasNext
                };
                return next;
            };
        /**
         * @return {?}
         */
        NestedEntryIterator.prototype[Symbol.iterator] = /**
         * @return {?}
         */
            function () {
                return this;
            };
        /**
         * @return {?}
         */
        NestedEntryIterator.prototype.advanceToNext = /**
         * @return {?}
         */
            function () {
                this._fromNested = false;
                // Note: we need to skip nulls (masked values)
                while (!this._fromNested && (this._currentNestedEntry = NestedMap.toMapEntry(this._nestedIterator.next())) && this._currentNestedEntry.hasNext) {
                    this._nextEntry = this._currentNestedEntry;
                    if (!NestedMap.isNMNullMarker(this._nextEntry.value)) {
                        this._fromNested = true;
                    }
                }
                if (!this._fromNested) {
                    while ((this._currentParentEntry = NestedMap.toMapEntry(this._parentIterator.next())) && this._currentParentEntry.hasNext) {
                        this._nextEntry = this._currentParentEntry;
                        if (!this._nestedMap.map.has(this._nextEntry.key)) {
                            return;
                        }
                    }
                    this._nextEntry = this._currentParentEntry;
                }
            };
        return NestedEntryIterator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ DynamicPropertyValue = (function () {
        function DynamicPropertyValue() {
        }
        /**
         * @param {?} context
         * @return {?}
         */
        DynamicPropertyValue.prototype.evaluate = /**
         * @param {?} context
         * @return {?}
         */
            function (context) {
                return core.unimplemented();
            };
        /**
         * @param {?} context
         * @return {?}
         */
        DynamicPropertyValue.prototype.bind = /**
         * @param {?} context
         * @return {?}
         */
            function (context) {
                return core.unimplemented();
            };
        return DynamicPropertyValue;
    }());
    /**
     * ;marker; interface for DynamicPropertyValues that depend only on their match context and
     * therefore can be computed and cached statically in the Context Activation tree
     */
    var /**
     * ;marker; interface for DynamicPropertyValues that depend only on their match context and
     * therefore can be computed and cached statically in the Context Activation tree
     */ StaticallyResolvable = (function (_super) {
        __extends(StaticallyResolvable, _super);
        function StaticallyResolvable() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return StaticallyResolvable;
    }(DynamicPropertyValue));
    var StaticDynamicWrapper = (function (_super) {
        __extends(StaticDynamicWrapper, _super);
        function StaticDynamicWrapper(_orig) {
            var _this = _super.call(this) || this;
            _this._orig = _orig;
            _this.propertyAwaking = true;
            return _this;
        }
        /**
         * @return {?}
         */
        StaticDynamicWrapper.prototype.getDynamicValue = /**
         * @return {?}
         */
            function () {
                return this._orig;
            };
        /**
         * @param {?} map
         * @return {?}
         */
        StaticDynamicWrapper.prototype.awakeForPropertyMap = /**
         * @param {?} map
         * @return {?}
         */
            function (map) {
                /** @type {?} */
                var origaw = (isPropertyMapAwaking(this._orig)) ? /** @type {?} */ (((this._orig)).awakeForPropertyMap(map)) : this._orig;
                return new StaticDynamicWrapper(origaw);
            };
        /**
         * @param {?} context
         * @return {?}
         */
        StaticDynamicWrapper.prototype.evaluate = /**
         * @param {?} context
         * @return {?}
         */
            function (context) {
                // we lazily static evaluate our value and cache the result
                if (core.isBlank(this._cached)) {
                    this._cached = context.staticallyResolveValue(this._orig);
                }
                return this._cached;
            };
        /**
         * @return {?}
         */
        StaticDynamicWrapper.prototype.toString = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var sj = new core.StringJoiner(['StaticDynamicWrapper']);
                sj.add('(');
                sj.add(((core.isPresent(this._cached)) ? this._cached : this._orig));
                sj.add(((core.isBlank(this._cached)) ? ' unevaluated' : ''));
                sj.add(')');
                return sj.toString();
            };
        return StaticDynamicWrapper;
    }(StaticallyResolvable));
    var StaticallyResolvableWrapper = (function (_super) {
        __extends(StaticallyResolvableWrapper, _super);
        function StaticallyResolvableWrapper(_orig) {
            var _this = _super.call(this) || this;
            _this._orig = _orig;
            return _this;
        }
        /**
         * @param {?} context
         * @return {?}
         */
        StaticallyResolvableWrapper.prototype.evaluate = /**
         * @param {?} context
         * @return {?}
         */
            function (context) {
                return this._orig.evaluate(context);
            };
        /**
         * @return {?}
         */
        StaticallyResolvableWrapper.prototype.toString = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var sj = new core.StringJoiner(['StaticallyResolvableWrapper']);
                sj.add('(');
                sj.add(this._orig.toString());
                sj.add(')');
                return sj.toString();
            };
        return StaticallyResolvableWrapper;
    }(StaticallyResolvable));
    var ContextFieldPath = (function (_super) {
        __extends(ContextFieldPath, _super);
        function ContextFieldPath(path) {
            var _this = _super.call(this) || this;
            _this.settable = true;
            _this.fieldPath = new core.FieldPath(path);
            return _this;
        }
        /**
         * @param {?} context
         * @return {?}
         */
        ContextFieldPath.prototype.evaluate = /**
         * @param {?} context
         * @return {?}
         */
            function (context) {
                return this.fieldPath.getFieldValue(context);
            };
        /**
         * @param {?} context
         * @param {?} value
         * @return {?}
         */
        ContextFieldPath.prototype.evaluateSet = /**
         * @param {?} context
         * @param {?} value
         * @return {?}
         */
            function (context, value) {
                this.fieldPath.setFieldValue(context, value);
            };
        return ContextFieldPath;
    }(DynamicPropertyValue));
    /**
     * @param {?} arg
     * @return {?}
     */
    function isDynamicSettable(arg) {
        return core.isPresent(arg.settable);
    }
    var Expr = (function (_super) {
        __extends(Expr, _super);
        function Expr(_expressionString) {
            var _this = _super.call(this) || this;
            _this._expressionString = _expressionString;
            _this._extendedObjects = new Map();
            _this.addTypeToContext('Meta', Meta);
            _this.addTypeToContext('FieldPath', core.FieldPath);
            return _this;
        }
        /**
         * @param {?} name
         * @param {?} context
         * @return {?}
         */
        Expr.prototype.addTypeToContext = /**
         * @param {?} name
         * @param {?} context
         * @return {?}
         */
            function (name, context) {
                if (core.isFunction(context)) {
                    this._extendedObjects.set(name, context);
                }
            };
        /**
         * @param {?} context
         * @return {?}
         */
        Expr.prototype.evaluate = /**
         * @param {?} context
         * @return {?}
         */
            function (context) {
                var _this = this;
                /** @type {?} */
                var index = 0;
                this._extendedObjects.forEach(function (v, k) {
                    /** @type {?} */
                    var typeName = "DynObj" + index++;
                    ((context))[typeName] = v;
                    if (_this._expressionString.indexOf(k + ".") !== -1) {
                        _this._expressionString = _this._expressionString.replace(k + ".", typeName + ".");
                    }
                });
                /** @type {?} */
                var result = core.evalExpressionWithCntx(this._expressionString, '', context, context);
                index = 0;
                this._extendedObjects.forEach(function (v, k) {
                    /** @type {?} */
                    var typeName = "DynObj" + index++;
                    if (core.isPresent(((context))[typeName])) {
                        delete ((context))[typeName];
                        // check if we can use undefined. Delete is pretty slow
                    }
                });
                return result;
            };
        /**
         * @return {?}
         */
        Expr.prototype.toString = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var sj = new core.StringJoiner(['expr:']);
                sj.add('(');
                sj.add(this._expressionString);
                sj.add(')');
                return sj.toString();
            };
        return Expr;
    }(DynamicPropertyValue));
    var DeferredOperationChain = (function (_super) {
        __extends(DeferredOperationChain, _super);
        function DeferredOperationChain(_merger, _orig, _override) {
            var _this = _super.call(this) || this;
            _this._merger = _merger;
            _this._orig = _orig;
            _this._override = _override;
            _this.propertyAwaking = true;
            return _this;
        }
        /**
         * @param {?} context
         * @return {?}
         */
        DeferredOperationChain.prototype.evaluate = /**
         * @param {?} context
         * @return {?}
         */
            function (context) {
                return this._merger.merge(context.resolveValue(this._override), context.resolveValue(this._orig), context.isDeclare());
            };
        /**
         * @param {?} map
         * @return {?}
         */
        DeferredOperationChain.prototype.awakeForPropertyMap = /**
         * @param {?} map
         * @return {?}
         */
            function (map) {
                /** @type {?} */
                var orig = this._orig;
                /** @type {?} */
                var over = this._override;
                if (isPropertyMapAwaking(orig)) {
                    orig = ((orig)).awakeForPropertyMap(map);
                }
                if (isPropertyMapAwaking(over)) {
                    over = ((over)).awakeForPropertyMap(map);
                }
                if (orig !== this._orig || over !== this._override) {
                    return new DeferredOperationChain(this._merger, orig, over);
                }
                return this;
            };
        /**
         * @return {?}
         */
        DeferredOperationChain.prototype.toString = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var sj = new core.StringJoiner(['Chain']);
                sj.add('<');
                sj.add(this._merger.toString());
                sj.add('>');
                sj.add(': ');
                sj.add(this._override);
                sj.add(' => ');
                sj.add(this._orig);
                return sj.toString();
            };
        return DeferredOperationChain;
    }(DynamicPropertyValue));
    var ValueConverter = (function () {
        function ValueConverter() {
        }
        /**
         * @param {?} toType
         * @param {?} value
         * @return {?}
         */
        ValueConverter.value = /**
         * @param {?} toType
         * @param {?} value
         * @return {?}
         */
            function (toType, value) {
                if (toType === 'String') {
                    if (core.isBlank(value) || core.isString(value)) {
                        return value;
                    }
                    return value.toString();
                }
                else if (toType === 'Boolean') {
                    if (core.isBlank(value) || core.isBoolean(value)) {
                        return value;
                    }
                    return core.BooleanWrapper.boleanValue(value);
                }
                else if (toType === 'Number') {
                    if (core.isBlank(value) || core.isNumber(value)) {
                        return value;
                    }
                    // ignore dec. points for now
                    return parseInt(value.toString());
                }
                return value;
            };
        return ValueConverter;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     *
     * Context represents a stack of assignments (e.g. class=User, field=birthDay, operation=edit)
     *  The current set of assignments can be retrieved via values().
     *
     * The current values are run against the Meta rule set to compute the effective PropertyMap
     * (e.g. visible:true, editable:true, component:AWTextField).
     * Some rule evaluations result in *chaining* -- where additional assignments that are
     * 'implied' by the current assignments are applied, (resulting in a revised computation
     * of the current PropertyMap, and possible further chaining).
     * (e.g. field=birthDay may result in type=Date which may result in component:DatePicker)
     *
     * Assignments can be scoped and popped (push(), set(key, value); ...; pop()).
     *
     * The actual computation of rule matches is cached so once a 'path' down the context
     * tree has been exercized subsequent matching traversals (even by other threads/users)
     * is fast.
     *
     *
     * examples of property maps for different scope key
     *
     * <code>
     *     {
     * 'visible': true,
     * 'class_trait': 'fiveZones',
     * 'editable': true,
     * 'bindings': {
     * 'value': 'Default Title'
     * },
     * 'field_trait': 'required',
     * 'label': 'Title',
     * 'type': 'string',
     * 'required': true,
     * 'editing': true,
     * 'valid': '{{(value && value.length > 0) ? true : \'Answer required\'}}',
     * 'component': 'InputFieldComponent',
     * 'field': 'title',
     * 'layout_trait': 'Form',
     * 'trait': 'required',
     * 'rank': 20,
     * 'after': 'zLeft',
     * 'class': 'CheckRequest1'
     * }
     *
     * </code>
     *
     *
     *
     * <code>
     *     {
     * 'visible': true,
     * 'class_trait': 'fiveZones',
     * 'label': 'Check Request1',
     * 'zones': [
     * 'zLeft',
     * 'zRight',
     * 'zTop',
     * 'zBottom',
     * 'zDetail'
     * ],
     * 'editing': true,
     * 'layout': '*',
     * 'component': 'MetaFormComponent',
     * 'layout_trait': 'Form',
     * 'fiveZoneLayout': true,
     * 'trait': 'fiveZones',
     * 'layoutsByZone': {
     * },
     * 'class': 'CheckRequest1',
     * 'fieldsByZone': {
     * 'zLeft': [
     * 'title',
     * 'name'
     * ],
     * 'zNone': [
     * 'fullName'
     * ]
     * }
     * }
     *
     * </code>
     *
     *
     *
     */
    var Context = (function (_super) {
        __extends(Context, _super);
        function Context(_meta, nested) {
            if (nested === void 0) {
                nested = false;
            }
            var _this = _super.call(this) || this;
            _this._meta = _meta;
            _this.nested = nested;
            _this._values = new Map();
            _this._entries = [];
            _this._frameStarts = [];
            _this._recPool = [];
            if (core.isBlank(Context.EmptyMap)) {
                Context.EmptyMap = new PropertyMap();
            }
            Context._Debug_SetsCount = 0;
            _this._accessor = new PropertyAccessor(_this);
            _this._currentActivation = Context.getActivationTree(_meta);
            _this._rootNode = _this._currentActivation;
            _this.isNested = nested;
            return _this;
        }
        /**
         * Implementation notes:
         *
         * Context maintains a stack (_entries) of _ContextRecs (one per assignment) as well as
         * as _frameStack recording the stack positions for each push()/pop().

         * Performance through aggressive global caching of all statically computatble data:
         * - The static (reusable/immutable) part of a ContextRec is factored into _StaticRec
         * - StaticRecs represent individual assignments (context key = value) and cache the
         *      resulting Meta.MatchResult (and associated PropertyMap)
         * - The sub-stack (of forward chained) records associated with each external set()
         *      (or chained *dynamic* value) is recorded in an Activation.
         * - Process-global tree of Activations
         *      - each activation keeps list of its ContextKey/Value-keyed decended Activations
         *
         * Property Contexts.
         *      The notion of a 'PropertyContext' makes the going tricky...
         *       A 'PropertyContextKey' is a key for an 'entity' that properties describe.
         *       (e.g. class, field, action, and layout are property context keys, but editing,
         *       operation, ... are not)
         *       E.g. On an assignment stack with module=Admin class=Foo, field=name, editable=false,
         *       we want the property 'label' to be the label for the *field*, not the class or module
         *       -- i.e. the *top-most* assignment of a PropertyContextKey determines which property
         *       context rules are active.
         *
         *  These rules are activated via a synthetic context key of like 'field_p' or 'class_p'.
         *  Logically, after each assigment we need to figure of which context key should be in
         *  affect an set it on the context, but then automatically pop it off upon the next
         *  assignment (and then recompute again).
         *
         *  Of course, actually pushing and popping context key assignment on every set()
         *  would be expensive so instead we cache the 'propertyActivation' associated with
         *  each activation, and use its values and properties rather than those on the
         *  activation.
         */
        /**
         * Implementation notes:
         *
         * Context maintains a stack (_entries) of _ContextRecs (one per assignment) as well as
         * as _frameStack recording the stack positions for each push()/pop().
         * Performance through aggressive global caching of all statically computatble data:
         * - The static (reusable/immutable) part of a ContextRec is factored into _StaticRec
         * - StaticRecs represent individual assignments (context key = value) and cache the
         *      resulting Meta.MatchResult (and associated PropertyMap)
         * - The sub-stack (of forward chained) records associated with each external set()
         *      (or chained *dynamic* value) is recorded in an Activation.
         * - Process-global tree of Activations
         *      - each activation keeps list of its ContextKey/Value-keyed decended Activations
         *
         * Property Contexts.
         *      The notion of a 'PropertyContext' makes the going tricky...
         *       A 'PropertyContextKey' is a key for an 'entity' that properties describe.
         *       (e.g. class, field, action, and layout are property context keys, but editing,
         *       operation, ... are not)
         *       E.g. On an assignment stack with module=Admin class=Foo, field=name, editable=false,
         *       we want the property 'label' to be the label for the *field*, not the class or module
         *       -- i.e. the *top-most* assignment of a PropertyContextKey determines which property
         *       context rules are active.
         *
         *  These rules are activated via a synthetic context key of like 'field_p' or 'class_p'.
         *  Logically, after each assigment we need to figure of which context key should be in
         *  affect an set it on the context, but then automatically pop it off upon the next
         *  assignment (and then recompute again).
         *
         *  Of course, actually pushing and popping context key assignment on every set()
         *  would be expensive so instead we cache the 'propertyActivation' associated with
         *  each activation, and use its values and properties rather than those on the
         *  activation.
         * @param {?} meta
         * @return {?}
         */
        Context.getActivationTree = /**
         * Implementation notes:
         *
         * Context maintains a stack (_entries) of _ContextRecs (one per assignment) as well as
         * as _frameStack recording the stack positions for each push()/pop().
         * Performance through aggressive global caching of all statically computatble data:
         * - The static (reusable/immutable) part of a ContextRec is factored into _StaticRec
         * - StaticRecs represent individual assignments (context key = value) and cache the
         *      resulting Meta.MatchResult (and associated PropertyMap)
         * - The sub-stack (of forward chained) records associated with each external set()
         *      (or chained *dynamic* value) is recorded in an Activation.
         * - Process-global tree of Activations
         *      - each activation keeps list of its ContextKey/Value-keyed decended Activations
         *
         * Property Contexts.
         *      The notion of a 'PropertyContext' makes the going tricky...
         *       A 'PropertyContextKey' is a key for an 'entity' that properties describe.
         *       (e.g. class, field, action, and layout are property context keys, but editing,
         *       operation, ... are not)
         *       E.g. On an assignment stack with module=Admin class=Foo, field=name, editable=false,
         *       we want the property 'label' to be the label for the *field*, not the class or module
         *       -- i.e. the *top-most* assignment of a PropertyContextKey determines which property
         *       context rules are active.
         *
         *  These rules are activated via a synthetic context key of like 'field_p' or 'class_p'.
         *  Logically, after each assigment we need to figure of which context key should be in
         *  affect an set it on the context, but then automatically pop it off upon the next
         *  assignment (and then recompute again).
         *
         *  Of course, actually pushing and popping context key assignment on every set()
         *  would be expensive so instead we cache the 'propertyActivation' associated with
         *  each activation, and use its values and properties rather than those on the
         *  activation.
         * @param {?} meta
         * @return {?}
         */
            function (meta) {
                /** @type {?} */
                var name = core.objectToName(Activation);
                /** @type {?} */
                var root = meta.identityCache.getValue(name);
                if (core.isBlank(root)) {
                    root = new Activation();
                    meta.identityCache.setValue(name, root);
                }
                return root;
            };
        /**
         * @return {?}
         */
        Context.prototype.push = /**
         * @return {?}
         */
            function () {
                this._frameStarts.push(this._entries.length);
            };
        Object.defineProperty(Context.prototype, "meta", {
            get: /**
             * @return {?}
             */ function () {
                return this._meta;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        Context.prototype.pop = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var size = this._frameStarts.length;
                core.assert(size > 0, 'Popping empty stack');
                /** @type {?} */
                var pos = this._frameStarts.pop();
                /** @type {?} */
                var entriesSize;
                while ((entriesSize = this._entries.length) > pos) {
                    /** @type {?} */
                    var recIdx = entriesSize - 1;
                    /** @type {?} */
                    var rec = this._entries.splice(recIdx, 1)[0];
                    if (rec.srec.lastAssignmentIdx === -1) {
                        this._values.delete(rec.srec.key);
                    }
                    else {
                        this._undoOverride(rec, recIdx);
                    }
                    this._currentActivation = (recIdx > 0)
                        ? this._entries[recIdx - 1].srec.activation
                        : this._rootNode;
                    this.assertContextConsistent();
                    // check rec back into pool for reuse
                    rec.reset();
                    this._recPool.push(rec);
                }
                this._currentProperties = null;
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        Context.prototype.set = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                var _this = this;
                this._set(key, value, false, false);
                // implement default toString for our object so we can retrieve objectTitle
                if (key === ObjectMeta.KeyObject) {
                    /** @type {?} */
                    var toCheck = this._values.get(ObjectMeta.KeyObject);
                    if (core.isBlank(toCheck['$toString'])) {
                        toCheck['$toString'] = function () {
                            /** @type {?} */
                            var clazz = _this.values.get(ObjectMeta.KeyClass);
                            return UIMeta.beautifyClassName(clazz);
                        };
                    }
                }
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        Context.prototype.merge = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                this._set(key, value, true, false);
            };
        /**
         * @param {?} key
         * @return {?}
         */
        Context.prototype.setScopeKey = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                core.assert(this._meta.keyData(key).isPropertyScope, key + ' is not a valid context key');
                /** @type {?} */
                var current = this._currentPropertyScopeKey();
                // Assert.that(current != null, 'Can't set %s as context key when no context key on stack',
                // key); TODO: if current key isChaining then we need to set again to get a non-chaining
                // assignment
                if (!(key === current)) {
                    /** @type {?} */
                    var val = this.values.get(key);
                    // Assert.that(val != null, 'Can't set %s as context key when it has no value already
                    // on the context', key);
                    if (core.isBlank(val)) {
                        val = Meta.KeyAny;
                    }
                    this.set(key, val);
                }
            };
        Object.defineProperty(Context.prototype, "values", {
            get: /**
             * @return {?}
             */ function () {
                /** @type {?} */
                var propVals;
                return (core.ListWrapper.isEmpty(this._entries) ||
                    core.isBlank(propVals = (core.ListWrapper.last(this._entries)).propertyLocalValues(this))) ? this._values : propVals;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Context.prototype, "properties", {
            get: /**
             * @return {?}
             */ function () {
                return this._accessor;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} key
         * @return {?}
         */
        Context.prototype.propertyForKey = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                /** @type {?} */
                var val = this.allProperties().get(key);
                return this.resolveValue(val);
            };
        /**
         * @param {?} key
         * @return {?}
         */
        Context.prototype.listPropertyForKey = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                /** @type {?} */
                var val = this.propertyForKey(key);
                return (core.isBlank(val)) ? [] : (core.isArray(val)) ? val : [val];
            };
        /**
         * @param {?} key
         * @param {?} defaultVal
         * @return {?}
         */
        Context.prototype.booleanPropertyForKey = /**
         * @param {?} key
         * @param {?} defaultVal
         * @return {?}
         */
            function (key, defaultVal) {
                /** @type {?} */
                var val = this.propertyForKey(key);
                return (core.isBlank(val)) ? defaultVal : core.BooleanWrapper.boleanValue(val);
            };
        /**
         * @return {?}
         */
        Context.prototype.allProperties = /**
         * @return {?}
         */
            function () {
                if (core.isBlank(this._currentProperties)) {
                    /** @type {?} */
                    var m = this.lastMatch();
                    if (core.isPresent(m)) {
                        this._currentProperties = m.properties();
                    }
                }
                return core.isPresent(this._currentProperties) ? this._currentProperties : Context.EmptyMap;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        Context.prototype.resolveValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var lastValue;
                while (value !== lastValue && core.isPresent(value) && value instanceof DynamicPropertyValue) {
                    lastValue = value;
                    /** @type {?} */
                    var propValue = value;
                    if (propValue instanceof Expr) {
                        propValue.addTypeToContext('UIMeta', UIMeta);
                    }
                    value = propValue.evaluate(this);
                }
                return value;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        Context.prototype.staticallyResolveValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var lastValue = null;
                while (value !== lastValue && core.isPresent(value) && value instanceof StaticallyResolvable) {
                    lastValue = value;
                    value = value.evaluate(this);
                }
                return value;
            };
        /**
         * @param {?} contextVals
         * @param {?} propertyKey
         * @param {?} staticResolve
         * @return {?}
         */
        Context.prototype.pushAndResolveStatic = /**
         * @param {?} contextVals
         * @param {?} propertyKey
         * @param {?} staticResolve
         * @return {?}
         */
            function (contextVals, propertyKey, staticResolve) {
                var _this = this;
                /** @type {?} */
                var scopeKey;
                this.push();
                core.MapWrapper.iterable(contextVals).forEach(function (value, key) {
                    if ('*' === value) {
                        scopeKey = key;
                    }
                    else {
                        _this.set(key, value);
                    }
                });
                if (core.isPresent(scopeKey)) {
                    this.setScopeKey(scopeKey);
                }
                /** @type {?} */
                var val = this.allProperties().get(propertyKey);
                val = staticResolve ? this.staticallyResolveValue(val) : this.resolveValue(val);
                this.pop();
                return val;
            };
        /**
         * @param {?} contextVals
         * @param {?} propertyKey
         * @return {?}
         */
        Context.prototype.pushAndResolve = /**
         * @param {?} contextVals
         * @param {?} propertyKey
         * @return {?}
         */
            function (contextVals, propertyKey) {
                return this.pushAndResolveStatic(contextVals, propertyKey, false);
            };
        // a (usable) snapshot of the current state of the context
        /**
         * @return {?}
         */
        Context.prototype.snapshot = /**
         * @return {?}
         */
            function () {
                return new Snapshot(this);
            };
        /**
         * Represent current active assignment list meaning it will not include any entries which
         * were overwritten by some late entry having the same key.
         *
         * It does not include entries that were pushed to stack from any Property -> Selector
         * propagation. This creates shell copy and ignoring all last Matches which could be from
         * some previous assignments that are now replaced with some new ones
         *
         */
        /**
         * Represent current active assignment list meaning it will not include any entries which
         * were overwritten by some late entry having the same key.
         *
         * It does not include entries that were pushed to stack from any Property -> Selector
         * propagation. This creates shell copy and ignoring all last Matches which could be from
         * some previous assignments that are now replaced with some new ones
         *
         * @return {?}
         */
        Context.prototype.activeAssignments = /**
         * Represent current active assignment list meaning it will not include any entries which
         * were overwritten by some late entry having the same key.
         *
         * It does not include entries that were pushed to stack from any Property -> Selector
         * propagation. This creates shell copy and ignoring all last Matches which could be from
         * some previous assignments that are now replaced with some new ones
         *
         * @return {?}
         */
            function () {
                /** @type {?} */
                var list = new Array();
                for (var i = 0, c = this._entries.length; i < c; i++) {
                    /** @type {?} */
                    var rec = this._entries[i];
                    if (rec.maskedByIdx === 0 && !rec.srec.fromChaining) {
                        /** @type {?} */
                        var a = new AssignmentSnapshot();
                        a.key = rec.srec.key;
                        a.value = rec.val;
                        a.salience = rec.srec.salience;
                        list.push(a);
                    }
                }
                return list;
            };
        /**
         *
         * Similar as <code>activeAssignments</code> but do include also those that were replaced later
         * on with assignments having the same key.
         *
         * This is needed for cases where we need to have deep copy of current state along with
         * all properties.
         *
         */
        /**
         *
         * Similar as <code>activeAssignments</code> but do include also those that were replaced later
         * on with assignments having the same key.
         *
         * This is needed for cases where we need to have deep copy of current state along with
         * all properties.
         *
         * @return {?}
         */
        Context.prototype.allAssignments = /**
         *
         * Similar as <code>activeAssignments</code> but do include also those that were replaced later
         * on with assignments having the same key.
         *
         * This is needed for cases where we need to have deep copy of current state along with
         * all properties.
         *
         * @return {?}
         */
            function () {
                /** @type {?} */
                var list = new Array();
                for (var i = 0, c = this._entries.length; i < c; i++) {
                    /** @type {?} */
                    var rec = this._entries[i];
                    if (!rec.srec.fromChaining) {
                        /** @type {?} */
                        var a = new AssignmentSnapshot();
                        a.key = rec.srec.key;
                        a.value = rec.val;
                        a.salience = rec.srec.salience;
                        list.push(a);
                    }
                }
                return list;
            };
        /**
         * @param {?} key
         * @param {?} value
         * @param {?} merge
         * @param {?} chaining
         * @return {?}
         */
        Context.prototype._set = /**
         * @param {?} key
         * @param {?} value
         * @param {?} merge
         * @param {?} chaining
         * @return {?}
         */
            function (key, value, merge, chaining) {
                /** @type {?} */
                var sval = this._meta.transformValue(key, value);
                /** @type {?} */
                var didSet = false;
                /** @type {?} */
                var registry = ((this.meta)).componentRegistry;
                if (key === ObjectMeta.KeyObject && core.isPresent(registry)) {
                    registry.registerType(core.className(value), value.constructor);
                }
                /** @type {?} */
                var activation = this._currentActivation.getChildActivation(key, sval, chaining);
                if (core.isBlank(activation)) {
                    didSet = this._createNewFrameForSet(key, sval, value, merge, chaining);
                }
                if (core.isPresent(activation)) {
                    didSet = this._applyActivation(activation, value);
                }
                if (didSet) {
                    this.awakeCurrentActivation();
                }
            };
        /**
         * @return {?}
         */
        Context.prototype.newContextRec = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var count = this._recPool.length;
                return (count > 0) ? this._recPool.splice(count - 1, 1)[0] : new Assignment();
            };
        /**
         * Cached case: apply a previously computed Activation
         */
        /**
         * Cached case: apply a previously computed Activation
         * @param {?} activation
         * @param {?} firstVal
         * @return {?}
         */
        Context.prototype._applyActivation = /**
         * Cached case: apply a previously computed Activation
         * @param {?} activation
         * @param {?} firstVal
         * @return {?}
         */
            function (activation, firstVal) {
                core.assert(activation._parent === this._currentActivation, 'Attempt to apply activation on mismatched parent');
                if (this._entries.length !== activation._origEntryCount) {
                    core.assert(false, 'Mismatched context stack size (%s) from when activation was popped ' +
                        this._entries.length + ' ' + activation._origEntryCount);
                }
                /** @type {?} */
                var count = activation._recs.length;
                if (count === 0) {
                    return false;
                }
                for (var i = 0; i < count; i++) {
                    /** @type {?} */
                    var srec = activation._recs[i];
                    /** @type {?} */
                    var rec = this.newContextRec();
                    rec.srec = srec;
                    // Apply masking for any property that we mask out
                    if (srec.lastAssignmentIdx !== -1) {
                        this._prepareForOverride(this._entries.length, srec.lastAssignmentIdx);
                    }
                    rec.val = (i === 0 && !this.meta.isNullMarker(firstVal)) ? firstVal : srec.val;
                    this._values.set(srec.key, rec.val);
                    this._entries.push(rec);
                }
                this._currentActivation = activation;
                this._currentProperties = null;
                return true;
            };
        /**
         * @return {?}
         */
        Context.prototype.awakeCurrentActivation = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var currentActivation = this._currentActivation;
                /** @type {?} */
                var deferredAssignments = currentActivation.deferredAssignments;
                if (core.isPresent(deferredAssignments)) {
                    this.applyDeferredAssignments(deferredAssignments);
                }
            };
        /**
         * @param {?} deferredAssignments
         * @return {?}
         */
        Context.prototype.applyDeferredAssignments = /**
         * @param {?} deferredAssignments
         * @return {?}
         */
            function (deferredAssignments) {
                try {
                    for (var deferredAssignments_1 = __values(deferredAssignments), deferredAssignments_1_1 = deferredAssignments_1.next(); !deferredAssignments_1_1.done; deferredAssignments_1_1 = deferredAssignments_1.next()) {
                        var da = deferredAssignments_1_1.value;
                        /** @type {?} */
                        var currentPropValue = this.staticallyResolveValue(this.allProperties().get(da.key));
                        if (da.value === currentPropValue) {
                            /** @type {?} */
                            var resolvedValue = this.resolveValue(da.value);
                            this._set(da.key, resolvedValue, false, true);
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (deferredAssignments_1_1 && !deferredAssignments_1_1.done && (_a = deferredAssignments_1.return))
                            _a.call(deferredAssignments_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                var e_1, _a;
            };
        /**
         * @return {?}
         */
        Context.prototype._inDeclare = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var match = this.lastMatchWithoutContextProps();
                return core.isPresent(match) && (match._keysMatchedMask & this._meta.declareKeyMask) !== 0;
            };
        /**
         Non-cached access: create a new activation
         */
        /**
         * Non-cached access: create a new activation
         * @param {?} key
         * @param {?} svalue
         * @param {?} value
         * @param {?} merge
         * @param {?} chaining
         * @return {?}
         */
        Context.prototype._createNewFrameForSet = /**
         * Non-cached access: create a new activation
         * @param {?} key
         * @param {?} svalue
         * @param {?} value
         * @param {?} merge
         * @param {?} chaining
         * @return {?}
         */
            function (key, svalue, value, merge, chaining) {
                /** @type {?} */
                var lastActivation = this._currentActivation;
                /** @type {?} */
                var newActivation = new Activation(lastActivation);
                newActivation._origEntryCount = this._entries.length;
                this._currentActivation = newActivation;
                /** @type {?} */
                var didSet = this._set2(key, svalue, value, merge, chaining);
                // mirror properties
                if (didSet) {
                    while (this._checkApplyProperties()) {
                        /* repeat */
                    }
                }
                // Remember for the future
                if (Context._CacheActivations) {
                    lastActivation.cacheChildActivation(key, svalue, newActivation, chaining);
                }
                this._currentActivation = (didSet) ? newActivation : lastActivation;
                return this._currentActivation !== lastActivation;
            };
        /**
         * Called lazily to compute the property activation for this activation
         * Compute the static part of the property activation
         * we accumulate the property settings on a side activation off the main stack
         * and apply it virtually if our parent is not covered
         *  (that way we don't have to apply and unapply all the time)
         */
        /**
         * Called lazily to compute the property activation for this activation
         * Compute the static part of the property activation
         * we accumulate the property settings on a side activation off the main stack
         * and apply it virtually if our parent is not covered
         *  (that way we don't have to apply and unapply all the time)
         * @param {?} parentActivation
         * @return {?}
         */
        Context.prototype._createNewPropertyContextActivation = /**
         * Called lazily to compute the property activation for this activation
         * Compute the static part of the property activation
         * we accumulate the property settings on a side activation off the main stack
         * and apply it virtually if our parent is not covered
         *  (that way we don't have to apply and unapply all the time)
         * @param {?} parentActivation
         * @return {?}
         */
            function (parentActivation) {
                this.push();
                /** @type {?} */
                var propActivation = new Activation(parentActivation);
                propActivation._origEntryCount = this._entries.length;
                this._currentActivation = propActivation;
                /** @type {?} */
                var origValues = this._values;
                /** @type {?} */
                var nestedMap = new NestedMap(origValues);
                this._values = nestedMap;
                this.applyPropertyContextAndChain();
                if (propActivation._recs.length > 0 || core.isPresent(propActivation.deferredAssignments)) {
                    propActivation._nestedValues = nestedMap;
                    this._values = Context.EmptyRemoveMap; // hack -- empty map so that undo is noop --
                    // ((NestedMap)_values).dup();
                }
                else {
                    propActivation = null;
                }
                this.pop();
                this._values = origValues;
                this._currentActivation = parentActivation;
                return propActivation;
            };
        /**
         * @param {?} propActivation
         * @param {?} rec
         * @return {?}
         */
        Context.prototype._applyPropertyActivation = /**
         * @param {?} propActivation
         * @param {?} rec
         * @return {?}
         */
            function (propActivation, rec) {
                /** @type {?} */
                var propValues = this._values;
                if (core.isPresent(propActivation._nestedValues)) {
                    propValues = propActivation._nestedValues.reparentedMap(propValues);
                }
                // set up propLocal results
                // Now, see if we need to compute a dynamic property activation as well
                if (core.isPresent(propActivation.deferredAssignments)) {
                    this.push();
                    /** @type {?} */
                    var origValues = this._values;
                    this._values = new NestedMap(propValues);
                    this._applyActivation(propActivation, Meta.NullMarker);
                    this.applyDeferredAssignments(propActivation.deferredAssignments);
                    rec._propertyLocalValues = this._values;
                    rec._propertyLocalSrec = core.ListWrapper.last(this._entries).srec;
                    this._values = Context.EmptyRemoveMap; // hack -- empty map so that undo is noop --
                    // ((NestedMap)_values).dup();
                    this.pop();
                    this._values = origValues;
                }
                else {
                    // can use static versions
                    rec._propertyLocalValues = propValues;
                    rec._propertyLocalSrec = core.ListWrapper.last(propActivation._recs);
                }
            };
        // todo: any equals old va === new val
        /**
         * @param {?} oldVal
         * @param {?} newVal
         * @return {?}
         */
        Context.prototype._isNewValue = /**
         * @param {?} oldVal
         * @param {?} newVal
         * @return {?}
         */
            function (oldVal, newVal) {
                return (oldVal !== newVal && (core.isPresent(oldVal) ||
                    (!oldVal === newVal && (!core.isArray(oldVal)) || !(core.ListWrapper.contains(oldVal, newVal)))));
            };
        /**
         * @return {?}
         */
        Context.prototype.isDeclare = /**
         * @return {?}
         */
            function () {
                return core.isPresent(this.propertyForKey(Meta.KeyDeclare));
            };
        /**
         * @return {?}
         */
        Context.prototype.assertContextConsistent = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!Context._ExpensiveContextConsistencyChecksEnabled) {
                    return;
                }
                // Verify that each value in context has matching (enabled) context record
                core.MapWrapper.iterable(this._values).forEach(function (value, key) {
                    /** @type {?} */
                    var lastAssignmentIdx = _this.findLastAssignmentOfKey(key);
                    core.assert(lastAssignmentIdx >= 0, 'Value in context but no assignment record found ' +
                        key + ' = ' + value);
                    /** @type {?} */
                    var contextVal = _this._entries[lastAssignmentIdx].val;
                    core.assert(value === contextVal || (core.isPresent(value) && value === contextVal), 'Value in context  doesnt match value on stack ' + value + ' / ' + contextVal);
                });
                // check entries for proper relationship with any previous records that they override
                for (var i = this._entries.length - 1; i >= 0; i--) {
                    /** @type {?} */
                    var r = this._entries[i];
                    /** @type {?} */
                    var foundFirst = false;
                    for (var j = i - 1; j >= 0; j--) {
                        /** @type {?} */
                        var pred = this._entries[j];
                        if (pred.srec.key === r.srec.key) {
                            // Predecessors must be masked
                            core.assert((!foundFirst && pred.maskedByIdx === i) ||
                                ((foundFirst || pred.srec.fromChaining) && pred.maskedByIdx > 0), 'Predecessor A does not have matching maskedByIdx B  for override C:' +
                                pred.srec.key + ' = ' + pred.val + ', ' + pred.maskedByIdx + ', ' +
                                i + ' = ' + r.val);
                            core.assert(((!foundFirst && r.srec.lastAssignmentIdx === j) || foundFirst ||
                                pred.srec.fromChaining), 'Override A1=A2 does not have proper lastAssignmentIdx B1!=B2 ' +
                                'for predecessor C' +
                                pred.srec.key + ' = ' + pred.val + ', ' + r.srec.lastAssignmentIdx + ' = ' +
                                j + ', ' + pred.val);
                            foundFirst = true;
                        }
                    }
                }
            };
        /**
         * @param {?} key
         * @param {?} svalue
         * @param {?} value
         * @param {?} merge
         * @param {?} isChaining
         * @return {?}
         */
        Context.prototype._set2 = /**
         * @param {?} key
         * @param {?} svalue
         * @param {?} value
         * @param {?} merge
         * @param {?} isChaining
         * @return {?}
         */
            function (key, svalue, value, merge, isChaining) {
                Context._Debug_SetsCount++;
                /** @type {?} */
                var hasOldValue = this._values.has(key) && core.isPresent(this._values.get(key));
                /** @type {?} */
                var oldVal = hasOldValue ? this._values.get(key) : null;
                /** @type {?} */
                var isNewValue = !hasOldValue || this._isNewValue(oldVal, value);
                /** @type {?} */
                var matchingPropKeyAssignment = !isNewValue && !isChaining &&
                    ((this._meta.keyData(key).isPropertyScope) &&
                        key !== this._currentPropertyScopeKey());
                if (isNewValue || matchingPropKeyAssignment) {
                    /** @type {?} */
                    var lastMatch = void 0;
                    /** @type {?} */
                    var newMatch = void 0;
                    /** @type {?} */
                    var salience = this._frameStarts.length;
                    /** @type {?} */
                    var lastAssignmentIdx = -1;
                    if (core.isBlank(oldVal)) {
                        lastMatch = this.lastMatchWithoutContextProps();
                    }
                    else {
                        /** @type {?} */
                        var recIdx = this._entries.length;
                        lastAssignmentIdx = this.findLastAssignmentOfKey(key);
                        core.assert(lastAssignmentIdx >= 0, 'Value in context but no assignment record found ' + key + ' = ' + oldVal);
                        if (matchingPropKeyAssignment) {
                            // cheap version of masking for a matching set:
                            this._entries[lastAssignmentIdx].maskedByIdx = recIdx;
                            lastMatch = this.lastMatchWithoutContextProps();
                        }
                        else {
                            /** @type {?} */
                            var oldRec = this._entries[lastAssignmentIdx];
                            if (oldRec.srec.salience === salience) {
                                /** @type {?} */
                                var prev = this.findLastAssignmentOfKeyWithValue(key, value);
                                if (prev !== -1 && this._entries[prev].srec.salience === salience) {
                                    return false;
                                }
                            }
                            if (isChaining &&
                                (oldRec.srec.salience > salience || !oldRec.srec.fromChaining)) {
                                // print('Set of key skipped (salience %s <= %s)' + key + ', ' + oldVal +
                                // ', ' + value + ', ' + salience + ', ' + oldRec.srec.salience);
                                return false;
                            }
                            /** @type {?} */
                            var firstAssignmentIdx = this._prepareForOverride(recIdx, lastAssignmentIdx);
                            newMatch = this._rematchForOverride(key, svalue, recIdx, firstAssignmentIdx);
                            if (merge) {
                                value = Meta.PropertyMerger_List.merge(oldVal, value, this.isDeclare());
                            }
                        }
                    }
                    core.assert(this._entries.length <= Context.MaxContextStackSize, 'MetaUI context stack exceeded max size -- likely infinite chaining: ' +
                        this._entries.length);
                    /** @type {?} */
                    var srec = new StaticRec();
                    srec.key = key;
                    // todo: conversion
                    srec.val = svalue;
                    srec.lastAssignmentIdx = lastAssignmentIdx;
                    srec.salience = salience;
                    srec.fromChaining = isChaining;
                    if (core.isBlank(newMatch)) {
                        newMatch = (core.isPresent(value)) ? this._meta.match(key, svalue, lastMatch) : lastMatch;
                    }
                    srec.match = newMatch;
                    srec.activation = this._currentActivation;
                    this._currentActivation._recs.push(srec);
                    /** @type {?} */
                    var rec = this.newContextRec();
                    rec.srec = srec;
                    rec.val = value;
                    this._entries.push(rec);
                    this._currentProperties = null;
                    this._values.set(key, value);
                    // console.log( this.debugName + ' => ' +
                    //     'Push(' + key + ', ' + svalue + '): ' + 'Matches: ' + newMatch.matches().length
                    //     + ', PropMap: ' + srec.properties().size);
                    if (Context._DebugRuleMatches) {
                        this._checkMatch(srec.match, key, value);
                    }
                    this.assertContextConsistent();
                    return true;
                }
                else {
                    // print('Context skipped assignment of matching property value %s = %s (isChaining ==
                    // %s, isPropKey == %s)', key, value, isChaining,
                    // (this._meta.keyData(key).isPropertyScope));
                    if (!isChaining && this.meta.keyData(key).isPropertyScope) ;
                }
                return false;
            };
        Object.defineProperty(Context.prototype, "frameStarts", {
            get: /**
             * @return {?}
             */ function () {
                return this._frameStarts;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} rec
         * @return {?}
         */
        Context.prototype._undoRecValue = /**
         * @param {?} rec
         * @return {?}
         */
            function (rec) {
                if (rec.srec.lastAssignmentIdx === -1 ||
                    this._entries[rec.srec.lastAssignmentIdx].maskedByIdx > 0) {
                    this._values.delete(rec.srec.key);
                }
                else {
                    this._values.set(rec.srec.key, this._entries[rec.srec.lastAssignmentIdx].val);
                }
            };
        // Undoes and masks assignments invalidated by override of given record
        // Returns stack index for first assignment (i.e. where match recomputation must start)
        /**
         * @param {?} overrideIndex
         * @param {?} lastAssignmentIdx
         * @return {?}
         */
        Context.prototype._prepareForOverride = /**
         * @param {?} overrideIndex
         * @param {?} lastAssignmentIdx
         * @return {?}
         */
            function (overrideIndex, lastAssignmentIdx) {
                /** @type {?} */
                var lastLastIdx = 0;
                while (((lastLastIdx = this._entries[lastAssignmentIdx].srec.lastAssignmentIdx) !== -1) &&
                    (this._entries[lastAssignmentIdx].maskedByIdx <= 0)) {
                    // mark it! (we'll pick it up below...)
                    this._entries[lastAssignmentIdx].maskedByIdx = -1;
                    lastAssignmentIdx = lastLastIdx;
                }
                // undo all conflicting or dervied assignments (and mark them)
                for (var i = this._entries.length - 1; i >= lastAssignmentIdx; i--) {
                    /** @type {?} */
                    var r = this._entries[i];
                    // we need to undo (and mask) any record that conflict or are derived
                    // NOTE: We are skipping the remove all chained records, because this can result in
                    // undoing derived state totally unrelated to this key.  Ideally we'd figure out what
                    // depended on what...
                    if (r.maskedByIdx <= 0 && (i === lastAssignmentIdx || r.maskedByIdx === -1)) {
                        // || r.srec.fromChaining
                        // mark and undo it
                        r.maskedByIdx = overrideIndex;
                        this._undoRecValue(r);
                    }
                }
                return lastAssignmentIdx;
            };
        /**
         * @param {?} key
         * @param {?} svalue
         * @param {?} overrideIndex
         * @param {?} firstAssignmentIdx
         * @return {?}
         */
        Context.prototype._rematchForOverride = /**
         * @param {?} key
         * @param {?} svalue
         * @param {?} overrideIndex
         * @param {?} firstAssignmentIdx
         * @return {?}
         */
            function (key, svalue, overrideIndex, firstAssignmentIdx) {
                /** @type {?} */
                var lastMatch;
                /** @type {?} */
                var i = 0;
                for (; i < firstAssignmentIdx; i++) {
                    /** @type {?} */
                    var rec = this._entries[i];
                    if (rec.maskedByIdx !== 0) {
                        break;
                    }
                    lastMatch = rec.srec.match;
                }
                /** @type {?} */
                var overridesMatch;
                // Rematch skipping over the last assignment of this property
                // and all assignments from chainging
                for (var end = this._entries.length; i < end; i++) {
                    /** @type {?} */
                    var r = this._entries[i];
                    // rematch on any unmasked records
                    if (r.maskedByIdx === 0) {
                        lastMatch = this._meta.match(r.srec.key, r.srec.val, lastMatch);
                    }
                    else {
                        // accumulate masked ('_o') match
                        overridesMatch = this._meta.unionOverrideMatch(r.srec.key, r.srec.val, overridesMatch);
                    }
                }
                if (core.isPresent(svalue) || core.isBlank(lastMatch)) {
                    lastMatch = this._meta.match(key, svalue, lastMatch);
                }
                lastMatch.setOverridesMatch(overridesMatch);
                return lastMatch;
            };
        /**
         * @param {?} rec
         * @param {?} recIdx
         * @return {?}
         */
        Context.prototype._undoOverride = /**
         * @param {?} rec
         * @param {?} recIdx
         * @return {?}
         */
            function (rec, recIdx) {
                /** @type {?} */
                var lastAssignmentIdx = rec.srec.lastAssignmentIdx;
                /** @type {?} */
                var lastLastIdx;
                // bastick up further if necessary
                while (((lastLastIdx = this._entries[lastAssignmentIdx].srec.lastAssignmentIdx) !== -1) &&
                    (this._entries[lastLastIdx].maskedByIdx === recIdx)) {
                    lastAssignmentIdx = lastLastIdx;
                }
                for (var i = lastAssignmentIdx, c = this._entries.length; i < c; i++) {
                    /** @type {?} */
                    var r = this._entries[i];
                    if (r.maskedByIdx === recIdx) {
                        this._values.set(r.srec.key, r.val);
                        r.maskedByIdx = 0;
                    }
                }
            };
        /**
         * @param {?} match
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        Context.prototype._checkMatch = /**
         * @param {?} match
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (match, key, value) {
                match._checkMatch(this._values, this._meta);
            };
        /**
         * @param {?} key
         * @return {?}
         */
        Context.prototype.findLastAssignmentOfKey = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                for (var i = this._entries.length - 1; i >= 0; i--) {
                    /** @type {?} */
                    var rec = this._entries[i];
                    if (rec.srec.key === key && rec.maskedByIdx === 0) {
                        return i;
                    }
                }
                return -1;
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        Context.prototype.findLastAssignmentOfKeyWithValue = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                for (var i = this._entries.length - 1; i >= 0; i--) {
                    /** @type {?} */
                    var rec = this._entries[i];
                    if (rec.srec.key === key && !this._isNewValue(rec.val, value)) {
                        return i;
                    }
                }
                return -1;
            };
        /**
         * Check if we have value mirroring (property to context) to do Dynamic property mirroring will
         * be added to the currentActivation deferredAssignment list
         *
         */
        /**
         * Check if we have value mirroring (property to context) to do Dynamic property mirroring will
         * be added to the currentActivation deferredAssignment list
         *
         * @return {?}
         */
        Context.prototype._checkApplyProperties = /**
         * Check if we have value mirroring (property to context) to do Dynamic property mirroring will
         * be added to the currentActivation deferredAssignment list
         *
         * @return {?}
         */
            function () {
                /** @type {?} */
                var didSet = false;
                /** @type {?} */
                var numEntries = 0;
                /** @type {?} */
                var lastSize = 0;
                /** @type {?} */
                var declareKey = this._inDeclare() ? this._values.get(Meta.KeyDeclare) : null;
                while ((numEntries = this._entries.length) > lastSize) {
                    lastSize = numEntries;
                    /** @type {?} */
                    var rec = this._entries[numEntries - 1];
                    /** @type {?} */
                    var properties = rec.srec.properties();
                    /** @type {?} */
                    var contextKeys = properties.contextKeysUpdated;
                    if (core.isPresent(contextKeys)) {
                        for (var i = 0, c = contextKeys.length; i < c; i++) {
                            /** @type {?} */
                            var propMgr = contextKeys[i];
                            /** @type {?} */
                            var key = propMgr._name;
                            if (core.isPresent(declareKey) && key === declareKey) {
                                continue;
                            }
                            /** @type {?} */
                            var newVal = this.staticallyResolveValue(properties.get(key));
                            /** @type {?} */
                            var prevProps = void 0;
                            /** @type {?} */
                            var suppress = (core.isPresent(prevProps) && prevProps.has(key)
                                && !this._isNewValue(this.staticallyResolveValue(prevProps.get(key)), newVal)) ||
                                (this._currentActivation._parent.hasDeferredAssignmentForKey(key));
                            if (!suppress) {
                                /** @type {?} */
                                var mirrorKey = propMgr._keyDataToSet._key;
                                if (newVal instanceof DynamicPropertyValue) {
                                    // print('(deferred) chaining key: ' , propMgr._keyDataToSet._key);
                                    this._currentActivation.addDeferredAssignment(mirrorKey, newVal);
                                }
                                else {
                                    // compare this value to the value from the end of the last frame
                                    // print('chaining key: ' , propMgr._keyDataToSet._key);
                                    if (this._set2(mirrorKey, newVal, newVal, false, true)) {
                                        didSet = true;
                                    }
                                }
                            }
                        }
                    }
                }
                return didSet;
            };
        /**
         * @return {?}
         */
        Context.prototype.applyPropertyContextAndChain = /**
         * @return {?}
         */
            function () {
                if (this._checkPropertyContext()) {
                    while (this._checkApplyProperties()) {
                        /* repeat */
                    }
                }
            };
        /**
         * @return {?}
         */
        Context.prototype._currentPropertyScopeKey = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var foundKey;
                /** @type {?} */
                var foundActivation;
                for (var i = this._entries.length - 1; i >= 0; i--) {
                    /** @type {?} */
                    var rec = this._entries[i];
                    if (core.isPresent(foundActivation) && rec.srec.activation !== foundActivation) {
                        break;
                    }
                    if (this._meta.keyData(rec.srec.key).isPropertyScope) {
                        if (!rec.srec.fromChaining) {
                            return rec.srec.key;
                        }
                        // for chaining assignments, we keep looking until we exhaust the first
                        // non-chaining activation Todo: broken -- disabling set of context key from
                        // chaining if (foundKey === null) foundKey = scopeKey;
                    }
                    if (core.isPresent(foundKey) && !rec.srec.fromChaining) {
                        foundActivation = rec.srec.activation;
                    }
                }
                return foundKey;
            };
        // Apply a 'property context' property (e.g. field_p for field) to the context if necessary
        /**
         * @return {?}
         */
        Context.prototype._checkPropertyContext = /**
         * @return {?}
         */
            function () {
                core.assert(this._values instanceof NestedMap, 'Property assignment on base map?');
                /** @type {?} */
                var scopeKey = this._currentPropertyScopeKey();
                if (core.isPresent(scopeKey)) {
                    return this._set2(Meta.ScopeKey, scopeKey, scopeKey, false, false);
                }
                return false;
            };
        /**
         * @return {?}
         */
        Context.prototype.debug = /**
         * @return {?}
         */
            function () {
                // set debugger breakpoint here
                core.print('******  Debug Call ******');
                this._logContext();
            };
        /**
         * @return {?}
         */
        Context.prototype.debugString = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var buffer = new core.StringJoiner(['<b>Context:</b>&nbsp;']);
                buffer.add('(&nbsp;');
                buffer.add(this._entries.length + '');
                buffer.add(' entries');
                buffer.add('&nbsp;)<br/>');
                for (var i = 0, c = this._entries.length; i < c; i++) {
                    /** @type {?} */
                    var sp = i;
                    while (sp-- > 0) {
                        buffer.add('&nbsp;');
                    }
                    /** @type {?} */
                    var r = this._entries[i];
                    buffer.add('&nbsp;');
                    buffer.add(r.srec.key);
                    buffer.add('&nbsp;&nbsp;:&nbsp;');
                    buffer.add(r.srec.val);
                    buffer.add((r.srec.fromChaining ? ' ^' : ''));
                    buffer.add((r.maskedByIdx !== 0 ? ' X' : ''));
                    buffer.add('<br/>');
                }
                /** @type {?} */
                var propertyActivation = this.currentActivation._propertyActivation;
                if (core.isPresent(propertyActivation)) {
                    /** @type {?} */
                    var srecs = propertyActivation._recs;
                    buffer.add('&nbsp;&nbsp;&nbsp;<b>PropertyActivation...</b><br/>');
                    for (var i = 0, c = srecs.length; i < c; i++) {
                        /** @type {?} */
                        var sp = i + this._entries.length + 1;
                        while (sp-- > 0) {
                            buffer.add('&nbsp;&nbsp;');
                        }
                        /** @type {?} */
                        var r = srecs[i];
                        buffer.add(r.key);
                        buffer.add('&nbsp;&nbsp;:&nbsp;');
                        buffer.add(r.val);
                        buffer.add((r.fromChaining ? '&nbsp;&nbsp;' : '&nbsp;&nbsp;!'));
                        buffer.add('<br/>');
                    }
                }
                buffer.add('&nbsp;<br/><b>Props:</b><br/>');
                this.writeProperties(buffer, this.allProperties(), 1, false);
                return buffer.toString();
            };
        /**
         * @return {?}
         */
        Context.prototype._logContext = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var debugString = this.debugString();
                core.print(debugString);
                core.print('\n');
            };
        /**
         * @param {?} buf
         * @param {?} properties
         * @param {?} level
         * @param {?} singleLine
         * @return {?}
         */
        Context.prototype.writeProperties = /**
         * @param {?} buf
         * @param {?} properties
         * @param {?} level
         * @param {?} singleLine
         * @return {?}
         */
            function (buf, properties, level, singleLine) {
                core.MapWrapper.iterable(properties).forEach(function (value, key) {
                    if (!singleLine) {
                        while (level-- > 0) {
                            buf.add('&nbsp;&nbsp;&nbsp;');
                        }
                    }
                    if (core.isBlank(value)) {
                        buf.add(key);
                        buf.add(' :null');
                        buf.add(singleLine ? ';&nbsp;&nbsp;' : ';<br/>');
                    }
                    else {
                        buf.add('&nbsp;&nbsp;&nbsp;');
                        buf.add(key);
                        buf.add(':');
                        if (core.isString(value) || core.isNumber(value)) {
                            buf.add('&nbsp;&nbsp;');
                            buf.add(value);
                            buf.add('&nbsp;&nbsp;');
                        }
                        else if (core.isStringMap(value)) {
                            buf.add('{');
                            buf.add(value);
                            buf.add('}');
                        }
                        else if (value instanceof Expr) {
                            buf.add(value.toString());
                        }
                        else if (value instanceof Map) {
                            buf.add(core.MapWrapper.toString(value));
                        }
                        else if (core.isArray(value)) {
                            core.ListWrapper.toString(value);
                        }
                        else if (value instanceof OverrideValue) {
                            buf.add(value.toString());
                        }
                        else if (value instanceof core.FieldPath) {
                            buf.add('$');
                            buf.add(value.toString());
                        }
                        if (singleLine) {
                            buf.add(';');
                        }
                        else {
                            buf.add('<br/>');
                        }
                    }
                });
            };
        /**
         * @return {?}
         */
        Context.prototype.lastMatchWithoutContextProps = /**
         * @return {?}
         */
            function () {
                return core.ListWrapper.isEmpty(this._entries) ? null : this._entries[this._entries.length - 1].srec.match;
            };
        /**
         * @return {?}
         */
        Context.prototype.lastMatch = /**
         * @return {?}
         */
            function () {
                if (core.ListWrapper.isEmpty(this._entries)) {
                    return null;
                }
                /** @type {?} */
                var match = core.ListWrapper.last(this._entries)
                    .propertyLocalMatches(this);
                return (core.isPresent(match)) ? match : this.lastMatchWithoutContextProps();
            };
        /**
         * @return {?}
         */
        Context.prototype.lastStaticRec = /**
         * @return {?}
         */
            function () {
                if (core.ListWrapper.isEmpty(this._entries)) {
                    return null;
                }
                /** @type {?} */
                var rec = core.ListWrapper.last(this._entries).propertyLocalStaticRec(this);
                return core.isPresent(rec) ? rec : core.ListWrapper.last(this._entries).srec;
            };
        Object.defineProperty(Context.prototype, "recPool", {
            get: /**
             * @return {?}
             */ function () {
                return this._recPool;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Context.prototype, "currentActivation", {
            get: /**
             * @return {?}
             */ function () {
                return this._currentActivation;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        Context.prototype.extendedFields = /**
         * @return {?}
         */
            function () {
                return this.values;
            };
        Context._CacheActivations = false;
        Context._ExpensiveContextConsistencyChecksEnabled = false;
        Context._DebugRuleMatches = false;
        Context._Debug_SetsCount = 0;
        Context.MaxContextStackSize = 200;
        Context.EmptyMap = null;
        Context.EmptyRemoveMap = new Map();
        return Context;
    }(core.Extensible));
    /**
     * A sharable/re-applicable block of setScopeKeyAssignment _StaticRecs.  An Activation contains
     * the list of assignment records resulting from (chaining from) a single original
     * assignment (as well as _DeferredAssignment records for dynamic values that cannot
     * be statically resolved to records).  Activations form a shared/cached tree, based
     * on context assignment paths previously traversed via assignments to some Context.
     * Subsequent traversals of these paths (likely by different Context instances)
     * are greatly optimized: an existing Activation is retrieved and its records appended
     * to the context's _entries stack; all of the traditional computation of rule match lookups,
     * chained assignments and override indexes is bypassed.
     * Activation gives special treatment to the 'propertyActivation', i.e. the activation
     * resulting from the application of the 'scopeKey' to the current context.  Property lookup
     * following and context assignment require application of the scopeKey, but then the scope key
     * must immediately be popped for the next context assignment.  To avoid this constant push/pop
     * on the bottom of the stack, _Activations cache a side activation (the propertyActivation)
     * for the result of applying the scopeKey to the current activation.  This stack (and its
     * properties) are cached on the side, and can be accessed without actually modifying the main
     * context stack.
     */
    var /**
     * A sharable/re-applicable block of setScopeKeyAssignment _StaticRecs.  An Activation contains
     * the list of assignment records resulting from (chaining from) a single original
     * assignment (as well as _DeferredAssignment records for dynamic values that cannot
     * be statically resolved to records).  Activations form a shared/cached tree, based
     * on context assignment paths previously traversed via assignments to some Context.
     * Subsequent traversals of these paths (likely by different Context instances)
     * are greatly optimized: an existing Activation is retrieved and its records appended
     * to the context's _entries stack; all of the traditional computation of rule match lookups,
     * chained assignments and override indexes is bypassed.
     * Activation gives special treatment to the 'propertyActivation', i.e. the activation
     * resulting from the application of the 'scopeKey' to the current context.  Property lookup
     * following and context assignment require application of the scopeKey, but then the scope key
     * must immediately be popped for the next context assignment.  To avoid this constant push/pop
     * on the bottom of the stack, _Activations cache a side activation (the propertyActivation)
     * for the result of applying the scopeKey to the current activation.  This stack (and its
     * properties) are cached on the side, and can be accessed without actually modifying the main
     * context stack.
     */ Activation = (function () {
        function Activation(_parent) {
            this._parent = _parent;
            this._recs = new Array();
            this._origEntryCount = 0;
        }
        /**
         * @param {?} contextKey
         * @param {?} value
         * @param {?} chaining
         * @return {?}
         */
        Activation.prototype.getChildActivation = /**
         * @param {?} contextKey
         * @param {?} value
         * @param {?} chaining
         * @return {?}
         */
            function (contextKey, value, chaining) {
                if (core.isBlank(value)) {
                    value = Meta.NullMarker;
                }
                /** @type {?} */
                var byKey = (chaining)
                    ? this._valueNodeMapByContextKeyChaining :
                    this._valueNodeMapByContextKey;
                if (core.isBlank(byKey)) {
                    return null;
                }
                /** @type {?} */
                var byVal = byKey.get(contextKey);
                return (core.isBlank(byVal)) ? null : byVal.getValue(value);
            };
        /**
         * @param {?} contextKey
         * @param {?} value
         * @param {?} activation
         * @param {?} chaining
         * @return {?}
         */
        Activation.prototype.cacheChildActivation = /**
         * @param {?} contextKey
         * @param {?} value
         * @param {?} activation
         * @param {?} chaining
         * @return {?}
         */
            function (contextKey, value, activation, chaining) {
                if (core.isBlank(value)) {
                    value = Meta.NullMarker;
                }
                /** @type {?} */
                var byKey;
                if (chaining) {
                    if (core.isBlank((byKey = this._valueNodeMapByContextKeyChaining))) {
                        byKey = this._valueNodeMapByContextKeyChaining
                            = new Map();
                    }
                }
                else {
                    if (core.isBlank((byKey = this._valueNodeMapByContextKey))) {
                        byKey = this._valueNodeMapByContextKey
                            = new Map();
                    }
                }
                /** @type {?} */
                var byVal = byKey.get(contextKey);
                if (core.isBlank(byVal)) {
                    byVal = new Collections.Dictionary();
                    byKey.set(contextKey, byVal);
                }
                byVal.setValue(value, activation);
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        Activation.prototype.addDeferredAssignment = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                /** @type {?} */
                var newDa;
                if (core.isBlank(this.deferredAssignments)) {
                    this.deferredAssignments = new Array();
                }
                else {
                    try {
                        for (var _a = __values(this.deferredAssignments), _b = _a.next(); !_b.done; _b = _a.next()) {
                            var da = _b.value;
                            if (da.key === key) {
                                newDa = da;
                                break;
                            }
                        }
                    }
                    catch (e_2_1) {
                        e_2 = { error: e_2_1 };
                    }
                    finally {
                        try {
                            if (_b && !_b.done && (_c = _a.return))
                                _c.call(_a);
                        }
                        finally {
                            if (e_2)
                                throw e_2.error;
                        }
                    }
                }
                if (core.isBlank(newDa)) {
                    newDa = new DeferredAssignment();
                    newDa.key = key;
                    this.deferredAssignments.push(newDa);
                }
                newDa.value = value;
                var e_2, _c;
            };
        /**
         * @param {?} key
         * @return {?}
         */
        Activation.prototype.hasDeferredAssignmentForKey = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                if (core.isPresent(this.deferredAssignments)) {
                    try {
                        for (var _a = __values(this.deferredAssignments), _b = _a.next(); !_b.done; _b = _a.next()) {
                            var da = _b.value;
                            if (da.key === key) {
                                return true;
                            }
                        }
                    }
                    catch (e_3_1) {
                        e_3 = { error: e_3_1 };
                    }
                    finally {
                        try {
                            if (_b && !_b.done && (_c = _a.return))
                                _c.call(_a);
                        }
                        finally {
                            if (e_3)
                                throw e_3.error;
                        }
                    }
                }
                return false;
                var e_3, _c;
            };
        /**
         * @param {?} context
         * @return {?}
         */
        Activation.prototype.propertyActivation = /**
         * @param {?} context
         * @return {?}
         */
            function (context) {
                core.assert(context.currentActivation === this, 'PropertyActivation sought on non top of stack activation');
                if (core.isBlank(this._propertyActivation)) {
                    this._propertyActivation = context._createNewPropertyContextActivation(this);
                    if (core.isBlank(this._propertyActivation)) {
                        this._propertyActivation = this;
                    } // this as null marker
                }
                return this._propertyActivation !== this ? this._propertyActivation : null;
            };
        /**
         * @return {?}
         */
        Activation.prototype.findExistingPropertyActivation = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var activation = this;
                while (core.isPresent(activation)) {
                    /** @type {?} */
                    var propertyActivation = activation._propertyActivation;
                    if (core.isPresent(propertyActivation) && propertyActivation !== activation
                        && !(core.isBlank(propertyActivation._recs) || core.ListWrapper.isEmpty(propertyActivation._recs))) {
                        return propertyActivation;
                    }
                    activation = activation._parent;
                }
                return null;
            };
        // todo: better better to string for hashing
        /**
         * @return {?}
         */
        Activation.prototype.toString = /**
         * @return {?}
         */
            function () {
                return Collections.util.makeString(this);
            };
        return Activation;
    }());
    var DeferredAssignment = (function () {
        function DeferredAssignment() {
        }
        return DeferredAssignment;
    }());
    var AssignmentSnapshot = (function () {
        function AssignmentSnapshot() {
        }
        return AssignmentSnapshot;
    }());
    var Assignment = (function () {
        function Assignment() {
            this.maskedByIdx = 0;
            this._didInitPropContext = false;
        }
        /**
         * @param {?} context
         * @return {?}
         */
        Assignment.prototype.propertyLocalMatches = /**
         * @param {?} context
         * @return {?}
         */
            function (context) {
                if (!this._didInitPropContext) {
                    this.initPropContext(context);
                }
                return core.isPresent(this._propertyLocalSrec) ? this._propertyLocalSrec.match : null;
            };
        /**
         * @param {?} context
         * @return {?}
         */
        Assignment.prototype.propertyLocalStaticRec = /**
         * @param {?} context
         * @return {?}
         */
            function (context) {
                if (!this._didInitPropContext) {
                    this.initPropContext(context);
                }
                return this._propertyLocalSrec;
            };
        /**
         * @param {?} context
         * @return {?}
         */
        Assignment.prototype.propertyLocalValues = /**
         * @param {?} context
         * @return {?}
         */
            function (context) {
                if (!this._didInitPropContext) {
                    this.initPropContext(context);
                }
                return this._propertyLocalValues;
            };
        /**
         * @param {?} context
         * @return {?}
         */
        Assignment.prototype.initPropContext = /**
         * @param {?} context
         * @return {?}
         */
            function (context) {
                this._didInitPropContext = true;
                core.assert(!Context._ExpensiveContextConsistencyChecksEnabled || core.ListWrapper.last(context._entries) === this, 'initing prop context on record not on top of stack');
                /** @type {?} */
                var propActivation = (this.srec.activation.propertyActivation(context));
                if (core.isPresent(propActivation)) {
                    context._applyPropertyActivation(propActivation, this);
                }
            };
        /**
         * @return {?}
         */
        Assignment.prototype.reset = /**
         * @return {?}
         */
            function () {
                this.srec = null;
                this.val = null;
                this.maskedByIdx = 0;
                this._didInitPropContext = false;
                this._propertyLocalSrec = null;
                this._propertyLocalValues = null;
            };
        return Assignment;
    }());
    /**
     * The 'static' (sharable) part of a context value assignment record.
     * Theses are created by the first _Assignment that needs them
     * and then cached for re-application in their _Activation
     *  (which, in turn, is stored in the global activation tree)
     */
    var /**
     * The 'static' (sharable) part of a context value assignment record.
     * Theses are created by the first _Assignment that needs them
     * and then cached for re-application in their _Activation
     *  (which, in turn, is stored in the global activation tree)
     */ StaticRec = (function () {
        function StaticRec() {
            this.salience = 0;
            this.lastAssignmentIdx = 0;
        }
        /**
         * @return {?}
         */
        StaticRec.prototype.properties = /**
         * @return {?}
         */
            function () {
                return (core.isPresent(this.match)) ? this.match.properties() : Context.EmptyMap;
            };
        Object.defineProperty(StaticRec.prototype, "key", {
            get: /**
             * @return {?}
             */ function () {
                return this._key;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._key = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticRec.prototype, "val", {
            get: /**
             * @return {?}
             */ function () {
                return this._val;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._val = value;
            },
            enumerable: true,
            configurable: true
        });
        return StaticRec;
    }());
    var PropertyAccessor = (function () {
        function PropertyAccessor(context) {
            this.context = context;
        }
        /**
         * @param {?} key
         * @return {?}
         */
        PropertyAccessor.prototype.get = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return this.context.propertyForKey(key);
            };
        /**
         * @return {?}
         */
        PropertyAccessor.prototype.toString = /**
         * @return {?}
         */
            function () {
                return core.MapWrapper.toString(this.context.allProperties());
            };
        return PropertyAccessor;
    }());
    /**
     * Snapshot is the way how to capture a current state of the context and then replay it back so.
     * for cases when we need to run some rule execution outside of the push/pop cycle
     */
    var /**
     * Snapshot is the way how to capture a current state of the context and then replay it back so.
     * for cases when we need to run some rule execution outside of the push/pop cycle
     */ Snapshot = (function () {
        function Snapshot(_context) {
            this._context = _context;
            this._meta = _context.meta;
            this._origClass = _context.constructor.name;
            this._assignments = _context.activeAssignments();
            this._allAssignments = _context.allAssignments();
            this._isNested = _context.isNested;
        }
        /**
         * @param {?=} shellCopy
         * @return {?}
         */
        Snapshot.prototype.hydrate = /**
         * @param {?=} shellCopy
         * @return {?}
         */
            function (shellCopy) {
                if (shellCopy === void 0) {
                    shellCopy = true;
                }
                /** @type {?} */
                var assignments = (shellCopy) ? this._assignments : this._allAssignments;
                /** @type {?} */
                var newContext = this._meta.newContext();
                newContext.push();
                /** @type {?} */
                var lastCnxGeneration = 1;
                try {
                    for (var assignments_1 = __values(assignments), assignments_1_1 = assignments_1.next(); !assignments_1_1.done; assignments_1_1 = assignments_1.next()) {
                        var a = assignments_1_1.value;
                        if (lastCnxGeneration < a.salience) {
                            newContext.push();
                        }
                        newContext.set(a.key, a.value);
                    }
                }
                catch (e_4_1) {
                    e_4 = { error: e_4_1 };
                }
                finally {
                    try {
                        if (assignments_1_1 && !assignments_1_1.done && (_a = assignments_1.return))
                            _a.call(assignments_1);
                    }
                    finally {
                        if (e_4)
                            throw e_4.error;
                    }
                }
                newContext.isNested = this._isNested;
                return newContext;
                var e_4, _a;
            };
        return Snapshot;
    }());
    var ObjectMetaContext = (function (_super) {
        __extends(ObjectMetaContext, _super);
        function ObjectMetaContext(_meta, nested) {
            if (nested === void 0) {
                nested = false;
            }
            return _super.call(this, _meta, nested) || this;
        }
        Object.defineProperty(ObjectMetaContext.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                /** @type {?} */
                var obj = this.object;
                if (core.isBlank(obj)) {
                    return null;
                }
                /** @type {?} */
                var fieldPath = this.fieldPath();
                return core.isPresent(fieldPath) ? fieldPath.getFieldValue(obj) : this.propertyForKey('value');
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                /** @type {?} */
                var fieldPath = this.fieldPath();
                if (core.isPresent(fieldPath)) {
                    core.assert(core.isPresent(this.object), 'Call to setValue() with no current object');
                    fieldPath.setFieldValue(this.object, val);
                }
                else {
                    /** @type {?} */
                    var value = this.allProperties().get(ObjectMeta.KeyValue);
                    core.assert(isDynamicSettable(value), 'Cant set derived property: ' + value);
                    /** @type {?} */
                    var settable = value;
                    (((value))).evaluateSet(this, val);
                    settable.evaluateSet(this, val);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectMetaContext.prototype, "object", {
            get: /**
             * @return {?}
             */ function () {
                return this.values.get(ObjectMeta.KeyObject);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectMetaContext.prototype, "formatters", {
            get: /**
             * @return {?}
             */ function () {
                if (core.isBlank(this._formatters)) {
                    this._formatters = new Map();
                }
                return this._formatters;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ObjectMetaContext.prototype.fieldPath = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var propMap = (this.allProperties());
                return propMap.fieldPath;
            };
        /**
         * @return {?}
         */
        ObjectMetaContext.prototype.locale = /**
         * @return {?}
         */
            function () {
                return ObjectMetaContext.DefaultLocale;
            };
        /**
         * @return {?}
         */
        ObjectMetaContext.prototype.timezone = /**
         * @return {?}
         */
            function () {
                return new Date().getTimezoneOffset();
            };
        ObjectMetaContext.DefaultLocale = 'en';
        return ObjectMetaContext;
    }(Context));
    var UIContext = (function (_super) {
        __extends(UIContext, _super);
        function UIContext(_meta, nested) {
            if (nested === void 0) {
                nested = false;
            }
            return _super.call(this, _meta, nested) || this;
        }
        // user values from user settings/locales
        /**
         * @return {?}
         */
        UIContext.prototype.locale = /**
         * @return {?}
         */
            function () {
                return _super.prototype.locale.call(this);
            };
        /**
         * @return {?}
         */
        UIContext.prototype.timezone = /**
         * @return {?}
         */
            function () {
                return _super.prototype.timezone.call(this);
            };
        return UIContext;
    }(ObjectMetaContext));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * A Selector defines a sort of key/value predicate that must be satisfied for a
     * rule to apply.
     */
    var /**
     * A Selector defines a sort of key/value predicate that must be satisfied for a
     * rule to apply.
     */ Selector = (function () {
        function Selector(_key, _value, isDecl) {
            if (isDecl === void 0) {
                isDecl = false;
            }
            this._key = _key;
            this._value = _value;
            this.isDecl = isDecl;
            this._matchArrayIdx = 0;
        }
        /**
         * @param {?} values
         * @return {?}
         */
        Selector.fromMap = /**
         * @param {?} values
         * @return {?}
         */
            function (values) {
                /** @type {?} */
                var result = new Array();
                core.MapWrapper.iterable(values).forEach(function (value, key) {
                    result.push(new Selector(key, value, false));
                });
                return result;
            };
        Object.defineProperty(Selector.prototype, "key", {
            get: /**
             * @return {?}
             */ function () {
                return this._key;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Selector.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                return this._value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} keyData
         * @return {?}
         */
        Selector.prototype.bindToKeyData = /**
         * @param {?} keyData
         * @return {?}
         */
            function (keyData) {
                this._matchArrayIdx = keyData._id;
                this._matchValue = keyData.matchValue(this._value);
            };
        /**
         * @param {?} matchArray
         * @return {?}
         */
        Selector.prototype.matches = /**
         * @param {?} matchArray
         * @return {?}
         */
            function (matchArray) {
                // If we haven't been initialized with a matchValue, then we were indexed and don't need to
                // match
                if (core.isBlank(this._matchValue)) {
                    return true;
                }
                /** @type {?} */
                var other = matchArray[this._matchArrayIdx];
                return core.isPresent(other) ? other.matches(this._matchValue) : false;
            };
        /**
         * @return {?}
         */
        Selector.prototype.toString = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var sj = new core.StringJoiner([]);
                sj.add(this.key);
                sj.add('=');
                sj.add(this._value.toString());
                sj.add('(');
                sj.add(this.isDecl + '');
                sj.add(')');
                sj.add('[ ');
                sj.add(this._matchArrayIdx + ']');
                return sj.toString();
            };
        return Selector;
    }());
    /**
     * A Rule defines a map of properties that should apply in the event that a set of Selectors
     * are matched.  Given a rule base (Meta) and a set of asserted values (Context) a list of matching
     * rules can be computed (by matching their selectors against the values) and by successively (in
     * rank / priority order) applying (merging) their property maps a set of effective properties can
     * be computed.
     *
     */
    var /**
     * A Rule defines a map of properties that should apply in the event that a set of Selectors
     * are matched.  Given a rule base (Meta) and a set of asserted values (Context) a list of matching
     * rules can be computed (by matching their selectors against the values) and by successively (in
     * rank / priority order) applying (merging) their property maps a set of effective properties can
     * be computed.
     *
     */ Rule = (function () {
        function Rule(_selectors, _properties, _rank, _lineNumber) {
            if (_rank === void 0) {
                _rank = -1;
            }
            if (_lineNumber === void 0) {
                _lineNumber = -1;
            }
            this._selectors = _selectors;
            this._properties = _properties;
            this._rank = _rank;
            this._lineNumber = _lineNumber;
            this.keyMatchesMask = 0;
            this.keyIndexedMask = 0;
            this.keyAntiMask = 0;
        }
        /**
         * @param {?} meta
         * @param {?} src
         * @param {?} dest
         * @param {?} declareKey
         * @return {?}
         */
        Rule.merge = /**
         * @param {?} meta
         * @param {?} src
         * @param {?} dest
         * @param {?} declareKey
         * @return {?}
         */
            function (meta, src, dest, declareKey) {
                /** @type {?} */
                var updatedMask = 0;
                core.MapWrapper.iterable(src).forEach(function (value, key) {
                    /** @type {?} */
                    var propManager = meta.managerForProperty(key);
                    /** @type {?} */
                    var orig = dest.get(key);
                    /** @type {?} */
                    var isDeclare = (core.isPresent(declareKey) && key === declareKey);
                    /** @type {?} */
                    var newVal = propManager.mergeProperty(key, orig, value, isDeclare);
                    if (newVal !== orig) {
                        dest.set(key, newVal);
                        /** @type {?} */
                        var keyData = propManager._keyDataToSet;
                        if (core.isPresent(keyData)) {
                            /** @type {?} */
                            var keymask = core.shiftLeft(1, keyData._id);
                            if ((keymask & updatedMask) === 0 &&
                                (dest instanceof PropertyMap)) {
                                updatedMask |= keymask;
                                ((dest)).addContextKey(propManager);
                            }
                        }
                    }
                });
                return updatedMask;
            };
        /**
         * @param {?} matchArray
         * @return {?}
         */
        Rule.prototype.matches = /**
         * @param {?} matchArray
         * @return {?}
         */
            function (matchArray) {
                try {
                    for (var _a = __values(this._selectors), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var sel = _b.value;
                        if (!sel.matches(matchArray)) {
                            return false;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return true;
                var e_1, _c;
            };
        /**
         * returns context keys modified
         */
        /**
         * returns context keys modified
         * @param {?} meta
         * @param {?} properties
         * @param {?} declareKey
         * @return {?}
         */
        Rule.prototype.apply = /**
         * returns context keys modified
         * @param {?} meta
         * @param {?} properties
         * @param {?} declareKey
         * @return {?}
         */
            function (meta, properties, declareKey) {
                if (this._rank === Number.MIN_VALUE) {
                    return 0;
                }
                return Rule.merge(meta, this._properties, properties, declareKey);
            };
        /**
         * @return {?}
         */
        Rule.prototype.disable = /**
         * @return {?}
         */
            function () {
                this._rank = Number.MIN_VALUE;
            };
        /**
         * @return {?}
         */
        Rule.prototype.disabled = /**
         * @return {?}
         */
            function () {
                return this._rank === Number.MIN_VALUE;
            };
        Object.defineProperty(Rule.prototype, "lineNumber", {
            get: /**
             * @return {?}
             */ function () {
                return this._lineNumber;
            },
            set: /**
             * @param {?} lineNumber
             * @return {?}
             */ function (lineNumber) {
                this._lineNumber = lineNumber;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        Rule.prototype.location = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var path = core.isPresent(this._ruleSet) ? this._ruleSet.filePath : 'Unknow';
                return (this._lineNumber >= 0) ? (new core.StringJoiner([
                    path, ':', this._lineNumber + ''
                ])).toString() : path;
            };
        Object.defineProperty(Rule.prototype, "selectors", {
            get: /**
             * @return {?}
             */ function () {
                return this._selectors;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._selectors = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rule.prototype, "properties", {
            get: /**
             * @return {?}
             */ function () {
                return this._properties;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._properties = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rule.prototype, "rank", {
            get: /**
             * @return {?}
             */ function () {
                return this._rank;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._rank = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rule.prototype, "ruleSet", {
            get: /**
             * @return {?}
             */ function () {
                return this._ruleSet;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._ruleSet = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rule.prototype, "id", {
            get: /**
             * @return {?}
             */ function () {
                return this._id;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._id = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        Rule.prototype.isEditable = /**
         * @return {?}
         */
            function () {
                return (this._ruleSet !== null) && (this._ruleSet.editableStart > 0) &&
                    (this._id >= this._ruleSet.editableStart);
            };
        /**
         * @return {?}
         */
        Rule.prototype.createDecl = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var selectors = this._selectors;
                /** @type {?} */
                var declPred = selectors[selectors.length - 1];
                /** @type {?} */
                var prePreds = this.convertKeyOverrides(selectors.slice(0, selectors.length - 1));
                if (core.isBlank(this._properties)) {
                    this._properties = new Map();
                }
                try {
                    for (var selectors_1 = __values(selectors), selectors_1_1 = selectors_1.next(); !selectors_1_1.done; selectors_1_1 = selectors_1.next()) {
                        var p = selectors_1_1.value;
                        if (!(core.isArray(p.value))) {
                            this._properties.set(p.key, p.value);
                        }
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (selectors_1_1 && !selectors_1_1.done && (_a = selectors_1.return))
                            _a.call(selectors_1);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                // Flag the declaring rule as a property
                this._properties.set(Meta.DeclRule, new RuleWrapper(this));
                /** @type {?} */
                var hasOverrideScope = false;
                try {
                    for (var prePreds_1 = __values(prePreds), prePreds_1_1 = prePreds_1.next(); !prePreds_1_1.done; prePreds_1_1 = prePreds_1.next()) {
                        var p = prePreds_1_1.value;
                        if (p.key === declPred.key) {
                            hasOverrideScope = true;
                        }
                    }
                }
                catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                }
                finally {
                    try {
                        if (prePreds_1_1 && !prePreds_1_1.done && (_b = prePreds_1.return))
                            _b.call(prePreds_1);
                    }
                    finally {
                        if (e_3)
                            throw e_3.error;
                    }
                }
                // if decl key isn't scoped, then select on no scope
                if (!hasOverrideScope) {
                    /** @type {?} */
                    var overrideKey = Meta.overrideKeyForKey(declPred.key);
                    prePreds.unshift(new Selector(overrideKey, Meta.NullMarker));
                }
                // The decl rule...
                prePreds.push(new Selector(Meta.KeyDeclare, declPred.key));
                /** @type {?} */
                var m = new Map();
                m.set(declPred.key, declPred.value);
                return new Rule(prePreds, m, 0, -1);
                var e_2, _a, e_3, _b;
            };
        /**
         *  rewrite any selector of the form "layout=L1, class=c, layout=L2" to
         *  "layout_o=L1 class=c, layout=L2"
         */
        /**
         *  rewrite any selector of the form "layout=L1, class=c, layout=L2" to
         *  "layout_o=L1 class=c, layout=L2"
         * @param {?} orig
         * @return {?}
         */
        Rule.prototype.convertKeyOverrides = /**
         *  rewrite any selector of the form "layout=L1, class=c, layout=L2" to
         *  "layout_o=L1 class=c, layout=L2"
         * @param {?} orig
         * @return {?}
         */
            function (orig) {
                /** @type {?} */
                var result = orig;
                /** @type {?} */
                var count = orig.length;
                for (var i = 0; i < count; i++) {
                    /** @type {?} */
                    var p = orig[i];
                    // See if overridded by same key later in selector
                    for (var j = i + 1; j < count; j++) {
                        /** @type {?} */
                        var pNext = orig[j];
                        if (pNext.key === p.key) {
                            // if we're overridden, we drop ours, and replace the next collision
                            // with one with our prefix
                            // make a copy if we haven't already
                            if (result === orig) {
                                result = orig.slice(0, i);
                            }
                            p = new Selector(Meta.overrideKeyForKey(p.key), p.value);
                            break;
                        }
                    }
                    if (result !== orig) {
                        result.push(p);
                    }
                }
                return result;
            };
        /**
         * @return {?}
         */
        Rule.prototype.toString = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var sj = new core.StringJoiner(['<Rule [']);
                sj.add(this._rank + '] ');
                if (core.isBlank(this.selectors)) {
                    sj.add('null, null --> null >');
                }
                else {
                    sj.add(core.ListWrapper.toString(this._selectors));
                    sj.add(' -> ');
                    if (!this._properties) {
                        sj.add('[,]' + ' >');
                    }
                    else {
                        if (this._properties.has('declRule')) ;
                        sj.add(core.MapWrapper.toString(this._properties) + ' >');
                    }
                    sj.add('[ ');
                    sj.add(this.keyIndexedMask + ', ');
                    sj.add(this.keyAntiMask + ', ');
                    sj.add(this.keyMatchesMask + '');
                    sj.add(' ]');
                }
                return sj.toString();
            };
        /**
         * @param {?} values
         * @param {?} meta
         * @return {?}
         */
        Rule.prototype._checkRule = /**
         * @param {?} values
         * @param {?} meta
         * @return {?}
         */
            function (values, meta) {
                var _this = this;
                core.ListWrapper.forEachWithIndex(this.selectors, function (p, i) {
                    /** @type {?} */
                    var contextValue = values.get(p.key);
                    /** @type {?} */
                    var keyData = meta.keyData(p.key);
                    if (core.isPresent(keyData._transformer)) {
                        contextValue = keyData._transformer.tranformForMatch(contextValue);
                    }
                    if (core.isPresent(contextValue) &&
                        ((Meta.KeyAny === p.value && core.BooleanWrapper.boleanValue(contextValue) ||
                            Meta.objectEquals(contextValue, p.value) ||
                            (core.isArray(p.value) && p.value.indexOf(contextValue) > -1) ||
                            (core.isArray(p.value) && contextValue.indexOf(p.value) > -1)))) ;
                    else {
                        core.print('Possible bad rule match!  Rule: %s; selector: %s, context val: %s' + _this +
                            ' ' + p + ' ' + contextValue);
                    }
                });
            };
        return Rule;
    }());
    var RuleWrapper = (function () {
        function RuleWrapper(rule) {
            this.rule = rule;
        }
        return RuleWrapper;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Meta is the core class in MetaUI.  An instance of meta represents a 'Rule Base' (a repository
     * rules), and this rule base is used to compute property maps based on a series of key/value
     * constraints (typically based on the current values in a Context instance).
     *
     * Meta works in concert with Match.MatchResult to cache partial matches (match trees) with cached
     * computed property maps. Meta is generally used by way of its subclasses ObjectMeta and UIMeta
     * (which extend Meta with behaviors around auto-creating rules for references Typescripts classes
     * and dynamic properties for field and layout zoning)
     *
     *
     */
    var Meta = (function () {
        function Meta() {
            this._rules = new Array();
            this._ruleCount = 0;
            this._testRules = new Map();
            this._nextKeyId = 0;
            this._ruleSetGeneration = 0;
            this._keyData = new Map();
            this._keyDatasById = new Array(Meta.MaxKeyDatas);
            this._MatchToPropsCache = new Collections.Dictionary();
            this._PropertyMapUniquer = new Collections.Dictionary();
            this._identityCache = new Collections.Dictionary();
            this._managerForProperty = new Map();
            this._declareKeyMask = 0;
            Meta.PropertyMerger_DeclareList = new PropertyMergerDeclareList();
            Meta.PropertyMerger_Traits = new PropertyMergerDeclareListForTrait();
            Meta.PropertyMerger_List = new PropertyMerger_List();
            Meta.Transformer_KeyPresent = new KeyValueTransformer_KeyPresent();
            this._declareKeyMask = this.keyData(Meta.KeyDeclare).maskValue();
            this.registerPropertyMerger(Meta.KeyTrait, Meta.PropertyMerger_Traits);
            /** @type {?} */
            var nooprule = new Rule(null, null, 0, 0);
            nooprule.disable();
            this._rules[0] = nooprule;
            this._ruleCount = 1;
        }
        /*
         A few handy utilities (for which we probably already have superior versions elsewhere)
         */
        /**
         * @param {?} value
         * @return {?}
         */
        Meta.booleanValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return core.BooleanWrapper.boleanValue(value);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        Meta.toList = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return (core.isArray(value)) ? value : [value];
            };
        /**
         * @param {?} one
         * @param {?} two
         * @return {?}
         */
        Meta.objectEquals = /**
         * @param {?} one
         * @param {?} two
         * @return {?}
         */
            function (one, two) {
                if (core.isBlank(one) && core.isBlank(two)) {
                    return true;
                }
                if (core.isBlank(one) || core.isBlank(two)) {
                    return false;
                }
                return core.equals(one, two);
            };
        /**
         * @param {?} key
         * @return {?}
         */
        Meta.overrideKeyForKey = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return key + '_o';
            };
        /**
         * @param {?} traits
         * @param {?} map
         * @return {?}
         */
        Meta.addTraits = /**
         * @param {?} traits
         * @param {?} map
         * @return {?}
         */
            function (traits, map) {
                /** @type {?} */
                var current = map.get(Meta.KeyTrait);
                if (core.isBlank(current)) {
                    map.set(Meta.KeyTrait, traits);
                }
                else {
                    core.ListWrapper.addAll(current, traits);
                    map.set(Meta.KeyTrait, current);
                }
            };
        /**
         * @param {?} trait
         * @param {?} map
         * @return {?}
         */
        Meta.addTrait = /**
         * @param {?} trait
         * @param {?} map
         * @return {?}
         */
            function (trait, map) {
                /** @type {?} */
                var current = map.get(Meta.KeyTrait);
                if (core.isBlank(current)) {
                    map.set(Meta.KeyTrait, Meta.toList(trait));
                }
                else {
                    current.push(trait);
                    map.set(Meta.KeyTrait, current);
                }
            };
        /**
         * @param {?} object
         * @return {?}
         */
        Meta.className = /**
         * @param {?} object
         * @return {?}
         */
            function (object) {
                if (core.isStringMap(object) && (core.isEntity(object) || core.isValue(object))) {
                    return ((object)).className();
                }
                else if (core.isStringMap(object)) {
                    return core.objectToName(object);
                }
                else if (core.isFunction(object)) {
                    return object.name;
                }
                return object;
            };
        /**
         * @param {?} loader
         * @return {?}
         */
        Meta.prototype.registerLoader = /**
         * @param {?} loader
         * @return {?}
         */
            function (loader) {
                this._ruleLoader = loader;
            };
        /**
         * @param {?} rule
         * @return {?}
         */
        Meta.prototype.addRule = /**
         * @param {?} rule
         * @return {?}
         */
            function (rule) {
                /** @type {?} */
                var selectors = rule.selectors;
                if (selectors.length > 0 && selectors[selectors.length - 1].isDecl) {
                    /** @type {?} */
                    var decl = rule.createDecl();
                    this._addRule(decl, true);
                }
                // we allow null to enable creation of a decl, but otherwise this rule has no effect
                if (core.isPresent(rule.properties)) {
                    // After we've captured the decl, do the collapse
                    rule._selectors = rule.convertKeyOverrides(rule._selectors);
                    this._addRule(rule, true);
                }
            };
        /**
         * @param {?} rule
         * @param {?} pos
         * @return {?}
         */
        Meta.prototype._addToRules = /**
         * @param {?} rule
         * @param {?} pos
         * @return {?}
         */
            function (rule, pos) {
                this._rules[pos] = rule;
            };
        // todo: TEST unit test this
        /**
         * @param {?} rule
         * @param {?} checkPropScope
         * @return {?}
         */
        Meta.prototype._addRule = /**
         * @param {?} rule
         * @param {?} checkPropScope
         * @return {?}
         */
            function (rule, checkPropScope) {
                core.assert(core.isPresent(this._currentRuleSet), 'Attempt to add rule without current RuleSet');
                /** @type {?} */
                var selectors = rule._selectors;
                /** @type {?} */
                var entryId = this._currentRuleSet.allocateNextRuleEntry();
                rule.id = entryId;
                if (rule.rank === 0) {
                    rule.rank = this._currentRuleSet._rank++;
                }
                rule.ruleSet = this._currentRuleSet;
                this._addToRules(rule, entryId);
                /** @type {?} */
                var lastScopeKeyData;
                /** @type {?} */
                var declKey;
                /** @type {?} */
                var declMask = this.declareKeyMask;
                /** @type {?} */
                var matchMask = 0;
                /** @type {?} */
                var indexedMask = 0;
                /** @type {?} */
                var antiMask = 0;
                /** @type {?} */
                var count = selectors.length;
                /** @type {?} */
                var indexOnlySelector = Meta._UsePartialIndexing ? this.bestSelectorToIndex(selectors) : null;
                for (var i = count - 1; i >= 0; i--) {
                    /** @type {?} */
                    var p = selectors[i];
                    /** @type {?} */
                    var shouldIndex = (indexOnlySelector === null || p === indexOnlySelector);
                    /** @type {?} */
                    var data = this.keyData(p.key);
                    /** @type {?} */
                    var dataMask = data.maskValue();
                    if (!this.isNullMarker(p.value)) {
                        if (shouldIndex || Meta._DebugDoubleCheckMatches) {
                            if (core.isArray(p.value)) {
                                try {
                                    for (var _a = __values(p.value), _b = _a.next(); !_b.done; _b = _a.next()) {
                                        var v = _b.value;
                                        data.addEntry(v, entryId);
                                    }
                                }
                                catch (e_1_1) {
                                    e_1 = { error: e_1_1 };
                                }
                                finally {
                                    try {
                                        if (_b && !_b.done && (_c = _a.return))
                                            _c.call(_a);
                                    }
                                    finally {
                                        if (e_1)
                                            throw e_1.error;
                                    }
                                }
                            }
                            else {
                                data.addEntry(p.value, entryId);
                            }
                            if (shouldIndex) {
                                indexedMask |= core.shiftLeft(1, data.id);
                            }
                        }
                        if (!shouldIndex) {
                            // prepare selector for direct evaluation
                            p.bindToKeyData(data);
                        }
                        matchMask |= dataMask;
                        if (data.isPropertyScope && core.isBlank(lastScopeKeyData)) {
                            lastScopeKeyData = data;
                        }
                        if ((dataMask & declMask) !== 0) {
                            declKey = p.value;
                        }
                    }
                    else {
                        antiMask |= dataMask;
                    }
                }
                /** @type {?} */
                var isDecl = core.isPresent(declKey);
                /** @type {?} */
                var nonScopeKeyDecl = core.isPresent(declKey) && !this.keyData(declKey).isPropertyScope;
                if (!isDecl || nonScopeKeyDecl) {
                    // all non-decl rules don't apply outside decl context
                    if (!isDecl) {
                        antiMask |= declMask;
                    }
                    if (core.isPresent(lastScopeKeyData) && checkPropScope) {
                        /** @type {?} */
                        var traitVal = rule.properties.get(Meta.KeyTrait);
                        if (core.isPresent(traitVal)) {
                            /** @type {?} */
                            var traitKey = lastScopeKeyData._key + '_trait';
                            /** @type {?} */
                            var properties = core.MapWrapper.createEmpty();
                            properties.set(traitKey, traitVal);
                            /** @type {?} */
                            var traitRule = new Rule(rule._selectors, properties, rule.rank, rule.lineNumber);
                            this._addRule(traitRule, false);
                        }
                        rule._selectors = selectors.slice(0);
                        /** @type {?} */
                        var scopeSel = new Selector(Meta.ScopeKey, lastScopeKeyData.key);
                        rule.selectors.push(scopeSel);
                        /** @type {?} */
                        var data = this.keyData(Meta.ScopeKey);
                        if (!Meta._UsePartialIndexing || Meta._DebugDoubleCheckMatches) {
                            data.addEntry(lastScopeKeyData._key, entryId);
                            indexedMask |= core.shiftLeft(1, data._id);
                        }
                        scopeSel.bindToKeyData(data);
                        matchMask |= core.shiftLeft(1, data._id);
                    }
                }
                rule.keyMatchesMask = matchMask;
                rule.keyIndexedMask = indexedMask;
                rule.keyAntiMask = antiMask;
                var e_1, _c;
            };
        /**
         * @param {?} selectors
         * @return {?}
         */
        Meta.prototype.bestSelectorToIndex = /**
         * @param {?} selectors
         * @return {?}
         */
            function (selectors) {
                /** @type {?} */
                var best;
                /** @type {?} */
                var bestRank = Number.MIN_VALUE;
                /** @type {?} */
                var pos = 0;
                try {
                    for (var selectors_1 = __values(selectors), selectors_1_1 = selectors_1.next(); !selectors_1_1.done; selectors_1_1 = selectors_1.next()) {
                        var sel = selectors_1_1.value;
                        /** @type {?} */
                        var rank = this.selectivityRank(sel) + pos++;
                        if (rank > bestRank) {
                            best = sel;
                            bestRank = rank;
                        }
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (selectors_1_1 && !selectors_1_1.done && (_a = selectors_1.return))
                            _a.call(selectors_1);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                return best;
                var e_2, _a;
            };
        /**
         * @param {?} selector
         * @return {?}
         */
        Meta.prototype.selectivityRank = /**
         * @param {?} selector
         * @return {?}
         */
            function (selector) {
                /** @type {?} */
                var score = 1;
                /** @type {?} */
                var value = selector.value;
                if (core.isPresent(value) && !(Meta.KeyAny === value)) {
                    score += (core.isBoolean(value) ? 1 : 9);
                }
                /** @type {?} */
                var keyData = this.keyData(selector.key);
                if (keyData.isPropertyScope) {
                    score *= 5;
                }
                // Todo: we could score based on # of entries in KeyData
                return score;
            };
        /**
         * if addition of this rule results in addition of extra rules, those are returned
         * (null otherwise)
         */
        /**
         * if addition of this rule results in addition of extra rules, those are returned
         * (null otherwise)
         * @return {?}
         */
        Meta.prototype._editingRuleEnd = /**
         * if addition of this rule results in addition of extra rules, those are returned
         * (null otherwise)
         * @return {?}
         */
            function () {
                return Math.max(this._currentRuleSet.end, this._ruleCount);
            };
        /**
         * @param {?} rule
         * @return {?}
         */
        Meta.prototype._addRuleAndReturnExtras = /**
         * @param {?} rule
         * @return {?}
         */
            function (rule) {
                /** @type {?} */
                var start = this._editingRuleEnd();
                /** @type {?} */
                var extras;
                this.addRule(rule);
                // Return any extra rules created by addition of this one
                for (var i = start, c = this._editingRuleEnd(); i < c; i++) {
                    /** @type {?} */
                    var r = this._rules[i];
                    if (r !== rule) {
                        if (core.isBlank(extras)) {
                            extras = new Array();
                        }
                        extras.push(r);
                    }
                }
                return extras;
            };
        // Icky method to replace an exited rule in place
        /**
         * @param {?} rule
         * @param {?} extras
         * @return {?}
         */
        Meta.prototype._updateEditedRule = /**
         * @param {?} rule
         * @param {?} extras
         * @return {?}
         */
            function (rule, extras) {
                /** @type {?} */
                var nooprule = new Rule(null, null, 0, 0);
                nooprule.disable();
                this._rules[rule.id] = nooprule;
                if (core.isPresent(extras)) {
                    try {
                        for (var extras_1 = __values(extras), extras_1_1 = extras_1.next(); !extras_1_1.done; extras_1_1 = extras_1.next()) {
                            var r = extras_1_1.value;
                            r.disable();
                        }
                    }
                    catch (e_3_1) {
                        e_3 = { error: e_3_1 };
                    }
                    finally {
                        try {
                            if (extras_1_1 && !extras_1_1.done && (_a = extras_1.return))
                                _a.call(extras_1);
                        }
                        finally {
                            if (e_3)
                                throw e_3.error;
                        }
                    }
                }
                /** @type {?} */
                var preds = rule.selectors;
                if ((core.isPresent(preds) && preds.length > 0) && core.ListWrapper.last(preds).key === Meta.ScopeKey) {
                    core.ListWrapper.removeAt(preds, preds.length);
                }
                // now (re)-add it and invalidate
                extras = this._addRuleAndReturnExtras(rule);
                this.invalidateRules();
                return extras;
                var e_3, _a;
            };
        /**
         * @param {?} preds
         * @return {?}
         */
        Meta.prototype.scopeKeyForSelector = /**
         * @param {?} preds
         * @return {?}
         */
            function (preds) {
                for (var i = preds.length - 1; i >= 0; i--) {
                    /** @type {?} */
                    var pred = preds[i];
                    /** @type {?} */
                    var data = this.keyData(pred.key);
                    if (data.isPropertyScope) {
                        return pred.key;
                    }
                }
                return null;
            };
        /**
         * @param {?} selectorMap
         * @param {?} propertyMap
         * @return {?}
         */
        Meta.prototype.addRuleFromSelectorMap = /**
         * @param {?} selectorMap
         * @param {?} propertyMap
         * @return {?}
         */
            function (selectorMap, propertyMap) {
                this.addRuleFromSelectorMapWithRank(selectorMap, propertyMap, 0);
            };
        /**
         * @param {?} selectorMap
         * @param {?} propertyMap
         * @param {?} rank
         * @return {?}
         */
        Meta.prototype.addRuleFromSelectorMapWithRank = /**
         * @param {?} selectorMap
         * @param {?} propertyMap
         * @param {?} rank
         * @return {?}
         */
            function (selectorMap, propertyMap, rank) {
                /** @type {?} */
                var rule = new Rule(Selector.fromMap(selectorMap), propertyMap, 0, -1);
                if (rank !== 0) {
                    rule.rank = rank;
                }
                this.addRule(rule);
            };
        /**
         * @param {?} ruleSet
         * @param {?} selectors
         * @return {?}
         */
        Meta.prototype.addRules = /**
         * @param {?} ruleSet
         * @param {?} selectors
         * @return {?}
         */
            function (ruleSet, selectors) {
                /** @type {?} */
                var props;
                /** @type {?} */
                var rules;
                core.MapWrapper.iterable(ruleSet).forEach(function (value, key) {
                    if (key === 'props') {
                        props = value;
                    }
                    else if (key === 'rules') {
                        rules = value;
                    }
                    else {
                        selectors.push(new Selector(key, value));
                    }
                });
                if (core.isPresent(props)) {
                    this.addRule(new Rule(selectors, props, 0));
                }
                if (core.isPresent(rules)) {
                    try {
                        for (var rules_1 = __values(rules), rules_1_1 = rules_1.next(); !rules_1_1.done; rules_1_1 = rules_1.next()) {
                            var r = rules_1_1.value;
                            this.addRules(r, selectors);
                        }
                    }
                    catch (e_4_1) {
                        e_4 = { error: e_4_1 };
                    }
                    finally {
                        try {
                            if (rules_1_1 && !rules_1_1.done && (_a = rules_1.return))
                                _a.call(rules_1);
                        }
                        finally {
                            if (e_4)
                                throw e_4.error;
                        }
                    }
                }
                var e_4, _a;
            };
        // this one expect that we already opened the ruleset
        /**
         * @param {?=} ruleText
         * @param {?=} module
         * @param {?=} editable
         * @return {?}
         */
        Meta.prototype._loadRules = /**
         * @param {?=} ruleText
         * @param {?=} module
         * @param {?=} editable
         * @return {?}
         */
            function (ruleText, module, editable) {
                var _this = this;
                if (module === void 0) {
                    module = 'system';
                }
                if (editable === void 0) {
                    editable = true;
                }
                try {
                    if (core.isPresent(this._ruleLoader)) {
                        this._ruleLoader.loadRules(this, ruleText, module, function (rule) { return _this.addRule(rule); });
                    }
                }
                catch (e) {
                    this.endRuleSet().disableRules();
                    throw new Error('Error loading rule: ' + e);
                }
            };
        /**
         * @param {?=} ruleText
         * @return {?}
         */
        Meta.prototype.loadRules = /**
         * @param {?=} ruleText
         * @return {?}
         */
            function (ruleText) {
                this._loadRulesWithRuleSet('StringLiteral', ruleText, 0);
                this.endRuleSet();
            };
        /**
         * @param {?} filename
         * @param {?} ruleText
         * @param {?} rank
         * @return {?}
         */
        Meta.prototype._loadRulesWithRuleSet = /**
         * @param {?} filename
         * @param {?} ruleText
         * @param {?} rank
         * @return {?}
         */
            function (filename, ruleText, rank) {
                this.beginRuleSetWithRank(rank, filename);
                try {
                    this._loadRules(ruleText);
                }
                catch (e) {
                    this.endRuleSet().disableRules();
                    throw new Error('Error loading rule: ' + e);
                }
            };
        /**
         * @param {?} source
         * @param {?} userClass
         * @return {?}
         */
        Meta.prototype.loadUserRule = /**
         * @param {?} source
         * @param {?} userClass
         * @return {?}
         */
            function (source, userClass) {
                return core.unimplemented();
            };
        /**
         * @param {?} propString
         * @param {?} propertyMap
         * @return {?}
         */
        Meta.prototype.parsePropertyAssignment = /**
         * @param {?} propString
         * @param {?} propertyMap
         * @return {?}
         */
            function (propString, propertyMap) {
                // todo: implement this
                return core.unimplemented();
            };
        /**
         * @return {?}
         */
        Meta.prototype.clearCaches = /**
         * @return {?}
         */
            function () {
                this._MatchToPropsCache = new Collections.Dictionary();
                this._PropertyMapUniquer = new Collections.Dictionary();
                this._identityCache = new Collections.Dictionary();
            };
        /**
         * @param {?} rule
         * @return {?}
         */
        Meta.prototype.isTraitExportRule = /**
         * @param {?} rule
         * @return {?}
         */
            function (rule) {
                if (core.isBlank(rule.properties) || rule || rule.properties.size === 1) {
                    /** @type {?} */
                    var key = Array.from(rule.properties.keys())[0];
                    return core.StringWrapper.endsWidth(key, '_trait');
                }
                return false;
            };
        /**
         * @param {?} identificator
         * @return {?}
         */
        Meta.prototype.beginRuleSet = /**
         * @param {?} identificator
         * @return {?}
         */
            function (identificator) {
                this.beginRuleSetWithRank(this._ruleCount, identificator);
            };
        /**
         * @param {?} rank
         * @param {?} filePath
         * @return {?}
         */
        Meta.prototype.beginRuleSetWithRank = /**
         * @param {?} rank
         * @param {?} filePath
         * @return {?}
         */
            function (rank, filePath) {
                try {
                    core.assert(core.isBlank(this._currentRuleSet), 'Can t start new rule set while one in progress');
                    this._currentRuleSet = new RuleSet(this);
                    this._currentRuleSet._start = this._ruleCount;
                    this._currentRuleSet._end = this._ruleCount;
                    this._currentRuleSet._rank = rank;
                    this._currentRuleSet._filePath = filePath;
                }
                catch (e) {
                    throw e;
                }
            };
        /**
         * @param {?} orig
         * @return {?}
         */
        Meta.prototype.beginReplacementRuleSet = /**
         * @param {?} orig
         * @return {?}
         */
            function (orig) {
                /** @type {?} */
                var origRank = orig.startRank();
                this.beginRuleSetWithRank(this._ruleCount, orig._filePath);
                this._currentRuleSet._rank = origRank;
            };
        /**
         * @return {?}
         */
        Meta.prototype.endRuleSet = /**
         * @return {?}
         */
            function () {
                core.assert(core.isPresent(this._currentRuleSet), 'No rule set progress');
                /** @type {?} */
                var result = this._currentRuleSet;
                if (this._ruleCount < result._end) {
                    this._ruleCount = result._end;
                }
                this._currentRuleSet = null;
                this._ruleSetGeneration++;
                return result;
            };
        Object.defineProperty(Meta.prototype, "ruleSetGeneration", {
            get: /**
             * @return {?}
             */ function () {
                return this._ruleSetGeneration;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        Meta.prototype.invalidateRules = /**
         * @return {?}
         */
            function () {
                this._ruleSetGeneration++;
                this.clearCaches();
            };
        /**
         * @return {?}
         */
        Meta.prototype.newContext = /**
         * @return {?}
         */
            function () {
                return new Context(this);
            };
        Object.defineProperty(Meta.prototype, "declareKeyMask", {
            get: /**
             * @return {?}
             */ function () {
                return this._declareKeyMask;
            },
            enumerable: true,
            configurable: true
        });
        // Touch a key/value to force pre-loading/registration of associated rule files
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        Meta.prototype.touch = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                /** @type {?} */
                var context = this.newContext();
                context.push();
                context.set(key, value);
                context.allProperties();
                context.pop();
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        Meta.prototype.transformValue = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                /** @type {?} */
                var keyData = this._keyData.get(key);
                if (core.isPresent(keyData) && core.isPresent(keyData._transformer)) {
                    value = keyData._transformer.tranformForMatch(value);
                }
                return value;
            };
        /**
         * @param {?} key
         * @param {?} value
         * @param {?} intermediateResult
         * @return {?}
         */
        Meta.prototype.match = /**
         * @param {?} key
         * @param {?} value
         * @param {?} intermediateResult
         * @return {?}
         */
            function (key, value, intermediateResult) {
                /** @type {?} */
                var keyData = this._keyData.get(key);
                if (core.isBlank(keyData)) {
                    return intermediateResult;
                }
                /** @type {?} */
                var keyMask = core.shiftLeft(1, keyData._id);
                // Does our result already include this key?  Then no need to join again
                // if (intermediateResult !== null && (intermediateResult._keysMatchedMask & keyMask) !==
                // 0) return intermediateResult;
                return new MatchResult(this, keyData, value, intermediateResult);
            };
        /**
         * @param {?} key
         * @param {?} value
         * @param {?} intermediateResult
         * @return {?}
         */
        Meta.prototype.unionOverrideMatch = /**
         * @param {?} key
         * @param {?} value
         * @param {?} intermediateResult
         * @return {?}
         */
            function (key, value, intermediateResult) {
                /** @type {?} */
                var keyData = this._keyData.get(Meta.overrideKeyForKey(key));
                if (core.isBlank(keyData)) {
                    return intermediateResult;
                }
                return new UnionMatchResult(this, keyData, value, intermediateResult);
            };
        /**
         * @return {?}
         */
        Meta.prototype.newPropertiesMap = /**
         * @return {?}
         */
            function () {
                return new PropertyMap();
            };
        /**
         * @param {?} matchResult
         * @return {?}
         */
        Meta.prototype.propertiesForMatch = /**
         * @param {?} matchResult
         * @return {?}
         */
            function (matchResult) {
                /** @type {?} */
                var properties = this._MatchToPropsCache.getValue(matchResult);
                if (core.isPresent(properties)) {
                    return properties;
                }
                properties = this.newPropertiesMap();
                /** @type {?} */
                var arr = matchResult.filteredMatches();
                if (core.isBlank(arr)) {
                    return properties;
                }
                /** @type {?} */
                var count = arr[0];
                /** @type {?} */
                var rules = new Array(count);
                for (var i = 0; i < count; i++) {
                    rules[i] = this._rules[arr[i + 1]];
                }
                core.ListWrapper.sort(rules, function (o1, o2) { return o1.rank - o2.rank; });
                /** @type {?} */
                var modifiedMask = 0;
                /** @type {?} */
                var declareKey = ((this._declareKeyMask & matchResult.keysMatchedMask) !== 0)
                    ? matchResult.valueForKey(Meta.KeyDeclare) : null;
                for (var r in rules) {
                    modifiedMask |= rules[r].apply(this, properties, declareKey);
                }
                properties.awakeProperties();
                this._MatchToPropsCache.setValue(matchResult.immutableCopy(), properties);
                return properties;
            };
        /**
         * @param {?} key
         * @return {?}
         */
        Meta.prototype.keyData = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                /** @type {?} */
                var data = this._keyData.get(key);
                if (core.isBlank(data)) {
                    /** @type {?} */
                    var id = this._nextKeyId;
                    if (id >= Meta.MaxKeyDatas - 1) {
                        core.print('Exceeded maximum number of context keys');
                    }
                    this._nextKeyId++;
                    data = new KeyData(key, id);
                    this._keyDatasById[id] = data;
                    this._keyData.set(key, data);
                }
                return data;
            };
        /**
         * @param {?} mask
         * @return {?}
         */
        Meta.prototype._keysInMask = /**
         * @param {?} mask
         * @return {?}
         */
            function (mask) {
                /** @type {?} */
                var matches = [];
                /** @type {?} */
                var pos = 0;
                while (mask !== 0) {
                    if ((mask & 1) !== 0) {
                        matches.push(this._keyDatasById[pos]._key);
                    }
                    pos++;
                    mask = core.shiftRight(mask, 1);
                }
                return matches;
            };
        /**
         * @param {?} key
         * @param {?} o
         * @return {?}
         */
        Meta.prototype.registerKeyInitObserver = /**
         * @param {?} key
         * @param {?} o
         * @return {?}
         */
            function (key, o) {
                this.keyData(key).addObserver(o);
            };
        /**
         * @param {?} key
         * @param {?} transformer
         * @return {?}
         */
        Meta.prototype.registerValueTransformerForKey = /**
         * @param {?} key
         * @param {?} transformer
         * @return {?}
         */
            function (key, transformer) {
                this.keyData(key)._transformer = transformer;
            };
        Object.defineProperty(Meta.prototype, "identityCache", {
            get: /**
             * @return {?}
             */ function () {
                return this._identityCache;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        Meta.prototype.newMatchArray = /**
         * @return {?}
         */
            function () {
                return [];
            };
        /**
         * @param {?} array
         * @param {?} keyData
         * @param {?} matchValue
         * @return {?}
         */
        Meta.prototype.matchArrayAssign = /**
         * @param {?} array
         * @param {?} keyData
         * @param {?} matchValue
         * @return {?}
         */
            function (array, keyData, matchValue) {
                /** @type {?} */
                var idx = keyData._id;
                /** @type {?} */
                var curr = array[idx];
                if (core.isPresent(curr)) {
                    matchValue = curr.updateByAdding(matchValue);
                }
                array[idx] = matchValue;
            };
        /**
         * @param {?} propertyName
         * @param {?} origValue
         * @return {?}
         */
        Meta.prototype.propertyWillDoMerge = /**
         * @param {?} propertyName
         * @param {?} origValue
         * @return {?}
         */
            function (propertyName, origValue) {
                /** @type {?} */
                var merger = this.mergerForProperty(propertyName);
                return this.isPropertyMergerIsChaining(merger) || (core.isPresent(origValue) && (origValue instanceof Map));
            };
        /**
         * @param {?} name
         * @return {?}
         */
        Meta.prototype.managerForProperty = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                /** @type {?} */
                var manager = this._managerForProperty.get(name);
                if (core.isBlank(manager)) {
                    manager = new PropertyManager(name);
                    this._managerForProperty.set(name, manager);
                }
                return manager;
            };
        /**
         * @param {?} propertyName
         * @param {?} contextKey
         * @return {?}
         */
        Meta.prototype.mirrorPropertyToContext = /**
         * @param {?} propertyName
         * @param {?} contextKey
         * @return {?}
         */
            function (propertyName, contextKey) {
                /** @type {?} */
                var keyData = this.keyData(contextKey);
                /** @type {?} */
                var manager = this.managerForProperty(propertyName);
                manager._keyDataToSet = keyData;
            };
        /**
         * @param {?} contextKey
         * @return {?}
         */
        Meta.prototype.defineKeyAsPropertyScope = /**
         * @param {?} contextKey
         * @return {?}
         */
            function (contextKey) {
                /** @type {?} */
                var keyData = this.keyData(contextKey);
                keyData.isPropertyScope = true;
                /** @type {?} */
                var traitKey = contextKey + '_trait';
                this.mirrorPropertyToContext(traitKey, traitKey);
                this.registerPropertyMerger(traitKey, Meta.PropertyMerger_DeclareList);
            };
        /**
         * @param {?} key
         * @return {?}
         */
        Meta.prototype.isPropertyScopeKey = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return Meta.ScopeKey === key;
            };
        /**
         * @param {?} propertyName
         * @param {?} merger
         * @return {?}
         */
        Meta.prototype.registerPropertyMerger = /**
         * @param {?} propertyName
         * @param {?} merger
         * @return {?}
         */
            function (propertyName, merger) {
                if (core.isBlank(merger._meta)) {
                    merger._meta = this;
                }
                /** @type {?} */
                var manager = this.managerForProperty(propertyName);
                manager._merger = merger;
            };
        /**
         * @param {?} propertyName
         * @return {?}
         */
        Meta.prototype.mergerForProperty = /**
         * @param {?} propertyName
         * @return {?}
         */
            function (propertyName) {
                /** @type {?} */
                var manager = this.managerForProperty(propertyName);
                return manager._merger;
            };
        /**
         * @param {?} val
         * @return {?}
         */
        Meta.prototype.isPropertyMergerIsChaining = /**
         * @param {?} val
         * @return {?}
         */
            function (val) {
                return core.isPresent(val.isPropMergerIsChainingMark) && val.isPropMergerIsChainingMark;
            };
        /**
         * @param {?} trait
         * @return {?}
         */
        Meta.prototype.groupForTrait = /**
         * @param {?} trait
         * @return {?}
         */
            function (trait) {
                return 'default';
            };
        /**
         * @return {?}
         */
        Meta.prototype._logRuleStats = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var total = 0;
                /** @type {?} */
                var values = this._keyData.keys();
                /** @type {?} */
                var counts = [];
                try {
                    for (var _a = __values(Array.from(values)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var id = _b.value;
                        /** @type {?} */
                        var keyData = this._keyData.get(id);
                        /** @type {?} */
                        var valuess = keyData.ruleVecs.values();
                        try {
                            for (var valuess_1 = __values(valuess), valuess_1_1 = valuess_1.next(); !valuess_1_1.done; valuess_1_1 = valuess_1.next()) {
                                var vm = valuess_1_1.value;
                                /** @type {?} */
                                var kvc = new KeyValueCount(keyData._key, ((vm))['_value'], core.isPresent(vm._arr) ? vm._arr[0] : 0);
                                total += kvc.count;
                                counts.push(kvc);
                            }
                        }
                        catch (e_5_1) {
                            e_5 = { error: e_5_1 };
                        }
                        finally {
                            try {
                                if (valuess_1_1 && !valuess_1_1.done && (_c = valuess_1.return))
                                    _c.call(valuess_1);
                            }
                            finally {
                                if (e_5)
                                    throw e_5.error;
                            }
                        }
                    }
                }
                catch (e_6_1) {
                    e_6 = { error: e_6_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_d = _a.return))
                            _d.call(_a);
                    }
                    finally {
                        if (e_6)
                            throw e_6.error;
                    }
                }
                core.ListWrapper.sort(counts, function (o1, o2) { return o2.count - o1.count; });
                /** @type {?} */
                var buf = new core.StringJoiner([]);
                /** @type {?} */
                var c = Math.min(10, counts.length);
                buf.add('Total index entries comparisons performed: ' + Match._Debug_ElementProcessCount);
                buf.add('\nTotal index entries: ' + total);
                buf.add('\nTop  keys/values: ' + c);
                for (var i = 0; i < c; i++) {
                    /** @type {?} */
                    var kvc = counts[i];
                    buf.add('     ' + kvc.key + '  = ' + kvc.value + ' : ' + kvc.count + ' entries');
                    buf.add('\n');
                }
                core.print(buf.toString());
                var e_6, _d, e_5, _c;
            };
        /**
         * @return {?}
         */
        Meta.prototype.toString = /**
         * @return {?}
         */
            function () {
                return 'Meta';
            };
        /**
         * @param {?} value
         * @return {?}
         */
        Meta.prototype.isNullMarker = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return core.isPresent(value) && value['markernull'];
            };
        /**
         * @param {?} testRuleName
         * @param {?} source
         * @return {?}
         */
        Meta.prototype.addTestUserRule = /**
         * @param {?} testRuleName
         * @param {?} source
         * @return {?}
         */
            function (testRuleName, source) {
                this._testRules.set(testRuleName, source);
            };
        Meta.KeyAny = '*';
        Meta.KeyDeclare = 'declare';
        Meta.KeyTrait = 'trait';
        Meta.LowRulePriority = -100000;
        Meta.SystemRulePriority = -200000;
        Meta.ClassRulePriority = -100000;
        Meta.TemplateRulePriority = 100000;
        Meta.EditorRulePriority = 200000;
        Meta.MaxKeyDatas = 64;
        Meta.NullMarker = { markernull: true };
        Meta.ScopeKey = 'scopeKey';
        Meta.DeclRule = 'declRule';
        /**
         *
         * PartialIndexing indexes each rule by a single (well chosen) key and evaluates other parts of
         * the selector on the index-filtered matches (generally this is a  win since may selectors are
         * not selective, resulting in huge rule vectors)
         *
         */
        Meta._UsePartialIndexing = true;
        Meta._DebugDoubleCheckMatches = false;
        Meta.PropertyMerger_DeclareList = null;
        Meta.PropertyMerger_Traits = null;
        Meta.PropertyMerger_List = null;
        Meta.Transformer_KeyPresent = null;
        return Meta;
    }());
    var KeyValueCount = (function () {
        function KeyValueCount(key, value, count) {
            this.key = key;
            this.value = value;
            this.count = count;
        }
        return KeyValueCount;
    }());
    /**
     * Store of policy information for particular properties -- most significantly, how
     * successive values of this property are to be *merged* during rule application.
     * (See Meta.registerPropertyMerger).  E.g. 'visible', 'trait', and 'valid' all have unique
     * merge policies.
     */
    var /**
     * Store of policy information for particular properties -- most significantly, how
     * successive values of this property are to be *merged* during rule application.
     * (See Meta.registerPropertyMerger).  E.g. 'visible', 'trait', and 'valid' all have unique
     * merge policies.
     */ PropertyManager = (function () {
        function PropertyManager(_name) {
            this._name = _name;
        }
        /**
         * @param {?} propertyName
         * @param {?} orig
         * @param {?} newValue
         * @param {?} isDeclare
         * @return {?}
         */
        PropertyManager.prototype.mergeProperty = /**
         * @param {?} propertyName
         * @param {?} orig
         * @param {?} newValue
         * @param {?} isDeclare
         * @return {?}
         */
            function (propertyName, orig, newValue, isDeclare) {
                if (core.isBlank(orig)) {
                    return newValue;
                }
                if (newValue instanceof OverrideValue) {
                    return ((newValue)).value();
                }
                if (core.isBlank(this._merger)) {
                    // Perhaps should have a data-type-based merger registry?
                    if (orig instanceof Map) {
                        if (core.isPresent(newValue) && newValue instanceof Map) {
                            /** @type {?} */
                            var origClone = core.MapWrapper.clone(orig);
                            newValue = core.MapWrapper.mergeMapIntoMapWithObject(origClone, newValue, true);
                        }
                    }
                    return newValue;
                }
                if (!(this._merger instanceof PropertyMergerDynamic) &&
                    (orig instanceof DynamicPropertyValue || newValue instanceof DynamicPropertyValue)) {
                    return new DeferredOperationChain(this._merger, orig, newValue);
                }
                return this._merger.merge(orig, newValue, isDeclare);
            };
        return PropertyManager;
    }());
    /**
     * Wrapper for a value that should, in rule application, override any previous value for its
     * property.  This can be used to override default property value merge policy, for instance
     * allowing the 'visible' property to be forced from false to true.
     */
    var /**
     * Wrapper for a value that should, in rule application, override any previous value for its
     * property.  This can be used to override default property value merge policy, for instance
     * allowing the 'visible' property to be forced from false to true.
     */ OverrideValue = (function () {
        function OverrideValue(_value) {
            this._value = _value;
        }
        /**
         * @return {?}
         */
        OverrideValue.prototype.value = /**
         * @return {?}
         */
            function () {
                return this._value === 'null' ? null : this._value;
            };
        /**
         * @return {?}
         */
        OverrideValue.prototype.toString = /**
         * @return {?}
         */
            function () {
                return core.isPresent(this._value) ? this._value.toString() + '!' : 'null' + '!';
            };
        return OverrideValue;
    }());
    /**
     * KeyData is the primary structure for representing information about context keys
     * (e.g. 'class', 'layout', 'operation', 'field', ...), including an index of rules
     * that match on particular values of that key (_ValueMatches).
     *
     * Note that every context key has a small integer ID (0-63) and these are uses in
     * (long) masks for certain rule matching operations.
     */
    var /**
     * KeyData is the primary structure for representing information about context keys
     * (e.g. 'class', 'layout', 'operation', 'field', ...), including an index of rules
     * that match on particular values of that key (_ValueMatches).
     *
     * Note that every context key has a small integer ID (0-63) and these are uses in
     * (long) masks for certain rule matching operations.
     */ KeyData = (function () {
        function KeyData(_key, _id) {
            this._key = _key;
            this._id = _id;
            this._isPropertyScope = false;
            this._ruleVecs = new Collections.Dictionary();
            this._any = this.get(Meta.KeyAny);
        }
        /**
         * @return {?}
         */
        KeyData.prototype.maskValue = /**
         * @return {?}
         */
            function () {
                return core.shiftLeft(1, this._id);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        KeyData.prototype.get = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (core.isBlank(value)) {
                    value = Meta.NullMarker;
                }
                else if (core.isPresent(this._transformer)) {
                    value = this._transformer.tranformForMatch(value);
                }
                /** @type {?} */
                var matches = this._ruleVecs.getValue(value);
                if (core.isBlank(matches)) {
                    matches = new ValueMatches(value);
                    if (core.isPresent(value) && !core.BooleanWrapper.isFalse(value)) {
                        matches._parent = this._any;
                    }
                    this._ruleVecs.setValue(value, matches);
                }
                return matches;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        KeyData.prototype.matchValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                if (core.isArray(value)) {
                    /** @type {?} */
                    var list = value;
                    if (list.length === 1) {
                        return this.get(list[0]);
                    }
                    /** @type {?} */
                    var multi_1 = new MultiMatchValue();
                    core.ListWrapper.forEachWithIndex(list, function (v, i) {
                        multi_1.data.push(_this.get(v));
                    });
                    return multi_1;
                }
                else {
                    return this.get(value);
                }
            };
        /**
         * @param {?} value
         * @param {?} id
         * @return {?}
         */
        KeyData.prototype.addEntry = /**
         * @param {?} value
         * @param {?} id
         * @return {?}
         */
            function (value, id) {
                /** @type {?} */
                var matches = this.get(value);
                /** @type {?} */
                var before = matches._arr;
                /** @type {?} */
                var after = Match.addInt(before, id);
                if (before !== after) {
                    matches._arr = after;
                }
            };
        /**
         * @param {?} owner
         * @param {?} value
         * @return {?}
         */
        KeyData.prototype.lookup = /**
         * @param {?} owner
         * @param {?} value
         * @return {?}
         */
            function (owner, value) {
                var _this = this;
                /** @type {?} */
                var matches = this.get(value);
                if (!matches._read && core.isPresent(this._observers)) {
                    try {
                        if (!matches._read) {
                            // notify
                            if (core.isPresent(value)) {
                                core.ListWrapper.forEachWithIndex(this._observers, function (v, i) {
                                    v.notify(owner, _this._key, value);
                                });
                            }
                        }
                        matches._read = true;
                    }
                    finally {
                    }
                }
                // check if parent has changed and need to union in parent data
                matches.checkParent();
                return matches._arr;
            };
        /**
         * @param {?} value
         * @param {?} parentValue
         * @return {?}
         */
        KeyData.prototype.setParent = /**
         * @param {?} value
         * @param {?} parentValue
         * @return {?}
         */
            function (value, parentValue) {
                /** @type {?} */
                var parent = this.get(parentValue);
                /** @type {?} */
                var child = this.get(value);
                child._parent = parent;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        KeyData.prototype.parent = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var child = this.get(value);
                return child._parent._value;
            };
        /**
         * @param {?} o
         * @return {?}
         */
        KeyData.prototype.addObserver = /**
         * @param {?} o
         * @return {?}
         */
            function (o) {
                if (core.isBlank(this._observers)) {
                    this._observers = new Array();
                }
                this._observers.push(o);
            };
        Object.defineProperty(KeyData.prototype, "isPropertyScope", {
            // If this key defines a scope for properties (e.g. field, class, action)
            // this this returns the name of the selector key for those properties
            // (e.g. field_p, class_p)
            get: /**
             * @return {?}
             */ function () {
                return this._isPropertyScope;
            },
            set: /**
             * @param {?} yn
             * @return {?}
             */ function (yn) {
                this._isPropertyScope = yn;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyData.prototype, "ruleVecs", {
            get: /**
             * @return {?}
             */ function () {
                return this._ruleVecs;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyData.prototype, "key", {
            get: /**
             * @return {?}
             */ function () {
                return this._key;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyData.prototype, "id", {
            get: /**
             * @return {?}
             */ function () {
                return this._id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyData.prototype, "observers", {
            get: /**
             * @return {?}
             */ function () {
                return this._observers;
            },
            enumerable: true,
            configurable: true
        });
        return KeyData;
    }());
    /**
     * Store of policy information for particular properties -- most significantly, how
     * successive values of this property are to be *merged* during rule application.
     * (See Meta.registerPropertyMerger).  E.g. 'visible', 'trait', and 'valid' all have unique
     * merge policies.
     */
    var /**
     * Store of policy information for particular properties -- most significantly, how
     * successive values of this property are to be *merged* during rule application.
     * (See Meta.registerPropertyMerger).  E.g. 'visible', 'trait', and 'valid' all have unique
     * merge policies.
     */ PropertyMap = (function () {
        function PropertyMap(entries) {
            if (core.isPresent(entries)) {
                this._map = new Map(entries);
            }
            else {
                this._map = new Map();
            }
        }
        /**
         * @param {?} key
         * @return {?}
         */
        PropertyMap.prototype.get = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return this._map.get(key);
            };
        /**
         * @return {?}
         */
        PropertyMap.prototype.keys = /**
         * @return {?}
         */
            function () {
                return this._map.keys();
            };
        /**
         * @return {?}
         */
        PropertyMap.prototype.values = /**
         * @return {?}
         */
            function () {
                return this._map.values();
            };
        /**
         * @return {?}
         */
        PropertyMap.prototype.clear = /**
         * @return {?}
         */
            function () {
                this._map.clear();
            };
        /**
         * @param {?} key
         * @param {?=} value
         * @return {?}
         */
        PropertyMap.prototype.set = /**
         * @param {?} key
         * @param {?=} value
         * @return {?}
         */
            function (key, value) {
                return this._map.set(key, value);
            };
        /**
         * @param {?} key
         * @return {?}
         */
        PropertyMap.prototype.delete = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return this._map.delete(key);
            };
        /**
         * @param {?} callbackfn
         * @param {?=} thisArg
         * @return {?}
         */
        PropertyMap.prototype.forEach = /**
         * @param {?} callbackfn
         * @param {?=} thisArg
         * @return {?}
         */
            function (callbackfn, thisArg) {
                this._map.forEach(callbackfn);
            };
        /**
         * @param {?} key
         * @return {?}
         */
        PropertyMap.prototype.has = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return this._map.has(key);
            };
        /**
         * @return {?}
         */
        PropertyMap.prototype[Symbol.iterator] = /**
         * @return {?}
         */
            function () {
                return this._map[Symbol.iterator]();
            };
        /**
         * @return {?}
         */
        PropertyMap.prototype.entries = /**
         * @return {?}
         */
            function () {
                return this._map.entries();
            };
        Object.defineProperty(PropertyMap.prototype, "size", {
            get: /**
             * @return {?}
             */ function () {
                return this._map.size;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        PropertyMap.prototype.awakeProperties = /**
         * @return {?}
         */
            function () {
                var _this = this;
                core.MapWrapper.iterable(this).forEach(function (value, key) {
                    if (isPropertyMapAwaking(value)) {
                        /** @type {?} */
                        var newValue = value.awakeForPropertyMap(_this);
                        if (newValue !== value) {
                            _this.set(key, newValue);
                        }
                    }
                });
            };
        /**
         * @param {?} key
         * @return {?}
         */
        PropertyMap.prototype.addContextKey = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                if (core.isBlank(this._contextPropertiesUpdated)) {
                    this._contextPropertiesUpdated = new Array();
                }
                this._contextPropertiesUpdated.push(key);
            };
        Object.defineProperty(PropertyMap.prototype, "contextKeysUpdated", {
            get: /**
             * @return {?}
             */ function () {
                return this._contextPropertiesUpdated;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        PropertyMap.prototype.toString = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var sj = new core.StringJoiner(['PropertyMap:']);
                sj.add(this.size + ',');
                core.MapWrapper.iterable(this).forEach(function (value, key) {
                    if (isPropertyMapAwaking(value)) {
                        /** @type {?} */
                        var newValue = value.awakeForPropertyMap(_this);
                        if (newValue !== value) {
                            sj.add(key + ':' + value);
                            sj.add(', ');
                        }
                    }
                });
                return sj.toString();
            };
        return PropertyMap;
    }());
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ PropertyMergerDynamic = (function () {
        function PropertyMergerDynamic() {
        }
        /**
         * @param {?} orig
         * @param {?} override
         * @param {?} isDeclare
         * @return {?}
         */
        PropertyMergerDynamic.prototype.merge = /**
         * @param {?} orig
         * @param {?} override
         * @param {?} isDeclare
         * @return {?}
         */
            function (orig, override, isDeclare) {
                return core.unimplemented();
            };
        /**
         * @return {?}
         */
        PropertyMergerDynamic.prototype.toString = /**
         * @return {?}
         */
            function () {
                return 'PropertyMergerDynamic';
            };
        return PropertyMergerDynamic;
    }());
    var PropertyMerger_Overwrite = (function () {
        function PropertyMerger_Overwrite() {
        }
        /**
         * @param {?} orig
         * @param {?} override
         * @param {?} isDeclare
         * @return {?}
         */
        PropertyMerger_Overwrite.prototype.merge = /**
         * @param {?} orig
         * @param {?} override
         * @param {?} isDeclare
         * @return {?}
         */
            function (orig, override, isDeclare) {
                return override;
            };
        /**
         * @return {?}
         */
        PropertyMerger_Overwrite.prototype.toString = /**
         * @return {?}
         */
            function () {
                return 'OVERWRITE';
            };
        return PropertyMerger_Overwrite;
    }());
    /**
     * PropertyMerger for properties the should be unioned as lists
     */
    var /**
     * PropertyMerger for properties the should be unioned as lists
     */ PropertyMerger_List = (function () {
        function PropertyMerger_List() {
        }
        /**
         * @param {?} orig
         * @param {?} override
         * @param {?} isDeclare
         * @return {?}
         */
        PropertyMerger_List.prototype.merge = /**
         * @param {?} orig
         * @param {?} override
         * @param {?} isDeclare
         * @return {?}
         */
            function (orig, override, isDeclare) {
                if (!(core.isArray(orig)) && !(core.isArray(override)) && Meta.objectEquals(orig, override)) {
                    return orig;
                }
                /** @type {?} */
                var l1 = Meta.toList(orig);
                /** @type {?} */
                var l2 = Meta.toList(override);
                /** @type {?} */
                var result = core.ListWrapper.clone(l1);
                core.ListWrapper.addElementsIfAbsent(result, l2);
                return result;
            };
        return PropertyMerger_List;
    }());
    /**
     * PropertyMerger for properties the should override normally, but return lists when
     * in declare mode (e.g. 'class', 'field', 'layout', ...)
     */
    var /**
     * PropertyMerger for properties the should override normally, but return lists when
     * in declare mode (e.g. 'class', 'field', 'layout', ...)
     */ PropertyMergerDeclareList = (function (_super) {
        __extends(PropertyMergerDeclareList, _super);
        function PropertyMergerDeclareList() {
            return _super.call(this) || this;
        }
        /**
         * @param {?} orig
         * @param {?} override
         * @param {?} isDeclare
         * @return {?}
         */
        PropertyMergerDeclareList.prototype.merge = /**
         * @param {?} orig
         * @param {?} override
         * @param {?} isDeclare
         * @return {?}
         */
            function (orig, override, isDeclare) {
                if (!isDeclare) {
                    return override;
                }
                if (!(core.isArray(orig)) && !(core.isArray(override)) && Meta.objectEquals(orig, override)) {
                    return orig;
                }
                /** @type {?} */
                var result = [];
                core.ListWrapper.addElementsIfAbsent(result, Meta.toList(orig));
                core.ListWrapper.addElementsIfAbsent(result, Meta.toList(override));
                return result;
            };
        /**
         * @return {?}
         */
        PropertyMergerDeclareList.prototype.toString = /**
         * @return {?}
         */
            function () {
                return 'PropertyMergerDeclareList';
            };
        return PropertyMergerDeclareList;
    }(PropertyMergerDynamic));
    /**
     * PropertyMerger for the 'trait' property.  Generally, traits are unioned, except for traits
     * from the same 'traitGroup', which override (i.e. only one trait from each traitGroup should
     * survive).
     */
    var /**
     * PropertyMerger for the 'trait' property.  Generally, traits are unioned, except for traits
     * from the same 'traitGroup', which override (i.e. only one trait from each traitGroup should
     * survive).
     */ PropertyMergerDeclareListForTrait = (function (_super) {
        __extends(PropertyMergerDeclareListForTrait, _super);
        function PropertyMergerDeclareListForTrait() {
            return _super.call(this) || this;
        }
        /**
         * @param {?} orig
         * @param {?} override
         * @param {?} isDeclare
         * @return {?}
         */
        PropertyMergerDeclareListForTrait.prototype.merge = /**
         * @param {?} orig
         * @param {?} override
         * @param {?} isDeclare
         * @return {?}
         */
            function (orig, override, isDeclare) {
                if (isDeclare) {
                    return _super.prototype.merge.call(this, orig, override, isDeclare);
                }
                // if we're override a single element with itself, don't go List...
                if (!core.isArray(orig) && !core.isArray(override) && Meta.objectEquals(orig, override)) {
                    return orig;
                }
                /** @type {?} */
                var origL = Meta.toList(orig);
                /** @type {?} */
                var overrideL = Meta.toList(override);
                /** @type {?} */
                var result = [];
                try {
                    for (var origL_1 = __values(origL), origL_1_1 = origL_1.next(); !origL_1_1.done; origL_1_1 = origL_1.next()) {
                        var trait = origL_1_1.value;
                        if (trait instanceof OverrideValue) {
                            trait = ((trait)).value();
                        }
                        /** @type {?} */
                        var canAdd = true;
                        /** @type {?} */
                        var group = this._meta.groupForTrait(trait);
                        if (core.isPresent(group)) {
                            try {
                                for (var overrideL_1 = __values(overrideL), overrideL_1_1 = overrideL_1.next(); !overrideL_1_1.done; overrideL_1_1 = overrideL_1.next()) {
                                    var overrideTrait = overrideL_1_1.value;
                                    if (overrideTrait instanceof OverrideValue) {
                                        overrideTrait = ((overrideTrait)).value();
                                    }
                                    if (group === this._meta.groupForTrait(overrideTrait)) {
                                        canAdd = false;
                                        break;
                                    }
                                }
                            }
                            catch (e_7_1) {
                                e_7 = { error: e_7_1 };
                            }
                            finally {
                                try {
                                    if (overrideL_1_1 && !overrideL_1_1.done && (_a = overrideL_1.return))
                                        _a.call(overrideL_1);
                                }
                                finally {
                                    if (e_7)
                                        throw e_7.error;
                                }
                            }
                        }
                        if (canAdd) {
                            result.push(trait);
                        }
                    }
                }
                catch (e_8_1) {
                    e_8 = { error: e_8_1 };
                }
                finally {
                    try {
                        if (origL_1_1 && !origL_1_1.done && (_b = origL_1.return))
                            _b.call(origL_1);
                    }
                    finally {
                        if (e_8)
                            throw e_8.error;
                    }
                }
                core.ListWrapper.addElementsIfAbsent(result, overrideL);
                return result;
                var e_8, _b, e_7, _a;
            };
        /**
         * @return {?}
         */
        PropertyMergerDeclareListForTrait.prototype.toString = /**
         * @return {?}
         */
            function () {
                return 'PropertyMergerDeclareListForTrait';
            };
        return PropertyMergerDeclareListForTrait;
    }(PropertyMergerDeclareList));
    /**
     * PropertyMerger implementing AND semantics -- i.e. false trumps true.
     * (Used, for instance, for the properties 'visible' and 'editable')
     */
    var /**
     * PropertyMerger implementing AND semantics -- i.e. false trumps true.
     * (Used, for instance, for the properties 'visible' and 'editable')
     */ PropertyMerger_And = (function (_super) {
        __extends(PropertyMerger_And, _super);
        function PropertyMerger_And() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.isPropMergerIsChainingMark = true;
            return _this;
        }
        /**
         * @param {?} orig
         * @param {?} override
         * @param {?} isDeclare
         * @return {?}
         */
        PropertyMerger_And.prototype.merge = /**
         * @param {?} orig
         * @param {?} override
         * @param {?} isDeclare
         * @return {?}
         */
            function (orig, override, isDeclare) {
                // null will reset (so that it can be overridden to true subsequently
                if (core.isBlank(override)) {
                    return null;
                }
                // If we can evaluate statically, do it now
                if ((core.isBoolean(orig) && !(core.BooleanWrapper.boleanValue(orig))) ||
                    (core.isBoolean(override) && !(core.BooleanWrapper.boleanValue(override)))) {
                    return false;
                }
                // ANDing with true is a noop -- return new value
                if (core.isBoolean(orig) && core.BooleanWrapper.boleanValue(orig)) {
                    return (override instanceof DynamicPropertyValue) ? override
                        : core.BooleanWrapper.boleanValue(override);
                }
                if (core.isBoolean(override) && core.BooleanWrapper.boleanValue(override)) {
                    return (orig instanceof DynamicPropertyValue) ? orig : core.BooleanWrapper.boleanValue(override);
                }
                // if one of our values is dynamic, defer
                if ((orig instanceof DynamicPropertyValue || override instanceof DynamicPropertyValue)) {
                    return new DeferredOperationChain(this, orig, override);
                }
                return core.BooleanWrapper.boleanValue(orig) && core.BooleanWrapper.boleanValue(override);
            };
        /**
         * @return {?}
         */
        PropertyMerger_And.prototype.toString = /**
         * @return {?}
         */
            function () {
                return 'AND';
            };
        return PropertyMerger_And;
    }(PropertyMergerDynamic));
    var PropertyMerger_Valid = (function () {
        function PropertyMerger_Valid() {
            this.isPropMergerIsChainingMark = true;
        }
        /**
         * @param {?} orig
         * @param {?} override
         * @param {?} isDeclare
         * @return {?}
         */
        PropertyMerger_Valid.prototype.merge = /**
         * @param {?} orig
         * @param {?} override
         * @param {?} isDeclare
         * @return {?}
         */
            function (orig, override, isDeclare) {
                /**
                         *
                         *
                         return (isString(override) || ( isBoolean(override) &&
                         !(BooleanWrapper.boleanValue(override)))) ? override : orig;
                         */
                // if first is error (error message or false, it wins), otherwise second
                return (core.isString(override) || (core.isBoolean(override) && core.BooleanWrapper.isFalse(override)))
                    ? override : orig;
            };
        /**
         * @return {?}
         */
        PropertyMerger_Valid.prototype.toString = /**
         * @return {?}
         */
            function () {
                return 'VALIDATE';
            };
        return PropertyMerger_Valid;
    }());
    /**
     * A group of rules originating from a common source.
     * All rules must be added to the rule base as part of a RuleSet.
     */
    var /**
     * A group of rules originating from a common source.
     * All rules must be added to the rule base as part of a RuleSet.
     */ RuleSet = (function () {
        function RuleSet(_meta) {
            this._meta = _meta;
            this._start = 0;
            this._end = 0;
            this._editableStart = -1;
            this._rank = 0;
        }
        /**
         * @return {?}
         */
        RuleSet.prototype.disableRules = /**
         * @return {?}
         */
            function () {
                for (var i = this._start; i < this._end; i++) {
                    this._meta._rules[i].disable();
                }
                this._meta.clearCaches();
            };
        Object.defineProperty(RuleSet.prototype, "filePath", {
            get: /**
             * @return {?}
             */ function () {
                return this._filePath;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} editableOnly
         * @return {?}
         */
        RuleSet.prototype.rules = /**
         * @param {?} editableOnly
         * @return {?}
         */
            function (editableOnly) {
                /** @type {?} */
                var result = [];
                /** @type {?} */
                var i = (editableOnly) ? (this._editableStart === -1 ? this._end : this._editableStart)
                    : this._start;
                for (; i < this._end; i++) {
                    /** @type {?} */
                    var r = this._meta._rules[i];
                    if (!r.disabled() && !this._meta.isTraitExportRule(r)) {
                        result.push(r);
                    }
                }
                return result;
            };
        /**
         * @return {?}
         */
        RuleSet.prototype.startRank = /**
         * @return {?}
         */
            function () {
                return (this._start < this._meta._ruleCount)
                    ? this._meta._rules[this._start].rank
                    : this._rank - (this._end - this._start);
            };
        /**
         * @return {?}
         */
        RuleSet.prototype.allocateNextRuleEntry = /**
         * @return {?}
         */
            function () {
                return (this._meta._ruleCount > this._end) ? this._meta._ruleCount++ : this._end++;
            };
        Object.defineProperty(RuleSet.prototype, "start", {
            get: /**
             * @return {?}
             */ function () {
                return this._start;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuleSet.prototype, "end", {
            get: /**
             * @return {?}
             */ function () {
                return this._end;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuleSet.prototype, "editableStart", {
            get: /**
             * @return {?}
             */ function () {
                return this._editableStart;
            },
            enumerable: true,
            configurable: true
        });
        return RuleSet;
    }());
    /**
     *
     * Uniquely represents a particular key/value in the Meta scope, and indexes all rules
     * with (indexed) Selectors matching that key/value.
     * ValueMatches also models *inheritance* by allowing one key/value to have another
     * as its 'parent' and thereby match on any Selector (and rule) that its parent would.
     *
     * For instance, this enables a rule on class=Number to apply to class=Integer and
     * class=BigDecimal, and one on class=* to apply to any.
     *
     * The utility of 'parent' is not limited, of course, to the key 'class': all keys
     * take advantage of the parent '*' to support unqualified matches on that key, and
     * keys like 'operation' define a value hierarchy ( 'inspect' -> {'view', 'search'},
     * 'search' -> {'keywordSearch', 'textSearch'})
     */
    var /**
     *
     * Uniquely represents a particular key/value in the Meta scope, and indexes all rules
     * with (indexed) Selectors matching that key/value.
     * ValueMatches also models *inheritance* by allowing one key/value to have another
     * as its 'parent' and thereby match on any Selector (and rule) that its parent would.
     *
     * For instance, this enables a rule on class=Number to apply to class=Integer and
     * class=BigDecimal, and one on class=* to apply to any.
     *
     * The utility of 'parent' is not limited, of course, to the key 'class': all keys
     * take advantage of the parent '*' to support unqualified matches on that key, and
     * keys like 'operation' define a value hierarchy ( 'inspect' -> {'view', 'search'},
     * 'search' -> {'keywordSearch', 'textSearch'})
     */ ValueMatches = (function () {
        function ValueMatches(value) {
            this._read = false;
            this._parentSize = 0;
            this._value = value;
        }
        /**
         * @return {?}
         */
        ValueMatches.prototype.checkParent = /**
         * @return {?}
         */
            function () {
                // todo: performance: keep a rule set version # and only do this when the rule set has
                // reloaded
                if (core.isPresent(this._parent)) {
                    this._parent.checkParent();
                    /** @type {?} */
                    var parentArr = this._parent._arr;
                    if (core.isPresent(parentArr) && parentArr[0] !== this._parentSize) {
                        this._arr = Match.union(this._arr, parentArr);
                        this._parentSize = parentArr[0];
                    }
                }
            };
        /**
         * @param {?} other
         * @return {?}
         */
        ValueMatches.prototype.matches = /**
         * @param {?} other
         * @return {?}
         */
            function (other) {
                if (!(other instanceof ValueMatches)) {
                    return other.matches(this);
                }
                // we recurse up parent chain to do superclass matches
                return (other === this) || (core.isPresent(this._parent) && this._parent.matches(other));
            };
        /**
         * @param {?} other
         * @return {?}
         */
        ValueMatches.prototype.updateByAdding = /**
         * @param {?} other
         * @return {?}
         */
            function (other) {
                /** @type {?} */
                var multi = new MultiMatchValue();
                multi.data.push(this);
                return multi.updateByAdding(other);
            };
        return ValueMatches;
    }());
    var MultiMatchValue = (function () {
        function MultiMatchValue() {
            this.data = [];
        }
        /**
         * @param {?} other
         * @return {?}
         */
        MultiMatchValue.prototype.matches = /**
         * @param {?} other
         * @return {?}
         */
            function (other) {
                if (other instanceof MultiMatchValue) {
                    // list / list comparison: any combo can match
                    for (var i = 0; i < this.data.length; i++) {
                        if (other.matches(this.data[i])) {
                            return true;
                        }
                    }
                }
                else {
                    // single value against array: one must match
                    for (var i = 0; i < this.data.length; i++) {
                        if (this.data[i].matches(other)) {
                            return true;
                        }
                    }
                }
                return false;
            };
        /**
         * @param {?} other
         * @return {?}
         */
        MultiMatchValue.prototype.updateByAdding = /**
         * @param {?} other
         * @return {?}
         */
            function (other) {
                if (other instanceof MultiMatchValue) {
                    /** @type {?} */
                    var matchValue = (other);
                    core.ListWrapper.addAll(this.data, matchValue.data);
                }
                else {
                    this.data.push(other);
                }
                return this;
            };
        return MultiMatchValue;
    }());
    var KeyValueTransformer_KeyPresent = (function () {
        function KeyValueTransformer_KeyPresent() {
        }
        /**
         * @param {?} o
         * @return {?}
         */
        KeyValueTransformer_KeyPresent.prototype.tranformForMatch = /**
         * @param {?} o
         * @return {?}
         */
            function (o) {
                return (core.isPresent(o) && !(core.BooleanWrapper.isFalse(o))) ? true : false;
            };
        return KeyValueTransformer_KeyPresent;
    }());
    /**
     * @param {?} arg
     * @return {?}
     */
    function isPropertyMapAwaking(arg) {
        return core.isPresent(arg) && core.isPresent(arg.propertyAwaking);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright 2017 SAP Ariba
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * Based on original work: MetaUI: Craig Federighi (2008)
     *
     */
    var ItemProperties = (function () {
        function ItemProperties(name, properties, hidden) {
            this.name = name;
            this.properties = properties;
            this.hidden = hidden;
        }
        return ItemProperties;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * ObjectMeta is resposible for setting up everything related to class, field, actions
     *
     */
    var ObjectMeta = (function (_super) {
        __extends(ObjectMeta, _super);
        // todo: implement new decorators in typescript if we want ot annotate _annotationProcessors
        function ObjectMeta() {
            var _this = _super.call(this) || this;
            _this._traitToGroupGeneration = -1;
            _this.registerKeyInitObserver(ObjectMeta.KeyClass, new IntrospectionMetaProvider());
            _this.registerKeyInitObserver(ObjectMeta.KeyType, new FieldTypeIntrospectionMetaProvider());
            // These keys define scopes for their properties
            // These keys define scopes for their properties
            _this.defineKeyAsPropertyScope(ObjectMeta.KeyField);
            _this.defineKeyAsPropertyScope(ObjectMeta.KeyAction);
            _this.defineKeyAsPropertyScope(ObjectMeta.KeyActionCategory);
            _this.defineKeyAsPropertyScope(ObjectMeta.KeyClass);
            // policies for chaining certain well known properties
            // policies for chaining certain well known properties
            _this.registerPropertyMerger(ObjectMeta.KeyVisible, new PropertyMerger_And());
            _this.registerPropertyMerger(ObjectMeta.KeyEditable, new PropertyMerger_And());
            _this.registerPropertyMerger(ObjectMeta.KeyValid, new OMPropertyMerger_Valid());
            _this.registerPropertyMerger(ObjectMeta.KeyClass, Meta.PropertyMerger_DeclareList);
            _this.registerPropertyMerger(ObjectMeta.KeyField, Meta.PropertyMerger_DeclareList);
            _this.registerPropertyMerger(ObjectMeta.KeyAction, Meta.PropertyMerger_DeclareList);
            _this.registerPropertyMerger(ObjectMeta.KeyActionCategory, Meta.PropertyMerger_DeclareList);
            _this.registerPropertyMerger(ObjectMeta.KeyTraitGroup, Meta.PropertyMerger_DeclareList);
            _this.mirrorPropertyToContext(ObjectMeta.KeyClass, ObjectMeta.KeyClass);
            _this.mirrorPropertyToContext(ObjectMeta.KeyType, ObjectMeta.KeyType);
            _this.mirrorPropertyToContext(ObjectMeta.KeyElementType, ObjectMeta.KeyElementType);
            _this.mirrorPropertyToContext(ObjectMeta.KeyTrait, Meta.KeyTrait);
            _this.mirrorPropertyToContext(ObjectMeta.KeyEditable, ObjectMeta.KeyEditable);
            _this.registerValueTransformerForKey(ObjectMeta.KeyObject, Meta.Transformer_KeyPresent);
            // todo: try to support decorators and how we can put meta data into object @Traits,
            // @Properties, @Action
            return _this;
        }
        /**
         * @param {?} context
         * @return {?}
         */
        ObjectMeta.validationError = /**
         * @param {?} context
         * @return {?}
         */
            function (context) {
                /** @type {?} */
                var error = context.propertyForKey(ObjectMeta.KeyValid);
                if (core.isBlank(error)) {
                    return null;
                }
                if (core.isBoolean(error)) {
                    return core.BooleanWrapper.boleanValue(error) ? null : 'Invalid entry';
                }
                return error.toString();
            };
        /*
         *  Provide subclass context with conveniences for getting object field values
         */
        /**
         * @return {?}
         */
        ObjectMeta.prototype.newContext = /**
         * @return {?}
         */
            function () {
                return new ObjectMetaContext(this, false);
            };
        // Use a special map subsclass for our Properties
        /**
         * @return {?}
         */
        ObjectMeta.prototype.newPropertiesMap = /**
         * @return {?}
         */
            function () {
                return new ObjectMetaPropertyMap();
            };
        /**
         * @param {?} context
         * @param {?} key
         * @return {?}
         */
        ObjectMeta.prototype.itemNames = /**
         * @param {?} context
         * @param {?} key
         * @return {?}
         */
            function (context, key) {
                context.push();
                context.set(ObjectMeta.KeyDeclare, key);
                /** @type {?} */
                var itemsNames = context.listPropertyForKey(key);
                context.pop();
                return itemsNames;
            };
        /**
         * @param {?} context
         * @param {?} key
         * @param {?} filterHidden
         * @return {?}
         */
        ObjectMeta.prototype.itemProperties = /**
         * @param {?} context
         * @param {?} key
         * @param {?} filterHidden
         * @return {?}
         */
            function (context, key, filterHidden) {
                return this.itemPropertiesForNames(context, key, this.itemNames(context, key), filterHidden);
            };
        /**
         * @param {?} context
         * @param {?} key
         * @param {?} itemNames
         * @param {?} filterHidden
         * @return {?}
         */
        ObjectMeta.prototype.itemPropertiesForNames = /**
         * @param {?} context
         * @param {?} key
         * @param {?} itemNames
         * @param {?} filterHidden
         * @return {?}
         */
            function (context, key, itemNames, filterHidden) {
                /** @type {?} */
                var result = [];
                try {
                    for (var itemNames_1 = __values(itemNames), itemNames_1_1 = itemNames_1.next(); !itemNames_1_1.done; itemNames_1_1 = itemNames_1.next()) {
                        var itemName = itemNames_1_1.value;
                        context.push();
                        context.set(key, itemName);
                        /** @type {?} */
                        var isVisible = context.allProperties().get(ObjectMeta.KeyVisible);
                        /** @type {?} */
                        var visible = context.staticallyResolveValue(isVisible);
                        /** @type {?} */
                        var isHidden = (core.isBlank(visible)) || core.BooleanWrapper.isFalse(visible);
                        if (!isHidden || !filterHidden) {
                            result.push(new ItemProperties(itemName, context.allProperties(), isHidden));
                        }
                        context.pop();
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (itemNames_1_1 && !itemNames_1_1.done && (_a = itemNames_1.return))
                            _a.call(itemNames_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return result;
                var e_1, _a;
            };
        /**
         * @param {?} trait
         * @return {?}
         */
        ObjectMeta.prototype.groupForTrait = /**
         * @param {?} trait
         * @return {?}
         */
            function (trait) {
                if (this._traitToGroup == null || this._traitToGroupGeneration < this.ruleSetGeneration) {
                    this._traitToGroupGeneration = this.ruleSetGeneration;
                    this._traitToGroup = new Map();
                    /** @type {?} */
                    var context = this.newContext();
                    try {
                        for (var _a = __values(this.itemNames(context, ObjectMeta.KeyTraitGroup)), _b = _a.next(); !_b.done; _b = _a.next()) {
                            var group = _b.value;
                            context.push();
                            context.set(ObjectMeta.KeyTraitGroup, group);
                            try {
                                for (var _c = __values(this.itemNames(context, ObjectMeta.KeyTrait)), _d = _c.next(); !_d.done; _d = _c.next()) {
                                    var name_1 = _d.value;
                                    this._traitToGroup.set(name_1, group);
                                }
                            }
                            catch (e_2_1) {
                                e_2 = { error: e_2_1 };
                            }
                            finally {
                                try {
                                    if (_d && !_d.done && (_e = _c.return))
                                        _e.call(_c);
                                }
                                finally {
                                    if (e_2)
                                        throw e_2.error;
                                }
                            }
                            context.pop();
                        }
                    }
                    catch (e_3_1) {
                        e_3 = { error: e_3_1 };
                    }
                    finally {
                        try {
                            if (_b && !_b.done && (_f = _a.return))
                                _f.call(_a);
                        }
                        finally {
                            if (e_3)
                                throw e_3.error;
                        }
                    }
                }
                return this._traitToGroup.get(trait);
                var e_3, _f, e_2, _e;
            };
        Object.defineProperty(ObjectMeta.prototype, "injector", {
            get: /**
             * @return {?}
             */ function () {
                return this._injector;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._injector = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectMeta.prototype, "componentRegistry", {
            get: /**
             * @return {?}
             */ function () {
                return this._componentRegistry;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._componentRegistry = value;
            },
            enumerable: true,
            configurable: true
        });
        ObjectMeta.KeyClass = 'class';
        ObjectMeta.KeyField = 'field';
        ObjectMeta.KeyAction = 'action';
        ObjectMeta.KeyActionCategory = 'actionCategory';
        ObjectMeta.KeyObject = 'object';
        ObjectMeta.KeyValue = 'value';
        ObjectMeta.KeyType = 'type';
        ObjectMeta.KeyElementType = 'elementType';
        ObjectMeta.KeyTraitGroup = 'traitGroup';
        ObjectMeta.KeyVisible = 'visible';
        ObjectMeta.KeyEditable = 'editable';
        ObjectMeta.KeyValid = 'valid';
        ObjectMeta.KeyRank = 'rank';
        ObjectMeta.DefaultActionCategory = 'General';
        ObjectMeta._FieldPathNullMarker = new core.FieldPath('null');
        return ObjectMeta;
    }(Meta));
    /**
     * When a class is pushed either directly or indirectly (using deffered rules) we receive a
     * ValueQueriedObserver notification in order to register  types for the object. Trying to achieve
     * at least some kind of introspection we need to implement $proto method inside the object that
     * instantiates all types which we can query.
     *
     * Ideally we want to use decorators when dealing with client side typescript class. but for cases
     * where Rules will be loaded using Rest API along with the object instance its impossible.
     */
    var /**
     * When a class is pushed either directly or indirectly (using deffered rules) we receive a
     * ValueQueriedObserver notification in order to register  types for the object. Trying to achieve
     * at least some kind of introspection we need to implement $proto method inside the object that
     * instantiates all types which we can query.
     *
     * Ideally we want to use decorators when dealing with client side typescript class. but for cases
     * where Rules will be loaded using Rest API along with the object instance its impossible.
     */ IntrospectionMetaProvider = (function () {
        function IntrospectionMetaProvider() {
        }
        /**
         * @param {?} meta
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        IntrospectionMetaProvider.prototype.notify = /**
         * @param {?} meta
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (meta, key, value) {
                this._meta = meta;
                /** @type {?} */
                var myObject;
                /** @type {?} */
                var componentRegistry = ((this._meta)).componentRegistry;
                core.assert(core.isPresent(componentRegistry), 'Component registry is not initialized');
                /** @type {?} */
                var clazz = null;
                if (core.isString(value) && (clazz = componentRegistry.nameToType.get(value))
                    && core.isPresent(clazz)) {
                    myObject = new clazz();
                }
                else if (core.isBlank(clazz)) {
                    return;
                }
                core.assert(Meta.className(myObject) === value, 'Trying to process and register a class that does not exists on Context');
                this.registerRulesForClass(myObject, value);
            };
        /**
         * @param {?} object
         * @param {?} className
         * @return {?}
         */
        IntrospectionMetaProvider.prototype.registerRulesForClass = /**
         * @param {?} object
         * @param {?} className
         * @return {?}
         */
            function (object, className) {
                this._meta.keyData(ObjectMeta.KeyClass).setParent(className, 'Object');
                this._meta.beginRuleSet(className);
                try {
                    /** @type {?} */
                    var selectors = [new Selector(ObjectMeta.KeyClass, className)];
                    /** @type {?} */
                    var propertyMap = this._meta.newPropertiesMap();
                    selectors[0].isDecl = true;
                    /** @type {?} */
                    var rule = new Rule(selectors, propertyMap, ObjectMeta.ClassRulePriority);
                    this._meta.addRule(rule);
                    this.registerRulesForFields(object, className);
                }
                finally {
                    this._meta.endRuleSet();
                }
            };
        /**
         * @param {?} object
         * @param {?} className
         * @return {?}
         */
        IntrospectionMetaProvider.prototype.registerRulesForFields = /**
         * @param {?} object
         * @param {?} className
         * @return {?}
         */
            function (object, className) {
                // todo: Can we somehow utilize decorators? Maybe for local typescript defined object, but
                // not objects loaded as json from rest API
                core.assert(core.isPresent(object['$proto']), 'Cannot register fields without a $proto method that will expose all the fields');
                /** @type {?} */
                var instance = object['$proto']();
                /** @type {?} */
                var fieldNames = Object.keys(instance);
                /** @type {?} */
                var rank = 0;
                try {
                    for (var fieldNames_1 = __values(fieldNames), fieldNames_1_1 = fieldNames_1.next(); !fieldNames_1_1.done; fieldNames_1_1 = fieldNames_1.next()) {
                        var name_2 = fieldNames_1_1.value;
                        /** @type {?} */
                        var type = instance[name_2].constructor.name;
                        /** @type {?} */
                        var properties = new Map();
                        properties.set(ObjectMeta.KeyField, name_2);
                        properties.set(ObjectMeta.KeyType, type);
                        properties.set(ObjectMeta.KeyVisible, true);
                        if (core.isArray(instance[name_2])) {
                            core.assert(instance[name_2].length > 0, ' Cannot register type[array] and its type without properly initialized ' +
                                'prototype');
                            /** @type {?} */
                            var item = instance[name_2][0];
                            /** @type {?} */
                            var collectionElementType = item.constructor.name;
                            properties.set(ObjectMeta.KeyElementType, collectionElementType);
                        }
                        /** @type {?} */
                        var selectorList = [
                            new Selector(ObjectMeta.KeyClass, className),
                            new Selector(ObjectMeta.KeyField, name_2),
                        ];
                        selectorList[1].isDecl = true;
                        properties.set(ObjectMeta.KeyRank, (rank++ + 1) * 10);
                        /** @type {?} */
                        var rule = new Rule(selectorList, properties, ObjectMeta.ClassRulePriority);
                        this._meta.addRule(rule);
                    }
                }
                catch (e_4_1) {
                    e_4 = { error: e_4_1 };
                }
                finally {
                    try {
                        if (fieldNames_1_1 && !fieldNames_1_1.done && (_a = fieldNames_1.return))
                            _a.call(fieldNames_1);
                    }
                    finally {
                        if (e_4)
                            throw e_4.error;
                    }
                }
                var e_4, _a;
            };
        return IntrospectionMetaProvider;
    }());
    /**
     * Registers specials types that we are read during introspections
     */
    var /**
     * Registers specials types that we are read during introspections
     */ FieldTypeIntrospectionMetaProvider = (function () {
        function FieldTypeIntrospectionMetaProvider() {
        }
        /**
         * @param {?} meta
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        FieldTypeIntrospectionMetaProvider.prototype.notify = /**
         * @param {?} meta
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (meta, key, value) {
                // print('FieldTypeIntrospectionMetaProvider notified of first use of field:  ' , value);
            };
        return FieldTypeIntrospectionMetaProvider;
    }());
    var ObjectMetaPropertyMap = (function (_super) {
        __extends(ObjectMetaPropertyMap, _super);
        function ObjectMetaPropertyMap() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ObjectMetaPropertyMap.prototype, "fieldPath", {
            get: /**
             * @return {?}
             */ function () {
                if (core.isBlank(this._fieldPath)) {
                    /** @type {?} */
                    var value = this.get(ObjectMeta.KeyValue);
                    /** @type {?} */
                    var fieldName = this.get(ObjectMeta.KeyField);
                    this._fieldPath = (core.isPresent(fieldName) && core.isBlank(value))
                        ? new core.FieldPath(fieldName)
                        : ObjectMeta._FieldPathNullMarker;
                }
                /** @type {?} */
                var isNullPath = this._fieldPath === ObjectMeta._FieldPathNullMarker;
                return isNullPath ? null : this._fieldPath;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} value
         * @return {?}
         */
        ObjectMetaPropertyMap.prototype.isFieldNullMarker = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return core.isPresent(value) && value.path === 'null';
            };
        return ObjectMetaPropertyMap;
    }(PropertyMap));
    var OMPropertyMerger_Valid = (function () {
        function OMPropertyMerger_Valid() {
            this.isPropMergerIsChainingMark = true;
        }
        /**
         * @param {?} orig
         * @param {?} override
         * @param {?} isDeclare
         * @return {?}
         */
        OMPropertyMerger_Valid.prototype.merge = /**
         * @param {?} orig
         * @param {?} override
         * @param {?} isDeclare
         * @return {?}
         */
            function (orig, override, isDeclare) {
                // if first is error (error message or false, it wins), otherwise second
                return (core.isString(override) || (core.isBoolean(override) && core.BooleanWrapper.isFalse(override))) ? override : orig;
            };
        /**
         * @return {?}
         */
        OMPropertyMerger_Valid.prototype.toString = /**
         * @return {?}
         */
            function () {
                return 'VALIDATE';
            };
        return OMPropertyMerger_Valid;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** *
     *  This is generated file. Do not edit !!
     *
     * \@formatter:off
     *
      @type {?} */
    var SystemRules = {
        oss: [
            {
                '_selectors': [
                    {
                        '_key': 'object',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'class': {
                        't': 'Expr',
                        'v': 'Meta.className(object)'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'object',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'declare',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'class': {
                        't': 'Expr',
                        'v': 'Meta.className(object)'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'operation',
                        '_value': 'search',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'class': {
                        't': 'Expr',
                        'v': 'values.get("class")'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'operation',
                        '_value': [
                            'edit',
                            'create',
                            'search'
                        ],
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'operation',
                        '_value': [
                            'edit',
                            'create',
                            'search'
                        ],
                        '_isDecl': false
                    },
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'editing': true
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'operation',
                        '_value': [
                            'edit',
                            'create',
                            'search'
                        ],
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'operation',
                        '_value': [
                            'edit',
                            'create',
                            'search'
                        ],
                        '_isDecl': false
                    },
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'editing': true
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'operation',
                        '_value': [
                            'edit',
                            'create',
                            'search'
                        ],
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'operation',
                        '_value': [
                            'edit',
                            'create',
                            'search'
                        ],
                        '_isDecl': false
                    },
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'editing': true
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'operation',
                        '_value': [
                            'edit',
                            'create',
                            'search'
                        ],
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'operation',
                        '_value': [
                            'edit',
                            'create',
                            'search'
                        ],
                        '_isDecl': false
                    },
                    {
                        '_key': 'action',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'editing': true
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'operation',
                        '_value': [
                            'edit',
                            'create',
                            'search'
                        ],
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'operation',
                        '_value': [
                            'view',
                            'list'
                        ],
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'operation',
                        '_value': [
                            'view',
                            'list'
                        ],
                        '_isDecl': false
                    },
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'editing': false
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'operation',
                        '_value': [
                            'view',
                            'list'
                        ],
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'operation',
                        '_value': [
                            'view',
                            'list'
                        ],
                        '_isDecl': false
                    },
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'editing': false
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'operation',
                        '_value': [
                            'view',
                            'list'
                        ],
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'operation',
                        '_value': [
                            'view',
                            'list'
                        ],
                        '_isDecl': false
                    },
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'editing': false
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'operation',
                        '_value': [
                            'view',
                            'list'
                        ],
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'operation',
                        '_value': [
                            'view',
                            'list'
                        ],
                        '_isDecl': false
                    },
                    {
                        '_key': 'action',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'editing': false
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'operation',
                        '_value': [
                            'view',
                            'list'
                        ],
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'visible': {
                        't': 'SDW',
                        'v': '!properties.get("hidden")'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'editing',
                        '_value': true,
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'editable': true
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'editing',
                        '_value': false,
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'editable': false
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'fiveZones',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'fiveZoneLayout': true,
                    'zones': [
                        'zLeft',
                        'zMiddle',
                        'zRight',
                        'zTop',
                        'zBottom',
                        'zDetail'
                    ]
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'oneZone',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'zones': [
                        'zLeft',
                        'zDetail'
                    ]
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'tableZones',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'zones': [
                        'zMain',
                        'zLeft',
                        'zRight',
                        'zTop',
                        'zBottom',
                        'zDetail'
                    ]
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'operation',
                        '_value': [
                            'create',
                            'edit',
                            'view',
                            'search'
                        ],
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'trait': 'fiveZones'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'operation',
                        '_value': 'list',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'trait': 'tableZones'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'FormZones',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'FormZones',
                        '_isDecl': true
                    },
                    {
                        '_key': 'trait',
                        '_value': 'fiveZones',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'FormZones',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'FormZones',
                        '_isDecl': true
                    },
                    {
                        '_key': 'trait',
                        '_value': 'oneZone',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'FormZones',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'component': 'StringComponent',
                    'bindings': {
                        'value': {
                            't': 'CFP',
                            'v': 'value'
                        }
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'boolean',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'boolean',
                        '_isDecl': false
                    },
                    {
                        '_key': 'editable',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'component': 'Checkbox'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'boolean',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'Number',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'bindings': {
                        'formatter': {
                            't': 'CFP',
                            'v': 'formatters.integer'
                        }
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'Number',
                        '_isDecl': false
                    },
                    {
                        '_key': 'editable',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'component': 'InputFieldComponent'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'Number',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'Number',
                        '_isDecl': false
                    },
                    {
                        '_key': 'operation',
                        '_value': 'search',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'bindings': {
                        'formatter': {
                            't': 'CFP',
                            'v': 'formatters.blankNull.integer'
                        }
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'Number',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'Date',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'component': 'DateAndTimeComponent',
                    'bindings': {
                        'formatter': 'shortDate',
                        'showTime': false
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'Date',
                        '_isDecl': false
                    },
                    {
                        '_key': 'fiveZoneLayout',
                        '_value': true,
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'Date',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'Date',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'dateTime',
                        '_isDecl': true
                    },
                    {
                        '_key': 'editable',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'bindings': {
                        'formatter': 'dateTime',
                        'showTime': true
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'Date',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'java.lang.Enum',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'java.lang.Enum',
                        '_isDecl': false
                    },
                    {
                        '_key': 'editable',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'component': 'GenericChooserComponent',
                    'bindings': {
                        'destinationClass': {
                            't': 'Expr',
                            'v': 'type'
                        },
                        'displayKey': 'name',
                        'formatter': {
                            't': 'CFP',
                            'v': 'formatters.identifier'
                        },
                        'key': {
                            't': 'Expr',
                            'v': 'field'
                        },
                        'object': {
                            't': 'Expr',
                            'v': 'object'
                        }
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'java.lang.Enum',
                        '_isDecl': false
                    },
                    {
                        '_key': 'editable',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'operation',
                        '_value': [
                            'search',
                            'list'
                        ],
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'bindings': {
                        'type': 'Popup'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'java.lang.Enum',
                        '_isDecl': false
                    },
                    {
                        '_key': 'editable',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'java.lang.Enum',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': [
                            'Array',
                            'Set'
                        ],
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': [
                            'Array',
                            'Set'
                        ],
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'enum',
                        '_isDecl': true
                    },
                    {
                        '_key': 'editable',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'component': 'GenericChooserComponent',
                    'bindings': {
                        'multiselect': true,
                        'destinationClass': {
                            't': 'Expr',
                            'v': 'properties.get("enumClass")'
                        },
                        'displayKey': 'name',
                        'formatter': {
                            't': 'CFP',
                            'v': 'formatters.identifier'
                        },
                        'key': {
                            't': 'Expr',
                            'v': 'field'
                        },
                        'object': {
                            't': 'Expr',
                            'v': 'object'
                        }
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': [
                            'Array',
                            'Set'
                        ],
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': [
                            'Array',
                            'Set'
                        ],
                        '_isDecl': false
                    },
                    {
                        '_key': 'operation',
                        '_value': [
                            'search',
                            'list'
                        ],
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'visible': false
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': [
                            'Array',
                            'Set'
                        ],
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': [
                            'Array',
                            'Set'
                        ],
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'ownedToMany',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'component': 'MetaDetailTable',
                    'after': 'zDetail'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': [
                            'Array',
                            'Set'
                        ],
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': '[B',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': '[B',
                        '_isDecl': false
                    },
                    {
                        '_key': 'editable',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'component': 'FileUploadChooser',
                    'bindings': {
                        'bytes': {
                            't': 'CFP',
                            'v': 'value'
                        }
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': '[B',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': '[B',
                        '_isDecl': false
                    },
                    {
                        '_key': 'editable',
                        '_value': false,
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'bindings': {
                        'value': {
                            't': 'Expr',
                            'v': 'value ? ("" + value.length + " bytes") : "(none)"'
                        }
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': '[B',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'File',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'File',
                        '_isDecl': false
                    },
                    {
                        '_key': 'editable',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'component': 'FileUploadChooser',
                    'bindings': {
                        'file': {
                            't': 'CFP',
                            'v': 'value'
                        }
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'File',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'File',
                        '_isDecl': false
                    },
                    {
                        '_key': 'editable',
                        '_value': false,
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'bindings': {
                        'value': {
                            't': 'Expr',
                            'v': 'value ? value.name : "(none)"'
                        }
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'File',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    },
                    {
                        '_key': 'editable',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'component': 'InputFieldComponent'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'longtext',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'after': 'zBottom'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'longtext',
                        '_isDecl': true
                    },
                    {
                        '_key': 'editable',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'component': 'TextAreaComponent',
                    'bindings': {
                        'rows': 10,
                        'cols': 60
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'longtext',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'longtext',
                        '_isDecl': true
                    },
                    {
                        '_key': 'operation',
                        '_value': [
                            'search',
                            'list'
                        ],
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'visible': false
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'longtext',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'richtext',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'bindings': {
                        'escapeUnsafeHtml': true
                    },
                    'after': 'zBottom'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'richtext',
                        '_isDecl': true
                    },
                    {
                        '_key': 'editable',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'component': 'RichTextArea',
                    'bindings': {
                        'rows': 10,
                        'cols': 60
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'richtext',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'richtext',
                        '_isDecl': true
                    },
                    {
                        '_key': 'operation',
                        '_value': 'search',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'after': 'zNone'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'richtext',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'richtext',
                        '_isDecl': true
                    },
                    {
                        '_key': 'operation',
                        '_value': 'list',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'editable': false,
                    'after': 'zDetail'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'richtext',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'secret',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'bindings': {
                        'formatter': {
                            't': 'CFP',
                            'v': 'formatters.hiddenPassword'
                        }
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'secret',
                        '_isDecl': true
                    },
                    {
                        '_key': 'editable',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'component': 'AWPasswordField',
                    'bindings': {}
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'secret',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'secret',
                        '_isDecl': true
                    },
                    {
                        '_key': 'operation',
                        '_value': [
                            'search',
                            'list'
                        ],
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'visible': false
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'secret',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'truncated',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'component': 'TruncateString',
                    'bindings': {
                        'size': 10
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'String',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'Binary',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'Binary',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'imageData',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'contentType': 'image/jpeg'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'Binary',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'imageData',
                        '_isDecl': true
                    },
                    {
                        '_key': 'editable',
                        '_value': false,
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'component': 'AWImageData',
                    'bindings': {
                        'bytes': {
                            't': 'CFP',
                            'v': 'value'
                        },
                        'contentType': {
                            't': 'Expr',
                            'v': 'ContentTypeUtils.contentTypeNamed(properties.get("contentType"))'
                        }
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'Binary',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'imageData',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'Binary',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'imageData',
                        '_isDecl': true
                    },
                    {
                        '_key': 'editable',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'bindings': {
                        'awcontentLayouts': {
                            '_main': '_imgUploadPreview'
                        }
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'Binary',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'imageData',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'Binary',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'type',
                        '_value': 'Money',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'component': 'CurrencyComponent',
                    'bindings': {
                        'money': {
                            't': 'CFP',
                            'v': 'value'
                        },
                        'currencies': {
                            't': 'Expr',
                            'v': 'properties.get("currencies")'
                        }
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'layout',
                        '_value': '_imgUploadPreview',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'wrapperComponent': 'MetaContext',
                    'component': 'AWImageData',
                    'wrapperBindings': {
                        'scopeKey': 'field'
                    },
                    'bindings': {
                        'bytes': {
                            't': 'CFP',
                            'v': 'value'
                        },
                        'style': 'width:100px',
                        'contentType': {
                            't': 'Expr',
                            'v': 'ContentTypeUtils.contentTypeNamed(properties.get("contentType"))'
                        }
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'derived',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'editable': false
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'derived',
                        '_isDecl': true
                    },
                    {
                        '_key': 'editing',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'after': 'zNone'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'derived',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'searchable',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'searchable',
                        '_isDecl': true
                    },
                    {
                        '_key': 'operation',
                        '_value': 'search',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'visible': true,
                    'editable': {
                        't': 'OV',
                        'v': 'true'
                    },
                    'after': {
                        't': 'OV',
                        'v': 'null'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'searchable',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'required',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'required',
                        '_isDecl': true
                    },
                    {
                        '_key': 'operation',
                        '_value': [
                            'edit',
                            'create'
                        ],
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'required': true
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'required',
                        '_isDecl': true
                    },
                    {
                        '_key': 'operation',
                        '_value': [
                            'edit',
                            'create'
                        ],
                        '_isDecl': false
                    },
                    {
                        '_key': 'object',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'valid': {
                        't': 'Expr',
                        'v': '((value != undefined) && (value != null)) ? true : "Answer required"'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'required',
                        '_isDecl': true
                    },
                    {
                        '_key': 'operation',
                        '_value': [
                            'edit',
                            'create'
                        ],
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'required',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'list',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'list',
                        '_isDecl': true
                    },
                    {
                        '_key': 'editable',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'component': 'GenericChooserComponent',
                    'bindings': {
                        'list': {
                            't': 'Expr',
                            'v': 'properties.get("choices")'
                        },
                        'type': {
                            't': 'Expr',
                            'v': 'properties.get("chooserStyle")'
                        },
                        'key': {
                            't': 'Expr',
                            'v': 'properties.get("field")'
                        },
                        'object': {
                            't': 'Expr',
                            'v': 'object'
                        }
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'list',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'asObject',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'asObject',
                        '_isDecl': true
                    },
                    {
                        '_key': 'editable',
                        '_value': false,
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'component': 'MetaObjectDetailComponent',
                    'nestedLayout': true,
                    'bindings': {
                        'layout': 'Inspect',
                        'useNoLabelLayout': true,
                        'label': {
                            't': 'Expr',
                            'v': 'properties.get("label")'
                        },
                        'object': {
                            't': 'CFP',
                            'v': 'value'
                        }
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'asObject',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'asHover',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'asHover',
                        '_isDecl': true
                    },
                    {
                        '_key': 'editable',
                        '_value': false,
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'component': 'HoverCardComponent',
                    'bindings': {
                        'linkTitle': {
                            't': 'CFP',
                            'v': 'value'
                        },
                        'appendContentToBody': false,
                        'ngcontentLayout': 'Content'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'asHover',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'layout',
                        '_value': 'Content',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'component': 'MetaObjectDetailComponent',
                    'bindings': {
                        'layout': 'Inspect',
                        'object': {
                            't': 'CFP',
                            'v': 'value'
                        }
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'noCreate',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'noCreate',
                        '_isDecl': true
                    },
                    {
                        '_key': 'operation',
                        '_value': 'create',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'visible': false
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'noCreate',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'noSearch',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'noSearch',
                        '_isDecl': true
                    },
                    {
                        '_key': 'operation',
                        '_value': 'search',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'visible': false
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'noSearch',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'component',
                        '_value': 'GenericChooserComponent',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'component',
                        '_value': 'GenericChooserComponent',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'Popup',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'bindings': {
                        'type': 'Dropdown'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'component',
                        '_value': 'GenericChooserComponent',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'component',
                        '_value': 'GenericChooserComponent',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'PopupControl',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'bindings': {
                        'type': 'PopupControl'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'component',
                        '_value': 'GenericChooserComponent',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'component',
                        '_value': 'GenericChooserComponent',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'Chooser',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'bindings': {
                        'type': 'Chooser'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'component',
                        '_value': 'GenericChooserComponent',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'component',
                        '_value': 'GenericChooserComponent',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'PostOnChange',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'bindings': {}
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'component',
                        '_value': 'GenericChooserComponent',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'component',
                        '_value': [
                            'StringComponent',
                            'AWHyperlink',
                            'PopupMenuLink'
                        ],
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'component',
                        '_value': [
                            'StringComponent',
                            'AWHyperlink',
                            'PopupMenuLink'
                        ],
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'bold',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'wrapperComponent': 'GenericContainerComponent',
                    'wrapperBindings': {
                        'tagName': 'b'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'component',
                        '_value': [
                            'StringComponent',
                            'AWHyperlink',
                            'PopupMenuLink'
                        ],
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'component',
                        '_value': [
                            'StringComponent',
                            'AWHyperlink',
                            'PopupMenuLink'
                        ],
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'italic',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'wrapperComponent': 'GenericContainerComponent',
                    'wrapperBindings': {
                        'tagName': 'i'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'component',
                        '_value': [
                            'StringComponent',
                            'AWHyperlink',
                            'PopupMenuLink'
                        ],
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'component',
                        '_value': [
                            'StringComponent',
                            'AWHyperlink',
                            'PopupMenuLink'
                        ],
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'heading1',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'wrapperComponent': 'GenericContainerComponent',
                    'wrapperBindings': {
                        'tagName': 'h1'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'component',
                        '_value': [
                            'StringComponent',
                            'AWHyperlink',
                            'PopupMenuLink'
                        ],
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'component',
                        '_value': [
                            'StringComponent',
                            'AWHyperlink',
                            'PopupMenuLink'
                        ],
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'heading2',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'wrapperComponent': 'GenericContainerComponent',
                    'wrapperBindings': {
                        'tagName': 'h2'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'component',
                        '_value': [
                            'StringComponent',
                            'AWHyperlink',
                            'PopupMenuLink'
                        ],
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'component',
                        '_value': [
                            'StringComponent',
                            'AWHyperlink',
                            'PopupMenuLink'
                        ],
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'heading3',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'wrapperComponent': 'GenericContainerComponent',
                    'wrapperBindings': {
                        'tagName': 'h3'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'component',
                        '_value': [
                            'StringComponent',
                            'AWHyperlink',
                            'PopupMenuLink'
                        ],
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'FieldType',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'FieldType',
                        '_isDecl': true
                    },
                    {
                        '_key': 'trait',
                        '_value': 'longtext',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'FieldType',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'FieldType',
                        '_isDecl': true
                    },
                    {
                        '_key': 'trait',
                        '_value': 'richtext',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'FieldType',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'FieldType',
                        '_isDecl': true
                    },
                    {
                        '_key': 'trait',
                        '_value': 'secret',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'FieldType',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'ChooserType',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'ChooserType',
                        '_isDecl': true
                    },
                    {
                        '_key': 'trait',
                        '_value': 'Popup',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'ChooserType',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'ChooserType',
                        '_isDecl': true
                    },
                    {
                        '_key': 'trait',
                        '_value': 'PopupControl',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'ChooserType',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'ChooserType',
                        '_isDecl': true
                    },
                    {
                        '_key': 'trait',
                        '_value': 'Chooser',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'ChooserType',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'WrapperStyle',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'WrapperStyle',
                        '_isDecl': true
                    },
                    {
                        '_key': 'trait',
                        '_value': 'bold',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'WrapperStyle',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'WrapperStyle',
                        '_isDecl': true
                    },
                    {
                        '_key': 'trait',
                        '_value': 'italic',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'WrapperStyle',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'WrapperStyle',
                        '_isDecl': true
                    },
                    {
                        '_key': 'trait',
                        '_value': 'heading1',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'WrapperStyle',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'WrapperStyle',
                        '_isDecl': true
                    },
                    {
                        '_key': 'trait',
                        '_value': 'heading2',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'WrapperStyle',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'WrapperStyle',
                        '_isDecl': true
                    },
                    {
                        '_key': 'trait',
                        '_value': 'heading3',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'WrapperStyle',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'action',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'visible': {
                        't': 'SDW',
                        'v': '!properties.get("hidden")'
                    },
                    'enabled': true
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'action',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'pageAction',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'actionResults': {
                        't': 'Expr',
                        'v': 'meta.routingService.routeForPage(properties.get("pageName"))'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'action',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'action',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'modalComponentPage',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'pageBindings': {
                        'componentName': {
                            't': 'Expr',
                            'v': 'properties.get("componentName")'
                        },
                        'title': {
                            't': 'Expr',
                            'v': 'properties.get("title")'
                        }
                    },
                    'actionResults': {
                        't': 'Expr',
                        'v': 'meta.compPageWithName("MetaModalPage")'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'action',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'action',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'modalComponentPanel',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'pageBindings': {
                        'clientPanel': true,
                        'componentName': {
                            't': 'Expr',
                            'v': 'properties.get("componentName")'
                        },
                        'title': {
                            't': 'Expr',
                            'v': 'properties.get("title")'
                        }
                    },
                    'actionResults': {
                        't': 'Expr',
                        'v': 'meta.compPageWithName("MetaModalPage")'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'action',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'action',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'messageResults',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'actionResults': {
                        't': 'Expr',
                        'v': 'var o = (properties.isInstanceAction ? object : ariba.ui.aribaweb.util.AWUtil.classForName(properties.class)), var v = ariba.util.fieldvalue.FieldValue.getFieldValue(o, properties.action), var m = ariba.util.core.Fmt.S(properties.message, v), ariba.ui.widgets.AribaPageContent.setMessage(m, requestContext.session()), null'
                    },
                    'message': 'Action Performed: %s'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'action',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'action',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'instance',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'isInstanceAction': true,
                    'enabled': {
                        't': 'Expr',
                        'v': 'object != null'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'action',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'action',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'filterActions',
                        '_value': 'instance',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'visible': {
                        't': 'Expr',
                        'v': 'properties.get("isInstanceAction") == true'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'action',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'action',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'filterActions',
                        '_value': 'static',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'visible': {
                        't': 'Expr',
                        'v': '!properties.get("isInstanceAction")'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'action',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'zones': [
                        'zMain'
                    ]
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'ActionButtons',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'component': 'MetaActionListComponent',
                    'visible': true,
                    'bindings': {
                        'defaultStyle': 'primary',
                        'renderAs': 'buttons',
                        'align': 'right'
                    },
                    'elementClass': 'l-action-buttons'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'ActionLinks',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'component': 'MetaActionListComponent',
                    'visible': true,
                    'bindings': {
                        'renderAs': 'links',
                        'align': 'right'
                    },
                    'elementClass': 'l-action-buttons'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'ActionMenu',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'component': 'MetaActionListComponent',
                    'visible': true,
                    'bindings': {
                        'renderAs': 'menu',
                        'align': 'right'
                    },
                    'elementClass': 'l-action-buttons'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'InstanceActionButtons',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'component': 'MetaActionListComponent',
                    'visible': true,
                    'bindings': {
                        'filterActions': 'instance',
                        'renderAs': 'buttons',
                        'align': 'right'
                    },
                    'elementClass': 'l-action-buttons'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'StaticActionButtons',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'component': 'MetaActionListComponent',
                    'visible': true,
                    'bindings': {
                        'filterActions': 'static',
                        'renderAs': 'buttons',
                        'align': 'right'
                    },
                    'elementClass': 'l-action-buttons'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'Tabs',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'component': 'MetaTabs',
                    'visible': true
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'Sections',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'component': 'MetaSectionsComponent',
                    'visible': true
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'Form',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'component': 'MetaFormComponent',
                    'visible': true
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'Stack',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'component': 'MetaElementListComponent',
                    'visible': true
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'OwnZone',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'zonePath': {
                        't': 'Expr',
                        'v': 'layout'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'pad8',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'wrapperComponent': 'GenericContainerComponent',
                    'wrapperBindings': {
                        'style': 'padding:8px',
                        'tagName': 'div'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'component',
                        '_value': 'MetaFormComponent',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'labelsOnTop',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'layout_trait',
                        '_value': 'labelsOnTop',
                        '_isDecl': false
                    },
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'bindings': {
                        'showLabelsAboveControls': true
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'LayoutGrouping',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'LayoutGrouping',
                        '_isDecl': true
                    },
                    {
                        '_key': 'trait',
                        '_value': 'Tabs',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'LayoutGrouping',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'LayoutGrouping',
                        '_isDecl': true
                    },
                    {
                        '_key': 'trait',
                        '_value': 'Sections',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'LayoutGrouping',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'LayoutGrouping',
                        '_isDecl': true
                    },
                    {
                        '_key': 'trait',
                        '_value': 'Form',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'LayoutGrouping',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'LayoutGrouping',
                        '_isDecl': true
                    },
                    {
                        '_key': 'trait',
                        '_value': 'Stack',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'LayoutGrouping',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'layout',
                        '_value': [
                            'Inspect',
                            'SearchForm'
                        ],
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'trait': 'Form',
                    'label': {
                        't': 'Expr',
                        'v': 'UIMeta.beautifyClassName(values.class)'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': {},
                        '_isDecl': false
                    },
                    {
                        '_key': 'layout',
                        '_value': [
                            'Inspect',
                            'SearchForm'
                        ],
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'component': 'StringComponent',
                    'bindings': {}
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': 'InspectWithActions',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'trait': 'Stack'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': 'InspectWithActions',
                        '_isDecl': false
                    },
                    {
                        '_key': 'layout',
                        '_value': 'Actions',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'trait': 'ActionMenu'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': 'InspectWithActions',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': 'InspectWithActions',
                        '_isDecl': false
                    },
                    {
                        '_key': 'layout',
                        '_value': 'Inspect',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'trait': 'Form'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': 'InspectWithActions',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': 'ButtonArea',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'trait': 'StaticActionButtons'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': 'SelectionButtonArea',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'trait': 'InstanceActionButtons'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': 'Links',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'trait': 'ActionLinks'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': 'LabelField',
                        '_isDecl': false
                    },
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'visible': false
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': 'LabelField',
                        '_isDecl': false
                    },
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'labelField',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'visible': {
                        't': 'OV',
                        'v': 'true'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': 'LabelField',
                        '_isDecl': false
                    },
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': [
                            'Table',
                            'DetailTable'
                        ],
                        '_isDecl': false
                    },
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'component': 'MetaTable',
                    'bindings': {
                        'enableScrolling': true,
                        'showSelectionColumn': false,
                        'displayGroup': {
                            't': 'CFP',
                            'v': 'displayGroup'
                        },
                        'title': {
                            't': 'Expr',
                            'v': 'properties.get("label")'
                        },
                        'submitOnSelectionChange': true,
                        'singleSelect': true
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'layout',
                        '_value': 'ListItem',
                        '_isDecl': false
                    },
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'component': 'StringComponent',
                    'bindings': {
                        'value': {
                            't': 'Expr',
                            'v': 'properties.get("objectTitle")'
                        }
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'object',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'objectTitle': {
                        't': 'Expr',
                        'v': 'FieldPath.getFieldValue(object, meta.displayKeyForClass(values.get("class")))'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'object',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'objectTitle': {
                        't': 'Expr',
                        'v': 'FieldPath.getFieldValue(object, meta.displayKeyForClass(values.get("class")))'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'module',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'pageBindings': {
                        't': 'Expr',
                        'v': '(properties.get("homePage") == "MetaHomePageComponent") ? new Map().set("module", values.get("module")) : null'
                    },
                    'component': 'MetaDashboardLayoutComponent',
                    'visible': {
                        't': 'SDW',
                        'v': '!properties.get("hidden")'
                    },
                    'homePage': 'MetaHomePageComponent'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'module',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'layout',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'visible': true
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'module',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'module',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'ActionTOC',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'module',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'ActionTOC',
                        '_isDecl': true
                    },
                    {
                        '_key': 'layout',
                        '_value': 'Actions',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'component': 'MetaActionListComponent',
                    'label': 'Actions',
                    'after': 'zToc'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'module',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'ActionTOC',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'module',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'actionCategory',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'visible': {
                        't': 'SDW',
                        'v': '!properties.get("hidden")'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'actionCategory',
                        '_value': 'General',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'after': 'zMain',
                    'label': {
                        't': 'i18n',
                        'v': {
                            'key': 'a001',
                            'defVal': 'General'
                        }
                    }
                },
                '_rank': 0
            }
        ]
    };
    /* tslint:disable */
    /**
     *  @formatter:on
     *
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** *
     *  This is generated file. Do not edit !!
     *
     * \@formatter:off
     *
      @type {?} */
    var SystemPersistenceRules = {
        oss: [
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'displayKey': 'toString',
                    'searchOperation': 'search'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'Searchable',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'textSearchSupported': true,
                    'searchOperation': 'keywordSearch'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'operation',
                        '_value': 'keywordSearch',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'useTextIndex': true
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'operation',
                        '_value': 'keywordSearch',
                        '_isDecl': false
                    },
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'visible': false
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'operation',
                        '_value': 'keywordSearch',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'operation',
                        '_value': 'keywordSearch',
                        '_isDecl': false
                    },
                    {
                        '_key': 'field',
                        '_value': 'keywords',
                        '_isDecl': true
                    }
                ],
                '_properties': {
                    'visible': {
                        't': 'OV',
                        'v': 'true'
                    },
                    'bindings': {
                        'size': 30
                    },
                    'trait': 'SearchableProperty',
                    'rank': 0,
                    'after': 'zTop',
                    'type': 'java.lang.String'
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'operation',
                        '_value': 'keywordSearch',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'operation',
                        '_value': 'textSearch',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'operation',
                        '_value': 'textSearch',
                        '_isDecl': false
                    },
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'operation',
                        '_value': 'textSearch',
                        '_isDecl': false
                    },
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'SearchableProperty',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'visible': {
                        't': 'OV',
                        'v': 'true'
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'operation',
                        '_value': 'textSearch',
                        '_isDecl': false
                    },
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'operation',
                        '_value': 'textSearch',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'class',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'toOneRelationship',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'toOneRelationship',
                        '_isDecl': false
                    },
                    {
                        '_key': 'editable',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'component': 'GenericChooserComponent',
                    'bindings': {
                        'destinationClass': {
                            't': 'Expr',
                            'v': 'elementType'
                        },
                        'multiselect': false,
                        'displayKey': {
                            't': 'Expr',
                            'v': 'meta.displayLabel(type, properties.get("labelField"))'
                        },
                        'type': 'Dropdown',
                        'key': {
                            't': 'Expr',
                            'v': 'field'
                        },
                        'object': {
                            't': 'Expr',
                            'v': 'object'
                        }
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'toOneRelationship',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'toManyChooser',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'toManyChooser',
                        '_isDecl': false
                    },
                    {
                        '_key': 'editable',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'component': 'GenericChooserComponent',
                    'bindings': {
                        'destinationClass': {
                            't': 'Expr',
                            'v': 'elementType'
                        },
                        'multiselect': true,
                        'displayKey': {
                            't': 'Expr',
                            'v': 'meta.displayLabel(type, properties.get("labelField"))'
                        },
                        'type': 'Chooser',
                        'key': {
                            't': 'Expr',
                            'v': 'field'
                        },
                        'object': {
                            't': 'Expr',
                            'v': 'object'
                        }
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'toManyChooser',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    },
                    {
                        '_key': 'trait',
                        '_value': 'toManyLink',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'component': 'AWHyperlink',
                    'bindings': {
                        'omitTags': {
                            't': 'Expr',
                            'v': '!value || (value.size() == 0)'
                        },
                        'awcontent': {
                            't': 'Expr',
                            'v': 'value ? ("" + value.size() + " items") : "(none)"'
                        },
                        'action': {
                            't': 'Expr',
                            'v': 'set("object", value), set("actionCategory", "General"), set("action", "Inspect"), ariba.ui.meta.core.UIMeta.getInstance().fireAction(this, requestContext)'
                        }
                    }
                },
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'field',
                        '_value': '*',
                        '_isDecl': false
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'RelViewers',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'RelViewers',
                        '_isDecl': true
                    },
                    {
                        '_key': 'trait',
                        '_value': 'toOneRelationship',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'RelViewers',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'RelViewers',
                        '_isDecl': true
                    },
                    {
                        '_key': 'trait',
                        '_value': 'toManyChooser',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'RelViewers',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'RelViewers',
                        '_isDecl': true
                    },
                    {
                        '_key': 'trait',
                        '_value': 'toManyLink',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'traitGroup',
                        '_value': 'RelViewers',
                        '_isDecl': true
                    }
                ],
                '_rank': 0
            },
            {
                '_selectors': [
                    {
                        '_key': 'action',
                        '_value': 'Inspect',
                        '_isDecl': false
                    }
                ],
                '_properties': {
                    'pageBindings': {
                        'layout': 'Inspect',
                        'clientPanel': true,
                        'operation': 'view',
                        'object': {
                            't': 'Expr',
                            'v': 'object'
                        }
                    },
                    'visible': true,
                    'trait': 'pageAction',
                    'pageName': 'MetaContentPageComponent'
                },
                '_rank': 0
            }
        ]
    };
    /* tslint:disable */
    /**
     *  @formatter:on
     *
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * UIMeta is responsible setting layouts and all around this. We can either use this as a singleton
     * or use it as a service using Angular \@Inject()
     * Right now we use still singleton as we need this class as a library for some other projects
     *
     *
     * todo: Convert to Injectable
     */
    var UIMeta = (function (_super) {
        __extends(UIMeta, _super);
        function UIMeta() {
            var _this = _super.call(this) || this;
            // if (isPresent(loader)) {
            //     this.registerLoader(loader);
            // }
            try {
                _this.beginRuleSet('UIMeta');
                _this.registerKeyInitObserver(UIMeta.KeyClass, new UserMetaDataProvider());
                // These keys define scopes for their properties
                // defineKeyAsPropertyScope(KeyArea);
                // These keys define scopes for their properties
                // defineKeyAsPropertyScope(KeyArea);
                _this.defineKeyAsPropertyScope(UIMeta.KeyLayout);
                _this.defineKeyAsPropertyScope(UIMeta.KeyModule);
                // Default rule for converting field name to label
                // Default rule for converting field name to label
                _this.registerDefaultLabelGeneratorForKey(UIMeta.KeyClass);
                _this.registerDefaultLabelGeneratorForKey(UIMeta.KeyField);
                _this.registerDefaultLabelGeneratorForKey(UIMeta.KeyLayout);
                _this.registerDefaultLabelGeneratorForKey(UIMeta.KeyModule);
                _this.registerDefaultLabelGeneratorForKey(UIMeta.KeyAction);
                _this.registerDefaultLabelGeneratorForKey(UIMeta.KeyActionCategory);
                // policies for chaining certain well known properties
                // policies for chaining certain well known properties
                _this.registerPropertyMerger(UIMeta.KeyArea, Meta.PropertyMerger_DeclareList);
                _this.registerPropertyMerger(UIMeta.KeyLayout, Meta.PropertyMerger_DeclareList);
                _this.registerPropertyMerger(UIMeta.KeyModule, Meta.PropertyMerger_DeclareList);
                _this.mirrorPropertyToContext(UIMeta.KeyEditing, UIMeta.KeyEditing);
                _this.mirrorPropertyToContext(UIMeta.KeyLayout, UIMeta.KeyLayout);
                _this.mirrorPropertyToContext(UIMeta.KeyComponentName, UIMeta.KeyComponentName);
                _this.registerPropertyMerger(UIMeta.KeyEditing, new PropertyMerger_And());
                // this.registerValueTransformerForKey('requestContext', UIMeta.Transformer_KeyPresent);
                // this.registerValueTransformerForKey('displayGroup', UIMeta.Transformer_KeyPresent);
                // define operation hierarchy
                // this.registerValueTransformerForKey('requestContext', UIMeta.Transformer_KeyPresent);
                // this.registerValueTransformerForKey('displayGroup', UIMeta.Transformer_KeyPresent);
                // define operation hierarchy
                _this.keyData(UIMeta.KeyOperation).setParent('view', 'inspect');
                _this.keyData(UIMeta.KeyOperation).setParent('print', 'view');
                _this.keyData(UIMeta.KeyOperation).setParent('edit', 'inspect');
                _this.keyData(UIMeta.KeyOperation).setParent('search', 'inspect');
                _this.keyData(UIMeta.KeyOperation).setParent('keywordSearch', 'search');
                _this.keyData(UIMeta.KeyOperation).setParent('textSearch', 'keywordSearch');
                _this.registerStaticallyResolvable(UIMeta.PropFieldsByZone, new PropFieldsByZoneResolver(), UIMeta.KeyClass);
                _this.registerStaticallyResolvable(UIMeta.PropFieldPropertyList, new PropFieldPropertyListResolver(), UIMeta.KeyClass);
                _this.registerStaticallyResolvable(UIMeta.PropLayoutsByZone, new PropLayoutsByZoneResolver(), UIMeta.KeyLayout);
                // this.registerStaticallyResolvable(UIMeta.PropLayoutsByZone , new
                // PropLayoutsByZoneResolver() , UIMeta.KeyLayout);
                // registerStaticallyResolvable('bindingsDictionary' , dyn , KeyField);
                // registerStaticallyResolvable('bindingsDictionary' , dyn , KeyLayout);
                // registerStaticallyResolvable('bindingsDictionary' , dyn , KeyClass);
                // registerStaticallyResolvable('bindingsDictionary' , dyn , KeyModule);
            }
            finally {
                _this.endRuleSet();
            }
            return _this;
        }
        /**
         * @return {?}
         */
        UIMeta.getInstance = /**
         * @return {?}
         */
            function () {
                return this._instance || (this._instance = new this());
            };
        /**
         * @param {?} fieldName
         * @return {?}
         */
        UIMeta.defaultLabelForIdentifier = /**
         * @param {?} fieldName
         * @return {?}
         */
            function (fieldName) {
                /** @type {?} */
                var lastDot = fieldName.lastIndexOf('.');
                if (lastDot !== -1 && lastDot !== fieldName.length - 1) {
                    fieldName = fieldName.substring(lastDot + 1);
                }
                return core.decamelize(fieldName);
            };
        /**
         * @param {?} className
         * @return {?}
         */
        UIMeta.beautifyClassName = /**
         * @param {?} className
         * @return {?}
         */
            function (className) {
                return core.decamelize(className, ' ');
            };
        /**
         * @param {?} field
         * @return {?}
         */
        UIMeta.beautifyFileName = /**
         * @param {?} field
         * @return {?}
         */
            function (field) {
                return core.decamelize(field, ' ');
            };
        /**
         * @param {?} context
         * @return {?}
         */
        UIMeta.prototype.zones = /**
         * @param {?} context
         * @return {?}
         */
            function (context) {
                /** @type {?} */
                var zones = context.propertyForKey('zones');
                return (core.isBlank(zones)) ? Meta.toList(UIMeta.ZoneMain) : zones;
            };
        /**
         * @param {?} context
         * @return {?}
         */
        UIMeta.prototype.zonePath = /**
         * @param {?} context
         * @return {?}
         */
            function (context) {
                /** @type {?} */
                var zonePath;
                if (core.isPresent(context.values.get(UIMeta.KeyLayout))) {
                    context.push();
                    context.setScopeKey(UIMeta.KeyLayout);
                    zonePath = context.propertyForKey(UIMeta.KeyZonePath);
                    context.pop();
                }
                return zonePath;
            };
        /**
         * @param {?=} isNested
         * @return {?}
         */
        UIMeta.prototype.newContext = /**
         * @param {?=} isNested
         * @return {?}
         */
            function (isNested) {
                if (isNested === void 0) {
                    isNested = false;
                }
                return new UIContext(this, isNested);
            };
        // Load system rules
        /**
         * @param {?=} references
         * @return {?}
         */
        UIMeta.prototype.loadDefaultRuleFiles = /**
         * @param {?=} references
         * @return {?}
         */
            function (references) {
                if (core.isPresent(SystemRules.oss)) {
                    this.beginRuleSetWithRank(Meta.SystemRulePriority, 'system');
                    try {
                        this._loadRules(SystemRules.oss, 'system', false);
                    }
                    finally {
                        this.endRuleSet();
                    }
                }
                if (core.isPresent(SystemPersistenceRules.oss)) {
                    this.beginRuleSetWithRank(Meta.SystemRulePriority + 2000, 'system-persistence');
                    try {
                        this._loadRules(SystemPersistenceRules.oss, 'system-persistence', false);
                    }
                    finally {
                        this.endRuleSet();
                    }
                }
                if (core.isPresent(references)) {
                    this.registerComponents(references);
                }
                return false;
            };
        /**
         * loads application level rules. Application level rules are global rules
         */
        /**
         * loads application level rules. Application level rules are global rules
         * @return {?}
         */
        UIMeta.prototype.loadApplicationRules = /**
         * loads application level rules. Application level rules are global rules
         * @return {?}
         */
            function () {
                /** @type {?} */
                var aRules;
                /** @type {?} */
                var userReferences;
                /** @type {?} */
                var appRuleFiles = ['Application'];
                if (core.isPresent(this.appConfig)) {
                    appRuleFiles = this.appConfig.get(UIMeta.AppConfigRuleFilesParam) || ['Application'];
                    userReferences = this.appConfig.get(UIMeta.AppConfigUserRulesParam);
                    // make sure we have always Application and make it more additive.
                    if (!core.ListWrapper.contains(appRuleFiles, 'Application')) {
                        appRuleFiles.unshift('Application');
                    }
                }
                try {
                    for (var appRuleFiles_1 = __values(appRuleFiles), appRuleFiles_1_1 = appRuleFiles_1.next(); !appRuleFiles_1_1.done; appRuleFiles_1_1 = appRuleFiles_1.next()) {
                        var ruleFile = appRuleFiles_1_1.value;
                        /** @type {?} */
                        var rule = ruleFile + 'Rule';
                        if (this._testRules.has(rule)) {
                            // since we are in development mode and test mode is on we can check extra
                            // repository used by tests, we need to check if we are not running unittest
                            // and a class is not defined but unittest
                            if (this._testRules.has(rule) &&
                                core.isPresent(this._testRules.get(rule).oss)) {
                                aRules = this._testRules.get(rule).oss;
                                if (core.isPresent(aRules)) {
                                    this.beginRuleSetWithRank(Meta.LowRulePriority, ruleFile.toLowerCase());
                                    try {
                                        this._loadRules(aRules, ruleFile.toLowerCase(), false);
                                    }
                                    finally {
                                        this.endRuleSet();
                                    }
                                }
                            }
                        }
                        else {
                            for (var i in userReferences) {
                                /** @type {?} */
                                var userRule = userReferences[i];
                                if (core.isPresent(userRule)) {
                                    if (core.isPresent(userRule[rule]) && core.isPresent(userRule[rule].oss)) {
                                        aRules = userRule[rule].oss;
                                    }
                                }
                                if (core.isPresent(aRules)) {
                                    this.beginRuleSetWithRank(Meta.LowRulePriority, ruleFile.toLowerCase());
                                    try {
                                        this._loadRules(aRules, ruleFile.toLowerCase(), false);
                                    }
                                    finally {
                                        this.endRuleSet();
                                    }
                                }
                            }
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (appRuleFiles_1_1 && !appRuleFiles_1_1.done && (_a = appRuleFiles_1.return))
                            _a.call(appRuleFiles_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                var e_1, _a;
            };
        /**
         * @param {?} source
         * @param {?} userClass
         * @return {?}
         */
        UIMeta.prototype.loadUserRule = /**
         * @param {?} source
         * @param {?} userClass
         * @return {?}
         */
            function (source, userClass) {
                if (core.isPresent(source)) {
                    this.beginRuleSetWithRank(this._ruleCount, 'user:' + userClass);
                    try {
                        this._loadRules(source, 'user', false);
                    }
                    finally {
                        this.endRuleSet();
                    }
                }
                return false;
            };
        /**
         * @param {?} key
         * @return {?}
         */
        UIMeta.prototype.defaultLabelGeneratorForKey = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return new _DefaultLabelGenerator(key);
            };
        /**
         * @param {?} propKey
         * @param {?} dynamicValue
         * @param {?} contextKey
         * @param {?} contextValue
         * @return {?}
         */
        UIMeta.prototype.registerDerivedValue = /**
         * @param {?} propKey
         * @param {?} dynamicValue
         * @param {?} contextKey
         * @param {?} contextValue
         * @return {?}
         */
            function (propKey, dynamicValue, contextKey, contextValue) {
                /** @type {?} */
                var m = new Map();
                m.set(propKey, dynamicValue);
                this.addRule(new Rule(Meta.toList(new Selector(contextKey, contextValue)), m, Meta.SystemRulePriority));
            };
        /**
         * @param {?} propKey
         * @param {?} dynamicValue
         * @param {?} contextKey
         * @return {?}
         */
        UIMeta.prototype.registerStaticallyResolvable = /**
         * @param {?} propKey
         * @param {?} dynamicValue
         * @param {?} contextKey
         * @return {?}
         */
            function (propKey, dynamicValue, contextKey) {
                this.registerDerivedValue(propKey, new StaticDynamicWrapper(dynamicValue), contextKey, Meta.KeyAny);
            };
        /**
         * @param {?} key
         * @return {?}
         */
        UIMeta.prototype.registerDefaultLabelGeneratorForKey = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                this.registerDerivedValue(UIMeta.KeyLabel, new LocalizedLabelString(this), key, UIMeta.KeyAny);
            };
        /**
         * @param {?} context
         * @return {?}
         */
        UIMeta.prototype.fieldList = /**
         * @param {?} context
         * @return {?}
         */
            function (context) {
                return this.itemList(context, UIMeta.KeyField, UIMeta.ZonesTLRMB);
            };
        /**
         * @param {?} context
         * @return {?}
         */
        UIMeta.prototype.fieldsByZones = /**
         * @param {?} context
         * @return {?}
         */
            function (context) {
                return this.itemsByZones(context, UIMeta.KeyField, UIMeta.ZonesTLRMB);
            };
        /**
         * @param {?} context
         * @param {?} key
         * @param {?} zones
         * @return {?}
         */
        UIMeta.prototype.itemNamesByZones = /**
         * @param {?} context
         * @param {?} key
         * @param {?} zones
         * @return {?}
         */
            function (context, key, zones) {
                /** @type {?} */
                var itemsByZones = this.itemsByZones(context, key, zones);
                return this.mapItemPropsToNames(itemsByZones);
            };
        /**
         * @param {?} itemsByZones
         * @return {?}
         */
        UIMeta.prototype.mapItemPropsToNames = /**
         * @param {?} itemsByZones
         * @return {?}
         */
            function (itemsByZones) {
                var _this = this;
                /** @type {?} */
                var namesByZones = new Map();
                core.MapWrapper.iterable(itemsByZones).forEach(function (value, key) {
                    if (core.isPresent(value) && core.isArray(value)) {
                        /** @type {?} */
                        var names = [];
                        try {
                            for (var value_1 = __values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                                var item = value_1_1.value;
                                if (item instanceof ItemProperties) {
                                    names.push(((item)).name);
                                }
                            }
                        }
                        catch (e_2_1) {
                            e_2 = { error: e_2_1 };
                        }
                        finally {
                            try {
                                if (value_1_1 && !value_1_1.done && (_a = value_1.return))
                                    _a.call(value_1);
                            }
                            finally {
                                if (e_2)
                                    throw e_2.error;
                            }
                        }
                        namesByZones.set(key, names);
                    }
                    else {
                        namesByZones.set(key, _this.mapItemPropsToNames(value));
                    }
                    var e_2, _a;
                });
                return namesByZones;
            };
        /**
         * @param {?} context
         * @param {?} key
         * @param {?} defaultPredecessor
         * @return {?}
         */
        UIMeta.prototype.predecessorMap = /**
         * @param {?} context
         * @param {?} key
         * @param {?} defaultPredecessor
         * @return {?}
         */
            function (context, key, defaultPredecessor) {
                /** @type {?} */
                var fieldInfos = this.itemProperties(context, key, false);
                /** @type {?} */
                var predecessors = core.MapWrapper.groupBy(fieldInfos, function (item) {
                    /** @type {?} */
                    var pred = item.properties.get(UIMeta.KeyAfter);
                    return core.isPresent(pred) ? pred : defaultPredecessor;
                });
                return predecessors;
            };
        /**
         * @param {?} context
         * @param {?} key
         * @param {?} zones
         * @return {?}
         */
        UIMeta.prototype.itemList = /**
         * @param {?} context
         * @param {?} key
         * @param {?} zones
         * @return {?}
         */
            function (context, key, zones) {
                /** @type {?} */
                var predecessors = this.predecessorMap(context, key, zones[0]);
                /** @type {?} */
                var result = [];
                try {
                    for (var zones_1 = __values(zones), zones_1_1 = zones_1.next(); !zones_1_1.done; zones_1_1 = zones_1.next()) {
                        var zone = zones_1_1.value;
                        this.accumulatePrecessors(predecessors, zone, result);
                    }
                }
                catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                }
                finally {
                    try {
                        if (zones_1_1 && !zones_1_1.done && (_a = zones_1.return))
                            _a.call(zones_1);
                    }
                    finally {
                        if (e_3)
                            throw e_3.error;
                    }
                }
                return result;
                var e_3, _a;
            };
        /**
         * @param {?} key
         * @return {?}
         */
        UIMeta.prototype.isZoneReference = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                /** @type {?} */
                var lastDot = key.lastIndexOf('.');
                /** @type {?} */
                var suffix = (lastDot === -1) ? key : key.substring(lastDot + 1);
                return (suffix.length > 1) && (suffix[0] === 'z') && (suffix[1].toUpperCase() === suffix[1] // is uppercase ?s
                );
            };
        /**
         * @param {?} context
         * @param {?} property
         * @param {?} zones
         * @return {?}
         */
        UIMeta.prototype.itemsByZones = /**
         * @param {?} context
         * @param {?} property
         * @param {?} zones
         * @return {?}
         */
            function (context, property, zones) {
                var _this = this;
                /** @type {?} */
                var predecessors = this.predecessorMap(context, property, zones[0]);
                /** @type {?} */
                var byZone = new Map();
                core.MapWrapper.iterable(predecessors).forEach(function (value, zone) {
                    if (_this.isZoneReference(zone)) {
                        /** @type {?} */
                        var list = [];
                        _this.accumulatePrecessors(predecessors, zone, list);
                        core.FieldPath.setFieldValue(byZone, zone, list);
                    }
                });
                return byZone;
            };
        // recursive decent of predecessor tree...
        /**
         * @param {?} predecessors
         * @param {?} key
         * @param {?} result
         * @return {?}
         */
        UIMeta.prototype.accumulatePrecessors = /**
         * @param {?} predecessors
         * @param {?} key
         * @param {?} result
         * @return {?}
         */
            function (predecessors, key, result) {
                /** @type {?} */
                var items = predecessors.get(key);
                if (core.isBlank(items)) {
                    return;
                }
                core.ListWrapper.sort(items, function (o1, o2) {
                    /** @type {?} */
                    var r1 = o1.properties.get(UIMeta.KeyRank);
                    /** @type {?} */
                    var r2 = o2.properties.get(UIMeta.KeyRank);
                    if (r1 === null) {
                        r1 = 100;
                    }
                    if (r2 === null) {
                        r2 = 100;
                    }
                    return (r1 === r2) ? 0 : (r1 === null) ? 1 : (r2 === null) ? -1 : (r1 - r2);
                });
                try {
                    for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                        var item = items_1_1.value;
                        if (!item.hidden) {
                            result.push(item);
                        }
                        this.accumulatePrecessors(predecessors, item.name, result);
                    }
                }
                catch (e_4_1) {
                    e_4 = { error: e_4_1 };
                }
                finally {
                    try {
                        if (items_1_1 && !items_1_1.done && (_a = items_1.return))
                            _a.call(items_1);
                    }
                    finally {
                        if (e_4)
                            throw e_4.error;
                    }
                }
                var e_4, _a;
            };
        /**
         * Called by Parser to handle decls like 'zLeft => lastName#required'
         *
         */
        /**
         * Called by Parser to handle decls like 'zLeft => lastName#required'
         *
         * @param {?} itemName
         * @param {?} contextPreds
         * @param {?} predecessor
         * @param {?} traits
         * @param {?} lineNumber
         * @return {?}
         */
        UIMeta.prototype.addPredecessorRule = /**
         * Called by Parser to handle decls like 'zLeft => lastName#required'
         *
         * @param {?} itemName
         * @param {?} contextPreds
         * @param {?} predecessor
         * @param {?} traits
         * @param {?} lineNumber
         * @return {?}
         */
            function (itemName, contextPreds, predecessor, traits, lineNumber) {
                if (core.isBlank(predecessor) && core.isBlank(traits)) {
                    return null;
                }
                /** @type {?} */
                var key = this.scopeKeyForSelector(contextPreds);
                if (core.isBlank(key) || key === UIMeta.KeyClass) {
                    key = UIMeta.KeyField;
                }
                /** @type {?} */
                var selector = new Array();
                core.ListWrapper.addAll(selector, contextPreds);
                selector.push(new Selector(key, itemName));
                /** @type {?} */
                var props = new Map();
                if (core.isPresent(predecessor)) {
                    props.set(UIMeta.KeyAfter, predecessor);
                }
                if (core.isPresent(traits)) {
                    props.set(UIMeta.KeyTrait, traits);
                }
                /** @type {?} */
                var rule = new Rule(selector, props, 0, lineNumber);
                this.addRule(rule);
                return rule;
            };
        /**
         * @param {?} fieldsByZones
         * @param {?} zoneList
         * @param {?} key
         * @param {?} context
         * @return {?}
         */
        UIMeta.prototype.flattenVisible = /**
         * @param {?} fieldsByZones
         * @param {?} zoneList
         * @param {?} key
         * @param {?} context
         * @return {?}
         */
            function (fieldsByZones, zoneList, key, context) {
                /** @type {?} */
                var result = [];
                if (core.isPresent(fieldsByZones)) {
                    try {
                        for (var zoneList_1 = __values(zoneList), zoneList_1_1 = zoneList_1.next(); !zoneList_1_1.done; zoneList_1_1 = zoneList_1.next()) {
                            var zone = zoneList_1_1.value;
                            /** @type {?} */
                            var fields = fieldsByZones.get(zone);
                            if (core.isBlank(fields)) {
                                continue;
                            }
                            try {
                                for (var fields_1 = __values(fields), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
                                    var field = fields_1_1.value;
                                    context.push();
                                    context.set(key, field);
                                    if (context.booleanPropertyForKey(UIMeta.KeyVisible, false)) {
                                        result.push(field);
                                    }
                                    context.pop();
                                }
                            }
                            catch (e_5_1) {
                                e_5 = { error: e_5_1 };
                            }
                            finally {
                                try {
                                    if (fields_1_1 && !fields_1_1.done && (_a = fields_1.return))
                                        _a.call(fields_1);
                                }
                                finally {
                                    if (e_5)
                                        throw e_5.error;
                                }
                            }
                        }
                    }
                    catch (e_6_1) {
                        e_6 = { error: e_6_1 };
                    }
                    finally {
                        try {
                            if (zoneList_1_1 && !zoneList_1_1.done && (_b = zoneList_1.return))
                                _b.call(zoneList_1);
                        }
                        finally {
                            if (e_6)
                                throw e_6.error;
                        }
                    }
                }
                return result;
                var e_6, _b, e_5, _a;
            };
        /**
         * @param {?} className
         * @return {?}
         */
        UIMeta.prototype.displayKeyForClass = /**
         * @param {?} className
         * @return {?}
         */
            function (className) {
                /** @type {?} */
                var context = this.newContext();
                context.set(UIMeta.KeyLayout, 'LabelField');
                context.set(UIMeta.KeyClass, className);
                /** @type {?} */
                var fields = this.itemProperties(context, UIMeta.KeyField, true);
                return core.ListWrapper.isEmpty(fields) ? '$toString' : fields[0].name;
            };
        /**
         * @param {?} className
         * @param {?} propertiesValue
         * @return {?}
         */
        UIMeta.prototype.displayLabel = /**
         * @param {?} className
         * @param {?} propertiesValue
         * @return {?}
         */
            function (className, propertiesValue) {
                if (core.isPresent(propertiesValue)) {
                    return propertiesValue;
                }
                return this.displayKeyForClass(className);
            };
        /**
         * @param {?} key
         * @param {?} defaultValue
         * @return {?}
         */
        UIMeta.prototype.createLocalizedString = /**
         * @param {?} key
         * @param {?} defaultValue
         * @return {?}
         */
            function (key, defaultValue) {
                core.assert(core.isPresent(this._currentRuleSet), 'Attempt to create localized string without currentRuleSet in place');
                return new LocalizedString(this, this._currentRuleSet.filePath, key, defaultValue);
            };
        Object.defineProperty(UIMeta.prototype, "routingService", {
            get: /**
             * @return {?}
             */ function () {
                return (core.isPresent(this._injector)) ? this._injector.get(core.RoutingService)
                    : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIMeta.prototype, "env", {
            get: /**
             * @return {?}
             */ function () {
                return (core.isPresent(this._injector)) ? this._injector.get(core.Environment) : new core.Environment();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIMeta.prototype, "appConfig", {
            get: /**
             * @return {?}
             */ function () {
                return (core.isPresent(this._injector)) ? this._injector.get(core.AppConfig) : null;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Registers framework level components and listen for user level rules to be registered.
         * After we register user level rules it will load application.oss.
         *
         *
         * @param {?} sysReferences
         * @return {?}
         */
        UIMeta.prototype.registerComponents = /**
         * Registers framework level components and listen for user level rules to be registered.
         * After we register user level rules it will load application.oss.
         *
         *
         * @param {?} sysReferences
         * @return {?}
         */
            function (sysReferences) {
                core.assert(core.isPresent(this.injector), 'Cannot register components without Injector in order' +
                    ' to get access to ComponentRegistry Service');
                core.assert(this.env.inTest || core.isPresent(this.appConfig.get(UIMeta.AppConfigUserRulesParam)), 'Unable to initialize MetaUI as user rules are missing. please use:' +
                    ' metaui.rules.user-rules configuration param');
                this.componentRegistry = this.injector.get(components.ComponentRegistry);
                if (core.isPresent(this.componentRegistry)) {
                    this.componentRegistry.registerTypes(sysReferences);
                    if (!this.env.inTest) {
                        /** @type {?} */
                        var userReferences = this.appConfig.get(UIMeta.AppConfigUserRulesParam);
                        try {
                            for (var userReferences_1 = __values(userReferences), userReferences_1_1 = userReferences_1.next(); !userReferences_1_1.done; userReferences_1_1 = userReferences_1.next()) {
                                var uRule = userReferences_1_1.value;
                                this.componentRegistry.registerTypes(uRule);
                            }
                        }
                        catch (e_7_1) {
                            e_7 = { error: e_7_1 };
                        }
                        finally {
                            try {
                                if (userReferences_1_1 && !userReferences_1_1.done && (_a = userReferences_1.return))
                                    _a.call(userReferences_1);
                            }
                            finally {
                                if (e_7)
                                    throw e_7.error;
                            }
                        }
                        this.loadApplicationRules();
                    }
                }
                else if (!this.env.inTest) {
                    core.warn('UIMeta.registerComponents() No components were registered !');
                }
                var e_7, _a;
            };
        /**
         *
         * Just need to call it different than the other fireAction as I can not do any method
         * overloading here.
         *
         */
        /**
         *
         * Just need to call it different than the other fireAction as I can not do any method
         * overloading here.
         *
         * @param {?} action
         * @param {?} context
         * @return {?}
         */
        UIMeta.prototype.fireActionFromProps = /**
         *
         * Just need to call it different than the other fireAction as I can not do any method
         * overloading here.
         *
         * @param {?} action
         * @param {?} context
         * @return {?}
         */
            function (action, context) {
                context.push();
                /** @type {?} */
                var actionCategory = action.properties.get(ObjectMeta.KeyActionCategory);
                if (core.isBlank(actionCategory)) {
                    actionCategory = ObjectMeta.DefaultActionCategory;
                }
                context.set(ObjectMeta.KeyActionCategory, actionCategory);
                context.set(ObjectMeta.KeyAction, action.name);
                this._fireAction(context, false);
                context.pop();
            };
        /**
         * @param {?} context
         * @param {?=} withBackAction
         * @return {?}
         */
        UIMeta.prototype.fireAction = /**
         * @param {?} context
         * @param {?=} withBackAction
         * @return {?}
         */
            function (context, withBackAction) {
                if (withBackAction === void 0) {
                    withBackAction = false;
                }
                context.push();
                this._fireAction(context, withBackAction);
                context.pop();
            };
        /**
         * @param {?} context
         * @param {?} withBackAction
         * @return {?}
         */
        UIMeta.prototype._fireAction = /**
         * @param {?} context
         * @param {?} withBackAction
         * @return {?}
         */
            function (context, withBackAction) {
                /** @type {?} */
                var actionResults = context.propertyForKey('actionResults');
                if (core.isBlank(actionResults) || !this.isRoute(actionResults)) {
                    return;
                }
                this.naviateToPage(context, actionResults, withBackAction);
            };
        /**
         * @param {?} context
         * @param {?} route
         * @param {?} withBackAction
         * @return {?}
         */
        UIMeta.prototype.naviateToPage = /**
         * @param {?} context
         * @param {?} route
         * @param {?} withBackAction
         * @return {?}
         */
            function (context, route, withBackAction) {
                /** @type {?} */
                var params = this.prepareRoute(context, withBackAction);
                /** @type {?} */
                var uiContex = (context);
                this.routingService.navigateWithRoute(route, params, uiContex.object);
            };
        /**
         * @param {?} context
         * @param {?} withBackAction
         * @return {?}
         */
        UIMeta.prototype.prepareRoute = /**
         * @param {?} context
         * @param {?} withBackAction
         * @return {?}
         */
            function (context, withBackAction) {
                /** @type {?} */
                var params = {};
                /** @type {?} */
                var pageBindings = context.propertyForKey('pageBindings');
                if (core.isPresent(pageBindings)) {
                    pageBindings.forEach(function (v, k) {
                        if (k !== ObjectMeta.KeyObject) {
                            ((params))[k] = context.resolveValue(v);
                        }
                    });
                    if (core.isPresent(withBackAction)) {
                        ((params))['b'] = withBackAction;
                    }
                }
                return params;
            };
        /**
         * @param {?} component
         * @param {?} context
         * @param {?} withBackAction
         * @return {?}
         */
        UIMeta.prototype.prepareRouteForComponent = /**
         * @param {?} component
         * @param {?} context
         * @param {?} withBackAction
         * @return {?}
         */
            function (component, context, withBackAction) {
                /** @type {?} */
                var params = {};
                /** @type {?} */
                var pageBindings = context.propertyForKey('pageBindings');
                if (core.isPresent(pageBindings)) {
                    pageBindings.forEach(function (v, k) {
                        component[k] = v;
                    });
                }
                return params;
            };
        /**
         * @param {?} module
         * @param {?=} activatedPath
         * @return {?}
         */
        UIMeta.prototype.gotoModule = /**
         * @param {?} module
         * @param {?=} activatedPath
         * @return {?}
         */
            function (module, activatedPath) {
                this.env.deleteValue(ACTIVE_CNTX);
                /** @type {?} */
                var context = this.newContext();
                context.push();
                context.set(UIMeta.KeyModule, module.name);
                /** @type {?} */
                var pageName = context.propertyForKey(UIMeta.KeyHomePage);
                /** @type {?} */
                var route = this.routingService.routeForPage(pageName, module.name.toLowerCase(), activatedPath);
                if (activatedPath === '/') {
                    activatedPath = '';
                }
                /** @type {?} */
                var path = activatedPath + "/" + route.path;
                /** @type {?} */
                var params = this.prepareRoute(context, null);
                context.pop();
                this.routingService.navigate([path, params], { skipLocationChange: true });
            };
        /**
         * @param {?} actionResult
         * @return {?}
         */
        UIMeta.prototype.isRoute = /**
         * @param {?} actionResult
         * @return {?}
         */
            function (actionResult) {
                return core.isStringMap(actionResult) && core.isPresent(actionResult['path']);
            };
        /**
         * @param {?} name
         * @return {?}
         */
        UIMeta.prototype.compPageWithName = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                /** @type {?} */
                var currType = this.componentRegistry.nameToType.get(name);
                if (core.isBlank(currType)) {
                    core.assert(false, name + ' component does not exists. Create Dummy Component instead of' +
                        ' throwing this error');
                    return;
                }
                return currType;
            };
        // caller must push/pop!
        /**
         * @param {?} context
         * @param {?} result
         * @param {?} zones
         * @return {?}
         */
        UIMeta.prototype.actionsByCategory = /**
         * @param {?} context
         * @param {?} result
         * @param {?} zones
         * @return {?}
         */
            function (context, result, zones) {
                /** @type {?} */
                var catNames = [];
                /** @type {?} */
                var actionCategories = this.itemList(context, ObjectMeta.KeyActionCategory, zones);
                if (core.isPresent(actionCategories)) {
                    actionCategories.forEach(function (item) { return catNames.push(item.name); });
                }
                this.addActionsForCategories(context, result, catNames);
                return actionCategories;
            };
        /**
         * @param {?} context
         * @param {?} result
         * @param {?} catNames
         * @return {?}
         */
        UIMeta.prototype.addActionsForCategories = /**
         * @param {?} context
         * @param {?} result
         * @param {?} catNames
         * @return {?}
         */
            function (context, result, catNames) {
                try {
                    for (var catNames_1 = __values(catNames), catNames_1_1 = catNames_1.next(); !catNames_1_1.done; catNames_1_1 = catNames_1.next()) {
                        var cat = catNames_1_1.value;
                        context.push();
                        if (cat !== ObjectMeta.DefaultActionCategory) {
                            context.set(ObjectMeta.KeyActionCategory, cat);
                        }
                        this.collectActionsByCategory(context, result, cat);
                        context.pop();
                    }
                }
                catch (e_8_1) {
                    e_8 = { error: e_8_1 };
                }
                finally {
                    try {
                        if (catNames_1_1 && !catNames_1_1.done && (_a = catNames_1.return))
                            _a.call(catNames_1);
                    }
                    finally {
                        if (e_8)
                            throw e_8.error;
                    }
                }
                var e_8, _a;
            };
        /**
         * @param {?} context
         * @param {?} result
         * @param {?} targetCat
         * @return {?}
         */
        UIMeta.prototype.collectActionsByCategory = /**
         * @param {?} context
         * @param {?} result
         * @param {?} targetCat
         * @return {?}
         */
            function (context, result, targetCat) {
                /** @type {?} */
                var actionInfos = this.itemProperties(context, ObjectMeta.KeyAction, true);
                try {
                    for (var actionInfos_1 = __values(actionInfos), actionInfos_1_1 = actionInfos_1.next(); !actionInfos_1_1.done; actionInfos_1_1 = actionInfos_1.next()) {
                        var actionInfo = actionInfos_1_1.value;
                        context.push();
                        context.set(ObjectMeta.KeyAction, actionInfo.name);
                        /** @type {?} */
                        var visible = context.booleanPropertyForKey(ObjectMeta.KeyVisible, true);
                        context.pop();
                        if (visible) {
                            /** @type {?} */
                            var category = actionInfo.properties.get(ObjectMeta.KeyActionCategory);
                            if (category == null) {
                                category = ObjectMeta.DefaultActionCategory;
                            }
                            if (targetCat !== category) {
                                continue;
                            }
                            /** @type {?} */
                            var forCategory = result.get(category);
                            if (core.isBlank(forCategory)) {
                                forCategory = [];
                                result.set(category, forCategory);
                            }
                            forCategory.push(actionInfo);
                        }
                    }
                }
                catch (e_9_1) {
                    e_9 = { error: e_9_1 };
                }
                finally {
                    try {
                        if (actionInfos_1_1 && !actionInfos_1_1.done && (_a = actionInfos_1.return))
                            _a.call(actionInfos_1);
                    }
                    finally {
                        if (e_9)
                            throw e_9.error;
                    }
                }
                var e_9, _a;
            };
        /**
         * @param {?=} context
         * @param {?=} checkVisibility
         * @return {?}
         */
        UIMeta.prototype.computeModuleInfo = /**
         * @param {?=} context
         * @param {?=} checkVisibility
         * @return {?}
         */
            function (context, checkVisibility) {
                if (context === void 0) {
                    context = this.newContext();
                }
                if (checkVisibility === void 0) {
                    checkVisibility = true;
                }
                /** @type {?} */
                var moduleInfo = new ModuleInfo();
                moduleInfo.modules = [];
                /** @type {?} */
                var allModuleProps = this.itemList(context, UIMeta.KeyModule, UIMeta.ActionZones);
                moduleInfo.moduleNames = [];
                moduleInfo.moduleByNames = new Map();
                try {
                    for (var allModuleProps_1 = __values(allModuleProps), allModuleProps_1_1 = allModuleProps_1.next(); !allModuleProps_1_1.done; allModuleProps_1_1 = allModuleProps_1.next()) {
                        var module = allModuleProps_1_1.value;
                        context.push();
                        context.set(UIMeta.KeyModule, module.name);
                        if (checkVisibility && !context.booleanPropertyForKey(UIMeta.KeyVisible, true)) {
                            context.pop();
                            continue;
                        }
                        moduleInfo.moduleNames.push(module.name);
                        /** @type {?} */
                        var modProperties = new ItemProperties(module.name, context.allProperties(), false);
                        moduleInfo.modules.push(modProperties);
                        moduleInfo.moduleByNames.set(module.name, modProperties);
                        context.pop();
                    }
                }
                catch (e_10_1) {
                    e_10 = { error: e_10_1 };
                }
                finally {
                    try {
                        if (allModuleProps_1_1 && !allModuleProps_1_1.done && (_a = allModuleProps_1.return))
                            _a.call(allModuleProps_1);
                    }
                    finally {
                        if (e_10)
                            throw e_10.error;
                    }
                }
                context.push();
                context.set(UIMeta.KeyModule, moduleInfo.moduleNames);
                moduleInfo.actionsByCategory = new Map();
                moduleInfo.actionCategories = this.actionsByCategory(context, moduleInfo.actionsByCategory, UIMeta.ModuleActionZones);
                context.pop();
                return moduleInfo;
                var e_10, _a;
            };
        /**
         * @param {?} moduleName
         * @param {?=} context
         * @return {?}
         */
        UIMeta.prototype.currentModuleLabel = /**
         * @param {?} moduleName
         * @param {?=} context
         * @return {?}
         */
            function (moduleName, context) {
                if (context === void 0) {
                    context = this.newContext();
                }
                context.push();
                context.set(UIMeta.KeyModule, moduleName);
                /** @type {?} */
                var label = context.propertyForKey(UIMeta.KeyLabel);
                context.pop();
                return label;
            };
        UIMeta.KeyOperation = 'operation';
        UIMeta.KeyModule = 'module';
        UIMeta.KeyLayout = 'layout';
        UIMeta.KeyArea = 'area';
        UIMeta.KeyEditing = 'editing';
        UIMeta.KeyAfter = 'after';
        UIMeta.KeyHidden = 'hidden';
        UIMeta.KeyLabel = 'label';
        UIMeta.KeyComponentName = 'component';
        UIMeta.KeyBindings = 'bindings';
        UIMeta.KeyHomePage = 'homePage';
        UIMeta.KeyZonePath = 'zonePath';
        UIMeta.PropFieldsByZone = 'fieldsByZone';
        UIMeta.PropIsFieldsByZone = 'fiveZoneLayout';
        UIMeta.PropActionsByCategory = 'actionsByCategory';
        UIMeta.PropActionCategories = 'actionCategories';
        UIMeta.PropFieldPropertyList = 'fieldPropertyList';
        UIMeta.PropLayoutsByZone = 'layoutsByZone';
        UIMeta.KeyWrapperComponent = 'wrapperComponent';
        UIMeta.KeyWrapperBinding = 'wrapperBindings';
        UIMeta.RootPredecessorKey = '_root';
        UIMeta.ZoneMain = 'zMain';
        UIMeta.ZoneTop = 'zTop';
        UIMeta.ZoneLeft = 'zLeft';
        UIMeta.ZoneMiddle = 'zMiddle';
        UIMeta.ZoneRight = 'zRight';
        UIMeta.ZoneBottom = 'zBottom';
        UIMeta.ZoneDetail = 'zDetail';
        UIMeta.AppConfigRuleFilesParam = 'metaui.rules.file-names';
        UIMeta.AppConfigUserRulesParam = 'metaui.rules.user-rules';
        UIMeta.ZonesTLRMB = [
            UIMeta.ZoneTop, UIMeta.ZoneLeft, UIMeta.ZoneMiddle,
            UIMeta.ZoneRight, UIMeta.ZoneBottom
        ];
        UIMeta.ZonesMTLRB = [
            UIMeta.ZoneMain, UIMeta.ZoneTop, UIMeta.ZoneLeft, UIMeta.ZoneRight, UIMeta.ZoneBottom
        ];
        UIMeta.ZonesDetail = [UIMeta.ZoneDetail];
        UIMeta._instance = null;
        UIMeta.ModuleActionZones = ['zNav', 'zGlobal'];
        UIMeta.ActionZones = ['zGlobal', 'zMain', 'zGeneral'];
        return UIMeta;
    }(ObjectMeta));
    var ModuleInfo = (function () {
        function ModuleInfo() {
        }
        return ModuleInfo;
    }());
    var LocalizedString = (function (_super) {
        __extends(LocalizedString, _super);
        function LocalizedString(meta, _module, _key, _defaultValue) {
            var _this = _super.call(this) || this;
            _this.meta = meta;
            _this._module = _module;
            _this._key = _key;
            _this._defaultValue = _defaultValue;
            return _this;
        }
        /**
         * @param {?} context
         * @return {?}
         */
        LocalizedString.prototype.evaluate = /**
         * @param {?} context
         * @return {?}
         */
            function (context) {
                // let clazz = context.values.get('class');
                // if (isPresent(this._key) && isPresent(this.meta.i18nService)) {
                //     let i18nKey = clazz + '.' + this._key;
                //     localizedString = this.meta.i18nService.instant(i18nKey);
                //
                //     // when it return the same string most likely it means there is no
                //     // translation so default it to null
                //     localizedString = (localizedString === i18nKey) ? null : localizedString;
                // }
                // if (isBlank(localizedString) || this._key === ObjectMeta.KeyField) {
                //     return this._defaultValue;
                // }
                return this._defaultValue;
            };
        /**
         * @return {?}
         */
        LocalizedString.prototype.toString = /**
         * @return {?}
         */
            function () {
                return 'LocaledString: {' + this._key + ' - ' + this._defaultValue + ' }';
            };
        return LocalizedString;
    }(DynamicPropertyValue));
    var LocalizedLabelString = (function (_super) {
        __extends(LocalizedLabelString, _super);
        function LocalizedLabelString(meta) {
            var _this = _super.call(this, meta, LocalizedLabelString.DefaultModule, null, null) || this;
            _this.meta = meta;
            _this.propertyAwaking = true;
            return _this;
        }
        /**
         * @param {?} context
         * @return {?}
         */
        LocalizedLabelString.prototype.evaluate = /**
         * @param {?} context
         * @return {?}
         */
            function (context) {
                if (core.isBlank(this._key)) {
                    /** @type {?} */
                    var scopeKey = context.values.get(Meta.ScopeKey);
                    /** @type {?} */
                    var scopeVal = context.values.get(scopeKey);
                    this._defaultValue = UIMeta.defaultLabelForIdentifier(scopeVal);
                    this._key = scopeKey;
                }
                return _super.prototype.evaluate.call(this, context);
            };
        /**
         * @param {?} map
         * @return {?}
         */
        LocalizedLabelString.prototype.awakeForPropertyMap = /**
         * @param {?} map
         * @return {?}
         */
            function (map) {
                return new LocalizedLabelString(this.meta);
            };
        LocalizedLabelString.DefaultModule = 'default';
        return LocalizedLabelString;
    }(LocalizedString));
    var PropFieldsByZoneResolver = (function (_super) {
        __extends(PropFieldsByZoneResolver, _super);
        function PropFieldsByZoneResolver() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} context
         * @return {?}
         */
        PropFieldsByZoneResolver.prototype.evaluate = /**
         * @param {?} context
         * @return {?}
         */
            function (context) {
                /** @type {?} */
                var m = ((context.meta)).itemNamesByZones(context, UIMeta.KeyField, ((context.meta)).zones(context));
                /** @type {?} */
                var zonePath = ((context.meta)).zonePath(context);
                if (core.isPresent(zonePath)) {
                    m = /** @type {?} */ (core.FieldPath.getFieldValue(m, zonePath));
                    if (core.isBlank(m)) {
                        m = new Map();
                    }
                }
                return m;
            };
        return PropFieldsByZoneResolver;
    }(StaticallyResolvable));
    var PropFieldPropertyListResolver = (function (_super) {
        __extends(PropFieldPropertyListResolver, _super);
        function PropFieldPropertyListResolver() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} context
         * @return {?}
         */
        PropFieldPropertyListResolver.prototype.evaluate = /**
         * @param {?} context
         * @return {?}
         */
            function (context) {
                return ((context.meta)).fieldList(context);
            };
        return PropFieldPropertyListResolver;
    }(StaticallyResolvable));
    var PropLayoutsByZoneResolver = (function (_super) {
        __extends(PropLayoutsByZoneResolver, _super);
        function PropLayoutsByZoneResolver() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} context
         * @return {?}
         */
        PropLayoutsByZoneResolver.prototype.evaluate = /**
         * @param {?} context
         * @return {?}
         */
            function (context) {
                return ((context.meta)).itemNamesByZones(context, UIMeta.KeyLayout, ((context.meta)).zones(context));
            };
        return PropLayoutsByZoneResolver;
    }(StaticallyResolvable));
    var _DefaultLabelGenerator = (function (_super) {
        __extends(_DefaultLabelGenerator, _super);
        function _DefaultLabelGenerator(_key) {
            var _this = _super.call(this) || this;
            _this._key = _key;
            return _this;
        }
        /**
         * @param {?} context
         * @return {?}
         */
        _DefaultLabelGenerator.prototype.evaluate = /**
         * @param {?} context
         * @return {?}
         */
            function (context) {
                /** @type {?} */
                var fieldName = context.values.get(this._key);
                return (core.isPresent(fieldName) && core.isString(fieldName)) ?
                    UIMeta.defaultLabelForIdentifier(fieldName) : null;
            };
        return _DefaultLabelGenerator;
    }(StaticallyResolvable));
    /**
     * Load User defined meta data. This class is triggered as soon as we create a context and
     * pass an object into it. Based on the object we notify different Observers passing name
     * of the class and here we search if we have any Rules available for current className and
     * try to load the Rule.
     */
    var /**
     * Load User defined meta data. This class is triggered as soon as we create a context and
     * pass an object into it. Based on the object we notify different Observers passing name
     * of the class and here we search if we have any Rules available for current className and
     * try to load the Rule.
     */ UserMetaDataProvider = (function () {
        function UserMetaDataProvider() {
        }
        /**
         * @param {?} meta
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        UserMetaDataProvider.prototype.notify = /**
         * @param {?} meta
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (meta, key, value) {
                /** @type {?} */
                var aRules;
                /** @type {?} */
                var uiMeta = (meta);
                if (uiMeta._testRules.has(value + 'Rule')) {
                    // since we are in development mode and test mode is on we can check extra repository
                    // used by tests, we need to check if we are not running unittest and a class is not
                    // application defined but unittest defined rule
                    if (uiMeta._testRules.has(value + 'Rule') &&
                        core.isPresent(uiMeta._testRules.get(value + 'Rule').oss)) {
                        aRules = uiMeta._testRules.get(value + 'Rule').oss;
                    }
                    meta.loadUserRule(aRules, value);
                }
                else if (core.isPresent(uiMeta.appConfig) &&
                    uiMeta.appConfig.get(UIMeta.AppConfigUserRulesParam)) {
                    /** @type {?} */
                    var userReferences = uiMeta.appConfig.get(UIMeta.AppConfigUserRulesParam);
                    for (var i in userReferences) {
                        if (core.isPresent(userReferences[i][value + 'Rule']) &&
                            core.isPresent(userReferences[i][value + 'Rule'].oss)) {
                            aRules = userReferences[i][value + 'Rule'].oss;
                        }
                    }
                    meta.loadUserRule(aRules, value);
                }
            };
        return UserMetaDataProvider;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** *
     * Constant represent current active and mainly latest Context
     *
      @type {?} */
    var ACTIVE_CNTX = 'CurrentMC';
    /** @type {?} */
    var IMPLICIT_PROPERTIES = [
        'module', 'layout', 'operation', 'class', 'object', 'actionCategory', 'action', 'field',
        'pushNewContext'
    ];
    /** @type {?} */
    var IMMUTABLE_PROPERTIES = [
        'module', 'layout', 'operation', 'class', 'action', 'field', 'pushNewContext'
    ];
    var MetaContextComponent = (function (_super) {
        __extends(MetaContextComponent, _super);
        function MetaContextComponent(elementRef, env, parentContainer) {
            var _this = _super.call(this, env, null) || this;
            _this.elementRef = elementRef;
            _this.env = env;
            _this.parentContainer = parentContainer;
            _this.beforeContextSet = new core$1.EventEmitter();
            _this.onContextChanged = new core$1.EventEmitter();
            _this.afterContextSet = new core$1.EventEmitter();
            _this.onAction = new core$1.EventEmitter();
            /**
             * Flag that tells us that component is fully rendered
             *
             */
            _this.viewInitialized = false;
            /**
             *
             * Marks MetaContext or the root MetaContext that created a new Context
             *
             */
            _this.contextCreated = false;
            _this.bindingKeys = [];
            return _this;
        }
        /**
         * @return {?}
         */
        MetaContextComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.initBindings();
                this.hasObject = this._hasObject();
                // MetaContextComponent.stackDepth++;
                // console.log(this.indent() + '=> ngOnInit:', this.contextKey());
                // Initial push, when component is first initialized the rest is done based on changes.
                this.pushPop(true);
                if (!this.env.hasValue('parent-cnx')) {
                    this.env.setValue('parent-cnx', this);
                }
            };
        /**
         * For any other immutable object detect changes here and refresh the context stack
         *
         * @param changes
         */
        /**
         * For any other immutable object detect changes here and refresh the context stack
         *
         * @param {?} changes
         * @return {?}
         */
        MetaContextComponent.prototype.ngOnChanges = /**
         * For any other immutable object detect changes here and refresh the context stack
         *
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                // console.log(this.indent() + '    => ngOnChanges', this.contextKey());
                try {
                    // console.log(this.indent() + '    => ngOnChanges', this.contextKey());
                    for (var IMMUTABLE_PROPERTIES_1 = __values(IMMUTABLE_PROPERTIES), IMMUTABLE_PROPERTIES_1_1 = IMMUTABLE_PROPERTIES_1.next(); !IMMUTABLE_PROPERTIES_1_1.done; IMMUTABLE_PROPERTIES_1_1 = IMMUTABLE_PROPERTIES_1.next()) {
                        var name_1 = IMMUTABLE_PROPERTIES_1_1.value;
                        if (core.isPresent(changes[name_1])
                            && (changes[name_1].currentValue !== changes[name_1].previousValue)) {
                            this.initBindings();
                            break;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (IMMUTABLE_PROPERTIES_1_1 && !IMMUTABLE_PROPERTIES_1_1.done && (_a = IMMUTABLE_PROPERTIES_1.return))
                            _a.call(IMMUTABLE_PROPERTIES_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                // in case object is coming late e.g. from some reactive API like REST then we
                // do not get it into ngInit but it will be here.
                if (this.viewInitialized && core.isPresent(changes['object']) && core.isPresent(this.object)) {
                    this.initBindings();
                }
                var e_1, _a;
            };
        /**
         * Ng check is trigged after view is fully inialized and we want to push everything new
         * properties to the context and evaluate everything.
         *
         *
         */
        /**
         * Ng check is trigged after view is fully inialized and we want to push everything new
         * properties to the context and evaluate everything.
         *
         *
         * @return {?}
         */
        MetaContextComponent.prototype.ngDoCheck = /**
         * Ng check is trigged after view is fully inialized and we want to push everything new
         * properties to the context and evaluate everything.
         *
         *
         * @return {?}
         */
            function () {
                if (this.viewInitialized) {
                    this.hasObject = this._hasObject();
                    // MetaContextComponent.stackDepth++;
                    this.pushPop(true);
                    // console.log(this.indent() + '=> ngDoCheck(CHANGED)', this.contextKey());
                    if (core.isPresent(this.object) && !core.equals(this.prevObject, this.object)) {
                        this.updateModel();
                    }
                }
            };
        /**
         * We want to start detecting changes only after view is fully checked
         */
        /**
         * We want to start detecting changes only after view is fully checked
         * @return {?}
         */
        MetaContextComponent.prototype.ngAfterViewInit = /**
         * We want to start detecting changes only after view is fully checked
         * @return {?}
         */
            function () {
                if (!this.viewInitialized) {
                    // console.log(this.indent() + '=> ngAfterViewInit:', this.contextKey());
                    // MetaContextComponent.stackDepth--;
                    this.pushPop(false);
                }
            };
        /**
         * @return {?}
         */
        MetaContextComponent.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
            function () {
                if (this.viewInitialized) {
                    // console.log(this.indent() + '=> ngAfterViewChecked:', this.contextKey());
                    // MetaContextComponent.stackDepth--;
                    this.pushPop(false);
                }
                else {
                    this.viewInitialized = true;
                }
            };
        /**
         *
         * This is our key method that triggers all the interaction inside MetaUI world. Here we
         * push context keys and their values to the stack and this is the thing that triggers
         * rule recalculation which give us updated  properties. Those are then used by
         * MetaIncludeComponent to render the UI.
         *
         * myContext is current context for this MetaContext Component.
         *
         * @param {?} isPush identifies if we are pushing or popping to context stack
         * @return {?}
         */
        MetaContextComponent.prototype.pushPop = /**
         *
         * This is our key method that triggers all the interaction inside MetaUI world. Here we
         * push context keys and their values to the stack and this is the thing that triggers
         * rule recalculation which give us updated  properties. Those are then used by
         * MetaIncludeComponent to render the UI.
         *
         * myContext is current context for this MetaContext Component.
         *
         * @param {?} isPush identifies if we are pushing or popping to context stack
         * @return {?}
         */
            function (isPush) {
                /** @type {?} */
                var activeContext = this.activeContext();
                core.assert(isPush || core.isPresent(activeContext), 'pop(): Missing context');
                /** @type {?} */
                var forceCreate = isPush && (core.isPresent(this.pushNewContext) && this.pushNewContext);
                if (core.isBlank(activeContext) || forceCreate) {
                    /** @type {?} */
                    var metaUI = UIMeta.getInstance();
                    activeContext = metaUI.newContext(forceCreate);
                    this.contextCreated = true;
                    this.env.push(ACTIVE_CNTX, activeContext);
                }
                if (isPush) {
                    activeContext.push();
                    if (core.isPresent(this._scopeBinding) && this.hasObject) {
                        this.beforeContextSet.emit(this._scopeBinding);
                        activeContext.setScopeKey(this._scopeBinding);
                        this.afterContextSet.emit(this._scopeBinding);
                    }
                    else {
                        for (var index = 0; index < this.bindingKeys.length; index++) {
                            /** @type {?} */
                            var key = this.bindingKeys[index];
                            /** @type {?} */
                            var value = this.bindingsMap.get(key);
                            this.beforeContextSet.emit(value);
                            activeContext.set(key, value);
                            this.afterContextSet.emit(value);
                        }
                    }
                    // Save created content to local MetaContext
                    this._myContext = activeContext.snapshot().hydrate(false);
                }
                else {
                    activeContext.pop();
                    if (this.contextCreated) {
                        this.env.pop(ACTIVE_CNTX);
                    }
                }
            };
        /**
         * Just for troubleshooting to print current context and assignments
         *
         */
        /**
         * Just for troubleshooting to print current context and assignments
         *
         * @return {?}
         */
        MetaContextComponent.prototype.debugString = /**
         * Just for troubleshooting to print current context and assignments
         *
         * @return {?}
         */
            function () {
                if (core.isPresent(this._myContext)) {
                    return this._myContext.debugString();
                }
            };
        /**
         * For debugging to identify current key
         */
        // contextKey(): string
        // {
        //     let cnxKey = '';
        //     if (isPresent(this.bindingKeys) && this.bindingKeys.length > 0) {
        //         this.bindingKeys.forEach((name) =>
        //         {
        //             if (name === 'object') {
        //                 cnxKey += name;
        //             } else {
        //                 cnxKey += name + this.bindingsMap.get(name);
        //             }
        //
        //
        //         });
        //     } else if (isPresent(this._scopeBinding)) {
        //         cnxKey += this._scopeBinding;
        //     }
        //     return cnxKey;
        // }
        /**
         *
         * Every meta context component which pushing certain properties to stack has its own context
         * that lives until component is destroyed
         *
         */
        /**
         *
         * Every meta context component which pushing certain properties to stack has its own context
         * that lives until component is destroyed
         *
         * @return {?}
         */
        MetaContextComponent.prototype.myContext = /**
         *
         * Every meta context component which pushing certain properties to stack has its own context
         * that lives until component is destroyed
         *
         * @return {?}
         */
            function () {
                return this._myContext;
                // let cnxKey = this.contextKey();
                // return this.env.getValue(cnxKey);
            };
        /**
         * We keep the most current and latest context to environment to be read by any Child
         * MetaContext for purpose of creation new context and it needs info what was already pushed
         * onto the stack.
         *
         */
        /**
         * We keep the most current and latest context to environment to be read by any Child
         * MetaContext for purpose of creation new context and it needs info what was already pushed
         * onto the stack.
         *
         * @return {?}
         */
        MetaContextComponent.prototype.activeContext = /**
         * We keep the most current and latest context to environment to be read by any Child
         * MetaContext for purpose of creation new context and it needs info what was already pushed
         * onto the stack.
         *
         * @return {?}
         */
            function () {
                return this.env.peak(ACTIVE_CNTX);
            };
        /**
         * Let's clean up and destroy pushed context
         */
        /**
         * Let's clean up and destroy pushed context
         * @return {?}
         */
        MetaContextComponent.prototype.ngOnDestroy = /**
         * Let's clean up and destroy pushed context
         * @return {?}
         */
            function () {
                if (this.env.hasValue('parent-cnx')) {
                    this.env.deleteValue('parent-cnx');
                }
            };
        /**
         * Ideally we do not need this method if Angular would support to pass variable number of
         * bindings without a need to have backup property for each of the bindings or expression./
         *
         * Once they support. we can remove this. Since this check what are known bindings passed,
         * meaning the ones decorated with \@Input and the rest
         *
         * @return {?}
         */
        MetaContextComponent.prototype.initBindings = /**
         * Ideally we do not need this method if Angular would support to pass variable number of
         * bindings without a need to have backup property for each of the bindings or expression./
         *
         * Once they support. we can remove this. Since this check what are known bindings passed,
         * meaning the ones decorated with \@Input and the rest
         *
         * @return {?}
         */
            function () {
                var _this = this;
                this.bindingsMap = new Map();
                /** @type {?} */
                var nativeElement = this.elementRef.nativeElement;
                this.initImplicitBindings();
                for (var i = 0; i < nativeElement.attributes.length; i++) {
                    /** @type {?} */
                    var attr = nativeElement.attributes.item(i);
                    if (this.ignoreBinding(attr)) {
                        continue;
                    }
                    if (core.isPresent(attr.name) && attr.name.toLowerCase() === 'scopekey') {
                        this._scopeBinding = attr.value;
                    }
                    else {
                        this.bindingsMap.set(attr.name, attr.value);
                    }
                }
                this.bindingKeys = [];
                this.bindingsMap.forEach(function (value, key) {
                    _this.bindingKeys.push(key);
                });
                // Sort them by their importance or rank
                core.ListWrapper.sortByExample(this.bindingKeys, IMPLICIT_PROPERTIES);
            };
        /**
         * The thing we want is to pass variable number of bindings and resolve them programmatically.
         * Currently in Angular we cannot do this we have these set of properties where we expect
         * some expression, some dynamic properties. For the rest we expect only string literal to be
         * passed in therefore we can resolve them with nativeElement.attributes
         *
         * @return {?}
         */
        MetaContextComponent.prototype.initImplicitBindings = /**
         * The thing we want is to pass variable number of bindings and resolve them programmatically.
         * Currently in Angular we cannot do this we have these set of properties where we expect
         * some expression, some dynamic properties. For the rest we expect only string literal to be
         * passed in therefore we can resolve them with nativeElement.attributes
         *
         * @return {?}
         */
            function () {
                if (core.isPresent(this.module)) {
                    this.bindingsMap.set('module', this.module);
                }
                if (core.isPresent(this.layout)) {
                    this.bindingsMap.set('layout', this.layout);
                }
                if (core.isPresent(this.operation)) {
                    this.bindingsMap.set('operation', this.operation);
                }
                if (core.isPresent(this.class)) {
                    this.bindingsMap.set('class', this.class);
                }
                if (core.isPresent(this.object)) {
                    this.bindingsMap.set('object', this.object);
                    this.prevObject = Object.assign({}, this.object);
                }
                if (core.isPresent(this.actionCategory)) {
                    this.bindingsMap.set('actionCategory', this.actionCategory);
                }
                if (core.isPresent(this.action)) {
                    this.bindingsMap.set('action', this.action);
                }
                if (core.isPresent(this.field)) {
                    this.bindingsMap.set('field', this.field);
                }
            };
        /**
         *
         * Since we are going thru the element' attributes we want to skip anything that has nothign
         * to do with us.
         *
         * @param {?} attr
         * @return {?}
         */
        MetaContextComponent.prototype.ignoreBinding = /**
         *
         * Since we are going thru the element' attributes we want to skip anything that has nothign
         * to do with us.
         *
         * @param {?} attr
         * @return {?}
         */
            function (attr) {
                return IMPLICIT_PROPERTIES.indexOf(attr.name) !== -1 ||
                    core.StringWrapper.contains(attr.name, '_ng') ||
                    core.StringWrapper.contains(attr.name, 'ng-') ||
                    core.StringWrapper.contains(attr.name, '(') ||
                    (core.isBlank(attr.value) || attr.value.length === 0);
            };
        /**
         * If object is changed we need to also update our angular model to reflect user changes. All
         * changes and updates in metaui use object references
         * @return {?}
         */
        MetaContextComponent.prototype.updateModel = /**
         * If object is changed we need to also update our angular model to reflect user changes. All
         * changes and updates in metaui use object references
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var fields = Object.keys(this.object);
                fields.forEach(function (field) {
                    /** @type {?} */
                    var control = (_this.formGroup.get(field));
                    if (core.isPresent(control)) {
                        control.patchValue(_this.object[field], { onlySelf: false, emitEvent: true });
                    }
                });
                this.prevObject = Object.assign({}, this.object);
            };
        /**
         * @return {?}
         */
        MetaContextComponent.prototype._hasObject = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var context = this.activeContext();
                if (core.isPresent(context)) {
                    return core.isPresent(((context)).object);
                }
                return false;
            };
        MetaContextComponent.decorators = [
            { type: core$1.Component, args: [{
                        selector: 'm-context',
                        template: '<ng-content></ng-content>',
                        changeDetection: core$1.ChangeDetectionStrategy.OnPush,
                        providers: [
                            { provide: components.BaseFormComponent, useExisting: core$1.forwardRef(function () { return MetaContextComponent; }) }
                        ]
                    }] }
        ];
        /** @nocollapse */
        MetaContextComponent.ctorParameters = function () {
            return [
                { type: core$1.ElementRef },
                { type: core.Environment },
                { type: components.BaseFormComponent, decorators: [{ type: core$1.SkipSelf }, { type: core$1.Optional }, { type: core$1.Inject, args: [core$1.forwardRef(function () { return components.BaseFormComponent; }),] }] }
            ];
        };
        MetaContextComponent.propDecorators = {
            module: [{ type: core$1.Input }],
            layout: [{ type: core$1.Input }],
            operation: [{ type: core$1.Input }],
            class: [{ type: core$1.Input }],
            object: [{ type: core$1.Input }],
            actionCategory: [{ type: core$1.Input }],
            action: [{ type: core$1.Input }],
            field: [{ type: core$1.Input }],
            pushNewContext: [{ type: core$1.Input }],
            beforeContextSet: [{ type: core$1.Output }],
            onContextChanged: [{ type: core$1.Output }],
            afterContextSet: [{ type: core$1.Output }],
            onAction: [{ type: core$1.Output }]
        };
        return MetaContextComponent;
    }(components.BaseFormComponent));
    /**
     *
     * Defines format for the broadcasted action event. MetaUI can also execute actions which needs to
     * be handled by application or actual component using this m-context.
     *
     */
    var /**
     *
     * Defines format for the broadcasted action event. MetaUI can also execute actions which needs to
     * be handled by application or actual component using this m-context.
     *
     */ MetaUIActionEvent = (function () {
        function MetaUIActionEvent(component, eventName, cnxName, data) {
            this.component = component;
            this.eventName = eventName;
            this.cnxName = cnxName;
            this.data = data;
        }
        return MetaUIActionEvent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var AWMetaCoreModule = (function () {
        function AWMetaCoreModule() {
        }
        AWMetaCoreModule.decorators = [
            { type: core$1.NgModule, args: [{
                        declarations: [
                            MetaContextComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule
                        ],
                        entryComponents: [
                            MetaContextComponent
                        ],
                        exports: [
                            MetaContextComponent,
                            forms.ReactiveFormsModule,
                            forms.FormsModule
                        ],
                        providers: []
                    },] }
        ];
        return AWMetaCoreModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var RuleLoaderService = (function () {
        function RuleLoaderService() {
        }
        Object.defineProperty(RuleLoaderService.prototype, "uiMeta", {
            get: /**
             * @return {?}
             */ function () {
                return this._uiMeta;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._uiMeta = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} meta
         * @param {?} source
         * @param {?} module
         * @param {?} onRule
         * @return {?}
         */
        RuleLoaderService.prototype.loadRules = /**
         * @param {?} meta
         * @param {?} source
         * @param {?} module
         * @param {?} onRule
         * @return {?}
         */
            function (meta, source, module, onRule) {
                var _this = this;
                this._uiMeta = /** @type {?} */ (meta);
                source.forEach(function (val, index) {
                    /** @type {?} */
                    var rule = _this.readRule(val, module);
                    if (core.isPresent(onRule)) {
                        onRule(rule);
                    }
                });
            };
        /**
         * @param {?} source
         * @param {?} module
         * @return {?}
         */
        RuleLoaderService.prototype.loadRulesWithReturn = /**
         * @param {?} source
         * @param {?} module
         * @return {?}
         */
            function (source, module) {
                var _this = this;
                /** @type {?} */
                var rules = new Array();
                source.forEach(function (val, index) {
                    /** @type {?} */
                    var rule = _this.readRule(val, module);
                    rules.push(rule);
                });
                return rules;
            };
        /**
         * @param {?} jsonRule
         * @param {?} module
         * @return {?}
         */
        RuleLoaderService.prototype.readRule = /**
         * @param {?} jsonRule
         * @param {?} module
         * @return {?}
         */
            function (jsonRule, module) {
                var _this = this;
                /** @type {?} */
                var selectors = new Array();
                try {
                    for (var _a = __values(jsonRule._selectors), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var item = _b.value;
                        if (core.isPresent(item._value) && item._value.constructor === Object && Object.keys(item._value).length === 0) {
                            item._value = Meta.NullMarker;
                        }
                        /** @type {?} */
                        var selector = new Selector(item._key, item._value, item._isDecl);
                        selectors.push(selector);
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                /** @type {?} */
                var properties = core.MapWrapper.createFromStringMapWithResolve(jsonRule._properties, function (k, v) {
                    if (core.isStringMap(v) &&
                        core.isPresent(v['t'])) {
                        return _this.resoveValue(v['t'], v, module);
                    }
                    else if (core.isStringMap(v) && !core.isArray(v)) {
                        // we have some
                        // other sub level
                        // of object
                        // literal - lets
                        // convert this
                        // into Map.
                        return core.MapWrapper.createFromStringMapWithResolve(v, function (key, val) {
                            return _this.resoveValue(val['t'], val, module);
                        });
                    }
                    else if (core.isArray(v)) {
                        // let convert with
                        // typings as well
                        return core.ListWrapper.clone(v);
                    }
                    return v;
                });
                /** @type {?} */
                var props = properties.size === 0 ? undefined : properties;
                /** @type {?} */
                var rule = new Rule(selectors, props, jsonRule._rank);
                return rule;
                var e_1, _c;
            };
        /**
         * @param {?} type
         * @param {?} value
         * @param {?} module
         * @return {?}
         */
        RuleLoaderService.prototype.resoveValue = /**
         * @param {?} type
         * @param {?} value
         * @param {?} module
         * @return {?}
         */
            function (type, value, module) {
                if (core.isBlank(value)) {
                    return null;
                }
                if (type === 'Expr') {
                    return new Expr(value['v']);
                }
                else if (type === 'SDW') {
                    /** @type {?} */
                    var expr = new Expr(value['v']);
                    return new StaticDynamicWrapper(new StaticallyResolvableWrapper(expr));
                }
                else if (type === 'CFP') {
                    return new ContextFieldPath(value['v']);
                }
                else if (type === 'OV') {
                    return new OverrideValue(value['v']);
                }
                else if (type === 'i18n' && value['v']['key']) {
                    /** @type {?} */
                    var locKey = value['v']['key'];
                    return core.isPresent(this._uiMeta) ? this._uiMeta.createLocalizedString(locKey, value['v']['defVal'])
                        :
                            new LocalizedString(null, module, locKey, value['v']['defVal']);
                }
                return value;
            };
        RuleLoaderService.decorators = [
            { type: core$1.Injectable }
        ];
        /** @nocollapse */
        RuleLoaderService.ctorParameters = function () { return []; };
        return RuleLoaderService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NoMetaComponent = (function () {
        function NoMetaComponent() {
        }
        /**
         * @return {?}
         */
        NoMetaComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        NoMetaComponent.decorators = [
            { type: core$1.Component, args: [{
                        selector: 'app-no-meta',
                        template: "\n        <h2>MetaIncludeComponentDirective Error:</h2>\n                No componentName property resolved in Context<br/>\n    ",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        NoMetaComponent.ctorParameters = function () { return []; };
        return NoMetaComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     *  MetaIncludeComponentDirective is (along with MetaContext) the key element for binding MetaUI
     * into AngularJs user interfaces. You can think of it such GLUE.
     *
     *  MetaIncludeComponentDirective dynamically switches in a Angular's component based on the
     * current MetaContext's
     * 'component' property and sets its bindings from the 'bindings' property.  This alone enables
     * almost any existing Angular's widget to be specified for use for a particular field or layout
     * using rules -- without any additional glue code .
     *
     *  component using 'wrapperComponent' and 'wrapperBindings', binding component content using the
     * bindings 'ngcontent', ngcontentLayout and 'ngcontentelElement', and event binding named Content
     * templates using an
     * 'awcontentLayouts' map binding. Without this we will not be able to use complex layouts.
     *
     */
    var MetaIncludeComponentDirective = (function (_super) {
        __extends(MetaIncludeComponentDirective, _super);
        function MetaIncludeComponentDirective(metaContext, viewContainer, factoryResolver, env, cd, compRegistry, domUtils) {
            var _this = _super.call(this, viewContainer, factoryResolver, cd, compRegistry) || this;
            _this.metaContext = metaContext;
            _this.viewContainer = viewContainer;
            _this.factoryResolver = factoryResolver;
            _this.env = env;
            _this.cd = cd;
            _this.compRegistry = compRegistry;
            _this.domUtils = domUtils;
            return _this;
        }
        /**
         * First we simply render the a component in the ngOnInit() and then every time something
         * changes.
         */
        /**
         * First we simply render the a component in the ngOnInit() and then every time something
         * changes.
         * @return {?}
         */
        MetaIncludeComponentDirective.prototype.ngDoCheck = /**
         * First we simply render the a component in the ngOnInit() and then every time something
         * changes.
         * @return {?}
         */
            function () {
                /** @type {?} */
                var context = this.metaContext.myContext();
                if (core.isBlank(context) || core.isBlank(this.currentComponent)) {
                    // console.log('No context/ component for ' + this.name);
                    return;
                }
                /** @type {?} */
                var newComponent = context.propertyForKey('component');
                if (core.isPresent(newComponent) && core.isPresent(this.name) && (this.name !== newComponent)) {
                    this.viewContainer.clear();
                    this.doRenderComponent();
                    // console.log('MetaInclude(ngDoCheck- rerender ):', this.name);
                    this.createWrapperElementIfAny();
                    this.createContentElementIfAny();
                }
                else {
                    /** @type {?} */
                    var editable = context.propertyForKey(ObjectMeta.KeyEditable);
                    if (core.isBlank(editable)) {
                        editable = context.propertyForKey(UIMeta.KeyEditing);
                    }
                    /** @type {?} */
                    var metaBindings = context.propertyForKey(UIMeta.KeyBindings);
                    /** @type {?} */
                    var type = context.propertyForKey(ObjectMeta.KeyType);
                    /** @type {?} */
                    var inputs = this.componentReference().metadata.inputs;
                    // re-apply Inputs
                    // maybe we should diff properties and only if they changed re-apply
                    if (core.isPresent(metaBindings) && core.isPresent(inputs)) {
                        this.applyInputs(this.currentComponent, type, metaBindings, inputs, editable);
                    }
                }
            };
        /*
         * Retrieves component Name from the Context.
         */
        /**
         * @return {?}
         */
        MetaIncludeComponentDirective.prototype.resolveComponentType = /**
         * @return {?}
         */
            function () {
                this.name = this.metaContext.myContext().propertyForKey(UIMeta.KeyComponentName);
                if (core.isBlank(this.name)) {
                    return NoMetaComponent;
                }
                return _super.prototype.resolveComponentType.call(this);
            };
        /*
         * If there is a NG content as part of the bindings apply it and remove it from the list. In
         * the MetaUI world it can appear if we want to insert a text content into the element:
         *
         *
         *  trait=toManyLink {
         *         component:AWHyperlink;
         *         bindings: {
         *             action: ${
         *                this.set("object", value);
         *                this.set("actionCategory", "General");
         *                this.set("action", "Inspect");
         *                 meta.fireAction(this, true)
         *             };
         *             awcontent: "Click Me";
         *         }
         *     }
         *
         *
         */
        /**
         * @return {?}
         */
        MetaIncludeComponentDirective.prototype.ngContent = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var cntValue;
                /** @type {?} */
                var bindings = this.metaContext.myContext().propertyForKey(UIMeta.KeyBindings);
                if (core.isPresent(bindings) &&
                    core.isPresent(cntValue = bindings.get(components.IncludeComponentDirective.NgContent))) {
                    cntValue = core.isString(cntValue) ? cntValue :
                        this.metaContext.myContext().resolveValue(cntValue);
                }
                return cntValue;
            };
        /**
         * @return {?}
         */
        MetaIncludeComponentDirective.prototype.ngContentElement = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var cntValue;
                /** @type {?} */
                var bindings = this.metaContext.myContext().propertyForKey(UIMeta.KeyBindings);
                if (core.isPresent(bindings) &&
                    core.isPresent(cntValue = bindings.get(components.IncludeComponentDirective.NgContentElement))) {
                    cntValue = core.isString(cntValue) ? cntValue :
                        this.metaContext.myContext().resolveValue(cntValue);
                }
                return cntValue;
            };
        /**
         * Implement custom behavior of adding ngcontentLayout described above (where the constant
         * is defined)
         *
         */
        /**
         * Implement custom behavior of adding ngcontentLayout described above (where the constant
         * is defined)
         *
         * @return {?}
         */
        MetaIncludeComponentDirective.prototype.createContentElementIfAny = /**
         * Implement custom behavior of adding ngcontentLayout described above (where the constant
         * is defined)
         *
         * @return {?}
         */
            function () {
                /** @type {?} */
                var detectChanges = false;
                /** @type {?} */
                var bindings = this.metaContext.myContext().propertyForKey(UIMeta.KeyBindings);
                if (core.isPresent(bindings) && bindings.has(MetaIncludeComponentDirective.NgContentLayout)) {
                    /** @type {?} */
                    var layoutName = bindings.get(MetaIncludeComponentDirective.NgContentLayout);
                    /** @type {?} */
                    var context = this.metaContext.myContext();
                    context.push();
                    context.set(UIMeta.KeyLayout, layoutName);
                    /** @type {?} */
                    var componentName = context.propertyForKey('component');
                    /** @type {?} */
                    var compType = this.compRegistry.nameToType.get(componentName);
                    /** @type {?} */
                    var componentFactory = this.factoryResolver
                        .resolveComponentFactory(compType);
                    /** @type {?} */
                    var componentMeta = this.resolveDirective(componentFactory);
                    /** @type {?} */
                    var ngComponent = this.viewContainer.createComponent(componentFactory, 0);
                    /** @type {?} */
                    var cReference = {
                        metadata: componentMeta,
                        resolvedCompFactory: componentFactory,
                        componentType: compType,
                        componentName: componentName
                    };
                    this.applyBindings(cReference, ngComponent, context.propertyForKey(UIMeta.KeyBindings), false);
                    this.domUtils.insertIntoParentNgContent(this.currentComponent.location.nativeElement, ngComponent.location.nativeElement);
                    context.pop();
                    detectChanges = true;
                }
                else {
                    detectChanges = _super.prototype.createContentElementIfAny.call(this);
                }
                if (detectChanges) {
                    // console.log('MetaInclude(createContentElementIfAny):', this.name);
                    this.cd.detectChanges();
                }
                return detectChanges;
            };
        /**
         * Meta placeTheComponent needs to account for wrapper component. If wrapper component
         * is present. It needs to inject the wrapper component on the page and add this component
         * inside the wrapper component.
         */
        /**
         * Meta placeTheComponent needs to account for wrapper component. If wrapper component
         * is present. It needs to inject the wrapper component on the page and add this component
         * inside the wrapper component.
         * @return {?}
         */
        MetaIncludeComponentDirective.prototype.createWrapperElementIfAny = /**
         * Meta placeTheComponent needs to account for wrapper component. If wrapper component
         * is present. It needs to inject the wrapper component on the page and add this component
         * inside the wrapper component.
         * @return {?}
         */
            function () {
                /** @type {?} */
                var wrapperName = this.metaContext.myContext().propertyForKey(UIMeta.KeyWrapperComponent);
                if (core.isBlank(wrapperName)) {
                    return;
                }
                /** @type {?} */
                var wrapperType = this.compRegistry.nameToType.get(wrapperName);
                /** @type {?} */
                var componentFactory = this.factoryResolver
                    .resolveComponentFactory(wrapperType);
                /** @type {?} */
                var componentMeta = this.resolveDirective(wrapperType);
                /** @type {?} */
                var wrapperComponent = this.viewContainer.createComponent(componentFactory);
                /** @type {?} */
                var wrapperBindings = this.metaContext.myContext().propertyForKey(UIMeta.KeyWrapperBinding);
                ((wrapperComponent.instance))['bindings'] = wrapperBindings;
                /** @type {?} */
                var wrapperComponentRef = {
                    metadata: componentMeta,
                    resolvedCompFactory: componentFactory,
                    componentType: wrapperType,
                    componentName: wrapperName
                };
                this.applyBindings(wrapperComponentRef, wrapperComponent, wrapperBindings);
                this.domUtils.insertIntoParentNgContent(wrapperComponent.location.nativeElement, this.currentComponent.location.nativeElement);
            };
        /**
         * ApplyBindings reads the @Inputs from ComponentMetadata and check if there exists a binding
         * coming from MetaRules. If there is we assign it to the input.
         */
        /**
         * ApplyBindings reads the \@Inputs from ComponentMetadata and check if there exists a binding
         * coming from MetaRules. If there is we assign it to the input.
         * @param {?} cRef
         * @param {?} component
         * @param {?} bindings
         * @param {?=} bUseMetaBindings
         * @return {?}
         */
        MetaIncludeComponentDirective.prototype.applyBindings = /**
         * ApplyBindings reads the \@Inputs from ComponentMetadata and check if there exists a binding
         * coming from MetaRules. If there is we assign it to the input.
         * @param {?} cRef
         * @param {?} component
         * @param {?} bindings
         * @param {?=} bUseMetaBindings
         * @return {?}
         */
            function (cRef, component, bindings, bUseMetaBindings) {
                if (bUseMetaBindings === void 0) {
                    bUseMetaBindings = true;
                }
                _super.prototype.applyBindings.call(this, cRef, component, bindings);
                /** @type {?} */
                var inputs = cRef.metadata.inputs;
                /** @type {?} */
                var outputs = cRef.metadata.outputs;
                /** @type {?} */
                var metaBindings = this.metaContext.myContext().propertyForKey(UIMeta.KeyBindings);
                /** @type {?} */
                var editable = this.metaContext.myContext().propertyForKey(ObjectMeta.KeyEditable);
                /** @type {?} */
                var type = this.metaContext.myContext().propertyForKey(ObjectMeta.KeyType);
                // There are cases where we want to use the bindings passed into this function.
                // For example, the wrapperBindings.
                if (!bUseMetaBindings) {
                    metaBindings = bindings;
                }
                if (core.isBlank(metaBindings) || core.isBlank(inputs)) {
                    return;
                }
                /** @type {?} */
                var currenBindings = core.MapWrapper.clone(metaBindings);
                this.applyInputs(component, type, currenBindings, inputs, editable);
                this.applyOutputs(component, currenBindings, outputs);
            };
        /**
         * @param {?} component
         * @param {?} type
         * @param {?} bindings
         * @param {?} inputs
         * @param {?} editable
         * @param {?=} compToBeRendered
         * @return {?}
         */
        MetaIncludeComponentDirective.prototype.applyInputs = /**
         * @param {?} component
         * @param {?} type
         * @param {?} bindings
         * @param {?} inputs
         * @param {?} editable
         * @param {?=} compToBeRendered
         * @return {?}
         */
            function (component, type, bindings, inputs, editable, compToBeRendered) {
                if (compToBeRendered === void 0) {
                    compToBeRendered = true;
                }
                // propagate a field type to bindings.
                if (core.isPresent(type) && core.isPresent(component.instance.canSetType) &&
                    component.instance.canSetType()) {
                    bindings.set(ObjectMeta.KeyType, type);
                }
                if (core.isPresent(editable) && core.isPresent(component.instance['editable'])) {
                    component.instance['editable'] = editable;
                }
                try {
                    for (var inputs_1 = __values(inputs), inputs_1_1 = inputs_1.next(); !inputs_1_1.done; inputs_1_1 = inputs_1.next()) {
                        var key = inputs_1_1.value;
                        /** @type {?} */
                        var publicKey = core.nonPrivatePrefix(key);
                        /** @type {?} */
                        var value = bindings.get(publicKey);
                        // Handle special case where we do not pass explicitly or inherit from parent @Input
                        // name for the component
                        if (key === 'name' && core.isBlank(value)) {
                            value = this.metaContext.myContext().propertyForKey(ObjectMeta.KeyField);
                        }
                        if (this.skipInput(key, value)) {
                            continue;
                        }
                        // compToBeRendered = only first time
                        if (compToBeRendered && value instanceof ContextFieldPath) {
                            this.applyDynamicInputBindings(component.instance, bindings, inputs, key, value, editable);
                        }
                        else if (compToBeRendered && value instanceof DynamicPropertyValue) {
                            /** @type {?} */
                            var dynval = value;
                            /** @type {?} */
                            var newValue = dynval.evaluate(this.metaContext.myContext());
                            component.instance[publicKey] = newValue;
                        }
                        else {
                            /**
                                             * when re-applying Inputs skip all expressions above and only work with regular
                                             * types
                                             *
                                             * set it only if it changes so it will not trigger necessary `value changed
                                             * aftter check`
                                             */
                            if (!core.equals(component.instance[publicKey], value)) {
                                component.instance[publicKey] = value;
                            }
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (inputs_1_1 && !inputs_1_1.done && (_a = inputs_1.return))
                            _a.call(inputs_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                // apply Formatter that can be specified in the oss
                // temporary disabled untill angular will support runtime i18n
                // if (bindings.has(MetaIncludeComponentDirective.FormatterBinding)) {
                //     let transform = this.formatters
                //         .get(bindings.get(MetaIncludeComponentDirective.FormatterBinding));
                //     component.instance[MetaIncludeComponentDirective.FormatterBinding] = transform;
                // }
                var e_1, _a;
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        MetaIncludeComponentDirective.prototype.skipInput = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                return core.isBlank(value) || key === components.IncludeComponentDirective.NgContent ||
                    key === MetaIncludeComponentDirective.NgContentLayout;
            };
        /**
         * @param {?} component
         * @param {?} bindings
         * @param {?} outputs
         * @return {?}
         */
        MetaIncludeComponentDirective.prototype.applyOutputs = /**
         * @param {?} component
         * @param {?} bindings
         * @param {?} outputs
         * @return {?}
         */
            function (component, bindings, outputs) {
                var _this = this;
                var _loop_1 = function (key) {
                    /** @type {?} */
                    var publicKey = core.nonPrivatePrefix(key);
                    /** @type {?} */
                    var value = bindings.get(publicKey);
                    if (key === components.IncludeComponentDirective.NgContent) {
                        return "continue";
                    }
                    /** @type {?} */
                    var eventEmitter = component.instance[publicKey];
                    if (value instanceof DynamicPropertyValue) {
                        this_1.applyDynamicOutputBinding(eventEmitter, value, this_1.metaContext.myContext());
                    }
                    else {
                        // just trigger event outside
                        eventEmitter.subscribe(function (val) {
                            if (_this.env.hasValue('parent-cnx')) {
                                /** @type {?} */
                                var event_1 = val;
                                /** @type {?} */
                                var cnx = _this.env.getValue('parent-cnx');
                                if (!(val instanceof MetaUIActionEvent)) {
                                    event_1 = new MetaUIActionEvent(component.instance, publicKey, publicKey, val);
                                }
                                cnx.onAction.emit(event_1);
                            }
                        });
                    }
                };
                var this_1 = this;
                try {
                    for (var outputs_1 = __values(outputs), outputs_1_1 = outputs_1.next(); !outputs_1_1.done; outputs_1_1 = outputs_1.next()) {
                        var key = outputs_1_1.value;
                        _loop_1(key);
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (outputs_1_1 && !outputs_1_1.done && (_a = outputs_1.return))
                            _a.call(outputs_1);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                var e_2, _a;
            };
        /**
         * @param {?} emitter
         * @param {?} value
         * @param {?} context
         * @return {?}
         */
        MetaIncludeComponentDirective.prototype.applyDynamicOutputBinding = /**
         * @param {?} emitter
         * @param {?} value
         * @param {?} context
         * @return {?}
         */
            function (emitter, value, context) {
                emitter.asObservable().subscribe(function (val) {
                    /** @type {?} */
                    var dynval = value;
                    context.resolveValue(dynval);
                });
            };
        /**
         * @param {?} me
         * @param {?} bindings
         * @param {?} inputs
         * @param {?} key
         * @param {?} value
         * @param {?} editable
         * @return {?}
         */
        MetaIncludeComponentDirective.prototype.applyDynamicInputBindings = /**
         * @param {?} me
         * @param {?} bindings
         * @param {?} inputs
         * @param {?} key
         * @param {?} value
         * @param {?} editable
         * @return {?}
         */
            function (me, bindings, inputs, key, value, editable) {
                var _this = this;
                /** @type {?} */
                var publicKey = core.nonPrivatePrefix(key);
                /** @type {?} */
                var cnxtPath = value;
                /** @type {?} */
                var metaContext = this.metaContext;
                /**
                         * captured also current context snapshot so we can replay ContextFieldPath.evaluate() if
                         * called outside of push/pop cycle.
                         *
                         * todo: check if we can replace this with Custom value accessor
                         */
                Object.defineProperty(me, publicKey, {
                    get: function () {
                        /** @type {?} */
                        var context = _this.metaContext.myContext();
                        return cnxtPath.evaluate(context);
                    },
                    set: function (val) {
                        /** @type {?} */
                        var context = _this.metaContext.myContext();
                        /** @type {?} */
                        var editing = context.propertyForKey(ObjectMeta.KeyEditable)
                            || context.propertyForKey(UIMeta.KeyEditing);
                        if (editing && !core.StringWrapper.equals(val, me[publicKey])) {
                            /** @type {?} */
                            var type = context.propertyForKey(ObjectMeta.KeyType);
                            cnxtPath.evaluateSet(context, ValueConverter.value(type, val));
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
            };
        /**
         * Just a constant use to access Environment where we store current context for current render
         * lifecycle
         *
         */
        MetaIncludeComponentDirective.FormatterBinding = 'formatter';
        /**
         *
         * In metaU we can also insert into the element not only ngcontent but new instantiated
         * component which is defined by layout
         *
         * ```
         * field trait=ObjectDetail {
         * 	editable=false {
         * 		component: HoverCardComponnet;
         * 		bindings: {
         * 			ngcontentLayout: Content;
         * 			linkTitle:${properties.get("label")};
         * 		}
         * 	}
         *
         * \@layout=Content {
         * 		component: MetaContextObject;
         * 		bindings: {
         * 			object: $value;
         * 			layout:DetailLayout
         * 			operation:"view";
         * 		}
         * 	}
         * }
         * ```
         *
         */
        MetaIncludeComponentDirective.NgContentLayout = 'ngcontentLayout';
        MetaIncludeComponentDirective.decorators = [
            { type: core$1.Directive, args: [{
                        selector: 'm-include-component'
                    },] }
        ];
        /** @nocollapse */
        MetaIncludeComponentDirective.ctorParameters = function () {
            return [
                { type: MetaContextComponent, decorators: [{ type: core$1.Inject, args: [core$1.forwardRef(function () { return MetaContextComponent; }),] }] },
                { type: core$1.ViewContainerRef },
                { type: core$1.ComponentFactoryResolver },
                { type: core.Environment },
                { type: core$1.ChangeDetectorRef },
                { type: components.ComponentRegistry },
                { type: components.DomUtilsService }
            ];
        };
        MetaIncludeComponentDirective.propDecorators = {
            context: [{ type: core$1.Input }]
        };
        return MetaIncludeComponentDirective;
    }(components.IncludeComponentDirective));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * This is just a wrapper component around meta-form-table as we need every single context push to
     * happen before the child content start to render.
     *
     * In this case I would like to wrap wrap my content with m-context in the way:
     *
     *  <m-context scopeKey="class">
     *        <!-- lets process one zone now and four we can deal later-->
     *        <ng-template [ngIf]="isFiveZoneLayout">
     *              <aw-form-table [isEditable]="isEditable" [labelsOnTop]="labelsOnTop"
     * (onSubmit)="onSaveAction($event)">
     *                  <ng-template ngFor let-curentField [ngForOf]="zLeft()">
     *                      <m-context [field]="curentField">
     *                           <m-form-row [field]="curentField"></m-form-row>
     *                      </m-context>
     *                  </ng-template>
     *          </aw-form-table>
     *        </ng-template>
     *  </m-context>
     *
     *
     *
     */
    var MetaFormComponent = (function () {
        function MetaFormComponent(environment) {
            this.environment = environment;
        }
        MetaFormComponent.decorators = [
            { type: core$1.Component, args: [{
                        selector: 'm-form',
                        template: "<m-context #cnx scopeKey=\"class\">\n    <!-- Dont try to render if the object is not set yet -->\n    <m-form-table *ngIf=\"cnx.hasObject\"></m-form-table>\n</m-context>\n"
                    }] }
        ];
        /** @nocollapse */
        MetaFormComponent.ctorParameters = function () {
            return [
                { type: core.Environment }
            ];
        };
        return MetaFormComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Common component to setup the context and also create context snapshot for later user.
     * @abstract
     */
    var /**
     * Common component to setup the context and also create context snapshot for later user.
     * @abstract
     */ MetaBaseComponent = (function (_super) {
        __extends(MetaBaseComponent, _super);
        function MetaBaseComponent(env, _metaContext) {
            var _this = _super.call(this, env, _metaContext) || this;
            _this.env = env;
            _this._metaContext = _metaContext;
            return _this;
        }
        /**
         * @return {?}
         */
        MetaBaseComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                this.updateMeta();
            };
        /**
         * @return {?}
         */
        MetaBaseComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
                this.updateMeta();
            };
        /**
         * @return {?}
         */
        MetaBaseComponent.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        MetaBaseComponent.prototype.updateMeta = /**
         * @return {?}
         */
            function () {
                this.editing = this.context.booleanPropertyForKey(UIMeta.KeyEditing, false);
                if (this.editing) {
                    this.object = this.context.values.get(ObjectMeta.KeyObject);
                    this.contextSnapshot = this.context.snapshot();
                }
                this.doUpdate();
            };
        /**
         * Placeholder to be implemented by subclass. this method is triggered when we detect any
         * changes on the MetaContext
         */
        /**
         * Placeholder to be implemented by subclass. this method is triggered when we detect any
         * changes on the MetaContext
         * @return {?}
         */
        MetaBaseComponent.prototype.doUpdate = /**
         * Placeholder to be implemented by subclass. this method is triggered when we detect any
         * changes on the MetaContext
         * @return {?}
         */
            function () {
            };
        Object.defineProperty(MetaBaseComponent.prototype, "context", {
            /**
             * Get the last saved context from the MetaContext component
             *
             */
            get: /**
             * Get the last saved context from the MetaContext component
             *
             * @return {?}
             */ function () {
                if (core.isPresent(this._metaContext) && core.isPresent(this._metaContext.myContext())) {
                    return this._metaContext.myContext();
                }
                core.assert(false, 'Should always have metaContext available');
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MetaBaseComponent.prototype.isNestedContext = /**
         * @return {?}
         */
            function () {
                return this.context.isNested;
            };
        // remove this ugly solution once I figure out custom value accessor that I can
        // provide as a expression
        /**
         * @param {?} key
         * @param {?=} defValue
         * @return {?}
         */
        MetaBaseComponent.prototype.properties = /**
         * @param {?} key
         * @param {?=} defValue
         * @return {?}
         */
            function (key, defValue) {
                if (defValue === void 0) {
                    defValue = null;
                }
                return core.isPresent(this.context) ? (core.isPresent(this.context.propertyForKey(key)) ?
                    this.context.propertyForKey(key) : defValue) : defValue;
            };
        /**
         * Retrieves active context's properties
         *
         */
        /**
         * Retrieves active context's properties
         *
         * @param {?} me
         * @param {?} key
         * @param {?=} defValue
         * @return {?}
         */
        MetaBaseComponent.prototype.aProperties = /**
         * Retrieves active context's properties
         *
         * @param {?} me
         * @param {?} key
         * @param {?=} defValue
         * @return {?}
         */
            function (me, key, defValue) {
                if (defValue === void 0) {
                    defValue = null;
                }
                /** @type {?} */
                var activeContext = this._metaContext.activeContext();
                return core.isPresent(me) ? me.propertyForKey(key) : defValue;
            };
        return MetaBaseComponent;
    }(components.BaseFormComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * This is a wrapper around FormtTable to render data based on current MetaContext.
     */
    var MetaFormTableComponent = (function (_super) {
        __extends(MetaFormTableComponent, _super);
        /**
         * Active zones passed to the FormTable.
         *
         * Note: I could not find better way without having this property. When using FormTable I dont
         * want to tell what zones are active. The form table should figure out byitself just from the
         * ng-contented sections.
         *
         * The other approach is the wrap these into component and probably better
         *
         *e.g.
         *
         * ```html
         *  <aw-form-table ...>
         *    <aw-form-zone name='top'>
         *        <aw-form-row>...</aw-form-row>
         *     <aw-form-zone>
         *
         *
         *    ...
         *  </aw-form-table ...>
         * ```
         *
         */
        function MetaFormTableComponent(_context, env) {
            var _this = _super.call(this, env, _context) || this;
            _this._context = _context;
            _this.env = env;
            return _this;
        }
        /**
         * @param {?} zone
         * @return {?}
         */
        MetaFormTableComponent.prototype.canShowZone = /**
         * @param {?} zone
         * @return {?}
         */
            function (zone) {
                return core.isPresent(this.fieldsByZone) && this.fieldsByZone.has(zone);
            };
        /**
         * @return {?}
         */
        MetaFormTableComponent.prototype.doUpdate = /**
         * @return {?}
         */
            function () {
                _super.prototype.doUpdate.call(this);
                this.fieldsByZone = this.context.propertyForKey(UIMeta.PropFieldsByZone);
                this.isFiveZoneLayout = this.context.propertyForKey(UIMeta.PropIsFieldsByZone);
                /** @type {?} */
                var bindings = this.context.propertyForKey(UIMeta.KeyBindings);
                if (core.isPresent(bindings)) {
                    this.showLabelsAboveControls = bindings.get('showLabelsAboveControls');
                    if (core.isBlank(this.showLabelsAboveControls)) {
                        this.showLabelsAboveControls = false;
                    }
                }
                this.initForm();
            };
        /**
         * @return {?}
         */
        MetaFormTableComponent.prototype.zLeft = /**
         * @return {?}
         */
            function () {
                return this.fieldsByZone.get(UIMeta.ZoneLeft);
            };
        /**
         * @return {?}
         */
        MetaFormTableComponent.prototype.zMiddle = /**
         * @return {?}
         */
            function () {
                return this.fieldsByZone.get(UIMeta.ZoneMiddle);
            };
        /**
         * @return {?}
         */
        MetaFormTableComponent.prototype.zRight = /**
         * @return {?}
         */
            function () {
                return this.fieldsByZone.get(UIMeta.ZoneRight);
            };
        /**
         * @return {?}
         */
        MetaFormTableComponent.prototype.zTop = /**
         * @return {?}
         */
            function () {
                return this.fieldsByZone.get(UIMeta.ZoneTop);
            };
        /**
         * @return {?}
         */
        MetaFormTableComponent.prototype.zBottom = /**
         * @return {?}
         */
            function () {
                return this.fieldsByZone.get(UIMeta.ZoneBottom);
            };
        /**
         * Need to initialize FormGroup with all the available fields based on the given object. Its
         * hard to manage a state where we dynamically render different number of fields per operation.
         *
         * *
         * @return {?}
         */
        MetaFormTableComponent.prototype.initForm = /**
         * Need to initialize FormGroup with all the available fields based on the given object. Its
         * hard to manage a state where we dynamically render different number of fields per operation.
         *
         * *
         * @return {?}
         */
            function () {
                var _this = this;
                if (core.isPresent(this.form)) {
                    this.form.editable = this.editable;
                }
                /** @type {?} */
                var obj = ((this.context)).object;
                if (Object.keys(this.formGroup.value).length !== Object.keys(obj).length) {
                    Object.keys(obj).forEach(function (key) {
                        _this.doRegister(key, obj[key]);
                    });
                }
            };
        MetaFormTableComponent.decorators = [
            { type: core$1.Component, args: [{
                        selector: 'm-form-table',
                        template: "<ng-template [ngIf]=\"isFiveZoneLayout\">\n\n    <aw-form-table #metaFormTable [editable]=\"editing\" [useFiveZone]=\"isFiveZoneLayout\"\n                   [omitPadding]=\"isNestedContext()\"\n                   [editabilityCheck]=\"false\"\n                   [labelsOnTop]=\"showLabelsAboveControls\">\n\n\n        <aw-top *ngIf=\"canShowZone('zTop')\">\n            <ng-template ngFor let-curentField [ngForOf]=\"zTop()\">\n                <m-context [field]=\"curentField\">\n                    <m-form-row [field]=\"curentField\" [editable]=\"editing\"\n                                [initialSize]=\"'x-large'\"></m-form-row>\n                </m-context>\n            </ng-template>\n        </aw-top>\n\n\n        <aw-left *ngIf=\"canShowZone('zLeft')\">\n\n            <ng-template ngFor let-curentField [ngForOf]=\"zLeft()\">\n                <m-context [field]=\"curentField\">\n                    <m-form-row [field]=\"curentField\" [editable]=\"editing\"></m-form-row>\n                </m-context>\n            </ng-template>\n        </aw-left>\n\n\n        <aw-middle *ngIf=\"canShowZone('zMiddle')\">\n            <ng-template ngFor let-curentField [ngForOf]=\"zMiddle()\">\n                <m-context [field]=\"curentField\">\n                    <m-form-row [field]=\"curentField\" [editable]=\"editing\"></m-form-row>\n                </m-context>\n            </ng-template>\n        </aw-middle>\n\n        <aw-right *ngIf=\"canShowZone('zRight')\">\n            <ng-template ngFor let-curentField [ngForOf]=\"zRight()\">\n                <m-context [field]=\"curentField\">\n                    <m-form-row [field]=\"curentField\" [editable]=\"editing\"></m-form-row>\n                </m-context>\n            </ng-template>\n        </aw-right>\n\n\n        <aw-bottom *ngIf=\"canShowZone('zBottom')\">\n            <ng-template ngFor let-curentField [ngForOf]=\"zBottom()\">\n                <m-context [field]=\"curentField\">\n                    <m-form-row [field]=\"curentField\" [editable]=\"editing\"\n                                [initialSize]=\"'x-large'\"></m-form-row>\n                </m-context>\n            </ng-template>\n        </aw-bottom>\n    </aw-form-table>\n</ng-template>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        MetaFormTableComponent.ctorParameters = function () {
            return [
                { type: MetaContextComponent, decorators: [{ type: core$1.Host }] },
                { type: core.Environment }
            ];
        };
        MetaFormTableComponent.propDecorators = {
            form: [{ type: core$1.ViewChild, args: ['metaFormTable',] }]
        };
        return MetaFormTableComponent;
    }(MetaBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Component responsible for rendering a row using MetaIncludeComponent.
     * What I am still not sure, if I want to use fully validation from MetaRule and if I cannot
     * leverage basic validation from angular.
     *
     * Meaning I might remove default valid::** rule from WidgetsRules and when its required insert
     * default Required validation from angular.
     *
     */
    var MetaFormRowComponent = (function (_super) {
        __extends(MetaFormRowComponent, _super);
        function MetaFormRowComponent(_metaContext, env) {
            var _this = _super.call(this, env, _metaContext) || this;
            _this._metaContext = _metaContext;
            _this.env = env;
            /**
             * There could be special cases when we are layout component that we want to extends the row
             * 100%.
             */
            _this.initialSize = 'medium';
            return _this;
        }
        /**
         * @return {?}
         */
        MetaFormRowComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                this.validators = this.createValidators();
            };
        /**
         * @param {?} key
         * @return {?}
         */
        MetaFormRowComponent.prototype.bindingBoolProperty = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                /** @type {?} */
                var bindings = this.context.propertyForKey(UIMeta.KeyBindings);
                if (core.isPresent(bindings) && bindings.has(key)) {
                    /** @type {?} */
                    var value = bindings.get(key);
                    return core.BooleanWrapper.boleanValue(value);
                }
                return false;
            };
        /**
         * @param {?} key
         * @return {?}
         */
        MetaFormRowComponent.prototype.bindingStringProperty = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                /** @type {?} */
                var bindings = this.context.propertyForKey(UIMeta.KeyBindings);
                if (core.isPresent(bindings) && bindings.has(key)) {
                    return bindings.get(key);
                }
                return null;
            };
        Object.defineProperty(MetaFormRowComponent.prototype, "size", {
            get: /**
             * @return {?}
             */ function () {
                /** @type {?} */
                var bindings = this.context.propertyForKey(UIMeta.KeyBindings);
                if (core.isPresent(bindings) && bindings.has('size')) {
                    return bindings.get('size');
                }
                return this.initialSize;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.initialSize = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates angular based Validator which for a current field executes validation rules real
         * time as use type. At the bottom of the file there is example of async validator
         *
         * @return {?}
         */
        MetaFormRowComponent.prototype.createValidators = /**
         * Creates angular based Validator which for a current field executes validation rules real
         * time as use type. At the bottom of the file there is example of async validator
         *
         * @return {?}
         */
            function () {
                /** @type {?} */
                var that = this;
                /** @type {?} */
                var metaValidator = function (control) {
                    if (core.isPresent(forms.Validators.required(control)) || !control.touched) {
                        return null;
                    }
                    /** @type {?} */
                    var errorMsg = UIMeta.validationError(that.context);
                    return core.isPresent(errorMsg) ? {
                        'metavalid': { 'msg': errorMsg }
                    } : null;
                };
                return [metaValidator];
            };
        /**
         * @return {?}
         */
        MetaFormRowComponent.prototype.isRequired = /**
         * @return {?}
         */
            function () {
                return (core.isPresent(this.editing) && this.context.booleanPropertyForKey('required', false));
            };
        MetaFormRowComponent.decorators = [
            { type: core$1.Component, args: [{
                        selector: 'm-form-row',
                        template: "<aw-form-row\n    [editable]=\"editable\"\n    [customValidators]=\"validators\"\n    [isNestedLayout]=\"properties('nestedLayout', false)\"\n    [size]=\"size\"\n    [hidden]=\"!properties('visible')\"\n    [styleClass]=\"bindingStringProperty('styleClass')\"\n    [name]=\"properties('field')\"\n    [required]=\"isRequired()\"\n    [label]=\"properties('label')\"\n    [noLabelLayout]=\"bindingBoolProperty('useNoLabelLayout')\">\n\n    <m-include-component></m-include-component>\n</aw-form-row>\n\n",
                        providers: [
                            { provide: components.FormRowComponent, useExisting: core$1.forwardRef(function () { return MetaFormRowComponent; }) }
                        ],
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        MetaFormRowComponent.ctorParameters = function () {
            return [
                { type: MetaContextComponent, decorators: [{ type: core$1.Host }] },
                { type: core.Environment }
            ];
        };
        MetaFormRowComponent.propDecorators = {
            field: [{ type: core$1.Input }],
            initialSize: [{ type: core$1.Input }]
        };
        return MetaFormRowComponent;
    }(MetaBaseComponent));
    /*

     return new Promise((resolve) => {
     setTimeout (()=>{

     let context: UIContext = <UIContext> this._contextSnapshot.hydrate();
     context.value = control.value;

     let errorMsg = UIMeta.validationError(context);


     if(isPresent(errorMsg)) {
     resolve({metavalid: {msg: errorMsg}});
     } else{
     resolve(null);
     }

     }, 700);
     });


     */
    // metaValid (): AsyncValidatorFn[]
    // {
    //     let metaValidator = (control: AbstractControl): {[key: string]: any} =>
    //     {
    //         return new Promise((resolve) =>
    //         {
    //             setTimeout(()=>
    //             {
    //                 let context: UIContext = <UIContext> this._contextSnapshot.hydrate();
    //                 context.value = control.value;
    //
    //                 let errorMsg = UIMeta.validationError(context);
    //
    //
    //                 if (isPresent(errorMsg)) {
    //                     resolve({metavalid: {msg: errorMsg}});
    //                 } else {
    //                     resolve(null);
    //                 }
    //
    //             } , 400);
    //         });
    //     };
    //     return [metaValidator];
    // }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * MetaContentPage  component is used from MetaRules and universal component rendering different
     * operation modes.
     *
     *
     */
    var MetaContentPageComponent = (function () {
        function MetaContentPageComponent(route, routingService) {
            this.route = route;
            this.routingService = routingService;
            this.newContext = true;
            this.isInspectAction = false;
            this.okLabel = 'Back';
        }
        /**
         * @return {?}
         */
        MetaContentPageComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.layout = this.route.snapshot.params['layout'];
                this.operation = this.route.snapshot.params['operation'];
                /** @type {?} */
                var url = '/' + this.route.snapshot.url[0].toString();
                if (this.routingService.stateCacheHistory.has(url)) {
                    this.object = this.routingService.stateCacheHistory.get(url);
                    this.objectName = UIMeta.defaultLabelForIdentifier(this.object.constructor.name);
                }
                /** @type {?} */
                var withBackAction = this.route.snapshot.params['b'];
                if (core.isPresent(withBackAction) && core.BooleanWrapper.isTrue(withBackAction)) {
                    this.isInspectAction = true;
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        MetaContentPageComponent.prototype.onBack = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.routingService.goBack();
            };
        MetaContentPageComponent.decorators = [
            { type: core$1.Component, args: [{
                        selector: 'm-content-page',
                        template: "<!-- TODO: impplement dynamic title based on the operation and object as well as updates buttons-->\n\n<m-context [pushNewContext]=\"newContext\" [object]=\"object\" [operation]=\"operation\"\n           [layout]=\"layout\">\n\n    <aw-basic-navigator (onOKAction)=\"onBack($event)\" [okActionLabel]=\"okLabel\"\n                        [showCancelButton]=\"!isInspectAction\">\n\n\n        <div class=\"page-container \">\n            <br/>\n            <h3>{{objectName}} details:</h3>\n\n            <m-include-component></m-include-component>\n        </div>\n    </aw-basic-navigator>\n\n</m-context>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        MetaContentPageComponent.ctorParameters = function () {
            return [
                { type: router.ActivatedRoute },
                { type: core.RoutingService }
            ];
        };
        return MetaContentPageComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * MetaLayout represent a high level rule that aggregates defined layout. When we iterate thru the
     * different layout we need to remember both current rendered context as well as ItemProperties.
     *
     *
     *
     */
    var /**
     * MetaLayout represent a high level rule that aggregates defined layout. When we iterate thru the
     * different layout we need to remember both current rendered context as well as ItemProperties.
     *
     *
     *
     */ MetaLayout = (function (_super) {
        __extends(MetaLayout, _super);
        function MetaLayout(_metaContext, env) {
            var _this = _super.call(this, env, _metaContext) || this;
            _this._metaContext = _metaContext;
            _this.env = env;
            /**
             * Layout definitions by its name
             *
             */
            _this.nameToLayout = new Map();
            /**
             * A map linking the name of the layout to the actual context. We need this when we need
             * to access current content.
             *
             */
            _this.contextMap = new Map();
            return _this;
        }
        /**
         * Can be called by m-content to @Output when context properties are pushed to stack
         *
         */
        /**
         * Can be called by m-content to \@Output when context properties are pushed to stack
         *
         * @param {?} layoutName
         * @return {?}
         */
        MetaLayout.prototype.afterContextSet = /**
         * Can be called by m-content to \@Output when context properties are pushed to stack
         *
         * @param {?} layoutName
         * @return {?}
         */
            function (layoutName) {
                this.layoutContext = this.activeContext;
                this.contextMap.set(layoutName, this.layoutContext.snapshot().hydrate(false));
            };
        /**
         * Can be called by m-content to @Output after context properties are pushed to stack
         *
         */
        /**
         * Can be called by m-content to \@Output after context properties are pushed to stack
         *
         * @param {?} layoutName
         * @return {?}
         */
        MetaLayout.prototype.beforeContextSet = /**
         * Can be called by m-content to \@Output after context properties are pushed to stack
         *
         * @param {?} layoutName
         * @return {?}
         */
            function (layoutName) {
                this.layout = this.nameToLayout.get(layoutName);
            };
        Object.defineProperty(MetaLayout.prototype, "activeContext", {
            get: /**
             * @return {?}
             */ function () {
                return this._metaContext.activeContext();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MetaLayout.prototype, "allLayouts", {
            /**
             * Retrieves all available and active layouts for zones defined by subclasses
             *
             */
            get: /**
             * Retrieves all available and active layouts for zones defined by subclasses
             *
             * @return {?}
             */ function () {
                var _this = this;
                if (core.isBlank(this._allLayouts)) {
                    /** @type {?} */
                    var meta = (this.activeContext.meta);
                    this._allLayouts = meta.itemList(this.activeContext, UIMeta.KeyLayout, this.zones());
                    this.nameToLayout.clear();
                    this._allLayouts.forEach(function (item) {
                        return _this.nameToLayout.set(item.name, item);
                    });
                }
                return this._allLayouts;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MetaLayout.prototype, "layoutsByZones", {
            /**
             * Retrieves all available and active layouts and aggregate them their name
             *
             */
            get: /**
             * Retrieves all available and active layouts and aggregate them their name
             *
             * @return {?}
             */ function () {
                if (core.isBlank(this._layoutsByZones)) {
                    /** @type {?} */
                    var meta = (this.activeContext.meta);
                    this._layoutsByZones = meta.itemsByZones(this.activeContext, UIMeta.KeyLayout, this.zones());
                }
                return this._layoutsByZones;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MetaLayout.prototype, "layout", {
            get: /**
             * @return {?}
             */ function () {
                return this._layout;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._layout = value;
                this._propertyMap = null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MetaLayout.prototype, "propertyMap", {
            // todo: should this be for current layout?
            get: /**
             * @return {?}
             */ function () {
                if (core.isBlank(this._propertyMap)) {
                    this.activeContext.push();
                    this._propertyMap = this.activeContext.allProperties();
                    this.activeContext.pop();
                }
                return this._propertyMap;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MetaLayout.prototype.label = /**
         * @return {?}
         */
            function () {
                return this.activeContext.resolveValue(this.propertyMap.get(UIMeta.KeyLabel));
            };
        /**
         * @param {?} name
         * @return {?}
         */
        MetaLayout.prototype.labelForContext = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                /** @type {?} */
                var context = this.contextMap.get(name);
                return _super.prototype.aProperties.call(this, context, UIMeta.KeyLabel);
            };
        /**
         * @return {?}
         */
        MetaLayout.prototype.zones = /**
         * @return {?}
         */
            function () {
                return UIMeta.ZonesTLRMB;
            };
        // remove this ugly solution once I figure out custom value accessor
        /**
         * @param {?} key
         * @param {?=} defValue
         * @return {?}
         */
        MetaLayout.prototype.properties = /**
         * @param {?} key
         * @param {?=} defValue
         * @return {?}
         */
            function (key, defValue) {
                if (defValue === void 0) {
                    defValue = null;
                }
                return core.isPresent(this.activeContext) ? this.activeContext.propertyForKey(key) : defValue;
            };
        /**
         * @param {?} name
         * @return {?}
         */
        MetaLayout.prototype.debugString = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                /** @type {?} */
                var context = this.contextMap.get(name);
                core.assert(core.isPresent(context), 'Trying to retrive debugString on non-existing context');
                return context.debugString();
            };
        /**
         * @return {?}
         */
        MetaLayout.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.layoutContext = null;
                this.contextMap.clear();
                this.contextMap = null;
            };
        return MetaLayout;
    }(MetaBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * MetaElementList is implementation of Stack Layout where the content is rendered as list (stacked)
     * You do not use this layout directly as it is instantiated dynamically using MetaIncludeComponent.
     *
     * For more detail please checkout WidgetRules.oss the part bellow where create new trait
     * that can be applied to any layout.
     *
     * ```
     *
     * layout {
     *
     * \@trait=Stack { visible:true; component:MetaElementListComponent }
     *
     * }
     *
     * ```
     *
     * Actual usage could be :
     *
     *
     * ```
     *  layout=Inspect2#Stack {
     * \@layout=First#Form {
     *           elementStyle:"padding-bottom:100px";
     *       }
     * \@layout=Second#Form { zonePath:Second; }
     *   }
     *
     *
     *
     *    class=User {
     *       zNone => *;
     *       zLeft => firstName => lastName => age => department;
     *       Second.zLeft => email;
     *
     *   }
     *
     * ```
     *
     */
    var MetaElementListComponent = (function (_super) {
        __extends(MetaElementListComponent, _super);
        function MetaElementListComponent(_metaContext, env, sanitizer) {
            var _this = _super.call(this, _metaContext, env) || this;
            _this._metaContext = _metaContext;
            _this.env = env;
            _this.sanitizer = sanitizer;
            return _this;
        }
        /**
         * @param {?} name
         * @return {?}
         */
        MetaElementListComponent.prototype.styleString = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                /** @type {?} */
                var lContext = this.contextMap.get(name);
                // return isPresent(lContext) && isPresent(lContext.propertyForKey('elementStyle')) ?
                //     this.sanitizer.bypassSecurityTrustStyle(lContext.propertyForKey('elementStyle')) :
                // null;
                return null;
            };
        /**
         * @param {?} name
         * @return {?}
         */
        MetaElementListComponent.prototype.classString = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                /** @type {?} */
                var lContext = this.contextMap.get(name);
                return core.isPresent(lContext) ? lContext.propertyForKey('elementClass') : null;
            };
        MetaElementListComponent.decorators = [
            { type: core$1.Component, args: [{
                        template: "<!--<b>MetaElementList: {{allLayouts}} </b>-->\n<!--<pre [innerHTML]=\"context.debugString()\"></pre>-->\n\n<ng-template ngFor [ngForOf]=\"allLayouts\" let-cLayout>\n\n    <m-context [layout]=\"cLayout.name\" (afterContextSet)=\"afterContextSet($event)\"\n               (beforeContextSet)=\"beforeContextSet($event)\">\n\n        <!--<b>MetaElementList: layout {{cLayout.name}} </b>-->\n        <!--<pre [innerHTML]=\"debugString(cLayout.name)\"></pre>-->\n\n        <div class=\"ui-g \">\n            <div class=\"ui-g-12 ui-g-nopad\" [ngClass]=\"classString(cLayout.name)\"\n                 [ngStyle]=\"styleString(cLayout.name)\"\n            >\n                <m-include-component></m-include-component>\n            </div>\n        </div>\n    </m-context>\n\n</ng-template>\n\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        MetaElementListComponent.ctorParameters = function () {
            return [
                { type: MetaContextComponent },
                { type: core.Environment },
                { type: platformBrowser.DomSanitizer }
            ];
        };
        return MetaElementListComponent;
    }(MetaLayout));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * MetaActionList provides a way how to attach actions to the screen. We can use \@action declaration
     * to define new action and their actionResults. actionResults is an expression that is executed
     * and either redirect you to different page or some logic is executed.
     *
     * Actions can be organized into action categories but if we do not provide any action category
     * default one is used.
     *
     * This way we define placeholder using a layout where actions are inserted
     *
     *
     * ```html
     *
     *    layout=Inspect2#Stack {
     * \@layout=MenuTop#ActionButtons {
     *       }
     *
     * \@layout=First#Form {
     *     }
     *
     * \@layout=Second#Form { zonePath:Second; }
     *  }
     *
     *
     * ```
     *
     * And this is how we define actions for current page/class/object
     *
     * ```
     * \@action=update {
     *             actionResults:${ object.firstName = "Mr." +  object.firstName };
     *             visible: ${ properties.editing };
     *    }
     *
     *
     * \@action=Save {
     *             label: "My Save";
     *             actionResults:${ object.firstName = "Ms." +  object.firstName };
     *             visible: ${ properties.editing };
     *             buttonStyle:info;
     *    }
     * ```
     *
     *
     *
     *
     *
     *
     *
     */
    var MetaActionListComponent = (function (_super) {
        __extends(MetaActionListComponent, _super);
        function MetaActionListComponent(_metaContext, env) {
            var _this = _super.call(this, env, _metaContext) || this;
            _this._metaContext = _metaContext;
            _this.env = env;
            /**
             *
             * Defines type of components that renders our actions. We have 3 types:
             * Buttons, Links and Popup Menu
             *
             */
            _this.renderAs = 'buttons';
            /**
             * Default style used for the buttons if none is specified
             *
             */
            _this.defaultStyle = 'info';
            /**
             * Tells us if the action should be rendered on the left or right side
             *
             */
            _this.align = 'right';
            /**
             * Map linking the name of the layout to the actual context. We need this when we need
             * to access current content.
             *
             */
            _this._contextMap = new Map();
            return _this;
        }
        // protected updateMeta(): any
        // {
        //     // todo: replace it with EventEmmitter.
        //     this._actionsByCategory = null;
        //     this._actionsByName = null;
        //     return super.updateMeta();
        // }
        /**
         * Read and stores current action categories available to current Context
         *
         */
        /**
         * Read and stores current action categories available to current Context
         *
         * @return {?}
         */
        MetaActionListComponent.prototype.actionCategories = /**
         * Read and stores current action categories available to current Context
         *
         * @return {?}
         */
            function () {
                var _this = this;
                if (core.isBlank(this._actionsByCategory) || core.isBlank(this._actionsByName)) {
                    if (core.isPresent(this.filterActions)) {
                        this.context.set('filterActions', this.filterActions);
                    }
                    /** @type {?} */
                    var meta = (this.context.meta);
                    this.context.push();
                    this.menuModel = [];
                    this._actionsByCategory = new Map();
                    this._actionsByName = new Map();
                    this.categories = meta.actionsByCategory(this.context, this._actionsByCategory, UIMeta.ActionZones);
                    this.context.pop();
                    this._actionsByCategory.forEach(function (v, k) {
                        v.forEach(function (item) { return _this._actionsByName.set(item.name, item); });
                    });
                }
                return this.categories;
            };
        /**
         *
         * Action belonging to current category..
         *
         */
        /**
         *
         * Action belonging to current category..
         *
         * @param {?} category
         * @return {?}
         */
        MetaActionListComponent.prototype.actions = /**
         *
         * Action belonging to current category..
         *
         * @param {?} category
         * @return {?}
         */
            function (category) {
                return this._actionsByCategory.get(category.name);
            };
        /**
         *
         * When action clicked this method delegates it into meta layer to be executed.
         *
         */
        /**
         *
         * When action clicked this method delegates it into meta layer to be executed.
         *
         * @param {?} action
         * @return {?}
         */
        MetaActionListComponent.prototype.actionClicked = /**
         *
         * When action clicked this method delegates it into meta layer to be executed.
         *
         * @param {?} action
         * @return {?}
         */
            function (action) {
                /** @type {?} */
                var context = this._contextMap.get(action);
                /** @type {?} */
                var meta = (context.meta);
                meta.fireActionFromProps(this._actionsByName.get(action), /** @type {?} */ (context));
            };
        /**
         * A hook used to store the most current context for each action.
         *
         */
        /**
         * A hook used to store the most current context for each action.
         *
         * @param {?} actionName
         * @return {?}
         */
        MetaActionListComponent.prototype.onAfterContextSet = /**
         * A hook used to store the most current context for each action.
         *
         * @param {?} actionName
         * @return {?}
         */
            function (actionName) {
                /** @type {?} */
                var aContext = this._metaContext.activeContext().snapshot().hydrate(false);
                this._contextMap.set(actionName, aContext);
                if (this.renderAs === 'menu') {
                    this.populateMenu(actionName);
                }
            };
        /**
         * A hook used to store the most current context for each action.
         *
         */
        /**
         * A hook used to store the most current context for each action.
         *
         * @param {?} change
         * @return {?}
         */
        MetaActionListComponent.prototype.onContextChanged = /**
         * A hook used to store the most current context for each action.
         *
         * @param {?} change
         * @return {?}
         */
            function (change) {
                console.log('Changed = ' + change);
            };
        /**
         * @param {?} actionName
         * @return {?}
         */
        MetaActionListComponent.prototype.label = /**
         * @param {?} actionName
         * @return {?}
         */
            function (actionName) {
                /** @type {?} */
                var context = this._contextMap.get(actionName);
                return _super.prototype.aProperties.call(this, context, UIMeta.KeyLabel);
            };
        /**
         * @param {?} actionName
         * @return {?}
         */
        MetaActionListComponent.prototype.isActionDisabled = /**
         * @param {?} actionName
         * @return {?}
         */
            function (actionName) {
                /** @type {?} */
                var context = this._contextMap.get(actionName);
                return core.isPresent(context) ? !context.booleanPropertyForKey('enabled', false) : true;
            };
        /**
         * @return {?}
         */
        MetaActionListComponent.prototype.alignRight = /**
         * @return {?}
         */
            function () {
                return this.align === 'right';
            };
        /**
         * @param {?} actionName
         * @return {?}
         */
        MetaActionListComponent.prototype.style = /**
         * @param {?} actionName
         * @return {?}
         */
            function (actionName) {
                /** @type {?} */
                var context = this._contextMap.get(actionName);
                /** @type {?} */
                var style = _super.prototype.aProperties.call(this, context, 'buttonStyle');
                return core.isPresent(style) ? style : this.defaultStyle;
            };
        /**
         * @param {?} actionName
         * @return {?}
         */
        MetaActionListComponent.prototype.populateMenu = /**
         * @param {?} actionName
         * @return {?}
         */
            function (actionName) {
                var _this = this;
                /** @type {?} */
                var label = this.label(actionName);
                /** @type {?} */
                var index = this.menuModel.findIndex(function (item) { return item.actionName === actionName; });
                /** @type {?} */
                var itemCommand = {
                    label: label,
                    actionName: actionName,
                    disabled: this.isActionDisabled(actionName),
                    command: function (event) {
                        _this.actionClicked(event.item.actionName);
                    }
                };
                if (index === -1) {
                    this.menuModel.push(itemCommand);
                }
                else {
                    this.menuModel[index] = itemCommand;
                }
            };
        MetaActionListComponent.decorators = [
            { type: core$1.Component, args: [{
                        template: "<span [class.u-flr]=\"alignRight()\">\n    <m-context *ngIf=\"renderAs === 'buttons'\">\n        <ng-template ngFor [ngForOf]=\"actionCategories()\" let-category>\n            <m-context [actionCategory]=\"category.name\">\n                <ng-template ngFor [ngForOf]=\"actions(category)\" let-action>\n                    <m-context [action]=\"action.name\"\n                               (onContextChanged)=\"onContextChanged($event)\"\n                               (afterContextSet)=\"onAfterContextSet($event)\">\n                        <aw-button (action)=\"actionClicked(action.name)\"\n                                   [style]=\"style(action.name)\"\n                                   [disabled]=\"isActionDisabled(action.name)\">\n\n                        {{ label(action.name) }}\n                        </aw-button>\n                    </m-context>\n                </ng-template>\n            </m-context>\n\n        </ng-template>\n    </m-context>\n\n    <m-context *ngIf=\"renderAs === 'links'\">\n        <ng-template ngFor [ngForOf]=\"actionCategories()\" let-category>\n            <m-context [actionCategory]=\"category.name\">\n                <ng-template ngFor [ngForOf]=\"actions(category)\" let-action>\n                    <m-context [action]=\"action.name\"\n                               (onContextChanged)=\"onContextChanged($event)\"\n                               (afterContextSet)=\"onAfterContextSet($event)\">\n                        <aw-button (action)=\"actionClicked(action.name)\"\n                                   [style]=\"'link'\"\n                                   [disabled]=\"isActionDisabled(action.name)\">\n\n                        {{ label(action.name) }}\n                        </aw-button>\n                    </m-context>\n                </ng-template>\n            </m-context>\n\n        </ng-template>\n    </m-context>\n\n    <m-context *ngIf=\"renderAs === 'menu'\">\n        <ng-template ngFor [ngForOf]=\"actionCategories()\" let-category>\n            <m-context [actionCategory]=\"category.name\">\n\n                <ng-template ngFor [ngForOf]=\"actions(category)\" let-action>\n                    <m-context [action]=\"action.name\"\n                               (onContextChanged)=\"onContextChanged($event)\"\n                               (afterContextSet)=\"onAfterContextSet($event)\">\n                    </m-context>\n                </ng-template>\n            </m-context>\n        </ng-template>\n\n        <p-menu #menu popup=\"popup\" [model]=\"menuModel\"></p-menu>\n\n        <!-- todo: extend button to support icons -->\n        <aw-button (action)=\"menu.toggle($event)\">\n            Actions\n        </aw-button>\n\n    </m-context>\n</span>\n\n\n\n\n\n",
                        styles: [".m-action-list{width:100%}"]
                    }] }
        ];
        /** @nocollapse */
        MetaActionListComponent.ctorParameters = function () {
            return [
                { type: MetaContextComponent },
                { type: core.Environment }
            ];
        };
        MetaActionListComponent.propDecorators = {
            renderAs: [{ type: core$1.Input }],
            defaultStyle: [{ type: core$1.Input }],
            align: [{ type: core$1.Input }],
            filterActions: [{ type: core$1.Input }]
        };
        return MetaActionListComponent;
    }(MetaBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Default homePage implementation for a Module. Just like on the example bellow when we define a
     * module without a homePage this MetaHomePageComponent will be used.
     *
     * ```
     *
     * \@module=Home {
     *       label:"My Home";
     *       pageTitle:"You are now on Homepage";
     *
     * \@layout=Today {
     *          after:zTop;
     *          label: "Sales Graph";
     *          component:SalesGraphComponent;
     *     }
     *  }
     *
     * ```
     * Or you can decide not to use this MetaHomePage and Provide your own e.g:
     *
     * ```
     * \@module=Products {
     *      label:"Products for Somethig";
     *      pageTitle:"You are now on Products";
     *      homePage:ProductContentComponent;
     *  }
     *
     * ```
     *
     *
     */
    var MetaHomePageComponent = (function (_super) {
        __extends(MetaHomePageComponent, _super);
        function MetaHomePageComponent(env, activatedRoute) {
            var _this = _super.call(this, env) || this;
            _this.env = env;
            _this.activatedRoute = activatedRoute;
            return _this;
        }
        /**
         *
         * This page is triggered by router and we expect a module to be passed in by routing
         * params
         *
         */
        /**
         *
         * This page is triggered by router and we expect a module to be passed in by routing
         * params
         *
         * @return {?}
         */
        MetaHomePageComponent.prototype.ngOnInit = /**
         *
         * This page is triggered by router and we expect a module to be passed in by routing
         * params
         *
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                /** @type {?} */
                var routeParams = this.activatedRoute.snapshot.params;
                if (core.isPresent(routeParams) && core.isPresent(routeParams[UIMeta.KeyModule])) {
                    this.module = routeParams[UIMeta.KeyModule];
                }
            };
        /**
         * @return {?}
         */
        MetaHomePageComponent.prototype.hasModule = /**
         * @return {?}
         */
            function () {
                return core.isPresent(this.module);
            };
        MetaHomePageComponent.decorators = [
            { type: core$1.Component, args: [{
                        selector: 'm-home-page',
                        template: "<div class=\"m-page\" *ngIf=\"hasModule()\">\n    <m-context [module]=\"module\">\n        <m-include-component></m-include-component>\n    </m-context>\n\n</div>\n\n\n",
                        styles: [".m-page{width:100%;margin:0 auto;padding:5px}.m-page:after{content:\".\";display:block;height:0;clear:both;visibility:hidden}.module-footer{clear:both}"]
                    }] }
        ];
        /** @nocollapse */
        MetaHomePageComponent.ctorParameters = function () {
            return [
                { type: core.Environment },
                { type: router.ActivatedRoute }
            ];
        };
        MetaHomePageComponent.propDecorators = {
            module: [{ type: core$1.Input }]
        };
        return MetaHomePageComponent;
    }(components.BaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** *
     *
     * Defines 4 sizes for the portlet size
     *
      @type {?} */
    var PortletSizes = {
        'small': 'ui-md-3',
        'medium': 'ui-md-4',
        'wide': 'ui-md-6',
        'large': 'ui-md-12'
    };
    /**
     * Simple Dashboard implementation for the homePage. Just like we support inside MetaFormTable
     * different zones and distribute fields to them, we do the same with defined layouts.
     *
     * This dashboard supports 3 zones.
     *
     *    zToc: This is the place where usually all the actions or 2nd level navigation will go
     *    zTop,zBottom: is where the portlets are rendered.
     *
     *
     * To distribute layouts to different zones :
     *
     * ```
     * \@module=Home {
     *           label:"My Home";
     *           pageTitle:"You are now on Homepage";
     *
     *
     * \@layout=Today {
     *              after:zTop;
     *              label: "Sales Graph";
     *              component:SalesGraphComponent;
     *
     *           }
     *
     * \@layout=Sport {
     *              after:Today;
     *              label: "Sport today!";
     *              component:StringComponent;
     *              bindings:{value:"The Texas Tech quarterback arrived at  " }
     *
     *           }
     *
     * ```
     *
     *  or Push actions to the zToc zone:
     *
     * ```
     * \@module=Home {
     *           label:"My Home";
     *           pageTitle:"You are now on Homepage";
     *
     *
     * \@layout=Today {
     *              after:zTop;
     *              label: "Sales Graph";
     *              component:SalesGraphComponent;
     *
     *           }
     *
     * \@layout=Actions#ActionLinks {
     *               label:$[a004]Actions;
     *                after:zToc;
     *            }
     *
     *
     * \@actionCategory=Create {
     * \@action=NewBlog#pageAction { pageName:blogPage;}
     * \@action=NewChart#pageAction { pageName:chartPage;}
     *           }
     *
     * }
     *
     *
     *
     */
    var MetaDashboardLayoutComponent = (function (_super) {
        __extends(MetaDashboardLayoutComponent, _super);
        function MetaDashboardLayoutComponent(metaContext, env) {
            var _this = _super.call(this, metaContext, env) || this;
            /**
             * Defines if sidebar is collapsed or expanded
             *
             */
            _this.activeMenu = false;
            /**
             * Current Module name
             *
             */
            _this.dashboardName = '';
            return _this;
        }
        /**
         * @return {?}
         */
        MetaDashboardLayoutComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                this.dashboardName = this.label();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        MetaDashboardLayoutComponent.prototype.toggleMenu = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.activeMenu = !this.activeMenu;
            };
        /**
         * @return {?}
         */
        MetaDashboardLayoutComponent.prototype.zones = /**
         * @return {?}
         */
            function () {
                return MetaDashboardLayoutComponent.ZonesTB;
            };
        /**
         * @return {?}
         */
        MetaDashboardLayoutComponent.prototype.topLayouts = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var tops = this.layoutsByZones.get(UIMeta.ZoneTop);
                return core.isPresent(tops) ? tops : [];
            };
        /**
         * @param {?} name
         * @return {?}
         */
        MetaDashboardLayoutComponent.prototype.portletWidth = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                /** @type {?} */
                var lContext = this.contextMap.get(name);
                /** @type {?} */
                var width = lContext.propertyForKey('portletWidth');
                return core.isPresent(width) && core.isPresent(PortletSizes[width]) ? PortletSizes[width] :
                    'ui-md-4';
            };
        /**
         * @return {?}
         */
        MetaDashboardLayoutComponent.prototype.bottomLayouts = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var bottom = this.layoutsByZones.get(UIMeta.ZoneBottom);
                return core.isPresent(bottom) ? bottom : [];
            };
        /**
         * @return {?}
         */
        MetaDashboardLayoutComponent.prototype.zTocLayouts = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var bottom = this.layoutsByZones.get(MetaDashboardLayoutComponent.ZoneToc);
                return core.isPresent(bottom) ? bottom : [];
            };
        /**
         * New defined zone for Actions
         *
         */
        MetaDashboardLayoutComponent.ZoneToc = 'zToc';
        MetaDashboardLayoutComponent.ZonesTB = [
            MetaDashboardLayoutComponent.ZoneToc, UIMeta.ZoneTop,
            UIMeta.ZoneBottom
        ];
        MetaDashboardLayoutComponent.decorators = [
            { type: core$1.Component, args: [{
                        template: "<div>\n    <span class=\"m-dashbord-name\">{{dashboardName}} </span>\n    <span class=\"m-dashbord-lbl\"> Dashboard</span>\n</div>\n\n\n<div id=\"m-toggle-bar\" *ngIf=\"zTocLayouts().length > 0\">\n    <aw-hyperlink (action)=\"toggleMenu($event)\" [size]=\"'large'\">\n        <i class=\"fa fa-bars\"></i>\n    </aw-hyperlink>\n</div>\n<div id=\"m-toc\" [class.active]=\"activeMenu\" *ngIf=\"zTocLayouts().length > 0\">\n    <div class=\"ui-g \">\n        <m-context *ngFor=\"let layout of zTocLayouts()\"\n                   [layout]=\"layout.name\" (afterContextSet)=\"afterContextSet($event)\"\n                   (beforeContextSet)=\"beforeContextSet($event)\">\n\n            <div class=\"ui-g-12 \" [ngClass]=\"portletWidth(layout.name)\">\n                <p-panel [header]=\"labelForContext(layout.name)\">\n                    <m-include-component></m-include-component>\n                </p-panel>\n            </div>\n        </m-context>\n    </div>\n</div>\n\n<div id=\"m-content\">\n    <div class=\"ui-g m-dashboard\">\n        <!-- top -->\n        <div class=\"ui-g-12\">\n            <div class=\"ui-g \">\n                <m-context *ngFor=\"let layout of topLayouts()\"\n                           [layout]=\"layout.name\" (afterContextSet)=\"afterContextSet($event)\"\n                           (beforeContextSet)=\"beforeContextSet($event)\">\n\n                    <div class=\"ui-g-12 \" [ngClass]=\"portletWidth(layout.name)\">\n                        <p-panel [header]=\"labelForContext(layout.name)\" [toggleable]=\"false\">\n                            <m-include-component></m-include-component>\n                        </p-panel>\n                    </div>\n                </m-context>\n            </div>\n        </div>\n\n        <!-- bottom -->\n        <div class=\"ui-g-12\">\n            <div class=\"ui-g \">\n                <m-context *ngFor=\"let layout of bottomLayouts()\"\n                           [layout]=\"layout.name\" (afterContextSet)=\"afterContextSet($event)\"\n                           (beforeContextSet)=\"beforeContextSet($event)\">\n\n                    <div class=\"ui-g-12 \" [ngClass]=\"portletWidth(layout.name)\">\n                        <p-panel [header]=\"labelForContext(layout.name)\" [toggleable]=\"false\">\n                            <m-include-component></m-include-component>\n                        </p-panel>\n                    </div>\n                </m-context>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n\n",
                        styles: ["#m-toc{position:relative;float:left;z-index:99;width:15em;padding:.5em;box-shadow:6px 0 10px -4px rgba(0,0,0,.3)}#m-content{float:left;padding-top:1em;padding-left:1em;height:auto}#m-toggle-bar{box-sizing:border-box;border-bottom:1px solid #dde3e6;overflow:hidden;display:none;border-radius:5px;padding:.5em;width:2em;height:2.3em}#m-toggle-bar:focus,#m-toggle-bar:hover{background-color:#ececec}#m-toggle-bar:after{content:'';display:block;clear:both}.m-dashbord-name{font-weight:600}.ui-g{display:block}@media screen and (max-width:64em){#m-toc{display:none;overflow-y:auto;z-index:999}#m-toc.active{display:block}#m-toggle-bar{display:block;position:relative;z-index:1000;margin-right:1em}}"]
                    }] }
        ];
        /** @nocollapse */
        MetaDashboardLayoutComponent.ctorParameters = function () {
            return [
                { type: MetaContextComponent },
                { type: core.Environment }
            ];
        };
        return MetaDashboardLayoutComponent;
    }(MetaLayout));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * MetaSection renders list of sections defined by \@trait inside WidgetsRules. It uses layouts to
     * structure the list.
     *
     * ```
     *  layout {
     * \@trait=Sections { visible:true; component:MetaSectionsComponent }
     *  }
     *
     * ```
     *
     * and can be used as :
     *
     * ```
     *     layout=RfxDetailLayout#Sections {
     *
     * \@layout=Header#Form {
     *             trait:labelsOnTop;
     *             zonePath:Header;
     *
     *             bindings: {
     *                 description:$object.header.description;
     *             }
     *         }
     * \@layout=LineItems {
     *             component:RfxLineItemsComponent;
     *             bindings: {
     *                 rfxEvent:$object;
     *             }
     *         }
     * \@layout=Participants {
     *             component:RfxParticipantsComponent;
     *             bindings: {
     *                 rfxEvent:$object;
     *             }
     *         }
     *     }
     *
     *
     *     class=RfxEventHeader {
     *         zNone => *;
     *         Header.zLeft => requester => region => needBy;
     *     }
     * ```
     * In above example we have first section with Form where RfxEventHeader sends its fields
     * and several other sections with custom component.
     *
     *
     */
    var MetaSectionsComponent = (function (_super) {
        __extends(MetaSectionsComponent, _super);
        function MetaSectionsComponent(_metaContext, env) {
            var _this = _super.call(this, _metaContext, env) || this;
            _this._metaContext = _metaContext;
            _this.env = env;
            _this.sectionOperations = {};
            _this.onCompleteSubscriptions = {};
            return _this;
        }
        /**
         * @return {?}
         */
        MetaSectionsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                _super.prototype.ngOnInit.call(this);
                this.allLayouts.forEach(function (value) {
                    _this.sectionOperations[value.name] = 'view';
                });
            };
        /**
         * @return {?}
         */
        MetaSectionsComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngDoCheck.call(this);
            };
        /**
         * @return {?}
         */
        MetaSectionsComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.sections = __spread(this.viewSections.toArray());
            };
        /**
         * Action handler to broadcast event outside so it can be handled by the application
         *
         */
        /**
         * Action handler to broadcast event outside so it can be handled by the application
         *
         * @param {?} name
         * @param {?} sectionIndex
         * @param {?} cnxName
         * @param {?} event
         * @return {?}
         */
        MetaSectionsComponent.prototype.onAction = /**
         * Action handler to broadcast event outside so it can be handled by the application
         *
         * @param {?} name
         * @param {?} sectionIndex
         * @param {?} cnxName
         * @param {?} event
         * @return {?}
         */
            function (name, sectionIndex, cnxName, event) {
                var _this = this;
                /** @type {?} */
                var section = this.sections[sectionIndex];
                if (this.env.hasValue('parent-cnx')) {
                    /** @type {?} */
                    var cnx = this.env.getValue('parent-cnx');
                    cnx.onAction.emit(new MetaUIActionEvent(section, name, cnxName, event));
                }
                if (name === 'onEdit' && section.editState && section.editMode === 'default') {
                    this.sectionOperations[cnxName] = 'edit';
                    if (core.isBlank(this.onCompleteSubscriptions[cnxName])) {
                        section.onEditingComplete.subscribe(function (value) {
                            return _this.sectionOperations[cnxName] = 'view';
                        });
                        this.onCompleteSubscriptions[cnxName] = section;
                    }
                }
            };
        /**
         *
         * Retrieves a property from the current context
         *
         */
        /**
         *
         * Retrieves a property from the current context
         *
         * @param {?} propName
         * @param {?} cnxName
         * @param {?} defaultVal
         * @return {?}
         */
        MetaSectionsComponent.prototype.sectionProp = /**
         *
         * Retrieves a property from the current context
         *
         * @param {?} propName
         * @param {?} cnxName
         * @param {?} defaultVal
         * @return {?}
         */
            function (propName, cnxName, defaultVal) {
                /** @type {?} */
                var lContext = this.contextMap.get(cnxName);
                return (core.isPresent(lContext) && core.isPresent(lContext.propertyForKey(propName))) ?
                    lContext.propertyForKey(propName) : defaultVal;
            };
        /**
         * @return {?}
         */
        MetaSectionsComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                var _this = this;
                _super.prototype.ngOnDestroy.call(this);
                this.allLayouts.forEach(function (value) {
                    if (core.isPresent(_this.onCompleteSubscriptions[value.name])) {
                        _this.onCompleteSubscriptions[value.name].onEditingComplete.unsubscribe();
                    }
                });
            };
        MetaSectionsComponent.decorators = [
            { type: core$1.Component, args: [{
                        template: "<div class=\"meta-sections\">\n\n    <m-context *ngFor=\"let layout of allLayouts; let i = index\" [layout]=\"layout.name\"\n               [operation]=\"sectionOperations[layout.name]\"\n               (afterContextSet)=\"afterContextSet($event)\"\n               (beforeContextSet)=\"beforeContextSet($event)\">\n\n        <aw-section [title]=\"sectionProp('title', layout.name, null)\"\n                    [description]=\"sectionProp('description', layout.name, null)\"\n                    [opened]=\"sectionProp('opened', layout.name, true)\"\n                    [actionIcon]=\"sectionProp('actionIcon', layout.name, 'icon-edit')\"\n                    [editable]=\"sectionProp('canEdit', layout.name, false)\"\n                    [editMode]=\"sectionProp('editMode', layout.name, 'default')\"\n                    [disableClose]=\"sectionProp('disableClose', layout.name, false)\"\n                    (onEdit)=\"onAction('onEdit', i, layout.name, $event)\"\n                    (onSaveAction)=\"onAction('onSaveAction', i, layout.name, $event)\"\n                    (onCancelAction)=\"onAction('onCancelAction', i, layout.name, $event)\">\n\n            <m-include-component></m-include-component>\n        </aw-section>\n\n    </m-context>\n</div>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        MetaSectionsComponent.ctorParameters = function () {
            return [
                { type: MetaContextComponent },
                { type: core.Environment }
            ];
        };
        MetaSectionsComponent.propDecorators = {
            viewSections: [{ type: core$1.ViewChildren, args: [components.SectionComponent,] }]
        };
        return MetaSectionsComponent;
    }(MetaLayout));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Just like MetaContentPage this components renders meta context details but embedded as some
     * inline component. Not a page with page level buttons
     *
     *
     * Todo: We dont really need this component we we in the future extends MetaIncludeComponent to
     * support awcontentElement:
     *
     * ```
     *  {
     *      component:MetaContextComponent;
     *      bindings: {
     *          object:$value;
     *          layout:Inspect;
     *          operation:view;
     *          awcontentElement:MetaIncludeComponnetDirective;
     *      }
     *
     *  }
     *
     *  ```
     *
     *  This would instantiate right meta context just like this class.
     */
    var MetaObjectDetailComponent = (function (_super) {
        __extends(MetaObjectDetailComponent, _super);
        function MetaObjectDetailComponent(env) {
            var _this = _super.call(this, env) || this;
            _this.env = env;
            /**
             * For the detail view we always use read only content
             */
            _this.operation = 'view';
            /**
             * Default layout
             *
             */
            _this.layout = 'Inspect';
            return _this;
        }
        /**
         * @return {?}
         */
        MetaObjectDetailComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (core.isBlank(this.object) || !core.isStringMap(this.object)) {
                    throw new Error('Cannot render primitive values as object details!');
                }
            };
        MetaObjectDetailComponent.decorators = [
            { type: core$1.Component, args: [{
                        selector: 'm-content-detail',
                        template: "<span class=\"w-obj-detail-lbl\" *ngIf=\"label\">{{label}}</span>\n<m-context [pushNewContext]=\"true\" [object]=\"object\" [operation]=\"operation\"\n           [layout]=\"layout\" group=\"ObjectDetail\">\n\n    <div class=\"w-object-detail\">\n        <m-include-component></m-include-component>\n    </div>\n\n</m-context>\n",
                        styles: [".w-obj-detail-lbl{color:#aeaeae;font-weight:700;border-bottom:1px solid #e9e9e9}"]
                    }] }
        ];
        /** @nocollapse */
        MetaObjectDetailComponent.ctorParameters = function () {
            return [
                { type: core.Environment }
            ];
        };
        MetaObjectDetailComponent.propDecorators = {
            object: [{ type: core$1.Input }],
            operation: [{ type: core$1.Input }],
            layout: [{ type: core$1.Input }],
            label: [{ type: core$1.Input }]
        };
        return MetaObjectDetailComponent;
    }(components.BaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var AWMetaLayoutModule = (function () {
        function AWMetaLayoutModule() {
        }
        AWMetaLayoutModule.decorators = [
            { type: core$1.NgModule, args: [{
                        declarations: [
                            MetaIncludeComponentDirective,
                            MetaFormComponent,
                            MetaFormTableComponent,
                            MetaFormRowComponent,
                            NoMetaComponent,
                            MetaContentPageComponent,
                            MetaElementListComponent,
                            MetaActionListComponent,
                            MetaHomePageComponent,
                            MetaDashboardLayoutComponent,
                            MetaSectionsComponent,
                            MetaObjectDetailComponent,
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            AWMetaCoreModule,
                            core.AribaCoreModule,
                            components.AribaComponentsModule
                        ],
                        entryComponents: [
                            MetaFormComponent,
                            MetaFormTableComponent,
                            MetaFormRowComponent,
                            NoMetaComponent,
                            MetaContentPageComponent,
                            MetaContentPageComponent,
                            MetaElementListComponent,
                            MetaActionListComponent,
                            MetaHomePageComponent,
                            MetaDashboardLayoutComponent,
                            MetaSectionsComponent,
                            MetaObjectDetailComponent
                        ],
                        exports: [
                            MetaIncludeComponentDirective,
                            MetaFormComponent,
                            MetaFormTableComponent,
                            MetaFormRowComponent,
                            NoMetaComponent,
                            MetaContentPageComponent,
                            MetaContentPageComponent,
                            MetaElementListComponent,
                            MetaActionListComponent,
                            MetaHomePageComponent,
                            MetaDashboardLayoutComponent,
                            MetaSectionsComponent,
                            forms.ReactiveFormsModule,
                            forms.FormsModule,
                            core.AribaCoreModule,
                            components.AribaComponentsModule,
                            MetaObjectDetailComponent
                        ],
                        providers: []
                    },] }
        ];
        return AWMetaLayoutModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    var sysMetaComponents = /*#__PURE__*/Object.freeze({
        ACTIVE_CNTX: ACTIVE_CNTX,
        MetaContextComponent: MetaContextComponent,
        MetaUIActionEvent: MetaUIActionEvent,
        AWMetaLayoutModule: AWMetaLayoutModule,
        MetaContentPageComponent: MetaContentPageComponent,
        MetaFormComponent: MetaFormComponent,
        MetaFormRowComponent: MetaFormRowComponent,
        MetaFormTableComponent: MetaFormTableComponent,
        NoMetaComponent: NoMetaComponent,
        MetaIncludeComponentDirective: MetaIncludeComponentDirective,
        MetaBaseComponent: MetaBaseComponent,
        MetaElementListComponent: MetaElementListComponent,
        MetaActionListComponent: MetaActionListComponent,
        MetaHomePageComponent: MetaHomePageComponent,
        MetaDashboardLayoutComponent: MetaDashboardLayoutComponent,
        MetaSectionsComponent: MetaSectionsComponent,
        MetaObjectDetailComponent: MetaObjectDetailComponent
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var routes = [
        { path: 'context', component: MetaContentPageComponent }
    ];
    var AribaMetaUIRoutingModule = (function () {
        function AribaMetaUIRoutingModule() {
        }
        AribaMetaUIRoutingModule.decorators = [
            { type: core$1.NgModule, args: [{
                        imports: [
                            router.RouterModule.forChild(routes)
                        ],
                        exports: [router.RouterModule],
                        providers: []
                    },] }
        ];
        return AribaMetaUIRoutingModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * This module contains everything needs to dynamically generated UI based on metaRules
     * Since we are using primeNG, check AribaComponent if its already imported so you dont have
     * import it again.
     *
     */
    var AribaMetaUIModule = (function () {
        function AribaMetaUIModule() {
        }
        AribaMetaUIModule.decorators = [
            { type: core$1.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            AribaMetaUIRoutingModule,
                            AWMetaCoreModule,
                            AWMetaLayoutModule
                        ],
                        exports: [
                            AWMetaCoreModule,
                            AWMetaLayoutModule
                        ],
                        providers: [
                            {
                                'provide': core$1.APP_INITIALIZER,
                                'useFactory': initMetaUI,
                                'deps': [core$1.Injector],
                                'multi': true,
                            },
                        ],
                    },] }
        ];
        /** @nocollapse */
        AribaMetaUIModule.ctorParameters = function () { return []; };
        return AribaMetaUIModule;
    }());
    /**
     *
     * Entry factory method that initialize The METAUI layer and here we load WidgetsRules.oss as well
     * as Persistence Rules.
     *
     * @param {?} injector
     * @return {?}
     */
    function initMetaUI(injector) {
        /** @type {?} */
        var initFce = function init(inj) {
            /** @type {?} */
            var promise = new Promise(function (resolve) {
                /** @type {?} */
                var metaUI = UIMeta.getInstance();
                // access services lazily when they are needed and initialized as workaround for
                // https://github.com/angular/angular/issues/16853
                metaUI.injector = inj;
                metaUI.registerLoader(new RuleLoaderService());
                metaUI.loadDefaultRuleFiles(sysMetaComponents);
                resolve(true);
            });
            return promise;
        };
        return initFce.bind(initFce, injector);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.Activation = Activation;
    exports.Assignment = Assignment;
    exports.AssignmentSnapshot = AssignmentSnapshot;
    exports.Context = Context;
    exports.DeferredAssignment = DeferredAssignment;
    exports.ObjectMetaContext = ObjectMetaContext;
    exports.PropertyAccessor = PropertyAccessor;
    exports.Snapshot = Snapshot;
    exports.StaticRec = StaticRec;
    exports.UIContext = UIContext;
    exports.ItemProperties = ItemProperties;
    exports.Match = Match;
    exports.MatchResult = MatchResult;
    exports.MatchWithUnion = MatchWithUnion;
    exports.UnionMatchResult = UnionMatchResult;
    exports.Meta = Meta;
    exports.KeyValueCount = KeyValueCount;
    exports.PropertyManager = PropertyManager;
    exports.OverrideValue = OverrideValue;
    exports.KeyData = KeyData;
    exports.PropertyMap = PropertyMap;
    exports.PropertyMergerDynamic = PropertyMergerDynamic;
    exports.PropertyMerger_Overwrite = PropertyMerger_Overwrite;
    exports.PropertyMerger_List = PropertyMerger_List;
    exports.PropertyMergerDeclareList = PropertyMergerDeclareList;
    exports.PropertyMergerDeclareListForTrait = PropertyMergerDeclareListForTrait;
    exports.PropertyMerger_And = PropertyMerger_And;
    exports.PropertyMerger_Valid = PropertyMerger_Valid;
    exports.RuleSet = RuleSet;
    exports.ValueMatches = ValueMatches;
    exports.MultiMatchValue = MultiMatchValue;
    exports.KeyValueTransformer_KeyPresent = KeyValueTransformer_KeyPresent;
    exports.isPropertyMapAwaking = isPropertyMapAwaking;
    exports.NestedMap = NestedMap;
    exports.FieldTypeIntrospectionMetaProvider = FieldTypeIntrospectionMetaProvider;
    exports.IntrospectionMetaProvider = IntrospectionMetaProvider;
    exports.ObjectMeta = ObjectMeta;
    exports.ObjectMetaPropertyMap = ObjectMetaPropertyMap;
    exports.OMPropertyMerger_Valid = OMPropertyMerger_Valid;
    exports.SystemPersistenceRules = SystemPersistenceRules;
    exports.DynamicPropertyValue = DynamicPropertyValue;
    exports.StaticallyResolvable = StaticallyResolvable;
    exports.StaticDynamicWrapper = StaticDynamicWrapper;
    exports.StaticallyResolvableWrapper = StaticallyResolvableWrapper;
    exports.ContextFieldPath = ContextFieldPath;
    exports.isDynamicSettable = isDynamicSettable;
    exports.Expr = Expr;
    exports.DeferredOperationChain = DeferredOperationChain;
    exports.ValueConverter = ValueConverter;
    exports.Rule = Rule;
    exports.RuleWrapper = RuleWrapper;
    exports.Selector = Selector;
    exports.RuleLoaderService = RuleLoaderService;
    exports.LocalizedString = LocalizedString;
    exports.UIMeta = UIMeta;
    exports.SystemRules = SystemRules;
    exports.ModuleInfo = ModuleInfo;
    exports.AWMetaCoreModule = AWMetaCoreModule;
    exports.MetaUIActionEvent = MetaUIActionEvent;
    exports.MetaContentPageComponent = MetaContentPageComponent;
    exports.MetaFormComponent = MetaFormComponent;
    exports.MetaFormRowComponent = MetaFormRowComponent;
    exports.MetaFormTableComponent = MetaFormTableComponent;
    exports.NoMetaComponent = NoMetaComponent;
    exports.MetaIncludeComponentDirective = MetaIncludeComponentDirective;
    exports.MetaBaseComponent = MetaBaseComponent;
    exports.MetaElementListComponent = MetaElementListComponent;
    exports.MetaHomePageComponent = MetaHomePageComponent;
    exports.AWMetaLayoutModule = AWMetaLayoutModule;
    exports.MetaSectionsComponent = MetaSectionsComponent;
    exports.MetaObjectDetailComponent = MetaObjectDetailComponent;
    exports.MetaContextComponent = MetaContextComponent;
    exports.AribaMetaUIModule = AribaMetaUIModule;
    exports.initMetaUI = initMetaUI;
    exports.AribaMetaUIRoutingModule = AribaMetaUIRoutingModule;
    exports.ɵa = MetaActionListComponent;
    exports.ɵb = MetaDashboardLayoutComponent;
    exports.ɵc = MetaLayout;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJpYmF1aS1tZXRhdWkudW1kLmpzLm1hcCIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIm5nOi8vQGFyaWJhdWkvbWV0YXVpL2NvcmUvbWF0Y2gudHMiLCJuZzovL0BhcmliYXVpL21ldGF1aS9jb3JlL25lc3RlZC1tYXAudHMiLCJuZzovL0BhcmliYXVpL21ldGF1aS9jb3JlL3Byb3BlcnR5LXZhbHVlLnRzIiwibmc6Ly9AYXJpYmF1aS9tZXRhdWkvY29yZS9jb250ZXh0LnRzIiwibmc6Ly9AYXJpYmF1aS9tZXRhdWkvY29yZS9ydWxlLnRzIiwibmc6Ly9AYXJpYmF1aS9tZXRhdWkvY29yZS9tZXRhLnRzIiwibmc6Ly9AYXJpYmF1aS9tZXRhdWkvY29yZS9pdGVtLXByb3BlcnRpZXMudHMiLCJuZzovL0BhcmliYXVpL21ldGF1aS9jb3JlL29iamVjdC1tZXRhLnRzIiwibmc6Ly9AYXJpYmF1aS9tZXRhdWkvY29yZS93aWRnZXRzLXJ1bGVzLnRzIiwibmc6Ly9AYXJpYmF1aS9tZXRhdWkvY29yZS9wZXJzaXN0ZW5jZS1ydWxlcy50cyIsIm5nOi8vQGFyaWJhdWkvbWV0YXVpL2NvcmUvdWltZXRhLnRzIiwibmc6Ly9AYXJpYmF1aS9tZXRhdWkvY29yZS9tZXRhLWNvbnRleHQvbWV0YS1jb250ZXh0LmNvbXBvbmVudC50cyIsIm5nOi8vQGFyaWJhdWkvbWV0YXVpL2NvcmUvbWV0YS1jb3JlLm1vZHVsZS50cyIsIm5nOi8vQGFyaWJhdWkvbWV0YXVpL2NvcmUvcnVsZS1sb2FkZXIuc2VydmljZS50cyIsIm5nOi8vQGFyaWJhdWkvbWV0YXVpL2xheW91dC9uby1tZXRhL25vLW1ldGEuY29tcG9uZW50LnRzIiwibmc6Ly9AYXJpYmF1aS9tZXRhdWkvbGF5b3V0L21ldGEtaW5jbHVkZS5kaXJlY3RpdmUudHMiLCJuZzovL0BhcmliYXVpL21ldGF1aS9sYXlvdXQvbWV0YS1mb3JtL21ldGEtZm9ybS5jb21wb25lbnQudHMiLCJuZzovL0BhcmliYXVpL21ldGF1aS9sYXlvdXQvbWV0YS5iYXNlLmNvbXBvbmVudC50cyIsIm5nOi8vQGFyaWJhdWkvbWV0YXVpL2xheW91dC9tZXRhLWZvcm0vbWV0YS1mb3JtLXRhYmxlL21ldGEtZm9ybS10YWJsZS5jb21wb25lbnQudHMiLCJuZzovL0BhcmliYXVpL21ldGF1aS9sYXlvdXQvbWV0YS1mb3JtL21ldGEtZm9ybS1yb3cvbWV0YS1mb3JtLXJvdy5jb21wb25lbnQudHMiLCJuZzovL0BhcmliYXVpL21ldGF1aS9sYXlvdXQvbWV0YS1jb250ZW50LXBhZ2UvbWV0YS1jb250ZW50LXBhZ2UuY29tcG9uZW50LnRzIiwibmc6Ly9AYXJpYmF1aS9tZXRhdWkvbGF5b3V0L21ldGEtbGF5b3V0LnRzIiwibmc6Ly9AYXJpYmF1aS9tZXRhdWkvbGF5b3V0L21ldGEtZWxlbWVudC1saXN0L21ldGEtZWxlbWVudC1saXN0LmNvbXBvbmVudC50cyIsIm5nOi8vQGFyaWJhdWkvbWV0YXVpL2xheW91dC9tZXRhLWFjdGlvbi1saXN0L21ldGEtYWN0aW9uLWxpc3QuY29tcG9uZW50LnRzIiwibmc6Ly9AYXJpYmF1aS9tZXRhdWkvbGF5b3V0L21ldGEtaG9tZS1wYWdlL21ldGEtaG9tZS5wYWdlLmNvbXBvbmVudC50cyIsIm5nOi8vQGFyaWJhdWkvbWV0YXVpL2xheW91dC9tZXRhLWRhc2hib2FyZC9tZXRhZGFzaGJvYXJkLWxheW91dC5jb21wb25lbnQudHMiLCJuZzovL0BhcmliYXVpL21ldGF1aS9sYXlvdXQvbWV0YS1zZWN0aW9uL21ldGEtc2VjdGlvbnMuY29tcG9uZW50LnRzIiwibmc6Ly9AYXJpYmF1aS9tZXRhdWkvbGF5b3V0L21ldGEtb2JqZWN0LWRldGFpbC9tZXRhLW9iamVjdC1kZXRhaWwuY29tcG9uZW50LnRzIiwibmc6Ly9AYXJpYmF1aS9tZXRhdWkvbGF5b3V0L21ldGEtbGF5b3V0Lm1vZHVsZS50cyIsIm5nOi8vQGFyaWJhdWkvbWV0YXVpL2FyaWJhLW1ldGF1aS1yb3V0aW5nLm1vZHVsZS50cyIsIm5nOi8vQGFyaWJhdWkvbWV0YXVpL2FyaWJhLm1ldGF1aS5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIGlmIChlLmluZGV4T2YocFtpXSkgPCAwKVxyXG4gICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0LmRlZmF1bHQgPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBTQVAgQXJpYmFcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiBCYXNlZCBvbiBvcmlnaW5hbCB3b3JrOiBNZXRhVUk6IENyYWlnIEZlZGVyaWdoaSAoMjAwOClcbiAqXG4gKi9cbmltcG9ydCB7XG4gICAgYXNzZXJ0LFxuICAgIGNyYzMyLFxuICAgIGhhc2hDb2RlLFxuICAgIGlzQXJyYXksXG4gICAgaXNCbGFuayxcbiAgICBpc1ByZXNlbnQsXG4gICAgcHJpbnQsXG4gICAgc2hpZnRMZWZ0LFxuICAgIFN0cmluZ0pvaW5lclxufSBmcm9tICdAYXJpYmF1aS9jb3JlJztcbmltcG9ydCB7UnVsZX0gZnJvbSAnLi9ydWxlJztcbmltcG9ydCB7S2V5RGF0YSwgTWF0Y2hWYWx1ZSwgTWV0YSwgUHJvcGVydHlNYXB9IGZyb20gJy4vbWV0YSc7XG5cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgc2V0IG9mIG1hdGNoaW5nIHJ1bGVzIHJlc3VsdGluZyBmcm9tIGxvb2tpbmcgdXAgYSBzZXQgb2Yga2V5L3ZhbHVlc1xuICogIGFnYWluc3QgdGhlIE1ldGEgcnVsZSBiYXNlLlxuICpcbiAqIEluc3RhbmNlcyBvZiB0aGUgTWF0Y2ggc3VwZXJjbGFzcyBhcmUgc2ltcGx5IGltbXV0YWJsZSBzbmFwc2hvdHMgb2YgcHJldmlvdXMgbWF0Y2hlc1xuICogKHVzZWQgYXMga2V5cyBpbiBNYXRjaCAtPiBQcm9wZXJ0aWVzIGxvb2t1cCBjYWNoZXMpLlxuICogVGhlIG1vcmUgbWVhdHkgY2xhc3MgaXMgaXRzIHN0YXRpYyBpbm5lciBzdWJjbGFzcywgTWF0Y2guTWF0Y2hSZXN1bHQuXG4gKi9cbmV4cG9ydCBjbGFzcyBNYXRjaFxue1xuICAgIHN0YXRpYyByZWFkb25seSBFbXB0eU1hdGNoQXJyYXk6IG51bWJlcltdID0gW107XG5cbiAgICBzdGF0aWMgX0RlYnVnX0VsZW1lbnRQcm9jZXNzQ291bnQ6IG51bWJlciA9IDA7XG5cblxuICAgIC8vIFdvcmQgbGlzdHMgYXJlIGludCBhcnJheXMgd2l0aCB0aGUgZmlyc3QgZWxlbWVudCBob2xkaW5nIHRoZSBsZW5ndGhcbiAgICBzdGF0aWMgYWRkSW50KGludEFycjogbnVtYmVyW10sIHZhbDogbnVtYmVyKTogbnVtYmVyW11cbiAgICB7XG4gICAgICAgIGlmIChpc0JsYW5rKGludEFycikpIHtcbiAgICAgICAgICAgIGxldCByOiBBcnJheTxudW1iZXI+ID0gbmV3IEFycmF5PG51bWJlcj4oNCk7XG4gICAgICAgICAgICByWzBdID0gMTtcbiAgICAgICAgICAgIHJbMV0gPSB2YWw7XG5cbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9XG4gICAgICAgIGxldCBuZXdQb3M6IG51bWJlciA9IGludEFyclswXTtcbiAgICAgICAgaWYgKGludEFycltuZXdQb3MrK10gPT09IHZhbCkge1xuICAgICAgICAgICAgcmV0dXJuIGludEFycjtcbiAgICAgICAgfSAgLy8gYWxyZWFkeSBoZXJlLi4uXG5cbiAgICAgICAgaWYgKG5ld1BvcyA+PSBpbnRBcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICBsZXQgYTogQXJyYXk8bnVtYmVyPiA9IG5ldyBBcnJheTxudW1iZXI+KG5ld1BvcyAqIDIpO1xuICAgICAgICAgICAgYSA9IGludEFyci5zbGljZSgwLCBuZXdQb3MpO1xuICAgICAgICAgICAgaW50QXJyID0gYTtcbiAgICAgICAgfVxuICAgICAgICBpbnRBcnJbbmV3UG9zXSA9IHZhbDtcbiAgICAgICAgaW50QXJyWzBdID0gbmV3UG9zO1xuICAgICAgICByZXR1cm4gaW50QXJyO1xuICAgIH1cblxuICAgIC8vIG9ubHkgcnVsZXMgdGhhdCB1c2Ugb25seSB0aGUgYWN0aXZhdGVkIChxdWVyaWVkKSBrZXlzXG4gICAgc3RhdGljIGZpbHRlck11c3RVc2UocnVsZXM6IEFycmF5PFJ1bGU+LCBhcnI6IG51bWJlcltdLCB1c2VzTWFzazogbnVtYmVyKTogbnVtYmVyW11cbiAgICB7XG4gICAgICAgIGlmIChpc0JsYW5rKGFycikpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXN1bHQ6IG51bWJlcltdO1xuICAgICAgICBsZXQgY291bnQgPSBhcnJbMF07XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgbGV0IHIgPSBhcnJbaSArIDFdO1xuICAgICAgICAgICAgbGV0IHJ1bGUgPSBydWxlc1tyXTtcbiAgICAgICAgICAgIGlmICgocnVsZS5rZXlNYXRjaGVzTWFzayAmIHVzZXNNYXNrKSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IE1hdGNoLmFkZEludChyZXN1bHQsIHIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBJbnRlcnNlY3RzIHR3byBydWxldmVjcy4gIFRoaXMgaXMgbm90IGEgdHJhZGl0aW9uYWwgaW50ZXJzZWN0aW9uIHdoZXJlIG9ubHkgaXRlbXMgaW4gYm90aFxuICAgICAqIGlucHV0cyBhcmUgaW5jbHVkZWQgaW4gdGhlIHJlc3VsdDogd2Ugb25seSBpbnRlcnNlY3QgcnVsZXMgdGhhdCBtYXRjaCBvbiBjb21tb24ga2V5cztcbiAgICAgKiBvdGhlcnMgYXJlIHVuaW9uZWQuXG4gICAgICpcbiAgICAgKiBGb3IgaW5zdGFuY2UsIHNheSB3ZSBoYXZlIHRoZSBmb2xsb3dpbmcgaW5wdXRzOlxuICAgICAqICAgICAgYTogIFttYXRjaGVkIG9uOiBjbGFzcywgbGF5b3V0XSAgKGNsYXNzPUZvbywgbGF5b3V0PUluc3BlY3QpXG4gICAgICogICAgICAgICAgMSkgY2xhc3M9Rm9vIGxheW91dD1JbnNwZWN0IHsgLi4uIH1cbiAgICAgKiAgICAgICAgICAyKSBjbGFzcz1Gb28gb3BlcmF0aW9uPWVkaXQgeyAuLi4gfVxuICAgICAqICAgICAgICAgIDMpIGxheW91dD1JbnNwZWN0IG9wZXJhdGlvbj12aWV3IHsgLi4uIH1cbiAgICAgKlxuICAgICAqICAgICAgYjogIFttYXRjaGVkIG9uOiBvcGVyYXRpb25dICAob3BlcmF0aW9uPXZpZXcpXG4gICAgICogICAgICAgICAgMykgbGF5b3V0PUluc3BlY3Qgb3BlcmF0aW9uPXZpZXcgeyAuLi4gfVxuICAgICAqICAgICAgICAgIDQpIG9wZXJhdGlvbj12aWV3IHR5cGU9U3RyaW5nIHsgLi4uIH1cbiAgICAgKiAgICAgICAgICA1KSBvcGVyYXRpb249dmlldyBsYXlvdXQ9VGFicyB7IC4uLiB9XG4gICAgICpcbiAgICAgKiBUaGUgcmVzdWx0IHNob3VsZCBiZTogMSwgMywgNFxuICAgICAqIEkuZS46IGl0ZW1zIHRoYXQgYXBwZWFyIGluIGJvdGggKCMzIGFib3ZlKSBhcmUgaW5jbHVkZWQsIGFzIGFyZSBpdGVtcyB0aGF0IGFwcGVhciBpbiBqdXN0XG4gICAgICogb25lLFxuICAgICAqICpidXQgZG9uJ3QgbWF0Y2ggb24gdGhlIGtleXMgaW4gdGhlIG90aGVyKiAoIzEgYW5kICM0IGFib3ZlKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhbGxSdWxlcyB0aGUgZnVsbCBydWxlIGJhc2VcbiAgICAgKiBAcGFyYW0gYSBmaXJzdCB2ZWN0b3Igb2YgcnVsZSBpbmRleGVzXG4gICAgICogQHBhcmFtIGIgc2Vjb25kIHZlY3RvciBvZiBydWxlIGluZGV4ZXNcbiAgICAgKiBAcGFyYW0gYU1hc2sgbWFzayBpbmRpY2F0aW5nIHRoZSBrZXlzIGFnYWluc3Qgd2hpY2ggdGhlIGZpcnN0IHJ1bGUgdmVjdG9ycyBpdGVtcyBoYXZlXG4gICAgICogICAgIGFscmVhZHkgYmVlbiBtYXRjaGVkXG4gICAgICogQHBhcmFtIGJNYXNrIG1hc2sgaW5kaWNhdGluZyB0aGUga2V5cyBhZ2FpbnN0IHdoaWNoIHRoZSBzZWNvbmQgcnVsZSB2ZWN0b3JzIGl0ZW1zIGhhdmVcbiAgICAgKiAgICAgYWxyZWFkeSBiZWVuIG1hdGNoZWRcbiAgICAgKiBAcmV0dXJuIHJ1bGUgdmVjdG9yIGZvciB0aGUgbWF0Y2hlc1xuICAgICAqL1xuICAgIHN0YXRpYyBpbnRlcnNlY3QoYWxsUnVsZXM6IEFycmF5PFJ1bGU+LCBhOiBudW1iZXJbXSwgYjogbnVtYmVyW10sIGFNYXNrOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICBiTWFzazogbnVtYmVyKTogbnVtYmVyW11cbiAgICB7XG5cbiAgICAgICAgaWYgKGlzQmxhbmsoYSkpIHtcbiAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXN1bHQ6IG51bWJlcltdO1xuICAgICAgICBsZXQgaUEgPSAxLCBzaXplQSA9IGlzUHJlc2VudChhWzBdKSA/IGFbMF0gOiAwLCBpQiA9IDEsIHNpemVCID0gaXNQcmVzZW50KGJbMF0pID8gYlswXSA6IDA7XG4gICAgICAgIE1hdGNoLl9EZWJ1Z19FbGVtZW50UHJvY2Vzc0NvdW50ICs9IHNpemVBICsgc2l6ZUI7XG5cbiAgICAgICAgd2hpbGUgKGlBIDw9IHNpemVBIHx8IGlCIDw9IHNpemVCKSB7XG4gICAgICAgICAgICBsZXQgaUFNYXNrID0gKGlBIDw9IHNpemVBKSA/IGFsbFJ1bGVzW2FbaUFdXS5rZXlJbmRleGVkTWFzayA6IDA7XG4gICAgICAgICAgICBsZXQgaUJNYXNrID0gKGlCIDw9IHNpemVCKSA/IGFsbFJ1bGVzW2JbaUJdXS5rZXlJbmRleGVkTWFzayA6IDA7XG4gICAgICAgICAgICBsZXQgYyA9IChpQSA+IHNpemVBID8gMSA6IChpQiA+IHNpemVCID8gLTEgOiAoYVtpQV0gLSBiW2lCXSkpKTtcblxuICAgICAgICAgICAgaWYgKGMgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBNYXRjaC5hZGRJbnQocmVzdWx0LCBhW2lBXSk7XG4gICAgICAgICAgICAgICAgaUErKztcbiAgICAgICAgICAgICAgICBpQisrO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGMgPCAwKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgQSBub3QgaW4gQiwgYnV0IEEgZG9lc24ndCBmaWx0ZXIgb24gQidzIG1hc2ssIHRoZW4gYWRkIGl0XG4gICAgICAgICAgICAgICAgaWYgKChpQU1hc2sgJiBiTWFzaykgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gTWF0Y2guYWRkSW50KHJlc3VsdCwgYVtpQV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpQSsrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoKGlCTWFzayAmIGFNYXNrKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBNYXRjaC5hZGRJbnQocmVzdWx0LCBiW2lCXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlCKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBzdGF0aWMgdW5pb24oYTogbnVtYmVyW10sIGI6IG51bWJlcltdKTogbnVtYmVyW11cbiAgICB7XG4gICAgICAgIGlmIChpc0JsYW5rKGEpKSB7XG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNCbGFuayhiKSkge1xuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNpemVBID0gYVswXSwgc2l6ZUIgPSBiWzBdO1xuICAgICAgICBpZiAoc2l6ZUEgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaXplQiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cbiAgICAgICAgTWF0Y2guX0RlYnVnX0VsZW1lbnRQcm9jZXNzQ291bnQgKz0gKHNpemVBICsgc2l6ZUIpO1xuXG4gICAgICAgIGxldCByZXN1bHQ6IG51bWJlcltdO1xuICAgICAgICBsZXQgaUEgPSAxLCB2QSA9IGFbMV0sIGlCID0gMSwgdkIgPSBiWzFdO1xuXG5cbiAgICAgICAgd2hpbGUgKGlBIDw9IHNpemVBIHx8IGlCIDw9IHNpemVCKSB7XG4gICAgICAgICAgICBsZXQgYzogbnVtYmVyID0gdkEgLSB2QjtcbiAgICAgICAgICAgIHJlc3VsdCA9IE1hdGNoLmFkZEludChyZXN1bHQsICgoYyA8PSAwKSA/IHZBIDogdkIpKTtcbiAgICAgICAgICAgIGlmIChjIDw9IDApIHtcbiAgICAgICAgICAgICAgICBpQSsrO1xuICAgICAgICAgICAgICAgIHZBID0gKGlBIDw9IHNpemVBKSA/IGFbaUFdIDogTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjID49IDApIHtcbiAgICAgICAgICAgICAgICBpQisrO1xuICAgICAgICAgICAgICAgIHZCID0gKGlCIDw9IHNpemVCKSA/IGJbaUJdIDogTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHN0YXRpYyBfYXJyYXlFcShhOiBudW1iZXJbXSwgYjogbnVtYmVyW10pOiBib29sZWFuXG4gICAge1xuICAgICAgICBpZiAoYSA9PT0gYikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGEgPT09IG51bGwgfHwgYiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjb3VudCA9IGFbMF07XG4gICAgICAgIGlmIChjb3VudCAhPT0gYlswXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IGNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBfbWF0Y2hlczogbnVtYmVyW10sIHB1YmxpYyBfa2V5c01hdGNoZWRNYXNrOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgcHVibGljICBfbWF0Y2hQYXRoQ1JDOiBudW1iZXIgPSAwKVxuICAgIHtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEZpbHRlciBhIHBhcnRpYWxseSBtYXRjaGVkIHNldCBvZiBydWxlcyBkb3duIHRvIHRoZSBhY3R1YWwgbWF0Y2hlcy5cbiAgICAgKiBUaGUgaW5wdXQgc2V0IG9mIHJ1bGVzLCBtYXRjaGVzQXJyLCBpcyBiYXNlZCBvbiBhICpwYXJ0aWFsKiBtYXRjaCwgYW5kIHNvIGluY2x1ZGVzIHJ1bGVzXG4gICAgICogdGhhdCB3ZXJlIHRvdWNoZWQgYnkgc29tZSBvZiB0aGUgcXVlcmllZCBrZXlzLCBidXQgdGhhdCBtYXkgYWxzbyByZXF1aXJlICphZGRpdGlvbmFsKiBrZXlzXG4gICAgICogdGhhdCB3ZSBoYXZlIG5vdCBtYXRjaGVkIG9uIC0tIHRoZXNlIG11c3Qgbm93IGJlIHJlbW92ZWQuIEFsc28sIHdoZW4gJ3BhcnRpYWwgaW5kZXhpbmcnLFxuICAgICAqIHJ1bGVzIGFyZSBpbmRleGVkIG9uIGEgc3Vic2V0IG9mIHRoZWlyIGtleXMsIHNvIG1hdGNoZXNBcnIgd2lsbCBjb250YWluIHJ1bGVzIHRoYXQgbmVlZCB0b1xuICAgICAqIGJlIGV2YWx1YXRlZCBhZ2FpbnN0IHRob3NlIE1hdGNoVmFsdWVzIHVwb24gd2hpY2ggdGhleSB3ZXJlIG5vdCBpbmRleGVkIChhbmQgdGhlcmVmb3JlIG5vdFxuICAgICAqIGludGVyc2VjdGVkIC8gZmlsdGVyZWQgb24gaW4gdGhlIGxvb2t1cCBwcm9jZXNzKS5cbiAgICAgKi9cbiAgICBmaWx0ZXIoYWxsUnVsZXM6IEFycmF5PFJ1bGU+LCBtYXhSdWxlOiBudW1iZXIsIG1hdGNoZXNBcnI6IG51bWJlcltdLCBxdWVyaWVkTWFzazogbnVtYmVyLFxuICAgICAgICAgICBtYXRjaEFycmF5OiBNYXRjaFZhbHVlW10pOiBudW1iZXJbXVxuICAgIHtcbiAgICAgICAgaWYgKGlzQmxhbmsobWF0Y2hlc0FycikpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIHByaW50KCdcXG4jIyBGaWx0ZXJpbmcgbWF0Y2hpbmc6ICcgKyBtYXRjaGVzQXJyWzBdICsgJywgUXVlcmllZCBNYXNrOiAnICsgcXVlcmllZE1hc2spO1xuICAgICAgICAvL1xuICAgICAgICAvLyBmb3IgKGxldCBpID0gMTsgaSA8PSBtYXRjaGVzQXJyWzBdOyBpKyspIHtcbiAgICAgICAgLy8gICAgIHByaW50KCcjIyAnICsgbWF0Y2hlc0FycltpXSArICcpOiAnICsgYWxsUnVsZXNbbWF0Y2hlc0FycltpXV0udG9TdHJpbmcoKSk7XG4gICAgICAgIC8vIH1cblxuICAgICAgICBsZXQgcmVzdWx0OiBudW1iZXJbXTtcbiAgICAgICAgbGV0IGNvdW50ID0gbWF0Y2hlc0FyclswXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGxldCByID0gbWF0Y2hlc0FycltpICsgMV07XG4gICAgICAgICAgICBpZiAociA+PSBtYXhSdWxlKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcnVsZTogUnVsZSA9IGFsbFJ1bGVzW3JdO1xuXG5cbiAgICAgICAgICAgIGlmIChydWxlLmRpc2FibGVkKCkgfHwgKHJ1bGUua2V5QW50aU1hc2sgJiBxdWVyaWVkTWFzaykgIT09IDApIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTXVzdCBoYXZlIG1hdGNoZWQgb24gKGFjdGl2YXRlKSBhbGwgbWF0Y2gga2V5cyBmb3IgdGhpcyBydWxlLCAqYW5kKlxuICAgICAgICAgICAgLy8gaWYgaGF2ZSBhbnkgbm9uLWluZGV4ZWQgcnVsZXMsIG5lZWQgdG8gY2hlY2sgbWF0Y2ggb24gdGhvc2VcbiAgICAgICAgICAgIGlmICgoKHJ1bGUua2V5TWF0Y2hlc01hc2sgJiB+cXVlcmllZE1hc2spID09PSAwKSAmJlxuICAgICAgICAgICAgICAgICgocnVsZS5rZXlNYXRjaGVzTWFzayA9PT0gcnVsZS5rZXlJbmRleGVkTWFzaylcbiAgICAgICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgIChpc1ByZXNlbnQobWF0Y2hBcnJheSkgJiYgcnVsZS5tYXRjaGVzKG1hdGNoQXJyYXkpKSkpIHtcblxuICAgICAgICAgICAgICAgIGlmIChNZXRhLl9EZWJ1Z0RvdWJsZUNoZWNrTWF0Y2hlcyAmJiAhKG1hdGNoQXJyYXkgIT0gbnVsbCAmJiBydWxlLm1hdGNoZXMoXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaEFycmF5KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCAnSW5jb25zaXN0ZW50IChuZWdhdGl2ZSkgbWF0Y2ggb24gcnVsZTogJyArIHJ1bGUpO1xuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gTWF0Y2guYWRkSW50KHJlc3VsdCwgcik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKE1ldGEuX0RlYnVnRG91YmxlQ2hlY2tNYXRjaGVzICYmIChtYXRjaEFycmF5ICE9IG51bGwgJiYgcnVsZS5tYXRjaGVzKFxuICAgICAgICAgICAgICAgICAgICBtYXRjaEFycmF5KSkpIHtcbiAgICAgICAgICAgICAgICAvLyBBc3NlcnQudGhhdChmYWxzZSwgJ0luY29uc2lzdGVudCAocG9zaXRpdmUpIG1hdGNoIG9uIHJ1bGU6ICVzJywgcnVsZSk7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIChpc1ByZXNlbnQocmVzdWx0KSAmJiByZXN1bHQubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyAgICAgcHJpbnQoJ1xcblxcblxcbiAjIyMjIEZpbHRlcmluZyBSRVNVTFQ6ICcgKyByZXN1bHRbMF0pO1xuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gcmVzdWx0WzBdOyBpKyspIHtcbiAgICAgICAgLy8gICAgICAgICBwcmludCgnIyMgJyArIHJlc3VsdFtpXSArICcpOiAnICsgYWxsUnVsZXNbcmVzdWx0W2ldXS50b1N0cmluZygpKTtcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuXG4gICAgaGFzaENvZGUoKTogbnVtYmVyXG4gICAge1xuICAgICAgICBsZXQgcmV0ID0gdGhpcy5fa2V5c01hdGNoZWRNYXNrICogMzEgKyB0aGlzLl9tYXRjaFBhdGhDUkM7XG4gICAgICAgIGlmIChpc1ByZXNlbnQodGhpcy5fbWF0Y2hlcykpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBjID0gdGhpcy5fbWF0Y2hlc1swXTsgaSA8IGM7IGkrKykge1xuICAgICAgICAgICAgICAgIHJldCA9IGNyYzMyKHJldCwgdGhpcy5fbWF0Y2hlc1tpICsgMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG5cbiAgICBnZXQga2V5c01hdGNoZWRNYXNrKCk6IG51bWJlclxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2tleXNNYXRjaGVkTWFzaztcbiAgICB9XG5cbiAgICBlcXVhbHNUbyhvOiBhbnkpOiBib29sZWFuXG4gICAge1xuICAgICAgICByZXR1cm4gKChvIGluc3RhbmNlb2YgTWF0Y2gpICYmIHRoaXMuX2tleXNNYXRjaGVkTWFzayA9PT0gby5fa2V5c01hdGNoZWRNYXNrKSAmJlxuICAgICAgICAgICAgdGhpcy5fbWF0Y2hQYXRoQ1JDID09PSBvLl9tYXRjaFBhdGhDUkMgJiZcbiAgICAgICAgICAgIE1hdGNoLl9hcnJheUVxKHRoaXMuX21hdGNoZXMsIG8uX21hdGNoZXMpO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKClcbiAgICB7XG4gICAgICAgIGxldCBidWYgPSBuZXcgU3RyaW5nSm9pbmVyKFtdKTtcbiAgICAgICAgYnVmLmFkZCgnX21hdGNoZXMnKTtcbiAgICAgICAgYnVmLmFkZCgoaXNQcmVzZW50KHRoaXMuX21hdGNoZXMpID8gdGhpcy5fbWF0Y2hlcy5sZW5ndGggOiAwKSArICcnKTtcbiAgICAgICAgYnVmLmFkZCgnX2tleXNNYXRjaGVkTWFzaycpO1xuICAgICAgICBidWYuYWRkKHRoaXMuX2tleXNNYXRjaGVkTWFzayArICcnKTtcbiAgICAgICAgYnVmLmFkZCgnX2tleXNNYXRjaGVkTWFzaycpO1xuICAgICAgICBidWYuYWRkKHRoaXMuX21hdGNoUGF0aENSQyArICcnKTtcblxuICAgICAgICBidWYuYWRkKCdoYXNoY29kZScpO1xuICAgICAgICBidWYuYWRkKHRoaXMuaGFzaENvZGUoKSArICcnKTtcblxuICAgICAgICByZXR1cm4gYnVmLnRvU3RyaW5nKCk7XG4gICAgfVxuXG59XG4vKipcbiAqICBBbiBNYXRjaCB3aGljaCBpbmNsdWRlcyBhIFVuaW9uTWF0Y2hSZXN1bHQgcGFydCAod2hpY2ggaXMgdXNlZCBieSBDb250ZXh0IHRvXG4gKiByZXByZXNlbnQgdGhlIHNldCBvZiBvdmVycmlkZGVuIGtleS92YWx1ZXMgdXAgdGhlIHN0YWNrKVxuICovXG5leHBvcnQgY2xhc3MgTWF0Y2hXaXRoVW5pb24gZXh0ZW5kcyBNYXRjaFxue1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIF9tYXRjaGVzOiBudW1iZXJbXSwgcHVibGljICBfa2V5c01hdGNoZWRNYXNrOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgcHVibGljICBfbWF0Y2hQYXRoQ1JDOiBudW1iZXIgPSAwLFxuICAgICAgICAgICAgICAgIHB1YmxpYyBfb3ZlclVuaW9uTWF0Y2g6IFVuaW9uTWF0Y2hSZXN1bHQpXG4gICAge1xuICAgICAgICBzdXBlcihfbWF0Y2hlcywgX2tleXNNYXRjaGVkTWFzaywgX21hdGNoUGF0aENSQyk7XG4gICAgfVxuXG5cbiAgICBlcXVhbHNUbyhvOiBhbnkpOiBib29sZWFuXG4gICAge1xuICAgICAgICByZXR1cm4gc3VwZXIuZXF1YWxzVG8obykgJiYgKFxuICAgICAgICAgICAgKHRoaXMuX292ZXJVbmlvbk1hdGNoID09PSBvLl9vdmVyVW5pb25NYXRjaCkgfHxcbiAgICAgICAgICAgICgoaXNQcmVzZW50KHRoaXMuX292ZXJVbmlvbk1hdGNoKSkgJiYgaXNQcmVzZW50KFxuICAgICAgICAgICAgICAgIG8uX292ZXJVbmlvbk1hdGNoKSAmJiB0aGlzLl9vdmVyVW5pb25NYXRjaC5lcXVhbHNUbyhcbiAgICAgICAgICAgICAgICBvLl9vdmVyVW5pb25NYXRjaCkpKTtcbiAgICB9XG5cbn1cblxuLyoqXG4gKiAgTWF0Y2hSZXN1bHQgcmVwcmVzZW50cyB0aGUgcmVzdWx0IG9mIGNvbXB1dGluZyB0aGUgc2V0IG9mIG1hdGNoaW5nIHJ1bGVzXG4gKiAgYmFzZWQgb24gdGhlIGtleS92YWx1ZSBvbiB0aGlzIGluc3RhbmNlLCBhbmQgdGhlIG90aGVyIGtleS92YWx1ZSBwYWlyc1xuICogb24gaXRzIHByZWRlY2Vzc29yIGNoYWluLiAgSS5lLiB0byBmaW5kIHRoZSBtYXRjaGluZyBydWxlcyBmb3IgdGhlIGNvbnRleHQga2V5c1xuICoge29wZXJhdGlvbj1lZGl0OyBsYXlvdXQ9SW5zcGVjdDsgY2xhc3M9Rm9vfSwgZmlyc3QgYSBNYXRjaFJlc3VsdCBpcyBjcmVhdGVkIGZvclxuICogJ29wZXJhdGlvbj1lZGl0JyBhbmQgcGFzc2VkIGFzIHRoZSAncHJldicgdG8gdGhlIGNyZWF0aW9uIG9mIGFub3RoZXIgZm9yICdsYXlvdXQ9SW5zcGVjdCcsXG4gKiBhbmQgc28gb24uICBJbiB0aGlzIHdheSB0aGUgTWF0Y2hSZXN1bHRzIGZvcm0gYSAqKHNoYXJhYmxlKSBwYXJ0aWFsLW1hdGNoIHRyZWUuKlxuICpcbiAqIFRoZSBhYmlsaXR5IHRvIHJlc3VsdCBwcmV2aW91cyBwYXJ0aWFsIG1hdGNoICdwYXRocycgaXMgYW4gaW1wb3J0YW50IG9wdGltaXphdGlvbjpcbiAqIHRoZSBwcmltYXJ5IGNsaWVudCBvZiBNYXRjaFJlc3VsdCAoYW5kIG9mIHJ1bGUgbWF0Y2hpbmcgaW4gZ2VuZXJhbCkgaXMgdGhlIENvbnRleHQsIHdoZW4gZWFjaFxuICogYXNzaWdubWVudCBwdXNoZXMgYSByZWNvcmQgb24gYSBzdGFjayB0aGF0IChyb3VnaGx5KSBleHRlbmRzIHRoZSBNYXRjaCBmcm9tIHRoZSBwcmV2aW91c1xuICogYXNzaWdubWVudC4gIEJ5IGNhY2hpbmcgTWF0Y2hSZXN1bHQgaW5zdGFuY2VzIG9uIHRoZSBfQXNzaWdubWVudCByZWNvcmRzLCBtYXRjaGluZyBpcyBsaW1pdGVkXG4gKiAgdG8gdGhlICppbmNyZW1lbnRhbCogbWF0Y2hpbmcgb24ganVzdCB0aGUgbmV3IGFzc2lnbm1lbnQsIG5vdCBhIGZ1bGwgbWF0Y2ggb24gYWxsIGtleXMgaW4gdGhlXG4gKiAgY29udGV4dC5cbiAqXG4gKiBGdXJ0aGVyLCBhIE1hdGNoUmVzdWx0IGNhY2hlcyB0aGUgKnByb3BlcnR5IG1hcCogcmVzdWx0aW5nIGZyb20gdGhlIGFwcGxpY2F0aW9uIG9mIHRoZSBydWxlc1xuICogIHRoYXQgaXQgbWF0Y2hlcy4gIEJ5IGNhY2hpbmcgTWF0Y2hSZXN1bHQgb2JqZWN0cyAoYW5kIGNhY2hpbmcgdGhlIG1hcCBmcm9tXG4gKiAgUnVsZSB2ZWN0b3IgKEFLQSBNYXRjaCkgLT4gTWF0Y2hSZXN1bHQgLT4gUHJvcGVydHlNYXApLCByZWR1ZGFudCBydWxlIGFwcGxpY2F0aW9uIChhbmQgY3JlYXRpb25cbiAqIG9mIGFkZGl0aW9uYWwgcHJvcGVydHkgbWFwcykgaXMgYXZvaWRlZC5cbiAqL1xuICAgIC8vIHRvZG86IGltcGxlbWVudCB0b1N0cmluZyBmb3IgdGhlIERpY3RvbmFyeSBhcyB0aGlzIGlzIHVzZWQgYXMgYSBrZXlcbmV4cG9ydCBjbGFzcyBNYXRjaFJlc3VsdCBleHRlbmRzIE1hdGNoV2l0aFVuaW9uXG57XG5cbiAgICBwcml2YXRlIF9tZXRhR2VuZXJhdGlvbjogbnVtYmVyID0gMDtcbiAgICBwcml2YXRlIF9wcm9wZXJ0aWVzOiBQcm9wZXJ0eU1hcDtcblxuICAgIC8vIE1ldGEgbWV0YSwgTWV0YS5LZXlEYXRhIGtleURhdGEsIE9iamVjdCB2YWx1ZSwgTWF0Y2hSZXN1bHQgcHJldilcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9tZXRhOiBNZXRhLCBwcml2YXRlICBfa2V5RGF0YTogS2V5RGF0YSwgcHJpdmF0ZSBfdmFsdWU6IGFueSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIF9wcmV2TWF0Y2g6IE1hdGNoUmVzdWx0KVxuICAgIHtcbiAgICAgICAgc3VwZXIobnVsbCwgbnVsbCwgMCwgKF9wcmV2TWF0Y2ggIT0gbnVsbCkgPyBfcHJldk1hdGNoLl9vdmVyVW5pb25NYXRjaCA6IG51bGwpO1xuICAgICAgICB0aGlzLl9pbml0TWF0Y2goKTtcblxuICAgIH1cblxuICAgIHNldE92ZXJyaWRlc01hdGNoKG92ZXI6IFVuaW9uTWF0Y2hSZXN1bHQpXG4gICAge1xuICAgICAgICB0aGlzLl9vdmVyVW5pb25NYXRjaCA9IG92ZXI7XG4gICAgfVxuXG4gICAgbWF0Y2hlcygpOiBudW1iZXJbXVxuICAgIHtcbiAgICAgICAgdGhpcy5faW52YWxpZGF0ZUlmU3RhbGUoKTtcbiAgICAgICAgaWYgKGlzQmxhbmsodGhpcy5fbWF0Y2hlcykpIHtcbiAgICAgICAgICAgIHRoaXMuX2luaXRNYXRjaCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXRjaGVzO1xuICAgIH1cblxuICAgIGZpbHRlclJlc3VsdCgpOiBudW1iZXJbXVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKHRoaXMuX21ldGEuX3J1bGVzLCB0aGlzLl9tZXRhLl9ydWxlQ291bnQsIHRoaXMubWF0Y2hlcygpLFxuICAgICAgICAgICAgdGhpcy5fa2V5c01hdGNoZWRNYXNrLCBudWxsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaWxsIGluIG1hdGNoQXJyYXkgd2l0aCBNYXRjaFZhbHVlcyB0byB1c2UgaW4gU2VsZWN0b3IgbWF0Y2hpbmdcbiAgICAgKiBAcGFyYW0gbWF0Y2hBcnJheVxuICAgICAqL1xuICAgIGluaXRNYXRjaFZhbHVlcyhtYXRjaEFycmF5OiBNYXRjaFZhbHVlW10pOiB2b2lkXG4gICAge1xuICAgICAgICBpZiAoaXNQcmVzZW50KHRoaXMuX3ByZXZNYXRjaCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByZXZNYXRjaC5pbml0TWF0Y2hWYWx1ZXMobWF0Y2hBcnJheSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJlc2VudCh0aGlzLl9vdmVyVW5pb25NYXRjaCkpIHtcbiAgICAgICAgICAgIHRoaXMuX292ZXJVbmlvbk1hdGNoLmluaXRNYXRjaFZhbHVlcyhtYXRjaEFycmF5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9tZXRhLm1hdGNoQXJyYXlBc3NpZ24obWF0Y2hBcnJheSwgdGhpcy5fa2V5RGF0YSxcbiAgICAgICAgICAgIHRoaXMuX2tleURhdGEubWF0Y2hWYWx1ZSh0aGlzLl92YWx1ZSkpO1xuICAgIH1cblxuXG4gICAgZmlsdGVyZWRNYXRjaGVzKCk6IG51bWJlcltdXG4gICAge1xuICAgICAgICAvLyBzaG91bGRuJ3QgdGhpcyBiZSBjYWNoZWQ/IT9cbiAgICAgICAgbGV0IG1hdGNoZXM6IG51bWJlcltdID0gdGhpcy5tYXRjaGVzKCk7XG4gICAgICAgIGxldCBrZXlzTWF0Y2hlZE1hc2sgPSB0aGlzLl9rZXlzTWF0Y2hlZE1hc2sgfCAoaXNQcmVzZW50KFxuICAgICAgICAgICAgICAgIHRoaXMuX292ZXJVbmlvbk1hdGNoKSA/IHRoaXMuX292ZXJVbmlvbk1hdGNoLl9rZXlzTWF0Y2hlZE1hc2sgOiAwKTtcblxuICAgICAgICBsZXQgb3ZlcnJpZGVNYXRjaGVzOiBudW1iZXJbXTtcblxuICAgICAgICBpZiAoaXNQcmVzZW50KHRoaXMuX292ZXJVbmlvbk1hdGNoKSAmJiBpc1ByZXNlbnQoXG4gICAgICAgICAgICAgICAgKG92ZXJyaWRlTWF0Y2hlcyA9IHRoaXMuX292ZXJVbmlvbk1hdGNoLm1hdGNoZXMoKSkpKSB7XG4gICAgICAgICAgICBpZiAoaXNCbGFuayhtYXRjaGVzKSkge1xuICAgICAgICAgICAgICAgIG1hdGNoZXMgPSBvdmVycmlkZU1hdGNoZXM7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hlcyA9IE1hdGNoLmludGVyc2VjdCh0aGlzLl9tZXRhLl9ydWxlcywgbWF0Y2hlcywgb3ZlcnJpZGVNYXRjaGVzLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlzTWF0Y2hlZE1hc2ssXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX292ZXJVbmlvbk1hdGNoLl9rZXlzTWF0Y2hlZE1hc2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG1hdGNoQXJyYXk6IE1hdGNoVmFsdWVbXTtcbiAgICAgICAgaWYgKE1ldGEuX1VzZVBhcnRpYWxJbmRleGluZykge1xuICAgICAgICAgICAgbWF0Y2hBcnJheSA9IHRoaXMuX21ldGEubmV3TWF0Y2hBcnJheSgpO1xuICAgICAgICAgICAgdGhpcy5pbml0TWF0Y2hWYWx1ZXMobWF0Y2hBcnJheSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXIodGhpcy5fbWV0YS5fcnVsZXMsIHRoaXMuX21ldGEuX3J1bGVDb3VudCwgbWF0Y2hlcywga2V5c01hdGNoZWRNYXNrLFxuICAgICAgICAgICAgbWF0Y2hBcnJheSk7XG4gICAgfVxuXG5cbiAgICB2YWx1ZUZvcktleShrZXk6IHN0cmluZyk6IGFueVxuICAgIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9rZXlEYXRhLl9rZXkgPT09IGtleSkgPyB0aGlzLl92YWx1ZSA6XG4gICAgICAgICAgICAoaXNQcmVzZW50KHRoaXMuX3ByZXZNYXRjaCkgPyB0aGlzLl9wcmV2TWF0Y2gudmFsdWVGb3JLZXkoa2V5KSA6IG51bGwpO1xuICAgIH1cblxuICAgIGltbXV0YWJsZUNvcHkoKTogTWF0Y2hcbiAgICB7XG4gICAgICAgIHRoaXMuX2ludmFsaWRhdGVJZlN0YWxlKCk7XG4gICAgICAgIHJldHVybiBuZXcgTWF0Y2hXaXRoVW5pb24odGhpcy5tYXRjaGVzKCksIHRoaXMuX2tleXNNYXRjaGVkTWFzaywgdGhpcy5fbWF0Y2hQYXRoQ1JDLFxuICAgICAgICAgICAgdGhpcy5fb3ZlclVuaW9uTWF0Y2gpO1xuICAgIH1cblxuICAgIF9pbnZhbGlkYXRlSWZTdGFsZSgpOiB2b2lkXG4gICAge1xuICAgICAgICBpZiAodGhpcy5fbWV0YUdlbmVyYXRpb24gPCB0aGlzLl9tZXRhLnJ1bGVTZXRHZW5lcmF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9pbml0TWF0Y2goKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBqb2luKGE6IG51bWJlcltdLCBiOiBudW1iZXJbXSwgYU1hc2s6IG51bWJlciwgYk1hc2s6IG51bWJlcik6IG51bWJlcltdXG4gICAge1xuICAgICAgICByZXR1cm4gTWF0Y2guaW50ZXJzZWN0KHRoaXMuX21ldGEuX3J1bGVzLCBhLCBiLCBhTWFzaywgYk1hc2spO1xuICAgIH1cblxuXG4gICAgcHJvdGVjdGVkIF9pbml0TWF0Y2goKTogdm9pZFxuICAgIHtcbiAgICAgICAgbGV0IGtleU1hc2s6IG51bWJlciA9IHNoaWZ0TGVmdCgxLCB0aGlzLl9rZXlEYXRhLl9pZCk7XG5cbiAgICAgICAgLy8gZ2V0IHZlYyBmb3IgdGhpcyBrZXkvdmFsdWUgLS0gaWYgdmFsdWUgaXMgbGlzdCwgY29tcHV0ZSB0aGUgdW5pb25cbiAgICAgICAgbGV0IG5ld0FycjogbnVtYmVyW107XG4gICAgICAgIGlmIChpc0FycmF5KHRoaXMuX3ZhbHVlKSkge1xuXG4gICAgICAgICAgICBmb3IgKGxldCB2IG9mIHRoaXMuX3ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgbGV0IGE6IG51bWJlcltdID0gdGhpcy5fa2V5RGF0YS5sb29rdXAodGhpcy5fbWV0YSwgdik7XG4gICAgICAgICAgICAgICAgbmV3QXJyID0gTWF0Y2gudW5pb24oYSwgbmV3QXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld0FyciA9IHRoaXMuX2tleURhdGEubG9va3VwKHRoaXMuX21ldGEsIHRoaXMuX3ZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwcmV2TWF0Y2hlczogbnVtYmVyW10gPSAoaXNCbGFuayh0aGlzLl9wcmV2TWF0Y2gpKSA/IG51bGwgOiB0aGlzLl9wcmV2TWF0Y2gubWF0Y2hlcygpO1xuXG4gICAgICAgIHRoaXMuX2tleXNNYXRjaGVkTWFzayA9IChpc0JsYW5rKFxuICAgICAgICAgICAgdGhpcy5fcHJldk1hdGNoKSkgPyBrZXlNYXNrIDogKGtleU1hc2sgfCB0aGlzLl9wcmV2TWF0Y2guX2tleXNNYXRjaGVkTWFzayk7XG4gICAgICAgIGlmIChpc0JsYW5rKHByZXZNYXRjaGVzKSkge1xuICAgICAgICAgICAgdGhpcy5fbWF0Y2hlcyA9IG5ld0FycjtcbiAgICAgICAgICAgIC8vIFRvZG86IG5vdCBjbGVhciB3aHkgdGhpcyBpcyBuZWVkZWQsIGJ1dCB3aXRob3V0IGl0IHdlIGVuZCB1cCBmYWlsaW5nIHRvIGZpbHRlclxuICAgICAgICAgICAgLy8gY2VydGFpbiBtYXRjaGVzIHRoYXQgc2hvdWxkIGJlIGZpbHRlcmVkIChyZXN1bHRpbmcgaW4gYmFkIG1hdGNoZXMpXG4gICAgICAgICAgICBpZiAoIU1ldGEuX1VzZVBhcnRpYWxJbmRleGluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2tleXNNYXRjaGVkTWFzayA9IGtleU1hc2s7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpc0JsYW5rKG5ld0FycikpIHtcbiAgICAgICAgICAgICAgICBuZXdBcnIgPSBNYXRjaC5FbXB0eU1hdGNoQXJyYXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBKb2luXG4gICAgICAgICAgICB0aGlzLl9tYXRjaGVzID0gdGhpcy5qb2luKG5ld0FyciwgcHJldk1hdGNoZXMsIGtleU1hc2ssXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJldk1hdGNoLl9rZXlzTWF0Y2hlZE1hc2spO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29tcHV0ZSBwYXRoIENSQ1xuICAgICAgICB0aGlzLl9tYXRjaFBhdGhDUkMgPSAtMTtcbiAgICAgICAgZm9yIChsZXQgbXI6IE1hdGNoUmVzdWx0ID0gdGhpczsgbXIgIT0gbnVsbDsgbXIgPSBtci5fcHJldk1hdGNoKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXRjaFBhdGhDUkMgPSBjcmMzMih0aGlzLl9tYXRjaFBhdGhDUkMsIG1yLl9rZXlEYXRhLl9rZXkubGVuZ3RoKTtcblxuICAgICAgICAgICAgaWYgKGlzUHJlc2VudChtci5fdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gaXNBcnJheShtci5fdmFsdWUpID8gbXIuX3ZhbHVlLmpvaW4oJywnKSA6IG1yLl92YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXRjaFBhdGhDUkMgPSBjcmMzMih0aGlzLl9tYXRjaFBhdGhDUkMsIGhhc2hDb2RlKHZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX21hdGNoUGF0aENSQyA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5fbWF0Y2hQYXRoQ1JDID0gMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9tZXRhR2VuZXJhdGlvbiA9IHRoaXMuX21ldGEucnVsZVNldEdlbmVyYXRpb247XG4gICAgICAgIHRoaXMuX3Byb3BlcnRpZXMgPSBudWxsO1xuICAgIH1cblxuXG4gICAgX2xvZ01hdGNoRGlmZihhOiBudW1iZXJbXSwgYjogbnVtYmVyW10pOiB2b2lkXG4gICAge1xuICAgICAgICBsZXQgaUEgPSAxLCBzaXplQSA9IGFbMF0sIGlCID0gMSwgc2l6ZUIgPSBiWzBdO1xuXG4gICAgICAgIHdoaWxlIChpQSA8PSBzaXplQSB8fCBpQiA8PSBzaXplQikge1xuICAgICAgICAgICAgbGV0IGMgPSAoaUEgPiBzaXplQSA/IDEgOiAoaUIgPiBzaXplQiA/IC0xIDogKGFbaUFdIC0gYltpQl0pKSk7XG4gICAgICAgICAgICBpZiAoYyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGlBKys7XG4gICAgICAgICAgICAgICAgaUIrKztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYyA8IDApIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBBIG5vdCBpbiBCLCBidXQgQSBkb2Vzbid0IGZpbHRlciBvbiBCJ3MgbWFzaywgdGhlbiBhZGQgaXRcbiAgICAgICAgICAgICAgICBwcmludCgnICAtLSBPbmx5IGluIEE6ICcgKyB0aGlzLl9tZXRhLl9ydWxlc1thW2lBXV0pO1xuICAgICAgICAgICAgICAgIGlBKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHByaW50KCcgIC0tIE9ubHkgaW4gQjogJyArIHRoaXMuX21ldGEuX3J1bGVzW2JbaUJdXSk7XG4gICAgICAgICAgICAgICAgaUIrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3BlcnRpZXMoKTogUHJvcGVydHlNYXBcbiAgICB7XG4gICAgICAgIHRoaXMuX2ludmFsaWRhdGVJZlN0YWxlKCk7XG4gICAgICAgIGlmIChpc0JsYW5rKHRoaXMuX3Byb3BlcnRpZXMpKSB7XG4gICAgICAgICAgICB0aGlzLl9wcm9wZXJ0aWVzID0gdGhpcy5fbWV0YS5wcm9wZXJ0aWVzRm9yTWF0Y2godGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3BlcnRpZXM7XG4gICAgfVxuXG4gICAgZGVidWdTdHJpbmcoKTogc3RyaW5nXG4gICAge1xuXG4gICAgICAgIGxldCBzaiA9IG5ldyBTdHJpbmdKb2luZXIoWydNYXRjaCBSZXN1bHQgcGF0aDogXFxuJ10pO1xuICAgICAgICB0aGlzLl9hcHBlbmRQcmV2UGF0aChzaik7XG5cbiAgICAgICAgaWYgKGlzUHJlc2VudCh0aGlzLl9vdmVyVW5pb25NYXRjaCkpIHtcbiAgICAgICAgICAgIHNqLmFkZCgnXFxuT3ZlcnJpZGVzIHBhdGg6ICcpO1xuICAgICAgICAgICAgdGhpcy5fb3ZlclVuaW9uTWF0Y2guX2FwcGVuZFByZXZQYXRoKHNqKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2oudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBfYXBwZW5kUHJldlBhdGgoYnVmOiBTdHJpbmdKb2luZXIpOiB2b2lkXG4gICAge1xuICAgICAgICBpZiAoaXNQcmVzZW50KHRoaXMuX3ByZXZNYXRjaCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByZXZNYXRjaC5fYXBwZW5kUHJldlBhdGgoYnVmKTtcbiAgICAgICAgICAgIGJ1Zi5hZGQoJyAtPiAnKTtcbiAgICAgICAgfVxuICAgICAgICBidWYuYWRkKHRoaXMuX2tleURhdGEuX2tleSk7XG4gICAgICAgIGJ1Zi5hZGQoJz0nKTtcbiAgICAgICAgYnVmLmFkZCh0aGlzLl92YWx1ZSk7XG4gICAgfVxuXG4gICAgX2NoZWNrTWF0Y2godmFsdWVzOiBNYXA8c3RyaW5nLCBhbnk+LCBtZXRhOiBNZXRhKTogdm9pZFxuICAgIHtcbiAgICAgICAgbGV0IGFycjogbnVtYmVyW10gPSB0aGlzLmZpbHRlclJlc3VsdCgpO1xuICAgICAgICBpZiAoaXNCbGFuayhhcnIpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gZmlyc3QgZW50cnkgaXMgY291bnRcbiAgICAgICAgbGV0IGNvdW50OiBudW1iZXIgPSBhcnJbMF07XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgbGV0IHIgPSB0aGlzLl9tZXRhLl9ydWxlc1thcnJbaSArIDFdXTtcbiAgICAgICAgICAgIHIuX2NoZWNrUnVsZSh2YWx1ZXMsIG1ldGEpO1xuICAgICAgICB9XG5cbiAgICB9XG5cblxuICAgIGVxdWFsc1RvKG86IGFueSk6IGJvb2xlYW5cbiAgICB7XG4gICAgICAgIHJldHVybiAobyBpbnN0YW5jZW9mIE1hdGNoUmVzdWx0KSAmJiBzdXBlci5lcXVhbHNUbyhcbiAgICAgICAgICAgICAgICBvKSAmJiAoby5fbWV0YUdlbmVyYXRpb24gPT09IHRoaXMuX21ldGFHZW5lcmF0aW9uKSAmJlxuICAgICAgICAgICAgby5fcHJvcGVydGllcy5zaXplID09PSB0aGlzLl9wcm9wZXJ0aWVzLnNpemU7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVW5pb25NYXRjaFJlc3VsdCBleHRlbmRzIE1hdGNoUmVzdWx0XG57XG5cbiAgICBjb25zdHJ1Y3RvcihtZXRhOiBNZXRhLCBrZXlEYXRhOiBLZXlEYXRhLCB2YWx1ZTogYW55LCBwcmV2TWF0Y2g6IE1hdGNoUmVzdWx0KVxuICAgIHtcbiAgICAgICAgc3VwZXIobWV0YSwga2V5RGF0YSwgdmFsdWUsIHByZXZNYXRjaCk7XG4gICAgfVxuXG5cbiAgICBwcm90ZWN0ZWQgam9pbihhOiBudW1iZXJbXSwgYjogbnVtYmVyW10sIGFNYXNrOiBudW1iZXIsIGJNYXNrOiBudW1iZXIpOiBudW1iZXJbXVxuICAgIHtcbiAgICAgICAgcmV0dXJuIE1hdGNoLnVuaW9uKGEsIGIpO1xuXG4gICAgfVxufVxuXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBTQVAgQXJpYmFcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiBCYXNlZCBvbiBvcmlnaW5hbCB3b3JrOiBNZXRhVUk6IENyYWlnIEZlZGVyaWdoaSAoMjAwOClcbiAqXG4gKi9cbmltcG9ydCB7aXNCbGFuaywgaXNQcmVzZW50LCB1bmltcGxlbWVudGVkfSBmcm9tICdAYXJpYmF1aS9jb3JlJztcblxuLyoqXG4gQSBtYXAgdGhhdCBtYXNrcyBvbiB0b3Agb2YgYW4gKGltbXV0YWJsZSkgcGFyZW50IG1hcFxuICovXG5leHBvcnQgY2xhc3MgTmVzdGVkTWFwPEssIFY+IGltcGxlbWVudHMgTWFwPEssIFY+XG57XG4gICAgc3RhdGljIHJlYWRvbmx5IF9OdWxsTWFya2VyOiBhbnkgPSB7bmVzbnVsbG1hcmtlcjogdHJ1ZX07XG5cbiAgICBbU3ltYm9sLnRvU3RyaW5nVGFnXTogJ01hcCc7XG5cbiAgICBfb3ZlcnJpZGVDb3VudDogbnVtYmVyID0gMDtcbiAgICBwcml2YXRlIF9zaXplOiBudW1iZXIgPSAwO1xuXG5cbiAgICBzdGF0aWMgdG9NYXBFbnRyeShpdGVyYXRvclJlc3VsdDogSXRlcmF0b3JSZXN1bHQ8YW55Pik6IE1hcEVudHJ5XG4gICAge1xuICAgICAgICBsZXQgdmFsdWUgPSBpdGVyYXRvclJlc3VsdC52YWx1ZTtcblxuICAgICAgICBpZiAoaXNQcmVzZW50KHZhbHVlKSAmJiBOZXN0ZWRNYXAuaXNNYXBFbnRyeSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBlbnRyeTogTWFwRW50cnkgPSB7XG5cbiAgICAgICAgICAgIGtleTogKGlzUHJlc2VudChcbiAgICAgICAgICAgICAgICBpdGVyYXRvclJlc3VsdC52YWx1ZSkpID8gaXRlcmF0b3JSZXN1bHQudmFsdWVbMF0gOiBpdGVyYXRvclJlc3VsdC52YWx1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAoaXNQcmVzZW50KFxuICAgICAgICAgICAgICAgIGl0ZXJhdG9yUmVzdWx0LnZhbHVlKSkgPyBpdGVyYXRvclJlc3VsdC52YWx1ZVsxXSA6IGl0ZXJhdG9yUmVzdWx0LnZhbHVlLFxuICAgICAgICAgICAgaGFzTmV4dDogIWl0ZXJhdG9yUmVzdWx0LmRvbmVcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGVudHJ5O1xuICAgIH1cblxuICAgIHN0YXRpYyBpc01hcEVudHJ5KHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBNYXBFbnRyeVxuICAgIHtcbiAgICAgICAgcmV0dXJuIGlzUHJlc2VudCh2YWx1ZSkgJiYgaXNQcmVzZW50KHZhbHVlLmhhc05leHQpO1xuICAgIH1cblxuICAgIHN0YXRpYyBpc05NTnVsbE1hcmtlcih2YWx1ZTogYW55KTogYm9vbGVhblxuICAgIHtcbiAgICAgICAgcmV0dXJuIGlzUHJlc2VudCh2YWx1ZSkgJiYgdmFsdWVbJ25lc251bGxtYXJrZXInXTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9wYXJlbnQ6IE1hcDxLLCBWPiwgcHJpdmF0ZSBfbWFwPzogTWFwPEssIGFueT4pXG4gICAge1xuXG4gICAgICAgIGlmIChpc0JsYW5rKF9tYXApKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXAgPSBuZXcgTWFwIDxLLCBhbnk+KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0b01hcCgpOiBNYXA8SywgVj5cbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJlbnQ7XG4gICAgfVxuXG5cbiAgICByZXBhcmVudGVkTWFwKG5ld1BhcmVudDogTWFwPEssIFY+KTogTmVzdGVkTWFwPEssIFY+XG4gICAge1xuICAgICAgICBsZXQgbmV3TWFwID0gbmV3IE5lc3RlZE1hcDxLLCBWPihuZXdQYXJlbnQsIHRoaXMuX21hcCk7XG4gICAgICAgIG5ld01hcC5fb3ZlcnJpZGVDb3VudCA9IHRoaXMuX292ZXJyaWRlQ291bnQ7XG4gICAgICAgIHJldHVybiBuZXdNYXA7XG4gICAgfVxuXG5cbiAgICBnZXQoa2V5OiBLKTogYW55fFZcbiAgICB7XG4gICAgICAgIGxldCB2YWwgPSB0aGlzLl9tYXAuaGFzKGtleSkgPyB0aGlzLl9tYXAuZ2V0KGtleSkgOiB0aGlzLl9wYXJlbnQuZ2V0KGtleSk7XG4gICAgICAgIHJldHVybiBOZXN0ZWRNYXAuaXNOTU51bGxNYXJrZXIodmFsKSA/IG51bGwgOiB2YWw7XG4gICAgfVxuXG5cbiAgICBrZXlzKCk6IEl0ZXJhYmxlSXRlcmF0b3I8Sz5cbiAgICB7XG4gICAgICAgIHJldHVybiB1bmltcGxlbWVudGVkKCk7XG4gICAgfVxuXG5cbiAgICB2YWx1ZXMoKTogSXRlcmFibGVJdGVyYXRvcjxWPlxuICAgIHtcbiAgICAgICAgcmV0dXJuIHVuaW1wbGVtZW50ZWQoKTtcbiAgICB9XG5cbiAgICBjbGVhcigpOiB2b2lkXG4gICAge1xuICAgICAgICB0aGlzLl9wYXJlbnQuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5fbWFwLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgc2V0KGtleTogSywgdmFsdWU/OiBWKTogYW55XG4gICAge1xuICAgICAgICBsZXQgb3JpZyA9IHRoaXMuX21hcC5nZXQoa2V5KTtcblxuICAgICAgICBpZiAoKE5lc3RlZE1hcC5pc05NTnVsbE1hcmtlcihvcmlnKSB8fCBpc0JsYW5rKG9yaWcpKSAmJiB0aGlzLl9wYXJlbnQuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHRoaXMuX292ZXJyaWRlQ291bnQgKz0gKE5lc3RlZE1hcC5pc05NTnVsbE1hcmtlcihvcmlnKSA/IC0xIDogMSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9tYXAuc2V0KGtleSwgdmFsdWUpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuXG4gICAgZGVsZXRlKGtleTogSyk6IGJvb2xlYW5cbiAgICB7XG5cbiAgICAgICAgbGV0IHJldHVyblZhbCA9IGZhbHNlO1xuICAgICAgICBsZXQgb3JpZzogYW55ID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuX21hcC5oYXMoa2V5KSkge1xuICAgICAgICAgICAgb3JpZyA9IHRoaXMuX21hcC5kZWxldGUoa2V5KTtcblxuICAgICAgICAgICAgcmV0dXJuVmFsID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIHByaW50KCdSZW1vdmluZzogJyAsIG9yaWcpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fcGFyZW50LmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWFwLnNldChrZXksIE5lc3RlZE1hcC5fTnVsbE1hcmtlcik7XG4gICAgICAgICAgICAgICAgLy8gX292ZXJyaWRlQ291bnQtLTtcbiAgICAgICAgICAgICAgICB0aGlzLl9vdmVycmlkZUNvdW50Kys7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9wYXJlbnQuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIC8vIHdlJ3JlIFwicmVtb3ZpbmdcIiBhIHZhbHVlIHdlIGRvbid0IGhhdmUgKGJ1dCB0aGF0IG91ciBwYXJlbnQgZG9lcylcbiAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gc3RvcmUgYSBudWxsIG92ZXJyaWRlXG4gICAgICAgICAgICBvcmlnID0gdGhpcy5fcGFyZW50LmdldChrZXkpO1xuICAgICAgICAgICAgLy8gcHJpbnQoJ1JlbW92aW5nOiAnICwgb3JpZyk7XG4gICAgICAgICAgICB0aGlzLl9tYXAuc2V0KGtleSwgTmVzdGVkTWFwLl9OdWxsTWFya2VyKTtcbiAgICAgICAgICAgIHRoaXMuX292ZXJyaWRlQ291bnQgKz0gMjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0dXJuVmFsO1xuICAgIH1cblxuICAgIGZvckVhY2goY2FsbGJhY2tmbjogKHZhbHVlOiBWLCBpbmRleDogSywgbWFwOiBNYXA8SywgVj4pID0+IHZvaWQsIHRoaXNBcmc/OiBhbnkpOiB2b2lkXG4gICAge1xuXG4gICAgICAgIGxldCBlbnRyaWVzID0gdGhpcy5lbnRyaWVzKCk7XG5cbiAgICAgICAgbGV0IG5leHRFbnRyeTogTWFwRW50cnk7XG4gICAgICAgIHdoaWxlICgobmV4dEVudHJ5ID0gTmVzdGVkTWFwLnRvTWFwRW50cnkoZW50cmllcy5uZXh0KCkpKSAmJiBuZXh0RW50cnkuaGFzTmV4dCkge1xuICAgICAgICAgICAgY2FsbGJhY2tmbihuZXh0RW50cnkudmFsdWUsIG5leHRFbnRyeS5rZXksIHRoaXMuX3BhcmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGhhcyhrZXk6IEspOiBib29sZWFuXG4gICAge1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9tYXAuaGFzKGtleSkgPyAoICFOZXN0ZWRNYXAuaXNOTU51bGxNYXJrZXIoXG4gICAgICAgICAgICAgICAgdGhpcy5fbWFwLmdldChrZXkpKSApIDogdGhpcy5fcGFyZW50LmhhcyhrZXkpO1xuICAgIH1cblxuXG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmFibGVJdGVyYXRvcjxhbnk+XG4gICAge1xuICAgICAgICByZXR1cm4gbmV3IE5lc3RlZEVudHJ5SXRlcmF0b3I8SywgVj4odGhpcyk7XG4gICAgfVxuXG5cbiAgICBlbnRyaWVzKCk6IEl0ZXJhYmxlSXRlcmF0b3I8YW55PlxuICAgIHtcbiAgICAgICAgcmV0dXJuIG5ldyBOZXN0ZWRFbnRyeUl0ZXJhdG9yPEssIFY+KHRoaXMpO1xuICAgIH1cblxuXG4gICAgZ2V0IHNpemUoKTogbnVtYmVyXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFyZW50LnNpemUgKyB0aGlzLl9tYXAuc2l6ZSAtIHRoaXMuX292ZXJyaWRlQ291bnQ7XG4gICAgfVxuXG4gICAgZ2V0IG1hcCgpOiBNYXA8SywgT2JqZWN0PlxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcDtcbiAgICB9XG5cbiAgICBnZXQgcGFyZW50KCk6IE1hcDxLLCBWPlxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmVudDtcbiAgICB9XG5cblxuICAgIHRvU3RyaW5nKCk6IHN0cmluZ1xuICAgIHtcbiAgICAgICAgcmV0dXJuICdOZXN0ZWRNYXAnO1xuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBNYXBFbnRyeVxue1xuICAgIHZhbHVlOiBhbnk7XG4gICAga2V5OiBhbnk7XG4gICAgaGFzTmV4dDogYm9vbGVhbjtcbn1cblxuY2xhc3MgTmVzdGVkRW50cnlJdGVyYXRvcjxLLCBWPiBpbXBsZW1lbnRzIEl0ZXJhYmxlSXRlcmF0b3I8TWFwRW50cnk+XG57XG4gICAgX3BhcmVudEl0ZXJhdG9yOiBJdGVyYWJsZUl0ZXJhdG9yPGFueT47XG4gICAgX25lc3RlZEl0ZXJhdG9yOiBJdGVyYWJsZUl0ZXJhdG9yPGFueT47XG4gICAgX2N1cnJlbnRFbnRyeTogTWFwRW50cnk7XG4gICAgX25leHRFbnRyeTogTWFwRW50cnk7XG4gICAgX2Zyb21OZXN0ZWQ6IGJvb2xlYW47XG5cblxuICAgIF9jdXJyZW50UGFyZW50RW50cnk6IE1hcEVudHJ5O1xuICAgIF9jdXJyZW50TmVzdGVkRW50cnk6IE1hcEVudHJ5O1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfbmVzdGVkTWFwOiBOZXN0ZWRNYXA8SywgVj4pXG4gICAge1xuICAgICAgICB0aGlzLl9wYXJlbnRJdGVyYXRvciA9IF9uZXN0ZWRNYXAucGFyZW50LmVudHJpZXMoKTtcbiAgICAgICAgdGhpcy5fbmVzdGVkSXRlcmF0b3IgPSBfbmVzdGVkTWFwLm1hcC5lbnRyaWVzKCk7XG5cbiAgICAgICAgdGhpcy5hZHZhbmNlVG9OZXh0KCk7XG4gICAgfVxuXG5cbiAgICBuZXh0KCk6IEl0ZXJhdG9yUmVzdWx0PE1hcEVudHJ5PlxuICAgIHtcbiAgICAgICAgLy8gYXNzZXJ0KGlzUHJlc2VudCh0aGlzLl9uZXh0RW50cnkpICwgJ25leHQoKSB3aGVuIG5vIG1vcmUgZWxlbWVudHNcIicpO1xuXG4gICAgICAgIHRoaXMuX2N1cnJlbnRFbnRyeSA9IHRoaXMuX25leHRFbnRyeTtcbiAgICAgICAgdGhpcy5hZHZhbmNlVG9OZXh0KCk7XG5cbiAgICAgICAgbGV0IG5leHQ6IEl0ZXJhdG9yUmVzdWx0PE1hcEVudHJ5PiA9IHtcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLl9jdXJyZW50RW50cnksXG4gICAgICAgICAgICBkb25lOiAhdGhpcy5fY3VycmVudEVudHJ5Lmhhc05leHRcblxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV4dDtcbiAgICB9XG5cblxuICAgIFtTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhYmxlSXRlcmF0b3I8TWFwRW50cnk+XG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkdmFuY2VUb05leHQoKVxuICAgIHtcbiAgICAgICAgdGhpcy5fZnJvbU5lc3RlZCA9IGZhbHNlO1xuXG4gICAgICAgIC8vIE5vdGU6IHdlIG5lZWQgdG8gc2tpcCBudWxscyAobWFza2VkIHZhbHVlcylcblxuICAgICAgICB3aGlsZSAoIXRoaXMuX2Zyb21OZXN0ZWQgJiYgKHRoaXMuX2N1cnJlbnROZXN0ZWRFbnRyeSA9IE5lc3RlZE1hcC50b01hcEVudHJ5KFxuICAgICAgICAgICAgdGhpcy5fbmVzdGVkSXRlcmF0b3IubmV4dCgpKSkgJiYgdGhpcy5fY3VycmVudE5lc3RlZEVudHJ5Lmhhc05leHQpIHtcbiAgICAgICAgICAgIHRoaXMuX25leHRFbnRyeSA9IHRoaXMuX2N1cnJlbnROZXN0ZWRFbnRyeTtcbiAgICAgICAgICAgIGlmICghTmVzdGVkTWFwLmlzTk1OdWxsTWFya2VyKHRoaXMuX25leHRFbnRyeS52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9mcm9tTmVzdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5fZnJvbU5lc3RlZCkge1xuICAgICAgICAgICAgd2hpbGUgKCh0aGlzLl9jdXJyZW50UGFyZW50RW50cnkgPSBOZXN0ZWRNYXAudG9NYXBFbnRyeShcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnRJdGVyYXRvci5uZXh0KCkpKSAmJiB0aGlzLl9jdXJyZW50UGFyZW50RW50cnkuaGFzTmV4dCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX25leHRFbnRyeSA9IHRoaXMuX2N1cnJlbnRQYXJlbnRFbnRyeTtcblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fbmVzdGVkTWFwLm1hcC5oYXModGhpcy5fbmV4dEVudHJ5LmtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fbmV4dEVudHJ5ID0gdGhpcy5fY3VycmVudFBhcmVudEVudHJ5O1xuICAgICAgICB9XG5cblxuICAgIH1cblxufVxuXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBTQVAgQXJpYmFcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiBCYXNlZCBvbiBvcmlnaW5hbCB3b3JrOiBNZXRhVUk6IENyYWlnIEZlZGVyaWdoaSAoMjAwOClcbiAqXG4gKi9cbmltcG9ydCB7XG4gICAgQm9vbGVhbldyYXBwZXIsXG4gICAgZXZhbEV4cHJlc3Npb25XaXRoQ250eCxcbiAgICBGaWVsZFBhdGgsXG4gICAgaXNCbGFuayxcbiAgICBpc0Jvb2xlYW4sXG4gICAgaXNGdW5jdGlvbixcbiAgICBpc051bWJlcixcbiAgICBpc1ByZXNlbnQsXG4gICAgaXNTdHJpbmcsXG4gICAgU3RyaW5nSm9pbmVyLFxuICAgIHVuaW1wbGVtZW50ZWRcbn0gZnJvbSAnQGFyaWJhdWkvY29yZSc7XG5pbXBvcnQge2lzUHJvcGVydHlNYXBBd2FraW5nLCBNZXRhLCBQcm9wZXJ0eU1hcCwgUHJvcGVydHlNYXBBd2FraW5nLCBQcm9wZXJ0eU1lcmdlcn0gZnJvbSAnLi9tZXRhJztcbmltcG9ydCB7Q29udGV4dH0gZnJvbSAnLi9jb250ZXh0JztcblxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRHluYW1pY1Byb3BlcnR5VmFsdWVcbntcbiAgICBldmFsdWF0ZShjb250ZXh0OiBDb250ZXh0KTogYW55XG4gICAge1xuICAgICAgICByZXR1cm4gdW5pbXBsZW1lbnRlZCgpO1xuICAgIH1cblxuICAgIGJpbmQoY29udGV4dDogYW55KTogdm9pZFxuICAgIHtcbiAgICAgICAgcmV0dXJuIHVuaW1wbGVtZW50ZWQoKTtcbiAgICB9XG5cblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIER5bmFtaWNTZXR0YWJsZVByb3BlcnR5VmFsdWVcbntcbiAgICBzZXR0YWJsZTogYm9vbGVhbjtcblxuICAgIGV2YWx1YXRlU2V0IChjb250ZXh0OiBDb250ZXh0LCB2YWx1ZTogYW55KTogdm9pZDtcbn1cblxuLyoqXG4gKiA7bWFya2VyOyBpbnRlcmZhY2UgZm9yIER5bmFtaWNQcm9wZXJ0eVZhbHVlcyB0aGF0IGRlcGVuZCBvbmx5IG9uIHRoZWlyIG1hdGNoIGNvbnRleHQgYW5kXG4gKiB0aGVyZWZvcmUgY2FuIGJlIGNvbXB1dGVkIGFuZCBjYWNoZWQgc3RhdGljYWxseSBpbiB0aGUgQ29udGV4dCBBY3RpdmF0aW9uIHRyZWVcbiAqL1xuZXhwb3J0IGNsYXNzIFN0YXRpY2FsbHlSZXNvbHZhYmxlIGV4dGVuZHMgRHluYW1pY1Byb3BlcnR5VmFsdWVcbntcblxuXG59XG5cblxuZXhwb3J0IGNsYXNzIFN0YXRpY0R5bmFtaWNXcmFwcGVyIGV4dGVuZHMgU3RhdGljYWxseVJlc29sdmFibGUgaW1wbGVtZW50cyBQcm9wZXJ0eU1hcEF3YWtpbmdcbntcbiAgICBwcml2YXRlIF9jYWNoZWQ6IGFueTtcbiAgICBwcm9wZXJ0eUF3YWtpbmc6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfb3JpZzogU3RhdGljYWxseVJlc29sdmFibGUpXG4gICAge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuXG4gICAgZ2V0RHluYW1pY1ZhbHVlKCk6IFN0YXRpY2FsbHlSZXNvbHZhYmxlXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3JpZztcbiAgICB9XG5cbiAgICBhd2FrZUZvclByb3BlcnR5TWFwKG1hcDogUHJvcGVydHlNYXApOiBhbnlcbiAgICB7XG4gICAgICAgIC8vIGNvcHkgb3Vyc2VsdmVzIHNvIHRoZXJlJ3MgYSBmcmVzaCBjb3B5IGZvciBlYWNoIGNvbnRleHQgaW4gd2hpY2ggaXMgYXBwZWFyc1xuXG4gICAgICAgIGxldCBvcmlnYXcgPSAoaXNQcm9wZXJ0eU1hcEF3YWtpbmcodGhpcy5fb3JpZykpID9cbiAgICAgICAgICAgIDxTdGF0aWNhbGx5UmVzb2x2YWJsZT4oPFByb3BlcnR5TWFwQXdha2luZz50aGlzLl9vcmlnKS5hd2FrZUZvclByb3BlcnR5TWFwKG1hcClcbiAgICAgICAgICAgIDogdGhpcy5fb3JpZztcbiAgICAgICAgcmV0dXJuIG5ldyBTdGF0aWNEeW5hbWljV3JhcHBlcihvcmlnYXcpO1xuICAgIH1cblxuICAgIGV2YWx1YXRlKGNvbnRleHQ6IENvbnRleHQpOiBhbnlcbiAgICB7XG4gICAgICAgIC8vIHdlIGxhemlseSBzdGF0aWMgZXZhbHVhdGUgb3VyIHZhbHVlIGFuZCBjYWNoZSB0aGUgcmVzdWx0XG4gICAgICAgIGlmIChpc0JsYW5rKHRoaXMuX2NhY2hlZCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlZCA9IGNvbnRleHQuc3RhdGljYWxseVJlc29sdmVWYWx1ZSh0aGlzLl9vcmlnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVkO1xuICAgIH1cblxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nXG4gICAge1xuICAgICAgICBsZXQgc2ogPSBuZXcgU3RyaW5nSm9pbmVyKFsnU3RhdGljRHluYW1pY1dyYXBwZXInXSk7XG4gICAgICAgIHNqLmFkZCgnKCcpO1xuICAgICAgICBzai5hZGQoKChpc1ByZXNlbnQodGhpcy5fY2FjaGVkKSkgPyB0aGlzLl9jYWNoZWQgOiB0aGlzLl9vcmlnKSk7XG4gICAgICAgIHNqLmFkZCgoKGlzQmxhbmsodGhpcy5fY2FjaGVkKSkgPyAnIHVuZXZhbHVhdGVkJyA6ICcnKSk7XG4gICAgICAgIHNqLmFkZCgnKScpO1xuXG4gICAgICAgIHJldHVybiBzai50b1N0cmluZygpO1xuICAgIH1cblxufVxuXG4vLyBXcmFwcGVyIHRoYXQgbWFya3MgYSBub3JtYWxseSBkeW5hbWljIHZhbHVlIChlLmcuIGFuIEV4cHIpIGFzIFN0YXRpY2FsbHlSZXNvbHZhYmxlXG5leHBvcnQgY2xhc3MgU3RhdGljYWxseVJlc29sdmFibGVXcmFwcGVyIGV4dGVuZHMgU3RhdGljYWxseVJlc29sdmFibGVcbntcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX29yaWc6IER5bmFtaWNQcm9wZXJ0eVZhbHVlKVxuICAgIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBldmFsdWF0ZShjb250ZXh0OiBDb250ZXh0KTogYW55XG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3JpZy5ldmFsdWF0ZShjb250ZXh0KTtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpOiBzdHJpbmdcbiAgICB7XG4gICAgICAgIGxldCBzaiA9IG5ldyBTdHJpbmdKb2luZXIoWydTdGF0aWNhbGx5UmVzb2x2YWJsZVdyYXBwZXInXSk7XG4gICAgICAgIHNqLmFkZCgnKCcpO1xuICAgICAgICBzai5hZGQodGhpcy5fb3JpZy50b1N0cmluZygpKTtcbiAgICAgICAgc2ouYWRkKCcpJyk7XG5cbiAgICAgICAgcmV0dXJuIHNqLnRvU3RyaW5nKCk7XG4gICAgfVxufVxuXG5cbmV4cG9ydCBjbGFzcyBDb250ZXh0RmllbGRQYXRoIGV4dGVuZHMgRHluYW1pY1Byb3BlcnR5VmFsdWUgaW1wbGVtZW50cyBEeW5hbWljU2V0dGFibGVQcm9wZXJ0eVZhbHVlXG57XG4gICAgc2V0dGFibGU6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgcHJvdGVjdGVkIGZpZWxkUGF0aDogRmllbGRQYXRoO1xuXG4gICAgY29uc3RydWN0b3IocGF0aDogc3RyaW5nKVxuICAgIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmZpZWxkUGF0aCA9IG5ldyBGaWVsZFBhdGgocGF0aCk7XG4gICAgfVxuXG4gICAgZXZhbHVhdGUoY29udGV4dDogQ29udGV4dCk6IGFueVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGRQYXRoLmdldEZpZWxkVmFsdWUoY29udGV4dCk7XG4gICAgfVxuXG4gICAgZXZhbHVhdGVTZXQoY29udGV4dDogQ29udGV4dCwgdmFsdWU6IGFueSk6IHZvaWRcbiAgICB7XG5cbiAgICAgICAgdGhpcy5maWVsZFBhdGguc2V0RmllbGRWYWx1ZShjb250ZXh0LCB2YWx1ZSk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEeW5hbWljU2V0dGFibGUoYXJnOiBhbnkpOiBhcmcgaXMgRHluYW1pY1NldHRhYmxlUHJvcGVydHlWYWx1ZVxue1xuICAgIHJldHVybiBpc1ByZXNlbnQoYXJnLnNldHRhYmxlKTtcbn1cblxuXG5leHBvcnQgY2xhc3MgRXhwciBleHRlbmRzIER5bmFtaWNQcm9wZXJ0eVZhbHVlXG57XG4gICAgcHJpdmF0ZSBfZXh0ZW5kZWRPYmplY3RzOiBNYXA8c3RyaW5nLCBhbnk+ID0gbmV3IE1hcDxzdHJpbmcsIGFueT4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2V4cHJlc3Npb25TdHJpbmc6IHN0cmluZylcbiAgICB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5hZGRUeXBlVG9Db250ZXh0KCdNZXRhJywgTWV0YSk7XG4gICAgICAgIHRoaXMuYWRkVHlwZVRvQ29udGV4dCgnRmllbGRQYXRoJywgRmllbGRQYXRoKTtcbiAgICB9XG5cblxuICAgIGFkZFR5cGVUb0NvbnRleHQobmFtZTogc3RyaW5nLCBjb250ZXh0OiBhbnkpOiB2b2lkXG4gICAge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihjb250ZXh0KSkge1xuICAgICAgICAgICAgdGhpcy5fZXh0ZW5kZWRPYmplY3RzLnNldChuYW1lLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV2YWx1YXRlKGNvbnRleHQ6IENvbnRleHQpOiBhbnlcbiAgICB7XG4gICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgIHRoaXMuX2V4dGVuZGVkT2JqZWN0cy5mb3JFYWNoKCh2LCBrKSA9PlxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCB0eXBlTmFtZSA9IGBEeW5PYmoke2luZGV4Kyt9YDtcbiAgICAgICAgICAgICg8YW55PmNvbnRleHQpW3R5cGVOYW1lXSA9IHY7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9leHByZXNzaW9uU3RyaW5nLmluZGV4T2YoYCR7a30uYCkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXhwcmVzc2lvblN0cmluZyA9IHRoaXMuX2V4cHJlc3Npb25TdHJpbmcucmVwbGFjZShgJHtrfS5gLCBgJHt0eXBlTmFtZX0uYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCByZXN1bHQgPSBldmFsRXhwcmVzc2lvbldpdGhDbnR4KHRoaXMuX2V4cHJlc3Npb25TdHJpbmcsICcnLCBjb250ZXh0LCBjb250ZXh0KTtcblxuICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgIHRoaXMuX2V4dGVuZGVkT2JqZWN0cy5mb3JFYWNoKCh2LCBrKSA9PlxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCB0eXBlTmFtZSA9IGBEeW5PYmoke2luZGV4Kyt9YDtcbiAgICAgICAgICAgIGlmIChpc1ByZXNlbnQoKDxhbnk+Y29udGV4dClbdHlwZU5hbWVdKSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSAoPGFueT5jb250ZXh0KVt0eXBlTmFtZV07XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgd2UgY2FuIHVzZSB1bmRlZmluZWQuIERlbGV0ZSBpcyBwcmV0dHkgc2xvd1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpOiBzdHJpbmdcbiAgICB7XG4gICAgICAgIGxldCBzaiA9IG5ldyBTdHJpbmdKb2luZXIoWydleHByOiddKTtcbiAgICAgICAgc2ouYWRkKCcoJyk7XG4gICAgICAgIHNqLmFkZCh0aGlzLl9leHByZXNzaW9uU3RyaW5nKTtcbiAgICAgICAgc2ouYWRkKCcpJyk7XG5cbiAgICAgICAgcmV0dXJuIHNqLnRvU3RyaW5nKCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGVmZXJyZWRPcGVyYXRpb25DaGFpbiBleHRlbmRzIER5bmFtaWNQcm9wZXJ0eVZhbHVlIGltcGxlbWVudHMgUHJvcGVydHlNYXBBd2FraW5nXG57XG4gICAgcHJvcGVydHlBd2FraW5nOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX21lcmdlcjogUHJvcGVydHlNZXJnZXIsIHByaXZhdGUgX29yaWc6IGFueSwgcHJpdmF0ZSBfb3ZlcnJpZGU6IGFueSlcbiAgICB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG5cbiAgICBldmFsdWF0ZShjb250ZXh0OiBDb250ZXh0KTogYW55XG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWVyZ2VyLm1lcmdlKGNvbnRleHQucmVzb2x2ZVZhbHVlKHRoaXMuX292ZXJyaWRlKSxcbiAgICAgICAgICAgIGNvbnRleHQucmVzb2x2ZVZhbHVlKHRoaXMuX29yaWcpLFxuICAgICAgICAgICAgY29udGV4dC5pc0RlY2xhcmUoKSk7XG4gICAgfVxuXG5cbiAgICBhd2FrZUZvclByb3BlcnR5TWFwKG1hcDogUHJvcGVydHlNYXApOiBhbnlcbiAgICB7XG4gICAgICAgIGxldCBvcmlnID0gdGhpcy5fb3JpZztcbiAgICAgICAgbGV0IG92ZXIgPSB0aGlzLl9vdmVycmlkZTtcblxuICAgICAgICBpZiAoaXNQcm9wZXJ0eU1hcEF3YWtpbmcob3JpZykpIHtcbiAgICAgICAgICAgIG9yaWcgPSAoPFByb3BlcnR5TWFwQXdha2luZz5vcmlnKS5hd2FrZUZvclByb3BlcnR5TWFwKG1hcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvcGVydHlNYXBBd2FraW5nKG92ZXIpKSB7XG4gICAgICAgICAgICBvdmVyID0gKDxQcm9wZXJ0eU1hcEF3YWtpbmc+b3ZlcikuYXdha2VGb3JQcm9wZXJ0eU1hcChtYXApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcmlnICE9PSB0aGlzLl9vcmlnIHx8IG92ZXIgIT09IHRoaXMuX292ZXJyaWRlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERlZmVycmVkT3BlcmF0aW9uQ2hhaW4odGhpcy5fbWVyZ2VyLCBvcmlnLCBvdmVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cblxuICAgIHRvU3RyaW5nKCk6IHN0cmluZ1xuICAgIHtcbiAgICAgICAgbGV0IHNqID0gbmV3IFN0cmluZ0pvaW5lcihbJ0NoYWluJ10pO1xuICAgICAgICBzai5hZGQoJzwnKTtcbiAgICAgICAgc2ouYWRkKHRoaXMuX21lcmdlci50b1N0cmluZygpKTtcbiAgICAgICAgc2ouYWRkKCc+Jyk7XG4gICAgICAgIHNqLmFkZCgnOiAnKTtcbiAgICAgICAgc2ouYWRkKHRoaXMuX292ZXJyaWRlKTtcbiAgICAgICAgc2ouYWRkKCcgPT4gJyk7XG4gICAgICAgIHNqLmFkZCh0aGlzLl9vcmlnKTtcblxuICAgICAgICByZXR1cm4gc2oudG9TdHJpbmcoKTtcbiAgICB9XG5cbn1cblxuXG5leHBvcnQgY2xhc3MgVmFsdWVDb252ZXJ0ZXJcbntcblxuICAgIHN0YXRpYyB2YWx1ZSh0b1R5cGU6IHN0cmluZywgdmFsdWU6IGFueSk6IGFueVxuICAgIHtcblxuICAgICAgICBpZiAodG9UeXBlID09PSAnU3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKGlzQmxhbmsodmFsdWUpIHx8IGlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAodG9UeXBlID09PSAnQm9vbGVhbicpIHtcbiAgICAgICAgICAgIGlmIChpc0JsYW5rKHZhbHVlKSB8fCBpc0Jvb2xlYW4odmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gQm9vbGVhbldyYXBwZXIuYm9sZWFuVmFsdWUodmFsdWUpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAodG9UeXBlID09PSAnTnVtYmVyJykge1xuICAgICAgICAgICAgaWYgKGlzQmxhbmsodmFsdWUpIHx8IGlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWdub3JlIGRlYy4gcG9pbnRzIGZvciBub3dcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG5cbiAgICB9XG59XG5cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IFNBUCBBcmliYVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqIEJhc2VkIG9uIG9yaWdpbmFsIHdvcms6IE1ldGFVSTogQ3JhaWcgRmVkZXJpZ2hpICgyMDA4KVxuICpcbiAqL1xuLyoqXG4gKiBTcGVjaWFsIGltcG9ydCB0byBiZSBhYmxlIHRvIGNvbnZlcnQgc3RyaW5nIHRvIHR5cGUgdXNpbmcgQ29sbGVjdGlvbnNbc3RyaW5nIHR5cGVdID0+IHR5cGVcbiAqL1xuaW1wb3J0ICogYXMgQ29sbGVjdGlvbnMgZnJvbSAndHlwZXNjcmlwdC1jb2xsZWN0aW9ucyc7XG5pbXBvcnQge1xuICAgIGFzc2VydCxcbiAgICBCb29sZWFuV3JhcHBlciwgY2xhc3NOYW1lLFxuICAgIEV4dGVuc2libGUsXG4gICAgRmllbGRQYXRoLFxuICAgIGlzQXJyYXksXG4gICAgaXNCbGFuayxcbiAgICBpc051bWJlcixcbiAgICBpc1ByZXNlbnQsXG4gICAgaXNTdHJpbmcsXG4gICAgaXNTdHJpbmdNYXAsXG4gICAgTGlzdFdyYXBwZXIsXG4gICAgTWFwV3JhcHBlcixcbiAgICBvYmplY3RUb05hbWUsXG4gICAgcHJpbnQsXG4gICAgU3RyaW5nSm9pbmVyXG59IGZyb20gJ0BhcmliYXVpL2NvcmUnO1xuaW1wb3J0IHtNYXRjaFJlc3VsdCwgVW5pb25NYXRjaFJlc3VsdH0gZnJvbSAnLi9tYXRjaCc7XG5pbXBvcnQge01ldGEsIE92ZXJyaWRlVmFsdWUsIFByb3BlcnR5TWFuYWdlciwgUHJvcGVydHlNYXB9IGZyb20gJy4vbWV0YSc7XG5pbXBvcnQge09iamVjdE1ldGEsIE9iamVjdE1ldGFQcm9wZXJ0eU1hcH0gZnJvbSAnLi9vYmplY3QtbWV0YSc7XG5pbXBvcnQge1VJTWV0YX0gZnJvbSAnLi91aW1ldGEnO1xuaW1wb3J0IHtOZXN0ZWRNYXB9IGZyb20gJy4vbmVzdGVkLW1hcCc7XG5pbXBvcnQge1xuICAgIER5bmFtaWNQcm9wZXJ0eVZhbHVlLFxuICAgIER5bmFtaWNTZXR0YWJsZVByb3BlcnR5VmFsdWUsXG4gICAgRXhwcixcbiAgICBpc0R5bmFtaWNTZXR0YWJsZSxcbiAgICBTdGF0aWNhbGx5UmVzb2x2YWJsZVxufSBmcm9tICcuL3Byb3BlcnR5LXZhbHVlJztcblxuLyoqXG4gKlxuICogQ29udGV4dCByZXByZXNlbnRzIGEgc3RhY2sgb2YgYXNzaWdubWVudHMgKGUuZy4gY2xhc3M9VXNlciwgZmllbGQ9YmlydGhEYXksIG9wZXJhdGlvbj1lZGl0KVxuICogIFRoZSBjdXJyZW50IHNldCBvZiBhc3NpZ25tZW50cyBjYW4gYmUgcmV0cmlldmVkIHZpYSB2YWx1ZXMoKS5cbiAqXG4gKiBUaGUgY3VycmVudCB2YWx1ZXMgYXJlIHJ1biBhZ2FpbnN0IHRoZSBNZXRhIHJ1bGUgc2V0IHRvIGNvbXB1dGUgdGhlIGVmZmVjdGl2ZSBQcm9wZXJ0eU1hcFxuICogKGUuZy4gdmlzaWJsZTp0cnVlLCBlZGl0YWJsZTp0cnVlLCBjb21wb25lbnQ6QVdUZXh0RmllbGQpLlxuICogU29tZSBydWxlIGV2YWx1YXRpb25zIHJlc3VsdCBpbiAqY2hhaW5pbmcqIC0tIHdoZXJlIGFkZGl0aW9uYWwgYXNzaWdubWVudHMgdGhhdCBhcmVcbiAqICdpbXBsaWVkJyBieSB0aGUgY3VycmVudCBhc3NpZ25tZW50cyBhcmUgYXBwbGllZCwgKHJlc3VsdGluZyBpbiBhIHJldmlzZWQgY29tcHV0YXRpb25cbiAqIG9mIHRoZSBjdXJyZW50IFByb3BlcnR5TWFwLCBhbmQgcG9zc2libGUgZnVydGhlciBjaGFpbmluZykuXG4gKiAoZS5nLiBmaWVsZD1iaXJ0aERheSBtYXkgcmVzdWx0IGluIHR5cGU9RGF0ZSB3aGljaCBtYXkgcmVzdWx0IGluIGNvbXBvbmVudDpEYXRlUGlja2VyKVxuICpcbiAqIEFzc2lnbm1lbnRzIGNhbiBiZSBzY29wZWQgYW5kIHBvcHBlZCAocHVzaCgpLCBzZXQoa2V5LCB2YWx1ZSk7IC4uLjsgcG9wKCkpLlxuICpcbiAqIFRoZSBhY3R1YWwgY29tcHV0YXRpb24gb2YgcnVsZSBtYXRjaGVzIGlzIGNhY2hlZCBzbyBvbmNlIGEgJ3BhdGgnIGRvd24gdGhlIGNvbnRleHRcbiAqIHRyZWUgaGFzIGJlZW4gZXhlcmNpemVkIHN1YnNlcXVlbnQgbWF0Y2hpbmcgdHJhdmVyc2FscyAoZXZlbiBieSBvdGhlciB0aHJlYWRzL3VzZXJzKVxuICogaXMgZmFzdC5cbiAqXG4gKlxuICogZXhhbXBsZXMgb2YgcHJvcGVydHkgbWFwcyBmb3IgZGlmZmVyZW50IHNjb3BlIGtleVxuICpcbiAqIDxjb2RlPlxuICogICAgIHtcbiAgICAgICAgJ3Zpc2libGUnOiB0cnVlLFxuICAgICAgICAnY2xhc3NfdHJhaXQnOiAnZml2ZVpvbmVzJyxcbiAgICAgICAgJ2VkaXRhYmxlJzogdHJ1ZSxcbiAgICAgICAgJ2JpbmRpbmdzJzoge1xuICAgICAgICAgICAgJ3ZhbHVlJzogJ0RlZmF1bHQgVGl0bGUnXG4gICAgICAgIH0sXG4gICAgICAgICdmaWVsZF90cmFpdCc6ICdyZXF1aXJlZCcsXG4gICAgICAgICdsYWJlbCc6ICdUaXRsZScsXG4gICAgICAgICd0eXBlJzogJ3N0cmluZycsXG4gICAgICAgICdyZXF1aXJlZCc6IHRydWUsXG4gICAgICAgICdlZGl0aW5nJzogdHJ1ZSxcbiAgICAgICAgJ3ZhbGlkJzogJ3t7KHZhbHVlICYmIHZhbHVlLmxlbmd0aCA+IDApID8gdHJ1ZSA6IFxcJ0Fuc3dlciByZXF1aXJlZFxcJ319JyxcbiAgICAgICAgJ2NvbXBvbmVudCc6ICdJbnB1dEZpZWxkQ29tcG9uZW50JyxcbiAgICAgICAgJ2ZpZWxkJzogJ3RpdGxlJyxcbiAgICAgICAgJ2xheW91dF90cmFpdCc6ICdGb3JtJyxcbiAgICAgICAgJ3RyYWl0JzogJ3JlcXVpcmVkJyxcbiAgICAgICAgJ3JhbmsnOiAyMCxcbiAgICAgICAgJ2FmdGVyJzogJ3pMZWZ0JyxcbiAgICAgICAgJ2NsYXNzJzogJ0NoZWNrUmVxdWVzdDEnXG4gICAgfVxuICpcbiAqIDwvY29kZT5cbiAqXG4gKlxuICpcbiAqIDxjb2RlPlxuICogICAgIHtcbiAgICAgICAgJ3Zpc2libGUnOiB0cnVlLFxuICAgICAgICAnY2xhc3NfdHJhaXQnOiAnZml2ZVpvbmVzJyxcbiAgICAgICAgJ2xhYmVsJzogJ0NoZWNrIFJlcXVlc3QxJyxcbiAgICAgICAgJ3pvbmVzJzogW1xuICAgICAgICAgICAgJ3pMZWZ0JyxcbiAgICAgICAgICAgICd6UmlnaHQnLFxuICAgICAgICAgICAgJ3pUb3AnLFxuICAgICAgICAgICAgJ3pCb3R0b20nLFxuICAgICAgICAgICAgJ3pEZXRhaWwnXG4gICAgICAgIF0sXG4gICAgICAgICdlZGl0aW5nJzogdHJ1ZSxcbiAgICAgICAgJ2xheW91dCc6ICcqJyxcbiAgICAgICAgJ2NvbXBvbmVudCc6ICdNZXRhRm9ybUNvbXBvbmVudCcsXG4gICAgICAgICdsYXlvdXRfdHJhaXQnOiAnRm9ybScsXG4gICAgICAgICdmaXZlWm9uZUxheW91dCc6IHRydWUsXG4gICAgICAgICd0cmFpdCc6ICdmaXZlWm9uZXMnLFxuICAgICAgICAnbGF5b3V0c0J5Wm9uZSc6IHtcblxuICAgICAgICB9LFxuICAgICAgICAnY2xhc3MnOiAnQ2hlY2tSZXF1ZXN0MScsXG4gICAgICAgICdmaWVsZHNCeVpvbmUnOiB7XG4gICAgICAgICAgICAnekxlZnQnOiBbXG4gICAgICAgICAgICAgICAgJ3RpdGxlJyxcbiAgICAgICAgICAgICAgICAnbmFtZSdcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAnek5vbmUnOiBbXG4gICAgICAgICAgICAgICAgJ2Z1bGxOYW1lJ1xuICAgICAgICAgICAgXVxuICAgICAgICB9XG4gICAgfVxuICpcbiAqIDwvY29kZT5cbiAqXG4gKlxuICpcbiAqL1xuZXhwb3J0IGNsYXNzIENvbnRleHQgZXh0ZW5kcyBFeHRlbnNpYmxlIHtcbiAgICBwcml2YXRlIHN0YXRpYyBfQ2FjaGVBY3RpdmF0aW9uczogYm9vbGVhbiA9IGZhbHNlO1xuXG5cbiAgICBzdGF0aWMgX0V4cGVuc2l2ZUNvbnRleHRDb25zaXN0ZW5jeUNoZWNrc0VuYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBzdGF0aWMgX0RlYnVnUnVsZU1hdGNoZXM6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBzdGF0aWMgX0RlYnVnX1NldHNDb3VudDogbnVtYmVyID0gMDtcblxuXG4gICAgc3RhdGljIE1heENvbnRleHRTdGFja1NpemU6IG51bWJlciA9IDIwMDtcblxuICAgIHN0YXRpYyBFbXB0eU1hcDogUHJvcGVydHlNYXAgPSBudWxsO1xuICAgIHN0YXRpYyByZWFkb25seSBFbXB0eVJlbW92ZU1hcDogTWFwPGFueSwgYW55PiA9IG5ldyBNYXA8YW55LCBhbnk+KCk7XG5cbiAgICBwcml2YXRlIF92YWx1ZXM6IE1hcDxzdHJpbmcsIGFueT4gPSBuZXcgTWFwPHN0cmluZywgYW55PigpO1xuICAgIF9lbnRyaWVzOiBBcnJheTxBc3NpZ25tZW50PiA9IFtdO1xuICAgIHByaXZhdGUgX2ZyYW1lU3RhcnRzOiBudW1iZXJbXSA9IFtdO1xuICAgIHByb3RlY3RlZCBfY3VycmVudFByb3BlcnRpZXM6IFByb3BlcnR5TWFwO1xuICAgIHByb3RlY3RlZCBfcm9vdE5vZGU6IEFjdGl2YXRpb247XG4gICAgcHJpdmF0ZSBfY3VycmVudEFjdGl2YXRpb246IEFjdGl2YXRpb247XG4gICAgcHJpdmF0ZSBfcmVjUG9vbDogQXJyYXk8QXNzaWdubWVudD4gPSBbXTtcblxuICAgIF9hY2Nlc3NvcjogUHJvcGVydHlBY2Nlc3NvcjtcblxuICAgIGlzTmVzdGVkOiBib29sZWFuO1xuXG5cbiAgICAvKipcbiAgICAgKiBJbXBsZW1lbnRhdGlvbiBub3RlczpcbiAgICAgKlxuICAgICAqIENvbnRleHQgbWFpbnRhaW5zIGEgc3RhY2sgKF9lbnRyaWVzKSBvZiBfQ29udGV4dFJlY3MgKG9uZSBwZXIgYXNzaWdubWVudCkgYXMgd2VsbCBhc1xuICAgICAqIGFzIF9mcmFtZVN0YWNrIHJlY29yZGluZyB0aGUgc3RhY2sgcG9zaXRpb25zIGZvciBlYWNoIHB1c2goKS9wb3AoKS5cblxuICAgICAqIFBlcmZvcm1hbmNlIHRocm91Z2ggYWdncmVzc2l2ZSBnbG9iYWwgY2FjaGluZyBvZiBhbGwgc3RhdGljYWxseSBjb21wdXRhdGJsZSBkYXRhOlxuICAgICAqIC0gVGhlIHN0YXRpYyAocmV1c2FibGUvaW1tdXRhYmxlKSBwYXJ0IG9mIGEgQ29udGV4dFJlYyBpcyBmYWN0b3JlZCBpbnRvIF9TdGF0aWNSZWNcbiAgICAgKiAtIFN0YXRpY1JlY3MgcmVwcmVzZW50IGluZGl2aWR1YWwgYXNzaWdubWVudHMgKGNvbnRleHQga2V5ID0gdmFsdWUpIGFuZCBjYWNoZSB0aGVcbiAgICAgKiAgICAgIHJlc3VsdGluZyBNZXRhLk1hdGNoUmVzdWx0IChhbmQgYXNzb2NpYXRlZCBQcm9wZXJ0eU1hcClcbiAgICAgKiAtIFRoZSBzdWItc3RhY2sgKG9mIGZvcndhcmQgY2hhaW5lZCkgcmVjb3JkcyBhc3NvY2lhdGVkIHdpdGggZWFjaCBleHRlcm5hbCBzZXQoKVxuICAgICAqICAgICAgKG9yIGNoYWluZWQgKmR5bmFtaWMqIHZhbHVlKSBpcyByZWNvcmRlZCBpbiBhbiBBY3RpdmF0aW9uLlxuICAgICAqIC0gUHJvY2Vzcy1nbG9iYWwgdHJlZSBvZiBBY3RpdmF0aW9uc1xuICAgICAqICAgICAgLSBlYWNoIGFjdGl2YXRpb24ga2VlcHMgbGlzdCBvZiBpdHMgQ29udGV4dEtleS9WYWx1ZS1rZXllZCBkZWNlbmRlZCBBY3RpdmF0aW9uc1xuICAgICAqXG4gICAgICogUHJvcGVydHkgQ29udGV4dHMuXG4gICAgICogICAgICBUaGUgbm90aW9uIG9mIGEgJ1Byb3BlcnR5Q29udGV4dCcgbWFrZXMgdGhlIGdvaW5nIHRyaWNreS4uLlxuICAgICAqICAgICAgIEEgJ1Byb3BlcnR5Q29udGV4dEtleScgaXMgYSBrZXkgZm9yIGFuICdlbnRpdHknIHRoYXQgcHJvcGVydGllcyBkZXNjcmliZS5cbiAgICAgKiAgICAgICAoZS5nLiBjbGFzcywgZmllbGQsIGFjdGlvbiwgYW5kIGxheW91dCBhcmUgcHJvcGVydHkgY29udGV4dCBrZXlzLCBidXQgZWRpdGluZyxcbiAgICAgKiAgICAgICBvcGVyYXRpb24sIC4uLiBhcmUgbm90KVxuICAgICAqICAgICAgIEUuZy4gT24gYW4gYXNzaWdubWVudCBzdGFjayB3aXRoIG1vZHVsZT1BZG1pbiBjbGFzcz1Gb28sIGZpZWxkPW5hbWUsIGVkaXRhYmxlPWZhbHNlLFxuICAgICAqICAgICAgIHdlIHdhbnQgdGhlIHByb3BlcnR5ICdsYWJlbCcgdG8gYmUgdGhlIGxhYmVsIGZvciB0aGUgKmZpZWxkKiwgbm90IHRoZSBjbGFzcyBvciBtb2R1bGVcbiAgICAgKiAgICAgICAtLSBpLmUuIHRoZSAqdG9wLW1vc3QqIGFzc2lnbm1lbnQgb2YgYSBQcm9wZXJ0eUNvbnRleHRLZXkgZGV0ZXJtaW5lcyB3aGljaCBwcm9wZXJ0eVxuICAgICAqICAgICAgIGNvbnRleHQgcnVsZXMgYXJlIGFjdGl2ZS5cbiAgICAgKlxuICAgICAqICBUaGVzZSBydWxlcyBhcmUgYWN0aXZhdGVkIHZpYSBhIHN5bnRoZXRpYyBjb250ZXh0IGtleSBvZiBsaWtlICdmaWVsZF9wJyBvciAnY2xhc3NfcCcuXG4gICAgICogIExvZ2ljYWxseSwgYWZ0ZXIgZWFjaCBhc3NpZ21lbnQgd2UgbmVlZCB0byBmaWd1cmUgb2Ygd2hpY2ggY29udGV4dCBrZXkgc2hvdWxkIGJlIGluXG4gICAgICogIGFmZmVjdCBhbiBzZXQgaXQgb24gdGhlIGNvbnRleHQsIGJ1dCB0aGVuIGF1dG9tYXRpY2FsbHkgcG9wIGl0IG9mZiB1cG9uIHRoZSBuZXh0XG4gICAgICogIGFzc2lnbm1lbnQgKGFuZCB0aGVuIHJlY29tcHV0ZSBhZ2FpbikuXG4gICAgICpcbiAgICAgKiAgT2YgY291cnNlLCBhY3R1YWxseSBwdXNoaW5nIGFuZCBwb3BwaW5nIGNvbnRleHQga2V5IGFzc2lnbm1lbnQgb24gZXZlcnkgc2V0KClcbiAgICAgKiAgd291bGQgYmUgZXhwZW5zaXZlIHNvIGluc3RlYWQgd2UgY2FjaGUgdGhlICdwcm9wZXJ0eUFjdGl2YXRpb24nIGFzc29jaWF0ZWQgd2l0aFxuICAgICAqICBlYWNoIGFjdGl2YXRpb24sIGFuZCB1c2UgaXRzIHZhbHVlcyBhbmQgcHJvcGVydGllcyByYXRoZXIgdGhhbiB0aG9zZSBvbiB0aGVcbiAgICAgKiAgYWN0aXZhdGlvbi5cbiAgICAgKi9cblxuICAgIHN0YXRpYyBnZXRBY3RpdmF0aW9uVHJlZShtZXRhOiBNZXRhKTogQWN0aXZhdGlvbiB7XG4gICAgICAgIC8vIHRvZG86IGNoZWNrIHRoZSBzeW50YXggQWN0aW9udmF0aW9uIGNvbnRydWN0b3IgbmFtZS5cbiAgICAgICAgbGV0IG5hbWUgPSBvYmplY3RUb05hbWUoQWN0aXZhdGlvbik7XG4gICAgICAgIGxldCByb290OiBBY3RpdmF0aW9uID0gbWV0YS5pZGVudGl0eUNhY2hlLmdldFZhbHVlKG5hbWUpO1xuICAgICAgICBpZiAoaXNCbGFuayhyb290KSkge1xuICAgICAgICAgICAgcm9vdCA9IG5ldyBBY3RpdmF0aW9uKCk7XG4gICAgICAgICAgICBtZXRhLmlkZW50aXR5Q2FjaGUuc2V0VmFsdWUobmFtZSwgcm9vdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJvb3Q7XG4gICAgfVxuXG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9tZXRhOiBNZXRhLCBwcml2YXRlIG5lc3RlZDogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgaWYgKGlzQmxhbmsoQ29udGV4dC5FbXB0eU1hcCkpIHtcbiAgICAgICAgICAgIENvbnRleHQuRW1wdHlNYXAgPSBuZXcgUHJvcGVydHlNYXAoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIENvbnRleHQuX0RlYnVnX1NldHNDb3VudCA9IDA7XG5cbiAgICAgICAgdGhpcy5fYWNjZXNzb3IgPSBuZXcgUHJvcGVydHlBY2Nlc3Nvcih0aGlzKTtcbiAgICAgICAgdGhpcy5fY3VycmVudEFjdGl2YXRpb24gPSBDb250ZXh0LmdldEFjdGl2YXRpb25UcmVlKF9tZXRhKTtcbiAgICAgICAgdGhpcy5fcm9vdE5vZGUgPSB0aGlzLl9jdXJyZW50QWN0aXZhdGlvbjtcblxuICAgICAgICB0aGlzLmlzTmVzdGVkID0gbmVzdGVkO1xuICAgIH1cblxuXG4gICAgcHVzaCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fZnJhbWVTdGFydHMucHVzaCh0aGlzLl9lbnRyaWVzLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgZ2V0IG1ldGEoKTogTWV0YSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRhO1xuICAgIH1cblxuXG4gICAgcG9wKCk6IHZvaWQge1xuICAgICAgICBsZXQgc2l6ZSA9IHRoaXMuX2ZyYW1lU3RhcnRzLmxlbmd0aDtcbiAgICAgICAgYXNzZXJ0KHNpemUgPiAwLCAnUG9wcGluZyBlbXB0eSBzdGFjaycpO1xuXG4gICAgICAgIGxldCBwb3MgPSB0aGlzLl9mcmFtZVN0YXJ0cy5wb3AoKTtcblxuICAgICAgICBsZXQgZW50cmllc1NpemU6IG51bWJlcjtcbiAgICAgICAgd2hpbGUgKChlbnRyaWVzU2l6ZSA9IHRoaXMuX2VudHJpZXMubGVuZ3RoKSA+IHBvcykge1xuICAgICAgICAgICAgbGV0IHJlY0lkeCA9IGVudHJpZXNTaXplIC0gMTtcbiAgICAgICAgICAgIGxldCByZWM6IEFzc2lnbm1lbnQgPSB0aGlzLl9lbnRyaWVzLnNwbGljZShyZWNJZHgsIDEpWzBdO1xuXG4gICAgICAgICAgICBpZiAocmVjLnNyZWMubGFzdEFzc2lnbm1lbnRJZHggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzLmRlbGV0ZShyZWMuc3JlYy5rZXkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91bmRvT3ZlcnJpZGUocmVjLCByZWNJZHgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50QWN0aXZhdGlvbiA9IChyZWNJZHggPiAwKVxuICAgICAgICAgICAgICAgID8gdGhpcy5fZW50cmllc1tyZWNJZHggLSAxXS5zcmVjLmFjdGl2YXRpb25cbiAgICAgICAgICAgICAgICA6IHRoaXMuX3Jvb3ROb2RlO1xuXG4gICAgICAgICAgICB0aGlzLmFzc2VydENvbnRleHRDb25zaXN0ZW50KCk7XG5cbiAgICAgICAgICAgIC8vIGNoZWNrIHJlYyBiYWNrIGludG8gcG9vbCBmb3IgcmV1c2VcbiAgICAgICAgICAgIHJlYy5yZXNldCgpO1xuICAgICAgICAgICAgdGhpcy5fcmVjUG9vbC5wdXNoKHJlYyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jdXJyZW50UHJvcGVydGllcyA9IG51bGw7XG4gICAgfVxuXG5cbiAgICBzZXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiB2b2lkIHtcblxuICAgICAgICB0aGlzLl9zZXQoa2V5LCB2YWx1ZSwgZmFsc2UsIGZhbHNlKTtcblxuICAgICAgICAvLyBpbXBsZW1lbnQgZGVmYXVsdCB0b1N0cmluZyBmb3Igb3VyIG9iamVjdCBzbyB3ZSBjYW4gcmV0cmlldmUgb2JqZWN0VGl0bGVcbiAgICAgICAgaWYgKGtleSA9PT0gT2JqZWN0TWV0YS5LZXlPYmplY3QpIHtcbiAgICAgICAgICAgIGxldCB0b0NoZWNrID0gdGhpcy5fdmFsdWVzLmdldChPYmplY3RNZXRhLktleU9iamVjdCk7XG4gICAgICAgICAgICBpZiAoaXNCbGFuayh0b0NoZWNrWyckdG9TdHJpbmcnXSkpIHtcbiAgICAgICAgICAgICAgICB0b0NoZWNrWyckdG9TdHJpbmcnXSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNsYXp6ID0gdGhpcy52YWx1ZXMuZ2V0KE9iamVjdE1ldGEuS2V5Q2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gVUlNZXRhLmJlYXV0aWZ5Q2xhc3NOYW1lKGNsYXp6KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBtZXJnZShrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IHZvaWQge1xuICAgICAgICB0aGlzLl9zZXQoa2V5LCB2YWx1ZSwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHNldFNjb3BlS2V5KGtleTogc3RyaW5nKSB7XG4gICAgICAgIGFzc2VydCh0aGlzLl9tZXRhLmtleURhdGEoa2V5KS5pc1Byb3BlcnR5U2NvcGUsIGtleSArICcgaXMgbm90IGEgdmFsaWQgY29udGV4dCBrZXknKTtcbiAgICAgICAgbGV0IGN1cnJlbnQ6IHN0cmluZyA9IHRoaXMuX2N1cnJlbnRQcm9wZXJ0eVNjb3BlS2V5KCk7XG5cbiAgICAgICAgLy8gQXNzZXJ0LnRoYXQoY3VycmVudCAhPSBudWxsLCAnQ2FuJ3Qgc2V0ICVzIGFzIGNvbnRleHQga2V5IHdoZW4gbm8gY29udGV4dCBrZXkgb24gc3RhY2snLFxuICAgICAgICAvLyBrZXkpOyBUT0RPOiBpZiBjdXJyZW50IGtleSBpc0NoYWluaW5nIHRoZW4gd2UgbmVlZCB0byBzZXQgYWdhaW4gdG8gZ2V0IGEgbm9uLWNoYWluaW5nXG4gICAgICAgIC8vIGFzc2lnbm1lbnRcblxuICAgICAgICBpZiAoIShrZXkgPT09IGN1cnJlbnQpKSB7XG4gICAgICAgICAgICBsZXQgdmFsOiBhbnkgPSB0aGlzLnZhbHVlcy5nZXQoa2V5KTtcbiAgICAgICAgICAgIC8vIEFzc2VydC50aGF0KHZhbCAhPSBudWxsLCAnQ2FuJ3Qgc2V0ICVzIGFzIGNvbnRleHQga2V5IHdoZW4gaXQgaGFzIG5vIHZhbHVlIGFscmVhZHlcbiAgICAgICAgICAgIC8vIG9uIHRoZSBjb250ZXh0Jywga2V5KTtcbiAgICAgICAgICAgIGlmIChpc0JsYW5rKHZhbCkpIHtcbiAgICAgICAgICAgICAgICB2YWwgPSBNZXRhLktleUFueTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0KGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCB2YWx1ZXMoKTogTWFwPHN0cmluZywgYW55PiB7XG4gICAgICAgIGxldCBwcm9wVmFsczogTWFwPHN0cmluZywgYW55PjtcbiAgICAgICAgcmV0dXJuIChMaXN0V3JhcHBlci5pc0VtcHR5KHRoaXMuX2VudHJpZXMpIHx8XG4gICAgICAgICAgICBpc0JsYW5rKFxuICAgICAgICAgICAgICAgIHByb3BWYWxzID0gKExpc3RXcmFwcGVyLmxhc3Q8QXNzaWdubWVudD4odGhpcy5fZW50cmllcykpLnByb3BlcnR5TG9jYWxWYWx1ZXMoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMpKSkgPyB0aGlzLl92YWx1ZXMgOiBwcm9wVmFscztcbiAgICB9XG5cbiAgICBnZXQgcHJvcGVydGllcygpOiBhbnkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWNjZXNzb3I7XG4gICAgfVxuXG5cbiAgICBwcm9wZXJ0eUZvcktleShrZXk6IHN0cmluZyk6IGFueSB7XG4gICAgICAgIGxldCB2YWwgPSB0aGlzLmFsbFByb3BlcnRpZXMoKS5nZXQoa2V5KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5yZXNvbHZlVmFsdWUodmFsKTtcbiAgICB9XG5cbiAgICBsaXN0UHJvcGVydHlGb3JLZXkoa2V5OiBzdHJpbmcpOiBBcnJheTxhbnk+IHtcbiAgICAgICAgbGV0IHZhbCA9IHRoaXMucHJvcGVydHlGb3JLZXkoa2V5KTtcbiAgICAgICAgcmV0dXJuIChpc0JsYW5rKHZhbCkpID8gW10gOiAoaXNBcnJheSh2YWwpKSA/IHZhbCA6IFt2YWxdO1xuICAgIH1cblxuICAgIGJvb2xlYW5Qcm9wZXJ0eUZvcktleShrZXk6IHN0cmluZywgZGVmYXVsdFZhbDogYm9vbGVhbik6IGJvb2xlYW4ge1xuICAgICAgICBsZXQgdmFsID0gdGhpcy5wcm9wZXJ0eUZvcktleShrZXkpO1xuICAgICAgICByZXR1cm4gKGlzQmxhbmsodmFsKSkgPyBkZWZhdWx0VmFsIDogQm9vbGVhbldyYXBwZXIuYm9sZWFuVmFsdWUodmFsKTtcbiAgICB9XG5cblxuICAgIGFsbFByb3BlcnRpZXMoKTogUHJvcGVydHlNYXAge1xuICAgICAgICBpZiAoaXNCbGFuayh0aGlzLl9jdXJyZW50UHJvcGVydGllcykpIHtcbiAgICAgICAgICAgIGxldCBtOiBNYXRjaFJlc3VsdCA9IHRoaXMubGFzdE1hdGNoKCk7XG4gICAgICAgICAgICBpZiAoaXNQcmVzZW50KG0pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudFByb3BlcnRpZXMgPSBtLnByb3BlcnRpZXMoKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc1ByZXNlbnQodGhpcy5fY3VycmVudFByb3BlcnRpZXMpID8gdGhpcy5fY3VycmVudFByb3BlcnRpZXMgOiBDb250ZXh0LkVtcHR5TWFwO1xuICAgIH1cblxuXG4gICAgcmVzb2x2ZVZhbHVlKHZhbHVlOiBhbnkgfCBEeW5hbWljUHJvcGVydHlWYWx1ZSk6IGFueSB7XG4gICAgICAgIGxldCBsYXN0VmFsdWU6IGFueTtcbiAgICAgICAgd2hpbGUgKHZhbHVlICE9PSBsYXN0VmFsdWUgJiYgaXNQcmVzZW50KHZhbHVlKSAmJiB2YWx1ZSBpbnN0YW5jZW9mIER5bmFtaWNQcm9wZXJ0eVZhbHVlKSB7XG4gICAgICAgICAgICBsYXN0VmFsdWUgPSB2YWx1ZTtcblxuICAgICAgICAgICAgbGV0IHByb3BWYWx1ZTogRHluYW1pY1Byb3BlcnR5VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBFeHByKSB7XG4gICAgICAgICAgICAgICAgcHJvcFZhbHVlLmFkZFR5cGVUb0NvbnRleHQoJ1VJTWV0YScsIFVJTWV0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWx1ZSA9IHByb3BWYWx1ZS5ldmFsdWF0ZSh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cblxuICAgIHN0YXRpY2FsbHlSZXNvbHZlVmFsdWUodmFsdWU6IGFueSB8IFN0YXRpY2FsbHlSZXNvbHZhYmxlKTogYW55IHtcbiAgICAgICAgbGV0IGxhc3RWYWx1ZTogYW55ID0gbnVsbDtcbiAgICAgICAgd2hpbGUgKHZhbHVlICE9PSBsYXN0VmFsdWUgJiYgaXNQcmVzZW50KHZhbHVlKSAmJiB2YWx1ZSBpbnN0YW5jZW9mIFN0YXRpY2FsbHlSZXNvbHZhYmxlKSB7XG4gICAgICAgICAgICBsYXN0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuZXZhbHVhdGUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHB1c2hBbmRSZXNvbHZlU3RhdGljKGNvbnRleHRWYWxzOiBNYXA8c3RyaW5nLCBhbnk+LCBwcm9wZXJ0eUtleTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1Jlc29sdmU6IGJvb2xlYW4pOiBhbnkge1xuICAgICAgICBsZXQgc2NvcGVLZXk6IHN0cmluZztcbiAgICAgICAgdGhpcy5wdXNoKCk7XG5cbiAgICAgICAgTWFwV3JhcHBlci5pdGVyYWJsZShjb250ZXh0VmFscykuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgaWYgKCcqJyA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzY29wZUtleSA9IGtleTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChpc1ByZXNlbnQoc2NvcGVLZXkpKSB7XG4gICAgICAgICAgICB0aGlzLnNldFNjb3BlS2V5KHNjb3BlS2V5KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdmFsID0gdGhpcy5hbGxQcm9wZXJ0aWVzKCkuZ2V0KHByb3BlcnR5S2V5KTtcbiAgICAgICAgdmFsID0gc3RhdGljUmVzb2x2ZSA/IHRoaXMuc3RhdGljYWxseVJlc29sdmVWYWx1ZSh2YWwpIDogdGhpcy5yZXNvbHZlVmFsdWUodmFsKTtcbiAgICAgICAgdGhpcy5wb3AoKTtcblxuICAgICAgICByZXR1cm4gdmFsO1xuXG4gICAgfVxuXG4gICAgcHVzaEFuZFJlc29sdmUoY29udGV4dFZhbHM6IE1hcDxzdHJpbmcsIGFueT4sIHByb3BlcnR5S2V5OiBzdHJpbmcpOiBhbnkge1xuICAgICAgICByZXR1cm4gdGhpcy5wdXNoQW5kUmVzb2x2ZVN0YXRpYyhjb250ZXh0VmFscywgcHJvcGVydHlLZXksIGZhbHNlKTtcbiAgICB9XG5cbiAgICAvLyBhICh1c2FibGUpIHNuYXBzaG90IG9mIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBjb250ZXh0XG4gICAgc25hcHNob3QoKTogU25hcHNob3Qge1xuICAgICAgICByZXR1cm4gbmV3IFNuYXBzaG90KHRoaXMpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50IGN1cnJlbnQgYWN0aXZlIGFzc2lnbm1lbnQgbGlzdCBtZWFuaW5nIGl0IHdpbGwgbm90IGluY2x1ZGUgYW55IGVudHJpZXMgd2hpY2hcbiAgICAgKiB3ZXJlIG92ZXJ3cml0dGVuIGJ5IHNvbWUgbGF0ZSBlbnRyeSBoYXZpbmcgdGhlIHNhbWUga2V5LlxuICAgICAqXG4gICAgICogSXQgZG9lcyBub3QgaW5jbHVkZSBlbnRyaWVzIHRoYXQgd2VyZSBwdXNoZWQgdG8gc3RhY2sgZnJvbSBhbnkgUHJvcGVydHkgLT4gU2VsZWN0b3JcbiAgICAgKiBwcm9wYWdhdGlvbi4gVGhpcyBjcmVhdGVzIHNoZWxsIGNvcHkgYW5kIGlnbm9yaW5nIGFsbCBsYXN0IE1hdGNoZXMgd2hpY2ggY291bGQgYmUgZnJvbVxuICAgICAqIHNvbWUgcHJldmlvdXMgYXNzaWdubWVudHMgdGhhdCBhcmUgbm93IHJlcGxhY2VkIHdpdGggc29tZSBuZXcgb25lc1xuICAgICAqXG4gICAgICovXG4gICAgYWN0aXZlQXNzaWdubWVudHMoKTogQXJyYXk8QXNzaWdubWVudFNuYXBzaG90PiB7XG5cbiAgICAgICAgbGV0IGxpc3Q6IEFycmF5PEFzc2lnbm1lbnRTbmFwc2hvdD4gPSBuZXcgQXJyYXk8QXNzaWdubWVudFNuYXBzaG90PigpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBjID0gdGhpcy5fZW50cmllcy5sZW5ndGg7IGkgPCBjOyBpKyspIHtcbiAgICAgICAgICAgIGxldCByZWM6IEFzc2lnbm1lbnQgPSB0aGlzLl9lbnRyaWVzW2ldO1xuICAgICAgICAgICAgaWYgKHJlYy5tYXNrZWRCeUlkeCA9PT0gMCAmJiAhcmVjLnNyZWMuZnJvbUNoYWluaW5nKSB7XG4gICAgICAgICAgICAgICAgbGV0IGE6IEFzc2lnbm1lbnRTbmFwc2hvdCA9IG5ldyBBc3NpZ25tZW50U25hcHNob3QoKTtcbiAgICAgICAgICAgICAgICBhLmtleSA9IHJlYy5zcmVjLmtleTtcbiAgICAgICAgICAgICAgICBhLnZhbHVlID0gcmVjLnZhbDtcbiAgICAgICAgICAgICAgICBhLnNhbGllbmNlID0gcmVjLnNyZWMuc2FsaWVuY2U7XG4gICAgICAgICAgICAgICAgbGlzdC5wdXNoKGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaXN0O1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBTaW1pbGFyIGFzIDxjb2RlPmFjdGl2ZUFzc2lnbm1lbnRzPC9jb2RlPiBidXQgZG8gaW5jbHVkZSBhbHNvIHRob3NlIHRoYXQgd2VyZSByZXBsYWNlZCBsYXRlclxuICAgICAqIG9uIHdpdGggYXNzaWdubWVudHMgaGF2aW5nIHRoZSBzYW1lIGtleS5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgbmVlZGVkIGZvciBjYXNlcyB3aGVyZSB3ZSBuZWVkIHRvIGhhdmUgZGVlcCBjb3B5IG9mIGN1cnJlbnQgc3RhdGUgYWxvbmcgd2l0aFxuICAgICAqIGFsbCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICovXG4gICAgYWxsQXNzaWdubWVudHMoKTogQXJyYXk8QXNzaWdubWVudFNuYXBzaG90PiB7XG5cbiAgICAgICAgbGV0IGxpc3Q6IEFycmF5PEFzc2lnbm1lbnRTbmFwc2hvdD4gPSBuZXcgQXJyYXk8QXNzaWdubWVudFNuYXBzaG90PigpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBjID0gdGhpcy5fZW50cmllcy5sZW5ndGg7IGkgPCBjOyBpKyspIHtcbiAgICAgICAgICAgIGxldCByZWM6IEFzc2lnbm1lbnQgPSB0aGlzLl9lbnRyaWVzW2ldO1xuICAgICAgICAgICAgaWYgKCFyZWMuc3JlYy5mcm9tQ2hhaW5pbmcpIHtcbiAgICAgICAgICAgICAgICBsZXQgYTogQXNzaWdubWVudFNuYXBzaG90ID0gbmV3IEFzc2lnbm1lbnRTbmFwc2hvdCgpO1xuICAgICAgICAgICAgICAgIGEua2V5ID0gcmVjLnNyZWMua2V5O1xuICAgICAgICAgICAgICAgIGEudmFsdWUgPSByZWMudmFsO1xuICAgICAgICAgICAgICAgIGEuc2FsaWVuY2UgPSByZWMuc3JlYy5zYWxpZW5jZTtcbiAgICAgICAgICAgICAgICBsaXN0LnB1c2goYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuXG5cbiAgICBfc2V0KGtleTogc3RyaW5nLCB2YWx1ZTogYW55LCBtZXJnZTogYm9vbGVhbiwgY2hhaW5pbmc6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgbGV0IHN2YWwgPSB0aGlzLl9tZXRhLnRyYW5zZm9ybVZhbHVlKGtleSwgdmFsdWUpO1xuICAgICAgICBsZXQgZGlkU2V0ID0gZmFsc2U7XG5cbiAgICAgICAgbGV0IHJlZ2lzdHJ5ID0gKDxVSU1ldGE+dGhpcy5tZXRhKS5jb21wb25lbnRSZWdpc3RyeTtcbiAgICAgICAgaWYgKGtleSA9PT0gT2JqZWN0TWV0YS5LZXlPYmplY3QgJiYgaXNQcmVzZW50KHJlZ2lzdHJ5KSkge1xuICAgICAgICAgICAgcmVnaXN0cnkucmVnaXN0ZXJUeXBlKGNsYXNzTmFtZSh2YWx1ZSksIHZhbHVlLmNvbnN0cnVjdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBhY3RpdmF0aW9uOiBBY3RpdmF0aW9uID0gdGhpcy5fY3VycmVudEFjdGl2YXRpb24uZ2V0Q2hpbGRBY3RpdmF0aW9uKGtleSwgc3ZhbCxcbiAgICAgICAgICAgIGNoYWluaW5nKTtcblxuICAgICAgICBpZiAoaXNCbGFuayhhY3RpdmF0aW9uKSkge1xuICAgICAgICAgICAgZGlkU2V0ID0gdGhpcy5fY3JlYXRlTmV3RnJhbWVGb3JTZXQoa2V5LCBzdmFsLCB2YWx1ZSwgbWVyZ2UsIGNoYWluaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQcmVzZW50KGFjdGl2YXRpb24pKSB7XG4gICAgICAgICAgICBkaWRTZXQgPSB0aGlzLl9hcHBseUFjdGl2YXRpb24oYWN0aXZhdGlvbiwgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpZFNldCkge1xuICAgICAgICAgICAgdGhpcy5hd2FrZUN1cnJlbnRBY3RpdmF0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZXdDb250ZXh0UmVjKCk6IEFzc2lnbm1lbnQge1xuICAgICAgICBsZXQgY291bnQgPSB0aGlzLl9yZWNQb29sLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIChjb3VudCA+IDApID8gdGhpcy5fcmVjUG9vbC5zcGxpY2UoY291bnQgLSAxLCAxKVswXSA6IG5ldyBBc3NpZ25tZW50KCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBDYWNoZWQgY2FzZTogYXBwbHkgYSBwcmV2aW91c2x5IGNvbXB1dGVkIEFjdGl2YXRpb25cbiAgICAgKi9cbiAgICBfYXBwbHlBY3RpdmF0aW9uKGFjdGl2YXRpb246IEFjdGl2YXRpb24sIGZpcnN0VmFsOiBhbnkpOiBib29sZWFuIHtcbiAgICAgICAgYXNzZXJ0KGFjdGl2YXRpb24uX3BhcmVudCA9PT0gdGhpcy5fY3VycmVudEFjdGl2YXRpb24sXG4gICAgICAgICAgICAnQXR0ZW1wdCB0byBhcHBseSBhY3RpdmF0aW9uIG9uIG1pc21hdGNoZWQgcGFyZW50Jyk7XG5cbiAgICAgICAgaWYgKHRoaXMuX2VudHJpZXMubGVuZ3RoICE9PSBhY3RpdmF0aW9uLl9vcmlnRW50cnlDb3VudCkge1xuICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLFxuICAgICAgICAgICAgICAgICdNaXNtYXRjaGVkIGNvbnRleHQgc3RhY2sgc2l6ZSAoJXMpIGZyb20gd2hlbiBhY3RpdmF0aW9uIHdhcyBwb3BwZWQgJyArXG4gICAgICAgICAgICAgICAgdGhpcy5fZW50cmllcy5sZW5ndGggKyAnICcgKyBhY3RpdmF0aW9uLl9vcmlnRW50cnlDb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNvdW50ID0gYWN0aXZhdGlvbi5fcmVjcy5sZW5ndGg7XG4gICAgICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgbGV0IHNyZWM6IFN0YXRpY1JlYyA9IGFjdGl2YXRpb24uX3JlY3NbaV07XG4gICAgICAgICAgICBsZXQgcmVjOiBBc3NpZ25tZW50ID0gdGhpcy5uZXdDb250ZXh0UmVjKCk7XG4gICAgICAgICAgICByZWMuc3JlYyA9IHNyZWM7XG5cbiAgICAgICAgICAgIC8vIEFwcGx5IG1hc2tpbmcgZm9yIGFueSBwcm9wZXJ0eSB0aGF0IHdlIG1hc2sgb3V0XG4gICAgICAgICAgICBpZiAoc3JlYy5sYXN0QXNzaWdubWVudElkeCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcmVwYXJlRm9yT3ZlcnJpZGUodGhpcy5fZW50cmllcy5sZW5ndGgsIHNyZWMubGFzdEFzc2lnbm1lbnRJZHgpO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIHJlYy52YWwgPSAoaSA9PT0gMCAmJiAhdGhpcy5tZXRhLmlzTnVsbE1hcmtlcihmaXJzdFZhbCkpID8gZmlyc3RWYWwgOiBzcmVjLnZhbDtcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlcy5zZXQoc3JlYy5rZXksIHJlYy52YWwpO1xuICAgICAgICAgICAgdGhpcy5fZW50cmllcy5wdXNoKHJlYyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY3VycmVudEFjdGl2YXRpb24gPSBhY3RpdmF0aW9uO1xuICAgICAgICB0aGlzLl9jdXJyZW50UHJvcGVydGllcyA9IG51bGw7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG5cbiAgICBwcml2YXRlIGF3YWtlQ3VycmVudEFjdGl2YXRpb24oKTogdm9pZCB7XG4gICAgICAgIC8vIFNlZSBpZiB0aGlzIGFjdGl2YXRpb24gcmVxdWlyZXMgZnVydGhlciBjaGFpbmluZ1xuICAgICAgICBsZXQgY3VycmVudEFjdGl2YXRpb24gPSB0aGlzLl9jdXJyZW50QWN0aXZhdGlvbjtcbiAgICAgICAgbGV0IGRlZmVycmVkQXNzaWdubWVudHM6IEFycmF5PERlZmVycmVkQXNzaWdubWVudD4gPSBjdXJyZW50QWN0aXZhdGlvbi5kZWZlcnJlZEFzc2lnbm1lbnRzO1xuICAgICAgICBpZiAoaXNQcmVzZW50KGRlZmVycmVkQXNzaWdubWVudHMpKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5RGVmZXJyZWRBc3NpZ25tZW50cyhkZWZlcnJlZEFzc2lnbm1lbnRzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXBwbHlEZWZlcnJlZEFzc2lnbm1lbnRzKGRlZmVycmVkQXNzaWdubWVudHM6IEFycmF5PERlZmVycmVkQXNzaWdubWVudD4pOiB2b2lkIHtcbiAgICAgICAgZm9yIChsZXQgZGEgb2YgIGRlZmVycmVkQXNzaWdubWVudHMpIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSB0aGF0IGRlZmVycmVkIHZhbHVlIHN0aWxsIGFwcGxpZXNcbiAgICAgICAgICAgIGxldCBjdXJyZW50UHJvcFZhbHVlID0gdGhpcy5zdGF0aWNhbGx5UmVzb2x2ZVZhbHVlKHRoaXMuYWxsUHJvcGVydGllcygpLmdldChkYS5rZXkpKTtcblxuICAgICAgICAgICAgaWYgKGRhLnZhbHVlID09PSBjdXJyZW50UHJvcFZhbHVlKSB7XG5cbiAgICAgICAgICAgICAgICBsZXQgcmVzb2x2ZWRWYWx1ZSA9IHRoaXMucmVzb2x2ZVZhbHVlKGRhLnZhbHVlKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3NldChkYS5rZXksIHJlc29sdmVkVmFsdWUsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gcHJpbnQoJ19zZXQgU0tJUFBJTkcgZGVmZXJyZWQgYXNzaWdubWVudCBvZiBkZXJpdmVkIHZhbHVlOiAlcyA8LSAlcyAtLScgK1xuICAgICAgICAgICAgICAgIC8vICAgICAnIG5vIGxvbmdlciBtYXRjaGVzIHByb3BlcnR5IGluIGNvbnRleHQ6ICVzJyAsIGRhLmtleSAsIGRhLnZhbHVlICxcbiAgICAgICAgICAgICAgICAvLyBjdXJyZW50UHJvcFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgX2luRGVjbGFyZSgpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IG1hdGNoOiBNYXRjaFJlc3VsdCA9IHRoaXMubGFzdE1hdGNoV2l0aG91dENvbnRleHRQcm9wcygpO1xuICAgICAgICByZXR1cm4gaXNQcmVzZW50KG1hdGNoKSAmJiAobWF0Y2guX2tleXNNYXRjaGVkTWFzayAmIHRoaXMuX21ldGEuZGVjbGFyZUtleU1hc2spICE9PSAwO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgIE5vbi1jYWNoZWQgYWNjZXNzOiBjcmVhdGUgYSBuZXcgYWN0aXZhdGlvblxuICAgICAqL1xuICAgIF9jcmVhdGVOZXdGcmFtZUZvclNldChrZXk6IHN0cmluZywgc3ZhbHVlOiBhbnksIHZhbHVlOiBhbnksIG1lcmdlOiBib29sZWFuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFpbmluZzogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBsYXN0QWN0aXZhdGlvbjogQWN0aXZhdGlvbiA9IHRoaXMuX2N1cnJlbnRBY3RpdmF0aW9uO1xuICAgICAgICBsZXQgbmV3QWN0aXZhdGlvbjogQWN0aXZhdGlvbiA9IG5ldyBBY3RpdmF0aW9uKGxhc3RBY3RpdmF0aW9uKTtcbiAgICAgICAgbmV3QWN0aXZhdGlvbi5fb3JpZ0VudHJ5Q291bnQgPSB0aGlzLl9lbnRyaWVzLmxlbmd0aDtcbiAgICAgICAgdGhpcy5fY3VycmVudEFjdGl2YXRpb24gPSBuZXdBY3RpdmF0aW9uO1xuXG4gICAgICAgIC8vIHNldCB0aGlzIHZhbHVlXG4gICAgICAgIGxldCBkaWRTZXQ6IGJvb2xlYW4gPSB0aGlzLl9zZXQyKGtleSwgc3ZhbHVlLCB2YWx1ZSwgbWVyZ2UsIGNoYWluaW5nKTtcbiAgICAgICAgLy8gbWlycm9yIHByb3BlcnRpZXNcbiAgICAgICAgaWYgKGRpZFNldCkge1xuICAgICAgICAgICAgd2hpbGUgKHRoaXMuX2NoZWNrQXBwbHlQcm9wZXJ0aWVzKCkpIHtcbiAgICAgICAgICAgICAgICAvKiByZXBlYXQgKi9cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbWVtYmVyIGZvciB0aGUgZnV0dXJlXG4gICAgICAgIGlmIChDb250ZXh0Ll9DYWNoZUFjdGl2YXRpb25zKSB7XG4gICAgICAgICAgICBsYXN0QWN0aXZhdGlvbi5jYWNoZUNoaWxkQWN0aXZhdGlvbihrZXksIHN2YWx1ZSwgbmV3QWN0aXZhdGlvbiwgY2hhaW5pbmcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2N1cnJlbnRBY3RpdmF0aW9uID0gKGRpZFNldCkgPyBuZXdBY3RpdmF0aW9uIDogbGFzdEFjdGl2YXRpb247XG4gICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50QWN0aXZhdGlvbiAhPT0gbGFzdEFjdGl2YXRpb247XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgbGF6aWx5IHRvIGNvbXB1dGUgdGhlIHByb3BlcnR5IGFjdGl2YXRpb24gZm9yIHRoaXMgYWN0aXZhdGlvblxuICAgICAqIENvbXB1dGUgdGhlIHN0YXRpYyBwYXJ0IG9mIHRoZSBwcm9wZXJ0eSBhY3RpdmF0aW9uXG4gICAgICogd2UgYWNjdW11bGF0ZSB0aGUgcHJvcGVydHkgc2V0dGluZ3Mgb24gYSBzaWRlIGFjdGl2YXRpb24gb2ZmIHRoZSBtYWluIHN0YWNrXG4gICAgICogYW5kIGFwcGx5IGl0IHZpcnR1YWxseSBpZiBvdXIgcGFyZW50IGlzIG5vdCBjb3ZlcmVkXG4gICAgICogICh0aGF0IHdheSB3ZSBkb24ndCBoYXZlIHRvIGFwcGx5IGFuZCB1bmFwcGx5IGFsbCB0aGUgdGltZSlcbiAgICAgKi9cbiAgICBfY3JlYXRlTmV3UHJvcGVydHlDb250ZXh0QWN0aXZhdGlvbihwYXJlbnRBY3RpdmF0aW9uOiBBY3RpdmF0aW9uKTogQWN0aXZhdGlvbiB7XG5cbiAgICAgICAgdGhpcy5wdXNoKCk7XG4gICAgICAgIGxldCBwcm9wQWN0aXZhdGlvbjogQWN0aXZhdGlvbiA9IG5ldyBBY3RpdmF0aW9uKHBhcmVudEFjdGl2YXRpb24pO1xuICAgICAgICBwcm9wQWN0aXZhdGlvbi5fb3JpZ0VudHJ5Q291bnQgPSB0aGlzLl9lbnRyaWVzLmxlbmd0aDtcblxuICAgICAgICB0aGlzLl9jdXJyZW50QWN0aXZhdGlvbiA9IHByb3BBY3RpdmF0aW9uO1xuICAgICAgICBsZXQgb3JpZ1ZhbHVlcyA9IHRoaXMuX3ZhbHVlcztcblxuICAgICAgICBsZXQgbmVzdGVkTWFwOiBOZXN0ZWRNYXA8c3RyaW5nLCBhbnk+ID0gbmV3IE5lc3RlZE1hcDxzdHJpbmcsIGFueT4ob3JpZ1ZhbHVlcyk7XG4gICAgICAgIHRoaXMuX3ZhbHVlcyA9IG5lc3RlZE1hcDtcbiAgICAgICAgdGhpcy5hcHBseVByb3BlcnR5Q29udGV4dEFuZENoYWluKCk7XG5cbiAgICAgICAgaWYgKHByb3BBY3RpdmF0aW9uLl9yZWNzLmxlbmd0aCA+IDAgfHwgaXNQcmVzZW50KHByb3BBY3RpdmF0aW9uLmRlZmVycmVkQXNzaWdubWVudHMpKSB7XG4gICAgICAgICAgICBwcm9wQWN0aXZhdGlvbi5fbmVzdGVkVmFsdWVzID0gbmVzdGVkTWFwO1xuICAgICAgICAgICAgdGhpcy5fdmFsdWVzID0gQ29udGV4dC5FbXB0eVJlbW92ZU1hcDsgIC8vIGhhY2sgLS0gZW1wdHkgbWFwIHNvIHRoYXQgdW5kbyBpcyBub29wIC0tXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gKChOZXN0ZWRNYXApX3ZhbHVlcykuZHVwKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9wQWN0aXZhdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wb3AoKTtcbiAgICAgICAgdGhpcy5fdmFsdWVzID0gb3JpZ1ZhbHVlcztcbiAgICAgICAgdGhpcy5fY3VycmVudEFjdGl2YXRpb24gPSBwYXJlbnRBY3RpdmF0aW9uO1xuXG4gICAgICAgIHJldHVybiBwcm9wQWN0aXZhdGlvbjtcbiAgICB9XG5cbiAgICBfYXBwbHlQcm9wZXJ0eUFjdGl2YXRpb24ocHJvcEFjdGl2YXRpb246IEFjdGl2YXRpb24sIHJlYzogQXNzaWdubWVudCkge1xuICAgICAgICBsZXQgcHJvcFZhbHVlcyA9IHRoaXMuX3ZhbHVlcztcbiAgICAgICAgaWYgKGlzUHJlc2VudChwcm9wQWN0aXZhdGlvbi5fbmVzdGVkVmFsdWVzKSkge1xuICAgICAgICAgICAgcHJvcFZhbHVlcyA9IHByb3BBY3RpdmF0aW9uLl9uZXN0ZWRWYWx1ZXMucmVwYXJlbnRlZE1hcChwcm9wVmFsdWVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNldCB1cCBwcm9wTG9jYWwgcmVzdWx0c1xuICAgICAgICAvLyBOb3csIHNlZSBpZiB3ZSBuZWVkIHRvIGNvbXB1dGUgYSBkeW5hbWljIHByb3BlcnR5IGFjdGl2YXRpb24gYXMgd2VsbFxuICAgICAgICBpZiAoaXNQcmVzZW50KHByb3BBY3RpdmF0aW9uLmRlZmVycmVkQXNzaWdubWVudHMpKSB7XG4gICAgICAgICAgICB0aGlzLnB1c2goKTtcbiAgICAgICAgICAgIC8vIG5lc3QgYSBkeW5hbWljIG5lc3RlZCBtYXAgb24gb3VyIHN0YXRpYyBuZXN0ZWQgbWFwICh3aGljaCBpcyBvbiBvdXIgbGFzdCBkeW5hbWljXG4gICAgICAgICAgICAvLyBuZXN0ZWQgbWFwLi4uKVxuICAgICAgICAgICAgbGV0IG9yaWdWYWx1ZXMgPSB0aGlzLl92YWx1ZXM7XG4gICAgICAgICAgICB0aGlzLl92YWx1ZXMgPSBuZXcgTmVzdGVkTWFwPHN0cmluZywgYW55Pihwcm9wVmFsdWVzKTtcbiAgICAgICAgICAgIHRoaXMuX2FwcGx5QWN0aXZhdGlvbihwcm9wQWN0aXZhdGlvbiwgTWV0YS5OdWxsTWFya2VyKTtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlEZWZlcnJlZEFzc2lnbm1lbnRzKHByb3BBY3RpdmF0aW9uLmRlZmVycmVkQXNzaWdubWVudHMpO1xuXG4gICAgICAgICAgICByZWMuX3Byb3BlcnR5TG9jYWxWYWx1ZXMgPSB0aGlzLl92YWx1ZXM7XG4gICAgICAgICAgICByZWMuX3Byb3BlcnR5TG9jYWxTcmVjID0gTGlzdFdyYXBwZXIubGFzdCh0aGlzLl9lbnRyaWVzKS5zcmVjO1xuXG4gICAgICAgICAgICB0aGlzLl92YWx1ZXMgPSBDb250ZXh0LkVtcHR5UmVtb3ZlTWFwOyAgLy8gaGFjayAtLSBlbXB0eSBtYXAgc28gdGhhdCB1bmRvIGlzIG5vb3AgLS1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAoKE5lc3RlZE1hcClfdmFsdWVzKS5kdXAoKTtcbiAgICAgICAgICAgIHRoaXMucG9wKCk7XG4gICAgICAgICAgICB0aGlzLl92YWx1ZXMgPSBvcmlnVmFsdWVzO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBjYW4gdXNlIHN0YXRpYyB2ZXJzaW9uc1xuICAgICAgICAgICAgcmVjLl9wcm9wZXJ0eUxvY2FsVmFsdWVzID0gcHJvcFZhbHVlcztcbiAgICAgICAgICAgIHJlYy5fcHJvcGVydHlMb2NhbFNyZWMgPSBMaXN0V3JhcHBlci5sYXN0KHByb3BBY3RpdmF0aW9uLl9yZWNzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIHRvZG86IGFueSBlcXVhbHMgb2xkIHZhID09PSBuZXcgdmFsXG4gICAgX2lzTmV3VmFsdWUob2xkVmFsOiBhbnksIG5ld1ZhbDogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAob2xkVmFsICE9PSBuZXdWYWwgJiYgKGlzUHJlc2VudChvbGRWYWwpIHx8XG4gICAgICAgICAgICAoIW9sZFZhbCA9PT0gbmV3VmFsICYmICghaXNBcnJheShvbGRWYWwpKSB8fCAhKExpc3RXcmFwcGVyLmNvbnRhaW5zKG9sZFZhbCwgbmV3VmFsKSkpKSk7XG4gICAgfVxuXG5cbiAgICBpc0RlY2xhcmUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBpc1ByZXNlbnQodGhpcy5wcm9wZXJ0eUZvcktleShNZXRhLktleURlY2xhcmUpKTtcbiAgICB9XG5cblxuICAgIHByb3RlY3RlZCBhc3NlcnRDb250ZXh0Q29uc2lzdGVudCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKCFDb250ZXh0Ll9FeHBlbnNpdmVDb250ZXh0Q29uc2lzdGVuY3lDaGVja3NFbmFibGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBWZXJpZnkgdGhhdCBlYWNoIHZhbHVlIGluIGNvbnRleHQgaGFzIG1hdGNoaW5nIChlbmFibGVkKSBjb250ZXh0IHJlY29yZFxuXG5cbiAgICAgICAgTWFwV3JhcHBlci5pdGVyYWJsZSh0aGlzLl92YWx1ZXMpLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgIGxldCBsYXN0QXNzaWdubWVudElkeCA9IHRoaXMuZmluZExhc3RBc3NpZ25tZW50T2ZLZXkoa2V5KTtcbiAgICAgICAgICAgIGFzc2VydChsYXN0QXNzaWdubWVudElkeCA+PSAwLCAnVmFsdWUgaW4gY29udGV4dCBidXQgbm8gYXNzaWdubWVudCByZWNvcmQgZm91bmQgJyArXG4gICAgICAgICAgICAgICAga2V5ICsgJyA9ICcgKyB2YWx1ZSk7XG5cbiAgICAgICAgICAgIGxldCBjb250ZXh0VmFsID0gdGhpcy5fZW50cmllc1tsYXN0QXNzaWdubWVudElkeF0udmFsO1xuXG4gICAgICAgICAgICBhc3NlcnQodmFsdWUgPT09IGNvbnRleHRWYWwgfHwgKGlzUHJlc2VudCh2YWx1ZSkgJiYgdmFsdWUgPT09IGNvbnRleHRWYWwpLFxuICAgICAgICAgICAgICAgICdWYWx1ZSBpbiBjb250ZXh0ICBkb2VzbnQgbWF0Y2ggdmFsdWUgb24gc3RhY2sgJyArIHZhbHVlICsgJyAvICcgKyBjb250ZXh0VmFsKTtcblxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBjaGVjayBlbnRyaWVzIGZvciBwcm9wZXIgcmVsYXRpb25zaGlwIHdpdGggYW55IHByZXZpb3VzIHJlY29yZHMgdGhhdCB0aGV5IG92ZXJyaWRlXG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLl9lbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBsZXQgcjogQXNzaWdubWVudCA9IHRoaXMuX2VudHJpZXNbaV07XG4gICAgICAgICAgICBsZXQgZm91bmRGaXJzdCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gaSAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgICAgICAgICAgbGV0IHByZWQ6IEFzc2lnbm1lbnQgPSB0aGlzLl9lbnRyaWVzW2pdO1xuICAgICAgICAgICAgICAgIGlmIChwcmVkLnNyZWMua2V5ID09PSByLnNyZWMua2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFByZWRlY2Vzc29ycyBtdXN0IGJlIG1hc2tlZFxuICAgICAgICAgICAgICAgICAgICBhc3NlcnQoKCFmb3VuZEZpcnN0ICYmIHByZWQubWFza2VkQnlJZHggPT09IGkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoKGZvdW5kRmlyc3QgfHwgcHJlZC5zcmVjLmZyb21DaGFpbmluZykgJiYgcHJlZC5tYXNrZWRCeUlkeCA+IDApLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAnUHJlZGVjZXNzb3IgQSBkb2VzIG5vdCBoYXZlIG1hdGNoaW5nIG1hc2tlZEJ5SWR4IEIgIGZvciBvdmVycmlkZSBDOicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJlZC5zcmVjLmtleSArICcgPSAnICsgcHJlZC52YWwgKyAnLCAnICsgcHJlZC5tYXNrZWRCeUlkeCArICcsICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgaSArICcgPSAnICsgci52YWxcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICBhc3NlcnQoKCghZm91bmRGaXJzdCAmJiByLnNyZWMubGFzdEFzc2lnbm1lbnRJZHggPT09IGopIHx8IGZvdW5kRmlyc3QgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZWQuc3JlYy5mcm9tQ2hhaW5pbmcpLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAnT3ZlcnJpZGUgQTE9QTIgZG9lcyBub3QgaGF2ZSBwcm9wZXIgbGFzdEFzc2lnbm1lbnRJZHggQjEhPUIyICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2ZvciBwcmVkZWNlc3NvciBDJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVkLnNyZWMua2V5ICsgJyA9ICcgKyBwcmVkLnZhbCArICcsICcgKyByLnNyZWMubGFzdEFzc2lnbm1lbnRJZHggKyAnID0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBqICsgJywgJyArIHByZWQudmFsKTtcbiAgICAgICAgICAgICAgICAgICAgZm91bmRGaXJzdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBfc2V0MihrZXk6IHN0cmluZywgc3ZhbHVlOiBhbnksIHZhbHVlOiBhbnksIG1lcmdlOiBib29sZWFuLCBpc0NoYWluaW5nOiBib29sZWFuKTogYm9vbGVhbiB7XG5cbiAgICAgICAgQ29udGV4dC5fRGVidWdfU2V0c0NvdW50Kys7XG4gICAgICAgIC8vIHByaW50KCdTZXR0aW5nIGtleS92YWxlIG9udG8gc3RhY2s6ICcgKyBrZXkgKyAnPScgKyB2YWx1ZSk7XG4gICAgICAgIGxldCBoYXNPbGRWYWx1ZSA9IHRoaXMuX3ZhbHVlcy5oYXMoa2V5KSAmJiBpc1ByZXNlbnQodGhpcy5fdmFsdWVzLmdldChrZXkpKTtcbiAgICAgICAgbGV0IG9sZFZhbCA9IGhhc09sZFZhbHVlID8gdGhpcy5fdmFsdWVzLmdldChrZXkpIDogbnVsbDtcblxuICAgICAgICBsZXQgaXNOZXdWYWx1ZSA9ICFoYXNPbGRWYWx1ZSB8fCB0aGlzLl9pc05ld1ZhbHVlKG9sZFZhbCwgdmFsdWUpO1xuXG4gICAgICAgIGxldCBtYXRjaGluZ1Byb3BLZXlBc3NpZ25tZW50ID0gIWlzTmV3VmFsdWUgJiYgIWlzQ2hhaW5pbmcgJiZcbiAgICAgICAgICAgICgodGhpcy5fbWV0YS5rZXlEYXRhKGtleSkuaXNQcm9wZXJ0eVNjb3BlKSAmJlxuICAgICAgICAgICAgICAgIGtleSAhPT0gdGhpcy5fY3VycmVudFByb3BlcnR5U2NvcGVLZXkoKSk7XG4gICAgICAgIGlmIChpc05ld1ZhbHVlIHx8IG1hdGNoaW5nUHJvcEtleUFzc2lnbm1lbnQpIHtcbiAgICAgICAgICAgIGxldCBsYXN0TWF0Y2g6IE1hdGNoUmVzdWx0O1xuICAgICAgICAgICAgbGV0IG5ld01hdGNoOiBNYXRjaFJlc3VsdDtcblxuICAgICAgICAgICAgbGV0IHNhbGllbmNlID0gdGhpcy5fZnJhbWVTdGFydHMubGVuZ3RoO1xuICAgICAgICAgICAgbGV0IGxhc3RBc3NpZ25tZW50SWR4ID0gLTE7XG4gICAgICAgICAgICBpZiAoaXNCbGFuayhvbGRWYWwpKSB7XG4gICAgICAgICAgICAgICAgbGFzdE1hdGNoID0gdGhpcy5sYXN0TWF0Y2hXaXRob3V0Q29udGV4dFByb3BzKCk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgcmVjb21wdXRlIHRoYXQgbWF0Y2ggdXAgdG8gdGhpcyBwb2ludCBieSByZWNvbXB1dGluZyBmb3J3YXJkXG4gICAgICAgICAgICAgICAgLy8gZnJvbSB0aGUgcG9pbnQgb2YgdGhlIGxhc3QgYXNzaWdubWVudCB0byB0aGlzIGtleSAoc2tpcHBpbmcgaXQpLCB0aGVuXG4gICAgICAgICAgICAgICAgLy8gbWF0Y2ggYWdhaW5zdCB0aGUgYXJyYXkgb2Ygb3VyIHZhbHVlIGFuZCB0aGUgb2xkXG5cbiAgICAgICAgICAgICAgICBsZXQgcmVjSWR4ID0gdGhpcy5fZW50cmllcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgbGFzdEFzc2lnbm1lbnRJZHggPSB0aGlzLmZpbmRMYXN0QXNzaWdubWVudE9mS2V5KGtleSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGxhc3RBc3NpZ25tZW50SWR4ID49IDAsXG4gICAgICAgICAgICAgICAgICAgICdWYWx1ZSBpbiBjb250ZXh0IGJ1dCBubyBhc3NpZ25tZW50IHJlY29yZCBmb3VuZCAnICsga2V5ICsgJyA9ICcgKyBvbGRWYWwpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoaW5nUHJvcEtleUFzc2lnbm1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlYXAgdmVyc2lvbiBvZiBtYXNraW5nIGZvciBhIG1hdGNoaW5nIHNldDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW50cmllc1tsYXN0QXNzaWdubWVudElkeF0ubWFza2VkQnlJZHggPSByZWNJZHg7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RNYXRjaCA9IHRoaXMubGFzdE1hdGNoV2l0aG91dENvbnRleHRQcm9wcygpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYmUgYWJsZSB0byBvdmVycmlkZSBhIG5vbi1jaGFpbmluZyBhc3NpZ25tZW50LiAgT3VyIHByb2JsZW0gaXMsIHRob3VnaCwgaWZcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGRldmVsb3BlciB3YW50ZWQgdG8gZm9yY2UgYSByZS1hc3NpZ25tZW50IGluIHRoZSBuZXcgZnJhbWUsIHdlJ2QgZmlsdGVyXG4gICAgICAgICAgICAgICAgICAgIC8vIGl0IG91dCBhcyBhIGR1cGxpY2F0ZSBhc3NpZ25tZW50IGFib3ZlLiAgTm93LCB3ZSBjb3VsZCBhbGxvdyB0aGF0IGFzc2lnbm1lbnRcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhyb3VnaCwgYnV0IGl0IHdvdWxkIHRoZW4gYnJlYWsgaW5sZXRpYW50cyB3aGVuIHNlYXJjaGluZyBiYWNrIHRvIG1hc2sgYVxuICAgICAgICAgICAgICAgICAgICAvLyBrZXkgKHdlIHdvdWxkbid0IHJlYWxpemUgdGhhdCB3ZSBuZWVkIHRvIGdvIGZ1cnRoZXIgYmFjayB0byBmaW5kIHRoZVxuICAgICAgICAgICAgICAgICAgICAvLyBvcmlnaW5hbCBvbmUpLlxuXG4gICAgICAgICAgICAgICAgICAgIGxldCBvbGRSZWM6IEFzc2lnbm1lbnQgPSB0aGlzLl9lbnRyaWVzW2xhc3RBc3NpZ25tZW50SWR4XTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAob2xkUmVjLnNyZWMuc2FsaWVuY2UgPT09IHNhbGllbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcHJldiA9IHRoaXMuZmluZExhc3RBc3NpZ25tZW50T2ZLZXlXaXRoVmFsdWUoa2V5LCB2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2ICE9PSAtMSAmJiB0aGlzLl9lbnRyaWVzW3ByZXZdLnNyZWMuc2FsaWVuY2UgPT09IHNhbGllbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ2hhaW5pbmcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChvbGRSZWMuc3JlYy5zYWxpZW5jZSA+IHNhbGllbmNlIHx8ICFvbGRSZWMuc3JlYy5mcm9tQ2hhaW5pbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmludCgnU2V0IG9mIGtleSBza2lwcGVkIChzYWxpZW5jZSAlcyA8PSAlcyknICsga2V5ICsgJywgJyArIG9sZFZhbCArXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAnLCAnICsgdmFsdWUgKyAnLCAnICsgc2FsaWVuY2UgKyAnLCAnICsgb2xkUmVjLnNyZWMuc2FsaWVuY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxldCBmaXJzdEFzc2lnbm1lbnRJZHggPSB0aGlzLl9wcmVwYXJlRm9yT3ZlcnJpZGUocmVjSWR4LCBsYXN0QXNzaWdubWVudElkeCk7XG4gICAgICAgICAgICAgICAgICAgIG5ld01hdGNoID0gdGhpcy5fcmVtYXRjaEZvck92ZXJyaWRlKGtleSwgc3ZhbHVlLCByZWNJZHgsIGZpcnN0QXNzaWdubWVudElkeCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lcmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IE1ldGEuUHJvcGVydHlNZXJnZXJfTGlzdC5tZXJnZShvbGRWYWwsIHZhbHVlLCB0aGlzLmlzRGVjbGFyZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXNzZXJ0KHRoaXMuX2VudHJpZXMubGVuZ3RoIDw9IENvbnRleHQuTWF4Q29udGV4dFN0YWNrU2l6ZSxcbiAgICAgICAgICAgICAgICAnTWV0YVVJIGNvbnRleHQgc3RhY2sgZXhjZWVkZWQgbWF4IHNpemUgLS0gbGlrZWx5IGluZmluaXRlIGNoYWluaW5nOiAnICtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbnRyaWVzLmxlbmd0aFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGxldCBzcmVjOiBTdGF0aWNSZWMgPSBuZXcgU3RhdGljUmVjKCk7XG4gICAgICAgICAgICBzcmVjLmtleSA9IGtleTtcbiAgICAgICAgICAgIC8vIHRvZG86IGNvbnZlcnNpb25cbiAgICAgICAgICAgIHNyZWMudmFsID0gc3ZhbHVlO1xuICAgICAgICAgICAgc3JlYy5sYXN0QXNzaWdubWVudElkeCA9IGxhc3RBc3NpZ25tZW50SWR4O1xuICAgICAgICAgICAgc3JlYy5zYWxpZW5jZSA9IHNhbGllbmNlO1xuICAgICAgICAgICAgc3JlYy5mcm9tQ2hhaW5pbmcgPSBpc0NoYWluaW5nO1xuXG4gICAgICAgICAgICBpZiAoaXNCbGFuayhuZXdNYXRjaCkpIHtcbiAgICAgICAgICAgICAgICBuZXdNYXRjaCA9IChpc1ByZXNlbnQodmFsdWUpKSA/IHRoaXMuX21ldGEubWF0Y2goa2V5LCBzdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGxhc3RNYXRjaCkgOiBsYXN0TWF0Y2g7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzcmVjLm1hdGNoID0gbmV3TWF0Y2g7XG4gICAgICAgICAgICBzcmVjLmFjdGl2YXRpb24gPSB0aGlzLl9jdXJyZW50QWN0aXZhdGlvbjtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRBY3RpdmF0aW9uLl9yZWNzLnB1c2goc3JlYyk7XG5cbiAgICAgICAgICAgIGxldCByZWMgPSB0aGlzLm5ld0NvbnRleHRSZWMoKTtcbiAgICAgICAgICAgIHJlYy5zcmVjID0gc3JlYztcbiAgICAgICAgICAgIHJlYy52YWwgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX2VudHJpZXMucHVzaChyZWMpO1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFByb3BlcnRpZXMgPSBudWxsO1xuXG4gICAgICAgICAgICB0aGlzLl92YWx1ZXMuc2V0KGtleSwgdmFsdWUpO1xuXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyggdGhpcy5kZWJ1Z05hbWUgKyAnID0+ICcgK1xuICAgICAgICAgICAgLy8gICAgICdQdXNoKCcgKyBrZXkgKyAnLCAnICsgc3ZhbHVlICsgJyk6ICcgKyAnTWF0Y2hlczogJyArIG5ld01hdGNoLm1hdGNoZXMoKS5sZW5ndGhcbiAgICAgICAgICAgIC8vICAgICArICcsIFByb3BNYXA6ICcgKyBzcmVjLnByb3BlcnRpZXMoKS5zaXplKTtcblxuICAgICAgICAgICAgaWYgKENvbnRleHQuX0RlYnVnUnVsZU1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja01hdGNoKHNyZWMubWF0Y2gsIGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hc3NlcnRDb250ZXh0Q29uc2lzdGVudCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIC8vIHByaW50KCdDb250ZXh0IHNraXBwZWQgYXNzaWdubWVudCBvZiBtYXRjaGluZyBwcm9wZXJ0eSB2YWx1ZSAlcyA9ICVzIChpc0NoYWluaW5nID09XG4gICAgICAgICAgICAvLyAlcywgaXNQcm9wS2V5ID09ICVzKScsIGtleSwgdmFsdWUsIGlzQ2hhaW5pbmcsXG4gICAgICAgICAgICAvLyAodGhpcy5fbWV0YS5rZXlEYXRhKGtleSkuaXNQcm9wZXJ0eVNjb3BlKSk7XG5cbiAgICAgICAgICAgIGlmICghaXNDaGFpbmluZyAmJiB0aGlzLm1ldGEua2V5RGF0YShrZXkpLmlzUHJvcGVydHlTY29wZSkge1xuICAgICAgICAgICAgICAgIC8vIHNsYW0gZG93biBhIHJlYyBmb3IgcHJvcGVydHkgY29udGV4dFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cblxuICAgIGdldCBmcmFtZVN0YXJ0cygpOiBudW1iZXJbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mcmFtZVN0YXJ0cztcbiAgICB9XG5cbiAgICBfdW5kb1JlY1ZhbHVlKHJlYzogQXNzaWdubWVudCk6IHZvaWQge1xuICAgICAgICBpZiAocmVjLnNyZWMubGFzdEFzc2lnbm1lbnRJZHggPT09IC0xIHx8XG4gICAgICAgICAgICB0aGlzLl9lbnRyaWVzW3JlYy5zcmVjLmxhc3RBc3NpZ25tZW50SWR4XS5tYXNrZWRCeUlkeCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlcy5kZWxldGUocmVjLnNyZWMua2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlcy5zZXQocmVjLnNyZWMua2V5LCB0aGlzLl9lbnRyaWVzW3JlYy5zcmVjLmxhc3RBc3NpZ25tZW50SWR4XS52YWwpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvLyBVbmRvZXMgYW5kIG1hc2tzIGFzc2lnbm1lbnRzIGludmFsaWRhdGVkIGJ5IG92ZXJyaWRlIG9mIGdpdmVuIHJlY29yZFxuICAgIC8vIFJldHVybnMgc3RhY2sgaW5kZXggZm9yIGZpcnN0IGFzc2lnbm1lbnQgKGkuZS4gd2hlcmUgbWF0Y2ggcmVjb21wdXRhdGlvbiBtdXN0IHN0YXJ0KVxuICAgIF9wcmVwYXJlRm9yT3ZlcnJpZGUob3ZlcnJpZGVJbmRleDogbnVtYmVyLCBsYXN0QXNzaWdubWVudElkeDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgLy8gaWYgd2UncmUgb3ZlcnJpZGluZyBhIHByb3AgY29udGV4dCBvdmVycmlkZSBvZiBhIG1hdGNoaW5nIHZhbHVlLCBiYWNrIHVwIGZ1cnRoZXJcbiAgICAgICAgbGV0IGxhc3RMYXN0SWR4ID0gMDtcbiAgICAgICAgd2hpbGUgKCgobGFzdExhc3RJZHggPSB0aGlzLl9lbnRyaWVzW2xhc3RBc3NpZ25tZW50SWR4XS5zcmVjLmxhc3RBc3NpZ25tZW50SWR4KSAhPT0gLTEpICYmXG4gICAgICAgICh0aGlzLl9lbnRyaWVzW2xhc3RBc3NpZ25tZW50SWR4XS5tYXNrZWRCeUlkeCA8PSAwKSkge1xuICAgICAgICAgICAgLy8gbWFyayBpdCEgKHdlJ2xsIHBpY2sgaXQgdXAgYmVsb3cuLi4pXG4gICAgICAgICAgICB0aGlzLl9lbnRyaWVzW2xhc3RBc3NpZ25tZW50SWR4XS5tYXNrZWRCeUlkeCA9IC0xO1xuICAgICAgICAgICAgbGFzdEFzc2lnbm1lbnRJZHggPSBsYXN0TGFzdElkeDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVuZG8gYWxsIGNvbmZsaWN0aW5nIG9yIGRlcnZpZWQgYXNzaWdubWVudHMgKGFuZCBtYXJrIHRoZW0pXG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLl9lbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gbGFzdEFzc2lnbm1lbnRJZHg7IGktLSkge1xuICAgICAgICAgICAgbGV0IHIgPSB0aGlzLl9lbnRyaWVzW2ldO1xuICAgICAgICAgICAgLy8gd2UgbmVlZCB0byB1bmRvIChhbmQgbWFzaykgYW55IHJlY29yZCB0aGF0IGNvbmZsaWN0IG9yIGFyZSBkZXJpdmVkXG4gICAgICAgICAgICAvLyBOT1RFOiBXZSBhcmUgc2tpcHBpbmcgdGhlIHJlbW92ZSBhbGwgY2hhaW5lZCByZWNvcmRzLCBiZWNhdXNlIHRoaXMgY2FuIHJlc3VsdCBpblxuICAgICAgICAgICAgLy8gdW5kb2luZyBkZXJpdmVkIHN0YXRlIHRvdGFsbHkgdW5yZWxhdGVkIHRvIHRoaXMga2V5LiAgSWRlYWxseSB3ZSdkIGZpZ3VyZSBvdXQgd2hhdFxuICAgICAgICAgICAgLy8gZGVwZW5kZWQgb24gd2hhdC4uLlxuICAgICAgICAgICAgaWYgKHIubWFza2VkQnlJZHggPD0gMCAmJiAoaSA9PT0gbGFzdEFzc2lnbm1lbnRJZHggfHwgci5tYXNrZWRCeUlkeCA9PT0gLTEpKSB7XG4gICAgICAgICAgICAgICAgLy8gfHwgci5zcmVjLmZyb21DaGFpbmluZ1xuICAgICAgICAgICAgICAgIC8vIG1hcmsgYW5kIHVuZG8gaXRcbiAgICAgICAgICAgICAgICByLm1hc2tlZEJ5SWR4ID0gb3ZlcnJpZGVJbmRleDtcbiAgICAgICAgICAgICAgICB0aGlzLl91bmRvUmVjVmFsdWUocik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxhc3RBc3NpZ25tZW50SWR4O1xuICAgIH1cblxuXG4gICAgX3JlbWF0Y2hGb3JPdmVycmlkZShrZXk6IHN0cmluZywgc3ZhbHVlOiBhbnksIG92ZXJyaWRlSW5kZXg6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0QXNzaWdubWVudElkeDogbnVtYmVyKTogTWF0Y2hSZXN1bHQge1xuICAgICAgICAvLyBzdGFydCBmcm9tIHRoZSB0b3AgZG93biBsb29raW5nIGZvciB0aGF0IGxhc3QgdW5tYXNrZWQgcmVjb3JkXG4gICAgICAgIGxldCBsYXN0TWF0Y2g6IE1hdGNoUmVzdWx0O1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGZvciAoOyBpIDwgZmlyc3RBc3NpZ25tZW50SWR4OyBpKyspIHtcbiAgICAgICAgICAgIGxldCByZWMgPSB0aGlzLl9lbnRyaWVzW2ldO1xuICAgICAgICAgICAgaWYgKHJlYy5tYXNrZWRCeUlkeCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdE1hdGNoID0gcmVjLnNyZWMubWF0Y2g7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgb3ZlcnJpZGVzTWF0Y2g6IFVuaW9uTWF0Y2hSZXN1bHQ7XG5cbiAgICAgICAgLy8gUmVtYXRjaCBza2lwcGluZyBvdmVyIHRoZSBsYXN0IGFzc2lnbm1lbnQgb2YgdGhpcyBwcm9wZXJ0eVxuICAgICAgICAvLyBhbmQgYWxsIGFzc2lnbm1lbnRzIGZyb20gY2hhaW5naW5nXG4gICAgICAgIGZvciAobGV0IGVuZCA9IHRoaXMuX2VudHJpZXMubGVuZ3RoOyBpIDwgZW5kOyBpKyspIHtcbiAgICAgICAgICAgIGxldCByOiBBc3NpZ25tZW50ID0gdGhpcy5fZW50cmllc1tpXTtcbiAgICAgICAgICAgIC8vIHJlbWF0Y2ggb24gYW55IHVubWFza2VkIHJlY29yZHNcbiAgICAgICAgICAgIGlmIChyLm1hc2tlZEJ5SWR4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbGFzdE1hdGNoID0gdGhpcy5fbWV0YS5tYXRjaChyLnNyZWMua2V5LCByLnNyZWMudmFsLCBsYXN0TWF0Y2gpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBhY2N1bXVsYXRlIG1hc2tlZCAoJ19vJykgbWF0Y2hcbiAgICAgICAgICAgICAgICBvdmVycmlkZXNNYXRjaCA9IHRoaXMuX21ldGEudW5pb25PdmVycmlkZU1hdGNoKHIuc3JlYy5rZXksIHIuc3JlYy52YWwsXG4gICAgICAgICAgICAgICAgICAgIG92ZXJyaWRlc01hdGNoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc1ByZXNlbnQoc3ZhbHVlKSB8fCBpc0JsYW5rKGxhc3RNYXRjaCkpIHtcbiAgICAgICAgICAgIGxhc3RNYXRjaCA9IHRoaXMuX21ldGEubWF0Y2goa2V5LCBzdmFsdWUsIGxhc3RNYXRjaCk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdE1hdGNoLnNldE92ZXJyaWRlc01hdGNoKG92ZXJyaWRlc01hdGNoKTtcbiAgICAgICAgcmV0dXJuIGxhc3RNYXRjaDtcbiAgICB9XG5cblxuICAgIHByaXZhdGUgX3VuZG9PdmVycmlkZShyZWM6IEFzc2lnbm1lbnQsIHJlY0lkeDogbnVtYmVyKSB7XG4gICAgICAgIGxldCBsYXN0QXNzaWdubWVudElkeCA9IHJlYy5zcmVjLmxhc3RBc3NpZ25tZW50SWR4O1xuICAgICAgICBsZXQgbGFzdExhc3RJZHg6IG51bWJlcjtcblxuXG4gICAgICAgIC8vIGJhc3RpY2sgdXAgZnVydGhlciBpZiBuZWNlc3NhcnlcbiAgICAgICAgd2hpbGUgKCgobGFzdExhc3RJZHggPSB0aGlzLl9lbnRyaWVzW2xhc3RBc3NpZ25tZW50SWR4XS5zcmVjLmxhc3RBc3NpZ25tZW50SWR4KSAhPT0gLTEpICYmXG4gICAgICAgICh0aGlzLl9lbnRyaWVzW2xhc3RMYXN0SWR4XS5tYXNrZWRCeUlkeCA9PT0gcmVjSWR4KSkge1xuICAgICAgICAgICAgbGFzdEFzc2lnbm1lbnRJZHggPSBsYXN0TGFzdElkeDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSBsYXN0QXNzaWdubWVudElkeCwgYyA9IHRoaXMuX2VudHJpZXMubGVuZ3RoOyBpIDwgYzsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcjogQXNzaWdubWVudCA9IHRoaXMuX2VudHJpZXNbaV07XG5cbiAgICAgICAgICAgIGlmIChyLm1hc2tlZEJ5SWR4ID09PSByZWNJZHgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMuc2V0KHIuc3JlYy5rZXksIHIudmFsKTtcbiAgICAgICAgICAgICAgICByLm1hc2tlZEJ5SWR4ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgX2NoZWNrTWF0Y2gobWF0Y2g6IE1hdGNoUmVzdWx0LCBrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IHZvaWQge1xuICAgICAgICBtYXRjaC5fY2hlY2tNYXRjaCh0aGlzLl92YWx1ZXMsIHRoaXMuX21ldGEpO1xuICAgIH1cblxuICAgIGZpbmRMYXN0QXNzaWdubWVudE9mS2V5KGtleTogc3RyaW5nKTogbnVtYmVyIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuX2VudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGxldCByZWM6IEFzc2lnbm1lbnQgPSB0aGlzLl9lbnRyaWVzW2ldO1xuICAgICAgICAgICAgaWYgKHJlYy5zcmVjLmtleSA9PT0ga2V5ICYmIHJlYy5tYXNrZWRCeUlkeCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICBmaW5kTGFzdEFzc2lnbm1lbnRPZktleVdpdGhWYWx1ZShrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IG51bWJlciB7XG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLl9lbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBsZXQgcmVjOiBBc3NpZ25tZW50ID0gdGhpcy5fZW50cmllc1tpXTtcbiAgICAgICAgICAgIGlmIChyZWMuc3JlYy5rZXkgPT09IGtleSAmJiAhdGhpcy5faXNOZXdWYWx1ZShyZWMudmFsLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB3ZSBoYXZlIHZhbHVlIG1pcnJvcmluZyAocHJvcGVydHkgdG8gY29udGV4dCkgdG8gZG8gRHluYW1pYyBwcm9wZXJ0eSBtaXJyb3Jpbmcgd2lsbFxuICAgICAqIGJlIGFkZGVkIHRvIHRoZSBjdXJyZW50QWN0aXZhdGlvbiBkZWZlcnJlZEFzc2lnbm1lbnQgbGlzdFxuICAgICAqXG4gICAgICovXG4gICAgX2NoZWNrQXBwbHlQcm9wZXJ0aWVzKCk6IGJvb2xlYW4ge1xuXG4gICAgICAgIGxldCBkaWRTZXQgPSBmYWxzZTtcbiAgICAgICAgbGV0IG51bUVudHJpZXMgPSAwO1xuICAgICAgICBsZXQgbGFzdFNpemUgPSAwO1xuICAgICAgICBsZXQgZGVjbGFyZUtleTogc3RyaW5nID0gdGhpcy5faW5EZWNsYXJlKCkgPyB0aGlzLl92YWx1ZXMuZ2V0KE1ldGEuS2V5RGVjbGFyZSkgOiBudWxsO1xuXG4gICAgICAgIHdoaWxlICgobnVtRW50cmllcyA9IHRoaXMuX2VudHJpZXMubGVuZ3RoKSA+IGxhc3RTaXplKSB7XG4gICAgICAgICAgICBsYXN0U2l6ZSA9IG51bUVudHJpZXM7XG4gICAgICAgICAgICBsZXQgcmVjOiBBc3NpZ25tZW50ID0gdGhpcy5fZW50cmllc1tudW1FbnRyaWVzIC0gMV07XG4gICAgICAgICAgICBsZXQgcHJvcGVydGllczogUHJvcGVydHlNYXAgPSByZWMuc3JlYy5wcm9wZXJ0aWVzKCk7XG5cbiAgICAgICAgICAgIGxldCBjb250ZXh0S2V5czogQXJyYXk8UHJvcGVydHlNYW5hZ2VyPiA9IHByb3BlcnRpZXMuY29udGV4dEtleXNVcGRhdGVkO1xuXG4gICAgICAgICAgICBpZiAoaXNQcmVzZW50KGNvbnRleHRLZXlzKSkge1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGMgPSBjb250ZXh0S2V5cy5sZW5ndGg7IGkgPCBjOyBpKyspIHtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgcHJvcE1ncjogUHJvcGVydHlNYW5hZ2VyID0gY29udGV4dEtleXNbaV07XG4gICAgICAgICAgICAgICAgICAgIGxldCBrZXk6IHN0cmluZyA9IHByb3BNZ3IuX25hbWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1ByZXNlbnQoZGVjbGFyZUtleSkgJiYga2V5ID09PSBkZWNsYXJlS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBUb0RvOiBhcHBseWluZyByZXNvbHZlZCB2YWx1ZSAtLSBuZWVkIHRvIGRlZmVyIHJlc29sdXRpb24gb24gdHJ1ZSBkeW5hbWljXG4gICAgICAgICAgICAgICAgICAgIC8vIHZhbHVlcyBTdXBwcmVzcyBjaGFpbmVkIGFzc2lnbm1lbnQgaWY6IDEpIE91ciBwYXJlbnQgd2lsbCBhc3NpZ24gdGhpc1xuICAgICAgICAgICAgICAgICAgICAvLyBwcm9wZXJ0eSAoaGFzIGEgZGVmZXJyZWQgYWN0aXZhdGlvbiBmb3IgaXQpLCBvciAyKSBUaGVyZSdzIGFscmVhZHkgYVxuICAgICAgICAgICAgICAgICAgICAvLyBtYXRjaGluZyBhc3NpZ25tZW50IHdpdGggaGlnaGVyIHNhbGllbmNlXG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXdWYWwgPSB0aGlzLnN0YXRpY2FsbHlSZXNvbHZlVmFsdWUocHJvcGVydGllcy5nZXQoa2V5KSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwcmV2UHJvcHM6IFByb3BlcnR5TWFwO1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBzdXBwcmVzczogYm9vbGVhbiA9IChpc1ByZXNlbnQocHJldlByb3BzKSAmJiBwcmV2UHJvcHMuaGFzKGtleSlcbiAgICAgICAgICAgICAgICAgICAgICAgICYmICF0aGlzLl9pc05ld1ZhbHVlKHRoaXMuc3RhdGljYWxseVJlc29sdmVWYWx1ZShwcmV2UHJvcHMuZ2V0KGtleSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbCkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5fY3VycmVudEFjdGl2YXRpb24uX3BhcmVudC5oYXNEZWZlcnJlZEFzc2lnbm1lbnRGb3JLZXkoa2V5KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qICYmIHRoaXMuX3ZhbHVlcy5jb250YWluc0tleShrZXkpICovKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXN1cHByZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWlycm9yS2V5ID0gcHJvcE1nci5fa2V5RGF0YVRvU2V0Ll9rZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3VmFsIGluc3RhbmNlb2YgRHluYW1pY1Byb3BlcnR5VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmludCgnKGRlZmVycmVkKSBjaGFpbmluZyBrZXk6ICcgLCBwcm9wTWdyLl9rZXlEYXRhVG9TZXQuX2tleSk7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRBY3RpdmF0aW9uLmFkZERlZmVycmVkQXNzaWdubWVudChtaXJyb3JLZXksIG5ld1ZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbXBhcmUgdGhpcyB2YWx1ZSB0byB0aGUgdmFsdWUgZnJvbSB0aGUgZW5kIG9mIHRoZSBsYXN0IGZyYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJpbnQoJ2NoYWluaW5nIGtleTogJyAsIHByb3BNZ3IuX2tleURhdGFUb1NldC5fa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fc2V0MihtaXJyb3JLZXksIG5ld1ZhbCwgbmV3VmFsLCBmYWxzZSwgdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlkU2V0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmludCgnU1VQUFJFU1NFRCBjaGFpbmluZyBrZXk6ICcgLCBwcm9wTWdyLl9rZXlEYXRhVG9TZXQuX2tleSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpZFNldDtcbiAgICB9XG5cblxuICAgIGFwcGx5UHJvcGVydHlDb250ZXh0QW5kQ2hhaW4oKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLl9jaGVja1Byb3BlcnR5Q29udGV4dCgpKSB7XG4gICAgICAgICAgICB3aGlsZSAodGhpcy5fY2hlY2tBcHBseVByb3BlcnRpZXMoKSkge1xuICAgICAgICAgICAgICAgIC8qIHJlcGVhdCAqL1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBfY3VycmVudFByb3BlcnR5U2NvcGVLZXkoKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IGZvdW5kS2V5OiBzdHJpbmc7XG4gICAgICAgIGxldCBmb3VuZEFjdGl2YXRpb246IEFjdGl2YXRpb247XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuX2VudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGxldCByZWM6IEFzc2lnbm1lbnQgPSB0aGlzLl9lbnRyaWVzW2ldO1xuICAgICAgICAgICAgaWYgKGlzUHJlc2VudChmb3VuZEFjdGl2YXRpb24pICYmIHJlYy5zcmVjLmFjdGl2YXRpb24gIT09IGZvdW5kQWN0aXZhdGlvbikge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX21ldGEua2V5RGF0YShyZWMuc3JlYy5rZXkpLmlzUHJvcGVydHlTY29wZSkge1xuICAgICAgICAgICAgICAgIGlmICghcmVjLnNyZWMuZnJvbUNoYWluaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWMuc3JlYy5rZXk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGZvciBjaGFpbmluZyBhc3NpZ25tZW50cywgd2Uga2VlcCBsb29raW5nIHVudGlsIHdlIGV4aGF1c3QgdGhlIGZpcnN0XG4gICAgICAgICAgICAgICAgLy8gbm9uLWNoYWluaW5nIGFjdGl2YXRpb24gVG9kbzogYnJva2VuIC0tIGRpc2FibGluZyBzZXQgb2YgY29udGV4dCBrZXkgZnJvbVxuICAgICAgICAgICAgICAgIC8vIGNoYWluaW5nIGlmIChmb3VuZEtleSA9PT0gbnVsbCkgZm91bmRLZXkgPSBzY29wZUtleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1ByZXNlbnQoZm91bmRLZXkpICYmICFyZWMuc3JlYy5mcm9tQ2hhaW5pbmcpIHtcbiAgICAgICAgICAgICAgICBmb3VuZEFjdGl2YXRpb24gPSByZWMuc3JlYy5hY3RpdmF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3VuZEtleTtcblxuICAgIH1cblxuXG4gICAgLy8gQXBwbHkgYSAncHJvcGVydHkgY29udGV4dCcgcHJvcGVydHkgKGUuZy4gZmllbGRfcCBmb3IgZmllbGQpIHRvIHRoZSBjb250ZXh0IGlmIG5lY2Vzc2FyeVxuICAgIF9jaGVja1Byb3BlcnR5Q29udGV4dCgpOiBib29sZWFuIHtcbiAgICAgICAgYXNzZXJ0KHRoaXMuX3ZhbHVlcyBpbnN0YW5jZW9mIE5lc3RlZE1hcCwgJ1Byb3BlcnR5IGFzc2lnbm1lbnQgb24gYmFzZSBtYXA/Jyk7XG4gICAgICAgIGxldCBzY29wZUtleTogc3RyaW5nID0gdGhpcy5fY3VycmVudFByb3BlcnR5U2NvcGVLZXkoKTtcbiAgICAgICAgaWYgKGlzUHJlc2VudChzY29wZUtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZXQyKE1ldGEuU2NvcGVLZXksIHNjb3BlS2V5LCBzY29wZUtleSwgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG5cbiAgICBkZWJ1ZygpOiB2b2lkIHtcbiAgICAgICAgLy8gc2V0IGRlYnVnZ2VyIGJyZWFrcG9pbnQgaGVyZVxuICAgICAgICBwcmludCgnKioqKioqICBEZWJ1ZyBDYWxsICoqKioqKicpO1xuICAgICAgICB0aGlzLl9sb2dDb250ZXh0KCk7XG4gICAgfVxuXG5cbiAgICBkZWJ1Z1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICBsZXQgYnVmZmVyID0gbmV3IFN0cmluZ0pvaW5lcihbJzxiPkNvbnRleHQ6PC9iPiZuYnNwOyddKTtcblxuICAgICAgICBidWZmZXIuYWRkKCcoJm5ic3A7Jyk7XG4gICAgICAgIGJ1ZmZlci5hZGQodGhpcy5fZW50cmllcy5sZW5ndGggKyAnJyk7XG4gICAgICAgIGJ1ZmZlci5hZGQoJyBlbnRyaWVzJyk7XG4gICAgICAgIGJ1ZmZlci5hZGQoJyZuYnNwOyk8YnIvPicpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBjID0gdGhpcy5fZW50cmllcy5sZW5ndGg7IGkgPCBjOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBzcCA9IGk7XG4gICAgICAgICAgICB3aGlsZSAoc3AtLSA+IDApIHtcbiAgICAgICAgICAgICAgICBidWZmZXIuYWRkKCcmbmJzcDsnKTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBsZXQgcjogQXNzaWdubWVudCA9IHRoaXMuX2VudHJpZXNbaV07XG5cbiAgICAgICAgICAgIGJ1ZmZlci5hZGQoJyZuYnNwOycpO1xuICAgICAgICAgICAgYnVmZmVyLmFkZChyLnNyZWMua2V5KTtcbiAgICAgICAgICAgIGJ1ZmZlci5hZGQoJyZuYnNwOyZuYnNwOzombmJzcDsnKTtcbiAgICAgICAgICAgIGJ1ZmZlci5hZGQoci5zcmVjLnZhbCk7XG4gICAgICAgICAgICBidWZmZXIuYWRkKChyLnNyZWMuZnJvbUNoYWluaW5nID8gJyBeJyA6ICcnKSk7XG4gICAgICAgICAgICBidWZmZXIuYWRkKChyLm1hc2tlZEJ5SWR4ICE9PSAwID8gJyBYJyA6ICcnKSk7XG4gICAgICAgICAgICBidWZmZXIuYWRkKCc8YnIvPicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHByb3BlcnR5QWN0aXZhdGlvbjogQWN0aXZhdGlvbiA9IHRoaXMuY3VycmVudEFjdGl2YXRpb24uX3Byb3BlcnR5QWN0aXZhdGlvbjtcbiAgICAgICAgaWYgKGlzUHJlc2VudChwcm9wZXJ0eUFjdGl2YXRpb24pKSB7XG4gICAgICAgICAgICBsZXQgc3JlY3M6IEFycmF5PFN0YXRpY1JlYz4gPSBwcm9wZXJ0eUFjdGl2YXRpb24uX3JlY3M7XG5cbiAgICAgICAgICAgIGJ1ZmZlci5hZGQoJyZuYnNwOyZuYnNwOyZuYnNwOzxiPlByb3BlcnR5QWN0aXZhdGlvbi4uLjwvYj48YnIvPicpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgYyA9IHNyZWNzLmxlbmd0aDsgaSA8IGM7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBzcCA9IGkgKyB0aGlzLl9lbnRyaWVzLmxlbmd0aCArIDE7XG5cbiAgICAgICAgICAgICAgICB3aGlsZSAoc3AtLSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyLmFkZCgnJm5ic3A7Jm5ic3A7Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCByOiBTdGF0aWNSZWMgPSBzcmVjc1tpXTtcbiAgICAgICAgICAgICAgICBidWZmZXIuYWRkKHIua2V5KTtcbiAgICAgICAgICAgICAgICBidWZmZXIuYWRkKCcmbmJzcDsmbmJzcDs6Jm5ic3A7Jyk7XG4gICAgICAgICAgICAgICAgYnVmZmVyLmFkZChyLnZhbCk7XG4gICAgICAgICAgICAgICAgYnVmZmVyLmFkZCgoci5mcm9tQ2hhaW5pbmcgPyAnJm5ic3A7Jm5ic3A7JyA6ICcmbmJzcDsmbmJzcDshJykpO1xuICAgICAgICAgICAgICAgIGJ1ZmZlci5hZGQoJzxici8+Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnVmZmVyLmFkZCgnJm5ic3A7PGJyLz48Yj5Qcm9wczo8L2I+PGJyLz4nKTtcbiAgICAgICAgdGhpcy53cml0ZVByb3BlcnRpZXMoYnVmZmVyLCB0aGlzLmFsbFByb3BlcnRpZXMoKSwgMSwgZmFsc2UpO1xuXG4gICAgICAgIHJldHVybiBidWZmZXIudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBfbG9nQ29udGV4dCgpOiB2b2lkIHtcbiAgICAgICAgbGV0IGRlYnVnU3RyaW5nOiBzdHJpbmcgPSB0aGlzLmRlYnVnU3RyaW5nKCk7XG4gICAgICAgIHByaW50KGRlYnVnU3RyaW5nKTtcbiAgICAgICAgcHJpbnQoJ1xcbicpO1xuICAgIH1cblxuICAgIHByaXZhdGUgd3JpdGVQcm9wZXJ0aWVzKGJ1ZjogU3RyaW5nSm9pbmVyLCBwcm9wZXJ0aWVzOiBNYXA8c3RyaW5nLCBhbnk+LCBsZXZlbDogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpbmdsZUxpbmU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgTWFwV3JhcHBlci5pdGVyYWJsZShwcm9wZXJ0aWVzKS5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXNpbmdsZUxpbmUpIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAobGV2ZWwtLSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYnVmLmFkZCgnJm5ic3A7Jm5ic3A7Jm5ic3A7Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzQmxhbmsodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgYnVmLmFkZChrZXkpO1xuICAgICAgICAgICAgICAgIGJ1Zi5hZGQoJyA6bnVsbCcpO1xuICAgICAgICAgICAgICAgIGJ1Zi5hZGQoc2luZ2xlTGluZSA/ICc7Jm5ic3A7Jm5ic3A7JyA6ICc7PGJyLz4nKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBidWYuYWRkKCcmbmJzcDsmbmJzcDsmbmJzcDsnKTtcbiAgICAgICAgICAgICAgICBidWYuYWRkKGtleSk7XG4gICAgICAgICAgICAgICAgYnVmLmFkZCgnOicpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzU3RyaW5nKHZhbHVlKSB8fCBpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYnVmLmFkZCgnJm5ic3A7Jm5ic3A7Jyk7XG4gICAgICAgICAgICAgICAgICAgIGJ1Zi5hZGQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBidWYuYWRkKCcmbmJzcDsmbmJzcDsnKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNTdHJpbmdNYXAodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1Zi5hZGQoJ3snKTtcbiAgICAgICAgICAgICAgICAgICAgYnVmLmFkZCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJ1Zi5hZGQoJ30nKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBFeHByKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1Zi5hZGQodmFsdWUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgICAgICAgICAgICBidWYuYWRkKE1hcFdyYXBwZXIudG9TdHJpbmcodmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIExpc3RXcmFwcGVyLnRvU3RyaW5nKHZhbHVlKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBPdmVycmlkZVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1Zi5hZGQodmFsdWUudG9TdHJpbmcoKSk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgRmllbGRQYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1Zi5hZGQoJyQnKTtcbiAgICAgICAgICAgICAgICAgICAgYnVmLmFkZCh2YWx1ZS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoc2luZ2xlTGluZSkge1xuICAgICAgICAgICAgICAgICAgICBidWYuYWRkKCc7Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYnVmLmFkZCgnPGJyLz4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgcHJpdmF0ZSBsYXN0TWF0Y2hXaXRob3V0Q29udGV4dFByb3BzKCkge1xuICAgICAgICByZXR1cm4gTGlzdFdyYXBwZXIuaXNFbXB0eShcbiAgICAgICAgICAgIHRoaXMuX2VudHJpZXMpID8gbnVsbCA6IHRoaXMuX2VudHJpZXNbdGhpcy5fZW50cmllcy5sZW5ndGggLSAxXS5zcmVjLm1hdGNoO1xuICAgIH1cblxuXG4gICAgcHJpdmF0ZSBsYXN0TWF0Y2goKSB7XG4gICAgICAgIGlmIChMaXN0V3JhcHBlci5pc0VtcHR5KHRoaXMuX2VudHJpZXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbWF0Y2g6IE1hdGNoUmVzdWx0ID0gTGlzdFdyYXBwZXIubGFzdDxBc3NpZ25tZW50Pih0aGlzLl9lbnRyaWVzKVxuICAgICAgICAgICAgLnByb3BlcnR5TG9jYWxNYXRjaGVzKHRoaXMpO1xuICAgICAgICByZXR1cm4gKGlzUHJlc2VudChtYXRjaCkpID8gbWF0Y2ggOiB0aGlzLmxhc3RNYXRjaFdpdGhvdXRDb250ZXh0UHJvcHMoKTtcblxuICAgIH1cblxuICAgIGxhc3RTdGF0aWNSZWMoKTogU3RhdGljUmVjIHtcbiAgICAgICAgaWYgKExpc3RXcmFwcGVyLmlzRW1wdHkodGhpcy5fZW50cmllcykpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZWM6IFN0YXRpY1JlYyA9IExpc3RXcmFwcGVyLmxhc3QodGhpcy5fZW50cmllcykucHJvcGVydHlMb2NhbFN0YXRpY1JlYyh0aGlzKTtcbiAgICAgICAgcmV0dXJuIGlzUHJlc2VudChyZWMpID8gcmVjIDogTGlzdFdyYXBwZXIubGFzdCh0aGlzLl9lbnRyaWVzKS5zcmVjO1xuICAgIH1cblxuXG4gICAgZ2V0IHJlY1Bvb2woKTogQXJyYXk8QXNzaWdubWVudD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVjUG9vbDtcbiAgICB9XG5cblxuICAgIGdldCBjdXJyZW50QWN0aXZhdGlvbigpOiBBY3RpdmF0aW9uIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRBY3RpdmF0aW9uO1xuICAgIH1cblxuXG4gICAgZXh0ZW5kZWRGaWVsZHMoKTogTWFwPHN0cmluZywgYW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlcztcbiAgICB9XG59XG5cblxuLyoqXG4gKiBBIHNoYXJhYmxlL3JlLWFwcGxpY2FibGUgYmxvY2sgb2Ygc2V0U2NvcGVLZXlBc3NpZ25tZW50IF9TdGF0aWNSZWNzLiAgQW4gQWN0aXZhdGlvbiBjb250YWluc1xuICogdGhlIGxpc3Qgb2YgYXNzaWdubWVudCByZWNvcmRzIHJlc3VsdGluZyBmcm9tIChjaGFpbmluZyBmcm9tKSBhIHNpbmdsZSBvcmlnaW5hbFxuICogYXNzaWdubWVudCAoYXMgd2VsbCBhcyBfRGVmZXJyZWRBc3NpZ25tZW50IHJlY29yZHMgZm9yIGR5bmFtaWMgdmFsdWVzIHRoYXQgY2Fubm90XG4gKiBiZSBzdGF0aWNhbGx5IHJlc29sdmVkIHRvIHJlY29yZHMpLiAgQWN0aXZhdGlvbnMgZm9ybSBhIHNoYXJlZC9jYWNoZWQgdHJlZSwgYmFzZWRcbiAqIG9uIGNvbnRleHQgYXNzaWdubWVudCBwYXRocyBwcmV2aW91c2x5IHRyYXZlcnNlZCB2aWEgYXNzaWdubWVudHMgdG8gc29tZSBDb250ZXh0LlxuICogU3Vic2VxdWVudCB0cmF2ZXJzYWxzIG9mIHRoZXNlIHBhdGhzIChsaWtlbHkgYnkgZGlmZmVyZW50IENvbnRleHQgaW5zdGFuY2VzKVxuICogYXJlIGdyZWF0bHkgb3B0aW1pemVkOiBhbiBleGlzdGluZyBBY3RpdmF0aW9uIGlzIHJldHJpZXZlZCBhbmQgaXRzIHJlY29yZHMgYXBwZW5kZWRcbiAqIHRvIHRoZSBjb250ZXh0J3MgX2VudHJpZXMgc3RhY2s7IGFsbCBvZiB0aGUgdHJhZGl0aW9uYWwgY29tcHV0YXRpb24gb2YgcnVsZSBtYXRjaCBsb29rdXBzLFxuICogY2hhaW5lZCBhc3NpZ25tZW50cyBhbmQgb3ZlcnJpZGUgaW5kZXhlcyBpcyBieXBhc3NlZC5cbiAqIEFjdGl2YXRpb24gZ2l2ZXMgc3BlY2lhbCB0cmVhdG1lbnQgdG8gdGhlICdwcm9wZXJ0eUFjdGl2YXRpb24nLCBpLmUuIHRoZSBhY3RpdmF0aW9uXG4gKiByZXN1bHRpbmcgZnJvbSB0aGUgYXBwbGljYXRpb24gb2YgdGhlICdzY29wZUtleScgdG8gdGhlIGN1cnJlbnQgY29udGV4dC4gIFByb3BlcnR5IGxvb2t1cFxuICogZm9sbG93aW5nIGFuZCBjb250ZXh0IGFzc2lnbm1lbnQgcmVxdWlyZSBhcHBsaWNhdGlvbiBvZiB0aGUgc2NvcGVLZXksIGJ1dCB0aGVuIHRoZSBzY29wZSBrZXlcbiAqIG11c3QgaW1tZWRpYXRlbHkgYmUgcG9wcGVkIGZvciB0aGUgbmV4dCBjb250ZXh0IGFzc2lnbm1lbnQuICBUbyBhdm9pZCB0aGlzIGNvbnN0YW50IHB1c2gvcG9wXG4gKiBvbiB0aGUgYm90dG9tIG9mIHRoZSBzdGFjaywgX0FjdGl2YXRpb25zIGNhY2hlIGEgc2lkZSBhY3RpdmF0aW9uICh0aGUgcHJvcGVydHlBY3RpdmF0aW9uKVxuICogZm9yIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgdGhlIHNjb3BlS2V5IHRvIHRoZSBjdXJyZW50IGFjdGl2YXRpb24uICBUaGlzIHN0YWNrIChhbmQgaXRzXG4gKiBwcm9wZXJ0aWVzKSBhcmUgY2FjaGVkIG9uIHRoZSBzaWRlLCBhbmQgY2FuIGJlIGFjY2Vzc2VkIHdpdGhvdXQgYWN0dWFsbHkgbW9kaWZ5aW5nIHRoZSBtYWluXG4gKiBjb250ZXh0IHN0YWNrLlxuICovXG5cbmV4cG9ydCBjbGFzcyBBY3RpdmF0aW9uIHtcblxuICAgIF9yZWNzOiBBcnJheTxTdGF0aWNSZWM+ID0gbmV3IEFycmF5PFN0YXRpY1JlYz4oKTtcbiAgICBfb3JpZ0VudHJ5Q291bnQ6IG51bWJlciA9IDA7XG4gICAgX3ZhbHVlTm9kZU1hcEJ5Q29udGV4dEtleTogTWFwPHN0cmluZywgQ29sbGVjdGlvbnMuRGljdGlvbmFyeTxhbnksIGFueT4+O1xuICAgIF92YWx1ZU5vZGVNYXBCeUNvbnRleHRLZXlDaGFpbmluZzogTWFwPHN0cmluZywgQ29sbGVjdGlvbnMuRGljdGlvbmFyeTxhbnksIGFueT4+O1xuXG4gICAgX3Byb3BlcnR5QWN0aXZhdGlvbjogQWN0aXZhdGlvbjtcbiAgICBfbmVzdGVkVmFsdWVzOiBOZXN0ZWRNYXA8c3RyaW5nLCBhbnk+O1xuICAgIGRlZmVycmVkQXNzaWdubWVudHM6IEFycmF5PERlZmVycmVkQXNzaWdubWVudD47XG5cblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBfcGFyZW50PzogQWN0aXZhdGlvbikge1xuXG4gICAgfVxuXG4gICAgZ2V0Q2hpbGRBY3RpdmF0aW9uKGNvbnRleHRLZXk6IHN0cmluZywgdmFsdWU6IGFueSwgY2hhaW5pbmc6IGJvb2xlYW4pOiBBY3RpdmF0aW9uIHtcbiAgICAgICAgaWYgKGlzQmxhbmsodmFsdWUpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IE1ldGEuTnVsbE1hcmtlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBieUtleTogTWFwPHN0cmluZywgQ29sbGVjdGlvbnMuRGljdGlvbmFyeTxhbnksIGFueT4+ID0gKGNoYWluaW5nKVxuICAgICAgICAgICAgPyB0aGlzLl92YWx1ZU5vZGVNYXBCeUNvbnRleHRLZXlDaGFpbmluZyA6XG4gICAgICAgICAgICB0aGlzLl92YWx1ZU5vZGVNYXBCeUNvbnRleHRLZXk7XG5cbiAgICAgICAgaWYgKGlzQmxhbmsoYnlLZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYnlWYWw6IENvbGxlY3Rpb25zLkRpY3Rpb25hcnk8YW55LCBhbnk+ID0gYnlLZXkuZ2V0KGNvbnRleHRLZXkpO1xuICAgICAgICByZXR1cm4gKGlzQmxhbmsoYnlWYWwpKSA/IG51bGwgOiBieVZhbC5nZXRWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgY2FjaGVDaGlsZEFjdGl2YXRpb24oY29udGV4dEtleTogc3RyaW5nLCB2YWx1ZTogYW55LCBhY3RpdmF0aW9uOiBBY3RpdmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgIGNoYWluaW5nOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGlmIChpc0JsYW5rKHZhbHVlKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBNZXRhLk51bGxNYXJrZXI7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgYnlLZXk6IE1hcDxzdHJpbmcsIENvbGxlY3Rpb25zLkRpY3Rpb25hcnk8YW55LCBhbnk+PjtcbiAgICAgICAgaWYgKGNoYWluaW5nKSB7XG4gICAgICAgICAgICBpZiAoaXNCbGFuaygoYnlLZXkgPSB0aGlzLl92YWx1ZU5vZGVNYXBCeUNvbnRleHRLZXlDaGFpbmluZykpKSB7XG4gICAgICAgICAgICAgICAgYnlLZXkgPSB0aGlzLl92YWx1ZU5vZGVNYXBCeUNvbnRleHRLZXlDaGFpbmluZ1xuICAgICAgICAgICAgICAgICAgICA9IG5ldyBNYXA8c3RyaW5nLCBDb2xsZWN0aW9ucy5EaWN0aW9uYXJ5PGFueSwgYW55Pj4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpc0JsYW5rKChieUtleSA9IHRoaXMuX3ZhbHVlTm9kZU1hcEJ5Q29udGV4dEtleSkpKSB7XG4gICAgICAgICAgICAgICAgYnlLZXkgPSB0aGlzLl92YWx1ZU5vZGVNYXBCeUNvbnRleHRLZXlcbiAgICAgICAgICAgICAgICAgICAgPSBuZXcgTWFwPHN0cmluZywgQ29sbGVjdGlvbnMuRGljdGlvbmFyeTxhbnksIGFueT4+KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBieVZhbDogQ29sbGVjdGlvbnMuRGljdGlvbmFyeTxhbnksIGFueT4gPSBieUtleS5nZXQoY29udGV4dEtleSk7XG4gICAgICAgIGlmIChpc0JsYW5rKGJ5VmFsKSkge1xuICAgICAgICAgICAgYnlWYWwgPSBuZXcgQ29sbGVjdGlvbnMuRGljdGlvbmFyeTxhbnksIGFueT4oKTtcbiAgICAgICAgICAgIGJ5S2V5LnNldChjb250ZXh0S2V5LCBieVZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgYnlWYWwuc2V0VmFsdWUodmFsdWUsIGFjdGl2YXRpb24pO1xuICAgIH1cblxuICAgIGFkZERlZmVycmVkQXNzaWdubWVudChrZXk6IHN0cmluZywgdmFsdWU6IER5bmFtaWNQcm9wZXJ0eVZhbHVlKTogdm9pZCB7XG4gICAgICAgIGxldCBuZXdEYTogRGVmZXJyZWRBc3NpZ25tZW50O1xuXG4gICAgICAgIGlmIChpc0JsYW5rKHRoaXMuZGVmZXJyZWRBc3NpZ25tZW50cykpIHtcbiAgICAgICAgICAgIHRoaXMuZGVmZXJyZWRBc3NpZ25tZW50cyA9IG5ldyBBcnJheTxEZWZlcnJlZEFzc2lnbm1lbnQ+KCk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAobGV0IGRhIG9mIHRoaXMuZGVmZXJyZWRBc3NpZ25tZW50cykge1xuICAgICAgICAgICAgICAgIGlmIChkYS5rZXkgPT09IGtleSkge1xuICAgICAgICAgICAgICAgICAgICBuZXdEYSA9IGRhO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQmxhbmsobmV3RGEpKSB7XG4gICAgICAgICAgICBuZXdEYSA9IG5ldyBEZWZlcnJlZEFzc2lnbm1lbnQoKTtcbiAgICAgICAgICAgIG5ld0RhLmtleSA9IGtleTtcbiAgICAgICAgICAgIHRoaXMuZGVmZXJyZWRBc3NpZ25tZW50cy5wdXNoKG5ld0RhKTtcbiAgICAgICAgfVxuICAgICAgICBuZXdEYS52YWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIGhhc0RlZmVycmVkQXNzaWdubWVudEZvcktleShrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoaXNQcmVzZW50KHRoaXMuZGVmZXJyZWRBc3NpZ25tZW50cykpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGRhIG9mIHRoaXMuZGVmZXJyZWRBc3NpZ25tZW50cykge1xuICAgICAgICAgICAgICAgIGlmIChkYS5rZXkgPT09IGtleSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHByb3BlcnR5QWN0aXZhdGlvbihjb250ZXh0OiBDb250ZXh0KTogQWN0aXZhdGlvbiB7XG4gICAgICAgIGFzc2VydChjb250ZXh0LmN1cnJlbnRBY3RpdmF0aW9uID09PSB0aGlzLFxuICAgICAgICAgICAgJ1Byb3BlcnR5QWN0aXZhdGlvbiBzb3VnaHQgb24gbm9uIHRvcCBvZiBzdGFjayBhY3RpdmF0aW9uJyk7XG5cbiAgICAgICAgaWYgKGlzQmxhbmsodGhpcy5fcHJvcGVydHlBY3RpdmF0aW9uKSkge1xuICAgICAgICAgICAgdGhpcy5fcHJvcGVydHlBY3RpdmF0aW9uID0gY29udGV4dC5fY3JlYXRlTmV3UHJvcGVydHlDb250ZXh0QWN0aXZhdGlvbih0aGlzKTtcblxuICAgICAgICAgICAgaWYgKGlzQmxhbmsodGhpcy5fcHJvcGVydHlBY3RpdmF0aW9uKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Byb3BlcnR5QWN0aXZhdGlvbiA9IHRoaXM7XG4gICAgICAgICAgICB9IC8vIHRoaXMgYXMgbnVsbCBtYXJrZXJcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvcGVydHlBY3RpdmF0aW9uICE9PSB0aGlzID8gdGhpcy5fcHJvcGVydHlBY3RpdmF0aW9uIDogbnVsbDtcbiAgICB9XG5cblxuICAgIGZpbmRFeGlzdGluZ1Byb3BlcnR5QWN0aXZhdGlvbigpOiBBY3RpdmF0aW9uIHtcbiAgICAgICAgbGV0IGFjdGl2YXRpb246IEFjdGl2YXRpb24gPSB0aGlzO1xuICAgICAgICB3aGlsZSAoaXNQcmVzZW50KGFjdGl2YXRpb24pKSB7XG5cbiAgICAgICAgICAgIGxldCBwcm9wZXJ0eUFjdGl2YXRpb246IEFjdGl2YXRpb24gPSBhY3RpdmF0aW9uLl9wcm9wZXJ0eUFjdGl2YXRpb247XG5cbiAgICAgICAgICAgIGlmIChpc1ByZXNlbnQocHJvcGVydHlBY3RpdmF0aW9uKSAmJiBwcm9wZXJ0eUFjdGl2YXRpb24gIT09IGFjdGl2YXRpb25cbiAgICAgICAgICAgICAgICAmJiAhKGlzQmxhbmsocHJvcGVydHlBY3RpdmF0aW9uLl9yZWNzKSB8fCBMaXN0V3JhcHBlci5pc0VtcHR5KFxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eUFjdGl2YXRpb24uX3JlY3MpKSkge1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3BlcnR5QWN0aXZhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFjdGl2YXRpb24gPSBhY3RpdmF0aW9uLl9wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG5cbiAgICAvLyB0b2RvOiBiZXR0ZXIgYmV0dGVyIHRvIHN0cmluZyBmb3IgaGFzaGluZ1xuICAgIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBDb2xsZWN0aW9ucy51dGlsLm1ha2VTdHJpbmcodGhpcyk7XG4gICAgfVxufVxuXG5cbmV4cG9ydCBjbGFzcyBEZWZlcnJlZEFzc2lnbm1lbnQge1xuICAgIGtleTogc3RyaW5nO1xuICAgIHZhbHVlOiBEeW5hbWljUHJvcGVydHlWYWx1ZTtcbn1cblxuXG5leHBvcnQgY2xhc3MgQXNzaWdubWVudFNuYXBzaG90IHtcbiAgICBrZXk6IHN0cmluZztcbiAgICB2YWx1ZTogYW55O1xuICAgIHNhbGllbmNlOiBudW1iZXI7XG5cbn1cblxuZXhwb3J0IGNsYXNzIEFzc2lnbm1lbnQge1xuICAgIHNyZWM6IFN0YXRpY1JlYztcbiAgICB2YWw6IE9iamVjdDtcblxuICAgIG1hc2tlZEJ5SWR4OiBudW1iZXIgPSAwO1xuICAgIF9kaWRJbml0UHJvcENvbnRleHQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBfcHJvcGVydHlMb2NhbFNyZWM6IFN0YXRpY1JlYztcbiAgICBfcHJvcGVydHlMb2NhbFZhbHVlczogTWFwPHN0cmluZywgYW55PjtcblxuXG4gICAgcHJvcGVydHlMb2NhbE1hdGNoZXMoY29udGV4dDogQ29udGV4dCk6IE1hdGNoUmVzdWx0IHtcbiAgICAgICAgaWYgKCF0aGlzLl9kaWRJbml0UHJvcENvbnRleHQpIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdFByb3BDb250ZXh0KGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc1ByZXNlbnQodGhpcy5fcHJvcGVydHlMb2NhbFNyZWMpID8gdGhpcy5fcHJvcGVydHlMb2NhbFNyZWMubWF0Y2ggOiBudWxsO1xuICAgIH1cblxuICAgIHByb3BlcnR5TG9jYWxTdGF0aWNSZWMoY29udGV4dDogQ29udGV4dCk6IFN0YXRpY1JlYyB7XG4gICAgICAgIGlmICghdGhpcy5fZGlkSW5pdFByb3BDb250ZXh0KSB7XG4gICAgICAgICAgICB0aGlzLmluaXRQcm9wQ29udGV4dChjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvcGVydHlMb2NhbFNyZWM7XG4gICAgfVxuXG4gICAgcHJvcGVydHlMb2NhbFZhbHVlcyhjb250ZXh0OiBDb250ZXh0KTogTWFwPHN0cmluZywgYW55PiB7XG4gICAgICAgIGlmICghdGhpcy5fZGlkSW5pdFByb3BDb250ZXh0KSB7XG4gICAgICAgICAgICB0aGlzLmluaXRQcm9wQ29udGV4dChjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvcGVydHlMb2NhbFZhbHVlcztcbiAgICB9XG5cblxuICAgIGluaXRQcm9wQ29udGV4dChjb250ZXh0OiBDb250ZXh0KTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2RpZEluaXRQcm9wQ29udGV4dCA9IHRydWU7XG4gICAgICAgIGFzc2VydCghQ29udGV4dC5fRXhwZW5zaXZlQ29udGV4dENvbnNpc3RlbmN5Q2hlY2tzRW5hYmxlZCB8fCBMaXN0V3JhcHBlci5sYXN0KFxuICAgICAgICAgICAgY29udGV4dC5fZW50cmllcykgPT09IHRoaXMsXG4gICAgICAgICAgICAnaW5pdGluZyBwcm9wIGNvbnRleHQgb24gcmVjb3JkIG5vdCBvbiB0b3Agb2Ygc3RhY2snKTtcblxuICAgICAgICAvLyBUb2RvOiBiYXNlIGl0IG9uIHdoZXRoZXIgd2UndmUgdHJpZXMgeWV0IHRvIHByb2Nlc3MgdGhlbS5cblxuICAgICAgICBsZXQgcHJvcEFjdGl2YXRpb246IEFjdGl2YXRpb24gPSAodGhpcy5zcmVjLmFjdGl2YXRpb24ucHJvcGVydHlBY3RpdmF0aW9uKGNvbnRleHQpKTtcbiAgICAgICAgaWYgKGlzUHJlc2VudChwcm9wQWN0aXZhdGlvbikpIHtcbiAgICAgICAgICAgIGNvbnRleHQuX2FwcGx5UHJvcGVydHlBY3RpdmF0aW9uKHByb3BBY3RpdmF0aW9uLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgcmVzZXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc3JlYyA9IG51bGw7XG4gICAgICAgIHRoaXMudmFsID0gbnVsbDtcbiAgICAgICAgdGhpcy5tYXNrZWRCeUlkeCA9IDA7XG4gICAgICAgIHRoaXMuX2RpZEluaXRQcm9wQ29udGV4dCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wcm9wZXJ0eUxvY2FsU3JlYyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3Byb3BlcnR5TG9jYWxWYWx1ZXMgPSBudWxsO1xuICAgIH1cblxufVxuXG4vKipcbiAqIFRoZSAnc3RhdGljJyAoc2hhcmFibGUpIHBhcnQgb2YgYSBjb250ZXh0IHZhbHVlIGFzc2lnbm1lbnQgcmVjb3JkLlxuICogVGhlc2VzIGFyZSBjcmVhdGVkIGJ5IHRoZSBmaXJzdCBfQXNzaWdubWVudCB0aGF0IG5lZWRzIHRoZW1cbiAqIGFuZCB0aGVuIGNhY2hlZCBmb3IgcmUtYXBwbGljYXRpb24gaW4gdGhlaXIgX0FjdGl2YXRpb25cbiAqICAod2hpY2gsIGluIHR1cm4sIGlzIHN0b3JlZCBpbiB0aGUgZ2xvYmFsIGFjdGl2YXRpb24gdHJlZSlcbiAqL1xuZXhwb3J0IGNsYXNzIFN0YXRpY1JlYyB7XG4gICAgYWN0aXZhdGlvbjogQWN0aXZhdGlvbjtcbiAgICBwcml2YXRlIF9rZXk6IHN0cmluZztcbiAgICBwcml2YXRlIF92YWw6IGFueTtcbiAgICBtYXRjaDogTWF0Y2hSZXN1bHQ7XG4gICAgc2FsaWVuY2U6IG51bWJlciA9IDA7XG4gICAgZnJvbUNoYWluaW5nOiBib29sZWFuO1xuICAgIGxhc3RBc3NpZ25tZW50SWR4OiBudW1iZXIgPSAwO1xuXG4gICAgcHJvcGVydGllcygpOiBQcm9wZXJ0eU1hcCB7XG4gICAgICAgIHJldHVybiAoaXNQcmVzZW50KHRoaXMubWF0Y2gpKSA/IHRoaXMubWF0Y2gucHJvcGVydGllcygpIDogQ29udGV4dC5FbXB0eU1hcDtcbiAgICB9XG5cbiAgICBnZXQga2V5KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9rZXk7XG4gICAgfVxuXG4gICAgc2V0IGtleSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2tleSA9IHZhbHVlO1xuICAgIH1cblxuICAgIGdldCB2YWwoKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbDtcbiAgICB9XG5cbiAgICBzZXQgdmFsKHZhbHVlOiBhbnkpIHtcbiAgICAgICAgdGhpcy5fdmFsID0gdmFsdWU7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgUHJvcGVydHlBY2Nlc3NvciB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbnRleHQ6IENvbnRleHQpIHtcbiAgICB9XG5cbiAgICBnZXQoa2V5OiBzdHJpbmcpOiBhbnkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0LnByb3BlcnR5Rm9yS2V5KGtleSk7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIE1hcFdyYXBwZXIudG9TdHJpbmcodGhpcy5jb250ZXh0LmFsbFByb3BlcnRpZXMoKSk7XG4gICAgfVxuXG59XG5cbi8qKlxuICogU25hcHNob3QgaXMgdGhlIHdheSBob3cgdG8gY2FwdHVyZSBhIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGNvbnRleHQgYW5kIHRoZW4gcmVwbGF5IGl0IGJhY2sgc28uXG4gKiBmb3IgY2FzZXMgd2hlbiB3ZSBuZWVkIHRvIHJ1biBzb21lIHJ1bGUgZXhlY3V0aW9uIG91dHNpZGUgb2YgdGhlIHB1c2gvcG9wIGN5Y2xlXG4gKi9cbmV4cG9ydCBjbGFzcyBTbmFwc2hvdCB7XG5cbiAgICBfbWV0YTogTWV0YTtcbiAgICBfb3JpZ0NsYXNzOiBzdHJpbmc7XG4gICAgX2Fzc2lnbm1lbnRzOiBBcnJheTxBc3NpZ25tZW50U25hcHNob3Q+O1xuICAgIF9hbGxBc3NpZ25tZW50czogQXJyYXk8QXNzaWdubWVudFNuYXBzaG90PjtcbiAgICBfaXNOZXN0ZWQ6IGJvb2xlYW47XG5cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2NvbnRleHQ6IENvbnRleHQpIHtcbiAgICAgICAgdGhpcy5fbWV0YSA9IF9jb250ZXh0Lm1ldGE7XG4gICAgICAgIHRoaXMuX29yaWdDbGFzcyA9IF9jb250ZXh0LmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICAgIHRoaXMuX2Fzc2lnbm1lbnRzID0gX2NvbnRleHQuYWN0aXZlQXNzaWdubWVudHMoKTtcbiAgICAgICAgdGhpcy5fYWxsQXNzaWdubWVudHMgPSBfY29udGV4dC5hbGxBc3NpZ25tZW50cygpO1xuICAgICAgICB0aGlzLl9pc05lc3RlZCA9IF9jb250ZXh0LmlzTmVzdGVkO1xuXG4gICAgfVxuXG5cbiAgICBoeWRyYXRlKHNoZWxsQ29weTogYm9vbGVhbiA9IHRydWUpOiBDb250ZXh0IHtcbiAgICAgICAgbGV0IGFzc2lnbm1lbnRzID0gKHNoZWxsQ29weSkgPyB0aGlzLl9hc3NpZ25tZW50cyA6IHRoaXMuX2FsbEFzc2lnbm1lbnRzO1xuICAgICAgICBsZXQgbmV3Q29udGV4dDogQ29udGV4dCA9IHRoaXMuX21ldGEubmV3Q29udGV4dCgpO1xuICAgICAgICBuZXdDb250ZXh0LnB1c2goKTtcbiAgICAgICAgbGV0IGxhc3RDbnhHZW5lcmF0aW9uID0gMTtcbiAgICAgICAgZm9yIChsZXQgYSBvZiAgYXNzaWdubWVudHMpIHtcbiAgICAgICAgICAgIGlmIChsYXN0Q254R2VuZXJhdGlvbiA8IGEuc2FsaWVuY2UpIHtcbiAgICAgICAgICAgICAgICBuZXdDb250ZXh0LnB1c2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld0NvbnRleHQuc2V0KGEua2V5LCBhLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBuZXdDb250ZXh0LmlzTmVzdGVkID0gdGhpcy5faXNOZXN0ZWQ7XG4gICAgICAgIHJldHVybiBuZXdDb250ZXh0O1xuICAgIH1cblxufVxuXG5cbmV4cG9ydCBjbGFzcyBPYmplY3RNZXRhQ29udGV4dCBleHRlbmRzIENvbnRleHQge1xuICAgIHN0YXRpYyByZWFkb25seSBEZWZhdWx0TG9jYWxlID0gJ2VuJztcblxuICAgIHByaXZhdGUgX2Zvcm1hdHRlcnM6IE1hcDxzdHJpbmcsIGFueT47XG5cbiAgICBjb25zdHJ1Y3RvcihfbWV0YTogT2JqZWN0TWV0YSwgbmVzdGVkOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgc3VwZXIoX21ldGEsIG5lc3RlZCk7XG5cbiAgICB9XG5cblxuICAgIGdldCB2YWx1ZSgpOiBhbnkge1xuICAgICAgICBsZXQgb2JqID0gdGhpcy5vYmplY3Q7XG5cbiAgICAgICAgaWYgKGlzQmxhbmsob2JqKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGZpZWxkUGF0aCA9IHRoaXMuZmllbGRQYXRoKCk7XG4gICAgICAgIHJldHVybiBpc1ByZXNlbnQoZmllbGRQYXRoKSA/IGZpZWxkUGF0aC5nZXRGaWVsZFZhbHVlKG9iaikgOiB0aGlzLnByb3BlcnR5Rm9yS2V5KCd2YWx1ZScpO1xuICAgIH1cblxuXG4gICAgc2V0IHZhbHVlKHZhbDogYW55KSB7XG4gICAgICAgIGxldCBmaWVsZFBhdGggPSB0aGlzLmZpZWxkUGF0aCgpO1xuICAgICAgICBpZiAoaXNQcmVzZW50KGZpZWxkUGF0aCkpIHtcbiAgICAgICAgICAgIGFzc2VydChpc1ByZXNlbnQodGhpcy5vYmplY3QpLCAnQ2FsbCB0byBzZXRWYWx1ZSgpIHdpdGggbm8gY3VycmVudCBvYmplY3QnKTtcbiAgICAgICAgICAgIGZpZWxkUGF0aC5zZXRGaWVsZFZhbHVlKHRoaXMub2JqZWN0LCB2YWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5hbGxQcm9wZXJ0aWVzKCkuZ2V0KE9iamVjdE1ldGEuS2V5VmFsdWUpO1xuICAgICAgICAgICAgYXNzZXJ0KGlzRHluYW1pY1NldHRhYmxlKHZhbHVlKSwgJ0NhbnQgc2V0IGRlcml2ZWQgcHJvcGVydHk6ICcgKyB2YWx1ZSk7XG5cbiAgICAgICAgICAgIGxldCBzZXR0YWJsZTogRHluYW1pY1NldHRhYmxlUHJvcGVydHlWYWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgICAgICAoKDxEeW5hbWljU2V0dGFibGVQcm9wZXJ0eVZhbHVlPnZhbHVlKSkuZXZhbHVhdGVTZXQodGhpcywgdmFsKTtcbiAgICAgICAgICAgIHNldHRhYmxlLmV2YWx1YXRlU2V0KHRoaXMsIHZhbCk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGdldCBvYmplY3QoKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzLmdldChPYmplY3RNZXRhLktleU9iamVjdCk7XG4gICAgfVxuXG4gICAgZ2V0IGZvcm1hdHRlcnMoKTogTWFwPHN0cmluZywgYW55PiB7XG4gICAgICAgIGlmIChpc0JsYW5rKHRoaXMuX2Zvcm1hdHRlcnMpKSB7XG4gICAgICAgICAgICB0aGlzLl9mb3JtYXR0ZXJzID0gbmV3IE1hcDxzdHJpbmcsIGFueT4oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZm9ybWF0dGVycztcbiAgICB9XG5cbiAgICBmaWVsZFBhdGgoKTogRmllbGRQYXRoIHtcbiAgICAgICAgbGV0IHByb3BNYXA6IE9iamVjdE1ldGFQcm9wZXJ0eU1hcCA9IDxPYmplY3RNZXRhUHJvcGVydHlNYXA+IHRoaXMuYWxsUHJvcGVydGllcygpO1xuICAgICAgICByZXR1cm4gcHJvcE1hcC5maWVsZFBhdGg7XG4gICAgfVxuXG5cbiAgICBsb2NhbGUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdE1ldGFDb250ZXh0LkRlZmF1bHRMb2NhbGU7XG4gICAgfVxuXG4gICAgdGltZXpvbmUoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIH1cblxufVxuXG5leHBvcnQgY2xhc3MgVUlDb250ZXh0IGV4dGVuZHMgT2JqZWN0TWV0YUNvbnRleHQge1xuXG5cbiAgICBjb25zdHJ1Y3RvcihfbWV0YTogVUlNZXRhLCBuZXN0ZWQ6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICBzdXBlcihfbWV0YSwgbmVzdGVkKTtcbiAgICB9XG5cblxuICAgIC8vIHVzZXIgdmFsdWVzIGZyb20gdXNlciBzZXR0aW5ncy9sb2NhbGVzXG4gICAgbG9jYWxlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBzdXBlci5sb2NhbGUoKTtcbiAgICB9XG5cbiAgICB0aW1lem9uZSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gc3VwZXIudGltZXpvbmUoKTtcbiAgICB9XG59XG5cblxuXG5cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IFNBUCBBcmliYVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqIEJhc2VkIG9uIG9yaWdpbmFsIHdvcms6IE1ldGFVSTogQ3JhaWcgRmVkZXJpZ2hpICgyMDA4KVxuICpcbiAqL1xuaW1wb3J0IHtcbiAgICBCb29sZWFuV3JhcHBlcixcbiAgICBpc0FycmF5LFxuICAgIGlzQmxhbmssXG4gICAgaXNQcmVzZW50LFxuICAgIExpc3RXcmFwcGVyLFxuICAgIE1hcFdyYXBwZXIsXG4gICAgcHJpbnQsXG4gICAgc2hpZnRMZWZ0LFxuICAgIFN0cmluZ0pvaW5lclxufSBmcm9tICdAYXJpYmF1aS9jb3JlJztcbmltcG9ydCB7S2V5RGF0YSwgTWF0Y2hWYWx1ZSwgTWV0YSwgUHJvcGVydHlNYW5hZ2VyLCBQcm9wZXJ0eU1hcCwgUnVsZVNldH0gZnJvbSAnLi9tZXRhJztcblxuXG4vKipcbiAqIEEgU2VsZWN0b3IgZGVmaW5lcyBhIHNvcnQgb2Yga2V5L3ZhbHVlIHByZWRpY2F0ZSB0aGF0IG11c3QgYmUgc2F0aXNmaWVkIGZvciBhXG4gKiBydWxlIHRvIGFwcGx5LlxuICovXG5leHBvcnQgY2xhc3MgU2VsZWN0b3JcbntcblxuICAgIHByaXZhdGUgX21hdGNoQXJyYXlJZHg6IG51bWJlciA9IDA7XG4gICAgcHJpdmF0ZSBfbWF0Y2hWYWx1ZTogTWF0Y2hWYWx1ZTtcblxuXG4gICAgc3RhdGljIGZyb21NYXAodmFsdWVzOiBNYXAgPHN0cmluZywgYW55Pik6IEFycmF5PFNlbGVjdG9yPlxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5PFNlbGVjdG9yPigpO1xuICAgICAgICBNYXBXcmFwcGVyLml0ZXJhYmxlKHZhbHVlcykuZm9yRWFjaCgodmFsdWUsIGtleSkgPT5cbiAgICAgICAge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV3IFNlbGVjdG9yKGtleSwgdmFsdWUsIGZhbHNlKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfa2V5OiBzdHJpbmcsIHByaXZhdGUgX3ZhbHVlOiBhbnksIHB1YmxpYyBpc0RlY2w6IGJvb2xlYW4gPSBmYWxzZSlcbiAgICB7XG4gICAgfVxuXG5cbiAgICBnZXQga2V5KCk6IHN0cmluZ1xuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2tleTtcbiAgICB9XG5cbiAgICBnZXQgdmFsdWUoKTogYW55XG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gICAgfVxuXG4gICAgYmluZFRvS2V5RGF0YShrZXlEYXRhOiBLZXlEYXRhKTogdm9pZFxuICAgIHtcbiAgICAgICAgdGhpcy5fbWF0Y2hBcnJheUlkeCA9IGtleURhdGEuX2lkO1xuICAgICAgICB0aGlzLl9tYXRjaFZhbHVlID0ga2V5RGF0YS5tYXRjaFZhbHVlKHRoaXMuX3ZhbHVlKTtcblxuICAgIH1cblxuICAgIG1hdGNoZXMobWF0Y2hBcnJheTogQXJyYXk8TWF0Y2hWYWx1ZT4pOiBib29sZWFuXG4gICAge1xuICAgICAgICAvLyBJZiB3ZSBoYXZlbid0IGJlZW4gaW5pdGlhbGl6ZWQgd2l0aCBhIG1hdGNoVmFsdWUsIHRoZW4gd2Ugd2VyZSBpbmRleGVkIGFuZCBkb24ndCBuZWVkIHRvXG4gICAgICAgIC8vIG1hdGNoXG4gICAgICAgIGlmIChpc0JsYW5rKHRoaXMuX21hdGNoVmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgY29uc3Qgb3RoZXI6IE1hdGNoVmFsdWUgPSBtYXRjaEFycmF5W3RoaXMuX21hdGNoQXJyYXlJZHhdO1xuXG4gICAgICAgIHJldHVybiBpc1ByZXNlbnQob3RoZXIpID8gb3RoZXIubWF0Y2hlcyh0aGlzLl9tYXRjaFZhbHVlKSA6IGZhbHNlO1xuICAgIH1cblxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nXG4gICAge1xuICAgICAgICBjb25zdCBzaiA9IG5ldyBTdHJpbmdKb2luZXIoW10pO1xuXG4gICAgICAgIHNqLmFkZCh0aGlzLmtleSk7XG4gICAgICAgIHNqLmFkZCgnPScpO1xuICAgICAgICBzai5hZGQodGhpcy5fdmFsdWUudG9TdHJpbmcoKSk7XG4gICAgICAgIHNqLmFkZCgnKCcpO1xuICAgICAgICBzai5hZGQodGhpcy5pc0RlY2wgKyAnJyk7XG4gICAgICAgIHNqLmFkZCgnKScpO1xuICAgICAgICBzai5hZGQoJ1sgJyk7XG4gICAgICAgIHNqLmFkZCh0aGlzLl9tYXRjaEFycmF5SWR4ICsgJ10nKTtcblxuICAgICAgICByZXR1cm4gc2oudG9TdHJpbmcoKTtcbiAgICB9XG59XG5cblxuLyoqXG4gKiBBIFJ1bGUgZGVmaW5lcyBhIG1hcCBvZiBwcm9wZXJ0aWVzIHRoYXQgc2hvdWxkIGFwcGx5IGluIHRoZSBldmVudCB0aGF0IGEgc2V0IG9mIFNlbGVjdG9yc1xuICogYXJlIG1hdGNoZWQuICBHaXZlbiBhIHJ1bGUgYmFzZSAoTWV0YSkgYW5kIGEgc2V0IG9mIGFzc2VydGVkIHZhbHVlcyAoQ29udGV4dCkgYSBsaXN0IG9mIG1hdGNoaW5nXG4gKiBydWxlcyBjYW4gYmUgY29tcHV0ZWQgKGJ5IG1hdGNoaW5nIHRoZWlyIHNlbGVjdG9ycyBhZ2FpbnN0IHRoZSB2YWx1ZXMpIGFuZCBieSBzdWNjZXNzaXZlbHkgKGluXG4gKiByYW5rIC8gcHJpb3JpdHkgb3JkZXIpIGFwcGx5aW5nIChtZXJnaW5nKSB0aGVpciBwcm9wZXJ0eSBtYXBzIGEgc2V0IG9mIGVmZmVjdGl2ZSBwcm9wZXJ0aWVzIGNhblxuICogYmUgY29tcHV0ZWQuXG4gKlxuICovXG5cbmV4cG9ydCBjbGFzcyBSdWxlXG57XG4gICAgcHJpdmF0ZSBfaWQ6IG51bWJlcjtcbiAgICBwcml2YXRlIF9ydWxlU2V0OiBSdWxlU2V0O1xuXG4gICAga2V5TWF0Y2hlc01hc2s6IG51bWJlciA9IDA7XG4gICAga2V5SW5kZXhlZE1hc2s6IG51bWJlciA9IDA7XG4gICAga2V5QW50aU1hc2s6IG51bWJlciA9IDA7XG5cbiAgICBzdGF0aWMgIG1lcmdlKG1ldGE6IE1ldGEsIHNyYzogTWFwPHN0cmluZywgYW55PiwgZGVzdDogTWFwPHN0cmluZywgYW55PixcbiAgICAgICAgICAgICAgICAgIGRlY2xhcmVLZXk6IHN0cmluZyk6IG51bWJlclxuICAgIHtcbiAgICAgICAgbGV0IHVwZGF0ZWRNYXNrID0gMDtcblxuICAgICAgICBNYXBXcmFwcGVyLml0ZXJhYmxlKHNyYykuZm9yRWFjaCgodmFsdWUsIGtleSkgPT5cbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgcHJvcE1hbmFnZXI6IFByb3BlcnR5TWFuYWdlciA9IG1ldGEubWFuYWdlckZvclByb3BlcnR5KFxuICAgICAgICAgICAgICAgIGtleSk7XG4gICAgICAgICAgICBjb25zdCBvcmlnID0gZGVzdC5nZXQoa2V5KTtcbiAgICAgICAgICAgIGNvbnN0IGlzRGVjbGFyZTogYm9vbGVhbiA9IChpc1ByZXNlbnQoZGVjbGFyZUtleSkgJiYga2V5ID09PSBkZWNsYXJlS2V5KTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbCA9IHByb3BNYW5hZ2VyLm1lcmdlUHJvcGVydHkoa2V5LCBvcmlnLCB2YWx1ZSwgaXNEZWNsYXJlKTtcblxuICAgICAgICAgICAgaWYgKG5ld1ZhbCAhPT0gb3JpZykge1xuICAgICAgICAgICAgICAgIGRlc3Quc2V0KGtleSwgbmV3VmFsKTtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXlEYXRhOiBLZXlEYXRhID0gcHJvcE1hbmFnZXIuX2tleURhdGFUb1NldDtcblxuICAgICAgICAgICAgICAgIGlmIChpc1ByZXNlbnQoa2V5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5bWFzazogbnVtYmVyID0gc2hpZnRMZWZ0KDEsIGtleURhdGEuX2lkKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoKGtleW1hc2sgJiB1cGRhdGVkTWFzaykgPT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChkZXN0IGluc3RhbmNlb2YgUHJvcGVydHlNYXApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkTWFzayB8PSBrZXltYXNrO1xuICAgICAgICAgICAgICAgICAgICAgICAgKDxQcm9wZXJ0eU1hcD5kZXN0KS5hZGRDb250ZXh0S2V5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BNYW5hZ2VyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB1cGRhdGVkTWFzaztcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgX3NlbGVjdG9yczogQXJyYXk8U2VsZWN0b3I+LCBwcml2YXRlIF9wcm9wZXJ0aWVzPzogTWFwPHN0cmluZywgYW55PixcbiAgICAgICAgICAgICAgICBwcml2YXRlIF9yYW5rOiBudW1iZXIgPSAtMSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIF9saW5lTnVtYmVyOiBudW1iZXIgPSAtMSlcbiAgICB7XG5cbiAgICB9XG5cblxuICAgIG1hdGNoZXMobWF0Y2hBcnJheTogQXJyYXk8TWF0Y2hWYWx1ZT4pOiBib29sZWFuXG4gICAge1xuICAgICAgICBmb3IgKGxldCBzZWwgb2YgdGhpcy5fc2VsZWN0b3JzKSB7XG4gICAgICAgICAgICBpZiAoIXNlbC5tYXRjaGVzKG1hdGNoQXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJldHVybnMgY29udGV4dCBrZXlzIG1vZGlmaWVkXG4gICAgICovXG4gICAgYXBwbHkobWV0YTogTWV0YSwgcHJvcGVydGllczogUHJvcGVydHlNYXAsIGRlY2xhcmVLZXk6IHN0cmluZyk6IG51bWJlclxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMuX3JhbmsgPT09IE51bWJlci5NSU5fVkFMVUUpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBSdWxlLm1lcmdlKG1ldGEsIHRoaXMuX3Byb3BlcnRpZXMsIHByb3BlcnRpZXMsIGRlY2xhcmVLZXkpO1xuICAgIH1cblxuICAgIGRpc2FibGUoKTogdm9pZFxuICAgIHtcbiAgICAgICAgdGhpcy5fcmFuayA9IE51bWJlci5NSU5fVkFMVUU7XG4gICAgfVxuXG4gICAgZGlzYWJsZWQoKTogYm9vbGVhblxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JhbmsgPT09IE51bWJlci5NSU5fVkFMVUU7XG4gICAgfVxuXG4gICAgZ2V0IGxpbmVOdW1iZXIoKTogbnVtYmVyXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGluZU51bWJlcjtcbiAgICB9XG5cbiAgICBzZXQgbGluZU51bWJlcihsaW5lTnVtYmVyKVxuICAgIHtcbiAgICAgICAgdGhpcy5fbGluZU51bWJlciA9IGxpbmVOdW1iZXI7XG4gICAgfVxuXG5cbiAgICBsb2NhdGlvbigpOiBzdHJpbmdcbiAgICB7XG4gICAgICAgIGxldCBwYXRoOiBzdHJpbmcgPSBpc1ByZXNlbnQodGhpcy5fcnVsZVNldCkgPyB0aGlzLl9ydWxlU2V0LmZpbGVQYXRoIDogJ1Vua25vdyc7XG4gICAgICAgIHJldHVybiAodGhpcy5fbGluZU51bWJlciA+PSAwICkgPyAobmV3IFN0cmluZ0pvaW5lcihbXG4gICAgICAgICAgICAgICAgcGF0aCwgJzonLCB0aGlzLl9saW5lTnVtYmVyICsgJydcbiAgICAgICAgICAgIF0pKS50b1N0cmluZygpIDogcGF0aDtcbiAgICB9XG5cblxuICAgIGdldCBzZWxlY3RvcnMoKTogQXJyYXk8U2VsZWN0b3I+XG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0b3JzO1xuICAgIH1cblxuICAgIHNldCBzZWxlY3RvcnModmFsdWU6IEFycmF5PFNlbGVjdG9yPilcbiAgICB7XG4gICAgICAgIHRoaXMuX3NlbGVjdG9ycyA9IHZhbHVlO1xuICAgIH1cblxuICAgIGdldCBwcm9wZXJ0aWVzKCk6IE1hcDxzdHJpbmcsIGFueT5cbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9wZXJ0aWVzO1xuICAgIH1cblxuICAgIHNldCBwcm9wZXJ0aWVzKHZhbHVlOiBNYXA8c3RyaW5nLCBhbnk+KVxuICAgIHtcbiAgICAgICAgdGhpcy5fcHJvcGVydGllcyA9IHZhbHVlO1xuICAgIH1cblxuICAgIGdldCByYW5rKCk6IG51bWJlclxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jhbms7XG4gICAgfVxuXG5cbiAgICBzZXQgcmFuayh2YWx1ZTogbnVtYmVyKVxuICAgIHtcbiAgICAgICAgdGhpcy5fcmFuayA9IHZhbHVlO1xuICAgIH1cblxuICAgIGdldCBydWxlU2V0KCk6IFJ1bGVTZXRcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ydWxlU2V0O1xuICAgIH1cblxuXG4gICAgc2V0IHJ1bGVTZXQodmFsdWU6IFJ1bGVTZXQpXG4gICAge1xuICAgICAgICB0aGlzLl9ydWxlU2V0ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0IGlkKCk6IG51bWJlclxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xuICAgIH1cblxuICAgIHNldCBpZCh2YWx1ZTogbnVtYmVyKVxuICAgIHtcbiAgICAgICAgdGhpcy5faWQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBpc0VkaXRhYmxlKCk6IGJvb2xlYW5cbiAgICB7XG4gICAgICAgIHJldHVybiAodGhpcy5fcnVsZVNldCAhPT0gbnVsbCkgJiYgKHRoaXMuX3J1bGVTZXQuZWRpdGFibGVTdGFydCA+IDApICYmXG4gICAgICAgICAgICAodGhpcy5faWQgPj0gdGhpcy5fcnVsZVNldC5lZGl0YWJsZVN0YXJ0KTtcbiAgICB9XG5cbiAgICBjcmVhdGVEZWNsKCk6IFJ1bGVcbiAgICB7XG4gICAgICAgIC8qXG4gICAgICAgICBAZmllbGQ9ZHlubyB7IHZhbHVlOiR7IHNvbWUgZXhwcn0gfSBiZWNvbWVzXG4gICAgICAgICBkZWNsYXJlIHsgZmllbGQ6ZHlubyB9XG4gICAgICAgICBmaWVsZD1keW5vIHsgZmllbGQ6ZHlubzsgdmFsdWU6JHsgc29tZSBleHByfSB9XG4gICAgICAgICAqL1xuICAgICAgICAvLyBhZGQgcnVsZSBmb3IgZGVjbGFyYXRpb25cblxuICAgICAgICBsZXQgc2VsZWN0b3JzOiBBcnJheTxTZWxlY3Rvcj4gPSB0aGlzLl9zZWxlY3RvcnM7XG4gICAgICAgIGxldCBkZWNsUHJlZDogU2VsZWN0b3IgPSBzZWxlY3RvcnNbc2VsZWN0b3JzLmxlbmd0aCAtIDFdO1xuICAgICAgICBsZXQgcHJlUHJlZHM6IEFycmF5PFNlbGVjdG9yPiA9IHRoaXMuY29udmVydEtleU92ZXJyaWRlcyhcbiAgICAgICAgICAgIHNlbGVjdG9ycy5zbGljZSgwLCBzZWxlY3RvcnMubGVuZ3RoIC0gMSkpO1xuXG4gICAgICAgIGlmIChpc0JsYW5rKHRoaXMuX3Byb3BlcnRpZXMpKSB7XG4gICAgICAgICAgICB0aGlzLl9wcm9wZXJ0aWVzID0gbmV3IE1hcDxzdHJpbmcsIGFueT4oKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBwIG9mIHNlbGVjdG9ycykge1xuICAgICAgICAgICAgaWYgKCEoaXNBcnJheShwLnZhbHVlKSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcm9wZXJ0aWVzLnNldChwLmtleSwgcC52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRmxhZyB0aGUgZGVjbGFyaW5nIHJ1bGUgYXMgYSBwcm9wZXJ0eVxuICAgICAgICB0aGlzLl9wcm9wZXJ0aWVzLnNldChNZXRhLkRlY2xSdWxlLCBuZXcgUnVsZVdyYXBwZXIodGhpcykpO1xuXG4gICAgICAgIC8vIGNoZWNrIGZvciBvdmVycmlkZSBzY29wZVxuICAgICAgICBsZXQgaGFzT3ZlcnJpZGVTY29wZSA9IGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBwIG9mIHByZVByZWRzKSB7XG4gICAgICAgICAgICBpZiAocC5rZXkgPT09IGRlY2xQcmVkLmtleSkge1xuICAgICAgICAgICAgICAgIGhhc092ZXJyaWRlU2NvcGUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgZGVjbCBrZXkgaXNuJ3Qgc2NvcGVkLCB0aGVuIHNlbGVjdCBvbiBubyBzY29wZVxuICAgICAgICBpZiAoIWhhc092ZXJyaWRlU2NvcGUpIHtcbiAgICAgICAgICAgIGxldCBvdmVycmlkZUtleTogc3RyaW5nID0gTWV0YS5vdmVycmlkZUtleUZvcktleShkZWNsUHJlZC5rZXkpO1xuICAgICAgICAgICAgcHJlUHJlZHMudW5zaGlmdChuZXcgU2VsZWN0b3Iob3ZlcnJpZGVLZXksIE1ldGEuTnVsbE1hcmtlcikpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIGRlY2wgcnVsZS4uLlxuICAgICAgICBwcmVQcmVkcy5wdXNoKG5ldyBTZWxlY3RvcihNZXRhLktleURlY2xhcmUsIGRlY2xQcmVkLmtleSkpO1xuXG4gICAgICAgIGxldCBtID0gbmV3IE1hcDxzdHJpbmcsIGFueT4oKTtcbiAgICAgICAgbS5zZXQoZGVjbFByZWQua2V5LCBkZWNsUHJlZC52YWx1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgUnVsZShwcmVQcmVkcywgbSwgMCwgLTEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICByZXdyaXRlIGFueSBzZWxlY3RvciBvZiB0aGUgZm9ybSBcImxheW91dD1MMSwgY2xhc3M9YywgbGF5b3V0PUwyXCIgdG9cbiAgICAgKiAgXCJsYXlvdXRfbz1MMSBjbGFzcz1jLCBsYXlvdXQ9TDJcIlxuICAgICAqL1xuXG4gICAgY29udmVydEtleU92ZXJyaWRlcyhvcmlnOiBBcnJheTxTZWxlY3Rvcj4pOiBBcnJheTxTZWxlY3Rvcj5cbiAgICB7XG5cbiAgICAgICAgbGV0IHJlc3VsdCA9IG9yaWc7XG4gICAgICAgIGxldCBjb3VudDogbnVtYmVyID0gb3JpZy5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgbGV0IHA6IFNlbGVjdG9yID0gb3JpZ1tpXTtcbiAgICAgICAgICAgIC8vIFNlZSBpZiBvdmVycmlkZGVkIGJ5IHNhbWUga2V5IGxhdGVyIGluIHNlbGVjdG9yXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gaSArIDE7IGogPCBjb3VudDsgaisrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBOZXh0OiBTZWxlY3RvciA9IG9yaWdbal07XG5cbiAgICAgICAgICAgICAgICBpZiAocE5leHQua2V5ID09PSBwLmtleSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB3ZSdyZSBvdmVycmlkZGVuLCB3ZSBkcm9wIG91cnMsIGFuZCByZXBsYWNlIHRoZSBuZXh0IGNvbGxpc2lvblxuICAgICAgICAgICAgICAgICAgICAvLyB3aXRoIG9uZSB3aXRoIG91ciBwcmVmaXhcblxuICAgICAgICAgICAgICAgICAgICAvLyBtYWtlIGEgY29weSBpZiB3ZSBoYXZlbid0IGFscmVhZHlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gb3JpZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gb3JpZy5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwID0gbmV3IFNlbGVjdG9yKE1ldGEub3ZlcnJpZGVLZXlGb3JLZXkocC5rZXkpLCBwLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gb3JpZykge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nXG4gICAge1xuICAgICAgICBsZXQgc2ogPSBuZXcgU3RyaW5nSm9pbmVyKFsnPFJ1bGUgWyddKTtcbiAgICAgICAgc2ouYWRkKHRoaXMuX3JhbmsgKyAnXSAnKTtcblxuICAgICAgICBpZiAoaXNCbGFuayh0aGlzLnNlbGVjdG9ycykpIHtcbiAgICAgICAgICAgIHNqLmFkZCgnbnVsbCwgbnVsbCAtLT4gbnVsbCA+Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzai5hZGQoTGlzdFdyYXBwZXIudG9TdHJpbmc8U2VsZWN0b3I+KHRoaXMuX3NlbGVjdG9ycykpO1xuXG4gICAgICAgICAgICBzai5hZGQoJyAtPiAnKTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLl9wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgc2ouYWRkKCdbLF0nICsgJyA+Jyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wcm9wZXJ0aWVzLmhhcygnZGVjbFJ1bGUnKSkge1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2ouYWRkKE1hcFdyYXBwZXIudG9TdHJpbmcodGhpcy5fcHJvcGVydGllcykgKyAnID4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2ouYWRkKCdbICcpO1xuICAgICAgICAgICAgc2ouYWRkKHRoaXMua2V5SW5kZXhlZE1hc2sgKyAnLCAnKTtcbiAgICAgICAgICAgIHNqLmFkZCh0aGlzLmtleUFudGlNYXNrICsgJywgJyk7XG4gICAgICAgICAgICBzai5hZGQodGhpcy5rZXlNYXRjaGVzTWFzayArICcnKTtcbiAgICAgICAgICAgIHNqLmFkZCgnIF0nKTtcblxuICAgICAgICB9XG5cblxuICAgICAgICByZXR1cm4gc2oudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBfY2hlY2tSdWxlKHZhbHVlczogTWFwPHN0cmluZywgYW55PiwgbWV0YTogTWV0YSk6IHZvaWRcbiAgICB7XG4gICAgICAgIExpc3RXcmFwcGVyLmZvckVhY2hXaXRoSW5kZXg8U2VsZWN0b3I+KHRoaXMuc2VsZWN0b3JzLCAocCwgaSkgPT5cbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IGNvbnRleHRWYWx1ZSA9IHZhbHVlcy5nZXQocC5rZXkpO1xuICAgICAgICAgICAgbGV0IGtleURhdGE6IEtleURhdGEgPSBtZXRhLmtleURhdGEocC5rZXkpO1xuXG4gICAgICAgICAgICBpZiAoaXNQcmVzZW50KGtleURhdGEuX3RyYW5zZm9ybWVyKSkge1xuICAgICAgICAgICAgICAgIGNvbnRleHRWYWx1ZSA9IGtleURhdGEuX3RyYW5zZm9ybWVyLnRyYW5mb3JtRm9yTWF0Y2goY29udGV4dFZhbHVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGlzUHJlc2VudChjb250ZXh0VmFsdWUpICYmXG4gICAgICAgICAgICAgICAgKChNZXRhLktleUFueSA9PT0gcC52YWx1ZSAmJiBCb29sZWFuV3JhcHBlci5ib2xlYW5WYWx1ZShjb250ZXh0VmFsdWUpIHx8XG4gICAgICAgICAgICAgICAgTWV0YS5vYmplY3RFcXVhbHMoY29udGV4dFZhbHVlLCBwLnZhbHVlKSB8fFxuICAgICAgICAgICAgICAgIChpc0FycmF5KHAudmFsdWUpICYmIHAudmFsdWUuaW5kZXhPZihjb250ZXh0VmFsdWUpID4gLTEpIHx8XG4gICAgICAgICAgICAgICAgKGlzQXJyYXkocC52YWx1ZSkgJiYgY29udGV4dFZhbHVlLmluZGV4T2YocC52YWx1ZSkgPiAtMSApKSkpIHtcbiAgICAgICAgICAgICAgICAvLyBva2F5XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHByaW50KCdQb3NzaWJsZSBiYWQgcnVsZSBtYXRjaCEgIFJ1bGU6ICVzOyBzZWxlY3RvcjogJXMsIGNvbnRleHQgdmFsOiAlcycgKyB0aGlzICtcbiAgICAgICAgICAgICAgICAgICAgJyAnICsgcCArICcgJyArIGNvbnRleHRWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG59XG5cbi8vIGhlcmUgc28gbG9nZ2luZyBvZiBwcm9wZXJ0eSBtYXAgZG9lc24ndCBpbmZpbml0ZWx5IHJlY3Vyc2VcbmV4cG9ydCBjbGFzcyBSdWxlV3JhcHBlclxue1xuXG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcnVsZTogUnVsZSlcbiAgICB7XG4gICAgfVxufVxuXG5cblxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgU0FQIEFyaWJhXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogQmFzZWQgb24gb3JpZ2luYWwgd29yazogTWV0YVVJOiBDcmFpZyBGZWRlcmlnaGkgKDIwMDgpXG4gKlxuICovXG4vLyB0b2RvOiB0cnkgdG8gZ2V0IHJpZCBvZiB0aGlzIGxpYnJhcnlcbmltcG9ydCAqIGFzIENvbGxlY3Rpb25zIGZyb20gJ3R5cGVzY3JpcHQtY29sbGVjdGlvbnMnO1xuaW1wb3J0IHtcbiAgICBhc3NlcnQsXG4gICAgQm9vbGVhbldyYXBwZXIsXG4gICAgQ29tcG9zaXRlVHlwZSxcbiAgICBlcXVhbHMsXG4gICAgaXNBcnJheSxcbiAgICBpc0JsYW5rLFxuICAgIGlzQm9vbGVhbixcbiAgICBpc0VudGl0eSxcbiAgICBpc0Z1bmN0aW9uLFxuICAgIGlzUHJlc2VudCxcbiAgICBpc1N0cmluZyxcbiAgICBpc1N0cmluZ01hcCxcbiAgICBpc1ZhbHVlLFxuICAgIExpc3RXcmFwcGVyLFxuICAgIE1hcFdyYXBwZXIsIG9iamVjdFRvTmFtZSxcbiAgICBwcmludCxcbiAgICBzaGlmdExlZnQsXG4gICAgc2hpZnRSaWdodCxcbiAgICBTdHJpbmdKb2luZXIsXG4gICAgU3RyaW5nV3JhcHBlcixcbiAgICB1bmltcGxlbWVudGVkXG59IGZyb20gJ0BhcmliYXVpL2NvcmUnO1xuaW1wb3J0IHtNYXRjaCwgTWF0Y2hSZXN1bHQsIFVuaW9uTWF0Y2hSZXN1bHR9IGZyb20gJy4vbWF0Y2gnO1xuaW1wb3J0IHtSdWxlTG9hZGVyfSBmcm9tICcuL3J1bGUtbG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHtDb250ZXh0fSBmcm9tICcuL2NvbnRleHQnO1xuaW1wb3J0IHtEZWZlcnJlZE9wZXJhdGlvbkNoYWluLCBEeW5hbWljUHJvcGVydHlWYWx1ZX0gZnJvbSAnLi9wcm9wZXJ0eS12YWx1ZSc7XG5pbXBvcnQge1J1bGUsIFNlbGVjdG9yfSBmcm9tICcuL3J1bGUnO1xuXG4vKipcbiAqIE1ldGEgaXMgdGhlIGNvcmUgY2xhc3MgaW4gTWV0YVVJLiAgQW4gaW5zdGFuY2Ugb2YgbWV0YSByZXByZXNlbnRzIGEgJ1J1bGUgQmFzZScgKGEgcmVwb3NpdG9yeVxuICogcnVsZXMpLCBhbmQgdGhpcyBydWxlIGJhc2UgaXMgdXNlZCB0byBjb21wdXRlIHByb3BlcnR5IG1hcHMgYmFzZWQgb24gYSBzZXJpZXMgb2Yga2V5L3ZhbHVlXG4gKiBjb25zdHJhaW50cyAodHlwaWNhbGx5IGJhc2VkIG9uIHRoZSBjdXJyZW50IHZhbHVlcyBpbiBhIENvbnRleHQgaW5zdGFuY2UpLlxuICpcbiAqIE1ldGEgd29ya3MgaW4gY29uY2VydCB3aXRoIE1hdGNoLk1hdGNoUmVzdWx0IHRvIGNhY2hlIHBhcnRpYWwgbWF0Y2hlcyAobWF0Y2ggdHJlZXMpIHdpdGggY2FjaGVkXG4gKiBjb21wdXRlZCBwcm9wZXJ0eSBtYXBzLiBNZXRhIGlzIGdlbmVyYWxseSB1c2VkIGJ5IHdheSBvZiBpdHMgc3ViY2xhc3NlcyBPYmplY3RNZXRhIGFuZCBVSU1ldGFcbiAqICh3aGljaCBleHRlbmQgTWV0YSB3aXRoIGJlaGF2aW9ycyBhcm91bmQgYXV0by1jcmVhdGluZyBydWxlcyBmb3IgcmVmZXJlbmNlcyBUeXBlc2NyaXB0cyBjbGFzc2VzXG4gKiBhbmQgZHluYW1pYyBwcm9wZXJ0aWVzIGZvciBmaWVsZCBhbmQgbGF5b3V0IHpvbmluZylcbiAqXG4gKlxuICovXG5leHBvcnQgY2xhc3MgTWV0YSB7XG4gICAgc3RhdGljIHJlYWRvbmx5IEtleUFueTogc3RyaW5nID0gJyonO1xuICAgIHN0YXRpYyByZWFkb25seSBLZXlEZWNsYXJlOiBzdHJpbmcgPSAnZGVjbGFyZSc7XG4gICAgc3RhdGljIHJlYWRvbmx5IEtleVRyYWl0OiBzdHJpbmcgPSAndHJhaXQnO1xuXG4gICAgc3RhdGljIHJlYWRvbmx5IExvd1J1bGVQcmlvcml0eTogbnVtYmVyID0gLTEwMDAwMDtcbiAgICBzdGF0aWMgcmVhZG9ubHkgU3lzdGVtUnVsZVByaW9yaXR5OiBudW1iZXIgPSAtMjAwMDAwO1xuICAgIHN0YXRpYyByZWFkb25seSBDbGFzc1J1bGVQcmlvcml0eTogbnVtYmVyID0gLTEwMDAwMDtcbiAgICBzdGF0aWMgcmVhZG9ubHkgVGVtcGxhdGVSdWxlUHJpb3JpdHk6IG51bWJlciA9IDEwMDAwMDtcbiAgICBzdGF0aWMgcmVhZG9ubHkgRWRpdG9yUnVsZVByaW9yaXR5OiBudW1iZXIgPSAyMDAwMDA7XG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgTWF4S2V5RGF0YXM6IG51bWJlciA9IDY0O1xuICAgIHN0YXRpYyByZWFkb25seSBOdWxsTWFya2VyOiBhbnkgPSB7bWFya2VybnVsbDogdHJ1ZX07XG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgU2NvcGVLZXk6IHN0cmluZyA9ICdzY29wZUtleSc7XG4gICAgc3RhdGljIHJlYWRvbmx5IERlY2xSdWxlOiBzdHJpbmcgPSAnZGVjbFJ1bGUnO1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBQYXJ0aWFsSW5kZXhpbmcgaW5kZXhlcyBlYWNoIHJ1bGUgYnkgYSBzaW5nbGUgKHdlbGwgY2hvc2VuKSBrZXkgYW5kIGV2YWx1YXRlcyBvdGhlciBwYXJ0cyBvZlxuICAgICAqIHRoZSBzZWxlY3RvciBvbiB0aGUgaW5kZXgtZmlsdGVyZWQgbWF0Y2hlcyAoZ2VuZXJhbGx5IHRoaXMgaXMgYSAgd2luIHNpbmNlIG1heSBzZWxlY3RvcnMgYXJlXG4gICAgICogbm90IHNlbGVjdGl2ZSwgcmVzdWx0aW5nIGluIGh1Z2UgcnVsZSB2ZWN0b3JzKVxuICAgICAqXG4gICAgICovXG4gICAgc3RhdGljIF9Vc2VQYXJ0aWFsSW5kZXhpbmc6IGJvb2xlYW4gPSB0cnVlO1xuICAgIHN0YXRpYyBfRGVidWdEb3VibGVDaGVja01hdGNoZXM6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIHN0YXRpYyBQcm9wZXJ0eU1lcmdlcl9EZWNsYXJlTGlzdDogYW55ID0gbnVsbDtcbiAgICBzdGF0aWMgUHJvcGVydHlNZXJnZXJfVHJhaXRzOiBhbnkgPSBudWxsO1xuICAgIHN0YXRpYyBQcm9wZXJ0eU1lcmdlcl9MaXN0OiBhbnkgPSBudWxsO1xuICAgIHN0YXRpYyBUcmFuc2Zvcm1lcl9LZXlQcmVzZW50OiBhbnkgPSBudWxsO1xuXG5cbiAgICBfcnVsZXM6IFJ1bGVbXSA9IG5ldyBBcnJheTxSdWxlPigpO1xuICAgIF9ydWxlQ291bnQ6IG51bWJlciA9IDA7XG4gICAgX3Rlc3RSdWxlczogTWFwPHN0cmluZywgYW55PiA9IG5ldyBNYXA8c3RyaW5nLCBhbnk+KCk7XG5cbiAgICBwcm90ZWN0ZWQgX2N1cnJlbnRSdWxlU2V0OiBSdWxlU2V0O1xuICAgIHByaXZhdGUgX25leHRLZXlJZDogbnVtYmVyID0gMDtcbiAgICBwcml2YXRlIF9ydWxlU2V0R2VuZXJhdGlvbjogbnVtYmVyID0gMDtcblxuICAgIHByaXZhdGUgX2tleURhdGE6IE1hcDxzdHJpbmcsIEtleURhdGE+ID0gbmV3IE1hcDxzdHJpbmcsIEtleURhdGE+KCk7XG5cbiAgICBwcml2YXRlIF9rZXlEYXRhc0J5SWQ6IEtleURhdGFbXSA9IG5ldyBBcnJheTxLZXlEYXRhPihNZXRhLk1heEtleURhdGFzKTtcbiAgICBwcml2YXRlIF9NYXRjaFRvUHJvcHNDYWNoZTogQ29sbGVjdGlvbnMuRGljdGlvbmFyeTxNYXRjaCwgUHJvcGVydHlNYXA+ID1cbiAgICAgICAgbmV3IENvbGxlY3Rpb25zLkRpY3Rpb25hcnk8TWF0Y2gsIFByb3BlcnR5TWFwPigpO1xuICAgIHByaXZhdGUgX1Byb3BlcnR5TWFwVW5pcXVlcjogQ29sbGVjdGlvbnMuRGljdGlvbmFyeTxQcm9wZXJ0eU1hcCwgUHJvcGVydHlNYXA+ID1cbiAgICAgICAgbmV3IENvbGxlY3Rpb25zLkRpY3Rpb25hcnk8UHJvcGVydHlNYXAsIFByb3BlcnR5TWFwPigpO1xuXG4gICAgcHJpdmF0ZSBfaWRlbnRpdHlDYWNoZSA9IG5ldyBDb2xsZWN0aW9ucy5EaWN0aW9uYXJ5PGFueSwgYW55PigpO1xuICAgIHByaXZhdGUgX21hbmFnZXJGb3JQcm9wZXJ0eTogTWFwPHN0cmluZywgUHJvcGVydHlNYW5hZ2VyPiA9IG5ldyBNYXA8c3RyaW5nLCBQcm9wZXJ0eU1hbmFnZXI+KCk7XG5cblxuICAgIHByaXZhdGUgX2RlY2xhcmVLZXlNYXNrOiBudW1iZXIgPSAwO1xuXG4gICAgcHJvdGVjdGVkIF9ydWxlTG9hZGVyOiBSdWxlTG9hZGVyO1xuXG5cbiAgICAvKlxuICAgICBBIGZldyBoYW5keSB1dGlsaXRpZXMgKGZvciB3aGljaCB3ZSBwcm9iYWJseSBhbHJlYWR5IGhhdmUgc3VwZXJpb3IgdmVyc2lvbnMgZWxzZXdoZXJlKVxuICAgICAqL1xuICAgIHN0YXRpYyBib29sZWFuVmFsdWUodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gQm9vbGVhbldyYXBwZXIuYm9sZWFuVmFsdWUodmFsdWUpO1xuICAgIH1cblxuICAgIHN0YXRpYyB0b0xpc3QodmFsdWU6IGFueSk6IEFycmF5PGFueT4ge1xuICAgICAgICByZXR1cm4gKGlzQXJyYXkodmFsdWUpKSA/IHZhbHVlIDogW3ZhbHVlXTtcbiAgICB9XG5cbiAgICBzdGF0aWMgb2JqZWN0RXF1YWxzKG9uZTogYW55LCB0d286IGFueSkge1xuICAgICAgICBpZiAoaXNCbGFuayhvbmUpICYmIGlzQmxhbmsodHdvKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQmxhbmsob25lKSB8fCBpc0JsYW5rKHR3bykpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXF1YWxzKG9uZSwgdHdvKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgb3ZlcnJpZGVLZXlGb3JLZXkoa2V5OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4ga2V5ICsgJ19vJztcbiAgICB9XG5cbiAgICBzdGF0aWMgYWRkVHJhaXRzKHRyYWl0czogc3RyaW5nW10sIG1hcDogTWFwPHN0cmluZywgYW55Pik6IHZvaWQge1xuICAgICAgICBsZXQgY3VycmVudDogc3RyaW5nW10gPSBtYXAuZ2V0KE1ldGEuS2V5VHJhaXQpO1xuICAgICAgICBpZiAoaXNCbGFuayhjdXJyZW50KSkge1xuICAgICAgICAgICAgbWFwLnNldChNZXRhLktleVRyYWl0LCB0cmFpdHMpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBMaXN0V3JhcHBlci5hZGRBbGwoY3VycmVudCwgdHJhaXRzKTtcbiAgICAgICAgICAgIG1hcC5zZXQoTWV0YS5LZXlUcmFpdCwgY3VycmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgYWRkVHJhaXQodHJhaXQ6IHN0cmluZywgbWFwOiBNYXA8c3RyaW5nLCBhbnk+KTogdm9pZCB7XG4gICAgICAgIGxldCBjdXJyZW50OiBzdHJpbmdbXSA9IG1hcC5nZXQoTWV0YS5LZXlUcmFpdCk7XG4gICAgICAgIGlmIChpc0JsYW5rKGN1cnJlbnQpKSB7XG4gICAgICAgICAgICBtYXAuc2V0KE1ldGEuS2V5VHJhaXQsIE1ldGEudG9MaXN0KHRyYWl0KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdXJyZW50LnB1c2godHJhaXQpO1xuICAgICAgICAgICAgbWFwLnNldChNZXRhLktleVRyYWl0LCBjdXJyZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgc3RhdGljIGNsYXNzTmFtZShvYmplY3Q6IGFueSk6IHN0cmluZyB7XG4gICAgICAgIGlmIChpc1N0cmluZ01hcChvYmplY3QpICYmIChpc0VudGl0eShvYmplY3QpIHx8IGlzVmFsdWUob2JqZWN0KSkpIHtcbiAgICAgICAgICAgIHJldHVybiAoPENvbXBvc2l0ZVR5cGU+b2JqZWN0KS5jbGFzc05hbWUoKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGlzU3RyaW5nTWFwKG9iamVjdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3RUb05hbWUob2JqZWN0KTtcblxuICAgICAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24ob2JqZWN0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdC5uYW1lO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIE1ldGEuUHJvcGVydHlNZXJnZXJfRGVjbGFyZUxpc3QgPSBuZXcgUHJvcGVydHlNZXJnZXJEZWNsYXJlTGlzdCgpO1xuICAgICAgICBNZXRhLlByb3BlcnR5TWVyZ2VyX1RyYWl0cyA9IG5ldyBQcm9wZXJ0eU1lcmdlckRlY2xhcmVMaXN0Rm9yVHJhaXQoKTtcbiAgICAgICAgTWV0YS5Qcm9wZXJ0eU1lcmdlcl9MaXN0ID0gbmV3IFByb3BlcnR5TWVyZ2VyX0xpc3QoKTtcbiAgICAgICAgTWV0YS5UcmFuc2Zvcm1lcl9LZXlQcmVzZW50ID0gbmV3IEtleVZhbHVlVHJhbnNmb3JtZXJfS2V5UHJlc2VudCgpO1xuXG5cbiAgICAgICAgdGhpcy5fZGVjbGFyZUtleU1hc2sgPSB0aGlzLmtleURhdGEoTWV0YS5LZXlEZWNsYXJlKS5tYXNrVmFsdWUoKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlclByb3BlcnR5TWVyZ2VyKE1ldGEuS2V5VHJhaXQsIE1ldGEuUHJvcGVydHlNZXJnZXJfVHJhaXRzKTtcblxuXG4gICAgICAgIGxldCBub29wcnVsZTogUnVsZSA9IG5ldyBSdWxlKG51bGwsIG51bGwsIDAsIDApO1xuICAgICAgICBub29wcnVsZS5kaXNhYmxlKCk7XG4gICAgICAgIHRoaXMuX3J1bGVzWzBdID0gbm9vcHJ1bGU7XG4gICAgICAgIHRoaXMuX3J1bGVDb3VudCA9IDE7XG4gICAgfVxuXG4gICAgcmVnaXN0ZXJMb2FkZXIobG9hZGVyOiBSdWxlTG9hZGVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX3J1bGVMb2FkZXIgPSBsb2FkZXI7XG4gICAgfVxuXG4gICAgYWRkUnVsZShydWxlOiBSdWxlKTogdm9pZCB7XG5cbiAgICAgICAgbGV0IHNlbGVjdG9yczogQXJyYXk8U2VsZWN0b3I+ID0gcnVsZS5zZWxlY3RvcnM7XG5cbiAgICAgICAgaWYgKHNlbGVjdG9ycy5sZW5ndGggPiAwICYmIHNlbGVjdG9yc1tzZWxlY3RvcnMubGVuZ3RoIC0gMV0uaXNEZWNsKSB7XG4gICAgICAgICAgICBsZXQgZGVjbCA9IHJ1bGUuY3JlYXRlRGVjbCgpO1xuICAgICAgICAgICAgdGhpcy5fYWRkUnVsZShkZWNsLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHdlIGFsbG93IG51bGwgdG8gZW5hYmxlIGNyZWF0aW9uIG9mIGEgZGVjbCwgYnV0IG90aGVyd2lzZSB0aGlzIHJ1bGUgaGFzIG5vIGVmZmVjdFxuICAgICAgICBpZiAoaXNQcmVzZW50KHJ1bGUucHJvcGVydGllcykpIHtcbiAgICAgICAgICAgIC8vIEFmdGVyIHdlJ3ZlIGNhcHR1cmVkIHRoZSBkZWNsLCBkbyB0aGUgY29sbGFwc2VcbiAgICAgICAgICAgIHJ1bGUuX3NlbGVjdG9ycyA9IHJ1bGUuY29udmVydEtleU92ZXJyaWRlcyhydWxlLl9zZWxlY3RvcnMpO1xuICAgICAgICAgICAgdGhpcy5fYWRkUnVsZShydWxlLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgX2FkZFRvUnVsZXMocnVsZTogUnVsZSwgcG9zOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fcnVsZXNbcG9zXSA9IHJ1bGU7XG4gICAgfVxuXG5cbiAgICAvLyB0b2RvOiBURVNUIHVuaXQgdGVzdCB0aGlzXG4gICAgX2FkZFJ1bGUocnVsZTogUnVsZSwgY2hlY2tQcm9wU2NvcGU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgYXNzZXJ0KGlzUHJlc2VudCh0aGlzLl9jdXJyZW50UnVsZVNldCksICdBdHRlbXB0IHRvIGFkZCBydWxlIHdpdGhvdXQgY3VycmVudCBSdWxlU2V0Jyk7XG4gICAgICAgIGxldCBzZWxlY3RvcnM6IEFycmF5PFNlbGVjdG9yPiA9IHJ1bGUuX3NlbGVjdG9ycztcblxuICAgICAgICBsZXQgZW50cnlJZDogbnVtYmVyID0gdGhpcy5fY3VycmVudFJ1bGVTZXQuYWxsb2NhdGVOZXh0UnVsZUVudHJ5KCk7XG4gICAgICAgIHJ1bGUuaWQgPSBlbnRyeUlkO1xuICAgICAgICBpZiAocnVsZS5yYW5rID09PSAwKSB7XG4gICAgICAgICAgICBydWxlLnJhbmsgPSB0aGlzLl9jdXJyZW50UnVsZVNldC5fcmFuaysrO1xuICAgICAgICB9XG4gICAgICAgIHJ1bGUucnVsZVNldCA9IHRoaXMuX2N1cnJlbnRSdWxlU2V0O1xuICAgICAgICB0aGlzLl9hZGRUb1J1bGVzKHJ1bGUsIGVudHJ5SWQpO1xuXG4gICAgICAgIC8vIGluZGV4IGl0XG4gICAgICAgIGxldCBsYXN0U2NvcGVLZXlEYXRhOiBLZXlEYXRhO1xuICAgICAgICBsZXQgZGVjbEtleTogc3RyaW5nO1xuICAgICAgICBsZXQgZGVjbE1hc2s6IG51bWJlciA9IHRoaXMuZGVjbGFyZUtleU1hc2s7XG4gICAgICAgIGxldCBtYXRjaE1hc2sgPSAwLCBpbmRleGVkTWFzayA9IDAsIGFudGlNYXNrID0gMDtcbiAgICAgICAgbGV0IGNvdW50ID0gc2VsZWN0b3JzLmxlbmd0aDtcblxuICAgICAgICBsZXQgaW5kZXhPbmx5U2VsZWN0b3I6IFNlbGVjdG9yID0gTWV0YS5fVXNlUGFydGlhbEluZGV4aW5nID8gdGhpcy5iZXN0U2VsZWN0b3JUb0luZGV4KFxuICAgICAgICAgICAgc2VsZWN0b3JzKSA6IG51bGw7XG4gICAgICAgIGZvciAobGV0IGkgPSBjb3VudCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBsZXQgcDogU2VsZWN0b3IgPSBzZWxlY3RvcnNbaV07XG5cbiAgICAgICAgICAgIGxldCBzaG91bGRJbmRleDogYm9vbGVhbiA9IChpbmRleE9ubHlTZWxlY3RvciA9PT0gbnVsbCB8fCBwID09PSBpbmRleE9ubHlTZWxlY3Rvcik7XG5cbiAgICAgICAgICAgIGxldCBkYXRhOiBLZXlEYXRhID0gdGhpcy5rZXlEYXRhKHAua2V5KTtcbiAgICAgICAgICAgIGxldCBkYXRhTWFzazogbnVtYmVyID0gZGF0YS5tYXNrVmFsdWUoKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc051bGxNYXJrZXIocC52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkSW5kZXggfHwgTWV0YS5fRGVidWdEb3VibGVDaGVja01hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQXJyYXkocC52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHYgb2YgcC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuYWRkRW50cnkodiwgZW50cnlJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuYWRkRW50cnkocC52YWx1ZSwgZW50cnlJZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNob3VsZEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleGVkTWFzayB8PSBzaGlmdExlZnQoMSwgZGF0YS5pZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFzaG91bGRJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBwcmVwYXJlIHNlbGVjdG9yIGZvciBkaXJlY3QgZXZhbHVhdGlvblxuICAgICAgICAgICAgICAgICAgICBwLmJpbmRUb0tleURhdGEoZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1hdGNoTWFzayB8PSBkYXRhTWFzaztcblxuICAgICAgICAgICAgICAgIGlmIChkYXRhLmlzUHJvcGVydHlTY29wZSAmJiBpc0JsYW5rKGxhc3RTY29wZUtleURhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RTY29wZUtleURhdGEgPSBkYXRhO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKGRhdGFNYXNrICYgZGVjbE1hc2spICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlY2xLZXkgPSBwLnZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW50aU1hc2sgfD0gZGF0YU1hc2s7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGlzRGVjbDogYm9vbGVhbiA9IGlzUHJlc2VudChkZWNsS2V5KTtcbiAgICAgICAgbGV0IG5vblNjb3BlS2V5RGVjbDogYm9vbGVhbiA9IGlzUHJlc2VudChkZWNsS2V5KSAmJiAhdGhpcy5rZXlEYXRhKGRlY2xLZXkpLmlzUHJvcGVydHlTY29wZTtcbiAgICAgICAgaWYgKCFpc0RlY2wgfHwgbm9uU2NvcGVLZXlEZWNsKSB7XG5cbiAgICAgICAgICAgIC8vIGFsbCBub24tZGVjbCBydWxlcyBkb24ndCBhcHBseSBvdXRzaWRlIGRlY2wgY29udGV4dFxuICAgICAgICAgICAgaWYgKCFpc0RlY2wpIHtcbiAgICAgICAgICAgICAgICBhbnRpTWFzayB8PSBkZWNsTWFzaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGlzUHJlc2VudChsYXN0U2NvcGVLZXlEYXRhKSAmJiBjaGVja1Byb3BTY29wZSkge1xuICAgICAgICAgICAgICAgIGxldCB0cmFpdFZhbCA9IHJ1bGUucHJvcGVydGllcy5nZXQoTWV0YS5LZXlUcmFpdCk7XG5cblxuICAgICAgICAgICAgICAgIGlmIChpc1ByZXNlbnQodHJhaXRWYWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0cmFpdEtleTogc3RyaW5nID0gbGFzdFNjb3BlS2V5RGF0YS5fa2V5ICsgJ190cmFpdCc7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHByb3BlcnRpZXMgPSBNYXBXcmFwcGVyLmNyZWF0ZUVtcHR5PHN0cmluZywgYW55PigpO1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLnNldCh0cmFpdEtleSwgdHJhaXRWYWwpO1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCB0cmFpdFJ1bGU6IFJ1bGUgPSBuZXcgUnVsZShydWxlLl9zZWxlY3RvcnMsIHByb3BlcnRpZXMsIHJ1bGUucmFuayxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUubGluZU51bWJlcik7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkUnVsZSh0cmFpdFJ1bGUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBydWxlLl9zZWxlY3RvcnMgPSBzZWxlY3RvcnMuc2xpY2UoMCk7XG5cbiAgICAgICAgICAgICAgICBsZXQgc2NvcGVTZWw6IFNlbGVjdG9yID0gbmV3IFNlbGVjdG9yKE1ldGEuU2NvcGVLZXksIGxhc3RTY29wZUtleURhdGEua2V5KTtcbiAgICAgICAgICAgICAgICBydWxlLnNlbGVjdG9ycy5wdXNoKHNjb3BlU2VsKTtcblxuICAgICAgICAgICAgICAgIGxldCBkYXRhOiBLZXlEYXRhID0gdGhpcy5rZXlEYXRhKE1ldGEuU2NvcGVLZXkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFNZXRhLl9Vc2VQYXJ0aWFsSW5kZXhpbmcgfHwgTWV0YS5fRGVidWdEb3VibGVDaGVja01hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5hZGRFbnRyeShsYXN0U2NvcGVLZXlEYXRhLl9rZXksIGVudHJ5SWQpO1xuICAgICAgICAgICAgICAgICAgICBpbmRleGVkTWFzayB8PSBzaGlmdExlZnQoMSwgZGF0YS5faWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzY29wZVNlbC5iaW5kVG9LZXlEYXRhKGRhdGEpO1xuICAgICAgICAgICAgICAgIG1hdGNoTWFzayB8PSBzaGlmdExlZnQoMSwgZGF0YS5faWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJ1bGUua2V5TWF0Y2hlc01hc2sgPSBtYXRjaE1hc2s7XG4gICAgICAgIHJ1bGUua2V5SW5kZXhlZE1hc2sgPSBpbmRleGVkTWFzaztcbiAgICAgICAgcnVsZS5rZXlBbnRpTWFzayA9IGFudGlNYXNrO1xuICAgIH1cblxuICAgIGJlc3RTZWxlY3RvclRvSW5kZXgoc2VsZWN0b3JzOiBBcnJheTxTZWxlY3Rvcj4pOiBTZWxlY3RvciB7XG4gICAgICAgIGxldCBiZXN0OiBTZWxlY3RvcjtcbiAgICAgICAgbGV0IGJlc3RSYW5rID0gTnVtYmVyLk1JTl9WQUxVRTtcbiAgICAgICAgbGV0IHBvcyA9IDA7XG4gICAgICAgIGZvciAobGV0IHNlbCBvZiAgc2VsZWN0b3JzKSB7XG4gICAgICAgICAgICBsZXQgcmFuayA9IHRoaXMuc2VsZWN0aXZpdHlSYW5rKHNlbCkgKyBwb3MrKztcbiAgICAgICAgICAgIGlmIChyYW5rID4gYmVzdFJhbmspIHtcbiAgICAgICAgICAgICAgICBiZXN0ID0gc2VsO1xuICAgICAgICAgICAgICAgIGJlc3RSYW5rID0gcmFuaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmVzdDtcbiAgICB9XG5cbiAgICBzZWxlY3Rpdml0eVJhbmsoc2VsZWN0b3I6IFNlbGVjdG9yKTogbnVtYmVyIHtcbiAgICAgICAgLy8gU2NvcmUgc2VsZWN0b3JzOiBnb29kIGlmIHByb3BlcnR5IHNjb3BlLCBrZXkgIT09ICcqJyBvciBib29sXG4gICAgICAgIC8vICcqJyBpcyBwYXJ0aWN1bGFybHkgYmFkLCBzaW5jZSB0aGVzZSBhcmUgaW5oZXJpdGVkIGJ5IGFsbCBvdGhlcnNcbiAgICAgICAgbGV0IHNjb3JlID0gMTtcbiAgICAgICAgbGV0IHZhbHVlID0gc2VsZWN0b3IudmFsdWU7XG5cbiAgICAgICAgaWYgKGlzUHJlc2VudCh2YWx1ZSkgJiYgIShNZXRhLktleUFueSA9PT0gdmFsdWUpKSB7XG4gICAgICAgICAgICBzY29yZSArPSAoaXNCb29sZWFuKHZhbHVlKSA/IDEgOiA5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBrZXlEYXRhOiBLZXlEYXRhID0gdGhpcy5rZXlEYXRhKHNlbGVjdG9yLmtleSk7XG4gICAgICAgIGlmIChrZXlEYXRhLmlzUHJvcGVydHlTY29wZSkge1xuICAgICAgICAgICAgc2NvcmUgKj0gNTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUb2RvOiB3ZSBjb3VsZCBzY29yZSBiYXNlZCBvbiAjIG9mIGVudHJpZXMgaW4gS2V5RGF0YVxuICAgICAgICByZXR1cm4gc2NvcmU7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBpZiBhZGRpdGlvbiBvZiB0aGlzIHJ1bGUgcmVzdWx0cyBpbiBhZGRpdGlvbiBvZiBleHRyYSBydWxlcywgdGhvc2UgYXJlIHJldHVybmVkXG4gICAgICogKG51bGwgb3RoZXJ3aXNlKVxuICAgICAqL1xuICAgIF9lZGl0aW5nUnVsZUVuZCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgodGhpcy5fY3VycmVudFJ1bGVTZXQuZW5kLCB0aGlzLl9ydWxlQ291bnQpO1xuICAgIH1cblxuXG4gICAgX2FkZFJ1bGVBbmRSZXR1cm5FeHRyYXMocnVsZTogUnVsZSk6IEFycmF5PFJ1bGU+IHtcbiAgICAgICAgbGV0IHN0YXJ0ID0gdGhpcy5fZWRpdGluZ1J1bGVFbmQoKTtcbiAgICAgICAgbGV0IGV4dHJhczogQXJyYXk8UnVsZT47XG5cbiAgICAgICAgdGhpcy5hZGRSdWxlKHJ1bGUpO1xuXG4gICAgICAgIC8vIFJldHVybiBhbnkgZXh0cmEgcnVsZXMgY3JlYXRlZCBieSBhZGRpdGlvbiBvZiB0aGlzIG9uZVxuICAgICAgICBmb3IgKGxldCBpID0gc3RhcnQsIGMgPSB0aGlzLl9lZGl0aW5nUnVsZUVuZCgpOyBpIDwgYzsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgciA9IHRoaXMuX3J1bGVzW2ldO1xuICAgICAgICAgICAgaWYgKHIgIT09IHJ1bGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNCbGFuayhleHRyYXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGV4dHJhcyA9IG5ldyBBcnJheTxSdWxlPigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBleHRyYXMucHVzaChyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXh0cmFzO1xuICAgIH1cblxuICAgIC8vIElja3kgbWV0aG9kIHRvIHJlcGxhY2UgYW4gZXhpdGVkIHJ1bGUgaW4gcGxhY2VcbiAgICBfdXBkYXRlRWRpdGVkUnVsZShydWxlOiBSdWxlLCBleHRyYXM6IEFycmF5PFJ1bGU+KTogQXJyYXk8UnVsZT4ge1xuICAgICAgICAvLyBpbiBwbGFjZSByZXBsYWNlIGV4aXN0aW5nIHJ1bGUgd2l0aCBOb09wXG4gICAgICAgIGxldCBub29wcnVsZTogUnVsZSA9IG5ldyBSdWxlKG51bGwsIG51bGwsIDAsIDApO1xuICAgICAgICBub29wcnVsZS5kaXNhYmxlKCk7XG5cbiAgICAgICAgdGhpcy5fcnVsZXNbcnVsZS5pZF0gPSBub29wcnVsZTtcblxuICAgICAgICBpZiAoaXNQcmVzZW50KGV4dHJhcykpIHtcbiAgICAgICAgICAgIGZvciAobGV0IHIgb2YgZXh0cmFzKSB7XG4gICAgICAgICAgICAgICAgci5kaXNhYmxlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTaW5jZSB0aGlzIHJ1bGUgaGFzIGFscmVhZHkgYmVlbiBtdXRhdGVkICh0aGUgZmlyc3QgdGltZSBpdCB3YXMgYWRkZWQpIHdlIG5lZWQgdG9cbiAgICAgICAgLy8gcmV2ZXJzZSB0aGUgYWRkaXRpb24gb2YgdGhlIHNjb3BlS2V5XG4gICAgICAgIGxldCBwcmVkcyA9IHJ1bGUuc2VsZWN0b3JzO1xuXG4gICAgICAgIGlmICgoaXNQcmVzZW50KHByZWRzKSAmJiBwcmVkcy5sZW5ndGggPiAwKSAmJiBMaXN0V3JhcHBlci5sYXN0PFNlbGVjdG9yPihcbiAgICAgICAgICAgICAgICBwcmVkcykua2V5ID09PSBNZXRhLlNjb3BlS2V5KSB7XG4gICAgICAgICAgICBMaXN0V3JhcHBlci5yZW1vdmVBdDxTZWxlY3Rvcj4ocHJlZHMsIHByZWRzLmxlbmd0aCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBub3cgKHJlKS1hZGQgaXQgYW5kIGludmFsaWRhdGVcbiAgICAgICAgZXh0cmFzID0gdGhpcy5fYWRkUnVsZUFuZFJldHVybkV4dHJhcyhydWxlKTtcbiAgICAgICAgdGhpcy5pbnZhbGlkYXRlUnVsZXMoKTtcbiAgICAgICAgcmV0dXJuIGV4dHJhcztcbiAgICB9XG5cblxuICAgIHNjb3BlS2V5Rm9yU2VsZWN0b3IocHJlZHM6IEFycmF5PFNlbGVjdG9yPik6IHN0cmluZyB7XG4gICAgICAgIGZvciAobGV0IGkgPSBwcmVkcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgbGV0IHByZWQgPSBwcmVkc1tpXTtcbiAgICAgICAgICAgIGxldCBkYXRhID0gdGhpcy5rZXlEYXRhKHByZWQua2V5KTtcbiAgICAgICAgICAgIGlmIChkYXRhLmlzUHJvcGVydHlTY29wZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcmVkLmtleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cblxuICAgIGFkZFJ1bGVGcm9tU2VsZWN0b3JNYXAoc2VsZWN0b3JNYXA6IE1hcDxzdHJpbmcsIGFueT4sIHByb3BlcnR5TWFwOiBNYXA8c3RyaW5nLCBhbnk+KTogdm9pZCB7XG4gICAgICAgIHRoaXMuYWRkUnVsZUZyb21TZWxlY3Rvck1hcFdpdGhSYW5rKHNlbGVjdG9yTWFwLCBwcm9wZXJ0eU1hcCwgMCk7XG4gICAgfVxuXG4gICAgYWRkUnVsZUZyb21TZWxlY3Rvck1hcFdpdGhSYW5rKHNlbGVjdG9yTWFwOiBNYXA8c3RyaW5nLCBhbnk+LCBwcm9wZXJ0eU1hcDogTWFwPHN0cmluZywgYW55PixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuazogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGxldCBydWxlID0gbmV3IFJ1bGUoU2VsZWN0b3IuZnJvbU1hcChzZWxlY3Rvck1hcCksIHByb3BlcnR5TWFwLCAwLCAtMSk7XG4gICAgICAgIGlmIChyYW5rICE9PSAwKSB7XG4gICAgICAgICAgICBydWxlLnJhbmsgPSByYW5rO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRkUnVsZShydWxlKTtcbiAgICB9XG5cblxuICAgIGFkZFJ1bGVzKHJ1bGVTZXQ6IE1hcDxzdHJpbmcsIGFueT4sIHNlbGVjdG9yczogQXJyYXk8U2VsZWN0b3I+KSB7XG4gICAgICAgIC8vIFNwZWNpYWwga2V5czogICdwcm9wcywgJ3J1bGVzJy4gIEV2ZXJ0aGluZyBlbHNlIGlzIGEgc2VsZWN0b3JcbiAgICAgICAgbGV0IHByb3BzOiBNYXA8c3RyaW5nLCBhbnk+O1xuICAgICAgICBsZXQgcnVsZXM6IEFycmF5PE1hcDxzdHJpbmcsIGFueT4+O1xuXG4gICAgICAgIE1hcFdyYXBwZXIuaXRlcmFibGUocnVsZVNldCkuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ3Byb3BzJykge1xuICAgICAgICAgICAgICAgIHByb3BzID0gdmFsdWU7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAncnVsZXMnKSB7XG4gICAgICAgICAgICAgICAgcnVsZXMgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3JzLnB1c2gobmV3IFNlbGVjdG9yKGtleSwgdmFsdWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGlzUHJlc2VudChwcm9wcykpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkUnVsZShuZXcgUnVsZShzZWxlY3RvcnMsIHByb3BzLCAwKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJlc2VudChydWxlcykpIHtcbiAgICAgICAgICAgIGZvciAobGV0IHIgb2YgcnVsZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFJ1bGVzKHIsIHNlbGVjdG9ycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB0aGlzIG9uZSBleHBlY3QgdGhhdCB3ZSBhbHJlYWR5IG9wZW5lZCB0aGUgcnVsZXNldFxuICAgIF9sb2FkUnVsZXMocnVsZVRleHQ/OiBhbnksIG1vZHVsZTogc3RyaW5nID0gJ3N5c3RlbScsXG4gICAgICAgICAgICAgICBlZGl0YWJsZTogYm9vbGVhbiA9IHRydWUpOiB2b2lkIHtcbiAgICAgICAgdHJ5IHtcblxuICAgICAgICAgICAgaWYgKGlzUHJlc2VudCh0aGlzLl9ydWxlTG9hZGVyKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3J1bGVMb2FkZXIubG9hZFJ1bGVzKHRoaXMsIHJ1bGVUZXh0LCBtb2R1bGUsIChydWxlKSA9PiB0aGlzLmFkZFJ1bGUocnVsZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aGlzLmVuZFJ1bGVTZXQoKS5kaXNhYmxlUnVsZXMoKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgbG9hZGluZyBydWxlOiAnICsgZSk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGxvYWRSdWxlcyhydWxlVGV4dD86IGFueSk6IHZvaWQge1xuICAgICAgICB0aGlzLl9sb2FkUnVsZXNXaXRoUnVsZVNldCgnU3RyaW5nTGl0ZXJhbCcsIHJ1bGVUZXh0LCAwKTtcbiAgICAgICAgdGhpcy5lbmRSdWxlU2V0KCk7XG4gICAgfVxuXG5cbiAgICBfbG9hZFJ1bGVzV2l0aFJ1bGVTZXQoZmlsZW5hbWU6IHN0cmluZywgcnVsZVRleHQ6IGFueSwgcmFuazogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYmVnaW5SdWxlU2V0V2l0aFJhbmsocmFuaywgZmlsZW5hbWUpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fbG9hZFJ1bGVzKHJ1bGVUZXh0KTtcblxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aGlzLmVuZFJ1bGVTZXQoKS5kaXNhYmxlUnVsZXMoKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgbG9hZGluZyBydWxlOiAnICsgZSk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGxvYWRVc2VyUnVsZShzb3VyY2U6IGFueSwgdXNlckNsYXNzOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHVuaW1wbGVtZW50ZWQoKTtcbiAgICB9XG5cbiAgICBwYXJzZVByb3BlcnR5QXNzaWdubWVudChwcm9wU3RyaW5nOiBzdHJpbmcsIHByb3BlcnR5TWFwOiBNYXA8c3RyaW5nLCBhbnk+KTogc3RyaW5nIHtcbiAgICAgICAgLy8gdG9kbzogaW1wbGVtZW50IHRoaXNcbiAgICAgICAgcmV0dXJuIHVuaW1wbGVtZW50ZWQoKTtcbiAgICB9XG5cblxuICAgIGNsZWFyQ2FjaGVzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9NYXRjaFRvUHJvcHNDYWNoZSA9IG5ldyBDb2xsZWN0aW9ucy5EaWN0aW9uYXJ5PE1hdGNoLCBQcm9wZXJ0eU1hcD4oKTtcbiAgICAgICAgdGhpcy5fUHJvcGVydHlNYXBVbmlxdWVyID0gbmV3IENvbGxlY3Rpb25zLkRpY3Rpb25hcnk8UHJvcGVydHlNYXAsIFByb3BlcnR5TWFwPigpO1xuICAgICAgICB0aGlzLl9pZGVudGl0eUNhY2hlID0gbmV3IENvbGxlY3Rpb25zLkRpY3Rpb25hcnk8YW55LCBhbnk+KCk7XG4gICAgfVxuXG5cbiAgICBpc1RyYWl0RXhwb3J0UnVsZShydWxlOiBSdWxlKTogYm9vbGVhbiB7XG4gICAgICAgIGlmIChpc0JsYW5rKHJ1bGUucHJvcGVydGllcykgfHwgcnVsZSB8fCBydWxlLnByb3BlcnRpZXMuc2l6ZSA9PT0gMSkge1xuXG4gICAgICAgICAgICBsZXQga2V5OiBzdHJpbmcgPSBBcnJheS5mcm9tKHJ1bGUucHJvcGVydGllcy5rZXlzKCkpWzBdO1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZ1dyYXBwZXIuZW5kc1dpZHRoKGtleSwgJ190cmFpdCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBiZWdpblJ1bGVTZXQoaWRlbnRpZmljYXRvcjogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYmVnaW5SdWxlU2V0V2l0aFJhbmsodGhpcy5fcnVsZUNvdW50LCBpZGVudGlmaWNhdG9yKTtcbiAgICB9XG5cblxuICAgIGJlZ2luUnVsZVNldFdpdGhSYW5rKHJhbms6IG51bWJlciwgZmlsZVBhdGg6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXNzZXJ0KGlzQmxhbmsodGhpcy5fY3VycmVudFJ1bGVTZXQpLFxuICAgICAgICAgICAgICAgICdDYW4gdCBzdGFydCBuZXcgcnVsZSBzZXQgd2hpbGUgb25lIGluIHByb2dyZXNzJyk7XG5cbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRSdWxlU2V0ID0gbmV3IFJ1bGVTZXQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50UnVsZVNldC5fc3RhcnQgPSB0aGlzLl9ydWxlQ291bnQ7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50UnVsZVNldC5fZW5kID0gdGhpcy5fcnVsZUNvdW50O1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFJ1bGVTZXQuX3JhbmsgPSByYW5rO1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFJ1bGVTZXQuX2ZpbGVQYXRoID0gZmlsZVBhdGg7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcblxuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGJlZ2luUmVwbGFjZW1lbnRSdWxlU2V0KG9yaWc6IFJ1bGVTZXQpOiB2b2lkIHtcbiAgICAgICAgbGV0IG9yaWdSYW5rID0gb3JpZy5zdGFydFJhbmsoKTtcbiAgICAgICAgdGhpcy5iZWdpblJ1bGVTZXRXaXRoUmFuayh0aGlzLl9ydWxlQ291bnQsIG9yaWcuX2ZpbGVQYXRoKTtcbiAgICAgICAgdGhpcy5fY3VycmVudFJ1bGVTZXQuX3JhbmsgPSBvcmlnUmFuaztcbiAgICB9XG5cblxuICAgIGVuZFJ1bGVTZXQoKTogUnVsZVNldCB7XG4gICAgICAgIGFzc2VydChpc1ByZXNlbnQodGhpcy5fY3VycmVudFJ1bGVTZXQpLCAnTm8gcnVsZSBzZXQgcHJvZ3Jlc3MnKTtcbiAgICAgICAgbGV0IHJlc3VsdDogUnVsZVNldCA9IHRoaXMuX2N1cnJlbnRSdWxlU2V0O1xuICAgICAgICBpZiAodGhpcy5fcnVsZUNvdW50IDwgcmVzdWx0Ll9lbmQpIHtcbiAgICAgICAgICAgIHRoaXMuX3J1bGVDb3VudCA9IHJlc3VsdC5fZW5kO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2N1cnJlbnRSdWxlU2V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcnVsZVNldEdlbmVyYXRpb24rKztcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuXG4gICAgZ2V0IHJ1bGVTZXRHZW5lcmF0aW9uKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ydWxlU2V0R2VuZXJhdGlvbjtcbiAgICB9XG5cbiAgICBpbnZhbGlkYXRlUnVsZXMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX3J1bGVTZXRHZW5lcmF0aW9uKys7XG4gICAgICAgIHRoaXMuY2xlYXJDYWNoZXMoKTtcbiAgICB9XG5cblxuICAgIG5ld0NvbnRleHQoKTogQ29udGV4dCB7XG4gICAgICAgIHJldHVybiBuZXcgQ29udGV4dCh0aGlzKTtcbiAgICB9XG5cbiAgICBnZXQgZGVjbGFyZUtleU1hc2soKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlY2xhcmVLZXlNYXNrO1xuICAgIH1cblxuXG4gICAgLy8gVG91Y2ggYSBrZXkvdmFsdWUgdG8gZm9yY2UgcHJlLWxvYWRpbmcvcmVnaXN0cmF0aW9uIG9mIGFzc29jaWF0ZWQgcnVsZSBmaWxlc1xuICAgIHRvdWNoKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZCB7XG4gICAgICAgIGxldCBjb250ZXh0ID0gdGhpcy5uZXdDb250ZXh0KCk7XG4gICAgICAgIGNvbnRleHQucHVzaCgpO1xuICAgICAgICBjb250ZXh0LnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgY29udGV4dC5hbGxQcm9wZXJ0aWVzKCk7XG4gICAgICAgIGNvbnRleHQucG9wKCk7XG4gICAgfVxuXG5cbiAgICB0cmFuc2Zvcm1WYWx1ZShrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IGFueSB7XG4gICAgICAgIGxldCBrZXlEYXRhID0gdGhpcy5fa2V5RGF0YS5nZXQoa2V5KTtcbiAgICAgICAgaWYgKGlzUHJlc2VudChrZXlEYXRhKSAmJiBpc1ByZXNlbnQoa2V5RGF0YS5fdHJhbnNmb3JtZXIpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGtleURhdGEuX3RyYW5zZm9ybWVyLnRyYW5mb3JtRm9yTWF0Y2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBtYXRjaChrZXk6IHN0cmluZywgdmFsdWU6IGFueSwgaW50ZXJtZWRpYXRlUmVzdWx0OiBNYXRjaFJlc3VsdCk6IE1hdGNoUmVzdWx0IHtcbiAgICAgICAgbGV0IGtleURhdGEgPSB0aGlzLl9rZXlEYXRhLmdldChrZXkpO1xuICAgICAgICBpZiAoaXNCbGFuayhrZXlEYXRhKSkge1xuICAgICAgICAgICAgcmV0dXJuIGludGVybWVkaWF0ZVJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBsZXQga2V5TWFzazogbnVtYmVyID0gc2hpZnRMZWZ0KDEsIGtleURhdGEuX2lkKTtcblxuICAgICAgICAvLyBEb2VzIG91ciByZXN1bHQgYWxyZWFkeSBpbmNsdWRlIHRoaXMga2V5PyAgVGhlbiBubyBuZWVkIHRvIGpvaW4gYWdhaW5cbiAgICAgICAgLy8gaWYgKGludGVybWVkaWF0ZVJlc3VsdCAhPT0gbnVsbCAmJiAoaW50ZXJtZWRpYXRlUmVzdWx0Ll9rZXlzTWF0Y2hlZE1hc2sgJiBrZXlNYXNrKSAhPT1cbiAgICAgICAgLy8gMCkgcmV0dXJuIGludGVybWVkaWF0ZVJlc3VsdDtcblxuICAgICAgICByZXR1cm4gbmV3IE1hdGNoUmVzdWx0KHRoaXMsIGtleURhdGEsIHZhbHVlLCBpbnRlcm1lZGlhdGVSZXN1bHQpO1xuICAgIH1cblxuXG4gICAgdW5pb25PdmVycmlkZU1hdGNoKGtleTogc3RyaW5nLCB2YWx1ZTogYW55LFxuICAgICAgICAgICAgICAgICAgICAgICBpbnRlcm1lZGlhdGVSZXN1bHQ6IFVuaW9uTWF0Y2hSZXN1bHQpOiBVbmlvbk1hdGNoUmVzdWx0IHtcbiAgICAgICAgbGV0IGtleURhdGE6IEtleURhdGEgPSB0aGlzLl9rZXlEYXRhLmdldChNZXRhLm92ZXJyaWRlS2V5Rm9yS2V5KGtleSkpO1xuICAgICAgICBpZiAoaXNCbGFuayhrZXlEYXRhKSkge1xuICAgICAgICAgICAgcmV0dXJuIGludGVybWVkaWF0ZVJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFVuaW9uTWF0Y2hSZXN1bHQodGhpcywga2V5RGF0YSwgdmFsdWUsIGludGVybWVkaWF0ZVJlc3VsdCk7XG4gICAgfVxuXG4gICAgbmV3UHJvcGVydGllc01hcCgpOiBQcm9wZXJ0eU1hcCB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcGVydHlNYXAoKTtcbiAgICB9XG5cbiAgICBwcm9wZXJ0aWVzRm9yTWF0Y2gobWF0Y2hSZXN1bHQ6IE1hdGNoUmVzdWx0KTogUHJvcGVydHlNYXAge1xuICAgICAgICBsZXQgcHJvcGVydGllczogUHJvcGVydHlNYXAgPSB0aGlzLl9NYXRjaFRvUHJvcHNDYWNoZS5nZXRWYWx1ZShtYXRjaFJlc3VsdCk7XG4gICAgICAgIGlmIChpc1ByZXNlbnQocHJvcGVydGllcykpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0aWVzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvcGVydGllcyA9IHRoaXMubmV3UHJvcGVydGllc01hcCgpO1xuXG4gICAgICAgIGxldCBhcnI6IG51bWJlcltdID0gbWF0Y2hSZXN1bHQuZmlsdGVyZWRNYXRjaGVzKCk7XG4gICAgICAgIGlmIChpc0JsYW5rKGFycikpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0aWVzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZmlyc3QgZW50cnkgaXMgY291bnRcbiAgICAgICAgbGV0IGNvdW50OiBudW1iZXIgPSBhcnJbMF07XG4gICAgICAgIGxldCBydWxlczogQXJyYXk8UnVsZT4gPSBuZXcgQXJyYXk8UnVsZT4oY291bnQpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgcnVsZXNbaV0gPSB0aGlzLl9ydWxlc1thcnJbaSArIDFdXTtcbiAgICAgICAgfVxuXG4gICAgICAgIExpc3RXcmFwcGVyLnNvcnQ8UnVsZT4ocnVsZXMsIChvMSwgbzIpID0+IG8xLnJhbmsgLSBvMi5yYW5rKTtcblxuICAgICAgICBsZXQgbW9kaWZpZWRNYXNrID0gMDtcbiAgICAgICAgbGV0IGRlY2xhcmVLZXk6IHN0cmluZyA9ICgodGhpcy5fZGVjbGFyZUtleU1hc2sgJiBtYXRjaFJlc3VsdC5rZXlzTWF0Y2hlZE1hc2spICE9PSAwKVxuICAgICAgICAgICAgPyBtYXRjaFJlc3VsdC52YWx1ZUZvcktleShNZXRhLktleURlY2xhcmUpIDogbnVsbDtcblxuXG4gICAgICAgIGZvciAobGV0IHIgaW4gcnVsZXMpIHtcbiAgICAgICAgICAgIG1vZGlmaWVkTWFzayB8PSBydWxlc1tyXS5hcHBseSh0aGlzLCBwcm9wZXJ0aWVzLCBkZWNsYXJlS2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3BlcnRpZXMuYXdha2VQcm9wZXJ0aWVzKCk7XG4gICAgICAgIHRoaXMuX01hdGNoVG9Qcm9wc0NhY2hlLnNldFZhbHVlKG1hdGNoUmVzdWx0LmltbXV0YWJsZUNvcHkoKSwgcHJvcGVydGllcyk7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0aWVzO1xuICAgIH1cblxuXG4gICAga2V5RGF0YShrZXk6IHN0cmluZyk6IEtleURhdGEge1xuICAgICAgICBsZXQgZGF0YTogS2V5RGF0YSA9IHRoaXMuX2tleURhdGEuZ2V0KGtleSk7XG5cbiAgICAgICAgaWYgKGlzQmxhbmsoZGF0YSkpIHtcbiAgICAgICAgICAgIGxldCBpZDogbnVtYmVyID0gdGhpcy5fbmV4dEtleUlkO1xuXG4gICAgICAgICAgICBpZiAoaWQgPj0gTWV0YS5NYXhLZXlEYXRhcyAtIDEpIHtcbiAgICAgICAgICAgICAgICBwcmludCgnRXhjZWVkZWQgbWF4aW11bSBudW1iZXIgb2YgY29udGV4dCBrZXlzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9uZXh0S2V5SWQrKztcbiAgICAgICAgICAgIGRhdGEgPSBuZXcgS2V5RGF0YShrZXksIGlkKTtcblxuICAgICAgICAgICAgdGhpcy5fa2V5RGF0YXNCeUlkW2lkXSA9IGRhdGE7XG4gICAgICAgICAgICB0aGlzLl9rZXlEYXRhLnNldChrZXksIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuXG4gICAgX2tleXNJbk1hc2sobWFzazogbnVtYmVyKTogc3RyaW5nW10ge1xuICAgICAgICBsZXQgbWF0Y2hlczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgbGV0IHBvcyA9IDA7XG4gICAgICAgIHdoaWxlIChtYXNrICE9PSAwKSB7XG4gICAgICAgICAgICBpZiAoKG1hc2sgJiAxKSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaCh0aGlzLl9rZXlEYXRhc0J5SWRbcG9zXS5fa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBvcysrO1xuICAgICAgICAgICAgbWFzayA9IHNoaWZ0UmlnaHQobWFzaywgMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgfVxuXG4gICAgcmVnaXN0ZXJLZXlJbml0T2JzZXJ2ZXIoa2V5OiBzdHJpbmcsIG86IFZhbHVlUXVlcmllZE9ic2VydmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMua2V5RGF0YShrZXkpLmFkZE9ic2VydmVyKG8pO1xuICAgIH1cblxuICAgIHJlZ2lzdGVyVmFsdWVUcmFuc2Zvcm1lckZvcktleShrZXk6IHN0cmluZywgdHJhbnNmb3JtZXI6IEtleVZhbHVlVHJhbnNmb3JtZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5rZXlEYXRhKGtleSkuX3RyYW5zZm9ybWVyID0gdHJhbnNmb3JtZXI7XG4gICAgfVxuXG5cbiAgICBnZXQgaWRlbnRpdHlDYWNoZSgpOiBDb2xsZWN0aW9ucy5EaWN0aW9uYXJ5PGFueSwgYW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pZGVudGl0eUNhY2hlO1xuICAgIH1cblxuXG4gICAgbmV3TWF0Y2hBcnJheSgpOiBNYXRjaFZhbHVlW10ge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgbWF0Y2hBcnJheUFzc2lnbihhcnJheTogTWF0Y2hWYWx1ZVtdLCBrZXlEYXRhOiBLZXlEYXRhLCBtYXRjaFZhbHVlOiBNYXRjaFZhbHVlKTogdm9pZCB7XG4gICAgICAgIGxldCBpZHggPSBrZXlEYXRhLl9pZDtcbiAgICAgICAgbGV0IGN1cnIgPSBhcnJheVtpZHhdO1xuICAgICAgICBpZiAoaXNQcmVzZW50KGN1cnIpKSB7XG4gICAgICAgICAgICBtYXRjaFZhbHVlID0gY3Vyci51cGRhdGVCeUFkZGluZyhtYXRjaFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBhcnJheVtpZHhdID0gbWF0Y2hWYWx1ZTtcbiAgICB9XG5cblxuICAgIHByb3BlcnR5V2lsbERvTWVyZ2UocHJvcGVydHlOYW1lOiBzdHJpbmcsIG9yaWdWYWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBtZXJnZXI6IFByb3BlcnR5TWVyZ2VyID0gdGhpcy5tZXJnZXJGb3JQcm9wZXJ0eShwcm9wZXJ0eU5hbWUpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmlzUHJvcGVydHlNZXJnZXJJc0NoYWluaW5nKG1lcmdlcikgfHwgKGlzUHJlc2VudChcbiAgICAgICAgICAgIG9yaWdWYWx1ZSkgJiYgKG9yaWdWYWx1ZSBpbnN0YW5jZW9mIE1hcCkpO1xuICAgIH1cblxuXG4gICAgbWFuYWdlckZvclByb3BlcnR5KG5hbWU6IHN0cmluZyk6IFByb3BlcnR5TWFuYWdlciB7XG4gICAgICAgIGxldCBtYW5hZ2VyOiBQcm9wZXJ0eU1hbmFnZXIgPSB0aGlzLl9tYW5hZ2VyRm9yUHJvcGVydHkuZ2V0KG5hbWUpO1xuICAgICAgICBpZiAoaXNCbGFuayhtYW5hZ2VyKSkge1xuICAgICAgICAgICAgbWFuYWdlciA9IG5ldyBQcm9wZXJ0eU1hbmFnZXIobmFtZSk7XG4gICAgICAgICAgICB0aGlzLl9tYW5hZ2VyRm9yUHJvcGVydHkuc2V0KG5hbWUsIG1hbmFnZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYW5hZ2VyO1xuICAgIH1cblxuXG4gICAgbWlycm9yUHJvcGVydHlUb0NvbnRleHQocHJvcGVydHlOYW1lOiBzdHJpbmcsIGNvbnRleHRLZXk6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBsZXQga2V5RGF0YSA9IHRoaXMua2V5RGF0YShjb250ZXh0S2V5KTtcbiAgICAgICAgbGV0IG1hbmFnZXIgPSB0aGlzLm1hbmFnZXJGb3JQcm9wZXJ0eShwcm9wZXJ0eU5hbWUpO1xuICAgICAgICBtYW5hZ2VyLl9rZXlEYXRhVG9TZXQgPSBrZXlEYXRhO1xuICAgIH1cblxuXG4gICAgZGVmaW5lS2V5QXNQcm9wZXJ0eVNjb3BlKGNvbnRleHRLZXk6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBsZXQga2V5RGF0YTogS2V5RGF0YSA9IHRoaXMua2V5RGF0YShjb250ZXh0S2V5KTtcbiAgICAgICAga2V5RGF0YS5pc1Byb3BlcnR5U2NvcGUgPSB0cnVlO1xuXG4gICAgICAgIGxldCB0cmFpdEtleTogc3RyaW5nID0gY29udGV4dEtleSArICdfdHJhaXQnO1xuICAgICAgICB0aGlzLm1pcnJvclByb3BlcnR5VG9Db250ZXh0KHRyYWl0S2V5LCB0cmFpdEtleSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJQcm9wZXJ0eU1lcmdlcih0cmFpdEtleSwgTWV0YS5Qcm9wZXJ0eU1lcmdlcl9EZWNsYXJlTGlzdCk7XG4gICAgfVxuXG4gICAgaXNQcm9wZXJ0eVNjb3BlS2V5KGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBNZXRhLlNjb3BlS2V5ID09PSBrZXk7XG4gICAgfVxuXG4gICAgcmVnaXN0ZXJQcm9wZXJ0eU1lcmdlcihwcm9wZXJ0eU5hbWU6IHN0cmluZywgbWVyZ2VyOiBQcm9wZXJ0eU1lcmdlcik6IHZvaWQge1xuICAgICAgICBpZiAoaXNCbGFuayhtZXJnZXIuX21ldGEpKSB7XG4gICAgICAgICAgICBtZXJnZXIuX21ldGEgPSB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGxldCBtYW5hZ2VyOiBQcm9wZXJ0eU1hbmFnZXIgPSB0aGlzLm1hbmFnZXJGb3JQcm9wZXJ0eShwcm9wZXJ0eU5hbWUpO1xuICAgICAgICBtYW5hZ2VyLl9tZXJnZXIgPSBtZXJnZXI7XG4gICAgfVxuXG4gICAgbWVyZ2VyRm9yUHJvcGVydHkocHJvcGVydHlOYW1lOiBzdHJpbmcpOiBQcm9wZXJ0eU1lcmdlciB7XG4gICAgICAgIGxldCBtYW5hZ2VyOiBQcm9wZXJ0eU1hbmFnZXIgPSB0aGlzLm1hbmFnZXJGb3JQcm9wZXJ0eShwcm9wZXJ0eU5hbWUpO1xuICAgICAgICByZXR1cm4gbWFuYWdlci5fbWVyZ2VyO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNQcm9wZXJ0eU1lcmdlcklzQ2hhaW5pbmcodmFsOiBhbnkpOiB2YWwgaXMgUHJvcGVydHlNZXJnZXJJc0NoYWluaW5nIHtcbiAgICAgICAgcmV0dXJuIGlzUHJlc2VudCh2YWwuaXNQcm9wTWVyZ2VySXNDaGFpbmluZ01hcmspICYmIHZhbC5pc1Byb3BNZXJnZXJJc0NoYWluaW5nTWFyaztcbiAgICB9XG5cblxuICAgIGdyb3VwRm9yVHJhaXQodHJhaXQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiAnZGVmYXVsdCc7XG4gICAgfVxuXG4gICAgX2xvZ1J1bGVTdGF0cygpOiB2b2lkIHtcbiAgICAgICAgbGV0IHRvdGFsID0gMDtcblxuICAgICAgICBsZXQgdmFsdWVzID0gdGhpcy5fa2V5RGF0YS5rZXlzKCk7XG5cbiAgICAgICAgbGV0IGNvdW50czogYW55W10gPSBbXTtcblxuICAgICAgICBmb3IgKGNvbnN0IGlkIG9mIEFycmF5LmZyb20odmFsdWVzKSkge1xuICAgICAgICAgICAgbGV0IGtleURhdGEgPSB0aGlzLl9rZXlEYXRhLmdldChpZCk7XG4gICAgICAgICAgICBsZXQgdmFsdWVzcyA9IGtleURhdGEucnVsZVZlY3MudmFsdWVzKCk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IHZtICBvZiB2YWx1ZXNzKSB7XG4gICAgICAgICAgICAgICAgbGV0IGt2YyA9IG5ldyBLZXlWYWx1ZUNvdW50KGtleURhdGEuX2tleSwgKDxhbnk+dm0pWydfdmFsdWUnXSwgaXNQcmVzZW50KFxuICAgICAgICAgICAgICAgICAgICB2bS5fYXJyKSA/IHZtLl9hcnJbMF0gOiAwKTtcblxuICAgICAgICAgICAgICAgIHRvdGFsICs9IGt2Yy5jb3VudDtcbiAgICAgICAgICAgICAgICBjb3VudHMucHVzaChrdmMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIExpc3RXcmFwcGVyLnNvcnQ8S2V5VmFsdWVDb3VudD4oY291bnRzLCAobzEsIG8yKSA9PiBvMi5jb3VudCAtIG8xLmNvdW50KTtcblxuICAgICAgICBsZXQgYnVmID0gbmV3IFN0cmluZ0pvaW5lcihbXSk7XG4gICAgICAgIGxldCBjID0gTWF0aC5taW4oMTAsIGNvdW50cy5sZW5ndGgpO1xuXG4gICAgICAgIGJ1Zi5hZGQoJ1RvdGFsIGluZGV4IGVudHJpZXMgY29tcGFyaXNvbnMgcGVyZm9ybWVkOiAnICsgTWF0Y2guX0RlYnVnX0VsZW1lbnRQcm9jZXNzQ291bnQpO1xuICAgICAgICBidWYuYWRkKCdcXG5Ub3RhbCBpbmRleCBlbnRyaWVzOiAnICsgdG90YWwpO1xuICAgICAgICBidWYuYWRkKCdcXG5Ub3AgIGtleXMvdmFsdWVzOiAnICsgYyk7XG5cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGM7IGkrKykge1xuICAgICAgICAgICAgbGV0IGt2YyA9IGNvdW50c1tpXTtcblxuICAgICAgICAgICAgYnVmLmFkZCgnICAgICAnICsga3ZjLmtleSArICcgID0gJyArIGt2Yy52YWx1ZSArICcgOiAnICsga3ZjLmNvdW50ICsgJyBlbnRyaWVzJyk7XG4gICAgICAgICAgICBidWYuYWRkKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgICBwcmludChidWYudG9TdHJpbmcoKSk7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICdNZXRhJztcbiAgICB9XG5cblxuICAgIGlzTnVsbE1hcmtlcih2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBpc1ByZXNlbnQodmFsdWUpICYmIHZhbHVlWydtYXJrZXJudWxsJ107XG4gICAgfVxuXG5cbiAgICBhZGRUZXN0VXNlclJ1bGUodGVzdFJ1bGVOYW1lOiBzdHJpbmcsIHNvdXJjZTogYW55KSB7XG4gICAgICAgIHRoaXMuX3Rlc3RSdWxlcy5zZXQodGVzdFJ1bGVOYW1lLCBzb3VyY2UpO1xuICAgIH1cblxuXG59XG5cblxuZXhwb3J0IGNsYXNzIEtleVZhbHVlQ291bnQge1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGtleTogc3RyaW5nLCBwdWJsaWMgdmFsdWU6IGFueSwgcHVibGljIGNvdW50OiBudW1iZXIpIHtcbiAgICB9XG59XG5cbi8qKlxuICogU3RvcmUgb2YgcG9saWN5IGluZm9ybWF0aW9uIGZvciBwYXJ0aWN1bGFyIHByb3BlcnRpZXMgLS0gbW9zdCBzaWduaWZpY2FudGx5LCBob3dcbiAqIHN1Y2Nlc3NpdmUgdmFsdWVzIG9mIHRoaXMgcHJvcGVydHkgYXJlIHRvIGJlICptZXJnZWQqIGR1cmluZyBydWxlIGFwcGxpY2F0aW9uLlxuICogKFNlZSBNZXRhLnJlZ2lzdGVyUHJvcGVydHlNZXJnZXIpLiAgRS5nLiAndmlzaWJsZScsICd0cmFpdCcsIGFuZCAndmFsaWQnIGFsbCBoYXZlIHVuaXF1ZVxuICogbWVyZ2UgcG9saWNpZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9wZXJ0eU1hbmFnZXIge1xuICAgIF9tZXJnZXI6IFByb3BlcnR5TWVyZ2VyO1xuICAgIF9rZXlEYXRhVG9TZXQ6IEtleURhdGE7XG5cblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBfbmFtZTogc3RyaW5nKSB7XG4gICAgfVxuXG5cbiAgICBtZXJnZVByb3BlcnR5KHByb3BlcnR5TmFtZTogc3RyaW5nLCBvcmlnOiBhbnksIG5ld1ZhbHVlOiBhbnksIGlzRGVjbGFyZTogYm9vbGVhbik6IGFueSB7XG4gICAgICAgIGlmIChpc0JsYW5rKG9yaWcpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3VmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV3VmFsdWUgaW5zdGFuY2VvZiBPdmVycmlkZVZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gKDxPdmVycmlkZVZhbHVlPiBuZXdWYWx1ZSkudmFsdWUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0JsYW5rKHRoaXMuX21lcmdlcikpIHtcbiAgICAgICAgICAgIC8vIFBlcmhhcHMgc2hvdWxkIGhhdmUgYSBkYXRhLXR5cGUtYmFzZWQgbWVyZ2VyIHJlZ2lzdHJ5P1xuICAgICAgICAgICAgaWYgKG9yaWcgaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNQcmVzZW50KG5ld1ZhbHVlKSAmJiBuZXdWYWx1ZSBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBtZXJnZSBtYXBzXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvZG86IFRFU1QgY2hlY2sgb3V0Y29tZSBvZiB0aGUgbWVyZ2UgYW5kIGNvbXBhcmVcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9yaWdDbG9uZSA9IE1hcFdyYXBwZXIuY2xvbmU8c3RyaW5nLCBhbnk+KG9yaWcpO1xuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IE1hcFdyYXBwZXIubWVyZ2VNYXBJbnRvTWFwV2l0aE9iamVjdChvcmlnQ2xvbmUsIG5ld1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3VmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoISh0aGlzLl9tZXJnZXIgaW5zdGFuY2VvZiBQcm9wZXJ0eU1lcmdlckR5bmFtaWMpICYmXG4gICAgICAgICAgICAob3JpZyBpbnN0YW5jZW9mIER5bmFtaWNQcm9wZXJ0eVZhbHVlIHx8IG5ld1ZhbHVlIGluc3RhbmNlb2YgRHluYW1pY1Byb3BlcnR5VmFsdWUpKSB7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgRGVmZXJyZWRPcGVyYXRpb25DaGFpbih0aGlzLl9tZXJnZXIsIG9yaWcsIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9tZXJnZXIubWVyZ2Uob3JpZywgbmV3VmFsdWUsIGlzRGVjbGFyZSk7XG4gICAgfVxuXG59XG5cbi8qKlxuICogV3JhcHBlciBmb3IgYSB2YWx1ZSB0aGF0IHNob3VsZCwgaW4gcnVsZSBhcHBsaWNhdGlvbiwgb3ZlcnJpZGUgYW55IHByZXZpb3VzIHZhbHVlIGZvciBpdHNcbiAqIHByb3BlcnR5LiAgVGhpcyBjYW4gYmUgdXNlZCB0byBvdmVycmlkZSBkZWZhdWx0IHByb3BlcnR5IHZhbHVlIG1lcmdlIHBvbGljeSwgZm9yIGluc3RhbmNlXG4gKiBhbGxvd2luZyB0aGUgJ3Zpc2libGUnIHByb3BlcnR5IHRvIGJlIGZvcmNlZCBmcm9tIGZhbHNlIHRvIHRydWUuXG4gKi9cbmV4cG9ydCBjbGFzcyBPdmVycmlkZVZhbHVlIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF92YWx1ZTogYW55KSB7XG4gICAgfVxuXG4gICAgdmFsdWUoKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlID09PSAnbnVsbCcgPyBudWxsIDogdGhpcy5fdmFsdWU7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGlzUHJlc2VudCh0aGlzLl92YWx1ZSkgPyB0aGlzLl92YWx1ZS50b1N0cmluZygpICsgJyEnIDogJ251bGwnICsgJyEnO1xuICAgIH1cbn1cblxuXG4vKipcbiAqIEtleURhdGEgaXMgdGhlIHByaW1hcnkgc3RydWN0dXJlIGZvciByZXByZXNlbnRpbmcgaW5mb3JtYXRpb24gYWJvdXQgY29udGV4dCBrZXlzXG4gKiAoZS5nLiAnY2xhc3MnLCAnbGF5b3V0JywgJ29wZXJhdGlvbicsICdmaWVsZCcsIC4uLiksIGluY2x1ZGluZyBhbiBpbmRleCBvZiBydWxlc1xuICogdGhhdCBtYXRjaCBvbiBwYXJ0aWN1bGFyIHZhbHVlcyBvZiB0aGF0IGtleSAoX1ZhbHVlTWF0Y2hlcykuXG4gKlxuICogTm90ZSB0aGF0IGV2ZXJ5IGNvbnRleHQga2V5IGhhcyBhIHNtYWxsIGludGVnZXIgSUQgKDAtNjMpIGFuZCB0aGVzZSBhcmUgdXNlcyBpblxuICogKGxvbmcpIG1hc2tzIGZvciBjZXJ0YWluIHJ1bGUgbWF0Y2hpbmcgb3BlcmF0aW9ucy5cbiAqL1xuXG5leHBvcnQgY2xhc3MgS2V5RGF0YSB7XG4gICAgcHJpdmF0ZSBfcnVsZVZlY3M6IENvbGxlY3Rpb25zLkRpY3Rpb25hcnk8YW55LCBWYWx1ZU1hdGNoZXM+O1xuICAgIHByaXZhdGUgX29ic2VydmVyczogQXJyYXk8VmFsdWVRdWVyaWVkT2JzZXJ2ZXI+O1xuXG4gICAgcHJpdmF0ZSBfYW55OiBWYWx1ZU1hdGNoZXM7XG4gICAgX3RyYW5zZm9ybWVyOiBLZXlWYWx1ZVRyYW5zZm9ybWVyO1xuXG4gICAgcHJpdmF0ZSBfaXNQcm9wZXJ0eVNjb3BlOiBib29sZWFuID0gZmFsc2U7XG5cblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBfa2V5OiBzdHJpbmcsIHB1YmxpYyBfaWQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLl9ydWxlVmVjcyA9IG5ldyBDb2xsZWN0aW9ucy5EaWN0aW9uYXJ5PGFueSwgVmFsdWVNYXRjaGVzPigpO1xuICAgICAgICB0aGlzLl9hbnkgPSB0aGlzLmdldChNZXRhLktleUFueSk7XG5cbiAgICB9XG5cbiAgICBtYXNrVmFsdWUoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHNoaWZ0TGVmdCgxLCB0aGlzLl9pZCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQodmFsdWU6IGFueSk6IFZhbHVlTWF0Y2hlcyB7XG4gICAgICAgIGlmIChpc0JsYW5rKHZhbHVlKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBNZXRhLk51bGxNYXJrZXI7XG5cbiAgICAgICAgfSBlbHNlIGlmIChpc1ByZXNlbnQodGhpcy5fdHJhbnNmb3JtZXIpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMuX3RyYW5zZm9ybWVyLnRyYW5mb3JtRm9yTWF0Y2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBtYXRjaGVzOiBWYWx1ZU1hdGNoZXMgPSB0aGlzLl9ydWxlVmVjcy5nZXRWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgICAgaWYgKGlzQmxhbmsobWF0Y2hlcykpIHtcbiAgICAgICAgICAgIG1hdGNoZXMgPSBuZXcgVmFsdWVNYXRjaGVzKHZhbHVlKTtcblxuICAgICAgICAgICAgaWYgKGlzUHJlc2VudCh2YWx1ZSkgJiYgIUJvb2xlYW5XcmFwcGVyLmlzRmFsc2UodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hlcy5fcGFyZW50ID0gdGhpcy5fYW55O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcnVsZVZlY3Muc2V0VmFsdWUodmFsdWUsIG1hdGNoZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXRjaGVzO1xuICAgIH1cblxuICAgIG1hdGNoVmFsdWUodmFsdWU6IGFueSk6IE1hdGNoVmFsdWUge1xuICAgICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGxldCBsaXN0ID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQobGlzdFswXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbXVsdGk6IE11bHRpTWF0Y2hWYWx1ZSA9IG5ldyBNdWx0aU1hdGNoVmFsdWUoKTtcblxuICAgICAgICAgICAgTGlzdFdyYXBwZXIuZm9yRWFjaFdpdGhJbmRleChsaXN0LCAodiwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIG11bHRpLmRhdGEucHVzaCh0aGlzLmdldCh2KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBtdWx0aTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGFkZEVudHJ5KHZhbHVlOiBhbnksIGlkOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgbGV0IG1hdGNoZXM6IFZhbHVlTWF0Y2hlcyA9IHRoaXMuZ2V0KHZhbHVlKTtcbiAgICAgICAgbGV0IGJlZm9yZTogbnVtYmVyW10gPSBtYXRjaGVzLl9hcnI7XG4gICAgICAgIGxldCBhZnRlcjogbnVtYmVyW10gPSBNYXRjaC5hZGRJbnQoYmVmb3JlLCBpZCk7XG4gICAgICAgIGlmIChiZWZvcmUgIT09IGFmdGVyKSB7XG4gICAgICAgICAgICBtYXRjaGVzLl9hcnIgPSBhZnRlcjtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgbG9va3VwKG93bmVyOiBNZXRhLCB2YWx1ZTogYW55KTogbnVtYmVyW10ge1xuICAgICAgICBsZXQgbWF0Y2hlczogVmFsdWVNYXRjaGVzID0gdGhpcy5nZXQodmFsdWUpO1xuICAgICAgICBpZiAoIW1hdGNoZXMuX3JlYWQgJiYgaXNQcmVzZW50KHRoaXMuX29ic2VydmVycykpIHtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIW1hdGNoZXMuX3JlYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbm90aWZ5XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1ByZXNlbnQodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMaXN0V3JhcHBlci5mb3JFYWNoV2l0aEluZGV4KHRoaXMuX29ic2VydmVycywgKHYsIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2Lm5vdGlmeShvd25lciwgdGhpcy5fa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtYXRjaGVzLl9yZWFkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBjaGVjayBpZiBwYXJlbnQgaGFzIGNoYW5nZWQgYW5kIG5lZWQgdG8gdW5pb24gaW4gcGFyZW50IGRhdGFcbiAgICAgICAgbWF0Y2hlcy5jaGVja1BhcmVudCgpO1xuICAgICAgICByZXR1cm4gbWF0Y2hlcy5fYXJyO1xuICAgIH1cblxuXG4gICAgc2V0UGFyZW50KHZhbHVlOiBhbnksIHBhcmVudFZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgICAgICAgbGV0IHBhcmVudDogVmFsdWVNYXRjaGVzID0gdGhpcy5nZXQocGFyZW50VmFsdWUpO1xuICAgICAgICBsZXQgY2hpbGQ6IFZhbHVlTWF0Y2hlcyA9IHRoaXMuZ2V0KHZhbHVlKTtcbiAgICAgICAgY2hpbGQuX3BhcmVudCA9IHBhcmVudDtcbiAgICB9XG5cblxuICAgIHBhcmVudCh2YWx1ZTogYW55KTogYW55IHtcbiAgICAgICAgbGV0IGNoaWxkOiBWYWx1ZU1hdGNoZXMgPSB0aGlzLmdldCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiBjaGlsZC5fcGFyZW50Ll92YWx1ZTtcbiAgICB9XG5cblxuICAgIGFkZE9ic2VydmVyKG86IFZhbHVlUXVlcmllZE9ic2VydmVyKTogdm9pZCB7XG4gICAgICAgIGlmIChpc0JsYW5rKHRoaXMuX29ic2VydmVycykpIHtcbiAgICAgICAgICAgIHRoaXMuX29ic2VydmVycyA9IG5ldyBBcnJheTxWYWx1ZVF1ZXJpZWRPYnNlcnZlcj4oKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9vYnNlcnZlcnMucHVzaChvKTtcbiAgICB9XG5cblxuICAgIC8vIElmIHRoaXMga2V5IGRlZmluZXMgYSBzY29wZSBmb3IgcHJvcGVydGllcyAoZS5nLiBmaWVsZCwgY2xhc3MsIGFjdGlvbilcbiAgICAvLyB0aGlzIHRoaXMgcmV0dXJucyB0aGUgbmFtZSBvZiB0aGUgc2VsZWN0b3Iga2V5IGZvciB0aG9zZSBwcm9wZXJ0aWVzXG4gICAgLy8gKGUuZy4gZmllbGRfcCwgY2xhc3NfcClcbiAgICBnZXQgaXNQcm9wZXJ0eVNjb3BlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNQcm9wZXJ0eVNjb3BlO1xuICAgIH1cblxuICAgIHNldCBpc1Byb3BlcnR5U2NvcGUoeW46IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5faXNQcm9wZXJ0eVNjb3BlID0geW47XG4gICAgfVxuXG5cbiAgICBnZXQgcnVsZVZlY3MoKTogQ29sbGVjdGlvbnMuRGljdGlvbmFyeTxhbnksIFZhbHVlTWF0Y2hlcz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fcnVsZVZlY3M7XG4gICAgfVxuXG4gICAgZ2V0IGtleSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fa2V5O1xuICAgIH1cblxuICAgIGdldCBpZCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XG4gICAgfVxuXG5cbiAgICBnZXQgb2JzZXJ2ZXJzKCk6IEFycmF5PFZhbHVlUXVlcmllZE9ic2VydmVyPiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vYnNlcnZlcnM7XG4gICAgfVxufVxuXG5cbi8qKlxuICogU3RvcmUgb2YgcG9saWN5IGluZm9ybWF0aW9uIGZvciBwYXJ0aWN1bGFyIHByb3BlcnRpZXMgLS0gbW9zdCBzaWduaWZpY2FudGx5LCBob3dcbiAqIHN1Y2Nlc3NpdmUgdmFsdWVzIG9mIHRoaXMgcHJvcGVydHkgYXJlIHRvIGJlICptZXJnZWQqIGR1cmluZyBydWxlIGFwcGxpY2F0aW9uLlxuICogKFNlZSBNZXRhLnJlZ2lzdGVyUHJvcGVydHlNZXJnZXIpLiAgRS5nLiAndmlzaWJsZScsICd0cmFpdCcsIGFuZCAndmFsaWQnIGFsbCBoYXZlIHVuaXF1ZVxuICogbWVyZ2UgcG9saWNpZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9wZXJ0eU1hcCBpbXBsZW1lbnRzIE1hcDxzdHJpbmcsIGFueT4ge1xuXG4gICAgcHJpdmF0ZSBfY29udGV4dFByb3BlcnRpZXNVcGRhdGVkOiBBcnJheTxQcm9wZXJ0eU1hbmFnZXI+O1xuICAgIHByb3RlY3RlZCBfbWFwOiBNYXA8c3RyaW5nLCBhbnk+O1xuXG4gICAgW1N5bWJvbC50b1N0cmluZ1RhZ106ICdNYXAnO1xuXG5cbiAgICBjb25zdHJ1Y3RvcihlbnRyaWVzPzogTWFwPHN0cmluZywgYW55Pikge1xuICAgICAgICBpZiAoaXNQcmVzZW50KGVudHJpZXMpKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXAgPSBuZXcgTWFwPHN0cmluZywgYW55PihlbnRyaWVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX21hcCA9IG5ldyBNYXA8c3RyaW5nLCBhbnk+KCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGdldChrZXk6IHN0cmluZyk6IGFueSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXAuZ2V0KGtleSk7XG4gICAgfVxuXG5cbiAgICBrZXlzKCk6IEl0ZXJhYmxlSXRlcmF0b3I8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXAua2V5cygpO1xuICAgIH1cblxuXG4gICAgdmFsdWVzKCk6IEl0ZXJhYmxlSXRlcmF0b3I8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXAudmFsdWVzKCk7XG4gICAgfVxuXG4gICAgY2xlYXIoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX21hcC5jbGVhcigpO1xuICAgIH1cblxuICAgIHNldChrZXk6IHN0cmluZywgdmFsdWU/OiBhbnkpOiBhbnkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFwLnNldChrZXksIHZhbHVlKTtcbiAgICB9XG5cblxuICAgIGRlbGV0ZShrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9tYXAuZGVsZXRlKGtleSk7XG4gICAgfVxuXG4gICAgZm9yRWFjaChjYWxsYmFja2ZuOiAodmFsdWU6IGFueSwgaW5kZXg6IHN0cmluZywgbWFwOiBNYXA8c3RyaW5nLCBhbnk+KSA9PiB2b2lkLFxuICAgICAgICAgICAgdGhpc0FyZz86IGFueSk6IHZvaWQge1xuICAgICAgICB0aGlzLl9tYXAuZm9yRWFjaChjYWxsYmFja2ZuKTtcbiAgICB9XG5cblxuICAgIGhhcyhrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFwLmhhcyhrZXkpO1xuICAgIH1cblxuXG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmFibGVJdGVyYXRvcjxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcFtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgfVxuXG5cbiAgICBlbnRyaWVzKCk6IEl0ZXJhYmxlSXRlcmF0b3I8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXAuZW50cmllcygpO1xuICAgIH1cblxuXG4gICAgZ2V0IHNpemUoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcC5zaXplO1xuICAgIH1cblxuXG4gICAgYXdha2VQcm9wZXJ0aWVzKCk6IHZvaWQge1xuICAgICAgICBNYXBXcmFwcGVyLml0ZXJhYmxlKHRoaXMpLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgIGlmIChpc1Byb3BlcnR5TWFwQXdha2luZyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV3VmFsdWUgPSB2YWx1ZS5hd2FrZUZvclByb3BlcnR5TWFwKHRoaXMpO1xuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhZGRDb250ZXh0S2V5KGtleTogUHJvcGVydHlNYW5hZ2VyKTogdm9pZCB7XG4gICAgICAgIGlmIChpc0JsYW5rKHRoaXMuX2NvbnRleHRQcm9wZXJ0aWVzVXBkYXRlZCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHRQcm9wZXJ0aWVzVXBkYXRlZCA9IG5ldyBBcnJheTxQcm9wZXJ0eU1hbmFnZXI+KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY29udGV4dFByb3BlcnRpZXNVcGRhdGVkLnB1c2goa2V5KTtcbiAgICB9XG5cblxuICAgIGdldCBjb250ZXh0S2V5c1VwZGF0ZWQoKTogQXJyYXk8UHJvcGVydHlNYW5hZ2VyPiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZXh0UHJvcGVydGllc1VwZGF0ZWQ7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIC8vIHRvZG86IGZpbmQgYmV0dGVyIHdheSBmb3IgdGhlIHN0cmluZy4gdGhzaSBpcyBhbHNvIHVzZWQgYXMga2V5IGZvciB0aGUgZGljdGlvbmFyeVxuICAgICAgICAvLyBub3QgcmVhbGx5IGVmZmljaWVudFxuICAgICAgICBsZXQgc2ogPSBuZXcgU3RyaW5nSm9pbmVyKFsnUHJvcGVydHlNYXA6J10pO1xuICAgICAgICBzai5hZGQodGhpcy5zaXplICsgJywnKTtcbiAgICAgICAgTWFwV3JhcHBlci5pdGVyYWJsZSh0aGlzKS5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNQcm9wZXJ0eU1hcEF3YWtpbmcodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5ld1ZhbHVlID0gdmFsdWUuYXdha2VGb3JQcm9wZXJ0eU1hcCh0aGlzKTtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNqLmFkZChrZXkgKyAnOicgKyB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHNqLmFkZCgnLCAnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc2oudG9TdHJpbmcoKTtcbiAgICB9XG59XG5cblxuLy8gTWFya2VyIGludGVyZmFjZVxuZXhwb3J0IGludGVyZmFjZSBQcm9wZXJ0eU1lcmdlcklzQ2hhaW5pbmcge1xuICAgIGlzUHJvcE1lcmdlcklzQ2hhaW5pbmdNYXJrOiBib29sZWFuO1xuXG59XG5cbi8qKlxuICogRGVmaW5lIHBvbGljeSBmb3IgbWVyZ2luZyBhIHByb3BlcnR5IHZhbHVlIGFzc2lnbmVkIGJ5IG9uZSBydWxlXG4gKiB0byBhIHN1YnNlcXVlbnQgdmFsdWUgZnJvbSBhIGhpZ2hlciByYW5rZWQgcnVsZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQcm9wZXJ0eU1lcmdlciB7XG5cbiAgICBfbWV0YTogTWV0YTtcblxuICAgIC8qKlxuICAgICAqIENhbGxlZCBkdXJpbmcgcnVsZSBhcHBsaWNhdGlvbiB0byBtZXJnZSBhbiBlYXJsaWVyIChsb3dlciByYW5rZWQpIHZhbHVlIHdpdGggYSBuZXdlciBvbmUuXG4gICAgICogQHBhcmFtIG9yaWcgdGhlIHByZXZpb3VzIHZhbHVlIGFjY3VtdWxhdGVkIGluIHRoZSBwcm9wZXJ0eSBtYXBcbiAgICAgKiBAcGFyYW0gb3ZlcnJpZGUgdGhlIG5ldyB2YWx1ZSBmcm9tIHRoZSBoaWdoZXIgcmFua2VkIHJ1bGVcbiAgICAgKiBAcGFyYW0gaXNEZWNsYXJlIHdoZXRoZXIgd2UgYXJlIGN1cnJlbnRseSBhY2N1bXVsYXRpbmcgbWF0Y2hlZCBmb3IgZGVjbGFyYXRpb25zIG9mIHRoZVxuICAgICAqICAgICBwcm9wZXJ0eS92YWx1ZVxuICAgICAqIEByZXR1cm4gdGhlIG5ldyBwcm9wZXJ0eSB2YWx1ZSB0byBiZSBwdXQgaW4gdGhlIHByb3BlcnR5IG1hcFxuICAgICAqL1xuICAgIG1lcmdlIChvcmlnOiBhbnksIG92ZXJyaWRlOiBhbnksIGlzRGVjbGFyZTogYm9vbGVhbik6IGFueTtcblxuICAgIHRvU3RyaW5nKCk6IHN0cmluZztcbn1cblxuLy8gbWFya2VyIGludGVyZmFjZSBmb3IgUHJvcGVydHlNZXJnZXMgdGhhdCBjYW4gaGFuZGxlIGR5bmFtaWMgdmFsdWVzXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUHJvcGVydHlNZXJnZXJEeW5hbWljIGltcGxlbWVudHMgUHJvcGVydHlNZXJnZXIge1xuICAgIF9tZXRhOiBNZXRhO1xuXG4gICAgbWVyZ2Uob3JpZzogYW55LCBvdmVycmlkZTogYW55LCBpc0RlY2xhcmU6IGJvb2xlYW4pOiBhbnkge1xuICAgICAgICByZXR1cm4gdW5pbXBsZW1lbnRlZCgpO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiAnUHJvcGVydHlNZXJnZXJEeW5hbWljJztcbiAgICB9XG59XG5cblxuZXhwb3J0IGNsYXNzIFByb3BlcnR5TWVyZ2VyX092ZXJ3cml0ZSBpbXBsZW1lbnRzIFByb3BlcnR5TWVyZ2VyIHtcbiAgICBfbWV0YTogTWV0YTtcblxuICAgIG1lcmdlKG9yaWc6IGFueSwgb3ZlcnJpZGU6IGFueSwgaXNEZWNsYXJlOiBib29sZWFuKTogYW55IHtcbiAgICAgICAgcmV0dXJuIG92ZXJyaWRlO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiAnT1ZFUldSSVRFJztcbiAgICB9XG59XG5cbi8qKlxuIFByb3BlcnR5TWVyZ2VyIGZvciBwcm9wZXJ0aWVzIHRoZSBzaG91bGQgYmUgdW5pb25lZCBhcyBsaXN0c1xuICovXG5leHBvcnQgY2xhc3MgUHJvcGVydHlNZXJnZXJfTGlzdCBpbXBsZW1lbnRzIFByb3BlcnR5TWVyZ2VyIHtcbiAgICBfbWV0YTogTWV0YTtcblxuICAgIG1lcmdlKG9yaWc6IGFueSwgb3ZlcnJpZGU6IGFueSwgaXNEZWNsYXJlOiBib29sZWFuKTogYW55IHtcbiAgICAgICAgaWYgKCEoaXNBcnJheShvcmlnKSkgJiYgIShpc0FycmF5KG92ZXJyaWRlKSkgJiYgTWV0YS5vYmplY3RFcXVhbHMob3JpZywgb3ZlcnJpZGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gb3JpZztcbiAgICAgICAgfVxuICAgICAgICBsZXQgbDEgPSBNZXRhLnRvTGlzdChvcmlnKTtcbiAgICAgICAgbGV0IGwyID0gTWV0YS50b0xpc3Qob3ZlcnJpZGUpO1xuXG4gICAgICAgIGxldCByZXN1bHQgPSBMaXN0V3JhcHBlci5jbG9uZShsMSk7XG5cbiAgICAgICAgTGlzdFdyYXBwZXIuYWRkRWxlbWVudHNJZkFic2VudChyZXN1bHQsIGwyKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cblxuLyoqXG4gKiBQcm9wZXJ0eU1lcmdlciBmb3IgcHJvcGVydGllcyB0aGUgc2hvdWxkIG92ZXJyaWRlIG5vcm1hbGx5LCBidXQgcmV0dXJuIGxpc3RzIHdoZW5cbiAqIGluIGRlY2xhcmUgbW9kZSAoZS5nLiAnY2xhc3MnLCAnZmllbGQnLCAnbGF5b3V0JywgLi4uKVxuICovXG5leHBvcnQgY2xhc3MgUHJvcGVydHlNZXJnZXJEZWNsYXJlTGlzdCBleHRlbmRzIFByb3BlcnR5TWVyZ2VyRHluYW1pYyB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBtZXJnZShvcmlnOiBhbnksIG92ZXJyaWRlOiBhbnksIGlzRGVjbGFyZTogYm9vbGVhbik6IGFueSB7XG4gICAgICAgIGlmICghaXNEZWNsYXJlKSB7XG4gICAgICAgICAgICByZXR1cm4gb3ZlcnJpZGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIShpc0FycmF5KG9yaWcpKSAmJiAhKGlzQXJyYXkob3ZlcnJpZGUpKSAmJiBNZXRhLm9iamVjdEVxdWFscyhvcmlnLCBvdmVycmlkZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBvcmlnO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3VsdDogYW55W10gPSBbXTtcbiAgICAgICAgTGlzdFdyYXBwZXIuYWRkRWxlbWVudHNJZkFic2VudChyZXN1bHQsIE1ldGEudG9MaXN0KG9yaWcpKTtcbiAgICAgICAgTGlzdFdyYXBwZXIuYWRkRWxlbWVudHNJZkFic2VudChyZXN1bHQsIE1ldGEudG9MaXN0KG92ZXJyaWRlKSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gJ1Byb3BlcnR5TWVyZ2VyRGVjbGFyZUxpc3QnO1xuICAgIH1cbn1cblxuLyoqXG4gKiBQcm9wZXJ0eU1lcmdlciBmb3IgdGhlICd0cmFpdCcgcHJvcGVydHkuICBHZW5lcmFsbHksIHRyYWl0cyBhcmUgdW5pb25lZCwgZXhjZXB0IGZvciB0cmFpdHNcbiAqIGZyb20gdGhlIHNhbWUgJ3RyYWl0R3JvdXAnLCB3aGljaCBvdmVycmlkZSAoaS5lLiBvbmx5IG9uZSB0cmFpdCBmcm9tIGVhY2ggdHJhaXRHcm91cCBzaG91bGRcbiAqIHN1cnZpdmUpLlxuICovXG5leHBvcnQgY2xhc3MgUHJvcGVydHlNZXJnZXJEZWNsYXJlTGlzdEZvclRyYWl0IGV4dGVuZHMgUHJvcGVydHlNZXJnZXJEZWNsYXJlTGlzdCB7XG5cbiAgICBfbWV0YTogTWV0YTtcblxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgbWVyZ2Uob3JpZzogYW55LCBvdmVycmlkZTogYW55LCBpc0RlY2xhcmU6IGJvb2xlYW4pOiBhbnkge1xuICAgICAgICBpZiAoaXNEZWNsYXJlKSB7XG4gICAgICAgICAgICByZXR1cm4gc3VwZXIubWVyZ2Uob3JpZywgb3ZlcnJpZGUsIGlzRGVjbGFyZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiB3ZSdyZSBvdmVycmlkZSBhIHNpbmdsZSBlbGVtZW50IHdpdGggaXRzZWxmLCBkb24ndCBnbyBMaXN0Li4uXG4gICAgICAgIGlmICghaXNBcnJheShvcmlnKSAmJiAhaXNBcnJheShvdmVycmlkZSkgJiYgTWV0YS5vYmplY3RFcXVhbHMob3JpZywgb3ZlcnJpZGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gb3JpZztcbiAgICAgICAgfVxuICAgICAgICBsZXQgb3JpZ0wgPSBNZXRhLnRvTGlzdChvcmlnKTtcbiAgICAgICAgbGV0IG92ZXJyaWRlTCA9IE1ldGEudG9MaXN0KG92ZXJyaWRlKTtcbiAgICAgICAgbGV0IHJlc3VsdDogYW55W10gPSBbXTtcbiAgICAgICAgZm9yIChsZXQgdHJhaXQgb2Ygb3JpZ0wpIHtcbiAgICAgICAgICAgIGlmICh0cmFpdCBpbnN0YW5jZW9mIE92ZXJyaWRlVmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0cmFpdCA9ICg8T3ZlcnJpZGVWYWx1ZT4gdHJhaXQpLnZhbHVlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBjYW5BZGQgPSB0cnVlO1xuICAgICAgICAgICAgbGV0IGdyb3VwID0gdGhpcy5fbWV0YS5ncm91cEZvclRyYWl0KHRyYWl0KTtcblxuICAgICAgICAgICAgaWYgKGlzUHJlc2VudChncm91cCkpIHtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IG92ZXJyaWRlVHJhaXQgb2Ygb3ZlcnJpZGVMKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvdmVycmlkZVRyYWl0IGluc3RhbmNlb2YgT3ZlcnJpZGVWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcnJpZGVUcmFpdCA9ICg8T3ZlcnJpZGVWYWx1ZT5vdmVycmlkZVRyYWl0KS52YWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZ3JvdXAgPT09IHRoaXMuX21ldGEuZ3JvdXBGb3JUcmFpdChvdmVycmlkZVRyYWl0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FuQWRkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYW5BZGQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0cmFpdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgTGlzdFdyYXBwZXIuYWRkRWxlbWVudHNJZkFic2VudChyZXN1bHQsIG92ZXJyaWRlTCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG5cbiAgICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gJ1Byb3BlcnR5TWVyZ2VyRGVjbGFyZUxpc3RGb3JUcmFpdCc7XG4gICAgfVxufVxuXG5cbi8qKlxuICogUHJvcGVydHlNZXJnZXIgaW1wbGVtZW50aW5nIEFORCBzZW1hbnRpY3MgLS0gaS5lLiBmYWxzZSB0cnVtcHMgdHJ1ZS5cbiAqIChVc2VkLCBmb3IgaW5zdGFuY2UsIGZvciB0aGUgcHJvcGVydGllcyAndmlzaWJsZScgYW5kICdlZGl0YWJsZScpXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9wZXJ0eU1lcmdlcl9BbmQgZXh0ZW5kcyBQcm9wZXJ0eU1lcmdlckR5bmFtaWMgaW1wbGVtZW50cyBQcm9wZXJ0eU1lcmdlcklzQ2hhaW5pbmcge1xuICAgIGlzUHJvcE1lcmdlcklzQ2hhaW5pbmdNYXJrOiBib29sZWFuID0gdHJ1ZTtcblxuXG4gICAgbWVyZ2Uob3JpZzogYW55LCBvdmVycmlkZTogYW55LCBpc0RlY2xhcmU6IGJvb2xlYW4pOiBhbnkge1xuICAgICAgICAvLyBudWxsIHdpbGwgcmVzZXQgKHNvIHRoYXQgaXQgY2FuIGJlIG92ZXJyaWRkZW4gdG8gdHJ1ZSBzdWJzZXF1ZW50bHlcbiAgICAgICAgaWYgKGlzQmxhbmsob3ZlcnJpZGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHdlIGNhbiBldmFsdWF0ZSBzdGF0aWNhbGx5LCBkbyBpdCBub3dcblxuXG4gICAgICAgIGlmICgoaXNCb29sZWFuKG9yaWcpICYmICEoQm9vbGVhbldyYXBwZXIuYm9sZWFuVmFsdWUob3JpZykpKSB8fFxuICAgICAgICAgICAgKGlzQm9vbGVhbihvdmVycmlkZSkgJiYgIShCb29sZWFuV3JhcHBlci5ib2xlYW5WYWx1ZShvdmVycmlkZSkpKSkge1xuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQU5EaW5nIHdpdGggdHJ1ZSBpcyBhIG5vb3AgLS0gcmV0dXJuIG5ldyB2YWx1ZVxuICAgICAgICBpZiAoaXNCb29sZWFuKG9yaWcpICYmIEJvb2xlYW5XcmFwcGVyLmJvbGVhblZhbHVlKG9yaWcpKSB7XG5cbiAgICAgICAgICAgIHJldHVybiAob3ZlcnJpZGUgaW5zdGFuY2VvZiBEeW5hbWljUHJvcGVydHlWYWx1ZSkgPyBvdmVycmlkZVxuICAgICAgICAgICAgICAgIDogQm9vbGVhbldyYXBwZXIuYm9sZWFuVmFsdWUoXG4gICAgICAgICAgICAgICAgICAgIG92ZXJyaWRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0Jvb2xlYW4ob3ZlcnJpZGUpICYmIEJvb2xlYW5XcmFwcGVyLmJvbGVhblZhbHVlKG92ZXJyaWRlKSkge1xuICAgICAgICAgICAgcmV0dXJuIChvcmlnIGluc3RhbmNlb2YgRHluYW1pY1Byb3BlcnR5VmFsdWUpID8gb3JpZyA6IEJvb2xlYW5XcmFwcGVyLmJvbGVhblZhbHVlKFxuICAgICAgICAgICAgICAgIG92ZXJyaWRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIG9uZSBvZiBvdXIgdmFsdWVzIGlzIGR5bmFtaWMsIGRlZmVyXG4gICAgICAgIGlmICgob3JpZyBpbnN0YW5jZW9mIER5bmFtaWNQcm9wZXJ0eVZhbHVlIHx8IG92ZXJyaWRlIGluc3RhbmNlb2YgRHluYW1pY1Byb3BlcnR5VmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERlZmVycmVkT3BlcmF0aW9uQ2hhaW4odGhpcywgb3JpZywgb3ZlcnJpZGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBCb29sZWFuV3JhcHBlci5ib2xlYW5WYWx1ZShvcmlnKSAmJiBCb29sZWFuV3JhcHBlci5ib2xlYW5WYWx1ZShvdmVycmlkZSk7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICdBTkQnO1xuICAgIH1cbn1cblxuXG5leHBvcnQgY2xhc3MgUHJvcGVydHlNZXJnZXJfVmFsaWQgaW1wbGVtZW50cyBQcm9wZXJ0eU1lcmdlcixcbiAgICBQcm9wZXJ0eU1lcmdlcklzQ2hhaW5pbmcge1xuICAgIF9tZXRhOiBNZXRhO1xuICAgIGlzUHJvcE1lcmdlcklzQ2hhaW5pbmdNYXJrOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIG1lcmdlKG9yaWc6IGFueSwgb3ZlcnJpZGU6IGFueSwgaXNEZWNsYXJlOiBib29sZWFuKTogYW55IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqXG4gICAgICAgICByZXR1cm4gKGlzU3RyaW5nKG92ZXJyaWRlKSB8fCAoIGlzQm9vbGVhbihvdmVycmlkZSkgJiZcbiAgICAgICAgICEoQm9vbGVhbldyYXBwZXIuYm9sZWFuVmFsdWUob3ZlcnJpZGUpKSkpID8gb3ZlcnJpZGUgOiBvcmlnO1xuICAgICAgICAgKi9cblxuICAgICAgICAvLyBpZiBmaXJzdCBpcyBlcnJvciAoZXJyb3IgbWVzc2FnZSBvciBmYWxzZSwgaXQgd2lucyksIG90aGVyd2lzZSBzZWNvbmRcbiAgICAgICAgcmV0dXJuIChpc1N0cmluZyhvdmVycmlkZSkgfHwgKGlzQm9vbGVhbihvdmVycmlkZSkgJiYgQm9vbGVhbldyYXBwZXIuaXNGYWxzZShvdmVycmlkZSkpKVxuICAgICAgICAgICAgPyBvdmVycmlkZSA6IG9yaWc7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICdWQUxJREFURSc7XG4gICAgfVxufVxuXG5cbi8qKlxuICogQSBncm91cCBvZiBydWxlcyBvcmlnaW5hdGluZyBmcm9tIGEgY29tbW9uIHNvdXJjZS5cbiAqIEFsbCBydWxlcyBtdXN0IGJlIGFkZGVkIHRvIHRoZSBydWxlIGJhc2UgYXMgcGFydCBvZiBhIFJ1bGVTZXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBSdWxlU2V0IHtcblxuICAgIF9maWxlUGF0aDogc3RyaW5nO1xuICAgIF9zdGFydDogbnVtYmVyID0gMDtcbiAgICBfZW5kOiBudW1iZXIgPSAwO1xuICAgIF9lZGl0YWJsZVN0YXJ0OiBudW1iZXIgPSAtMTtcblxuICAgIF9yYW5rOiBudW1iZXIgPSAwO1xuXG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9tZXRhOiBNZXRhKSB7XG4gICAgfVxuXG4gICAgZGlzYWJsZVJ1bGVzKCk6IHZvaWQge1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5fc3RhcnQ7IGkgPCB0aGlzLl9lbmQ7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fbWV0YS5fcnVsZXNbaV0uZGlzYWJsZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21ldGEuY2xlYXJDYWNoZXMoKTtcblxuICAgIH1cblxuXG4gICAgZ2V0IGZpbGVQYXRoKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWxlUGF0aDtcbiAgICB9XG5cbiAgICBydWxlcyhlZGl0YWJsZU9ubHk6IGFueSk6IEFycmF5PFJ1bGU+IHtcbiAgICAgICAgbGV0IHJlc3VsdDogQXJyYXk8UnVsZT4gPSBbXTtcbiAgICAgICAgbGV0IGkgPSAoZWRpdGFibGVPbmx5KSA/ICh0aGlzLl9lZGl0YWJsZVN0YXJ0ID09PSAtMSA/IHRoaXMuX2VuZCA6IHRoaXMuX2VkaXRhYmxlU3RhcnQpXG4gICAgICAgICAgICA6IHRoaXMuX3N0YXJ0O1xuICAgICAgICBmb3IgKDsgaSA8IHRoaXMuX2VuZDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgciA9IHRoaXMuX21ldGEuX3J1bGVzW2ldO1xuICAgICAgICAgICAgaWYgKCFyLmRpc2FibGVkKCkgJiYgIXRoaXMuX21ldGEuaXNUcmFpdEV4cG9ydFJ1bGUocikpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgfVxuXG4gICAgc3RhcnRSYW5rKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAodGhpcy5fc3RhcnQgPCB0aGlzLl9tZXRhLl9ydWxlQ291bnQpXG4gICAgICAgICAgICA/IHRoaXMuX21ldGEuX3J1bGVzW3RoaXMuX3N0YXJ0XS5yYW5rXG4gICAgICAgICAgICA6IHRoaXMuX3JhbmsgLSAodGhpcy5fZW5kIC0gdGhpcy5fc3RhcnQpO1xuICAgIH1cblxuICAgIGFsbG9jYXRlTmV4dFJ1bGVFbnRyeSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gKHRoaXMuX21ldGEuX3J1bGVDb3VudCA+IHRoaXMuX2VuZCkgPyB0aGlzLl9tZXRhLl9ydWxlQ291bnQrKyA6IHRoaXMuX2VuZCsrO1xuICAgIH1cblxuICAgIGdldCBzdGFydCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhcnQ7XG4gICAgfVxuXG4gICAgZ2V0IGVuZCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5kO1xuICAgIH1cblxuICAgIGdldCBlZGl0YWJsZVN0YXJ0KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lZGl0YWJsZVN0YXJ0O1xuICAgIH1cbn1cblxuXG4vKipcbiAqIEFic3RyYWN0aW9uIGZvciB2YWx1ZXMgKG9yIHNldHMgb2YgdmFsdWVzKSB0aGF0IGNhbiBiZSBtYXRjaGVkIGFnYWluc3Qgb3RoZXJzXG4gKiAoaW4gdGhlIGNvbnRleHQgb2YgU2VsZWN0b3Iga2V5L3ZhbHVlKSBtYXRjaGluZy4gIFN1YnR5cGVzIHRha2UgYWR2YW50YWdlIG9mXG4gKiB0aGUgZmFjdCB0aGF0IFZhbHVlTWF0Y2hlcyBpbnN0YW5jZXMgZ2xvYmFsbHkgdW5pcXVlbHkgcmVwcmVzZW50IGtleS92YWx1ZSBwYWlyc1xuICogdG8gZW5hYmxlIGVmZmljaWVudCBtYXRjaGluZyBlbnRpcmVseSB0aHJvdWdoIGlkZW50aXR5IGNvbXBhcmlzb24uXG4gKi9cblxuZXhwb3J0IGludGVyZmFjZSBNYXRjaFZhbHVlIHtcbiAgICBtYXRjaGVzIChvdGhlcjogTWF0Y2hWYWx1ZSk6IGJvb2xlYW47XG5cbiAgICB1cGRhdGVCeUFkZGluZyAob3RoZXI6IE1hdGNoVmFsdWUpOiBNYXRjaFZhbHVlO1xufVxuXG5cbi8qKlxuICpcbiAqIFVuaXF1ZWx5IHJlcHJlc2VudHMgYSBwYXJ0aWN1bGFyIGtleS92YWx1ZSBpbiB0aGUgTWV0YSBzY29wZSwgYW5kIGluZGV4ZXMgYWxsIHJ1bGVzXG4gKiB3aXRoIChpbmRleGVkKSBTZWxlY3RvcnMgbWF0Y2hpbmcgdGhhdCBrZXkvdmFsdWUuXG5cbiAqIFZhbHVlTWF0Y2hlcyBhbHNvIG1vZGVscyAqaW5oZXJpdGFuY2UqIGJ5IGFsbG93aW5nIG9uZSBrZXkvdmFsdWUgdG8gaGF2ZSBhbm90aGVyXG4gKiBhcyBpdHMgJ3BhcmVudCcgYW5kIHRoZXJlYnkgbWF0Y2ggb24gYW55IFNlbGVjdG9yIChhbmQgcnVsZSkgdGhhdCBpdHMgcGFyZW50IHdvdWxkLlxuICpcbiAqIEZvciBpbnN0YW5jZSwgdGhpcyBlbmFibGVzIGEgcnVsZSBvbiBjbGFzcz1OdW1iZXIgdG8gYXBwbHkgdG8gY2xhc3M9SW50ZWdlciBhbmRcbiAqIGNsYXNzPUJpZ0RlY2ltYWwsIGFuZCBvbmUgb24gY2xhc3M9KiB0byBhcHBseSB0byBhbnkuXG4gKlxuICogVGhlIHV0aWxpdHkgb2YgJ3BhcmVudCcgaXMgbm90IGxpbWl0ZWQsIG9mIGNvdXJzZSwgdG8gdGhlIGtleSAnY2xhc3MnOiBhbGwga2V5c1xuICogdGFrZSBhZHZhbnRhZ2Ugb2YgdGhlIHBhcmVudCAnKicgdG8gc3VwcG9ydCB1bnF1YWxpZmllZCBtYXRjaGVzIG9uIHRoYXQga2V5LCBhbmRcbiAqIGtleXMgbGlrZSAnb3BlcmF0aW9uJyBkZWZpbmUgYSB2YWx1ZSBoaWVyYXJjaHkgKCAnaW5zcGVjdCcgLT4geyd2aWV3JywgJ3NlYXJjaCd9LFxuICogJ3NlYXJjaCcgLT4geydrZXl3b3JkU2VhcmNoJywgJ3RleHRTZWFyY2gnfSlcbiAqL1xuXG5leHBvcnQgY2xhc3MgVmFsdWVNYXRjaGVzIGltcGxlbWVudHMgTWF0Y2hWYWx1ZSB7XG5cbiAgICBfdmFsdWU6IGFueTtcbiAgICBfcmVhZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIF9hcnI6IG51bWJlcltdO1xuXG4gICAgX3BhcmVudDogVmFsdWVNYXRjaGVzO1xuICAgIF9wYXJlbnRTaXplOiBudW1iZXIgPSAwO1xuXG5cbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZTogYW55KSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgY2hlY2tQYXJlbnQoKSB7XG4gICAgICAgIC8vIHRvZG86IHBlcmZvcm1hbmNlOiBrZWVwIGEgcnVsZSBzZXQgdmVyc2lvbiAjIGFuZCBvbmx5IGRvIHRoaXMgd2hlbiB0aGUgcnVsZSBzZXQgaGFzXG4gICAgICAgIC8vIHJlbG9hZGVkXG5cbiAgICAgICAgaWYgKGlzUHJlc2VudCh0aGlzLl9wYXJlbnQpKSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJlbnQuY2hlY2tQYXJlbnQoKTtcblxuICAgICAgICAgICAgbGV0IHBhcmVudEFycjogbnVtYmVyW10gPSB0aGlzLl9wYXJlbnQuX2FycjtcblxuICAgICAgICAgICAgaWYgKGlzUHJlc2VudChwYXJlbnRBcnIpICYmIHBhcmVudEFyclswXSAhPT0gdGhpcy5fcGFyZW50U2l6ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2FyciA9IE1hdGNoLnVuaW9uKHRoaXMuX2FyciwgcGFyZW50QXJyKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnRTaXplID0gcGFyZW50QXJyWzBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBtYXRjaGVzKG90aGVyOiBNYXRjaFZhbHVlKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICghKG90aGVyIGluc3RhbmNlb2YgVmFsdWVNYXRjaGVzKSkge1xuICAgICAgICAgICAgcmV0dXJuIG90aGVyLm1hdGNoZXModGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB3ZSByZWN1cnNlIHVwIHBhcmVudCBjaGFpbiB0byBkbyBzdXBlcmNsYXNzIG1hdGNoZXNcbiAgICAgICAgcmV0dXJuIChvdGhlciA9PT0gdGhpcykgfHwgKGlzUHJlc2VudCh0aGlzLl9wYXJlbnQpICYmIHRoaXMuX3BhcmVudC5tYXRjaGVzKG90aGVyKSk7XG4gICAgfVxuXG4gICAgdXBkYXRlQnlBZGRpbmcob3RoZXI6IE1hdGNoVmFsdWUpOiBNYXRjaFZhbHVlIHtcbiAgICAgICAgbGV0IG11bHRpOiBNdWx0aU1hdGNoVmFsdWUgPSBuZXcgTXVsdGlNYXRjaFZhbHVlKCk7XG4gICAgICAgIG11bHRpLmRhdGEucHVzaCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIG11bHRpLnVwZGF0ZUJ5QWRkaW5nKG90aGVyKTtcbiAgICB9XG5cbn1cblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L3dpa2kvRkFRI3doeS1kb2VzbnQtZXh0ZW5kaW5nLWJ1aWx0LWlucy1saWtlLWVycm9yLVxuLy8gIGFycmF5LWFuZC1tYXAtd29ya1xuZXhwb3J0IGNsYXNzIE11bHRpTWF0Y2hWYWx1ZSBpbXBsZW1lbnRzIE1hdGNoVmFsdWUge1xuXG4gICAgZGF0YTogQXJyYXk8TWF0Y2hWYWx1ZT4gPSBbXTtcblxuXG4gICAgbWF0Y2hlcyhvdGhlcjogTWF0Y2hWYWx1ZSk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAob3RoZXIgaW5zdGFuY2VvZiBNdWx0aU1hdGNoVmFsdWUpIHtcbiAgICAgICAgICAgIC8vIGxpc3QgLyBsaXN0IGNvbXBhcmlzb246IGFueSBjb21ibyBjYW4gbWF0Y2hcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKG90aGVyLm1hdGNoZXModGhpcy5kYXRhW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzaW5nbGUgdmFsdWUgYWdhaW5zdCBhcnJheTogb25lIG11c3QgbWF0Y2hcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YVtpXS5tYXRjaGVzKG90aGVyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHVwZGF0ZUJ5QWRkaW5nKG90aGVyOiBNYXRjaFZhbHVlKTogTWF0Y2hWYWx1ZSB7XG4gICAgICAgIGlmIChvdGhlciBpbnN0YW5jZW9mIE11bHRpTWF0Y2hWYWx1ZSkge1xuICAgICAgICAgICAgbGV0IG1hdGNoVmFsdWU6IE11bHRpTWF0Y2hWYWx1ZSA9IDxNdWx0aU1hdGNoVmFsdWU+IG90aGVyO1xuICAgICAgICAgICAgTGlzdFdyYXBwZXIuYWRkQWxsKHRoaXMuZGF0YSwgbWF0Y2hWYWx1ZS5kYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5wdXNoKG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBWYWx1ZVF1ZXJpZWRPYnNlcnZlciB7XG5cbiAgICBub3RpZnkgKG1ldGE6IE1ldGEsIGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZDtcblxufVxuXG5cbi8qKlxuICogVXNlZCB0byB0cmFuc2Zvcm0gdmFsdWVzIGludG8gdGhlIChzdGF0aWMpIHZlcnNpb24gdGhleSBzaG91bGQgYmUgaW5kZXhlZCAvIHNlYXJjaGVkIHVuZGVyXG4gKiBGb3IgaW5zdGFuY2UsICdvYmplY3QnIG1heSBiZSBpbmRleGVkIGFzIHRydWUvZmFsc2UgKHByZXNlbnQgb3Igbm90KVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEtleVZhbHVlVHJhbnNmb3JtZXIge1xuICAgIHRyYW5mb3JtRm9yTWF0Y2ggKG86IGFueSk6IGFueTtcbn1cblxuXG5leHBvcnQgY2xhc3MgS2V5VmFsdWVUcmFuc2Zvcm1lcl9LZXlQcmVzZW50IGltcGxlbWVudHMgS2V5VmFsdWVUcmFuc2Zvcm1lciB7XG5cblxuICAgIHRyYW5mb3JtRm9yTWF0Y2gobzogYW55KTogYW55IHtcbiAgICAgICAgcmV0dXJuIChpc1ByZXNlbnQobykgJiYgIShCb29sZWFuV3JhcHBlci5pc0ZhbHNlKG8pKSkgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuXG5cbn1cblxuXG4vKipcbiAqIENhbGxlZCBvbiBpbXBsZW1lbnRpbmcgdmFsdWVzIHRvIGFsbG93IHN0YXRpY2FsbHkgcmVzb2x2YWJsZSAoYnV0IGR5bmFtaWMpIHZhbHVlc1xuICogdG8gZXZhbHVhdGUvY29weSB0aGVtc2VsdmVzIGZvciBpbmNsdXNpb24gaW4gYSBuZXcgbWFwICh0byBlbnN1cmUgdGhhdCBhIHZhbHVlIHRoYXRcbiAqIGRlcml2ZWQgaXRzIHZhbHVlIGJhc2VkIG9uIGEgZGlmZmVyZW50IGNvbnRleHQgZG9lc24ndCBnZXQgcmV1c2VkIGluIGFub3RoZXIpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUHJvcGVydHlNYXBBd2FraW5nIHtcbiAgICBwcm9wZXJ0eUF3YWtpbmc6IGJvb2xlYW47XG5cbiAgICBhd2FrZUZvclByb3BlcnR5TWFwIChtYXA6IFByb3BlcnR5TWFwKTogYW55O1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3BlcnR5TWFwQXdha2luZyhhcmc6IGFueSk6IGFyZyBpcyBQcm9wZXJ0eU1hcEF3YWtpbmcge1xuICAgIHJldHVybiBpc1ByZXNlbnQoYXJnKSAmJiBpc1ByZXNlbnQoYXJnLnByb3BlcnR5QXdha2luZyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBTQVAgQXJpYmFcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiBCYXNlZCBvbiBvcmlnaW5hbCB3b3JrOiBNZXRhVUk6IENyYWlnIEZlZGVyaWdoaSAoMjAwOClcbiAqXG4gKi9cblxuZXhwb3J0IGNsYXNzIEl0ZW1Qcm9wZXJ0aWVzXG57XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgbmFtZTogc3RyaW5nLCBwdWJsaWMgcHJvcGVydGllczogTWFwPHN0cmluZywgYW55PiwgcHVibGljIGhpZGRlbjogYm9vbGVhbilcbiAgICB7XG4gICAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgU0FQIEFyaWJhXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogQmFzZWQgb24gb3JpZ2luYWwgd29yazogTWV0YVVJOiBDcmFpZyBGZWRlcmlnaGkgKDIwMDgpXG4gKlxuICovXG5pbXBvcnQge0luamVjdG9yLCBUeXBlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgYXNzZXJ0LFxuICAgIEJvb2xlYW5XcmFwcGVyLFxuICAgIEZpZWxkUGF0aCxcbiAgICBpc0FycmF5LFxuICAgIGlzQmxhbmssXG4gICAgaXNCb29sZWFuLFxuICAgIGlzUHJlc2VudCxcbiAgICBpc1N0cmluZ1xufSBmcm9tICdAYXJpYmF1aS9jb3JlJztcbmltcG9ydCB7Q29tcG9uZW50UmVnaXN0cnl9IGZyb20gJ0BhcmliYXVpL2NvbXBvbmVudHMnO1xuaW1wb3J0IHtcbiAgICBNZXRhLFxuICAgIFByb3BlcnR5TWFwLFxuICAgIFByb3BlcnR5TWVyZ2VyLFxuICAgIFByb3BlcnR5TWVyZ2VyX0FuZCxcbiAgICBQcm9wZXJ0eU1lcmdlcklzQ2hhaW5pbmcsXG4gICAgVmFsdWVRdWVyaWVkT2JzZXJ2ZXJcbn0gZnJvbSAnLi9tZXRhJztcbmltcG9ydCB7Q29udGV4dCwgT2JqZWN0TWV0YUNvbnRleHR9IGZyb20gJy4vY29udGV4dCc7XG5pbXBvcnQge0l0ZW1Qcm9wZXJ0aWVzfSBmcm9tICcuL2l0ZW0tcHJvcGVydGllcyc7XG5pbXBvcnQge1J1bGUsIFNlbGVjdG9yfSBmcm9tICcuL3J1bGUnO1xuXG4vKipcbiAqIE9iamVjdE1ldGEgaXMgcmVzcG9zaWJsZSBmb3Igc2V0dGluZyB1cCBldmVyeXRoaW5nIHJlbGF0ZWQgdG8gY2xhc3MsIGZpZWxkLCBhY3Rpb25zXG4gKlxuICovXG5leHBvcnQgY2xhc3MgT2JqZWN0TWV0YSBleHRlbmRzIE1ldGEge1xuICAgIHN0YXRpYyBLZXlDbGFzcyA9ICdjbGFzcyc7XG4gICAgc3RhdGljIEtleUZpZWxkID0gJ2ZpZWxkJztcbiAgICBzdGF0aWMgS2V5QWN0aW9uID0gJ2FjdGlvbic7XG4gICAgc3RhdGljIEtleUFjdGlvbkNhdGVnb3J5ID0gJ2FjdGlvbkNhdGVnb3J5JztcbiAgICBzdGF0aWMgS2V5T2JqZWN0ID0gJ29iamVjdCc7XG4gICAgc3RhdGljIEtleVZhbHVlID0gJ3ZhbHVlJztcbiAgICBzdGF0aWMgS2V5VHlwZSA9ICd0eXBlJztcbiAgICBzdGF0aWMgS2V5RWxlbWVudFR5cGUgPSAnZWxlbWVudFR5cGUnO1xuICAgIHN0YXRpYyByZWFkb25seSBLZXlUcmFpdEdyb3VwID0gJ3RyYWl0R3JvdXAnO1xuICAgIHN0YXRpYyBLZXlWaXNpYmxlID0gJ3Zpc2libGUnO1xuICAgIHN0YXRpYyBLZXlFZGl0YWJsZSA9ICdlZGl0YWJsZSc7XG4gICAgc3RhdGljIEtleVZhbGlkID0gJ3ZhbGlkJztcbiAgICBzdGF0aWMgS2V5UmFuayA9ICdyYW5rJztcbiAgICBzdGF0aWMgcmVhZG9ubHkgRGVmYXVsdEFjdGlvbkNhdGVnb3J5ID0gJ0dlbmVyYWwnO1xuXG4gICAgc3RhdGljIHJlYWRvbmx5IF9GaWVsZFBhdGhOdWxsTWFya2VyID0gbmV3IEZpZWxkUGF0aCgnbnVsbCcpO1xuXG5cbiAgICBfdHJhaXRUb0dyb3VwOiBNYXA8c3RyaW5nLCBzdHJpbmc+O1xuICAgIF90cmFpdFRvR3JvdXBHZW5lcmF0aW9uOiBudW1iZXIgPSAtMTtcblxuXG4gICAgLyoqXG4gICAgICogIENhbiBpbmplY3QgdGhlc2UgZGlyZWN0bHkgYnV0IHdhbnQgdG8ga2VlcCB0aGlzIGFzIG11Y2ggYXMgcG9zc2libGUgd2l0aCBhbnkgYW5ndWxhclxuICAgICAqICBkZXBlbmRlY2llcyBhcyB3ZSB3aWxsIGJlIHVzaW5nIHRoZXNlIGNvcmUgcnVsZSBjbGFzc2VzIG91dHNpZGUgb2YgVUkgY29kZVxuICAgICAqL1xuICAgIHByb3RlY3RlZCBfY29tcG9uZW50UmVnaXN0cnk6IENvbXBvbmVudFJlZ2lzdHJ5O1xuICAgIHByb3RlY3RlZCBfaW5qZWN0b3I6IEluamVjdG9yO1xuXG5cbiAgICBzdGF0aWMgdmFsaWRhdGlvbkVycm9yKGNvbnRleHQ6IENvbnRleHQpOiBzdHJpbmcge1xuICAgICAgICBsZXQgZXJyb3IgPSBjb250ZXh0LnByb3BlcnR5Rm9yS2V5KE9iamVjdE1ldGEuS2V5VmFsaWQpO1xuICAgICAgICBpZiAoaXNCbGFuayhlcnJvcikpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzQm9vbGVhbihlcnJvcikpIHtcbiAgICAgICAgICAgIHJldHVybiBCb29sZWFuV3JhcHBlci5ib2xlYW5WYWx1ZShlcnJvcikgPyBudWxsIDogJ0ludmFsaWQgZW50cnknO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlcnJvci50b1N0cmluZygpO1xuICAgIH1cblxuICAgIC8vIHRvZG86IGltcGxlbWVudCBuZXcgZGVjb3JhdG9ycyBpbiB0eXBlc2NyaXB0IGlmIHdlIHdhbnQgb3QgYW5ub3RhdGUgX2Fubm90YXRpb25Qcm9jZXNzb3JzXG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLnJlZ2lzdGVyS2V5SW5pdE9ic2VydmVyKE9iamVjdE1ldGEuS2V5Q2xhc3MsIG5ldyBJbnRyb3NwZWN0aW9uTWV0YVByb3ZpZGVyKCkpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyS2V5SW5pdE9ic2VydmVyKE9iamVjdE1ldGEuS2V5VHlwZSwgbmV3IEZpZWxkVHlwZUludHJvc3BlY3Rpb25NZXRhUHJvdmlkZXIoKSk7XG5cbiAgICAgICAgLy8gVGhlc2Uga2V5cyBkZWZpbmUgc2NvcGVzIGZvciB0aGVpciBwcm9wZXJ0aWVzXG4gICAgICAgIHRoaXMuZGVmaW5lS2V5QXNQcm9wZXJ0eVNjb3BlKE9iamVjdE1ldGEuS2V5RmllbGQpO1xuICAgICAgICB0aGlzLmRlZmluZUtleUFzUHJvcGVydHlTY29wZShPYmplY3RNZXRhLktleUFjdGlvbik7XG4gICAgICAgIHRoaXMuZGVmaW5lS2V5QXNQcm9wZXJ0eVNjb3BlKE9iamVjdE1ldGEuS2V5QWN0aW9uQ2F0ZWdvcnkpO1xuICAgICAgICB0aGlzLmRlZmluZUtleUFzUHJvcGVydHlTY29wZShPYmplY3RNZXRhLktleUNsYXNzKTtcblxuICAgICAgICAvLyBwb2xpY2llcyBmb3IgY2hhaW5pbmcgY2VydGFpbiB3ZWxsIGtub3duIHByb3BlcnRpZXNcbiAgICAgICAgdGhpcy5yZWdpc3RlclByb3BlcnR5TWVyZ2VyKE9iamVjdE1ldGEuS2V5VmlzaWJsZSwgbmV3IFByb3BlcnR5TWVyZ2VyX0FuZCgpKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlclByb3BlcnR5TWVyZ2VyKE9iamVjdE1ldGEuS2V5RWRpdGFibGUsIG5ldyBQcm9wZXJ0eU1lcmdlcl9BbmQoKSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJQcm9wZXJ0eU1lcmdlcihPYmplY3RNZXRhLktleVZhbGlkLCBuZXcgT01Qcm9wZXJ0eU1lcmdlcl9WYWxpZCgpKTtcblxuICAgICAgICB0aGlzLnJlZ2lzdGVyUHJvcGVydHlNZXJnZXIoT2JqZWN0TWV0YS5LZXlDbGFzcywgTWV0YS5Qcm9wZXJ0eU1lcmdlcl9EZWNsYXJlTGlzdCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJQcm9wZXJ0eU1lcmdlcihPYmplY3RNZXRhLktleUZpZWxkLCBNZXRhLlByb3BlcnR5TWVyZ2VyX0RlY2xhcmVMaXN0KTtcbiAgICAgICAgdGhpcy5yZWdpc3RlclByb3BlcnR5TWVyZ2VyKE9iamVjdE1ldGEuS2V5QWN0aW9uLCBNZXRhLlByb3BlcnR5TWVyZ2VyX0RlY2xhcmVMaXN0KTtcbiAgICAgICAgdGhpcy5yZWdpc3RlclByb3BlcnR5TWVyZ2VyKE9iamVjdE1ldGEuS2V5QWN0aW9uQ2F0ZWdvcnksIE1ldGEuUHJvcGVydHlNZXJnZXJfRGVjbGFyZUxpc3QpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyUHJvcGVydHlNZXJnZXIoT2JqZWN0TWV0YS5LZXlUcmFpdEdyb3VwLCBNZXRhLlByb3BlcnR5TWVyZ2VyX0RlY2xhcmVMaXN0KTtcblxuICAgICAgICB0aGlzLm1pcnJvclByb3BlcnR5VG9Db250ZXh0KE9iamVjdE1ldGEuS2V5Q2xhc3MsIE9iamVjdE1ldGEuS2V5Q2xhc3MpO1xuICAgICAgICB0aGlzLm1pcnJvclByb3BlcnR5VG9Db250ZXh0KE9iamVjdE1ldGEuS2V5VHlwZSwgT2JqZWN0TWV0YS5LZXlUeXBlKTtcbiAgICAgICAgdGhpcy5taXJyb3JQcm9wZXJ0eVRvQ29udGV4dChPYmplY3RNZXRhLktleUVsZW1lbnRUeXBlLCBPYmplY3RNZXRhLktleUVsZW1lbnRUeXBlKTtcbiAgICAgICAgdGhpcy5taXJyb3JQcm9wZXJ0eVRvQ29udGV4dChPYmplY3RNZXRhLktleVRyYWl0LCBNZXRhLktleVRyYWl0KTtcbiAgICAgICAgdGhpcy5taXJyb3JQcm9wZXJ0eVRvQ29udGV4dChPYmplY3RNZXRhLktleUVkaXRhYmxlLCBPYmplY3RNZXRhLktleUVkaXRhYmxlKTtcblxuICAgICAgICB0aGlzLnJlZ2lzdGVyVmFsdWVUcmFuc2Zvcm1lckZvcktleShPYmplY3RNZXRhLktleU9iamVjdCwgTWV0YS5UcmFuc2Zvcm1lcl9LZXlQcmVzZW50KTtcblxuICAgICAgICAvLyB0b2RvOiB0cnkgdG8gc3VwcG9ydCBkZWNvcmF0b3JzIGFuZCBob3cgd2UgY2FuIHB1dCBtZXRhIGRhdGEgaW50byBvYmplY3QgQFRyYWl0cyxcbiAgICAgICAgLy8gQFByb3BlcnRpZXMsIEBBY3Rpb25cbiAgICB9XG5cblxuICAgIC8qXG4gICAgICogIFByb3ZpZGUgc3ViY2xhc3MgY29udGV4dCB3aXRoIGNvbnZlbmllbmNlcyBmb3IgZ2V0dGluZyBvYmplY3QgZmllbGQgdmFsdWVzXG4gICAgICovXG4gICAgbmV3Q29udGV4dCgpOiBDb250ZXh0IHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYmplY3RNZXRhQ29udGV4dCh0aGlzLCBmYWxzZSk7XG4gICAgfVxuXG5cbiAgICAvLyBVc2UgYSBzcGVjaWFsIG1hcCBzdWJzY2xhc3MgZm9yIG91ciBQcm9wZXJ0aWVzXG4gICAgbmV3UHJvcGVydGllc01hcCgpOiBQcm9wZXJ0eU1hcCB7XG4gICAgICAgIHJldHVybiBuZXcgT2JqZWN0TWV0YVByb3BlcnR5TWFwKCk7XG4gICAgfVxuXG4gICAgaXRlbU5hbWVzKGNvbnRleHQ6IENvbnRleHQsIGtleTogc3RyaW5nKTogQXJyYXk8c3RyaW5nPiB7XG4gICAgICAgIGNvbnRleHQucHVzaCgpO1xuICAgICAgICBjb250ZXh0LnNldChPYmplY3RNZXRhLktleURlY2xhcmUsIGtleSk7XG4gICAgICAgIGxldCBpdGVtc05hbWVzID0gY29udGV4dC5saXN0UHJvcGVydHlGb3JLZXkoa2V5KTtcbiAgICAgICAgY29udGV4dC5wb3AoKTtcblxuICAgICAgICByZXR1cm4gaXRlbXNOYW1lcztcbiAgICB9XG5cblxuICAgIGl0ZW1Qcm9wZXJ0aWVzKGNvbnRleHQ6IENvbnRleHQsIGtleTogc3RyaW5nLCBmaWx0ZXJIaWRkZW46IGJvb2xlYW4pOiBBcnJheTxJdGVtUHJvcGVydGllcz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVtUHJvcGVydGllc0Zvck5hbWVzKGNvbnRleHQsIGtleSwgdGhpcy5pdGVtTmFtZXMoY29udGV4dCwga2V5KSxcbiAgICAgICAgICAgIGZpbHRlckhpZGRlbik7XG4gICAgfVxuXG4gICAgaXRlbVByb3BlcnRpZXNGb3JOYW1lcyhjb250ZXh0OiBDb250ZXh0LCBrZXk6IHN0cmluZywgaXRlbU5hbWVzOiBzdHJpbmdbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlckhpZGRlbjogYm9vbGVhbik6IEFycmF5PEl0ZW1Qcm9wZXJ0aWVzPiB7XG4gICAgICAgIGxldCByZXN1bHQ6IEFycmF5PEl0ZW1Qcm9wZXJ0aWVzPiA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpdGVtTmFtZSBvZiBpdGVtTmFtZXMpIHtcbiAgICAgICAgICAgIGNvbnRleHQucHVzaCgpO1xuICAgICAgICAgICAgY29udGV4dC5zZXQoa2V5LCBpdGVtTmFtZSk7XG5cbiAgICAgICAgICAgIGxldCBpc1Zpc2libGUgPSBjb250ZXh0LmFsbFByb3BlcnRpZXMoKS5nZXQoT2JqZWN0TWV0YS5LZXlWaXNpYmxlKTtcbiAgICAgICAgICAgIGxldCB2aXNpYmxlID0gY29udGV4dC5zdGF0aWNhbGx5UmVzb2x2ZVZhbHVlKGlzVmlzaWJsZSk7XG5cbiAgICAgICAgICAgIGxldCBpc0hpZGRlbiA9IChpc0JsYW5rKHZpc2libGUpKSB8fCBCb29sZWFuV3JhcHBlci5pc0ZhbHNlKHZpc2libGUpO1xuXG4gICAgICAgICAgICBpZiAoIWlzSGlkZGVuIHx8ICFmaWx0ZXJIaWRkZW4pIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChuZXcgSXRlbVByb3BlcnRpZXMoaXRlbU5hbWUsIGNvbnRleHQuYWxsUHJvcGVydGllcygpLCBpc0hpZGRlbikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGV4dC5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuXG4gICAgZ3JvdXBGb3JUcmFpdCh0cmFpdDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMuX3RyYWl0VG9Hcm91cCA9PSBudWxsIHx8IHRoaXMuX3RyYWl0VG9Hcm91cEdlbmVyYXRpb24gPCB0aGlzLnJ1bGVTZXRHZW5lcmF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl90cmFpdFRvR3JvdXBHZW5lcmF0aW9uID0gdGhpcy5ydWxlU2V0R2VuZXJhdGlvbjtcbiAgICAgICAgICAgIHRoaXMuX3RyYWl0VG9Hcm91cCA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCk7XG5cbiAgICAgICAgICAgIGxldCBjb250ZXh0ID0gdGhpcy5uZXdDb250ZXh0KCk7XG4gICAgICAgICAgICBmb3IgKGxldCBncm91cCBvZiB0aGlzLml0ZW1OYW1lcyhjb250ZXh0LCBPYmplY3RNZXRhLktleVRyYWl0R3JvdXApKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5wdXNoKCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5zZXQoT2JqZWN0TWV0YS5LZXlUcmFpdEdyb3VwLCBncm91cCk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBuYW1lIG9mIHRoaXMuaXRlbU5hbWVzKGNvbnRleHQsIE9iamVjdE1ldGEuS2V5VHJhaXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYWl0VG9Hcm91cC5zZXQobmFtZSwgZ3JvdXApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250ZXh0LnBvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl90cmFpdFRvR3JvdXAuZ2V0KHRyYWl0KTtcbiAgICB9XG5cbiAgICBzZXQgaW5qZWN0b3IodmFsdWU6IEluamVjdG9yKSB7XG4gICAgICAgIHRoaXMuX2luamVjdG9yID0gdmFsdWU7XG4gICAgfVxuXG5cbiAgICBnZXQgaW5qZWN0b3IoKTogSW5qZWN0b3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5faW5qZWN0b3I7XG4gICAgfVxuXG4gICAgZ2V0IGNvbXBvbmVudFJlZ2lzdHJ5KCk6IENvbXBvbmVudFJlZ2lzdHJ5IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbXBvbmVudFJlZ2lzdHJ5O1xuICAgIH1cblxuICAgIHNldCBjb21wb25lbnRSZWdpc3RyeSh2YWx1ZTogQ29tcG9uZW50UmVnaXN0cnkpIHtcbiAgICAgICAgdGhpcy5fY29tcG9uZW50UmVnaXN0cnkgPSB2YWx1ZTtcbiAgICB9XG59XG5cbi8qKlxuICogV2hlbiBhIGNsYXNzIGlzIHB1c2hlZCBlaXRoZXIgZGlyZWN0bHkgb3IgaW5kaXJlY3RseSAodXNpbmcgZGVmZmVyZWQgcnVsZXMpIHdlIHJlY2VpdmUgYVxuICogVmFsdWVRdWVyaWVkT2JzZXJ2ZXIgbm90aWZpY2F0aW9uIGluIG9yZGVyIHRvIHJlZ2lzdGVyICB0eXBlcyBmb3IgdGhlIG9iamVjdC4gVHJ5aW5nIHRvIGFjaGlldmVcbiAqIGF0IGxlYXN0IHNvbWUga2luZCBvZiBpbnRyb3NwZWN0aW9uIHdlIG5lZWQgdG8gaW1wbGVtZW50ICRwcm90byBtZXRob2QgaW5zaWRlIHRoZSBvYmplY3QgdGhhdFxuICogaW5zdGFudGlhdGVzIGFsbCB0eXBlcyB3aGljaCB3ZSBjYW4gcXVlcnkuXG4gKlxuICogSWRlYWxseSB3ZSB3YW50IHRvIHVzZSBkZWNvcmF0b3JzIHdoZW4gZGVhbGluZyB3aXRoIGNsaWVudCBzaWRlIHR5cGVzY3JpcHQgY2xhc3MuIGJ1dCBmb3IgY2FzZXNcbiAqIHdoZXJlIFJ1bGVzIHdpbGwgYmUgbG9hZGVkIHVzaW5nIFJlc3QgQVBJIGFsb25nIHdpdGggdGhlIG9iamVjdCBpbnN0YW5jZSBpdHMgaW1wb3NzaWJsZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEludHJvc3BlY3Rpb25NZXRhUHJvdmlkZXIgaW1wbGVtZW50cyBWYWx1ZVF1ZXJpZWRPYnNlcnZlciB7XG4gICAgcHJpdmF0ZSBfbWV0YTogTWV0YTtcblxuICAgIG5vdGlmeShtZXRhOiBNZXRhLCBrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IHZvaWQge1xuICAgICAgICB0aGlzLl9tZXRhID0gbWV0YTtcbiAgICAgICAgbGV0IG15T2JqZWN0O1xuXG4gICAgICAgIGxldCBjb21wb25lbnRSZWdpc3RyeTogQ29tcG9uZW50UmVnaXN0cnkgPSAoPE9iamVjdE1ldGE+dGhpcy5fbWV0YSkuY29tcG9uZW50UmVnaXN0cnk7XG4gICAgICAgIGFzc2VydChpc1ByZXNlbnQoY29tcG9uZW50UmVnaXN0cnkpLFxuICAgICAgICAgICAgJ0NvbXBvbmVudCByZWdpc3RyeSBpcyBub3QgaW5pdGlhbGl6ZWQnKTtcblxuICAgICAgICBsZXQgY2xheno6IFR5cGU8YW55PiA9IG51bGw7XG4gICAgICAgIGlmIChpc1N0cmluZyh2YWx1ZSkgJiYgKGNsYXp6ID0gY29tcG9uZW50UmVnaXN0cnkubmFtZVRvVHlwZS5nZXQodmFsdWUpKVxuICAgICAgICAgICAgJiYgaXNQcmVzZW50KGNsYXp6KSkge1xuICAgICAgICAgICAgbXlPYmplY3QgPSBuZXcgY2xhenooKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0JsYW5rKGNsYXp6KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYXNzZXJ0KE1ldGEuY2xhc3NOYW1lKG15T2JqZWN0KSA9PT0gdmFsdWUsXG4gICAgICAgICAgICAnVHJ5aW5nIHRvIHByb2Nlc3MgYW5kIHJlZ2lzdGVyIGEgY2xhc3MgdGhhdCBkb2VzIG5vdCBleGlzdHMgb24gQ29udGV4dCcpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyUnVsZXNGb3JDbGFzcyhteU9iamVjdCwgdmFsdWUpO1xuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZWdpc3RlclJ1bGVzRm9yQ2xhc3Mob2JqZWN0OiBhbnksIGNsYXNzTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX21ldGEua2V5RGF0YShPYmplY3RNZXRhLktleUNsYXNzKS5zZXRQYXJlbnQoY2xhc3NOYW1lLCAnT2JqZWN0Jyk7XG5cbiAgICAgICAgdGhpcy5fbWV0YS5iZWdpblJ1bGVTZXQoY2xhc3NOYW1lKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IHNlbGVjdG9yczogQXJyYXk8U2VsZWN0b3I+ID0gW25ldyBTZWxlY3RvcihPYmplY3RNZXRhLktleUNsYXNzLCBjbGFzc05hbWUpXTtcbiAgICAgICAgICAgIGxldCBwcm9wZXJ0eU1hcCA9IHRoaXMuX21ldGEubmV3UHJvcGVydGllc01hcCgpO1xuICAgICAgICAgICAgc2VsZWN0b3JzWzBdLmlzRGVjbCA9IHRydWU7XG5cbiAgICAgICAgICAgIGxldCBydWxlOiBSdWxlID0gbmV3IFJ1bGUoc2VsZWN0b3JzLCBwcm9wZXJ0eU1hcCwgT2JqZWN0TWV0YS5DbGFzc1J1bGVQcmlvcml0eSk7XG4gICAgICAgICAgICB0aGlzLl9tZXRhLmFkZFJ1bGUocnVsZSk7XG5cbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJSdWxlc0ZvckZpZWxkcyhvYmplY3QsIGNsYXNzTmFtZSk7XG5cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMuX21ldGEuZW5kUnVsZVNldCgpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBwcml2YXRlIHJlZ2lzdGVyUnVsZXNGb3JGaWVsZHMob2JqZWN0OiBhbnksIGNsYXNzTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIC8vIHRvZG86IENhbiB3ZSBzb21laG93IHV0aWxpemUgZGVjb3JhdG9ycz8gTWF5YmUgZm9yIGxvY2FsIHR5cGVzY3JpcHQgZGVmaW5lZCBvYmplY3QsIGJ1dFxuICAgICAgICAvLyBub3Qgb2JqZWN0cyBsb2FkZWQgYXMganNvbiBmcm9tIHJlc3QgQVBJXG4gICAgICAgIGFzc2VydChpc1ByZXNlbnQob2JqZWN0WyckcHJvdG8nXSksXG4gICAgICAgICAgICAnQ2Fubm90IHJlZ2lzdGVyIGZpZWxkcyB3aXRob3V0IGEgJHByb3RvIG1ldGhvZCB0aGF0IHdpbGwgZXhwb3NlIGFsbCB0aGUgZmllbGRzJyk7XG4gICAgICAgIGxldCBpbnN0YW5jZTogYW55ID0gb2JqZWN0WyckcHJvdG8nXSgpO1xuICAgICAgICBsZXQgZmllbGROYW1lcyA9IE9iamVjdC5rZXlzKGluc3RhbmNlKTtcblxuICAgICAgICBsZXQgcmFuayA9IDA7XG4gICAgICAgIGZvciAobGV0IG5hbWUgb2YgZmllbGROYW1lcykge1xuICAgICAgICAgICAgLy8gdG9kbzogY2hlY2s9PiAgY2FuIHdlIHJlbHkgb24gdGhpcyA/XG4gICAgICAgICAgICBsZXQgdHlwZSA9IGluc3RhbmNlW25hbWVdLmNvbnN0cnVjdG9yLm5hbWU7XG5cbiAgICAgICAgICAgIGxldCBwcm9wZXJ0aWVzID0gbmV3IE1hcDxzdHJpbmcsIGFueT4oKTtcblxuICAgICAgICAgICAgcHJvcGVydGllcy5zZXQoT2JqZWN0TWV0YS5LZXlGaWVsZCwgbmFtZSk7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzLnNldChPYmplY3RNZXRhLktleVR5cGUsIHR5cGUpO1xuXG4gICAgICAgICAgICBwcm9wZXJ0aWVzLnNldChPYmplY3RNZXRhLktleVZpc2libGUsIHRydWUpO1xuXG4gICAgICAgICAgICBpZiAoaXNBcnJheShpbnN0YW5jZVtuYW1lXSkpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnQoaW5zdGFuY2VbbmFtZV0ubGVuZ3RoID4gMCxcbiAgICAgICAgICAgICAgICAgICAgJyBDYW5ub3QgcmVnaXN0ZXIgdHlwZVthcnJheV0gYW5kIGl0cyB0eXBlIHdpdGhvdXQgcHJvcGVybHkgaW5pdGlhbGl6ZWQgJyArXG4gICAgICAgICAgICAgICAgICAgICdwcm90b3R5cGUnKTtcbiAgICAgICAgICAgICAgICBsZXQgaXRlbSA9IGluc3RhbmNlW25hbWVdWzBdO1xuICAgICAgICAgICAgICAgIGxldCBjb2xsZWN0aW9uRWxlbWVudFR5cGUgPSBpdGVtLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5zZXQoT2JqZWN0TWV0YS5LZXlFbGVtZW50VHlwZSwgY29sbGVjdGlvbkVsZW1lbnRUeXBlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHNlbGVjdG9yTGlzdDogQXJyYXk8U2VsZWN0b3I+ID0gW1xuICAgICAgICAgICAgICAgIG5ldyBTZWxlY3RvcihPYmplY3RNZXRhLktleUNsYXNzLCBjbGFzc05hbWUpLFxuICAgICAgICAgICAgICAgIG5ldyBTZWxlY3RvcihPYmplY3RNZXRhLktleUZpZWxkLCBuYW1lKSxcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBzZWxlY3Rvckxpc3RbMV0uaXNEZWNsID0gdHJ1ZTtcbiAgICAgICAgICAgIHByb3BlcnRpZXMuc2V0KE9iamVjdE1ldGEuS2V5UmFuaywgKHJhbmsrKyArIDEpICogMTApO1xuXG4gICAgICAgICAgICBsZXQgcnVsZTogUnVsZSA9IG5ldyBSdWxlKHNlbGVjdG9yTGlzdCwgcHJvcGVydGllcywgT2JqZWN0TWV0YS5DbGFzc1J1bGVQcmlvcml0eSk7XG4gICAgICAgICAgICB0aGlzLl9tZXRhLmFkZFJ1bGUocnVsZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogUmVnaXN0ZXJzIHNwZWNpYWxzIHR5cGVzIHRoYXQgd2UgYXJlIHJlYWQgZHVyaW5nIGludHJvc3BlY3Rpb25zXG4gKi9cbmV4cG9ydCBjbGFzcyBGaWVsZFR5cGVJbnRyb3NwZWN0aW9uTWV0YVByb3ZpZGVyIGltcGxlbWVudHMgVmFsdWVRdWVyaWVkT2JzZXJ2ZXIge1xuXG4gICAgbm90aWZ5KG1ldGE6IE1ldGEsIGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZCB7XG4gICAgICAgIC8vIHByaW50KCdGaWVsZFR5cGVJbnRyb3NwZWN0aW9uTWV0YVByb3ZpZGVyIG5vdGlmaWVkIG9mIGZpcnN0IHVzZSBvZiBmaWVsZDogICcgLCB2YWx1ZSk7XG4gICAgfVxuXG59XG5cblxuZXhwb3J0IGNsYXNzIE9iamVjdE1ldGFQcm9wZXJ0eU1hcCBleHRlbmRzIFByb3BlcnR5TWFwIHtcbiAgICBwcml2YXRlIF9maWVsZFBhdGg6IEZpZWxkUGF0aDtcblxuXG4gICAgZ2V0IGZpZWxkUGF0aCgpOiBGaWVsZFBhdGgge1xuICAgICAgICBpZiAoaXNCbGFuayh0aGlzLl9maWVsZFBhdGgpKSB7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLmdldChPYmplY3RNZXRhLktleVZhbHVlKTtcbiAgICAgICAgICAgIGxldCBmaWVsZE5hbWUgPSB0aGlzLmdldChPYmplY3RNZXRhLktleUZpZWxkKTtcblxuICAgICAgICAgICAgdGhpcy5fZmllbGRQYXRoID0gKGlzUHJlc2VudChmaWVsZE5hbWUpICYmIGlzQmxhbmsodmFsdWUpKVxuICAgICAgICAgICAgICAgID8gbmV3IEZpZWxkUGF0aChmaWVsZE5hbWUpXG4gICAgICAgICAgICAgICAgOiBPYmplY3RNZXRhLl9GaWVsZFBhdGhOdWxsTWFya2VyO1xuICAgICAgICB9XG4gICAgICAgIGxldCBpc051bGxQYXRoID0gdGhpcy5fZmllbGRQYXRoID09PSBPYmplY3RNZXRhLl9GaWVsZFBhdGhOdWxsTWFya2VyO1xuICAgICAgICByZXR1cm4gaXNOdWxsUGF0aCA/IG51bGwgOiB0aGlzLl9maWVsZFBhdGg7XG4gICAgfVxuXG4gICAgaXNGaWVsZE51bGxNYXJrZXIodmFsdWU6IEZpZWxkUGF0aCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gaXNQcmVzZW50KHZhbHVlKSAmJiB2YWx1ZS5wYXRoID09PSAnbnVsbCc7XG4gICAgfVxufVxuXG5cbmV4cG9ydCBjbGFzcyBPTVByb3BlcnR5TWVyZ2VyX1ZhbGlkIGltcGxlbWVudHMgUHJvcGVydHlNZXJnZXIsIFByb3BlcnR5TWVyZ2VySXNDaGFpbmluZyB7XG4gICAgX21ldGE6IE1ldGE7XG4gICAgaXNQcm9wTWVyZ2VySXNDaGFpbmluZ01hcms6IGJvb2xlYW4gPSB0cnVlO1xuXG5cbiAgICBtZXJnZShvcmlnOiBhbnksIG92ZXJyaWRlOiBhbnksIGlzRGVjbGFyZTogYm9vbGVhbik6IGFueSB7XG4gICAgICAgIC8vIGlmIGZpcnN0IGlzIGVycm9yIChlcnJvciBtZXNzYWdlIG9yIGZhbHNlLCBpdCB3aW5zKSwgb3RoZXJ3aXNlIHNlY29uZFxuICAgICAgICByZXR1cm4gKGlzU3RyaW5nKG92ZXJyaWRlKSB8fCAoaXNCb29sZWFuKG92ZXJyaWRlKSAmJiBCb29sZWFuV3JhcHBlci5pc0ZhbHNlKFxuICAgICAgICAgICAgb3ZlcnJpZGUpKSkgPyBvdmVycmlkZSA6IG9yaWc7XG4gICAgfVxuXG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuICdWQUxJREFURSc7XG4gICAgfVxufVxuXG5cbiIsIi8qKlxuICogIFRoaXMgaXMgZ2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0ICEhXG4gKlxuICogIEBmb3JtYXR0ZXI6b2ZmXG4gKlxuICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuZXhwb3J0IGNvbnN0IFN5c3RlbVJ1bGVzID0ge1xuIFx0XHRvc3M6XHRcdFx0W1xuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ29iamVjdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdjbGFzcyc6IHtcblx0XHRcdCAgICAgICAgJ3QnOiAnRXhwcicsXG5cdFx0XHQgICAgICAgICd2JzogJ01ldGEuY2xhc3NOYW1lKG9iamVjdCknXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnb2JqZWN0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZGVjbGFyZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdjbGFzcyc6IHtcblx0XHRcdCAgICAgICAgJ3QnOiAnRXhwcicsXG5cdFx0XHQgICAgICAgICd2JzogJ01ldGEuY2xhc3NOYW1lKG9iamVjdCknXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnb3BlcmF0aW9uJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdzZWFyY2gnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnY2xhc3MnOiB7XG5cdFx0XHQgICAgICAgICd0JzogJ0V4cHInLFxuXHRcdFx0ICAgICAgICAndic6ICd2YWx1ZXMuZ2V0KFwiY2xhc3NcIiknXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnb3BlcmF0aW9uJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6IFtcblx0XHRcdCAgICAgICAgICAnZWRpdCcsXG5cdFx0XHQgICAgICAgICAgJ2NyZWF0ZScsXG5cdFx0XHQgICAgICAgICAgJ3NlYXJjaCdcblx0XHRcdCAgICAgICAgXSxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ29wZXJhdGlvbicsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiBbXG5cdFx0XHQgICAgICAgICAgJ2VkaXQnLFxuXHRcdFx0ICAgICAgICAgICdjcmVhdGUnLFxuXHRcdFx0ICAgICAgICAgICdzZWFyY2gnXG5cdFx0XHQgICAgICAgIF0sXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2xheW91dCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdlZGl0aW5nJzogdHJ1ZVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ29wZXJhdGlvbicsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiBbXG5cdFx0XHQgICAgICAgICAgJ2VkaXQnLFxuXHRcdFx0ICAgICAgICAgICdjcmVhdGUnLFxuXHRcdFx0ICAgICAgICAgICdzZWFyY2gnXG5cdFx0XHQgICAgICAgIF0sXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdvcGVyYXRpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogW1xuXHRcdFx0ICAgICAgICAgICdlZGl0Jyxcblx0XHRcdCAgICAgICAgICAnY3JlYXRlJyxcblx0XHRcdCAgICAgICAgICAnc2VhcmNoJ1xuXHRcdFx0ICAgICAgICBdLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdjbGFzcycsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdlZGl0aW5nJzogdHJ1ZVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ29wZXJhdGlvbicsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiBbXG5cdFx0XHQgICAgICAgICAgJ2VkaXQnLFxuXHRcdFx0ICAgICAgICAgICdjcmVhdGUnLFxuXHRcdFx0ICAgICAgICAgICdzZWFyY2gnXG5cdFx0XHQgICAgICAgIF0sXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdvcGVyYXRpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogW1xuXHRcdFx0ICAgICAgICAgICdlZGl0Jyxcblx0XHRcdCAgICAgICAgICAnY3JlYXRlJyxcblx0XHRcdCAgICAgICAgICAnc2VhcmNoJ1xuXHRcdFx0ICAgICAgICBdLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdlZGl0aW5nJzogdHJ1ZVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ29wZXJhdGlvbicsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiBbXG5cdFx0XHQgICAgICAgICAgJ2VkaXQnLFxuXHRcdFx0ICAgICAgICAgICdjcmVhdGUnLFxuXHRcdFx0ICAgICAgICAgICdzZWFyY2gnXG5cdFx0XHQgICAgICAgIF0sXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdvcGVyYXRpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogW1xuXHRcdFx0ICAgICAgICAgICdlZGl0Jyxcblx0XHRcdCAgICAgICAgICAnY3JlYXRlJyxcblx0XHRcdCAgICAgICAgICAnc2VhcmNoJ1xuXHRcdFx0ICAgICAgICBdLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdhY3Rpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnZWRpdGluZyc6IHRydWVcblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdvcGVyYXRpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogW1xuXHRcdFx0ICAgICAgICAgICdlZGl0Jyxcblx0XHRcdCAgICAgICAgICAnY3JlYXRlJyxcblx0XHRcdCAgICAgICAgICAnc2VhcmNoJ1xuXHRcdFx0ICAgICAgICBdLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnb3BlcmF0aW9uJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6IFtcblx0XHRcdCAgICAgICAgICAndmlldycsXG5cdFx0XHQgICAgICAgICAgJ2xpc3QnXG5cdFx0XHQgICAgICAgIF0sXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdvcGVyYXRpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogW1xuXHRcdFx0ICAgICAgICAgICd2aWV3Jyxcblx0XHRcdCAgICAgICAgICAnbGlzdCdcblx0XHRcdCAgICAgICAgXSxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnbGF5b3V0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ2VkaXRpbmcnOiBmYWxzZVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ29wZXJhdGlvbicsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiBbXG5cdFx0XHQgICAgICAgICAgJ3ZpZXcnLFxuXHRcdFx0ICAgICAgICAgICdsaXN0J1xuXHRcdFx0ICAgICAgICBdLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnb3BlcmF0aW9uJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6IFtcblx0XHRcdCAgICAgICAgICAndmlldycsXG5cdFx0XHQgICAgICAgICAgJ2xpc3QnXG5cdFx0XHQgICAgICAgIF0sXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NsYXNzJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ2VkaXRpbmcnOiBmYWxzZVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ29wZXJhdGlvbicsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiBbXG5cdFx0XHQgICAgICAgICAgJ3ZpZXcnLFxuXHRcdFx0ICAgICAgICAgICdsaXN0J1xuXHRcdFx0ICAgICAgICBdLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnb3BlcmF0aW9uJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6IFtcblx0XHRcdCAgICAgICAgICAndmlldycsXG5cdFx0XHQgICAgICAgICAgJ2xpc3QnXG5cdFx0XHQgICAgICAgIF0sXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ2VkaXRpbmcnOiBmYWxzZVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ29wZXJhdGlvbicsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiBbXG5cdFx0XHQgICAgICAgICAgJ3ZpZXcnLFxuXHRcdFx0ICAgICAgICAgICdsaXN0J1xuXHRcdFx0ICAgICAgICBdLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnb3BlcmF0aW9uJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6IFtcblx0XHRcdCAgICAgICAgICAndmlldycsXG5cdFx0XHQgICAgICAgICAgJ2xpc3QnXG5cdFx0XHQgICAgICAgIF0sXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2FjdGlvbicsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdlZGl0aW5nJzogZmFsc2Vcblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdvcGVyYXRpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogW1xuXHRcdFx0ICAgICAgICAgICd2aWV3Jyxcblx0XHRcdCAgICAgICAgICAnbGlzdCdcblx0XHRcdCAgICAgICAgXSxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ3Zpc2libGUnOiB7XG5cdFx0XHQgICAgICAgICd0JzogJ1NEVycsXG5cdFx0XHQgICAgICAgICd2JzogJyFwcm9wZXJ0aWVzLmdldChcImhpZGRlblwiKSdcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2VkaXRpbmcnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogdHJ1ZSxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ2VkaXRhYmxlJzogdHJ1ZVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZWRpdGluZycsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiBmYWxzZSxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ2VkaXRhYmxlJzogZmFsc2Vcblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdjbGFzcycsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdjbGFzcycsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdmaXZlWm9uZXMnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdmaXZlWm9uZUxheW91dCc6IHRydWUsXG5cdFx0XHQgICAgICAnem9uZXMnOiBbXG5cdFx0XHQgICAgICAgICd6TGVmdCcsXG5cdFx0XHQgICAgICAgICd6TWlkZGxlJyxcblx0XHRcdCAgICAgICAgJ3pSaWdodCcsXG5cdFx0XHQgICAgICAgICd6VG9wJyxcblx0XHRcdCAgICAgICAgJ3pCb3R0b20nLFxuXHRcdFx0ICAgICAgICAnekRldGFpbCdcblx0XHRcdCAgICAgIF1cblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdjbGFzcycsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdjbGFzcycsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdvbmVab25lJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnem9uZXMnOiBbXG5cdFx0XHQgICAgICAgICd6TGVmdCcsXG5cdFx0XHQgICAgICAgICd6RGV0YWlsJ1xuXHRcdFx0ICAgICAgXVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NsYXNzJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NsYXNzJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ3RhYmxlWm9uZXMnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICd6b25lcyc6IFtcblx0XHRcdCAgICAgICAgJ3pNYWluJyxcblx0XHRcdCAgICAgICAgJ3pMZWZ0Jyxcblx0XHRcdCAgICAgICAgJ3pSaWdodCcsXG5cdFx0XHQgICAgICAgICd6VG9wJyxcblx0XHRcdCAgICAgICAgJ3pCb3R0b20nLFxuXHRcdFx0ICAgICAgICAnekRldGFpbCdcblx0XHRcdCAgICAgIF1cblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdjbGFzcycsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdjbGFzcycsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ29wZXJhdGlvbicsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiBbXG5cdFx0XHQgICAgICAgICAgJ2NyZWF0ZScsXG5cdFx0XHQgICAgICAgICAgJ2VkaXQnLFxuXHRcdFx0ICAgICAgICAgICd2aWV3Jyxcblx0XHRcdCAgICAgICAgICAnc2VhcmNoJ1xuXHRcdFx0ICAgICAgICBdLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAndHJhaXQnOiAnZml2ZVpvbmVzJ1xuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NsYXNzJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NsYXNzJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnb3BlcmF0aW9uJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdsaXN0Jyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ3RyYWl0JzogJ3RhYmxlWm9uZXMnXG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnY2xhc3MnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXRHcm91cCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnRm9ybVpvbmVzJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXRHcm91cCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnRm9ybVpvbmVzJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnZml2ZVpvbmVzJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXRHcm91cCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnRm9ybVpvbmVzJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXRHcm91cCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnRm9ybVpvbmVzJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnb25lWm9uZScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0R3JvdXAnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0Zvcm1ab25lcycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHlwZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdjb21wb25lbnQnOiAnU3RyaW5nQ29tcG9uZW50Jyxcblx0XHRcdCAgICAgICdiaW5kaW5ncyc6IHtcblx0XHRcdCAgICAgICAgJ3ZhbHVlJzoge1xuXHRcdFx0ICAgICAgICAgICd0JzogJ0NGUCcsXG5cdFx0XHQgICAgICAgICAgJ3YnOiAndmFsdWUnXG5cdFx0XHQgICAgICAgIH1cblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ2Jvb2xlYW4nLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0eXBlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdib29sZWFuJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZWRpdGFibGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnY29tcG9uZW50JzogJ0NoZWNrYm94J1xuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHlwZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnYm9vbGVhbicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ051bWJlcicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdiaW5kaW5ncyc6IHtcblx0XHRcdCAgICAgICAgJ2Zvcm1hdHRlcic6IHtcblx0XHRcdCAgICAgICAgICAndCc6ICdDRlAnLFxuXHRcdFx0ICAgICAgICAgICd2JzogJ2Zvcm1hdHRlcnMuaW50ZWdlcidcblx0XHRcdCAgICAgICAgfVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHlwZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnTnVtYmVyJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZWRpdGFibGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnY29tcG9uZW50JzogJ0lucHV0RmllbGRDb21wb25lbnQnXG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0eXBlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdOdW1iZXInLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0eXBlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdOdW1iZXInLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdvcGVyYXRpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ3NlYXJjaCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdiaW5kaW5ncyc6IHtcblx0XHRcdCAgICAgICAgJ2Zvcm1hdHRlcic6IHtcblx0XHRcdCAgICAgICAgICAndCc6ICdDRlAnLFxuXHRcdFx0ICAgICAgICAgICd2JzogJ2Zvcm1hdHRlcnMuYmxhbmtOdWxsLmludGVnZXInXG5cdFx0XHQgICAgICAgIH1cblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ051bWJlcicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0RhdGUnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnY29tcG9uZW50JzogJ0RhdGVBbmRUaW1lQ29tcG9uZW50Jyxcblx0XHRcdCAgICAgICdiaW5kaW5ncyc6IHtcblx0XHRcdCAgICAgICAgJ2Zvcm1hdHRlcic6ICdzaG9ydERhdGUnLFxuXHRcdFx0ICAgICAgICAnc2hvd1RpbWUnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHlwZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnRGF0ZScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpdmVab25lTGF5b3V0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6IHRydWUsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0RhdGUnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0eXBlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdEYXRlJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ2RhdGVUaW1lJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdlZGl0YWJsZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdiaW5kaW5ncyc6IHtcblx0XHRcdCAgICAgICAgJ2Zvcm1hdHRlcic6ICdkYXRlVGltZScsXG5cdFx0XHQgICAgICAgICdzaG93VGltZSc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0RhdGUnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0eXBlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdqYXZhLmxhbmcuRW51bScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ2phdmEubGFuZy5FbnVtJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZWRpdGFibGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnY29tcG9uZW50JzogJ0dlbmVyaWNDaG9vc2VyQ29tcG9uZW50Jyxcblx0XHRcdCAgICAgICdiaW5kaW5ncyc6IHtcblx0XHRcdCAgICAgICAgJ2Rlc3RpbmF0aW9uQ2xhc3MnOiB7XG5cdFx0XHQgICAgICAgICAgJ3QnOiAnRXhwcicsXG5cdFx0XHQgICAgICAgICAgJ3YnOiAndHlwZSdcblx0XHRcdCAgICAgICAgfSxcblx0XHRcdCAgICAgICAgJ2Rpc3BsYXlLZXknOiAnbmFtZScsXG5cdFx0XHQgICAgICAgICdmb3JtYXR0ZXInOiB7XG5cdFx0XHQgICAgICAgICAgJ3QnOiAnQ0ZQJyxcblx0XHRcdCAgICAgICAgICAndic6ICdmb3JtYXR0ZXJzLmlkZW50aWZpZXInXG5cdFx0XHQgICAgICAgIH0sXG5cdFx0XHQgICAgICAgICdrZXknOiB7XG5cdFx0XHQgICAgICAgICAgJ3QnOiAnRXhwcicsXG5cdFx0XHQgICAgICAgICAgJ3YnOiAnZmllbGQnXG5cdFx0XHQgICAgICAgIH0sXG5cdFx0XHQgICAgICAgICdvYmplY3QnOiB7XG5cdFx0XHQgICAgICAgICAgJ3QnOiAnRXhwcicsXG5cdFx0XHQgICAgICAgICAgJ3YnOiAnb2JqZWN0J1xuXHRcdFx0ICAgICAgICB9XG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0eXBlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdqYXZhLmxhbmcuRW51bScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2VkaXRhYmxlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnb3BlcmF0aW9uJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6IFtcblx0XHRcdCAgICAgICAgICAnc2VhcmNoJyxcblx0XHRcdCAgICAgICAgICAnbGlzdCdcblx0XHRcdCAgICAgICAgXSxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ2JpbmRpbmdzJzoge1xuXHRcdFx0ICAgICAgICAndHlwZSc6ICdQb3B1cCdcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ2phdmEubGFuZy5FbnVtJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZWRpdGFibGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0eXBlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdqYXZhLmxhbmcuRW51bScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogW1xuXHRcdFx0ICAgICAgICAgICdBcnJheScsXG5cdFx0XHQgICAgICAgICAgJ1NldCdcblx0XHRcdCAgICAgICAgXSxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHlwZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiBbXG5cdFx0XHQgICAgICAgICAgJ0FycmF5Jyxcblx0XHRcdCAgICAgICAgICAnU2V0J1xuXHRcdFx0ICAgICAgICBdLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnZW51bScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZWRpdGFibGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnY29tcG9uZW50JzogJ0dlbmVyaWNDaG9vc2VyQ29tcG9uZW50Jyxcblx0XHRcdCAgICAgICdiaW5kaW5ncyc6IHtcblx0XHRcdCAgICAgICAgJ211bHRpc2VsZWN0JzogdHJ1ZSxcblx0XHRcdCAgICAgICAgJ2Rlc3RpbmF0aW9uQ2xhc3MnOiB7XG5cdFx0XHQgICAgICAgICAgJ3QnOiAnRXhwcicsXG5cdFx0XHQgICAgICAgICAgJ3YnOiAncHJvcGVydGllcy5nZXQoXCJlbnVtQ2xhc3NcIiknXG5cdFx0XHQgICAgICAgIH0sXG5cdFx0XHQgICAgICAgICdkaXNwbGF5S2V5JzogJ25hbWUnLFxuXHRcdFx0ICAgICAgICAnZm9ybWF0dGVyJzoge1xuXHRcdFx0ICAgICAgICAgICd0JzogJ0NGUCcsXG5cdFx0XHQgICAgICAgICAgJ3YnOiAnZm9ybWF0dGVycy5pZGVudGlmaWVyJ1xuXHRcdFx0ICAgICAgICB9LFxuXHRcdFx0ICAgICAgICAna2V5Jzoge1xuXHRcdFx0ICAgICAgICAgICd0JzogJ0V4cHInLFxuXHRcdFx0ICAgICAgICAgICd2JzogJ2ZpZWxkJ1xuXHRcdFx0ICAgICAgICB9LFxuXHRcdFx0ICAgICAgICAnb2JqZWN0Jzoge1xuXHRcdFx0ICAgICAgICAgICd0JzogJ0V4cHInLFxuXHRcdFx0ICAgICAgICAgICd2JzogJ29iamVjdCdcblx0XHRcdCAgICAgICAgfVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHlwZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiBbXG5cdFx0XHQgICAgICAgICAgJ0FycmF5Jyxcblx0XHRcdCAgICAgICAgICAnU2V0J1xuXHRcdFx0ICAgICAgICBdLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0eXBlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6IFtcblx0XHRcdCAgICAgICAgICAnQXJyYXknLFxuXHRcdFx0ICAgICAgICAgICdTZXQnXG5cdFx0XHQgICAgICAgIF0sXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ29wZXJhdGlvbicsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiBbXG5cdFx0XHQgICAgICAgICAgJ3NlYXJjaCcsXG5cdFx0XHQgICAgICAgICAgJ2xpc3QnXG5cdFx0XHQgICAgICAgIF0sXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICd2aXNpYmxlJzogZmFsc2Vcblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogW1xuXHRcdFx0ICAgICAgICAgICdBcnJheScsXG5cdFx0XHQgICAgICAgICAgJ1NldCdcblx0XHRcdCAgICAgICAgXSxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHlwZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiBbXG5cdFx0XHQgICAgICAgICAgJ0FycmF5Jyxcblx0XHRcdCAgICAgICAgICAnU2V0J1xuXHRcdFx0ICAgICAgICBdLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnb3duZWRUb01hbnknLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdjb21wb25lbnQnOiAnTWV0YURldGFpbFRhYmxlJyxcblx0XHRcdCAgICAgICdhZnRlcic6ICd6RGV0YWlsJ1xuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHlwZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiBbXG5cdFx0XHQgICAgICAgICAgJ0FycmF5Jyxcblx0XHRcdCAgICAgICAgICAnU2V0J1xuXHRcdFx0ICAgICAgICBdLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0eXBlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdbQicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ1tCJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZWRpdGFibGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnY29tcG9uZW50JzogJ0ZpbGVVcGxvYWRDaG9vc2VyJyxcblx0XHRcdCAgICAgICdiaW5kaW5ncyc6IHtcblx0XHRcdCAgICAgICAgJ2J5dGVzJzoge1xuXHRcdFx0ICAgICAgICAgICd0JzogJ0NGUCcsXG5cdFx0XHQgICAgICAgICAgJ3YnOiAndmFsdWUnXG5cdFx0XHQgICAgICAgIH1cblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ1tCJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHlwZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnW0InLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdlZGl0YWJsZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiBmYWxzZSxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ2JpbmRpbmdzJzoge1xuXHRcdFx0ICAgICAgICAndmFsdWUnOiB7XG5cdFx0XHQgICAgICAgICAgJ3QnOiAnRXhwcicsXG5cdFx0XHQgICAgICAgICAgJ3YnOiAndmFsdWUgPyAoXCJcIiArIHZhbHVlLmxlbmd0aCArIFwiIGJ5dGVzXCIpIDogXCIobm9uZSlcIidcblx0XHRcdCAgICAgICAgfVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHlwZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnW0InLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0eXBlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdGaWxlJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHlwZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnRmlsZScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2VkaXRhYmxlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ2NvbXBvbmVudCc6ICdGaWxlVXBsb2FkQ2hvb3NlcicsXG5cdFx0XHQgICAgICAnYmluZGluZ3MnOiB7XG5cdFx0XHQgICAgICAgICdmaWxlJzoge1xuXHRcdFx0ICAgICAgICAgICd0JzogJ0NGUCcsXG5cdFx0XHQgICAgICAgICAgJ3YnOiAndmFsdWUnXG5cdFx0XHQgICAgICAgIH1cblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0ZpbGUnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0eXBlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdGaWxlJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZWRpdGFibGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogZmFsc2UsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdiaW5kaW5ncyc6IHtcblx0XHRcdCAgICAgICAgJ3ZhbHVlJzoge1xuXHRcdFx0ICAgICAgICAgICd0JzogJ0V4cHInLFxuXHRcdFx0ICAgICAgICAgICd2JzogJ3ZhbHVlID8gdmFsdWUubmFtZSA6IFwiKG5vbmUpXCInXG5cdFx0XHQgICAgICAgIH1cblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0ZpbGUnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0eXBlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdTdHJpbmcnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0eXBlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdTdHJpbmcnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdlZGl0YWJsZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdjb21wb25lbnQnOiAnSW5wdXRGaWVsZENvbXBvbmVudCdcblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ1N0cmluZycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ1N0cmluZycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdsb25ndGV4dCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ2FmdGVyJzogJ3pCb3R0b20nXG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0eXBlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdTdHJpbmcnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnbG9uZ3RleHQnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2VkaXRhYmxlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ2NvbXBvbmVudCc6ICdUZXh0QXJlYUNvbXBvbmVudCcsXG5cdFx0XHQgICAgICAnYmluZGluZ3MnOiB7XG5cdFx0XHQgICAgICAgICdyb3dzJzogMTAsXG5cdFx0XHQgICAgICAgICdjb2xzJzogNjBcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ1N0cmluZycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdsb25ndGV4dCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHlwZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnU3RyaW5nJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ2xvbmd0ZXh0Jyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdvcGVyYXRpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogW1xuXHRcdFx0ICAgICAgICAgICdzZWFyY2gnLFxuXHRcdFx0ICAgICAgICAgICdsaXN0J1xuXHRcdFx0ICAgICAgICBdLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAndmlzaWJsZSc6IGZhbHNlXG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0eXBlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdTdHJpbmcnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnbG9uZ3RleHQnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ1N0cmluZycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ1N0cmluZycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdyaWNodGV4dCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ2JpbmRpbmdzJzoge1xuXHRcdFx0ICAgICAgICAnZXNjYXBlVW5zYWZlSHRtbCc6IHRydWVcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICAnYWZ0ZXInOiAnekJvdHRvbSdcblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ1N0cmluZycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdyaWNodGV4dCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZWRpdGFibGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnY29tcG9uZW50JzogJ1JpY2hUZXh0QXJlYScsXG5cdFx0XHQgICAgICAnYmluZGluZ3MnOiB7XG5cdFx0XHQgICAgICAgICdyb3dzJzogMTAsXG5cdFx0XHQgICAgICAgICdjb2xzJzogNjBcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ1N0cmluZycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdyaWNodGV4dCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHlwZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnU3RyaW5nJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ3JpY2h0ZXh0Jyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdvcGVyYXRpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ3NlYXJjaCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdhZnRlcic6ICd6Tm9uZSdcblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ1N0cmluZycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdyaWNodGV4dCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHlwZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnU3RyaW5nJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ3JpY2h0ZXh0Jyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdvcGVyYXRpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ2xpc3QnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnZWRpdGFibGUnOiBmYWxzZSxcblx0XHRcdCAgICAgICdhZnRlcic6ICd6RGV0YWlsJ1xuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHlwZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnU3RyaW5nJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ3JpY2h0ZXh0Jyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0eXBlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdTdHJpbmcnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0eXBlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdTdHJpbmcnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnc2VjcmV0Jyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnYmluZGluZ3MnOiB7XG5cdFx0XHQgICAgICAgICdmb3JtYXR0ZXInOiB7XG5cdFx0XHQgICAgICAgICAgJ3QnOiAnQ0ZQJyxcblx0XHRcdCAgICAgICAgICAndic6ICdmb3JtYXR0ZXJzLmhpZGRlblBhc3N3b3JkJ1xuXHRcdFx0ICAgICAgICB9XG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0eXBlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdTdHJpbmcnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnc2VjcmV0Jyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdlZGl0YWJsZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdjb21wb25lbnQnOiAnQVdQYXNzd29yZEZpZWxkJyxcblx0XHRcdCAgICAgICdiaW5kaW5ncyc6IHt9XG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0eXBlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdTdHJpbmcnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnc2VjcmV0Jyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0eXBlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdTdHJpbmcnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnc2VjcmV0Jyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdvcGVyYXRpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogW1xuXHRcdFx0ICAgICAgICAgICdzZWFyY2gnLFxuXHRcdFx0ICAgICAgICAgICdsaXN0J1xuXHRcdFx0ICAgICAgICBdLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAndmlzaWJsZSc6IGZhbHNlXG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0eXBlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdTdHJpbmcnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnc2VjcmV0Jyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0eXBlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdTdHJpbmcnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0eXBlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdTdHJpbmcnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAndHJ1bmNhdGVkJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ2NvbXBvbmVudCc6ICdUcnVuY2F0ZVN0cmluZycsXG5cdFx0XHQgICAgICAnYmluZGluZ3MnOiB7XG5cdFx0XHQgICAgICAgICdzaXplJzogMTBcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ1N0cmluZycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0JpbmFyeScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3R5cGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0JpbmFyeScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdpbWFnZURhdGEnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdjb250ZW50VHlwZSc6ICdpbWFnZS9qcGVnJ1xuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHlwZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnQmluYXJ5Jyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ2ltYWdlRGF0YScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZWRpdGFibGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogZmFsc2UsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdjb21wb25lbnQnOiAnQVdJbWFnZURhdGEnLFxuXHRcdFx0ICAgICAgJ2JpbmRpbmdzJzoge1xuXHRcdFx0ICAgICAgICAnYnl0ZXMnOiB7XG5cdFx0XHQgICAgICAgICAgJ3QnOiAnQ0ZQJyxcblx0XHRcdCAgICAgICAgICAndic6ICd2YWx1ZSdcblx0XHRcdCAgICAgICAgfSxcblx0XHRcdCAgICAgICAgJ2NvbnRlbnRUeXBlJzoge1xuXHRcdFx0ICAgICAgICAgICd0JzogJ0V4cHInLFxuXHRcdFx0ICAgICAgICAgICd2JzogJ0NvbnRlbnRUeXBlVXRpbHMuY29udGVudFR5cGVOYW1lZChwcm9wZXJ0aWVzLmdldChcImNvbnRlbnRUeXBlXCIpKSdcblx0XHRcdCAgICAgICAgfVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHlwZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnQmluYXJ5Jyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ2ltYWdlRGF0YScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHlwZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnQmluYXJ5Jyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ2ltYWdlRGF0YScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZWRpdGFibGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnYmluZGluZ3MnOiB7XG5cdFx0XHQgICAgICAgICdhd2NvbnRlbnRMYXlvdXRzJzoge1xuXHRcdFx0ICAgICAgICAgICdfbWFpbic6ICdfaW1nVXBsb2FkUHJldmlldydcblx0XHRcdCAgICAgICAgfVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHlwZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnQmluYXJ5Jyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ2ltYWdlRGF0YScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHlwZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnQmluYXJ5Jyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHlwZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnTW9uZXknLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnY29tcG9uZW50JzogJ0N1cnJlbmN5Q29tcG9uZW50Jyxcblx0XHRcdCAgICAgICdiaW5kaW5ncyc6IHtcblx0XHRcdCAgICAgICAgJ21vbmV5Jzoge1xuXHRcdFx0ICAgICAgICAgICd0JzogJ0NGUCcsXG5cdFx0XHQgICAgICAgICAgJ3YnOiAndmFsdWUnXG5cdFx0XHQgICAgICAgIH0sXG5cdFx0XHQgICAgICAgICdjdXJyZW5jaWVzJzoge1xuXHRcdFx0ICAgICAgICAgICd0JzogJ0V4cHInLFxuXHRcdFx0ICAgICAgICAgICd2JzogJ3Byb3BlcnRpZXMuZ2V0KFwiY3VycmVuY2llc1wiKSdcblx0XHRcdCAgICAgICAgfVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnbGF5b3V0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdfaW1nVXBsb2FkUHJldmlldycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICd3cmFwcGVyQ29tcG9uZW50JzogJ01ldGFDb250ZXh0Jyxcblx0XHRcdCAgICAgICdjb21wb25lbnQnOiAnQVdJbWFnZURhdGEnLFxuXHRcdFx0ICAgICAgJ3dyYXBwZXJCaW5kaW5ncyc6IHtcblx0XHRcdCAgICAgICAgJ3Njb3BlS2V5JzogJ2ZpZWxkJ1xuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgICdiaW5kaW5ncyc6IHtcblx0XHRcdCAgICAgICAgJ2J5dGVzJzoge1xuXHRcdFx0ICAgICAgICAgICd0JzogJ0NGUCcsXG5cdFx0XHQgICAgICAgICAgJ3YnOiAndmFsdWUnXG5cdFx0XHQgICAgICAgIH0sXG5cdFx0XHQgICAgICAgICdzdHlsZSc6ICd3aWR0aDoxMDBweCcsXG5cdFx0XHQgICAgICAgICdjb250ZW50VHlwZSc6IHtcblx0XHRcdCAgICAgICAgICAndCc6ICdFeHByJyxcblx0XHRcdCAgICAgICAgICAndic6ICdDb250ZW50VHlwZVV0aWxzLmNvbnRlbnRUeXBlTmFtZWQocHJvcGVydGllcy5nZXQoXCJjb250ZW50VHlwZVwiKSknXG5cdFx0XHQgICAgICAgIH1cblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdkZXJpdmVkJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnZWRpdGFibGUnOiBmYWxzZVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ2Rlcml2ZWQnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2VkaXRpbmcnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnYWZ0ZXInOiAnek5vbmUnXG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnZGVyaXZlZCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ3NlYXJjaGFibGUnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdzZWFyY2hhYmxlJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdvcGVyYXRpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ3NlYXJjaCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICd2aXNpYmxlJzogdHJ1ZSxcblx0XHRcdCAgICAgICdlZGl0YWJsZSc6IHtcblx0XHRcdCAgICAgICAgJ3QnOiAnT1YnLFxuXHRcdFx0ICAgICAgICAndic6ICd0cnVlJ1xuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgICdhZnRlcic6IHtcblx0XHRcdCAgICAgICAgJ3QnOiAnT1YnLFxuXHRcdFx0ICAgICAgICAndic6ICdudWxsJ1xuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ3NlYXJjaGFibGUnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdyZXF1aXJlZCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ3JlcXVpcmVkJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdvcGVyYXRpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogW1xuXHRcdFx0ICAgICAgICAgICdlZGl0Jyxcblx0XHRcdCAgICAgICAgICAnY3JlYXRlJ1xuXHRcdFx0ICAgICAgICBdLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAncmVxdWlyZWQnOiB0cnVlXG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAncmVxdWlyZWQnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ29wZXJhdGlvbicsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiBbXG5cdFx0XHQgICAgICAgICAgJ2VkaXQnLFxuXHRcdFx0ICAgICAgICAgICdjcmVhdGUnXG5cdFx0XHQgICAgICAgIF0sXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ29iamVjdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICd2YWxpZCc6IHtcblx0XHRcdCAgICAgICAgJ3QnOiAnRXhwcicsXG5cdFx0XHQgICAgICAgICd2JzogJygodmFsdWUgIT0gdW5kZWZpbmVkKSAmJiAodmFsdWUgIT0gbnVsbCkpID8gdHJ1ZSA6IFwiQW5zd2VyIHJlcXVpcmVkXCInXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAncmVxdWlyZWQnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ29wZXJhdGlvbicsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiBbXG5cdFx0XHQgICAgICAgICAgJ2VkaXQnLFxuXHRcdFx0ICAgICAgICAgICdjcmVhdGUnXG5cdFx0XHQgICAgICAgIF0sXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdyZXF1aXJlZCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ2xpc3QnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdsaXN0Jyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdlZGl0YWJsZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdjb21wb25lbnQnOiAnR2VuZXJpY0Nob29zZXJDb21wb25lbnQnLFxuXHRcdFx0ICAgICAgJ2JpbmRpbmdzJzoge1xuXHRcdFx0ICAgICAgICAnbGlzdCc6IHtcblx0XHRcdCAgICAgICAgICAndCc6ICdFeHByJyxcblx0XHRcdCAgICAgICAgICAndic6ICdwcm9wZXJ0aWVzLmdldChcImNob2ljZXNcIiknXG5cdFx0XHQgICAgICAgIH0sXG5cdFx0XHQgICAgICAgICd0eXBlJzoge1xuXHRcdFx0ICAgICAgICAgICd0JzogJ0V4cHInLFxuXHRcdFx0ICAgICAgICAgICd2JzogJ3Byb3BlcnRpZXMuZ2V0KFwiY2hvb3NlclN0eWxlXCIpJ1xuXHRcdFx0ICAgICAgICB9LFxuXHRcdFx0ICAgICAgICAna2V5Jzoge1xuXHRcdFx0ICAgICAgICAgICd0JzogJ0V4cHInLFxuXHRcdFx0ICAgICAgICAgICd2JzogJ3Byb3BlcnRpZXMuZ2V0KFwiZmllbGRcIiknXG5cdFx0XHQgICAgICAgIH0sXG5cdFx0XHQgICAgICAgICdvYmplY3QnOiB7XG5cdFx0XHQgICAgICAgICAgJ3QnOiAnRXhwcicsXG5cdFx0XHQgICAgICAgICAgJ3YnOiAnb2JqZWN0J1xuXHRcdFx0ICAgICAgICB9XG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnbGlzdCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ2FzT2JqZWN0Jyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnYXNPYmplY3QnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2VkaXRhYmxlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6IGZhbHNlLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnY29tcG9uZW50JzogJ01ldGFPYmplY3REZXRhaWxDb21wb25lbnQnLFxuXHRcdFx0ICAgICAgJ25lc3RlZExheW91dCc6IHRydWUsXG5cdFx0XHQgICAgICAnYmluZGluZ3MnOiB7XG5cdFx0XHQgICAgICAgICdsYXlvdXQnOiAnSW5zcGVjdCcsXG5cdFx0XHQgICAgICAgICd1c2VOb0xhYmVsTGF5b3V0JzogdHJ1ZSxcblx0XHRcdCAgICAgICAgJ2xhYmVsJzoge1xuXHRcdFx0ICAgICAgICAgICd0JzogJ0V4cHInLFxuXHRcdFx0ICAgICAgICAgICd2JzogJ3Byb3BlcnRpZXMuZ2V0KFwibGFiZWxcIiknXG5cdFx0XHQgICAgICAgIH0sXG5cdFx0XHQgICAgICAgICdvYmplY3QnOiB7XG5cdFx0XHQgICAgICAgICAgJ3QnOiAnQ0ZQJyxcblx0XHRcdCAgICAgICAgICAndic6ICd2YWx1ZSdcblx0XHRcdCAgICAgICAgfVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ2FzT2JqZWN0Jyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnYXNIb3ZlcicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ2FzSG92ZXInLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2VkaXRhYmxlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6IGZhbHNlLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnY29tcG9uZW50JzogJ0hvdmVyQ2FyZENvbXBvbmVudCcsXG5cdFx0XHQgICAgICAnYmluZGluZ3MnOiB7XG5cdFx0XHQgICAgICAgICdsaW5rVGl0bGUnOiB7XG5cdFx0XHQgICAgICAgICAgJ3QnOiAnQ0ZQJyxcblx0XHRcdCAgICAgICAgICAndic6ICd2YWx1ZSdcblx0XHRcdCAgICAgICAgfSxcblx0XHRcdCAgICAgICAgJ2FwcGVuZENvbnRlbnRUb0JvZHknOiBmYWxzZSxcblx0XHRcdCAgICAgICAgJ25nY29udGVudExheW91dCc6ICdDb250ZW50J1xuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ2FzSG92ZXInLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2xheW91dCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnQ29udGVudCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ2NvbXBvbmVudCc6ICdNZXRhT2JqZWN0RGV0YWlsQ29tcG9uZW50Jyxcblx0XHRcdCAgICAgICdiaW5kaW5ncyc6IHtcblx0XHRcdCAgICAgICAgJ2xheW91dCc6ICdJbnNwZWN0Jyxcblx0XHRcdCAgICAgICAgJ29iamVjdCc6IHtcblx0XHRcdCAgICAgICAgICAndCc6ICdDRlAnLFxuXHRcdFx0ICAgICAgICAgICd2JzogJ3ZhbHVlJ1xuXHRcdFx0ICAgICAgICB9XG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnbm9DcmVhdGUnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdub0NyZWF0ZScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnb3BlcmF0aW9uJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdjcmVhdGUnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAndmlzaWJsZSc6IGZhbHNlXG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnbm9DcmVhdGUnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdub1NlYXJjaCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ25vU2VhcmNoJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdvcGVyYXRpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ3NlYXJjaCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICd2aXNpYmxlJzogZmFsc2Vcblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdub1NlYXJjaCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnY29tcG9uZW50Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdHZW5lcmljQ2hvb3NlckNvbXBvbmVudCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NvbXBvbmVudCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnR2VuZXJpY0Nob29zZXJDb21wb25lbnQnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnUG9wdXAnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdiaW5kaW5ncyc6IHtcblx0XHRcdCAgICAgICAgJ3R5cGUnOiAnRHJvcGRvd24nXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdjb21wb25lbnQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0dlbmVyaWNDaG9vc2VyQ29tcG9uZW50Jyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnY29tcG9uZW50Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdHZW5lcmljQ2hvb3NlckNvbXBvbmVudCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdQb3B1cENvbnRyb2wnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdiaW5kaW5ncyc6IHtcblx0XHRcdCAgICAgICAgJ3R5cGUnOiAnUG9wdXBDb250cm9sJ1xuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnY29tcG9uZW50Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdHZW5lcmljQ2hvb3NlckNvbXBvbmVudCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NvbXBvbmVudCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnR2VuZXJpY0Nob29zZXJDb21wb25lbnQnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnQ2hvb3NlcicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ2JpbmRpbmdzJzoge1xuXHRcdFx0ICAgICAgICAndHlwZSc6ICdDaG9vc2VyJ1xuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnY29tcG9uZW50Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdHZW5lcmljQ2hvb3NlckNvbXBvbmVudCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NvbXBvbmVudCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnR2VuZXJpY0Nob29zZXJDb21wb25lbnQnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnUG9zdE9uQ2hhbmdlJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnYmluZGluZ3MnOiB7fVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnY29tcG9uZW50Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdHZW5lcmljQ2hvb3NlckNvbXBvbmVudCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NvbXBvbmVudCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiBbXG5cdFx0XHQgICAgICAgICAgJ1N0cmluZ0NvbXBvbmVudCcsXG5cdFx0XHQgICAgICAgICAgJ0FXSHlwZXJsaW5rJyxcblx0XHRcdCAgICAgICAgICAnUG9wdXBNZW51TGluaydcblx0XHRcdCAgICAgICAgXSxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnY29tcG9uZW50Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6IFtcblx0XHRcdCAgICAgICAgICAnU3RyaW5nQ29tcG9uZW50Jyxcblx0XHRcdCAgICAgICAgICAnQVdIeXBlcmxpbmsnLFxuXHRcdFx0ICAgICAgICAgICdQb3B1cE1lbnVMaW5rJ1xuXHRcdFx0ICAgICAgICBdLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnYm9sZCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ3dyYXBwZXJDb21wb25lbnQnOiAnR2VuZXJpY0NvbnRhaW5lckNvbXBvbmVudCcsXG5cdFx0XHQgICAgICAnd3JhcHBlckJpbmRpbmdzJzoge1xuXHRcdFx0ICAgICAgICAndGFnTmFtZSc6ICdiJ1xuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnY29tcG9uZW50Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6IFtcblx0XHRcdCAgICAgICAgICAnU3RyaW5nQ29tcG9uZW50Jyxcblx0XHRcdCAgICAgICAgICAnQVdIeXBlcmxpbmsnLFxuXHRcdFx0ICAgICAgICAgICdQb3B1cE1lbnVMaW5rJ1xuXHRcdFx0ICAgICAgICBdLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdjb21wb25lbnQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogW1xuXHRcdFx0ICAgICAgICAgICdTdHJpbmdDb21wb25lbnQnLFxuXHRcdFx0ICAgICAgICAgICdBV0h5cGVybGluaycsXG5cdFx0XHQgICAgICAgICAgJ1BvcHVwTWVudUxpbmsnXG5cdFx0XHQgICAgICAgIF0sXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdpdGFsaWMnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICd3cmFwcGVyQ29tcG9uZW50JzogJ0dlbmVyaWNDb250YWluZXJDb21wb25lbnQnLFxuXHRcdFx0ICAgICAgJ3dyYXBwZXJCaW5kaW5ncyc6IHtcblx0XHRcdCAgICAgICAgJ3RhZ05hbWUnOiAnaSdcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NvbXBvbmVudCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiBbXG5cdFx0XHQgICAgICAgICAgJ1N0cmluZ0NvbXBvbmVudCcsXG5cdFx0XHQgICAgICAgICAgJ0FXSHlwZXJsaW5rJyxcblx0XHRcdCAgICAgICAgICAnUG9wdXBNZW51TGluaydcblx0XHRcdCAgICAgICAgXSxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnY29tcG9uZW50Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6IFtcblx0XHRcdCAgICAgICAgICAnU3RyaW5nQ29tcG9uZW50Jyxcblx0XHRcdCAgICAgICAgICAnQVdIeXBlcmxpbmsnLFxuXHRcdFx0ICAgICAgICAgICdQb3B1cE1lbnVMaW5rJ1xuXHRcdFx0ICAgICAgICBdLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnaGVhZGluZzEnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICd3cmFwcGVyQ29tcG9uZW50JzogJ0dlbmVyaWNDb250YWluZXJDb21wb25lbnQnLFxuXHRcdFx0ICAgICAgJ3dyYXBwZXJCaW5kaW5ncyc6IHtcblx0XHRcdCAgICAgICAgJ3RhZ05hbWUnOiAnaDEnXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdjb21wb25lbnQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogW1xuXHRcdFx0ICAgICAgICAgICdTdHJpbmdDb21wb25lbnQnLFxuXHRcdFx0ICAgICAgICAgICdBV0h5cGVybGluaycsXG5cdFx0XHQgICAgICAgICAgJ1BvcHVwTWVudUxpbmsnXG5cdFx0XHQgICAgICAgIF0sXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NvbXBvbmVudCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiBbXG5cdFx0XHQgICAgICAgICAgJ1N0cmluZ0NvbXBvbmVudCcsXG5cdFx0XHQgICAgICAgICAgJ0FXSHlwZXJsaW5rJyxcblx0XHRcdCAgICAgICAgICAnUG9wdXBNZW51TGluaydcblx0XHRcdCAgICAgICAgXSxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ2hlYWRpbmcyJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnd3JhcHBlckNvbXBvbmVudCc6ICdHZW5lcmljQ29udGFpbmVyQ29tcG9uZW50Jyxcblx0XHRcdCAgICAgICd3cmFwcGVyQmluZGluZ3MnOiB7XG5cdFx0XHQgICAgICAgICd0YWdOYW1lJzogJ2gyJ1xuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnY29tcG9uZW50Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6IFtcblx0XHRcdCAgICAgICAgICAnU3RyaW5nQ29tcG9uZW50Jyxcblx0XHRcdCAgICAgICAgICAnQVdIeXBlcmxpbmsnLFxuXHRcdFx0ICAgICAgICAgICdQb3B1cE1lbnVMaW5rJ1xuXHRcdFx0ICAgICAgICBdLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdjb21wb25lbnQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogW1xuXHRcdFx0ICAgICAgICAgICdTdHJpbmdDb21wb25lbnQnLFxuXHRcdFx0ICAgICAgICAgICdBV0h5cGVybGluaycsXG5cdFx0XHQgICAgICAgICAgJ1BvcHVwTWVudUxpbmsnXG5cdFx0XHQgICAgICAgIF0sXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdoZWFkaW5nMycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ3dyYXBwZXJDb21wb25lbnQnOiAnR2VuZXJpY0NvbnRhaW5lckNvbXBvbmVudCcsXG5cdFx0XHQgICAgICAnd3JhcHBlckJpbmRpbmdzJzoge1xuXHRcdFx0ICAgICAgICAndGFnTmFtZSc6ICdoMydcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NvbXBvbmVudCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiBbXG5cdFx0XHQgICAgICAgICAgJ1N0cmluZ0NvbXBvbmVudCcsXG5cdFx0XHQgICAgICAgICAgJ0FXSHlwZXJsaW5rJyxcblx0XHRcdCAgICAgICAgICAnUG9wdXBNZW51TGluaydcblx0XHRcdCAgICAgICAgXSxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0R3JvdXAnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0ZpZWxkVHlwZScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0R3JvdXAnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0ZpZWxkVHlwZScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ2xvbmd0ZXh0Jyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXRHcm91cCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnRmllbGRUeXBlJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXRHcm91cCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnRmllbGRUeXBlJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAncmljaHRleHQnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdEdyb3VwJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdGaWVsZFR5cGUnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdEdyb3VwJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdGaWVsZFR5cGUnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdzZWNyZXQnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdEdyb3VwJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdGaWVsZFR5cGUnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdEdyb3VwJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdDaG9vc2VyVHlwZScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0R3JvdXAnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0Nob29zZXJUeXBlJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnUG9wdXAnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdEdyb3VwJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdDaG9vc2VyVHlwZScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0R3JvdXAnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0Nob29zZXJUeXBlJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnUG9wdXBDb250cm9sJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXRHcm91cCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnQ2hvb3NlclR5cGUnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdEdyb3VwJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdDaG9vc2VyVHlwZScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0Nob29zZXInLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdEdyb3VwJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdDaG9vc2VyVHlwZScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0R3JvdXAnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ1dyYXBwZXJTdHlsZScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0R3JvdXAnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ1dyYXBwZXJTdHlsZScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ2JvbGQnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdEdyb3VwJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdXcmFwcGVyU3R5bGUnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdEdyb3VwJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdXcmFwcGVyU3R5bGUnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdpdGFsaWMnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdEdyb3VwJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdXcmFwcGVyU3R5bGUnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdEdyb3VwJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdXcmFwcGVyU3R5bGUnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdoZWFkaW5nMScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0R3JvdXAnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ1dyYXBwZXJTdHlsZScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0R3JvdXAnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ1dyYXBwZXJTdHlsZScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ2hlYWRpbmcyJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXRHcm91cCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnV3JhcHBlclN0eWxlJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXRHcm91cCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnV3JhcHBlclN0eWxlJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnaGVhZGluZzMnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdEdyb3VwJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdXcmFwcGVyU3R5bGUnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdhY3Rpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAndmlzaWJsZSc6IHtcblx0XHRcdCAgICAgICAgJ3QnOiAnU0RXJyxcblx0XHRcdCAgICAgICAgJ3YnOiAnIXByb3BlcnRpZXMuZ2V0KFwiaGlkZGVuXCIpJ1xuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgICdlbmFibGVkJzogdHJ1ZVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2FjdGlvbicsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdwYWdlQWN0aW9uJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnYWN0aW9uUmVzdWx0cyc6IHtcblx0XHRcdCAgICAgICAgJ3QnOiAnRXhwcicsXG5cdFx0XHQgICAgICAgICd2JzogJ21ldGEucm91dGluZ1NlcnZpY2Uucm91dGVGb3JQYWdlKHByb3BlcnRpZXMuZ2V0KFwicGFnZU5hbWVcIikpJ1xuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2FjdGlvbicsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdhY3Rpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnbW9kYWxDb21wb25lbnRQYWdlJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAncGFnZUJpbmRpbmdzJzoge1xuXHRcdFx0ICAgICAgICAnY29tcG9uZW50TmFtZSc6IHtcblx0XHRcdCAgICAgICAgICAndCc6ICdFeHByJyxcblx0XHRcdCAgICAgICAgICAndic6ICdwcm9wZXJ0aWVzLmdldChcImNvbXBvbmVudE5hbWVcIiknXG5cdFx0XHQgICAgICAgIH0sXG5cdFx0XHQgICAgICAgICd0aXRsZSc6IHtcblx0XHRcdCAgICAgICAgICAndCc6ICdFeHByJyxcblx0XHRcdCAgICAgICAgICAndic6ICdwcm9wZXJ0aWVzLmdldChcInRpdGxlXCIpJ1xuXHRcdFx0ICAgICAgICB9XG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAgJ2FjdGlvblJlc3VsdHMnOiB7XG5cdFx0XHQgICAgICAgICd0JzogJ0V4cHInLFxuXHRcdFx0ICAgICAgICAndic6ICdtZXRhLmNvbXBQYWdlV2l0aE5hbWUoXCJNZXRhTW9kYWxQYWdlXCIpJ1xuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2FjdGlvbicsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdhY3Rpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnbW9kYWxDb21wb25lbnRQYW5lbCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ3BhZ2VCaW5kaW5ncyc6IHtcblx0XHRcdCAgICAgICAgJ2NsaWVudFBhbmVsJzogdHJ1ZSxcblx0XHRcdCAgICAgICAgJ2NvbXBvbmVudE5hbWUnOiB7XG5cdFx0XHQgICAgICAgICAgJ3QnOiAnRXhwcicsXG5cdFx0XHQgICAgICAgICAgJ3YnOiAncHJvcGVydGllcy5nZXQoXCJjb21wb25lbnROYW1lXCIpJ1xuXHRcdFx0ICAgICAgICB9LFxuXHRcdFx0ICAgICAgICAndGl0bGUnOiB7XG5cdFx0XHQgICAgICAgICAgJ3QnOiAnRXhwcicsXG5cdFx0XHQgICAgICAgICAgJ3YnOiAncHJvcGVydGllcy5nZXQoXCJ0aXRsZVwiKSdcblx0XHRcdCAgICAgICAgfVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgICdhY3Rpb25SZXN1bHRzJzoge1xuXHRcdFx0ICAgICAgICAndCc6ICdFeHByJyxcblx0XHRcdCAgICAgICAgJ3YnOiAnbWV0YS5jb21wUGFnZVdpdGhOYW1lKFwiTWV0YU1vZGFsUGFnZVwiKSdcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdhY3Rpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnYWN0aW9uJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ21lc3NhZ2VSZXN1bHRzJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnYWN0aW9uUmVzdWx0cyc6IHtcblx0XHRcdCAgICAgICAgJ3QnOiAnRXhwcicsXG5cdFx0XHQgICAgICAgICd2JzogJ3ZhciBvID0gKHByb3BlcnRpZXMuaXNJbnN0YW5jZUFjdGlvbiA/IG9iamVjdCA6IGFyaWJhLnVpLmFyaWJhd2ViLnV0aWwuQVdVdGlsLmNsYXNzRm9yTmFtZShwcm9wZXJ0aWVzLmNsYXNzKSksIHZhciB2ID0gYXJpYmEudXRpbC5maWVsZHZhbHVlLkZpZWxkVmFsdWUuZ2V0RmllbGRWYWx1ZShvLCBwcm9wZXJ0aWVzLmFjdGlvbiksIHZhciBtID0gYXJpYmEudXRpbC5jb3JlLkZtdC5TKHByb3BlcnRpZXMubWVzc2FnZSwgdiksIGFyaWJhLnVpLndpZGdldHMuQXJpYmFQYWdlQ29udGVudC5zZXRNZXNzYWdlKG0sIHJlcXVlc3RDb250ZXh0LnNlc3Npb24oKSksIG51bGwnXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAgJ21lc3NhZ2UnOiAnQWN0aW9uIFBlcmZvcm1lZDogJXMnXG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnYWN0aW9uJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2FjdGlvbicsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdpbnN0YW5jZScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ2lzSW5zdGFuY2VBY3Rpb24nOiB0cnVlLFxuXHRcdFx0ICAgICAgJ2VuYWJsZWQnOiB7XG5cdFx0XHQgICAgICAgICd0JzogJ0V4cHInLFxuXHRcdFx0ICAgICAgICAndic6ICdvYmplY3QgIT0gbnVsbCdcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdhY3Rpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnYWN0aW9uJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmlsdGVyQWN0aW9ucycsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnaW5zdGFuY2UnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAndmlzaWJsZSc6IHtcblx0XHRcdCAgICAgICAgJ3QnOiAnRXhwcicsXG5cdFx0XHQgICAgICAgICd2JzogJ3Byb3BlcnRpZXMuZ2V0KFwiaXNJbnN0YW5jZUFjdGlvblwiKSA9PSB0cnVlJ1xuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2FjdGlvbicsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdhY3Rpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWx0ZXJBY3Rpb25zJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdzdGF0aWMnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAndmlzaWJsZSc6IHtcblx0XHRcdCAgICAgICAgJ3QnOiAnRXhwcicsXG5cdFx0XHQgICAgICAgICd2JzogJyFwcm9wZXJ0aWVzLmdldChcImlzSW5zdGFuY2VBY3Rpb25cIiknXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnYWN0aW9uJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2xheW91dCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICd6b25lcyc6IFtcblx0XHRcdCAgICAgICAgJ3pNYWluJ1xuXHRcdFx0ICAgICAgXVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2xheW91dCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdBY3Rpb25CdXR0b25zJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnY29tcG9uZW50JzogJ01ldGFBY3Rpb25MaXN0Q29tcG9uZW50Jyxcblx0XHRcdCAgICAgICd2aXNpYmxlJzogdHJ1ZSxcblx0XHRcdCAgICAgICdiaW5kaW5ncyc6IHtcblx0XHRcdCAgICAgICAgJ2RlZmF1bHRTdHlsZSc6ICdwcmltYXJ5Jyxcblx0XHRcdCAgICAgICAgJ3JlbmRlckFzJzogJ2J1dHRvbnMnLFxuXHRcdFx0ICAgICAgICAnYWxpZ24nOiAncmlnaHQnXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAgJ2VsZW1lbnRDbGFzcyc6ICdsLWFjdGlvbi1idXR0b25zJ1xuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2xheW91dCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdsYXlvdXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnQWN0aW9uTGlua3MnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdjb21wb25lbnQnOiAnTWV0YUFjdGlvbkxpc3RDb21wb25lbnQnLFxuXHRcdFx0ICAgICAgJ3Zpc2libGUnOiB0cnVlLFxuXHRcdFx0ICAgICAgJ2JpbmRpbmdzJzoge1xuXHRcdFx0ICAgICAgICAncmVuZGVyQXMnOiAnbGlua3MnLFxuXHRcdFx0ICAgICAgICAnYWxpZ24nOiAncmlnaHQnXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAgJ2VsZW1lbnRDbGFzcyc6ICdsLWFjdGlvbi1idXR0b25zJ1xuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2xheW91dCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdsYXlvdXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnQWN0aW9uTWVudScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ2NvbXBvbmVudCc6ICdNZXRhQWN0aW9uTGlzdENvbXBvbmVudCcsXG5cdFx0XHQgICAgICAndmlzaWJsZSc6IHRydWUsXG5cdFx0XHQgICAgICAnYmluZGluZ3MnOiB7XG5cdFx0XHQgICAgICAgICdyZW5kZXJBcyc6ICdtZW51Jyxcblx0XHRcdCAgICAgICAgJ2FsaWduJzogJ3JpZ2h0J1xuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgICdlbGVtZW50Q2xhc3MnOiAnbC1hY3Rpb24tYnV0dG9ucydcblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdsYXlvdXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnbGF5b3V0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0luc3RhbmNlQWN0aW9uQnV0dG9ucycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ2NvbXBvbmVudCc6ICdNZXRhQWN0aW9uTGlzdENvbXBvbmVudCcsXG5cdFx0XHQgICAgICAndmlzaWJsZSc6IHRydWUsXG5cdFx0XHQgICAgICAnYmluZGluZ3MnOiB7XG5cdFx0XHQgICAgICAgICdmaWx0ZXJBY3Rpb25zJzogJ2luc3RhbmNlJyxcblx0XHRcdCAgICAgICAgJ3JlbmRlckFzJzogJ2J1dHRvbnMnLFxuXHRcdFx0ICAgICAgICAnYWxpZ24nOiAncmlnaHQnXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAgJ2VsZW1lbnRDbGFzcyc6ICdsLWFjdGlvbi1idXR0b25zJ1xuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2xheW91dCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdsYXlvdXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnU3RhdGljQWN0aW9uQnV0dG9ucycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ2NvbXBvbmVudCc6ICdNZXRhQWN0aW9uTGlzdENvbXBvbmVudCcsXG5cdFx0XHQgICAgICAndmlzaWJsZSc6IHRydWUsXG5cdFx0XHQgICAgICAnYmluZGluZ3MnOiB7XG5cdFx0XHQgICAgICAgICdmaWx0ZXJBY3Rpb25zJzogJ3N0YXRpYycsXG5cdFx0XHQgICAgICAgICdyZW5kZXJBcyc6ICdidXR0b25zJyxcblx0XHRcdCAgICAgICAgJ2FsaWduJzogJ3JpZ2h0J1xuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgICdlbGVtZW50Q2xhc3MnOiAnbC1hY3Rpb24tYnV0dG9ucydcblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdsYXlvdXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnbGF5b3V0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ1RhYnMnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdjb21wb25lbnQnOiAnTWV0YVRhYnMnLFxuXHRcdFx0ICAgICAgJ3Zpc2libGUnOiB0cnVlXG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnbGF5b3V0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2xheW91dCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdTZWN0aW9ucycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ2NvbXBvbmVudCc6ICdNZXRhU2VjdGlvbnNDb21wb25lbnQnLFxuXHRcdFx0ICAgICAgJ3Zpc2libGUnOiB0cnVlXG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnbGF5b3V0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2xheW91dCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdGb3JtJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnY29tcG9uZW50JzogJ01ldGFGb3JtQ29tcG9uZW50Jyxcblx0XHRcdCAgICAgICd2aXNpYmxlJzogdHJ1ZVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2xheW91dCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdsYXlvdXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnU3RhY2snLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdjb21wb25lbnQnOiAnTWV0YUVsZW1lbnRMaXN0Q29tcG9uZW50Jyxcblx0XHRcdCAgICAgICd2aXNpYmxlJzogdHJ1ZVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2xheW91dCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdsYXlvdXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnT3duWm9uZScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ3pvbmVQYXRoJzoge1xuXHRcdFx0ICAgICAgICAndCc6ICdFeHByJyxcblx0XHRcdCAgICAgICAgJ3YnOiAnbGF5b3V0J1xuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2xheW91dCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdsYXlvdXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAncGFkOCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ3dyYXBwZXJDb21wb25lbnQnOiAnR2VuZXJpY0NvbnRhaW5lckNvbXBvbmVudCcsXG5cdFx0XHQgICAgICAnd3JhcHBlckJpbmRpbmdzJzoge1xuXHRcdFx0ICAgICAgICAnc3R5bGUnOiAncGFkZGluZzo4cHgnLFxuXHRcdFx0ICAgICAgICAndGFnTmFtZSc6ICdkaXYnXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnbGF5b3V0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2xheW91dCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NvbXBvbmVudCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnTWV0YUZvcm1Db21wb25lbnQnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnbGFiZWxzT25Ub3AnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdsYXlvdXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnbGF5b3V0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnbGF5b3V0X3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdsYWJlbHNPblRvcCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NsYXNzJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ2JpbmRpbmdzJzoge1xuXHRcdFx0ICAgICAgICAnc2hvd0xhYmVsc0Fib3ZlQ29udHJvbHMnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnbGF5b3V0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0R3JvdXAnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0xheW91dEdyb3VwaW5nJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXRHcm91cCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnTGF5b3V0R3JvdXBpbmcnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdUYWJzJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXRHcm91cCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnTGF5b3V0R3JvdXBpbmcnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdEdyb3VwJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdMYXlvdXRHcm91cGluZycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ1NlY3Rpb25zJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXRHcm91cCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnTGF5b3V0R3JvdXBpbmcnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdEdyb3VwJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdMYXlvdXRHcm91cGluZycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0Zvcm0nLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdEdyb3VwJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdMYXlvdXRHcm91cGluZycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0R3JvdXAnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0xheW91dEdyb3VwaW5nJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnU3RhY2snLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdEdyb3VwJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdMYXlvdXRHcm91cGluZycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NsYXNzJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnbGF5b3V0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6IFtcblx0XHRcdCAgICAgICAgICAnSW5zcGVjdCcsXG5cdFx0XHQgICAgICAgICAgJ1NlYXJjaEZvcm0nXG5cdFx0XHQgICAgICAgIF0sXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICd0cmFpdCc6ICdGb3JtJyxcblx0XHRcdCAgICAgICdsYWJlbCc6IHtcblx0XHRcdCAgICAgICAgJ3QnOiAnRXhwcicsXG5cdFx0XHQgICAgICAgICd2JzogJ1VJTWV0YS5iZWF1dGlmeUNsYXNzTmFtZSh2YWx1ZXMuY2xhc3MpJ1xuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NsYXNzJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6IHt9LFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdsYXlvdXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogW1xuXHRcdFx0ICAgICAgICAgICdJbnNwZWN0Jyxcblx0XHRcdCAgICAgICAgICAnU2VhcmNoRm9ybSdcblx0XHRcdCAgICAgICAgXSxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ2NvbXBvbmVudCc6ICdTdHJpbmdDb21wb25lbnQnLFxuXHRcdFx0ICAgICAgJ2JpbmRpbmdzJzoge31cblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdsYXlvdXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0luc3BlY3RXaXRoQWN0aW9ucycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICd0cmFpdCc6ICdTdGFjaydcblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdsYXlvdXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0luc3BlY3RXaXRoQWN0aW9ucycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2xheW91dCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnQWN0aW9ucycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ3RyYWl0JzogJ0FjdGlvbk1lbnUnXG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnbGF5b3V0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdJbnNwZWN0V2l0aEFjdGlvbnMnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnbGF5b3V0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdJbnNwZWN0V2l0aEFjdGlvbnMnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdsYXlvdXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0luc3BlY3QnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICd0cmFpdCc6ICdGb3JtJ1xuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2xheW91dCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnSW5zcGVjdFdpdGhBY3Rpb25zJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2xheW91dCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnQnV0dG9uQXJlYScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICd0cmFpdCc6ICdTdGF0aWNBY3Rpb25CdXR0b25zJ1xuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2xheW91dCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnU2VsZWN0aW9uQnV0dG9uQXJlYScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICd0cmFpdCc6ICdJbnN0YW5jZUFjdGlvbkJ1dHRvbnMnXG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnbGF5b3V0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdMaW5rcycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICd0cmFpdCc6ICdBY3Rpb25MaW5rcydcblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdsYXlvdXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0xhYmVsRmllbGQnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICd2aXNpYmxlJzogZmFsc2Vcblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdsYXlvdXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0xhYmVsRmllbGQnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdsYWJlbEZpZWxkJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAndmlzaWJsZSc6IHtcblx0XHRcdCAgICAgICAgJ3QnOiAnT1YnLFxuXHRcdFx0ICAgICAgICAndic6ICd0cnVlJ1xuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2xheW91dCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnTGFiZWxGaWVsZCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2xheW91dCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiBbXG5cdFx0XHQgICAgICAgICAgJ1RhYmxlJyxcblx0XHRcdCAgICAgICAgICAnRGV0YWlsVGFibGUnXG5cdFx0XHQgICAgICAgIF0sXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NsYXNzJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ2NvbXBvbmVudCc6ICdNZXRhVGFibGUnLFxuXHRcdFx0ICAgICAgJ2JpbmRpbmdzJzoge1xuXHRcdFx0ICAgICAgICAnZW5hYmxlU2Nyb2xsaW5nJzogdHJ1ZSxcblx0XHRcdCAgICAgICAgJ3Nob3dTZWxlY3Rpb25Db2x1bW4nOiBmYWxzZSxcblx0XHRcdCAgICAgICAgJ2Rpc3BsYXlHcm91cCc6IHtcblx0XHRcdCAgICAgICAgICAndCc6ICdDRlAnLFxuXHRcdFx0ICAgICAgICAgICd2JzogJ2Rpc3BsYXlHcm91cCdcblx0XHRcdCAgICAgICAgfSxcblx0XHRcdCAgICAgICAgJ3RpdGxlJzoge1xuXHRcdFx0ICAgICAgICAgICd0JzogJ0V4cHInLFxuXHRcdFx0ICAgICAgICAgICd2JzogJ3Byb3BlcnRpZXMuZ2V0KFwibGFiZWxcIiknXG5cdFx0XHQgICAgICAgIH0sXG5cdFx0XHQgICAgICAgICdzdWJtaXRPblNlbGVjdGlvbkNoYW5nZSc6IHRydWUsXG5cdFx0XHQgICAgICAgICdzaW5nbGVTZWxlY3QnOiB0cnVlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnbGF5b3V0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdMaXN0SXRlbScsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NsYXNzJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ2NvbXBvbmVudCc6ICdTdHJpbmdDb21wb25lbnQnLFxuXHRcdFx0ICAgICAgJ2JpbmRpbmdzJzoge1xuXHRcdFx0ICAgICAgICAndmFsdWUnOiB7XG5cdFx0XHQgICAgICAgICAgJ3QnOiAnRXhwcicsXG5cdFx0XHQgICAgICAgICAgJ3YnOiAncHJvcGVydGllcy5nZXQoXCJvYmplY3RUaXRsZVwiKSdcblx0XHRcdCAgICAgICAgfVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ29iamVjdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NsYXNzJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ29iamVjdFRpdGxlJzoge1xuXHRcdFx0ICAgICAgICAndCc6ICdFeHByJyxcblx0XHRcdCAgICAgICAgJ3YnOiAnRmllbGRQYXRoLmdldEZpZWxkVmFsdWUob2JqZWN0LCBtZXRhLmRpc3BsYXlLZXlGb3JDbGFzcyh2YWx1ZXMuZ2V0KFwiY2xhc3NcIikpKSdcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdvYmplY3QnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdsYXlvdXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAnb2JqZWN0VGl0bGUnOiB7XG5cdFx0XHQgICAgICAgICd0JzogJ0V4cHInLFxuXHRcdFx0ICAgICAgICAndic6ICdGaWVsZFBhdGguZ2V0RmllbGRWYWx1ZShvYmplY3QsIG1ldGEuZGlzcGxheUtleUZvckNsYXNzKHZhbHVlcy5nZXQoXCJjbGFzc1wiKSkpJ1xuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ21vZHVsZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdwYWdlQmluZGluZ3MnOiB7XG5cdFx0XHQgICAgICAgICd0JzogJ0V4cHInLFxuXHRcdFx0ICAgICAgICAndic6ICcocHJvcGVydGllcy5nZXQoXCJob21lUGFnZVwiKSA9PSBcIk1ldGFIb21lUGFnZUNvbXBvbmVudFwiKSA/IG5ldyBNYXAoKS5zZXQoXCJtb2R1bGVcIiwgdmFsdWVzLmdldChcIm1vZHVsZVwiKSkgOiBudWxsJ1xuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgICdjb21wb25lbnQnOiAnTWV0YURhc2hib2FyZExheW91dENvbXBvbmVudCcsXG5cdFx0XHQgICAgICAndmlzaWJsZSc6IHtcblx0XHRcdCAgICAgICAgJ3QnOiAnU0RXJyxcblx0XHRcdCAgICAgICAgJ3YnOiAnIXByb3BlcnRpZXMuZ2V0KFwiaGlkZGVuXCIpJ1xuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgICdob21lUGFnZSc6ICdNZXRhSG9tZVBhZ2VDb21wb25lbnQnXG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnbW9kdWxlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnbGF5b3V0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ3Zpc2libGUnOiB0cnVlXG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnbW9kdWxlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ21vZHVsZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdBY3Rpb25UT0MnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdtb2R1bGUnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnQWN0aW9uVE9DJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdsYXlvdXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0FjdGlvbnMnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdjb21wb25lbnQnOiAnTWV0YUFjdGlvbkxpc3RDb21wb25lbnQnLFxuXHRcdFx0ICAgICAgJ2xhYmVsJzogJ0FjdGlvbnMnLFxuXHRcdFx0ICAgICAgJ2FmdGVyJzogJ3pUb2MnXG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnbW9kdWxlJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0FjdGlvblRPQycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ21vZHVsZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdhY3Rpb25DYXRlZ29yeScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICd2aXNpYmxlJzoge1xuXHRcdFx0ICAgICAgICAndCc6ICdTRFcnLFxuXHRcdFx0ICAgICAgICAndic6ICchcHJvcGVydGllcy5nZXQoXCJoaWRkZW5cIiknXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnYWN0aW9uQ2F0ZWdvcnknLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0dlbmVyYWwnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdhZnRlcic6ICd6TWFpbicsXG5cdFx0XHQgICAgICAnbGFiZWwnOiB7XG5cdFx0XHQgICAgICAgICd0JzogJ2kxOG4nLFxuXHRcdFx0ICAgICAgICAndic6IHtcblx0XHRcdCAgICAgICAgICAna2V5JzogJ2EwMDEnLFxuXHRcdFx0ICAgICAgICAgICdkZWZWYWwnOiAnR2VuZXJhbCdcblx0XHRcdCAgICAgICAgfVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9XG5cdFx0XHRdXG59O1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyoqXG4gKiAgQGZvcm1hdHRlcjpvblxuICpcbiAqL1xuIiwiLyoqXG4gKiAgVGhpcyBpcyBnZW5lcmF0ZWQgZmlsZS4gRG8gbm90IGVkaXQgISFcbiAqXG4gKiAgQGZvcm1hdHRlcjpvZmZcbiAqXG4gKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG5leHBvcnQgY29uc3QgU3lzdGVtUGVyc2lzdGVuY2VSdWxlcyA9IHtcbiBcdFx0b3NzOlx0XHRcdFtcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdjbGFzcycsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdkaXNwbGF5S2V5JzogJ3RvU3RyaW5nJyxcblx0XHRcdCAgICAgICdzZWFyY2hPcGVyYXRpb24nOiAnc2VhcmNoJ1xuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NsYXNzJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ1NlYXJjaGFibGUnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAndGV4dFNlYXJjaFN1cHBvcnRlZCc6IHRydWUsXG5cdFx0XHQgICAgICAnc2VhcmNoT3BlcmF0aW9uJzogJ2tleXdvcmRTZWFyY2gnXG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnY2xhc3MnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnY2xhc3MnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdvcGVyYXRpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ2tleXdvcmRTZWFyY2gnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAndXNlVGV4dEluZGV4JzogdHJ1ZVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NsYXNzJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnb3BlcmF0aW9uJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdrZXl3b3JkU2VhcmNoJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAndmlzaWJsZSc6IGZhbHNlXG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnY2xhc3MnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdvcGVyYXRpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ2tleXdvcmRTZWFyY2gnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnY2xhc3MnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdvcGVyYXRpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ2tleXdvcmRTZWFyY2gnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAna2V5d29yZHMnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICd2aXNpYmxlJzoge1xuXHRcdFx0ICAgICAgICAndCc6ICdPVicsXG5cdFx0XHQgICAgICAgICd2JzogJ3RydWUnXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAgJ2JpbmRpbmdzJzoge1xuXHRcdFx0ICAgICAgICAnc2l6ZSc6IDMwXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAgJ3RyYWl0JzogJ1NlYXJjaGFibGVQcm9wZXJ0eScsXG5cdFx0XHQgICAgICAncmFuayc6IDAsXG5cdFx0XHQgICAgICAnYWZ0ZXInOiAnelRvcCcsXG5cdFx0XHQgICAgICAndHlwZSc6ICdqYXZhLmxhbmcuU3RyaW5nJ1xuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NsYXNzJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnb3BlcmF0aW9uJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdrZXl3b3JkU2VhcmNoJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NsYXNzJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NsYXNzJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnb3BlcmF0aW9uJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICd0ZXh0U2VhcmNoJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NsYXNzJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnb3BlcmF0aW9uJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICd0ZXh0U2VhcmNoJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnY2xhc3MnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdvcGVyYXRpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ3RleHRTZWFyY2gnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdTZWFyY2hhYmxlUHJvcGVydHknLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAndmlzaWJsZSc6IHtcblx0XHRcdCAgICAgICAgJ3QnOiAnT1YnLFxuXHRcdFx0ICAgICAgICAndic6ICd0cnVlJ1xuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2NsYXNzJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnb3BlcmF0aW9uJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICd0ZXh0U2VhcmNoJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnY2xhc3MnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdvcGVyYXRpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ3RleHRTZWFyY2gnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnY2xhc3MnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAndG9PbmVSZWxhdGlvbnNoaXAnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAndG9PbmVSZWxhdGlvbnNoaXAnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdlZGl0YWJsZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdjb21wb25lbnQnOiAnR2VuZXJpY0Nob29zZXJDb21wb25lbnQnLFxuXHRcdFx0ICAgICAgJ2JpbmRpbmdzJzoge1xuXHRcdFx0ICAgICAgICAnZGVzdGluYXRpb25DbGFzcyc6IHtcblx0XHRcdCAgICAgICAgICAndCc6ICdFeHByJyxcblx0XHRcdCAgICAgICAgICAndic6ICdlbGVtZW50VHlwZSdcblx0XHRcdCAgICAgICAgfSxcblx0XHRcdCAgICAgICAgJ211bHRpc2VsZWN0JzogZmFsc2UsXG5cdFx0XHQgICAgICAgICdkaXNwbGF5S2V5Jzoge1xuXHRcdFx0ICAgICAgICAgICd0JzogJ0V4cHInLFxuXHRcdFx0ICAgICAgICAgICd2JzogJ21ldGEuZGlzcGxheUxhYmVsKHR5cGUsIHByb3BlcnRpZXMuZ2V0KFwibGFiZWxGaWVsZFwiKSknXG5cdFx0XHQgICAgICAgIH0sXG5cdFx0XHQgICAgICAgICd0eXBlJzogJ0Ryb3Bkb3duJyxcblx0XHRcdCAgICAgICAgJ2tleSc6IHtcblx0XHRcdCAgICAgICAgICAndCc6ICdFeHByJyxcblx0XHRcdCAgICAgICAgICAndic6ICdmaWVsZCdcblx0XHRcdCAgICAgICAgfSxcblx0XHRcdCAgICAgICAgJ29iamVjdCc6IHtcblx0XHRcdCAgICAgICAgICAndCc6ICdFeHByJyxcblx0XHRcdCAgICAgICAgICAndic6ICdvYmplY3QnXG5cdFx0XHQgICAgICAgIH1cblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICd0b09uZVJlbGF0aW9uc2hpcCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICd0b01hbnlDaG9vc2VyJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ2ZpZWxkJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICcqJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ3RvTWFueUNob29zZXInLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdlZGl0YWJsZScsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcHJvcGVydGllcyc6IHtcblx0XHRcdCAgICAgICdjb21wb25lbnQnOiAnR2VuZXJpY0Nob29zZXJDb21wb25lbnQnLFxuXHRcdFx0ICAgICAgJ2JpbmRpbmdzJzoge1xuXHRcdFx0ICAgICAgICAnZGVzdGluYXRpb25DbGFzcyc6IHtcblx0XHRcdCAgICAgICAgICAndCc6ICdFeHByJyxcblx0XHRcdCAgICAgICAgICAndic6ICdlbGVtZW50VHlwZSdcblx0XHRcdCAgICAgICAgfSxcblx0XHRcdCAgICAgICAgJ211bHRpc2VsZWN0JzogdHJ1ZSxcblx0XHRcdCAgICAgICAgJ2Rpc3BsYXlLZXknOiB7XG5cdFx0XHQgICAgICAgICAgJ3QnOiAnRXhwcicsXG5cdFx0XHQgICAgICAgICAgJ3YnOiAnbWV0YS5kaXNwbGF5TGFiZWwodHlwZSwgcHJvcGVydGllcy5nZXQoXCJsYWJlbEZpZWxkXCIpKSdcblx0XHRcdCAgICAgICAgfSxcblx0XHRcdCAgICAgICAgJ3R5cGUnOiAnQ2hvb3NlcicsXG5cdFx0XHQgICAgICAgICdrZXknOiB7XG5cdFx0XHQgICAgICAgICAgJ3QnOiAnRXhwcicsXG5cdFx0XHQgICAgICAgICAgJ3YnOiAnZmllbGQnXG5cdFx0XHQgICAgICAgIH0sXG5cdFx0XHQgICAgICAgICdvYmplY3QnOiB7XG5cdFx0XHQgICAgICAgICAgJ3QnOiAnRXhwcicsXG5cdFx0XHQgICAgICAgICAgJ3YnOiAnb2JqZWN0J1xuXHRcdFx0ICAgICAgICB9XG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAndG9NYW55Q2hvb3NlcicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdmaWVsZCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnKicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogZmFsc2Vcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICd0b01hbnlMaW5rJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiBmYWxzZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19wcm9wZXJ0aWVzJzoge1xuXHRcdFx0ICAgICAgJ2NvbXBvbmVudCc6ICdBV0h5cGVybGluaycsXG5cdFx0XHQgICAgICAnYmluZGluZ3MnOiB7XG5cdFx0XHQgICAgICAgICdvbWl0VGFncyc6IHtcblx0XHRcdCAgICAgICAgICAndCc6ICdFeHByJyxcblx0XHRcdCAgICAgICAgICAndic6ICchdmFsdWUgfHwgKHZhbHVlLnNpemUoKSA9PSAwKSdcblx0XHRcdCAgICAgICAgfSxcblx0XHRcdCAgICAgICAgJ2F3Y29udGVudCc6IHtcblx0XHRcdCAgICAgICAgICAndCc6ICdFeHByJyxcblx0XHRcdCAgICAgICAgICAndic6ICd2YWx1ZSA/IChcIlwiICsgdmFsdWUuc2l6ZSgpICsgXCIgaXRlbXNcIikgOiBcIihub25lKVwiJ1xuXHRcdFx0ICAgICAgICB9LFxuXHRcdFx0ICAgICAgICAnYWN0aW9uJzoge1xuXHRcdFx0ICAgICAgICAgICd0JzogJ0V4cHInLFxuXHRcdFx0ICAgICAgICAgICd2JzogJ3NldChcIm9iamVjdFwiLCB2YWx1ZSksIHNldChcImFjdGlvbkNhdGVnb3J5XCIsIFwiR2VuZXJhbFwiKSwgc2V0KFwiYWN0aW9uXCIsIFwiSW5zcGVjdFwiKSwgYXJpYmEudWkubWV0YS5jb3JlLlVJTWV0YS5nZXRJbnN0YW5jZSgpLmZpcmVBY3Rpb24odGhpcywgcmVxdWVzdENvbnRleHQpJ1xuXHRcdFx0ICAgICAgICB9XG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAnZmllbGQnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJyonLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH0sXG5cdFx0XHQgIHtcblx0XHRcdCAgICAnX3NlbGVjdG9ycyc6IFtcblx0XHRcdCAgICAgIHtcblx0XHRcdCAgICAgICAgJ19rZXknOiAndHJhaXRHcm91cCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAnUmVsVmlld2VycycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0R3JvdXAnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ1JlbFZpZXdlcnMnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH0sXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0Jyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICd0b09uZVJlbGF0aW9uc2hpcCcsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0R3JvdXAnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ1JlbFZpZXdlcnMnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdEdyb3VwJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdSZWxWaWV3ZXJzJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAndG9NYW55Q2hvb3NlcicsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0R3JvdXAnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ1JlbFZpZXdlcnMnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdEdyb3VwJyxcblx0XHRcdCAgICAgICAgJ192YWx1ZSc6ICdSZWxWaWV3ZXJzJyxcblx0XHRcdCAgICAgICAgJ19pc0RlY2wnOiB0cnVlXG5cdFx0XHQgICAgICB9LFxuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICd0cmFpdCcsXG5cdFx0XHQgICAgICAgICdfdmFsdWUnOiAndG9NYW55TGluaycsXG5cdFx0XHQgICAgICAgICdfaXNEZWNsJzogdHJ1ZVxuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgIF0sXG5cdFx0XHQgICAgJ19yYW5rJzogMFxuXHRcdFx0ICB9LFxuXHRcdFx0ICB7XG5cdFx0XHQgICAgJ19zZWxlY3RvcnMnOiBbXG5cdFx0XHQgICAgICB7XG5cdFx0XHQgICAgICAgICdfa2V5JzogJ3RyYWl0R3JvdXAnLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ1JlbFZpZXdlcnMnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IHRydWVcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICBdLFxuXHRcdFx0ICAgICdfcmFuayc6IDBcblx0XHRcdCAgfSxcblx0XHRcdCAge1xuXHRcdFx0ICAgICdfc2VsZWN0b3JzJzogW1xuXHRcdFx0ICAgICAge1xuXHRcdFx0ICAgICAgICAnX2tleSc6ICdhY3Rpb24nLFxuXHRcdFx0ICAgICAgICAnX3ZhbHVlJzogJ0luc3BlY3QnLFxuXHRcdFx0ICAgICAgICAnX2lzRGVjbCc6IGZhbHNlXG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgXSxcblx0XHRcdCAgICAnX3Byb3BlcnRpZXMnOiB7XG5cdFx0XHQgICAgICAncGFnZUJpbmRpbmdzJzoge1xuXHRcdFx0ICAgICAgICAnbGF5b3V0JzogJ0luc3BlY3QnLFxuXHRcdFx0ICAgICAgICAnY2xpZW50UGFuZWwnOiB0cnVlLFxuXHRcdFx0ICAgICAgICAnb3BlcmF0aW9uJzogJ3ZpZXcnLFxuXHRcdFx0ICAgICAgICAnb2JqZWN0Jzoge1xuXHRcdFx0ICAgICAgICAgICd0JzogJ0V4cHInLFxuXHRcdFx0ICAgICAgICAgICd2JzogJ29iamVjdCdcblx0XHRcdCAgICAgICAgfVxuXHRcdFx0ICAgICAgfSxcblx0XHRcdCAgICAgICd2aXNpYmxlJzogdHJ1ZSxcblx0XHRcdCAgICAgICd0cmFpdCc6ICdwYWdlQWN0aW9uJyxcblx0XHRcdCAgICAgICdwYWdlTmFtZSc6ICdNZXRhQ29udGVudFBhZ2VDb21wb25lbnQnXG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICAnX3JhbmsnOiAwXG5cdFx0XHQgIH1cblx0XHRcdF1cbn07XG5cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKipcbiAqICBAZm9ybWF0dGVyOm9uXG4gKlxuICovXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBTQVAgQXJpYmFcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiBCYXNlZCBvbiBvcmlnaW5hbCB3b3JrOiBNZXRhVUk6IENyYWlnIEZlZGVyaWdoaSAoMjAwOClcbiAqXG4gKi9cbmltcG9ydCB7VHlwZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIEFwcENvbmZpZyxcbiAgICBhc3NlcnQsXG4gICAgZGVjYW1lbGl6ZSxcbiAgICBFbnZpcm9ubWVudCxcbiAgICBGaWVsZFBhdGgsXG4gICAgaXNBcnJheSxcbiAgICBpc0JsYW5rLFxuICAgIGlzUHJlc2VudCxcbiAgICBpc1N0cmluZyxcbiAgICBpc1N0cmluZ01hcCxcbiAgICBMaXN0V3JhcHBlcixcbiAgICBNYXBXcmFwcGVyLFxuICAgIFJvdXRpbmdTZXJ2aWNlLFxuICAgIHdhcm5cbn0gZnJvbSAnQGFyaWJhdWkvY29yZSc7XG5pbXBvcnQge09iamVjdE1ldGF9IGZyb20gJy4vb2JqZWN0LW1ldGEnO1xuaW1wb3J0IHtDb21wb25lbnRSZWdpc3RyeX0gZnJvbSAnQGFyaWJhdWkvY29tcG9uZW50cyc7XG5pbXBvcnQge1xuICAgIE1ldGEsXG4gICAgUHJvcGVydHlNYXAsXG4gICAgUHJvcGVydHlNYXBBd2FraW5nLFxuICAgIFByb3BlcnR5TWVyZ2VyX0FuZCxcbiAgICBWYWx1ZVF1ZXJpZWRPYnNlcnZlclxufSBmcm9tICcuL21ldGEnO1xuaW1wb3J0IHtDb250ZXh0LCBVSUNvbnRleHR9IGZyb20gJy4vY29udGV4dCc7XG5pbXBvcnQge1N5c3RlbVJ1bGVzfSBmcm9tICcuL3dpZGdldHMtcnVsZXMnO1xuaW1wb3J0IHtEeW5hbWljUHJvcGVydHlWYWx1ZSwgU3RhdGljYWxseVJlc29sdmFibGUsIFN0YXRpY0R5bmFtaWNXcmFwcGVyfSBmcm9tICcuL3Byb3BlcnR5LXZhbHVlJztcbmltcG9ydCB7UnVsZSwgU2VsZWN0b3J9IGZyb20gJy4vcnVsZSc7XG5pbXBvcnQge0pzb25SdWxlfSBmcm9tICcuL2pzb24tcnVsZSc7XG5pbXBvcnQge0l0ZW1Qcm9wZXJ0aWVzfSBmcm9tICcuL2l0ZW0tcHJvcGVydGllcyc7XG5pbXBvcnQge1N5c3RlbVBlcnNpc3RlbmNlUnVsZXN9IGZyb20gJy4vcGVyc2lzdGVuY2UtcnVsZXMnO1xuaW1wb3J0IHtBQ1RJVkVfQ05UWH0gZnJvbSAnLi9tZXRhLWNvbnRleHQvbWV0YS1jb250ZXh0LmNvbXBvbmVudCc7XG5cblxuLyoqXG4gKiBVSU1ldGEgaXMgcmVzcG9uc2libGUgc2V0dGluZyBsYXlvdXRzIGFuZCBhbGwgYXJvdW5kIHRoaXMuIFdlIGNhbiBlaXRoZXIgdXNlIHRoaXMgYXMgYSBzaW5nbGV0b25cbiAqIG9yIHVzZSBpdCBhcyBhIHNlcnZpY2UgdXNpbmcgQW5ndWxhciBASW5qZWN0KClcbiAqIFJpZ2h0IG5vdyB3ZSB1c2Ugc3RpbGwgc2luZ2xldG9uIGFzIHdlIG5lZWQgdGhpcyBjbGFzcyBhcyBhIGxpYnJhcnkgZm9yIHNvbWUgb3RoZXIgcHJvamVjdHNcbiAqXG4gKlxuICogdG9kbzogQ29udmVydCB0byBJbmplY3RhYmxlXG4gKi9cblxuICAgIC8vIEBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBVSU1ldGEgZXh0ZW5kcyBPYmplY3RNZXRhXG57XG4gICAgc3RhdGljIEtleU9wZXJhdGlvbiA9ICdvcGVyYXRpb24nO1xuICAgIHN0YXRpYyBLZXlNb2R1bGUgPSAnbW9kdWxlJztcbiAgICBzdGF0aWMgS2V5TGF5b3V0ID0gJ2xheW91dCc7XG4gICAgc3RhdGljIEtleUFyZWEgPSAnYXJlYSc7XG4gICAgc3RhdGljIEtleUVkaXRpbmcgPSAnZWRpdGluZyc7XG4gICAgc3RhdGljIEtleUFmdGVyID0gJ2FmdGVyJztcbiAgICBzdGF0aWMgS2V5SGlkZGVuID0gJ2hpZGRlbic7XG4gICAgc3RhdGljIEtleUxhYmVsID0gJ2xhYmVsJztcbiAgICBzdGF0aWMgS2V5Q29tcG9uZW50TmFtZSA9ICdjb21wb25lbnQnO1xuICAgIHN0YXRpYyBLZXlCaW5kaW5ncyA9ICdiaW5kaW5ncyc7XG4gICAgc3RhdGljIEtleUhvbWVQYWdlID0gJ2hvbWVQYWdlJztcbiAgICBzdGF0aWMgS2V5Wm9uZVBhdGggPSAnem9uZVBhdGgnO1xuICAgIHN0YXRpYyBQcm9wRmllbGRzQnlab25lID0gJ2ZpZWxkc0J5Wm9uZSc7XG4gICAgc3RhdGljIFByb3BJc0ZpZWxkc0J5Wm9uZSA9ICdmaXZlWm9uZUxheW91dCc7XG4gICAgc3RhdGljIFByb3BBY3Rpb25zQnlDYXRlZ29yeSA9ICdhY3Rpb25zQnlDYXRlZ29yeSc7XG4gICAgc3RhdGljIFByb3BBY3Rpb25DYXRlZ29yaWVzID0gJ2FjdGlvbkNhdGVnb3JpZXMnO1xuICAgIHN0YXRpYyBQcm9wRmllbGRQcm9wZXJ0eUxpc3QgPSAnZmllbGRQcm9wZXJ0eUxpc3QnO1xuICAgIHN0YXRpYyBQcm9wTGF5b3V0c0J5Wm9uZSA9ICdsYXlvdXRzQnlab25lJztcbiAgICBzdGF0aWMgS2V5V3JhcHBlckNvbXBvbmVudCA9ICd3cmFwcGVyQ29tcG9uZW50JztcbiAgICBzdGF0aWMgS2V5V3JhcHBlckJpbmRpbmcgPSAnd3JhcHBlckJpbmRpbmdzJztcblxuXG4gICAgc3RhdGljIFJvb3RQcmVkZWNlc3NvcktleSA9ICdfcm9vdCc7XG4gICAgc3RhdGljIHJlYWRvbmx5IFpvbmVNYWluID0gJ3pNYWluJztcbiAgICBzdGF0aWMgcmVhZG9ubHkgWm9uZVRvcCA9ICd6VG9wJztcbiAgICBzdGF0aWMgcmVhZG9ubHkgWm9uZUxlZnQgPSAnekxlZnQnO1xuICAgIHN0YXRpYyByZWFkb25seSBab25lTWlkZGxlID0gJ3pNaWRkbGUnO1xuICAgIHN0YXRpYyByZWFkb25seSBab25lUmlnaHQgPSAnelJpZ2h0JztcbiAgICBzdGF0aWMgcmVhZG9ubHkgWm9uZUJvdHRvbSA9ICd6Qm90dG9tJztcbiAgICBzdGF0aWMgcmVhZG9ubHkgWm9uZURldGFpbCA9ICd6RGV0YWlsJztcblxuICAgIHN0YXRpYyByZWFkb25seSBBcHBDb25maWdSdWxlRmlsZXNQYXJhbSA9ICdtZXRhdWkucnVsZXMuZmlsZS1uYW1lcyc7XG4gICAgc3RhdGljIHJlYWRvbmx5IEFwcENvbmZpZ1VzZXJSdWxlc1BhcmFtID0gJ21ldGF1aS5ydWxlcy51c2VyLXJ1bGVzJztcblxuICAgIHN0YXRpYyBab25lc1RMUk1CID0gW1xuICAgICAgICBVSU1ldGEuWm9uZVRvcCwgVUlNZXRhLlpvbmVMZWZ0LCBVSU1ldGEuWm9uZU1pZGRsZSxcbiAgICAgICAgVUlNZXRhLlpvbmVSaWdodCwgVUlNZXRhLlpvbmVCb3R0b21cbiAgICBdO1xuICAgIHN0YXRpYyBab25lc01UTFJCID0gW1xuICAgICAgICBVSU1ldGEuWm9uZU1haW4sIFVJTWV0YS5ab25lVG9wLCBVSU1ldGEuWm9uZUxlZnQsIFVJTWV0YS5ab25lUmlnaHQsIFVJTWV0YS5ab25lQm90dG9tXG4gICAgXTtcbiAgICBzdGF0aWMgWm9uZXNEZXRhaWwgPSBbVUlNZXRhLlpvbmVEZXRhaWxdO1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBVSU1ldGEgPSBudWxsO1xuXG4gICAgc3RhdGljIE1vZHVsZUFjdGlvblpvbmVzOiBzdHJpbmdbXSA9IFsnek5hdicsICd6R2xvYmFsJ107XG4gICAgc3RhdGljIEFjdGlvblpvbmVzOiBzdHJpbmdbXSA9IFsnekdsb2JhbCcsICd6TWFpbicsICd6R2VuZXJhbCddO1xuXG5cbiAgICBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogVUlNZXRhXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2UgfHwgKHRoaXMuX2luc3RhbmNlID0gbmV3IHRoaXMoKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGRlZmF1bHRMYWJlbEZvcklkZW50aWZpZXIoZmllbGROYW1lOiBzdHJpbmcpXG4gICAge1xuICAgICAgICBsZXQgbGFzdERvdCA9IGZpZWxkTmFtZS5sYXN0SW5kZXhPZignLicpO1xuICAgICAgICBpZiAobGFzdERvdCAhPT0gLTEgJiYgbGFzdERvdCAhPT0gZmllbGROYW1lLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIGZpZWxkTmFtZSA9IGZpZWxkTmFtZS5zdWJzdHJpbmcobGFzdERvdCArIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWNhbWVsaXplKGZpZWxkTmFtZSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGJlYXV0aWZ5Q2xhc3NOYW1lKGNsYXNzTmFtZTogc3RyaW5nKTogc3RyaW5nXG4gICAge1xuICAgICAgICByZXR1cm4gZGVjYW1lbGl6ZShjbGFzc05hbWUsICcgJyk7XG4gICAgfVxuXG4gICAgc3RhdGljIGJlYXV0aWZ5RmlsZU5hbWUoZmllbGQ6IHN0cmluZyk6IHN0cmluZ1xuICAgIHtcbiAgICAgICAgcmV0dXJuIGRlY2FtZWxpemUoZmllbGQsICcgJyk7XG4gICAgfVxuXG5cbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKClcbiAgICB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgLy8gaWYgKGlzUHJlc2VudChsb2FkZXIpKSB7XG4gICAgICAgIC8vICAgICB0aGlzLnJlZ2lzdGVyTG9hZGVyKGxvYWRlcik7XG4gICAgICAgIC8vIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5iZWdpblJ1bGVTZXQoJ1VJTWV0YScpO1xuXG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyS2V5SW5pdE9ic2VydmVyKFVJTWV0YS5LZXlDbGFzcywgbmV3IFVzZXJNZXRhRGF0YVByb3ZpZGVyKCkpO1xuXG4gICAgICAgICAgICAvLyBUaGVzZSBrZXlzIGRlZmluZSBzY29wZXMgZm9yIHRoZWlyIHByb3BlcnRpZXNcbiAgICAgICAgICAgIC8vIGRlZmluZUtleUFzUHJvcGVydHlTY29wZShLZXlBcmVhKTtcbiAgICAgICAgICAgIHRoaXMuZGVmaW5lS2V5QXNQcm9wZXJ0eVNjb3BlKFVJTWV0YS5LZXlMYXlvdXQpO1xuICAgICAgICAgICAgdGhpcy5kZWZpbmVLZXlBc1Byb3BlcnR5U2NvcGUoVUlNZXRhLktleU1vZHVsZSk7XG5cbiAgICAgICAgICAgIC8vIERlZmF1bHQgcnVsZSBmb3IgY29udmVydGluZyBmaWVsZCBuYW1lIHRvIGxhYmVsXG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyRGVmYXVsdExhYmVsR2VuZXJhdG9yRm9yS2V5KFVJTWV0YS5LZXlDbGFzcyk7XG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyRGVmYXVsdExhYmVsR2VuZXJhdG9yRm9yS2V5KFVJTWV0YS5LZXlGaWVsZCk7XG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyRGVmYXVsdExhYmVsR2VuZXJhdG9yRm9yS2V5KFVJTWV0YS5LZXlMYXlvdXQpO1xuICAgICAgICAgICAgdGhpcy5yZWdpc3RlckRlZmF1bHRMYWJlbEdlbmVyYXRvckZvcktleShVSU1ldGEuS2V5TW9kdWxlKTtcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJEZWZhdWx0TGFiZWxHZW5lcmF0b3JGb3JLZXkoVUlNZXRhLktleUFjdGlvbik7XG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyRGVmYXVsdExhYmVsR2VuZXJhdG9yRm9yS2V5KFVJTWV0YS5LZXlBY3Rpb25DYXRlZ29yeSk7XG5cbiAgICAgICAgICAgIC8vIHBvbGljaWVzIGZvciBjaGFpbmluZyBjZXJ0YWluIHdlbGwga25vd24gcHJvcGVydGllc1xuICAgICAgICAgICAgdGhpcy5yZWdpc3RlclByb3BlcnR5TWVyZ2VyKFVJTWV0YS5LZXlBcmVhLCBNZXRhLlByb3BlcnR5TWVyZ2VyX0RlY2xhcmVMaXN0KTtcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJQcm9wZXJ0eU1lcmdlcihVSU1ldGEuS2V5TGF5b3V0LCBNZXRhLlByb3BlcnR5TWVyZ2VyX0RlY2xhcmVMaXN0KTtcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJQcm9wZXJ0eU1lcmdlcihVSU1ldGEuS2V5TW9kdWxlLCBNZXRhLlByb3BlcnR5TWVyZ2VyX0RlY2xhcmVMaXN0KTtcblxuICAgICAgICAgICAgdGhpcy5taXJyb3JQcm9wZXJ0eVRvQ29udGV4dChVSU1ldGEuS2V5RWRpdGluZywgVUlNZXRhLktleUVkaXRpbmcpO1xuICAgICAgICAgICAgdGhpcy5taXJyb3JQcm9wZXJ0eVRvQ29udGV4dChVSU1ldGEuS2V5TGF5b3V0LCBVSU1ldGEuS2V5TGF5b3V0KTtcbiAgICAgICAgICAgIHRoaXMubWlycm9yUHJvcGVydHlUb0NvbnRleHQoVUlNZXRhLktleUNvbXBvbmVudE5hbWUsIFVJTWV0YS5LZXlDb21wb25lbnROYW1lKTtcblxuICAgICAgICAgICAgdGhpcy5yZWdpc3RlclByb3BlcnR5TWVyZ2VyKFVJTWV0YS5LZXlFZGl0aW5nLCBuZXcgUHJvcGVydHlNZXJnZXJfQW5kKCkpO1xuXG4gICAgICAgICAgICAvLyB0aGlzLnJlZ2lzdGVyVmFsdWVUcmFuc2Zvcm1lckZvcktleSgncmVxdWVzdENvbnRleHQnLCBVSU1ldGEuVHJhbnNmb3JtZXJfS2V5UHJlc2VudCk7XG4gICAgICAgICAgICAvLyB0aGlzLnJlZ2lzdGVyVmFsdWVUcmFuc2Zvcm1lckZvcktleSgnZGlzcGxheUdyb3VwJywgVUlNZXRhLlRyYW5zZm9ybWVyX0tleVByZXNlbnQpO1xuXG4gICAgICAgICAgICAvLyBkZWZpbmUgb3BlcmF0aW9uIGhpZXJhcmNoeVxuICAgICAgICAgICAgdGhpcy5rZXlEYXRhKFVJTWV0YS5LZXlPcGVyYXRpb24pLnNldFBhcmVudCgndmlldycsICdpbnNwZWN0Jyk7XG4gICAgICAgICAgICB0aGlzLmtleURhdGEoVUlNZXRhLktleU9wZXJhdGlvbikuc2V0UGFyZW50KCdwcmludCcsICd2aWV3Jyk7XG4gICAgICAgICAgICB0aGlzLmtleURhdGEoVUlNZXRhLktleU9wZXJhdGlvbikuc2V0UGFyZW50KCdlZGl0JywgJ2luc3BlY3QnKTtcbiAgICAgICAgICAgIHRoaXMua2V5RGF0YShVSU1ldGEuS2V5T3BlcmF0aW9uKS5zZXRQYXJlbnQoJ3NlYXJjaCcsICdpbnNwZWN0Jyk7XG4gICAgICAgICAgICB0aGlzLmtleURhdGEoVUlNZXRhLktleU9wZXJhdGlvbikuc2V0UGFyZW50KCdrZXl3b3JkU2VhcmNoJywgJ3NlYXJjaCcpO1xuICAgICAgICAgICAgdGhpcy5rZXlEYXRhKFVJTWV0YS5LZXlPcGVyYXRpb24pLnNldFBhcmVudCgndGV4dFNlYXJjaCcsICdrZXl3b3JkU2VhcmNoJyk7XG5cbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJTdGF0aWNhbGx5UmVzb2x2YWJsZShVSU1ldGEuUHJvcEZpZWxkc0J5Wm9uZSxcbiAgICAgICAgICAgICAgICBuZXcgUHJvcEZpZWxkc0J5Wm9uZVJlc29sdmVyKCksXG4gICAgICAgICAgICAgICAgVUlNZXRhLktleUNsYXNzKTtcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJTdGF0aWNhbGx5UmVzb2x2YWJsZShVSU1ldGEuUHJvcEZpZWxkUHJvcGVydHlMaXN0LFxuICAgICAgICAgICAgICAgIG5ldyBQcm9wRmllbGRQcm9wZXJ0eUxpc3RSZXNvbHZlcigpLFxuICAgICAgICAgICAgICAgIFVJTWV0YS5LZXlDbGFzcyk7XG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyU3RhdGljYWxseVJlc29sdmFibGUoVUlNZXRhLlByb3BMYXlvdXRzQnlab25lLFxuICAgICAgICAgICAgICAgIG5ldyBQcm9wTGF5b3V0c0J5Wm9uZVJlc29sdmVyKCksXG4gICAgICAgICAgICAgICAgVUlNZXRhLktleUxheW91dCk7XG5cblxuICAgICAgICAgICAgLy8gdGhpcy5yZWdpc3RlclN0YXRpY2FsbHlSZXNvbHZhYmxlKFVJTWV0YS5Qcm9wTGF5b3V0c0J5Wm9uZSAsIG5ld1xuICAgICAgICAgICAgLy8gUHJvcExheW91dHNCeVpvbmVSZXNvbHZlcigpICwgVUlNZXRhLktleUxheW91dCk7XG4gICAgICAgICAgICAvLyByZWdpc3RlclN0YXRpY2FsbHlSZXNvbHZhYmxlKCdiaW5kaW5nc0RpY3Rpb25hcnknICwgZHluICwgS2V5RmllbGQpO1xuICAgICAgICAgICAgLy8gcmVnaXN0ZXJTdGF0aWNhbGx5UmVzb2x2YWJsZSgnYmluZGluZ3NEaWN0aW9uYXJ5JyAsIGR5biAsIEtleUxheW91dCk7XG4gICAgICAgICAgICAvLyByZWdpc3RlclN0YXRpY2FsbHlSZXNvbHZhYmxlKCdiaW5kaW5nc0RpY3Rpb25hcnknICwgZHluICwgS2V5Q2xhc3MpO1xuICAgICAgICAgICAgLy8gcmVnaXN0ZXJTdGF0aWNhbGx5UmVzb2x2YWJsZSgnYmluZGluZ3NEaWN0aW9uYXJ5JyAsIGR5biAsIEtleU1vZHVsZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLmVuZFJ1bGVTZXQoKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG5cbiAgICB6b25lcyhjb250ZXh0OiBDb250ZXh0KTogQXJyYXk8c3RyaW5nPlxuICAgIHtcbiAgICAgICAgbGV0IHpvbmVzOiBBcnJheTxzdHJpbmc+ID0gY29udGV4dC5wcm9wZXJ0eUZvcktleSgnem9uZXMnKTtcbiAgICAgICAgcmV0dXJuIChpc0JsYW5rKHpvbmVzKSkgPyBNZXRhLnRvTGlzdChVSU1ldGEuWm9uZU1haW4pIDogem9uZXM7XG4gICAgfVxuXG5cbiAgICB6b25lUGF0aChjb250ZXh0OiBDb250ZXh0KTogc3RyaW5nXG4gICAge1xuICAgICAgICBsZXQgem9uZVBhdGg6IGFueTtcbiAgICAgICAgaWYgKGlzUHJlc2VudChjb250ZXh0LnZhbHVlcy5nZXQoVUlNZXRhLktleUxheW91dCkpKSB7XG4gICAgICAgICAgICBjb250ZXh0LnB1c2goKTtcbiAgICAgICAgICAgIGNvbnRleHQuc2V0U2NvcGVLZXkoVUlNZXRhLktleUxheW91dCk7XG4gICAgICAgICAgICB6b25lUGF0aCA9IGNvbnRleHQucHJvcGVydHlGb3JLZXkoVUlNZXRhLktleVpvbmVQYXRoKTtcbiAgICAgICAgICAgIGNvbnRleHQucG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHpvbmVQYXRoO1xuICAgIH1cblxuXG4gICAgbmV3Q29udGV4dChpc05lc3RlZDogYm9vbGVhbiA9IGZhbHNlKTogQ29udGV4dFxuICAgIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVSUNvbnRleHQodGhpcywgaXNOZXN0ZWQpO1xuICAgIH1cblxuICAgIC8vIExvYWQgc3lzdGVtIHJ1bGVzXG4gICAgbG9hZERlZmF1bHRSdWxlRmlsZXMocmVmZXJlbmNlcz86IGFueSk6IGJvb2xlYW5cbiAgICB7XG5cbiAgICAgICAgaWYgKGlzUHJlc2VudChTeXN0ZW1SdWxlcy5vc3MpKSB7XG4gICAgICAgICAgICB0aGlzLmJlZ2luUnVsZVNldFdpdGhSYW5rKE1ldGEuU3lzdGVtUnVsZVByaW9yaXR5LCAnc3lzdGVtJyk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRSdWxlcyhTeXN0ZW1SdWxlcy5vc3MsICdzeXN0ZW0nLCBmYWxzZSk7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW5kUnVsZVNldCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzUHJlc2VudChTeXN0ZW1QZXJzaXN0ZW5jZVJ1bGVzLm9zcykpIHtcbiAgICAgICAgICAgIHRoaXMuYmVnaW5SdWxlU2V0V2l0aFJhbmsoTWV0YS5TeXN0ZW1SdWxlUHJpb3JpdHkgKyAyMDAwLCAnc3lzdGVtLXBlcnNpc3RlbmNlJyk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRSdWxlcyhTeXN0ZW1QZXJzaXN0ZW5jZVJ1bGVzLm9zcywgJ3N5c3RlbS1wZXJzaXN0ZW5jZScsIGZhbHNlKTtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmRSdWxlU2V0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJlc2VudChyZWZlcmVuY2VzKSkge1xuICAgICAgICAgICAgdGhpcy5yZWdpc3RlckNvbXBvbmVudHMocmVmZXJlbmNlcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogbG9hZHMgYXBwbGljYXRpb24gbGV2ZWwgcnVsZXMuIEFwcGxpY2F0aW9uIGxldmVsIHJ1bGVzIGFyZSBnbG9iYWwgcnVsZXNcbiAgICAgKi9cbiAgICBsb2FkQXBwbGljYXRpb25SdWxlcygpOiB2b2lkXG4gICAge1xuICAgICAgICBsZXQgYVJ1bGVzOiBBcnJheTxKc29uUnVsZT47XG4gICAgICAgIGxldCB1c2VyUmVmZXJlbmNlczogYW55W107XG4gICAgICAgIGxldCBhcHBSdWxlRmlsZXM6IHN0cmluZ1tdID0gWydBcHBsaWNhdGlvbiddO1xuXG4gICAgICAgIGlmIChpc1ByZXNlbnQodGhpcy5hcHBDb25maWcpKSB7XG4gICAgICAgICAgICBhcHBSdWxlRmlsZXMgPSB0aGlzLmFwcENvbmZpZy5nZXQoVUlNZXRhLkFwcENvbmZpZ1J1bGVGaWxlc1BhcmFtKSB8fCBbJ0FwcGxpY2F0aW9uJ107XG4gICAgICAgICAgICB1c2VyUmVmZXJlbmNlcyA9IHRoaXMuYXBwQ29uZmlnLmdldChVSU1ldGEuQXBwQ29uZmlnVXNlclJ1bGVzUGFyYW0pO1xuXG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgd2UgaGF2ZSBhbHdheXMgQXBwbGljYXRpb24gYW5kIG1ha2UgaXQgbW9yZSBhZGRpdGl2ZS5cbiAgICAgICAgICAgIGlmICghTGlzdFdyYXBwZXIuY29udGFpbnM8c3RyaW5nPihhcHBSdWxlRmlsZXMsICdBcHBsaWNhdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgYXBwUnVsZUZpbGVzLnVuc2hpZnQoJ0FwcGxpY2F0aW9uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBydWxlRmlsZSBvZiBhcHBSdWxlRmlsZXMpIHtcbiAgICAgICAgICAgIGxldCBydWxlID0gcnVsZUZpbGUgKyAnUnVsZSc7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl90ZXN0UnVsZXMuaGFzKHJ1bGUpKSB7XG4gICAgICAgICAgICAgICAgLy8gc2luY2Ugd2UgYXJlIGluIGRldmVsb3BtZW50IG1vZGUgYW5kIHRlc3QgbW9kZSBpcyBvbiB3ZSBjYW4gY2hlY2sgZXh0cmFcbiAgICAgICAgICAgICAgICAvLyByZXBvc2l0b3J5IHVzZWQgYnkgdGVzdHMsIHdlIG5lZWQgdG8gY2hlY2sgaWYgd2UgYXJlIG5vdCBydW5uaW5nIHVuaXR0ZXN0XG4gICAgICAgICAgICAgICAgLy8gYW5kIGEgY2xhc3MgaXMgbm90IGRlZmluZWQgYnV0IHVuaXR0ZXN0XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdGVzdFJ1bGVzLmhhcyhydWxlKSAmJlxuICAgICAgICAgICAgICAgICAgICBpc1ByZXNlbnQodGhpcy5fdGVzdFJ1bGVzLmdldChydWxlKS5vc3MpKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYVJ1bGVzID0gdGhpcy5fdGVzdFJ1bGVzLmdldChydWxlKS5vc3M7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzUHJlc2VudChhUnVsZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luUnVsZVNldFdpdGhSYW5rKE1ldGEuTG93UnVsZVByaW9yaXR5LCBydWxlRmlsZS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9hZFJ1bGVzKGFSdWxlcywgcnVsZUZpbGUudG9Mb3dlckNhc2UoKSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVuZFJ1bGVTZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSBpbiB1c2VyUmVmZXJlbmNlcykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdXNlclJ1bGUgPSB1c2VyUmVmZXJlbmNlc1tpXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNQcmVzZW50KHVzZXJSdWxlKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNQcmVzZW50KHVzZXJSdWxlW3J1bGVdKSAmJiBpc1ByZXNlbnQodXNlclJ1bGVbcnVsZV0ub3NzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFSdWxlcyA9IHVzZXJSdWxlW3J1bGVdLm9zcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNQcmVzZW50KGFSdWxlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmVnaW5SdWxlU2V0V2l0aFJhbmsoTWV0YS5Mb3dSdWxlUHJpb3JpdHksIHJ1bGVGaWxlLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb2FkUnVsZXMoYVJ1bGVzLCBydWxlRmlsZS50b0xvd2VyQ2FzZSgpLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW5kUnVsZVNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsb2FkVXNlclJ1bGUoc291cmNlOiBhbnksIHVzZXJDbGFzczogc3RyaW5nKTogYm9vbGVhblxuICAgIHtcblxuICAgICAgICBpZiAoaXNQcmVzZW50KHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHRoaXMuYmVnaW5SdWxlU2V0V2l0aFJhbmsodGhpcy5fcnVsZUNvdW50LCAndXNlcjonICsgdXNlckNsYXNzKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9hZFJ1bGVzKHNvdXJjZSwgJ3VzZXInLCBmYWxzZSk7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW5kUnVsZVNldCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cblxuICAgIGRlZmF1bHRMYWJlbEdlbmVyYXRvckZvcktleShrZXk6IHN0cmluZyk6IER5bmFtaWNQcm9wZXJ0eVZhbHVlXG4gICAge1xuICAgICAgICByZXR1cm4gbmV3IF9EZWZhdWx0TGFiZWxHZW5lcmF0b3Ioa2V5KTtcbiAgICB9XG5cblxuICAgIHJlZ2lzdGVyRGVyaXZlZFZhbHVlKHByb3BLZXk6IHN0cmluZywgZHluYW1pY1ZhbHVlOiBEeW5hbWljUHJvcGVydHlWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0S2V5OiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dFZhbHVlOiBzdHJpbmcpOiB2b2lkXG4gICAge1xuICAgICAgICBsZXQgbSA9IG5ldyBNYXA8c3RyaW5nLCBhbnk+KCk7XG4gICAgICAgIG0uc2V0KHByb3BLZXksIGR5bmFtaWNWYWx1ZSk7XG4gICAgICAgIHRoaXMuYWRkUnVsZShuZXcgUnVsZShNZXRhLnRvTGlzdChcbiAgICAgICAgICAgIG5ldyBTZWxlY3Rvcihjb250ZXh0S2V5LCBjb250ZXh0VmFsdWUpKSwgbSwgTWV0YS5TeXN0ZW1SdWxlUHJpb3JpdHkpKTtcbiAgICB9XG5cblxuICAgIHJlZ2lzdGVyU3RhdGljYWxseVJlc29sdmFibGUocHJvcEtleTogc3RyaW5nLCBkeW5hbWljVmFsdWU6IFN0YXRpY2FsbHlSZXNvbHZhYmxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dEtleTogc3RyaW5nKTogdm9pZFxuICAgIHtcbiAgICAgICAgdGhpcy5yZWdpc3RlckRlcml2ZWRWYWx1ZShwcm9wS2V5LCBuZXcgU3RhdGljRHluYW1pY1dyYXBwZXIoZHluYW1pY1ZhbHVlKSwgY29udGV4dEtleSxcbiAgICAgICAgICAgIE1ldGEuS2V5QW55KTtcbiAgICB9XG5cbiAgICByZWdpc3RlckRlZmF1bHRMYWJlbEdlbmVyYXRvckZvcktleShrZXk6IHN0cmluZyk6IHZvaWRcbiAgICB7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJEZXJpdmVkVmFsdWUoVUlNZXRhLktleUxhYmVsLCBuZXcgTG9jYWxpemVkTGFiZWxTdHJpbmcodGhpcyksIGtleSxcbiAgICAgICAgICAgIFVJTWV0YS5LZXlBbnkpO1xuICAgIH1cblxuICAgIGZpZWxkTGlzdChjb250ZXh0OiBDb250ZXh0KTogQXJyYXk8SXRlbVByb3BlcnRpZXM+XG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVtTGlzdChjb250ZXh0LCBVSU1ldGEuS2V5RmllbGQsIFVJTWV0YS5ab25lc1RMUk1CKTtcbiAgICB9XG5cbiAgICBmaWVsZHNCeVpvbmVzKGNvbnRleHQ6IENvbnRleHQpOiBNYXA8c3RyaW5nLCBhbnk+XG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVtc0J5Wm9uZXMoY29udGV4dCwgVUlNZXRhLktleUZpZWxkLCBVSU1ldGEuWm9uZXNUTFJNQik7XG4gICAgfVxuXG4gICAgaXRlbU5hbWVzQnlab25lcyhjb250ZXh0OiBDb250ZXh0LCBrZXk6IHN0cmluZywgem9uZXM6IHN0cmluZ1tdKTogTWFwPHN0cmluZywgYW55PlxuICAgIHtcbiAgICAgICAgbGV0IGl0ZW1zQnlab25lczogTWFwPHN0cmluZywgYW55PiA9IHRoaXMuaXRlbXNCeVpvbmVzKGNvbnRleHQsIGtleSwgem9uZXMpO1xuICAgICAgICByZXR1cm4gdGhpcy5tYXBJdGVtUHJvcHNUb05hbWVzKGl0ZW1zQnlab25lcyk7XG4gICAgfVxuXG4gICAgbWFwSXRlbVByb3BzVG9OYW1lcyhpdGVtc0J5Wm9uZXM6IE1hcDxzdHJpbmcsIGFueT4pOiBNYXA8c3RyaW5nLCBhbnk+XG4gICAge1xuICAgICAgICBsZXQgbmFtZXNCeVpvbmVzOiBNYXA8c3RyaW5nLCBhbnk+ID0gbmV3IE1hcDxzdHJpbmcsIGFueT4oKTtcblxuICAgICAgICBNYXBXcmFwcGVyLml0ZXJhYmxlKGl0ZW1zQnlab25lcykuZm9yRWFjaCgodmFsdWUsIGtleSkgPT5cbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKGlzUHJlc2VudCh2YWx1ZSkgJiYgaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmFtZXM6IHN0cmluZ1tdID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIEl0ZW1Qcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lcy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICg8SXRlbVByb3BlcnRpZXM+aXRlbSkubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmFtZXNCeVpvbmVzLnNldChrZXksIG5hbWVzKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuYW1lc0J5Wm9uZXMuc2V0KGtleSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXBJdGVtUHJvcHNUb05hbWVzKFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuYW1lc0J5Wm9uZXM7XG4gICAgfVxuXG4gICAgcHJlZGVjZXNzb3JNYXAoY29udGV4dDogQ29udGV4dCwga2V5OiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgZGVmYXVsdFByZWRlY2Vzc29yOiBzdHJpbmcpOiBNYXA8c3RyaW5nLCBBcnJheTxJdGVtUHJvcGVydGllcz4+XG4gICAge1xuICAgICAgICBsZXQgZmllbGRJbmZvczogQXJyYXk8SXRlbVByb3BlcnRpZXM+ID0gdGhpcy5pdGVtUHJvcGVydGllcyhjb250ZXh0LCBrZXksIGZhbHNlKTtcbiAgICAgICAgbGV0IHByZWRlY2Vzc29yczogTWFwPHN0cmluZywgQXJyYXk8SXRlbVByb3BlcnRpZXM+PiA9IE1hcFdyYXBwZXIuZ3JvdXBCeTxJdGVtUHJvcGVydGllcz4oXG4gICAgICAgICAgICBmaWVsZEluZm9zLCAoaXRlbTogSXRlbVByb3BlcnRpZXMpID0+XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGV0IHByZWQgPSBpdGVtLnByb3BlcnRpZXMuZ2V0KFVJTWV0YS5LZXlBZnRlcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzUHJlc2VudChwcmVkKSA/IHByZWQgOiBkZWZhdWx0UHJlZGVjZXNzb3I7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcHJlZGVjZXNzb3JzO1xuICAgIH1cblxuICAgIGl0ZW1MaXN0KGNvbnRleHQ6IENvbnRleHQsIGtleTogc3RyaW5nLCB6b25lczogc3RyaW5nW10pOiBBcnJheTxJdGVtUHJvcGVydGllcz5cbiAgICB7XG4gICAgICAgIGxldCBwcmVkZWNlc3NvcnM6IE1hcDxzdHJpbmcsIEFycmF5PEl0ZW1Qcm9wZXJ0aWVzPj4gPSB0aGlzLnByZWRlY2Vzc29yTWFwKGNvbnRleHQsIGtleSxcbiAgICAgICAgICAgIHpvbmVzWzBdKTtcbiAgICAgICAgbGV0IHJlc3VsdDogQXJyYXk8SXRlbVByb3BlcnRpZXM+ID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgem9uZSBvZiB6b25lcykge1xuICAgICAgICAgICAgdGhpcy5hY2N1bXVsYXRlUHJlY2Vzc29ycyhwcmVkZWNlc3NvcnMsIHpvbmUsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBpc1pvbmVSZWZlcmVuY2Uoa2V5OiBzdHJpbmcpOiBib29sZWFuXG4gICAge1xuICAgICAgICAvLyBrZXlzIG9mIHRoZSBmb3JtICd6PE5hbWU+JyBhbmQgJ2Zvby5iYXIuejxOYW1lPicgYXJlIGNvbnNpZGVyZWQgem9uZSBrZXlzXG4gICAgICAgIGxldCBsYXN0RG90ID0ga2V5Lmxhc3RJbmRleE9mKCcuJyk7XG4gICAgICAgIGxldCBzdWZmaXggPSAobGFzdERvdCA9PT0gLTEpID8ga2V5IDoga2V5LnN1YnN0cmluZyhsYXN0RG90ICsgMSk7XG4gICAgICAgIHJldHVybiAoc3VmZml4Lmxlbmd0aCA+IDEpICYmIChzdWZmaXhbMF0gPT09ICd6JykgJiYgKFxuICAgICAgICAgICAgc3VmZml4WzFdLnRvVXBwZXJDYXNlKCkgPT09IHN1ZmZpeFsxXSAvLyBpcyB1cHBlcmNhc2UgP3NcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpdGVtc0J5Wm9uZXMoY29udGV4dDogQ29udGV4dCwgcHJvcGVydHk6IHN0cmluZywgem9uZXM6IHN0cmluZ1tdKTogTWFwPHN0cmluZywgYW55PlxuICAgIHtcbiAgICAgICAgbGV0IHByZWRlY2Vzc29ycyA9IHRoaXMucHJlZGVjZXNzb3JNYXAoY29udGV4dCwgcHJvcGVydHksIHpvbmVzWzBdKTtcbiAgICAgICAgbGV0IGJ5Wm9uZSA9IG5ldyBNYXA8c3RyaW5nLCBhbnk+KCk7XG5cblxuICAgICAgICBNYXBXcmFwcGVyLml0ZXJhYmxlKHByZWRlY2Vzc29ycykuZm9yRWFjaCgodmFsdWUsIHpvbmUpID0+XG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzWm9uZVJlZmVyZW5jZSh6b25lKSkge1xuICAgICAgICAgICAgICAgIGxldCBsaXN0OiBhbnlbXSA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMuYWNjdW11bGF0ZVByZWNlc3NvcnMocHJlZGVjZXNzb3JzLFxuICAgICAgICAgICAgICAgICAgICB6b25lLCBsaXN0KTtcblxuICAgICAgICAgICAgICAgIEZpZWxkUGF0aC5zZXRGaWVsZFZhbHVlKGJ5Wm9uZSwgem9uZSwgbGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBieVpvbmU7XG4gICAgfVxuXG4gICAgLy8gcmVjdXJzaXZlIGRlY2VudCBvZiBwcmVkZWNlc3NvciB0cmVlLi4uXG4gICAgYWNjdW11bGF0ZVByZWNlc3NvcnMocHJlZGVjZXNzb3JzOiBNYXA8c3RyaW5nLCBBcnJheTxJdGVtUHJvcGVydGllcz4+LCBrZXk6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IGFueSk6IHZvaWRcbiAgICB7XG4gICAgICAgIGxldCBpdGVtczogQXJyYXk8SXRlbVByb3BlcnRpZXM+ID0gcHJlZGVjZXNzb3JzLmdldChrZXkpO1xuICAgICAgICBpZiAoaXNCbGFuayhpdGVtcykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIExpc3RXcmFwcGVyLnNvcnQ8SXRlbVByb3BlcnRpZXM+KGl0ZW1zLCAobzEsIG8yKSA9PlxuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgcjEgPSBvMS5wcm9wZXJ0aWVzLmdldChVSU1ldGEuS2V5UmFuayk7XG4gICAgICAgICAgICBsZXQgcjIgPSBvMi5wcm9wZXJ0aWVzLmdldChVSU1ldGEuS2V5UmFuayk7XG5cbiAgICAgICAgICAgIGlmIChyMSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHIxID0gMTAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHIyID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcjIgPSAxMDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAocjEgPT09IHIyKSA/IDAgOiAocjEgPT09IG51bGwpID8gMSA6IChyMiA9PT0gbnVsbCkgPyAtMSA6IChyMSAtIHIyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBpdGVtcykge1xuICAgICAgICAgICAgaWYgKCFpdGVtLmhpZGRlbikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hY2N1bXVsYXRlUHJlY2Vzc29ycyhwcmVkZWNlc3NvcnMsIGl0ZW0ubmFtZSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxlZCBieSBQYXJzZXIgdG8gaGFuZGxlIGRlY2xzIGxpa2UgJ3pMZWZ0ID0+IGxhc3ROYW1lI3JlcXVpcmVkJ1xuICAgICAqXG4gICAgICovXG4gICAgYWRkUHJlZGVjZXNzb3JSdWxlKGl0ZW1OYW1lOiBzdHJpbmcsIGNvbnRleHRQcmVkczogQXJyYXk8U2VsZWN0b3I+LCBwcmVkZWNlc3Nvcjogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICB0cmFpdHM6IGFueSxcbiAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogbnVtYmVyKTogUnVsZVxuICAgIHtcbiAgICAgICAgaWYgKGlzQmxhbmsocHJlZGVjZXNzb3IpICYmIGlzQmxhbmsodHJhaXRzKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQga2V5OiBzdHJpbmcgPSB0aGlzLnNjb3BlS2V5Rm9yU2VsZWN0b3IoY29udGV4dFByZWRzKTtcbiAgICAgICAgaWYgKGlzQmxhbmsoa2V5KSB8fCBrZXkgPT09IFVJTWV0YS5LZXlDbGFzcykge1xuICAgICAgICAgICAga2V5ID0gVUlNZXRhLktleUZpZWxkO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzZWxlY3RvcjogQXJyYXk8U2VsZWN0b3I+ID0gbmV3IEFycmF5PFNlbGVjdG9yPigpO1xuICAgICAgICBMaXN0V3JhcHBlci5hZGRBbGw8U2VsZWN0b3I+KHNlbGVjdG9yLCBjb250ZXh0UHJlZHMpO1xuXG4gICAgICAgIHNlbGVjdG9yLnB1c2gobmV3IFNlbGVjdG9yKGtleSwgaXRlbU5hbWUpKTtcbiAgICAgICAgbGV0IHByb3BzOiBNYXA8c3RyaW5nLCBhbnk+ID0gbmV3IE1hcDxzdHJpbmcsIGFueT4oKTtcblxuICAgICAgICBpZiAoaXNQcmVzZW50KHByZWRlY2Vzc29yKSkge1xuICAgICAgICAgICAgcHJvcHMuc2V0KFVJTWV0YS5LZXlBZnRlciwgcHJlZGVjZXNzb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzUHJlc2VudCh0cmFpdHMpKSB7XG4gICAgICAgICAgICBwcm9wcy5zZXQoVUlNZXRhLktleVRyYWl0LCB0cmFpdHMpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBydWxlID0gbmV3IFJ1bGUoc2VsZWN0b3IsIHByb3BzLCAwLCBsaW5lTnVtYmVyKTtcbiAgICAgICAgdGhpcy5hZGRSdWxlKHJ1bGUpO1xuICAgICAgICByZXR1cm4gcnVsZTtcbiAgICB9XG5cbiAgICBmbGF0dGVuVmlzaWJsZShmaWVsZHNCeVpvbmVzOiBNYXA8c3RyaW5nLCBBcnJheTxzdHJpbmc+Piwgem9uZUxpc3Q6IHN0cmluZ1tdLCBrZXk6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICBjb250ZXh0OiBDb250ZXh0KTogc3RyaW5nW11cbiAgICB7XG4gICAgICAgIGxldCByZXN1bHQ6IHN0cmluZ1tdID0gW107XG5cbiAgICAgICAgaWYgKGlzUHJlc2VudChmaWVsZHNCeVpvbmVzKSkge1xuXG4gICAgICAgICAgICBmb3IgKGxldCB6b25lIG9mICB6b25lTGlzdCkge1xuICAgICAgICAgICAgICAgIGxldCBmaWVsZHM6IHN0cmluZ1tdID0gZmllbGRzQnlab25lcy5nZXQoem9uZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNCbGFuayhmaWVsZHMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGZpZWxkIG9mIGZpZWxkcykge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnB1c2goKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zZXQoa2V5LCBmaWVsZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250ZXh0LmJvb2xlYW5Qcm9wZXJ0eUZvcktleShVSU1ldGEuS2V5VmlzaWJsZSwgZmFsc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChmaWVsZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5wb3AoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBkaXNwbGF5S2V5Rm9yQ2xhc3MoY2xhc3NOYW1lOiBzdHJpbmcpOiBzdHJpbmdcbiAgICB7XG4gICAgICAgIC8vIHBlcmZvcm1hbmNlOiBzaG91bGQgdXNlIHJlZ2lzdGVyRGVyaXZlZFZhbHVlKCcuLi4nLCBuZXcgQ29udGV4dC5TdGF0aWNEeW5hbWljV3JhcHBlclxuICAgICAgICAvLyB0byBnZXQgY2FjaGVkIHJlc29sdXRpb24gaGVyZS4uLlxuICAgICAgICBsZXQgY29udGV4dCA9IHRoaXMubmV3Q29udGV4dCgpO1xuICAgICAgICBjb250ZXh0LnNldChVSU1ldGEuS2V5TGF5b3V0LCAnTGFiZWxGaWVsZCcpO1xuICAgICAgICBjb250ZXh0LnNldChVSU1ldGEuS2V5Q2xhc3MsIGNsYXNzTmFtZSk7XG4gICAgICAgIGxldCBmaWVsZHM6IEFycmF5PEl0ZW1Qcm9wZXJ0aWVzPiA9IHRoaXMuaXRlbVByb3BlcnRpZXMoY29udGV4dCwgVUlNZXRhLktleUZpZWxkLCB0cnVlKTtcblxuICAgICAgICByZXR1cm4gTGlzdFdyYXBwZXIuaXNFbXB0eShmaWVsZHMpID8gJyR0b1N0cmluZycgOiBmaWVsZHNbMF0ubmFtZTtcbiAgICB9XG5cblxuICAgIGRpc3BsYXlMYWJlbChjbGFzc05hbWU6IHN0cmluZywgcHJvcGVydGllc1ZhbHVlOiBzdHJpbmcpOiBzdHJpbmdcbiAgICB7XG5cbiAgICAgICAgaWYgKGlzUHJlc2VudChwcm9wZXJ0aWVzVmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvcGVydGllc1ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmRpc3BsYXlLZXlGb3JDbGFzcyhjbGFzc05hbWUpO1xuICAgIH1cblxuXG4gICAgY3JlYXRlTG9jYWxpemVkU3RyaW5nKGtleTogc3RyaW5nLCBkZWZhdWx0VmFsdWU6IHN0cmluZyk6IExvY2FsaXplZFN0cmluZ1xuICAgIHtcbiAgICAgICAgYXNzZXJ0KGlzUHJlc2VudCh0aGlzLl9jdXJyZW50UnVsZVNldCksXG4gICAgICAgICAgICAnQXR0ZW1wdCB0byBjcmVhdGUgbG9jYWxpemVkIHN0cmluZyB3aXRob3V0IGN1cnJlbnRSdWxlU2V0IGluIHBsYWNlJyk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBMb2NhbGl6ZWRTdHJpbmcodGhpcywgdGhpcy5fY3VycmVudFJ1bGVTZXQuZmlsZVBhdGgsIGtleSwgZGVmYXVsdFZhbHVlKTtcbiAgICB9XG5cblxuICAgIGdldCByb3V0aW5nU2VydmljZSgpOiBSb3V0aW5nU2VydmljZVxuICAgIHtcbiAgICAgICAgcmV0dXJuIChpc1ByZXNlbnQodGhpcy5faW5qZWN0b3IpKSA/IHRoaXMuX2luamVjdG9yLmdldDxSb3V0aW5nU2VydmljZT4oUm91dGluZ1NlcnZpY2UpXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgfVxuXG4gICAgZ2V0IGVudigpOiBFbnZpcm9ubWVudFxuICAgIHtcbiAgICAgICAgcmV0dXJuIChpc1ByZXNlbnQodGhpcy5faW5qZWN0b3IpKSA/IHRoaXMuX2luamVjdG9yLmdldChFbnZpcm9ubWVudCkgOiBuZXcgRW52aXJvbm1lbnQoKTtcbiAgICB9XG5cblxuICAgIGdldCBhcHBDb25maWcoKTogQXBwQ29uZmlnXG4gICAge1xuICAgICAgICByZXR1cm4gKGlzUHJlc2VudCh0aGlzLl9pbmplY3RvcikpID8gdGhpcy5faW5qZWN0b3IuZ2V0KEFwcENvbmZpZykgOiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBmcmFtZXdvcmsgbGV2ZWwgY29tcG9uZW50cyBhbmQgbGlzdGVuIGZvciB1c2VyIGxldmVsIHJ1bGVzIHRvIGJlIHJlZ2lzdGVyZWQuXG4gICAgICogQWZ0ZXIgd2UgcmVnaXN0ZXIgdXNlciBsZXZlbCBydWxlcyBpdCB3aWxsIGxvYWQgYXBwbGljYXRpb24ub3NzLlxuICAgICAqXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIHJlZ2lzdGVyQ29tcG9uZW50cyhzeXNSZWZlcmVuY2VzOiBhbnkpOiB2b2lkXG4gICAge1xuICAgICAgICBhc3NlcnQoaXNQcmVzZW50KHRoaXMuaW5qZWN0b3IpLCAnQ2Fubm90IHJlZ2lzdGVyIGNvbXBvbmVudHMgd2l0aG91dCBJbmplY3RvciBpbiBvcmRlcicgK1xuICAgICAgICAgICAgJyB0byBnZXQgYWNjZXNzIHRvIENvbXBvbmVudFJlZ2lzdHJ5IFNlcnZpY2UnKTtcblxuICAgICAgICBhc3NlcnQodGhpcy5lbnYuaW5UZXN0IHx8IGlzUHJlc2VudCh0aGlzLmFwcENvbmZpZy5nZXQoVUlNZXRhLkFwcENvbmZpZ1VzZXJSdWxlc1BhcmFtKSksXG4gICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgTWV0YVVJIGFzIHVzZXIgcnVsZXMgYXJlIG1pc3NpbmcuIHBsZWFzZSB1c2U6JyArXG4gICAgICAgICAgICAnIG1ldGF1aS5ydWxlcy51c2VyLXJ1bGVzIGNvbmZpZ3VyYXRpb24gcGFyYW0nKTtcblxuICAgICAgICB0aGlzLmNvbXBvbmVudFJlZ2lzdHJ5ID0gdGhpcy5pbmplY3Rvci5nZXQoQ29tcG9uZW50UmVnaXN0cnkpO1xuICAgICAgICBpZiAoaXNQcmVzZW50KHRoaXMuY29tcG9uZW50UmVnaXN0cnkpKSB7XG5cbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50UmVnaXN0cnkucmVnaXN0ZXJUeXBlcyhzeXNSZWZlcmVuY2VzKTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLmVudi5pblRlc3QpIHtcbiAgICAgICAgICAgICAgICBsZXQgdXNlclJlZmVyZW5jZXM6IGFueVtdID0gdGhpcy5hcHBDb25maWcuZ2V0KFVJTWV0YS5BcHBDb25maWdVc2VyUnVsZXNQYXJhbSk7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdVJ1bGUgb2YgdXNlclJlZmVyZW5jZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wb25lbnRSZWdpc3RyeS5yZWdpc3RlclR5cGVzKHVSdWxlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkQXBwbGljYXRpb25SdWxlcygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuZW52LmluVGVzdCkge1xuICAgICAgICAgICAgd2FybignVUlNZXRhLnJlZ2lzdGVyQ29tcG9uZW50cygpIE5vIGNvbXBvbmVudHMgd2VyZSByZWdpc3RlcmVkICEnKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEp1c3QgbmVlZCB0byBjYWxsIGl0IGRpZmZlcmVudCB0aGFuIHRoZSBvdGhlciBmaXJlQWN0aW9uIGFzIEkgY2FuIG5vdCBkbyBhbnkgbWV0aG9kXG4gICAgICogb3ZlcmxvYWRpbmcgaGVyZS5cbiAgICAgKlxuICAgICAqL1xuICAgIGZpcmVBY3Rpb25Gcm9tUHJvcHMoYWN0aW9uOiBJdGVtUHJvcGVydGllcywgY29udGV4dDogQ29udGV4dCk6IHZvaWRcbiAgICB7XG4gICAgICAgIGNvbnRleHQucHVzaCgpO1xuICAgICAgICBsZXQgYWN0aW9uQ2F0ZWdvcnkgPSBhY3Rpb24ucHJvcGVydGllcy5nZXQoT2JqZWN0TWV0YS5LZXlBY3Rpb25DYXRlZ29yeSk7XG4gICAgICAgIGlmIChpc0JsYW5rKGFjdGlvbkNhdGVnb3J5KSkge1xuICAgICAgICAgICAgYWN0aW9uQ2F0ZWdvcnkgPSBPYmplY3RNZXRhLkRlZmF1bHRBY3Rpb25DYXRlZ29yeTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LnNldChPYmplY3RNZXRhLktleUFjdGlvbkNhdGVnb3J5LCBhY3Rpb25DYXRlZ29yeSk7XG4gICAgICAgIGNvbnRleHQuc2V0KE9iamVjdE1ldGEuS2V5QWN0aW9uLCBhY3Rpb24ubmFtZSk7XG5cbiAgICAgICAgdGhpcy5fZmlyZUFjdGlvbihjb250ZXh0LCBmYWxzZSk7XG4gICAgICAgIGNvbnRleHQucG9wKCk7XG5cbiAgICB9XG5cbiAgICBmaXJlQWN0aW9uKGNvbnRleHQ6IFVJQ29udGV4dCwgd2l0aEJhY2tBY3Rpb246IGJvb2xlYW4gPSBmYWxzZSk6IHZvaWRcbiAgICB7XG4gICAgICAgIGNvbnRleHQucHVzaCgpO1xuICAgICAgICB0aGlzLl9maXJlQWN0aW9uKGNvbnRleHQsIHdpdGhCYWNrQWN0aW9uKTtcbiAgICAgICAgY29udGV4dC5wb3AoKTtcblxuICAgIH1cblxuICAgIHByaXZhdGUgX2ZpcmVBY3Rpb24oY29udGV4dDogQ29udGV4dCwgd2l0aEJhY2tBY3Rpb246IGJvb2xlYW4pOiB2b2lkXG4gICAge1xuICAgICAgICBsZXQgYWN0aW9uUmVzdWx0cyA9IGNvbnRleHQucHJvcGVydHlGb3JLZXkoJ2FjdGlvblJlc3VsdHMnKTtcbiAgICAgICAgaWYgKGlzQmxhbmsoYWN0aW9uUmVzdWx0cykgfHwgIXRoaXMuaXNSb3V0ZShhY3Rpb25SZXN1bHRzKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmF2aWF0ZVRvUGFnZShjb250ZXh0LCBhY3Rpb25SZXN1bHRzLCB3aXRoQmFja0FjdGlvbik7XG4gICAgfVxuXG4gICAgbmF2aWF0ZVRvUGFnZShjb250ZXh0OiBDb250ZXh0LCByb3V0ZTogYW55LCB3aXRoQmFja0FjdGlvbjogYm9vbGVhbik6IHZvaWRcbiAgICB7XG4gICAgICAgIGxldCBwYXJhbXMgPSB0aGlzLnByZXBhcmVSb3V0ZShjb250ZXh0LCB3aXRoQmFja0FjdGlvbik7XG5cbiAgICAgICAgbGV0IHVpQ29udGV4OiBVSUNvbnRleHQgPSA8VUlDb250ZXh0PiBjb250ZXh0O1xuICAgICAgICB0aGlzLnJvdXRpbmdTZXJ2aWNlLm5hdmlnYXRlV2l0aFJvdXRlKHJvdXRlLCBwYXJhbXMsIHVpQ29udGV4Lm9iamVjdCk7XG4gICAgfVxuXG5cbiAgICBwcmVwYXJlUm91dGUoY29udGV4dDogQ29udGV4dCwgd2l0aEJhY2tBY3Rpb246IGJvb2xlYW4pOiBhbnlcbiAgICB7XG4gICAgICAgIGxldCBwYXJhbXMgPSB7fTtcbiAgICAgICAgbGV0IHBhZ2VCaW5kaW5ncyA9IGNvbnRleHQucHJvcGVydHlGb3JLZXkoJ3BhZ2VCaW5kaW5ncycpO1xuICAgICAgICBpZiAoaXNQcmVzZW50KHBhZ2VCaW5kaW5ncykpIHtcbiAgICAgICAgICAgIHBhZ2VCaW5kaW5ncy5mb3JFYWNoKCh2OiBhbnksIGs6IGFueSkgPT5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAoayAhPT0gT2JqZWN0TWV0YS5LZXlPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgKDxhbnk+cGFyYW1zKVtrXSA9IGNvbnRleHQucmVzb2x2ZVZhbHVlKHYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGlzUHJlc2VudCh3aXRoQmFja0FjdGlvbikpIHtcbiAgICAgICAgICAgICAgICAoPGFueT5wYXJhbXMpWydiJ10gPSB3aXRoQmFja0FjdGlvbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9XG5cblxuICAgIHByZXBhcmVSb3V0ZUZvckNvbXBvbmVudChjb21wb25lbnQ6IGFueSwgY29udGV4dDogQ29udGV4dCwgd2l0aEJhY2tBY3Rpb246IGJvb2xlYW4pOiBhbnlcbiAgICB7XG4gICAgICAgIGxldCBwYXJhbXMgPSB7fTtcbiAgICAgICAgbGV0IHBhZ2VCaW5kaW5ncyA9IGNvbnRleHQucHJvcGVydHlGb3JLZXkoJ3BhZ2VCaW5kaW5ncycpO1xuICAgICAgICBpZiAoaXNQcmVzZW50KHBhZ2VCaW5kaW5ncykpIHtcbiAgICAgICAgICAgIHBhZ2VCaW5kaW5ncy5mb3JFYWNoKCh2OiBhbnksIGs6IGFueSkgPT5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRba10gPSB2O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgIH1cblxuXG4gICAgZ290b01vZHVsZShtb2R1bGU6IEl0ZW1Qcm9wZXJ0aWVzLCBhY3RpdmF0ZWRQYXRoPzogc3RyaW5nKTogdm9pZFxuICAgIHtcblxuICAgICAgICB0aGlzLmVudi5kZWxldGVWYWx1ZShBQ1RJVkVfQ05UWCk7XG4gICAgICAgIGxldCBjb250ZXh0ID0gdGhpcy5uZXdDb250ZXh0KCk7XG5cblxuICAgICAgICBjb250ZXh0LnB1c2goKTtcbiAgICAgICAgY29udGV4dC5zZXQoVUlNZXRhLktleU1vZHVsZSwgbW9kdWxlLm5hbWUpO1xuICAgICAgICBsZXQgcGFnZU5hbWUgPSBjb250ZXh0LnByb3BlcnR5Rm9yS2V5KFVJTWV0YS5LZXlIb21lUGFnZSk7XG5cblxuICAgICAgICBsZXQgcm91dGUgPSB0aGlzLnJvdXRpbmdTZXJ2aWNlLnJvdXRlRm9yUGFnZShwYWdlTmFtZSwgbW9kdWxlLm5hbWUudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgIGFjdGl2YXRlZFBhdGgpO1xuICAgICAgICBpZiAoYWN0aXZhdGVkUGF0aCA9PT0gJy8nKSB7XG4gICAgICAgICAgICBhY3RpdmF0ZWRQYXRoID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHBhdGggPSBgJHthY3RpdmF0ZWRQYXRofS8ke3JvdXRlLnBhdGh9YDtcblxuICAgICAgICBsZXQgcGFyYW1zID0gdGhpcy5wcmVwYXJlUm91dGUoY29udGV4dCwgbnVsbCk7XG4gICAgICAgIGNvbnRleHQucG9wKCk7XG5cbiAgICAgICAgdGhpcy5yb3V0aW5nU2VydmljZS5uYXZpZ2F0ZShbcGF0aCwgcGFyYW1zXSwge3NraXBMb2NhdGlvbkNoYW5nZTogdHJ1ZX0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNSb3V0ZShhY3Rpb25SZXN1bHQ6IGFueSk6IGJvb2xlYW5cbiAgICB7XG4gICAgICAgIHJldHVybiBpc1N0cmluZ01hcChhY3Rpb25SZXN1bHQpICYmIGlzUHJlc2VudChhY3Rpb25SZXN1bHRbJ3BhdGgnXSk7XG5cbiAgICB9XG5cbiAgICBjb21wUGFnZVdpdGhOYW1lKG5hbWU6IHN0cmluZyk6IFR5cGU8YW55PlxuICAgIHtcbiAgICAgICAgbGV0IGN1cnJUeXBlID0gdGhpcy5jb21wb25lbnRSZWdpc3RyeS5uYW1lVG9UeXBlLmdldChuYW1lKTtcbiAgICAgICAgaWYgKGlzQmxhbmsoY3VyclR5cGUpKSB7XG4gICAgICAgICAgICBhc3NlcnQoZmFsc2UsIG5hbWUgKyAnIGNvbXBvbmVudCBkb2VzIG5vdCBleGlzdHMuIENyZWF0ZSBEdW1teSBDb21wb25lbnQgaW5zdGVhZCBvZicgK1xuICAgICAgICAgICAgICAgICcgdGhyb3dpbmcgdGhpcyBlcnJvcicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdXJyVHlwZTtcbiAgICB9XG5cblxuICAgIC8vIGNhbGxlciBtdXN0IHB1c2gvcG9wIVxuICAgIGFjdGlvbnNCeUNhdGVnb3J5KGNvbnRleHQ6IENvbnRleHQsIHJlc3VsdDogTWFwPHN0cmluZywgQXJyYXk8SXRlbVByb3BlcnRpZXM+PixcbiAgICAgICAgICAgICAgICAgICAgICB6b25lczogc3RyaW5nW10pOiBBcnJheTxJdGVtUHJvcGVydGllcz5cbiAgICB7XG4gICAgICAgIGxldCBjYXROYW1lczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgbGV0IGFjdGlvbkNhdGVnb3JpZXMgPSB0aGlzLml0ZW1MaXN0KGNvbnRleHQsIE9iamVjdE1ldGEuS2V5QWN0aW9uQ2F0ZWdvcnksIHpvbmVzKTtcblxuICAgICAgICBpZiAoaXNQcmVzZW50KGFjdGlvbkNhdGVnb3JpZXMpKSB7XG4gICAgICAgICAgICBhY3Rpb25DYXRlZ29yaWVzLmZvckVhY2goKGl0ZW06IEl0ZW1Qcm9wZXJ0aWVzKSA9PiBjYXROYW1lcy5wdXNoKGl0ZW0ubmFtZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hZGRBY3Rpb25zRm9yQ2F0ZWdvcmllcyhjb250ZXh0LCByZXN1bHQsIGNhdE5hbWVzKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbkNhdGVnb3JpZXM7XG4gICAgfVxuXG4gICAgYWRkQWN0aW9uc0ZvckNhdGVnb3JpZXMoY29udGV4dDogQ29udGV4dCwgcmVzdWx0OiBNYXA8c3RyaW5nLCBBcnJheTxJdGVtUHJvcGVydGllcz4+LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdE5hbWVzOiBzdHJpbmdbXSk6IHZvaWRcbiAgICB7XG4gICAgICAgIGZvciAobGV0IGNhdCBvZiBjYXROYW1lcykge1xuICAgICAgICAgICAgY29udGV4dC5wdXNoKCk7XG4gICAgICAgICAgICBpZiAoY2F0ICE9PSBPYmplY3RNZXRhLkRlZmF1bHRBY3Rpb25DYXRlZ29yeSkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuc2V0KE9iamVjdE1ldGEuS2V5QWN0aW9uQ2F0ZWdvcnksIGNhdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuY29sbGVjdEFjdGlvbnNCeUNhdGVnb3J5KGNvbnRleHQsIHJlc3VsdCwgY2F0KTtcbiAgICAgICAgICAgIGNvbnRleHQucG9wKCk7XG4gICAgICAgIH1cblxuICAgIH1cblxuXG4gICAgY29sbGVjdEFjdGlvbnNCeUNhdGVnb3J5KGNvbnRleHQ6IENvbnRleHQsIHJlc3VsdDogTWFwPHN0cmluZywgQXJyYXk8SXRlbVByb3BlcnRpZXM+PixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Q2F0OiBzdHJpbmcpOiB2b2lkXG4gICAge1xuICAgICAgICBsZXQgYWN0aW9uSW5mb3M6IEl0ZW1Qcm9wZXJ0aWVzW10gPSB0aGlzLml0ZW1Qcm9wZXJ0aWVzKGNvbnRleHQsIE9iamVjdE1ldGEuS2V5QWN0aW9uLFxuICAgICAgICAgICAgdHJ1ZSk7XG4gICAgICAgIGZvciAobGV0IGFjdGlvbkluZm8gb2YgYWN0aW9uSW5mb3MpIHtcbiAgICAgICAgICAgIGNvbnRleHQucHVzaCgpO1xuICAgICAgICAgICAgY29udGV4dC5zZXQoT2JqZWN0TWV0YS5LZXlBY3Rpb24sIGFjdGlvbkluZm8ubmFtZSk7XG5cbiAgICAgICAgICAgIGxldCB2aXNpYmxlID0gY29udGV4dC5ib29sZWFuUHJvcGVydHlGb3JLZXkoT2JqZWN0TWV0YS5LZXlWaXNpYmxlLCB0cnVlKTtcbiAgICAgICAgICAgIGNvbnRleHQucG9wKCk7XG5cbiAgICAgICAgICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNhdGVnb3J5ID0gYWN0aW9uSW5mby5wcm9wZXJ0aWVzLmdldChPYmplY3RNZXRhLktleUFjdGlvbkNhdGVnb3J5KTtcblxuICAgICAgICAgICAgICAgIGlmIChjYXRlZ29yeSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5ID0gT2JqZWN0TWV0YS5EZWZhdWx0QWN0aW9uQ2F0ZWdvcnk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRDYXQgIT09IGNhdGVnb3J5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBmb3JDYXRlZ29yeTogSXRlbVByb3BlcnRpZXNbXSA9IHJlc3VsdC5nZXQoY2F0ZWdvcnkpO1xuICAgICAgICAgICAgICAgIGlmIChpc0JsYW5rKGZvckNhdGVnb3J5KSkge1xuICAgICAgICAgICAgICAgICAgICBmb3JDYXRlZ29yeSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc2V0KGNhdGVnb3J5LCBmb3JDYXRlZ29yeSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvckNhdGVnb3J5LnB1c2goYWN0aW9uSW5mbyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGNvbXB1dGVNb2R1bGVJbmZvKGNvbnRleHQ6IENvbnRleHQgPSB0aGlzLm5ld0NvbnRleHQoKSxcbiAgICAgICAgICAgICAgICAgICAgICBjaGVja1Zpc2liaWxpdHk6IGJvb2xlYW4gPSB0cnVlKTogTW9kdWxlSW5mb1xuICAgIHtcblxuICAgICAgICBsZXQgbW9kdWxlSW5mbzogTW9kdWxlSW5mbyA9IG5ldyBNb2R1bGVJbmZvKCk7XG4gICAgICAgIG1vZHVsZUluZm8ubW9kdWxlcyA9IFtdO1xuXG4gICAgICAgIGxldCBhbGxNb2R1bGVQcm9wczogQXJyYXk8SXRlbVByb3BlcnRpZXM+ID0gdGhpcy5pdGVtTGlzdChjb250ZXh0LCBVSU1ldGEuS2V5TW9kdWxlLFxuICAgICAgICAgICAgVUlNZXRhLkFjdGlvblpvbmVzKTtcbiAgICAgICAgbW9kdWxlSW5mby5tb2R1bGVOYW1lcyA9IFtdO1xuICAgICAgICBtb2R1bGVJbmZvLm1vZHVsZUJ5TmFtZXMgPSBuZXcgTWFwPHN0cmluZywgSXRlbVByb3BlcnRpZXM+KCk7XG5cbiAgICAgICAgZm9yIChsZXQgbW9kdWxlIG9mIGFsbE1vZHVsZVByb3BzKSB7XG5cbiAgICAgICAgICAgIGNvbnRleHQucHVzaCgpO1xuICAgICAgICAgICAgY29udGV4dC5zZXQoVUlNZXRhLktleU1vZHVsZSwgbW9kdWxlLm5hbWUpO1xuXG4gICAgICAgICAgICBpZiAoY2hlY2tWaXNpYmlsaXR5ICYmICFjb250ZXh0LmJvb2xlYW5Qcm9wZXJ0eUZvcktleShVSU1ldGEuS2V5VmlzaWJsZSwgdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnBvcCgpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtb2R1bGVJbmZvLm1vZHVsZU5hbWVzLnB1c2gobW9kdWxlLm5hbWUpO1xuXG4gICAgICAgICAgICAvLyAvLyB0b2RvOiBjcmVhdGUgdHlwZXNjcmlwdCBhbm90YXRpb25cbiAgICAgICAgICAgIC8vIGNvbnRleHQucHVzaCgpO1xuICAgICAgICAgICAgLy8gY29udGV4dC5zZXQoXCJob21lRm9yQ2xhc3Nlc1wiLCB0cnVlKTtcbiAgICAgICAgICAgIC8vIGxldCBob21lQ2xhc3NlczogQXJyYXk8c3RyaW5nPiA9IHRoaXMuaXRlbU5hbWVzKGNvbnRleHQsIFVJTWV0YS5LZXlDbGFzcyk7XG4gICAgICAgICAgICAvLyBjb250ZXh0LnBvcCgpO1xuXG5cbiAgICAgICAgICAgIGxldCBtb2RQcm9wZXJ0aWVzID0gbmV3IEl0ZW1Qcm9wZXJ0aWVzKG1vZHVsZS5uYW1lLCBjb250ZXh0LmFsbFByb3BlcnRpZXMoKSwgZmFsc2UpO1xuICAgICAgICAgICAgbW9kdWxlSW5mby5tb2R1bGVzLnB1c2gobW9kUHJvcGVydGllcyk7XG5cbiAgICAgICAgICAgIG1vZHVsZUluZm8ubW9kdWxlQnlOYW1lcy5zZXQobW9kdWxlLm5hbWUsIG1vZFByb3BlcnRpZXMpO1xuXG4gICAgICAgICAgICBjb250ZXh0LnBvcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5wdXNoKCk7XG4gICAgICAgIGNvbnRleHQuc2V0KFVJTWV0YS5LZXlNb2R1bGUsIG1vZHVsZUluZm8ubW9kdWxlTmFtZXMpO1xuICAgICAgICBtb2R1bGVJbmZvLmFjdGlvbnNCeUNhdGVnb3J5ID0gbmV3IE1hcDxzdHJpbmcsIEFycmF5PEl0ZW1Qcm9wZXJ0aWVzPj4oKTtcbiAgICAgICAgbW9kdWxlSW5mby5hY3Rpb25DYXRlZ29yaWVzID0gdGhpcy5hY3Rpb25zQnlDYXRlZ29yeShjb250ZXh0LCBtb2R1bGVJbmZvLmFjdGlvbnNCeUNhdGVnb3J5LFxuICAgICAgICAgICAgVUlNZXRhLk1vZHVsZUFjdGlvblpvbmVzKTtcbiAgICAgICAgY29udGV4dC5wb3AoKTtcblxuICAgICAgICByZXR1cm4gbW9kdWxlSW5mbztcbiAgICB9XG5cblxuICAgIGN1cnJlbnRNb2R1bGVMYWJlbChtb2R1bGVOYW1lOiBzdHJpbmcsIGNvbnRleHQ6IENvbnRleHQgPSB0aGlzLm5ld0NvbnRleHQoKSk6IHN0cmluZ1xuICAgIHtcbiAgICAgICAgY29udGV4dC5wdXNoKCk7XG4gICAgICAgIGNvbnRleHQuc2V0KFVJTWV0YS5LZXlNb2R1bGUsIG1vZHVsZU5hbWUpO1xuICAgICAgICBsZXQgbGFiZWw6IHN0cmluZyA9IGNvbnRleHQucHJvcGVydHlGb3JLZXkoVUlNZXRhLktleUxhYmVsKTtcbiAgICAgICAgY29udGV4dC5wb3AoKTtcblxuICAgICAgICByZXR1cm4gbGFiZWw7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBjbGFzcyBNb2R1bGVJbmZvXG57XG4gICAgbW9kdWxlczogQXJyYXk8SXRlbVByb3BlcnRpZXM+O1xuICAgIG1vZHVsZU5hbWVzOiBBcnJheTxzdHJpbmc+O1xuICAgIG1vZHVsZUJ5TmFtZXM6IE1hcDxzdHJpbmcsIEl0ZW1Qcm9wZXJ0aWVzPjtcbiAgICBhY3Rpb25DYXRlZ29yaWVzOiBBcnJheTxJdGVtUHJvcGVydGllcz47XG4gICAgYWN0aW9uc0J5Q2F0ZWdvcnk6IE1hcDxzdHJpbmcsIEFycmF5PEl0ZW1Qcm9wZXJ0aWVzPj47XG59XG5cblxuZXhwb3J0IGNsYXNzIExvY2FsaXplZFN0cmluZyBleHRlbmRzIER5bmFtaWNQcm9wZXJ0eVZhbHVlXG57XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgbWV0YTogVUlNZXRhLCBwcm90ZWN0ZWQgX21vZHVsZTogc3RyaW5nLCBwcm90ZWN0ZWQgIF9rZXk6IHN0cmluZyxcbiAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgX2RlZmF1bHRWYWx1ZTogc3RyaW5nKVxuICAgIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBldmFsdWF0ZShjb250ZXh0OiBDb250ZXh0KTogYW55XG4gICAge1xuXG4gICAgICAgIGxldCBsb2NhbGl6ZWRTdHJpbmc6IGFueTtcbiAgICAgICAgLy8gbGV0IGNsYXp6ID0gY29udGV4dC52YWx1ZXMuZ2V0KCdjbGFzcycpO1xuICAgICAgICAvLyBpZiAoaXNQcmVzZW50KHRoaXMuX2tleSkgJiYgaXNQcmVzZW50KHRoaXMubWV0YS5pMThuU2VydmljZSkpIHtcbiAgICAgICAgLy8gICAgIGxldCBpMThuS2V5ID0gY2xhenogKyAnLicgKyB0aGlzLl9rZXk7XG4gICAgICAgIC8vICAgICBsb2NhbGl6ZWRTdHJpbmcgPSB0aGlzLm1ldGEuaTE4blNlcnZpY2UuaW5zdGFudChpMThuS2V5KTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgIC8vIHdoZW4gaXQgcmV0dXJuIHRoZSBzYW1lIHN0cmluZyBtb3N0IGxpa2VseSBpdCBtZWFucyB0aGVyZSBpcyBub1xuICAgICAgICAvLyAgICAgLy8gdHJhbnNsYXRpb24gc28gZGVmYXVsdCBpdCB0byBudWxsXG4gICAgICAgIC8vICAgICBsb2NhbGl6ZWRTdHJpbmcgPSAobG9jYWxpemVkU3RyaW5nID09PSBpMThuS2V5KSA/IG51bGwgOiBsb2NhbGl6ZWRTdHJpbmc7XG4gICAgICAgIC8vIH1cblxuICAgICAgICAvLyBpZiAoaXNCbGFuayhsb2NhbGl6ZWRTdHJpbmcpIHx8IHRoaXMuX2tleSA9PT0gT2JqZWN0TWV0YS5LZXlGaWVsZCkge1xuICAgICAgICAvLyAgICAgcmV0dXJuIHRoaXMuX2RlZmF1bHRWYWx1ZTtcbiAgICAgICAgLy8gfVxuICAgICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdFZhbHVlO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKCk6IHN0cmluZ1xuICAgIHtcbiAgICAgICAgcmV0dXJuICdMb2NhbGVkU3RyaW5nOiB7JyArIHRoaXMuX2tleSArICcgLSAnICsgdGhpcy5fZGVmYXVsdFZhbHVlICsgJyB9JztcbiAgICB9XG59XG5cbmNsYXNzIExvY2FsaXplZExhYmVsU3RyaW5nIGV4dGVuZHMgTG9jYWxpemVkU3RyaW5nIGltcGxlbWVudHMgUHJvcGVydHlNYXBBd2FraW5nXG57XG4gICAgc3RhdGljIERlZmF1bHRNb2R1bGUgPSAnZGVmYXVsdCc7XG4gICAgcHJvcGVydHlBd2FraW5nOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBtZXRhOiBVSU1ldGEpXG4gICAge1xuICAgICAgICBzdXBlcihtZXRhLCBMb2NhbGl6ZWRMYWJlbFN0cmluZy5EZWZhdWx0TW9kdWxlLCBudWxsLCBudWxsKTtcbiAgICB9XG5cbiAgICBldmFsdWF0ZShjb250ZXh0OiBDb250ZXh0KTogYW55XG4gICAge1xuICAgICAgICBpZiAoaXNCbGFuayh0aGlzLl9rZXkpKSB7XG4gICAgICAgICAgICBsZXQgc2NvcGVLZXk6IHN0cmluZyA9IGNvbnRleHQudmFsdWVzLmdldChNZXRhLlNjb3BlS2V5KTtcbiAgICAgICAgICAgIGxldCBzY29wZVZhbDogc3RyaW5nID0gY29udGV4dC52YWx1ZXMuZ2V0KHNjb3BlS2V5KTtcblxuICAgICAgICAgICAgdGhpcy5fZGVmYXVsdFZhbHVlID0gVUlNZXRhLmRlZmF1bHRMYWJlbEZvcklkZW50aWZpZXIoc2NvcGVWYWwpO1xuXG4gICAgICAgICAgICB0aGlzLl9rZXkgPSBzY29wZUtleTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuZXZhbHVhdGUoY29udGV4dCk7XG4gICAgfVxuXG4gICAgYXdha2VGb3JQcm9wZXJ0eU1hcChtYXA6IFByb3BlcnR5TWFwKTogYW55XG4gICAge1xuICAgICAgICByZXR1cm4gbmV3IExvY2FsaXplZExhYmVsU3RyaW5nKHRoaXMubWV0YSk7XG4gICAgfVxuXG59XG5cblxuY2xhc3MgUHJvcEZpZWxkc0J5Wm9uZVJlc29sdmVyIGV4dGVuZHMgU3RhdGljYWxseVJlc29sdmFibGVcbntcblxuXG4gICAgZXZhbHVhdGUoY29udGV4dDogQ29udGV4dCk6IGFueVxuICAgIHtcbiAgICAgICAgbGV0IG0gPSAoPFVJTWV0YT5jb250ZXh0Lm1ldGEpLml0ZW1OYW1lc0J5Wm9uZXMoY29udGV4dCwgVUlNZXRhLktleUZpZWxkLFxuICAgICAgICAgICAgKDxVSU1ldGE+Y29udGV4dC5tZXRhKS56b25lcyhjb250ZXh0KSk7XG4gICAgICAgIGxldCB6b25lUGF0aCA9ICg8VUlNZXRhPmNvbnRleHQubWV0YSkuem9uZVBhdGgoY29udGV4dCk7XG4gICAgICAgIGlmIChpc1ByZXNlbnQoem9uZVBhdGgpKSB7XG5cblxuICAgICAgICAgICAgbSA9IDxNYXA8c3RyaW5nLCBhbnk+PiBGaWVsZFBhdGguZ2V0RmllbGRWYWx1ZShtLCB6b25lUGF0aCk7XG4gICAgICAgICAgICBpZiAoaXNCbGFuayhtKSkge1xuICAgICAgICAgICAgICAgIG0gPSBuZXcgTWFwPHN0cmluZywgYW55PigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtO1xuICAgIH1cbn1cblxuY2xhc3MgUHJvcEZpZWxkUHJvcGVydHlMaXN0UmVzb2x2ZXIgZXh0ZW5kcyBTdGF0aWNhbGx5UmVzb2x2YWJsZVxue1xuXG4gICAgZXZhbHVhdGUoY29udGV4dDogQ29udGV4dCk6IGFueVxuICAgIHtcbiAgICAgICAgcmV0dXJuICg8VUlNZXRhPmNvbnRleHQubWV0YSkuZmllbGRMaXN0KGNvbnRleHQpO1xuICAgIH1cbn1cblxuY2xhc3MgUHJvcExheW91dHNCeVpvbmVSZXNvbHZlciBleHRlbmRzIFN0YXRpY2FsbHlSZXNvbHZhYmxlXG57XG5cbiAgICBldmFsdWF0ZShjb250ZXh0OiBDb250ZXh0KTogYW55XG4gICAge1xuICAgICAgICByZXR1cm4gKDxVSU1ldGE+Y29udGV4dC5tZXRhKS5pdGVtTmFtZXNCeVpvbmVzKGNvbnRleHQsIFVJTWV0YS5LZXlMYXlvdXQsXG4gICAgICAgICAgICAoPFVJTWV0YT5jb250ZXh0Lm1ldGEpLnpvbmVzKGNvbnRleHQpKTtcbiAgICB9XG59XG5cblxuY2xhc3MgX0RlZmF1bHRMYWJlbEdlbmVyYXRvciBleHRlbmRzIFN0YXRpY2FsbHlSZXNvbHZhYmxlXG57XG5cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2tleTogc3RyaW5nKVxuICAgIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBldmFsdWF0ZShjb250ZXh0OiBDb250ZXh0KTogYW55XG4gICAge1xuICAgICAgICBsZXQgZmllbGROYW1lID0gY29udGV4dC52YWx1ZXMuZ2V0KHRoaXMuX2tleSk7XG5cbiAgICAgICAgcmV0dXJuIChpc1ByZXNlbnQoZmllbGROYW1lKSAmJiBpc1N0cmluZyhmaWVsZE5hbWUpKSA/XG4gICAgICAgICAgICBVSU1ldGEuZGVmYXVsdExhYmVsRm9ySWRlbnRpZmllcihmaWVsZE5hbWUpIDogbnVsbDtcbiAgICB9XG59XG5cbi8qKlxuICogTG9hZCBVc2VyIGRlZmluZWQgbWV0YSBkYXRhLiBUaGlzIGNsYXNzIGlzIHRyaWdnZXJlZCBhcyBzb29uIGFzIHdlIGNyZWF0ZSBhIGNvbnRleHQgYW5kXG4gKiBwYXNzIGFuIG9iamVjdCBpbnRvIGl0LiBCYXNlZCBvbiB0aGUgb2JqZWN0IHdlIG5vdGlmeSBkaWZmZXJlbnQgT2JzZXJ2ZXJzIHBhc3NpbmcgbmFtZVxuICogb2YgdGhlIGNsYXNzIGFuZCBoZXJlIHdlIHNlYXJjaCBpZiB3ZSBoYXZlIGFueSBSdWxlcyBhdmFpbGFibGUgZm9yIGN1cnJlbnQgY2xhc3NOYW1lIGFuZFxuICogdHJ5IHRvIGxvYWQgdGhlIFJ1bGUuXG4gKi9cbmNsYXNzIFVzZXJNZXRhRGF0YVByb3ZpZGVyIGltcGxlbWVudHMgVmFsdWVRdWVyaWVkT2JzZXJ2ZXJcbntcblxuICAgIG5vdGlmeShtZXRhOiBNZXRhLCBrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IHZvaWRcbiAgICB7XG4gICAgICAgIGxldCBhUnVsZXM6IEFycmF5PEpzb25SdWxlPjtcbiAgICAgICAgbGV0IHVpTWV0YTogVUlNZXRhID0gPFVJTWV0YT4gbWV0YTtcblxuICAgICAgICBpZiAodWlNZXRhLl90ZXN0UnVsZXMuaGFzKHZhbHVlICsgJ1J1bGUnKSkge1xuICAgICAgICAgICAgLy8gc2luY2Ugd2UgYXJlIGluIGRldmVsb3BtZW50IG1vZGUgYW5kIHRlc3QgbW9kZSBpcyBvbiB3ZSBjYW4gY2hlY2sgZXh0cmEgcmVwb3NpdG9yeVxuICAgICAgICAgICAgLy8gdXNlZCBieSB0ZXN0cywgd2UgbmVlZCB0byBjaGVjayBpZiB3ZSBhcmUgbm90IHJ1bm5pbmcgdW5pdHRlc3QgYW5kIGEgY2xhc3MgaXMgbm90XG4gICAgICAgICAgICAvLyBhcHBsaWNhdGlvbiBkZWZpbmVkIGJ1dCB1bml0dGVzdCBkZWZpbmVkIHJ1bGVcblxuICAgICAgICAgICAgaWYgKHVpTWV0YS5fdGVzdFJ1bGVzLmhhcyh2YWx1ZSArICdSdWxlJykgJiZcbiAgICAgICAgICAgICAgICBpc1ByZXNlbnQodWlNZXRhLl90ZXN0UnVsZXMuZ2V0KHZhbHVlICsgJ1J1bGUnKS5vc3MpKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGFSdWxlcyA9IHVpTWV0YS5fdGVzdFJ1bGVzLmdldCh2YWx1ZSArICdSdWxlJykub3NzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWV0YS5sb2FkVXNlclJ1bGUoYVJ1bGVzLCB2YWx1ZSk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChpc1ByZXNlbnQodWlNZXRhLmFwcENvbmZpZykgJiZcbiAgICAgICAgICAgIHVpTWV0YS5hcHBDb25maWcuZ2V0KFVJTWV0YS5BcHBDb25maWdVc2VyUnVsZXNQYXJhbSkpXG4gICAgICAgIHtcblxuICAgICAgICAgICAgbGV0IHVzZXJSZWZlcmVuY2VzOiBhbnlbXSA9IHVpTWV0YS5hcHBDb25maWcuZ2V0KFVJTWV0YS5BcHBDb25maWdVc2VyUnVsZXNQYXJhbSk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgaW4gdXNlclJlZmVyZW5jZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNQcmVzZW50KHVzZXJSZWZlcmVuY2VzW2ldW3ZhbHVlICsgJ1J1bGUnXSkgJiZcbiAgICAgICAgICAgICAgICAgICAgaXNQcmVzZW50KHVzZXJSZWZlcmVuY2VzW2ldW3ZhbHVlICsgJ1J1bGUnXS5vc3MpKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYVJ1bGVzID0gdXNlclJlZmVyZW5jZXNbaV1bdmFsdWUgKyAnUnVsZSddLm9zcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXRhLmxvYWRVc2VyUnVsZShhUnVsZXMsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgU0FQIEFyaWJhXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogQmFzZWQgb24gb3JpZ2luYWwgd29yazogTWV0YVVJOiBDcmFpZyBGZWRlcmlnaGkgKDIwMDgpXG4gKlxuICovXG5pbXBvcnQge1xuICAgIEFmdGVyVmlld0NoZWNrZWQsXG4gICAgQWZ0ZXJWaWV3SW5pdCxcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDb21wb25lbnQsXG4gICAgRWxlbWVudFJlZixcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgZm9yd2FyZFJlZixcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgT25EZXN0cm95LFxuICAgIE9wdGlvbmFsLFxuICAgIE91dHB1dCxcbiAgICBTaW1wbGVDaGFuZ2UsXG4gICAgU2tpcFNlbGZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIGFzc2VydCxcbiAgICBFbnZpcm9ubWVudCxcbiAgICBlcXVhbHMsXG4gICAgaXNCbGFuayxcbiAgICBpc1ByZXNlbnQsXG4gICAgTGlzdFdyYXBwZXIsXG4gICAgU3RyaW5nV3JhcHBlclxufSBmcm9tICdAYXJpYmF1aS9jb3JlJztcbmltcG9ydCB7VUlNZXRhfSBmcm9tICcuLi8uLi9jb3JlL3VpbWV0YSc7XG5pbXBvcnQge0NvbnRleHR9IGZyb20gJy4uLy4uL2NvcmUvY29udGV4dCc7XG5pbXBvcnQge0Zvcm1Db250cm9sfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge0Jhc2VGb3JtQ29tcG9uZW50fSBmcm9tICdAYXJpYmF1aS9jb21wb25lbnRzJztcbmltcG9ydCB7VUlDb250ZXh0fSBmcm9tICcuLi9jb250ZXh0JztcblxuXG4vKipcbiAqXG4gKiBNZXRhQ29udGV4dCAobS1jb250ZXh0KSBlbmFibGVzIG1hbmlwdWxhdGlvbiBvZiBhIE1ldGFVSSBDb250ZXh0IGFzIHBhcnQgb2YgdGhlIEFuZ3VsYXInc1xuICogY29tcG9uZW50IHByb2Nlc3NpbmcuXG4gKlxuICogVGhlIE1ldGFDb250ZXh0IHRhZyB3aWxsIGZpbmQgdGhlIGN1cnJlbnQgQ29udGV4dCBpbiB0aGUgRW52aXJvbm1lbnQnZW52IG9yIHdpbGxcbiAqIGNyZWF0ZSBvbmUsIHdpbGwgcHVzaCgpIGEgb25lIGxldmVsIG9uIHRoZSBDb250ZXh0LCBzZXQoKSBhbGwgb2YgaXRzIGJpbmRpbmdzIGFzIGtleS92YWx1ZXMsXG4gKiByZW5kZXIgaXRzIGNvbnRlbnQsICBTaW5jZSBpdHMgY29udGVudCBtYXkgY29udGFpbiBjb21wb25lbnQgdGhhdCBmdXJ0aGVyIHVzZVxuICogTWV0YUNvbnRleHQsIGFkZGl0aW9uYWwgbmVzdGVkIGNvbnRleHQgbWFuaXB1bGF0aW9ucyBtYXkgb2NjdXIuXG4gKlxuICogIyMjIFNpbXBsZSBleGFtcGxlXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICpcbiAqICAgICAgPG0tY29udGV4dCBbb2JqZWN0XT0nY2hlY2tSZXF1ZXN0JyBvcGVyYXRpb249J2VkaXQnIGxheW91dD0nSW5zcGVjdCc+XG4gKiAgICAgICAgICA8bS1pbmNsdWRlLWNvbXBvbmVudD48L20taW5jbHVkZS1jb21wb25lbnQ+XG4gKiAgICAgICA8L20tY29udGV4dD5cbiAqXG4gKiBgYGBcbiAqXG4gKlxuICogR2VuZXJhbGx5LCBNZXRhQ29udGV4dCB0cmVhdHMgaXRzIGJpbmRpbmdzIGFzIGEgdmVyYmF0aW0gbGlzdCBvZiBrZXlzL3ZhbHVlcyB0byBiZSBzZXQoKVxuICogb24gdGhlIGNvbnRleHQgKGkuZS4gdGhlIGJpbmRpbmdzIGFib3ZlIG9uICdvYmplY3QnLCAnbGF5b3V0JywgJ29wZXJhdGlvbicsIGFuZCAnZmllbGQnXG4gKiBhcmUgbm90IHByZWRlZmluZWQgYnkgTWV0YUNvbnRleHQpLlxuICpcbiAqIEFsdGhvdWdoIHdlIHRyZWF0IHNvbWUgYmluZGluZ3MgaW4gc3BlY2lhbCB3YXkgYXMgd2UgZXhwZWN0IHRoZW0gdG8gYmUgcGFzc2VkIGluIGFzIGV4cHJlc3Npb25cbiAqIHRoZXJlZm9yZSB0aGV5IG5lZWQgYmUgZGVmaW5lZCBhcyBASW5wdXQoKS4gVGhlIHJlc3Qgd2UgdHJlYWQgaXMgcHVyZSBrZXlzL3ZhbHVlcyBzdHJpbmdzXG4gKlxuICogRmlyc3QgdGltZSB3aGVuIGNvbXBvbmVudCBpcyBjcmVhdGVkIHdlIHVzZSBuZ09uSW5pdCgpIHRvIHB1c2ggdmFsdWVzIGFuZCBuZ0FmdGVyVmlld0luaXQoKSB0b1xuICogcG9wIHZhbHVlcy4gVGhlIHB1c2gvcG9wIGxvb2tzIHNvbWV0aGluZyBsaWtlIHRoaXM6XG4gKlxuICogPE5vZGUxPiAtIFBVU0hcbiAqICAgICAgPE5vZGUyPiAtIFBVU0hcbiAqICAgICAgICAgIDxOb2RlMz4gLSBQVVNIXG4gKiAgICAgICAgICA8Tm9kZTM+IC0gUE9QXG4gKiAgICAgIDxOb2RlMj4gLSBQT1BcbiAqIDxOb2RlMT4gLSBQT1BcbiAqXG4gKlxuICogQWZ0ZXIgY29tcG9uZW50IGlzIGZ1bGx5IGluaXRpYWxpemVkIGFuZCByZW5kZXJlZCAgdGhlbiB3ZSB1c2UgbmdEb0NoZWNrKCkgdG8gcHVzaCgpIGFuZFxuICogbmdBZnRlclZpZXdDaGVja2VkKCkgdG8gcG9wKCkgdmFsdWVzLlxuICpcbiAqL1xuXG5cbi8qKlxuICogQ29uc3RhbnQgcmVwcmVzZW50IGN1cnJlbnQgYWN0aXZlIGFuZCBtYWlubHkgbGF0ZXN0IENvbnRleHRcbiAqXG4gKi9cbmV4cG9ydCBjb25zdCBBQ1RJVkVfQ05UWCA9ICdDdXJyZW50TUMnO1xuY29uc3QgQ05UWF9DSEFOR0VEID0gJ0NudHhfQ2hhbmdlZCc7XG5cblxuLy8gZGVmaW5lIHNldCBvZiBwcm9wZXJ0aWVzIHdoaWNoIHdpbGwgYmUgc2tpcHBlZCBhcyB0aGV5IGFyZSBkZWZpbmVkIGFzIGlucHV0cyBvciAgYWRkZWQgYnlcbi8vIGFuZ3VsYXJcbmNvbnN0IElNUExJQ0lUX1BST1BFUlRJRVMgPSBbXG4gICAgJ21vZHVsZScsICdsYXlvdXQnLCAnb3BlcmF0aW9uJywgJ2NsYXNzJywgJ29iamVjdCcsICdhY3Rpb25DYXRlZ29yeScsICdhY3Rpb24nLCAnZmllbGQnLFxuICAgICdwdXNoTmV3Q29udGV4dCdcbl07XG5cblxuY29uc3QgSU1NVVRBQkxFX1BST1BFUlRJRVMgPSBbXG4gICAgJ21vZHVsZScsICdsYXlvdXQnLCAnb3BlcmF0aW9uJywgJ2NsYXNzJywgJ2FjdGlvbicsICdmaWVsZCcsICdwdXNoTmV3Q29udGV4dCdcbl07XG5cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdtLWNvbnRleHQnLFxuICAgIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG5cbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge3Byb3ZpZGU6IEJhc2VGb3JtQ29tcG9uZW50LCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBNZXRhQ29udGV4dENvbXBvbmVudCl9XG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBNZXRhQ29udGV4dENvbXBvbmVudCBleHRlbmRzIEJhc2VGb3JtQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95LFxuICAgIEFmdGVyVmlld0luaXQsIEFmdGVyVmlld0NoZWNrZWRcbntcbiAgICAvKipcbiAgICAgKiBDdXJyZW50bHkgdGhlcmUgYXJlIHNldCBvZiBwcm9wZXJ0aWVzIHdoaWNoIGNhbiBiZSBwYXNzZWQgYXMgZXhwcmVzc2lvbiBhbmQgdGhlcmVmb3JlIHRoZXlcbiAgICAgKiBuZWVkIHRvIGJlIHJlc29sdmVkIGJ5IGFuZ3VsYXIuIEFuZ3VsYXIgZG9lcyBub3QgaGF2ZSBzdWNoIG9wdGlvbiB0byBwcm92aWRlIGZsZXhpYmxlXG4gICAgICogbnVtYmVyIG9mIElucHV0cy4gQWxsIG5lZWRzIHRvIGJlIHByZS1kZWZpbmVkLiBJZiB5b3Ugd2FudCB0byBwYXNzIGluIGFuXG4gICAgICogZXhwcmVzc2lvbiBpdCBtdXN0IGJlIGRlZmluZWQgYXMgaW5wdXQuIE90aGVyd2lzZSBhbnkgb3RoZXIgYXR0cmlidXRlcyB3aWxsIGJlIHRyZWF0ZWQgYXNcbiAgICAgKiBzdHJpbmdzLlxuICAgICAqL1xuICAgIEBJbnB1dCgpIG1vZHVsZTogc3RyaW5nO1xuICAgIEBJbnB1dCgpIGxheW91dDogc3RyaW5nO1xuICAgIEBJbnB1dCgpIG9wZXJhdGlvbjogc3RyaW5nO1xuICAgIEBJbnB1dCgpIGNsYXNzOiBzdHJpbmc7XG4gICAgQElucHV0KCkgb2JqZWN0OiBhbnk7XG4gICAgQElucHV0KCkgYWN0aW9uQ2F0ZWdvcnk6IGFueTtcbiAgICBASW5wdXQoKSBhY3Rpb246IGFueTtcbiAgICBASW5wdXQoKSBmaWVsZDogc3RyaW5nO1xuXG4gICAgQElucHV0KCkgcHVzaE5ld0NvbnRleHQ6IGJvb2xlYW47XG5cblxuICAgIEBPdXRwdXQoKVxuICAgIGJlZm9yZUNvbnRleHRTZXQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgQE91dHB1dCgpXG4gICAgb25Db250ZXh0Q2hhbmdlZDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBAT3V0cHV0KClcbiAgICBhZnRlckNvbnRleHRTZXQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG5cbiAgICBAT3V0cHV0KClcbiAgICBvbkFjdGlvbjogRXZlbnRFbWl0dGVyPE1ldGFVSUFjdGlvbkV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuXG4gICAgLyoqXG4gICAgICogRmxhZyB0aGF0IHRlbGxzIHVzIHRoYXQgY29tcG9uZW50IGlzIGZ1bGx5IHJlbmRlcmVkXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIHZpZXdJbml0aWFsaXplZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBNYXJrcyBNZXRhQ29udGV4dCBvciB0aGUgcm9vdCBNZXRhQ29udGV4dCB0aGF0IGNyZWF0ZWQgYSBuZXcgQ29udGV4dFxuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSBjb250ZXh0Q3JlYXRlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgcHJpdmF0ZSBiaW5kaW5nc01hcDogTWFwPHN0cmluZywgYW55PjtcbiAgICBwcml2YXRlIGJpbmRpbmdLZXlzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogU2hlbGwgY29weSBvZiBhbiBvYmplY3QgdXNlZCBmb3IgY29tcGFyaXNpb24uIFdlIG1heSBnZXQgYmFjayB0byB0aGUgb3JpZ2luYWwgc29sdXRpb24gd2hpY2hcbiAgICAgKiBJIGhhZCBoZXJlLiBUSGUgQW5ndWxhcidzIGRpZmZlcnNcbiAgICAgKi9cbiAgICBwcml2YXRlIHByZXZPYmplY3Q6IGFueTtcblxuICAgIHByaXZhdGUgX3Njb3BlQmluZGluZzogc3RyaW5nO1xuXG4gICAgLy8gcHJpdmF0ZSBzdGF0aWMgc3RhY2tEZXB0aCA9IDA7XG5cblxuICAgIF9teUNvbnRleHQ6IENvbnRleHQ7XG5cbiAgICAvKipcbiAgICAgKiBOZWVkIHRvIGNhY2hlIGlmIHdlIGFscmVhZHkgaGF2ZSBvYmplY3Qgb3Igbm90IGluIGNhc2Ugd2UgbG9hZCBkYXRhIGZyb20gUkVTVCB3aGVyZSBpdFxuICAgICAqIGNvdWxkIGJlIGRlZmVycmVkIGFuZCBub3QgYXZhaWxhYmxlIHdoZW4gY29tcG9uZW50IGlzIGluaXRpYWxpemVkXG4gICAgICovXG4gICAgaGFzT2JqZWN0OiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwdWJsaWMgZW52OiBFbnZpcm9ubWVudCxcbiAgICAgICAgICAgICAgICBAU2tpcFNlbGYoKSBAT3B0aW9uYWwoKSBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gQmFzZUZvcm1Db21wb25lbnQpKVxuICAgICAgICAgICAgICAgIHByb3RlY3RlZCBwYXJlbnRDb250YWluZXI6IEJhc2VGb3JtQ29tcG9uZW50KVxuICAgIHtcbiAgICAgICAgc3VwZXIoZW52LCBudWxsKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkXG4gICAge1xuICAgICAgICB0aGlzLmluaXRCaW5kaW5ncygpO1xuICAgICAgICB0aGlzLmhhc09iamVjdCA9IHRoaXMuX2hhc09iamVjdCgpO1xuXG4gICAgICAgIC8vIE1ldGFDb250ZXh0Q29tcG9uZW50LnN0YWNrRGVwdGgrKztcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5pbmRlbnQoKSArICc9PiBuZ09uSW5pdDonLCB0aGlzLmNvbnRleHRLZXkoKSk7XG4gICAgICAgIC8vIEluaXRpYWwgcHVzaCwgd2hlbiBjb21wb25lbnQgaXMgZmlyc3QgaW5pdGlhbGl6ZWQgdGhlIHJlc3QgaXMgZG9uZSBiYXNlZCBvbiBjaGFuZ2VzLlxuICAgICAgICB0aGlzLnB1c2hQb3AodHJ1ZSk7XG5cbiAgICAgICAgaWYgKCF0aGlzLmVudi5oYXNWYWx1ZSgncGFyZW50LWNueCcpKSB7XG4gICAgICAgICAgICB0aGlzLmVudi5zZXRWYWx1ZSgncGFyZW50LWNueCcsIHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBGb3IgYW55IG90aGVyIGltbXV0YWJsZSBvYmplY3QgZGV0ZWN0IGNoYW5nZXMgaGVyZSBhbmQgcmVmcmVzaCB0aGUgY29udGV4dCBzdGFja1xuICAgICAqXG4gICAgICogQHBhcmFtIGNoYW5nZXNcbiAgICAgKi9cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiB7WyBwcm9wTmFtZTogc3RyaW5nXTogU2ltcGxlQ2hhbmdlfSk6IHZvaWRcbiAgICB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuaW5kZW50KCkgKyAnICAgID0+IG5nT25DaGFuZ2VzJywgdGhpcy5jb250ZXh0S2V5KCkpO1xuXG5cbiAgICAgICAgZm9yIChsZXQgbmFtZSBvZiBJTU1VVEFCTEVfUFJPUEVSVElFUykge1xuICAgICAgICAgICAgaWYgKGlzUHJlc2VudChjaGFuZ2VzW25hbWVdKVxuICAgICAgICAgICAgICAgICYmIChjaGFuZ2VzW25hbWVdLmN1cnJlbnRWYWx1ZSAhPT0gY2hhbmdlc1tuYW1lXS5wcmV2aW91c1ZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdEJpbmRpbmdzKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gaW4gY2FzZSBvYmplY3QgaXMgY29taW5nIGxhdGUgZS5nLiBmcm9tIHNvbWUgcmVhY3RpdmUgQVBJIGxpa2UgUkVTVCB0aGVuIHdlXG4gICAgICAgIC8vIGRvIG5vdCBnZXQgaXQgaW50byBuZ0luaXQgYnV0IGl0IHdpbGwgYmUgaGVyZS5cbiAgICAgICAgaWYgKHRoaXMudmlld0luaXRpYWxpemVkICYmIGlzUHJlc2VudChjaGFuZ2VzWydvYmplY3QnXSkgJiYgaXNQcmVzZW50KHRoaXMub2JqZWN0KSkge1xuICAgICAgICAgICAgdGhpcy5pbml0QmluZGluZ3MoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE5nIGNoZWNrIGlzIHRyaWdnZWQgYWZ0ZXIgdmlldyBpcyBmdWxseSBpbmlhbGl6ZWQgYW5kIHdlIHdhbnQgdG8gcHVzaCBldmVyeXRoaW5nIG5ld1xuICAgICAqIHByb3BlcnRpZXMgdG8gdGhlIGNvbnRleHQgYW5kIGV2YWx1YXRlIGV2ZXJ5dGhpbmcuXG4gICAgICpcbiAgICAgKlxuICAgICAqL1xuICAgIG5nRG9DaGVjaygpOiB2b2lkXG4gICAge1xuXG4gICAgICAgIGlmICh0aGlzLnZpZXdJbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5oYXNPYmplY3QgPSB0aGlzLl9oYXNPYmplY3QoKTtcblxuICAgICAgICAgICAgLy8gTWV0YUNvbnRleHRDb21wb25lbnQuc3RhY2tEZXB0aCsrO1xuXG4gICAgICAgICAgICB0aGlzLnB1c2hQb3AodHJ1ZSk7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmluZGVudCgpICsgJz0+IG5nRG9DaGVjayhDSEFOR0VEKScsIHRoaXMuY29udGV4dEtleSgpKTtcblxuICAgICAgICAgICAgaWYgKGlzUHJlc2VudCh0aGlzLm9iamVjdCkgJiYgIWVxdWFscyh0aGlzLnByZXZPYmplY3QsIHRoaXMub2JqZWN0KSkge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTW9kZWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogV2Ugd2FudCB0byBzdGFydCBkZXRlY3RpbmcgY2hhbmdlcyBvbmx5IGFmdGVyIHZpZXcgaXMgZnVsbHkgY2hlY2tlZFxuICAgICAqL1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkXG4gICAge1xuICAgICAgICBpZiAoIXRoaXMudmlld0luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmluZGVudCgpICsgJz0+IG5nQWZ0ZXJWaWV3SW5pdDonLCB0aGlzLmNvbnRleHRLZXkoKSk7XG4gICAgICAgICAgICAvLyBNZXRhQ29udGV4dENvbXBvbmVudC5zdGFja0RlcHRoLS07XG4gICAgICAgICAgICB0aGlzLnB1c2hQb3AoZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZFxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMudmlld0luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmluZGVudCgpICsgJz0+IG5nQWZ0ZXJWaWV3Q2hlY2tlZDonLCB0aGlzLmNvbnRleHRLZXkoKSk7XG4gICAgICAgICAgICAvLyBNZXRhQ29udGV4dENvbXBvbmVudC5zdGFja0RlcHRoLS07XG4gICAgICAgICAgICB0aGlzLnB1c2hQb3AoZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy52aWV3SW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gcHJpdmF0ZSBpbmRlbnQoKTogc3RyaW5nXG4gICAgLy8ge1xuICAgIC8vICAgICBsZXQgaW5kID0gJyc7XG4gICAgLy8gICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTWV0YUNvbnRleHRDb21wb25lbnQuc3RhY2tEZXB0aDsgaSsrKSB7XG4gICAgLy8gICAgICAgICBpbmQgKz0gJ1xcdFxcdFxcdCAnO1xuICAgIC8vICAgICB9XG4gICAgLy9cbiAgICAvLyAgICAgcmV0dXJuIGluZDtcbiAgICAvLyB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFRoaXMgaXMgb3VyIGtleSBtZXRob2QgdGhhdCB0cmlnZ2VycyBhbGwgdGhlIGludGVyYWN0aW9uIGluc2lkZSBNZXRhVUkgd29ybGQuIEhlcmUgd2VcbiAgICAgKiBwdXNoIGNvbnRleHQga2V5cyBhbmQgdGhlaXIgdmFsdWVzIHRvIHRoZSBzdGFjayBhbmQgdGhpcyBpcyB0aGUgdGhpbmcgdGhhdCB0cmlnZ2Vyc1xuICAgICAqIHJ1bGUgcmVjYWxjdWxhdGlvbiB3aGljaCBnaXZlIHVzIHVwZGF0ZWQgIHByb3BlcnRpZXMuIFRob3NlIGFyZSB0aGVuIHVzZWQgYnlcbiAgICAgKiBNZXRhSW5jbHVkZUNvbXBvbmVudCB0byByZW5kZXIgdGhlIFVJLlxuICAgICAqXG4gICAgICogbXlDb250ZXh0IGlzIGN1cnJlbnQgY29udGV4dCBmb3IgdGhpcyBNZXRhQ29udGV4dCBDb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaXNQdXNoIGlkZW50aWZpZXMgaWYgd2UgYXJlIHB1c2hpbmcgb3IgcG9wcGluZyB0byBjb250ZXh0IHN0YWNrXG4gICAgICovXG4gICAgcHJpdmF0ZSBwdXNoUG9wKGlzUHVzaDogYm9vbGVhbik6IHZvaWRcbiAgICB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuaW5kZW50KCkgKyAnPT4gcHVzaFBvcDogaXNQdXNoJyArIGlzUHVzaCwgdGhpcy5jb250ZXh0S2V5KCkpO1xuICAgICAgICBsZXQgYWN0aXZlQ29udGV4dDogQ29udGV4dCA9IHRoaXMuYWN0aXZlQ29udGV4dCgpO1xuICAgICAgICBhc3NlcnQoaXNQdXNoIHx8IGlzUHJlc2VudChhY3RpdmVDb250ZXh0KSwgJ3BvcCgpOiBNaXNzaW5nIGNvbnRleHQnKTtcblxuICAgICAgICBsZXQgZm9yY2VDcmVhdGUgPSBpc1B1c2ggJiYgKGlzUHJlc2VudCh0aGlzLnB1c2hOZXdDb250ZXh0KSAmJiB0aGlzLnB1c2hOZXdDb250ZXh0KTtcbiAgICAgICAgaWYgKGlzQmxhbmsoYWN0aXZlQ29udGV4dCkgfHwgZm9yY2VDcmVhdGUpIHtcbiAgICAgICAgICAgIGxldCBtZXRhVUkgPSBVSU1ldGEuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgICAgIGFjdGl2ZUNvbnRleHQgPSBtZXRhVUkubmV3Q29udGV4dChmb3JjZUNyZWF0ZSk7XG5cbiAgICAgICAgICAgIHRoaXMuY29udGV4dENyZWF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5lbnYucHVzaDxDb250ZXh0PihBQ1RJVkVfQ05UWCwgYWN0aXZlQ29udGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNQdXNoKSB7XG4gICAgICAgICAgICBhY3RpdmVDb250ZXh0LnB1c2goKTtcblxuICAgICAgICAgICAgaWYgKGlzUHJlc2VudCh0aGlzLl9zY29wZUJpbmRpbmcpICYmIHRoaXMuaGFzT2JqZWN0KSB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmJlZm9yZUNvbnRleHRTZXQuZW1pdCh0aGlzLl9zY29wZUJpbmRpbmcpO1xuICAgICAgICAgICAgICAgIGFjdGl2ZUNvbnRleHQuc2V0U2NvcGVLZXkodGhpcy5fc2NvcGVCaW5kaW5nKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFmdGVyQ29udGV4dFNldC5lbWl0KHRoaXMuX3Njb3BlQmluZGluZyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuYmluZGluZ0tleXMubGVuZ3RoOyBpbmRleCsrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IGtleSA9IHRoaXMuYmluZGluZ0tleXNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLmJpbmRpbmdzTWFwLmdldChrZXkpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmVmb3JlQ29udGV4dFNldC5lbWl0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlQ29udGV4dC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWZ0ZXJDb250ZXh0U2V0LmVtaXQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNhdmUgY3JlYXRlZCBjb250ZW50IHRvIGxvY2FsIE1ldGFDb250ZXh0XG4gICAgICAgICAgICB0aGlzLl9teUNvbnRleHQgPSBhY3RpdmVDb250ZXh0LnNuYXBzaG90KCkuaHlkcmF0ZShmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY3RpdmVDb250ZXh0LnBvcCgpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5jb250ZXh0Q3JlYXRlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW52LnBvcDxDb250ZXh0PihBQ1RJVkVfQ05UWCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBKdXN0IGZvciB0cm91Ymxlc2hvb3RpbmcgdG8gcHJpbnQgY3VycmVudCBjb250ZXh0IGFuZCBhc3NpZ25tZW50c1xuICAgICAqXG4gICAgICovXG4gICAgZGVidWdTdHJpbmcoKTogU3RyaW5nXG4gICAge1xuICAgICAgICBpZiAoaXNQcmVzZW50KHRoaXMuX215Q29udGV4dCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9teUNvbnRleHQuZGVidWdTdHJpbmcoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZvciBkZWJ1Z2dpbmcgdG8gaWRlbnRpZnkgY3VycmVudCBrZXlcbiAgICAgKi9cbiAgICAvLyBjb250ZXh0S2V5KCk6IHN0cmluZ1xuICAgIC8vIHtcbiAgICAvLyAgICAgbGV0IGNueEtleSA9ICcnO1xuICAgIC8vICAgICBpZiAoaXNQcmVzZW50KHRoaXMuYmluZGluZ0tleXMpICYmIHRoaXMuYmluZGluZ0tleXMubGVuZ3RoID4gMCkge1xuICAgIC8vICAgICAgICAgdGhpcy5iaW5kaW5nS2V5cy5mb3JFYWNoKChuYW1lKSA9PlxuICAgIC8vICAgICAgICAge1xuICAgIC8vICAgICAgICAgICAgIGlmIChuYW1lID09PSAnb2JqZWN0Jykge1xuICAgIC8vICAgICAgICAgICAgICAgICBjbnhLZXkgKz0gbmFtZTtcbiAgICAvLyAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIC8vICAgICAgICAgICAgICAgICBjbnhLZXkgKz0gbmFtZSArIHRoaXMuYmluZGluZ3NNYXAuZ2V0KG5hbWUpO1xuICAgIC8vICAgICAgICAgICAgIH1cbiAgICAvL1xuICAgIC8vXG4gICAgLy8gICAgICAgICB9KTtcbiAgICAvLyAgICAgfSBlbHNlIGlmIChpc1ByZXNlbnQodGhpcy5fc2NvcGVCaW5kaW5nKSkge1xuICAgIC8vICAgICAgICAgY254S2V5ICs9IHRoaXMuX3Njb3BlQmluZGluZztcbiAgICAvLyAgICAgfVxuICAgIC8vICAgICByZXR1cm4gY254S2V5O1xuICAgIC8vIH1cblxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBFdmVyeSBtZXRhIGNvbnRleHQgY29tcG9uZW50IHdoaWNoIHB1c2hpbmcgY2VydGFpbiBwcm9wZXJ0aWVzIHRvIHN0YWNrIGhhcyBpdHMgb3duIGNvbnRleHRcbiAgICAgKiB0aGF0IGxpdmVzIHVudGlsIGNvbXBvbmVudCBpcyBkZXN0cm95ZWRcbiAgICAgKlxuICAgICAqL1xuICAgIG15Q29udGV4dCgpOiBDb250ZXh0XG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5fbXlDb250ZXh0O1xuICAgICAgICAvLyBsZXQgY254S2V5ID0gdGhpcy5jb250ZXh0S2V5KCk7XG4gICAgICAgIC8vIHJldHVybiB0aGlzLmVudi5nZXRWYWx1ZShjbnhLZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdlIGtlZXAgdGhlIG1vc3QgY3VycmVudCBhbmQgbGF0ZXN0IGNvbnRleHQgdG8gZW52aXJvbm1lbnQgdG8gYmUgcmVhZCBieSBhbnkgQ2hpbGRcbiAgICAgKiBNZXRhQ29udGV4dCBmb3IgcHVycG9zZSBvZiBjcmVhdGlvbiBuZXcgY29udGV4dCBhbmQgaXQgbmVlZHMgaW5mbyB3aGF0IHdhcyBhbHJlYWR5IHB1c2hlZFxuICAgICAqIG9udG8gdGhlIHN0YWNrLlxuICAgICAqXG4gICAgICovXG4gICAgYWN0aXZlQ29udGV4dCgpOiBDb250ZXh0XG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5lbnYucGVhazxDb250ZXh0PihBQ1RJVkVfQ05UWCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBMZXQncyBjbGVhbiB1cCBhbmQgZGVzdHJveSBwdXNoZWQgY29udGV4dFxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KClcbiAgICB7XG5cbiAgICAgICAgaWYgKHRoaXMuZW52Lmhhc1ZhbHVlKCdwYXJlbnQtY254JykpIHtcbiAgICAgICAgICAgIHRoaXMuZW52LmRlbGV0ZVZhbHVlKCdwYXJlbnQtY254Jyk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIElkZWFsbHkgd2UgZG8gbm90IG5lZWQgdGhpcyBtZXRob2QgaWYgQW5ndWxhciB3b3VsZCBzdXBwb3J0IHRvIHBhc3MgdmFyaWFibGUgbnVtYmVyIG9mXG4gICAgICogYmluZGluZ3Mgd2l0aG91dCBhIG5lZWQgdG8gaGF2ZSBiYWNrdXAgcHJvcGVydHkgZm9yIGVhY2ggb2YgdGhlIGJpbmRpbmdzIG9yIGV4cHJlc3Npb24uL1xuICAgICAqXG4gICAgICogT25jZSB0aGV5IHN1cHBvcnQuIHdlIGNhbiByZW1vdmUgdGhpcy4gU2luY2UgdGhpcyBjaGVjayB3aGF0IGFyZSBrbm93biBiaW5kaW5ncyBwYXNzZWQsXG4gICAgICogbWVhbmluZyB0aGUgb25lcyBkZWNvcmF0ZWQgd2l0aCBASW5wdXQgYW5kIHRoZSByZXN0XG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGluaXRCaW5kaW5ncygpXG4gICAge1xuICAgICAgICB0aGlzLmJpbmRpbmdzTWFwID0gbmV3IE1hcDxzdHJpbmcsIGFueT4oKTtcbiAgICAgICAgbGV0IG5hdGl2ZUVsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcblxuICAgICAgICB0aGlzLmluaXRJbXBsaWNpdEJpbmRpbmdzKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmF0aXZlRWxlbWVudC5hdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgYXR0cjogQXR0ciA9IG5hdGl2ZUVsZW1lbnQuYXR0cmlidXRlcy5pdGVtKGkpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaWdub3JlQmluZGluZyhhdHRyKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzUHJlc2VudChhdHRyLm5hbWUpICYmIGF0dHIubmFtZS50b0xvd2VyQ2FzZSgpID09PSAnc2NvcGVrZXknKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2NvcGVCaW5kaW5nID0gYXR0ci52YWx1ZTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJpbmRpbmdzTWFwLnNldChhdHRyLm5hbWUsIGF0dHIudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmluZGluZ0tleXMgPSBbXTtcbiAgICAgICAgdGhpcy5iaW5kaW5nc01hcC5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PlxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmJpbmRpbmdLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gU29ydCB0aGVtIGJ5IHRoZWlyIGltcG9ydGFuY2Ugb3IgcmFua1xuICAgICAgICBMaXN0V3JhcHBlci5zb3J0QnlFeGFtcGxlKHRoaXMuYmluZGluZ0tleXMsIElNUExJQ0lUX1BST1BFUlRJRVMpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogVGhlIHRoaW5nIHdlIHdhbnQgaXMgdG8gcGFzcyB2YXJpYWJsZSBudW1iZXIgb2YgYmluZGluZ3MgYW5kIHJlc29sdmUgdGhlbSBwcm9ncmFtbWF0aWNhbGx5LlxuICAgICAqIEN1cnJlbnRseSBpbiBBbmd1bGFyIHdlIGNhbm5vdCBkbyB0aGlzIHdlIGhhdmUgdGhlc2Ugc2V0IG9mIHByb3BlcnRpZXMgd2hlcmUgd2UgZXhwZWN0XG4gICAgICogc29tZSBleHByZXNzaW9uLCBzb21lIGR5bmFtaWMgcHJvcGVydGllcy4gRm9yIHRoZSByZXN0IHdlIGV4cGVjdCBvbmx5IHN0cmluZyBsaXRlcmFsIHRvIGJlXG4gICAgICogcGFzc2VkIGluIHRoZXJlZm9yZSB3ZSBjYW4gcmVzb2x2ZSB0aGVtIHdpdGggbmF0aXZlRWxlbWVudC5hdHRyaWJ1dGVzXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGluaXRJbXBsaWNpdEJpbmRpbmdzKClcbiAgICB7XG4gICAgICAgIGlmIChpc1ByZXNlbnQodGhpcy5tb2R1bGUpKSB7XG4gICAgICAgICAgICB0aGlzLmJpbmRpbmdzTWFwLnNldCgnbW9kdWxlJywgdGhpcy5tb2R1bGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1ByZXNlbnQodGhpcy5sYXlvdXQpKSB7XG4gICAgICAgICAgICB0aGlzLmJpbmRpbmdzTWFwLnNldCgnbGF5b3V0JywgdGhpcy5sYXlvdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1ByZXNlbnQodGhpcy5vcGVyYXRpb24pKSB7XG4gICAgICAgICAgICB0aGlzLmJpbmRpbmdzTWFwLnNldCgnb3BlcmF0aW9uJywgdGhpcy5vcGVyYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1ByZXNlbnQodGhpcy5jbGFzcykpIHtcbiAgICAgICAgICAgIHRoaXMuYmluZGluZ3NNYXAuc2V0KCdjbGFzcycsIHRoaXMuY2xhc3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1ByZXNlbnQodGhpcy5vYmplY3QpKSB7XG4gICAgICAgICAgICB0aGlzLmJpbmRpbmdzTWFwLnNldCgnb2JqZWN0JywgdGhpcy5vYmplY3QpO1xuICAgICAgICAgICAgdGhpcy5wcmV2T2JqZWN0ID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5vYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1ByZXNlbnQodGhpcy5hY3Rpb25DYXRlZ29yeSkpIHtcbiAgICAgICAgICAgIHRoaXMuYmluZGluZ3NNYXAuc2V0KCdhY3Rpb25DYXRlZ29yeScsIHRoaXMuYWN0aW9uQ2F0ZWdvcnkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1ByZXNlbnQodGhpcy5hY3Rpb24pKSB7XG4gICAgICAgICAgICB0aGlzLmJpbmRpbmdzTWFwLnNldCgnYWN0aW9uJywgdGhpcy5hY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1ByZXNlbnQodGhpcy5maWVsZCkpIHtcbiAgICAgICAgICAgIHRoaXMuYmluZGluZ3NNYXAuc2V0KCdmaWVsZCcsIHRoaXMuZmllbGQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBTaW5jZSB3ZSBhcmUgZ29pbmcgdGhydSB0aGUgZWxlbWVudCcgYXR0cmlidXRlcyB3ZSB3YW50IHRvIHNraXAgYW55dGhpbmcgdGhhdCBoYXMgbm90aGlnblxuICAgICAqIHRvIGRvIHdpdGggdXMuXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGlnbm9yZUJpbmRpbmcoYXR0cjogQXR0cilcbiAgICB7XG4gICAgICAgIHJldHVybiBJTVBMSUNJVF9QUk9QRVJUSUVTLmluZGV4T2YoYXR0ci5uYW1lKSAhPT0gLTEgfHxcbiAgICAgICAgICAgIFN0cmluZ1dyYXBwZXIuY29udGFpbnMoYXR0ci5uYW1lLCAnX25nJykgfHxcbiAgICAgICAgICAgIFN0cmluZ1dyYXBwZXIuY29udGFpbnMoYXR0ci5uYW1lLCAnbmctJykgfHxcbiAgICAgICAgICAgIFN0cmluZ1dyYXBwZXIuY29udGFpbnMoYXR0ci5uYW1lLCAnKCcpIHx8XG4gICAgICAgICAgICAoaXNCbGFuayhhdHRyLnZhbHVlKSB8fCBhdHRyLnZhbHVlLmxlbmd0aCA9PT0gMCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBJZiBvYmplY3QgaXMgY2hhbmdlZCB3ZSBuZWVkIHRvIGFsc28gdXBkYXRlIG91ciBhbmd1bGFyIG1vZGVsIHRvIHJlZmxlY3QgdXNlciBjaGFuZ2VzLiBBbGxcbiAgICAgKiBjaGFuZ2VzIGFuZCB1cGRhdGVzIGluIG1ldGF1aSB1c2Ugb2JqZWN0IHJlZmVyZW5jZXNcbiAgICAgKi9cbiAgICBwcml2YXRlIHVwZGF0ZU1vZGVsKClcbiAgICB7XG4gICAgICAgIGxldCBmaWVsZHMgPSBPYmplY3Qua2V5cyh0aGlzLm9iamVjdCk7XG4gICAgICAgIGZpZWxkcy5mb3JFYWNoKChmaWVsZDogc3RyaW5nKSA9PlxuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgY29udHJvbDogRm9ybUNvbnRyb2wgPSA8Rm9ybUNvbnRyb2w+IHRoaXMuZm9ybUdyb3VwLmdldChmaWVsZCk7XG4gICAgICAgICAgICBpZiAoaXNQcmVzZW50KGNvbnRyb2wpKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbC5wYXRjaFZhbHVlKHRoaXMub2JqZWN0W2ZpZWxkXSwge29ubHlTZWxmOiBmYWxzZSwgZW1pdEV2ZW50OiB0cnVlfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMucHJldk9iamVjdCA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMub2JqZWN0KTtcbiAgICB9XG5cblxuICAgIHByaXZhdGUgX2hhc09iamVjdCgpOiBib29sZWFuXG4gICAge1xuICAgICAgICBsZXQgY29udGV4dCA9IHRoaXMuYWN0aXZlQ29udGV4dCgpO1xuICAgICAgICBpZiAoaXNQcmVzZW50KGNvbnRleHQpKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNQcmVzZW50KCg8VUlDb250ZXh0PiBjb250ZXh0KS5vYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cblxuLyoqXG4gKlxuICogRGVmaW5lcyBmb3JtYXQgZm9yIHRoZSBicm9hZGNhc3RlZCBhY3Rpb24gZXZlbnQuIE1ldGFVSSBjYW4gYWxzbyBleGVjdXRlIGFjdGlvbnMgd2hpY2ggbmVlZHMgdG9cbiAqIGJlIGhhbmRsZWQgYnkgYXBwbGljYXRpb24gb3IgYWN0dWFsIGNvbXBvbmVudCB1c2luZyB0aGlzIG0tY29udGV4dC5cbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXRhVUlBY3Rpb25FdmVudFxue1xuXG4gICAgY29uc3RydWN0b3IoLyoqXG4gICAgICAgICAgICAgICAgICogV2hhdCBjb21wb25lbnQgdHJpZ2VyZWQgYWN0aW9uXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgcHVibGljIGNvbXBvbmVudDogYW55LFxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIE5hbWUgb2YgdGhlIGFjdGlvbi4gVXN1YWxseSBuYW1lIG9mIHRoZSBAT3V0cHV0IG9mIGFjdHVhbCBjb21wb25lbnRcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBwdWJsaWMgZXZlbnROYW1lOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogQWN0aW9ucyBvciBldmVudCB0aGF0IGFyZSBicm9hZGNhc3RlZCBjYW4gYmUgd3JhcHBlZCB3aXRoIEBhY3Rpb24gb3IgQGxheW91dFxuICAgICAgICAgICAgICAgICAqIHdoaWNoIGhhcyBpdHMgbmFtZS4gV2Ugd2FudCB0byBhbHNvIHNlbmQgb3V0IHRoaXMgbmFtZSB0byB0aGUgYXBwbGljYXRpb24gdG9cbiAgICAgICAgICAgICAgICAgKiBrbm93IHdoYXQgbWV0YXVpIGFjdGlvbiBvciBsYXlvdXQgdHJpZ2dlcmVkIHRoaXNcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBwdWJsaWMgY254TmFtZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIEFueSBkYXRhIHRoYXQgeW91IGNhbiBwYXNzXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgcHVibGljIGRhdGE6IGFueSlcbiAgICB7XG5cbiAgICB9XG59XG5cblxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgU0FQIEFyaWJhXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICpcbiAqL1xuaW1wb3J0IHtOZ01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Zvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge0NvbW1vbk1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7TWV0YUNvbnRleHRDb21wb25lbnR9IGZyb20gJy4vbWV0YS1jb250ZXh0L21ldGEtY29udGV4dC5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICAgIGRlY2xhcmF0aW9uczogW1xuICAgICAgICBNZXRhQ29udGV4dENvbXBvbmVudFxuICAgIF0sXG4gICAgaW1wb3J0czogW1xuICAgICAgICBDb21tb25Nb2R1bGUsXG4gICAgICAgIEZvcm1zTW9kdWxlLFxuICAgICAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlXG4gICAgXSxcbiAgICBlbnRyeUNvbXBvbmVudHM6IFtcbiAgICAgICAgTWV0YUNvbnRleHRDb21wb25lbnRcbiAgICBdLFxuICAgIGV4cG9ydHM6IFtcbiAgICAgICAgTWV0YUNvbnRleHRDb21wb25lbnQsXG4gICAgICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgICAgIEZvcm1zTW9kdWxlXG4gICAgXSxcbiAgICBwcm92aWRlcnM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIEFXTWV0YUNvcmVNb2R1bGVcbntcbn1cblxuXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBTQVAgQXJpYmFcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKlxuICovXG5pbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtpc0FycmF5LCBpc0JsYW5rLCBpc1ByZXNlbnQsIGlzU3RyaW5nTWFwLCBMaXN0V3JhcHBlciwgTWFwV3JhcHBlcn0gZnJvbSAnQGFyaWJhdWkvY29yZSc7XG5pbXBvcnQge0xvY2FsaXplZFN0cmluZywgVUlNZXRhfSBmcm9tICcuL3VpbWV0YSc7XG5pbXBvcnQge1J1bGUsIFNlbGVjdG9yfSBmcm9tICcuL3J1bGUnO1xuaW1wb3J0IHtKc29uUnVsZX0gZnJvbSAnLi9qc29uLXJ1bGUnO1xuaW1wb3J0IHtNZXRhLCBPdmVycmlkZVZhbHVlfSBmcm9tICcuL21ldGEnO1xuaW1wb3J0IHtcbiAgICBDb250ZXh0RmllbGRQYXRoLFxuICAgIEV4cHIsXG4gICAgU3RhdGljYWxseVJlc29sdmFibGVXcmFwcGVyLFxuICAgIFN0YXRpY0R5bmFtaWNXcmFwcGVyXG59IGZyb20gJy4vcHJvcGVydHktdmFsdWUnO1xuXG5cbnR5cGUgRHluYW1pY1ZhbHVlVHlwZSA9ICdFeHByJyB8ICdTRFcnIHwgJ0NGUCcgfCAnT1YnIHwgJ2kxOG4nO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgUnVsZUxvYWRlclxue1xuICAgIGxvYWRSdWxlcyAobWV0YTogTWV0YSwgc291cmNlOiBhbnksIG1vZHVsZTogc3RyaW5nLCBvblJ1bGU6IChydWxlOiBSdWxlKSA9PiB2b2lkKTogdm9pZDtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJ1bGVMb2FkZXJTZXJ2aWNlIGltcGxlbWVudHMgUnVsZUxvYWRlclxue1xuXG4gICAgcHJpdmF0ZSBfdWlNZXRhOiBVSU1ldGE7XG5cbiAgICBjb25zdHJ1Y3RvcigpXG4gICAge1xuICAgIH1cblxuXG4gICAgZ2V0IHVpTWV0YSgpOiBVSU1ldGFcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLl91aU1ldGE7XG4gICAgfVxuXG4gICAgc2V0IHVpTWV0YSh2YWx1ZTogVUlNZXRhKVxuICAgIHtcbiAgICAgICAgdGhpcy5fdWlNZXRhID0gdmFsdWU7XG4gICAgfVxuXG4gICAgbG9hZFJ1bGVzKG1ldGE6IE1ldGEsIHNvdXJjZTogYW55LCBtb2R1bGU6IHN0cmluZywgb25SdWxlOiAocnVsZTogUnVsZSkgPT4gdm9pZClcbiAgICB7XG4gICAgICAgIHRoaXMuX3VpTWV0YSA9IDxVSU1ldGE+bWV0YTtcbiAgICAgICAgc291cmNlLmZvckVhY2goKHZhbDogYW55LCBpbmRleDogYW55KSA9PlxuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgcnVsZSA9IHRoaXMucmVhZFJ1bGUodmFsLCBtb2R1bGUpO1xuICAgICAgICAgICAgaWYgKGlzUHJlc2VudChvblJ1bGUpKSB7XG4gICAgICAgICAgICAgICAgb25SdWxlKHJ1bGUpO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG5cbiAgICB9XG5cbiAgICBsb2FkUnVsZXNXaXRoUmV0dXJuKHNvdXJjZTogYW55LCBtb2R1bGU6IHN0cmluZyk6IEFycmF5PFJ1bGU+XG4gICAge1xuXG4gICAgICAgIGxldCBydWxlczogQXJyYXk8UnVsZT4gPSBuZXcgQXJyYXk8UnVsZT4oKTtcbiAgICAgICAgc291cmNlLmZvckVhY2goKHZhbDogYW55LCBpbmRleDogYW55KSA9PlxuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgcnVsZSA9IHRoaXMucmVhZFJ1bGUodmFsLCBtb2R1bGUpO1xuICAgICAgICAgICAgcnVsZXMucHVzaChydWxlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJ1bGVzO1xuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZWFkUnVsZShqc29uUnVsZTogSnNvblJ1bGUsIG1vZHVsZTogc3RyaW5nKTogUnVsZVxuICAgIHtcblxuICAgICAgICBsZXQgc2VsZWN0b3JzOiBBcnJheTxTZWxlY3Rvcj4gPSBuZXcgQXJyYXk8U2VsZWN0b3I+KCk7XG4gICAgICAgIGZvciAobGV0IGl0ZW0gb2YganNvblJ1bGUuX3NlbGVjdG9ycykge1xuXG4gICAgICAgICAgICBpZiAoaXNQcmVzZW50KGl0ZW0uX3ZhbHVlKSAmJiBpdGVtLl92YWx1ZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0ICYmIE9iamVjdC5rZXlzKFxuICAgICAgICAgICAgICAgICAgICBpdGVtLl92YWx1ZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaXRlbS5fdmFsdWUgPSBNZXRhLk51bGxNYXJrZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBzZWxlY3RvciA9IG5ldyBTZWxlY3RvcihpdGVtLl9rZXksIGl0ZW0uX3ZhbHVlLCBpdGVtLl9pc0RlY2wpO1xuICAgICAgICAgICAgc2VsZWN0b3JzLnB1c2goc2VsZWN0b3IpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwcm9wZXJ0aWVzID0gTWFwV3JhcHBlci5jcmVhdGVGcm9tU3RyaW5nTWFwV2l0aFJlc29sdmU8YW55Pihqc29uUnVsZS5fcHJvcGVydGllcyxcbiAgICAgICAgICAgIChrLCB2KSA9PlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmIChpc1N0cmluZ01hcCh2KSAmJlxuICAgICAgICAgICAgICAgICAgICBpc1ByZXNlbnQodlsndCddKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXNvdmVWYWx1ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHZbJ3QnXSwgdixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1N0cmluZ01hcChcbiAgICAgICAgICAgICAgICAgICAgICAgIHYpICYmICFpc0FycmF5KFxuICAgICAgICAgICAgICAgICAgICAgICAgdikpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgaGF2ZSBzb21lXG4gICAgICAgICAgICAgICAgICAgIC8vIG90aGVyIHN1YiBsZXZlbFxuICAgICAgICAgICAgICAgICAgICAvLyBvZiBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgLy8gbGl0ZXJhbCAtIGxldHNcbiAgICAgICAgICAgICAgICAgICAgLy8gY29udmVydCB0aGlzXG4gICAgICAgICAgICAgICAgICAgIC8vIGludG8gTWFwLlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWFwV3JhcHBlci5jcmVhdGVGcm9tU3RyaW5nTWFwV2l0aFJlc29sdmU8YW55PihcbiAgICAgICAgICAgICAgICAgICAgICAgIHYsIChrZXksIHZhbCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc292ZVZhbHVlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxbJ3QnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGUpKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2KSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBsZXQgY29udmVydCB3aXRoXG4gICAgICAgICAgICAgICAgICAgIC8vIHR5cGluZ3MgYXMgd2VsbFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTGlzdFdyYXBwZXIuY2xvbmU8c3RyaW5nPihcbiAgICAgICAgICAgICAgICAgICAgICAgIHYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBsZXQgcHJvcHMgPSBwcm9wZXJ0aWVzLnNpemUgPT09IDAgPyB1bmRlZmluZWQgOiBwcm9wZXJ0aWVzO1xuICAgICAgICBsZXQgcnVsZTogUnVsZSA9IG5ldyBSdWxlKHNlbGVjdG9ycywgcHJvcHMsIGpzb25SdWxlLl9yYW5rKTtcblxuICAgICAgICByZXR1cm4gcnVsZTtcbiAgICB9XG5cblxuICAgIC8vICdFeHByJyB8ICdTRFcnIHwgJ0NGUCcgfCAnT1YnIHwgJ2kxOG4nO1xuICAgIHByaXZhdGUgcmVzb3ZlVmFsdWUodHlwZTogRHluYW1pY1ZhbHVlVHlwZSwgdmFsdWU6IGFueSwgbW9kdWxlOiBzdHJpbmcpOiBhbnlcbiAgICB7XG4gICAgICAgIGlmIChpc0JsYW5rKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZSA9PT0gJ0V4cHInKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEV4cHIodmFsdWVbJ3YnXSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1NEVycpIHtcbiAgICAgICAgICAgIGxldCBleHByID0gbmV3IEV4cHIodmFsdWVbJ3YnXSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFN0YXRpY0R5bmFtaWNXcmFwcGVyKG5ldyBTdGF0aWNhbGx5UmVzb2x2YWJsZVdyYXBwZXIoZXhwcikpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ0NGUCcpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29udGV4dEZpZWxkUGF0aCh2YWx1ZVsndiddKTtcblxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdPVicpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgT3ZlcnJpZGVWYWx1ZSh2YWx1ZVsndiddKTtcblxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdpMThuJyAmJiB2YWx1ZVsndiddWydrZXknXSkge1xuICAgICAgICAgICAgbGV0IGxvY0tleSA9IHZhbHVlWyd2J11bJ2tleSddO1xuXG4gICAgICAgICAgICByZXR1cm4gaXNQcmVzZW50KHRoaXMuX3VpTWV0YSkgPyB0aGlzLl91aU1ldGEuY3JlYXRlTG9jYWxpemVkU3RyaW5nKGxvY0tleSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVbJ3YnXVsnZGVmVmFsJ10pXG4gICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgIG5ldyBMb2NhbGl6ZWRTdHJpbmcobnVsbCwgbW9kdWxlLCBsb2NLZXksIHZhbHVlWyd2J11bJ2RlZlZhbCddKTtcblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcblxuICAgIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IFNBUCBBcmliYVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqIEJhc2VkIG9uIG9yaWdpbmFsIHdvcms6IE1ldGFVSTogQ3JhaWcgRmVkZXJpZ2hpICgyMDA4KVxuICpcbiAqL1xuaW1wb3J0IHtDb21wb25lbnQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYXBwLW5vLW1ldGEnLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxoMj5NZXRhSW5jbHVkZUNvbXBvbmVudERpcmVjdGl2ZSBFcnJvcjo8L2gyPlxuICAgICAgICAgICAgICAgIE5vIGNvbXBvbmVudE5hbWUgcHJvcGVydHkgcmVzb2x2ZWQgaW4gQ29udGV4dDxici8+XG4gICAgYFxuICAgICxcbiAgICBzdHlsZVVybHM6IFsnbm8tbWV0YS5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIE5vTWV0YUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdFxue1xuXG4gICAgY29uc3RydWN0b3IoKVxuICAgIHtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpXG4gICAge1xuICAgIH1cblxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgU0FQIEFyaWJhXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogQmFzZWQgb24gb3JpZ2luYWwgd29yazogTWV0YVVJOiBDcmFpZyBGZWRlcmlnaGkgKDIwMDgpXG4gKlxuICovXG5pbXBvcnQge1xuICAgIEFmdGVyVmlld0luaXQsXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQ29tcG9uZW50LFxuICAgIENvbXBvbmVudEZhY3RvcnksXG4gICAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgIENvbXBvbmVudFJlZixcbiAgICBEaXJlY3RpdmUsXG4gICAgRG9DaGVjayxcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgZm9yd2FyZFJlZixcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgVHlwZSxcbiAgICBWaWV3Q29udGFpbmVyUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBDb21wb25lbnRSZWZlcmVuY2UsXG4gICAgQ29tcG9uZW50UmVnaXN0cnksXG4gICAgRG9tVXRpbHNTZXJ2aWNlLFxuICAgIEluY2x1ZGVDb21wb25lbnREaXJlY3RpdmVcbn0gZnJvbSAnQGFyaWJhdWkvY29tcG9uZW50cyc7XG5pbXBvcnQge1xuICAgIEVudmlyb25tZW50LFxuICAgIGVxdWFscyxcbiAgICBpc0JsYW5rLFxuICAgIGlzUHJlc2VudCxcbiAgICBpc1N0cmluZyxcbiAgICBNYXBXcmFwcGVyLFxuICAgIG5vblByaXZhdGVQcmVmaXgsXG4gICAgU3RyaW5nV3JhcHBlclxufSBmcm9tICdAYXJpYmF1aS9jb3JlJztcbmltcG9ydCB7Tm9NZXRhQ29tcG9uZW50fSBmcm9tICcuL25vLW1ldGEvbm8tbWV0YS5jb21wb25lbnQnO1xuaW1wb3J0IHtPYmplY3RNZXRhfSBmcm9tICcuLi9jb3JlL29iamVjdC1tZXRhJztcbmltcG9ydCB7Q29udGV4dH0gZnJvbSAnLi4vY29yZS9jb250ZXh0JztcbmltcG9ydCB7VUlNZXRhfSBmcm9tICcuLi9jb3JlL3VpbWV0YSc7XG5pbXBvcnQge0NvbnRleHRGaWVsZFBhdGgsIER5bmFtaWNQcm9wZXJ0eVZhbHVlLCBWYWx1ZUNvbnZlcnRlcn0gZnJvbSAnLi4vY29yZS9wcm9wZXJ0eS12YWx1ZSc7XG5pbXBvcnQge01ldGFDb250ZXh0Q29tcG9uZW50LCBNZXRhVUlBY3Rpb25FdmVudH0gZnJvbSAnLi4vY29yZS9tZXRhLWNvbnRleHQvbWV0YS1jb250ZXh0LmNvbXBvbmVudCc7XG5cblxuLyoqXG4gKiAgTWV0YUluY2x1ZGVDb21wb25lbnREaXJlY3RpdmUgaXMgKGFsb25nIHdpdGggTWV0YUNvbnRleHQpIHRoZSBrZXkgZWxlbWVudCBmb3IgYmluZGluZyBNZXRhVUlcbiAqIGludG8gQW5ndWxhckpzIHVzZXIgaW50ZXJmYWNlcy4gWW91IGNhbiB0aGluayBvZiBpdCBzdWNoIEdMVUUuXG4gKlxuICogIE1ldGFJbmNsdWRlQ29tcG9uZW50RGlyZWN0aXZlIGR5bmFtaWNhbGx5IHN3aXRjaGVzIGluIGEgQW5ndWxhcidzIGNvbXBvbmVudCBiYXNlZCBvbiB0aGVcbiAqIGN1cnJlbnQgTWV0YUNvbnRleHQnc1xuICogJ2NvbXBvbmVudCcgcHJvcGVydHkgYW5kIHNldHMgaXRzIGJpbmRpbmdzIGZyb20gdGhlICdiaW5kaW5ncycgcHJvcGVydHkuICBUaGlzIGFsb25lIGVuYWJsZXNcbiAqIGFsbW9zdCBhbnkgZXhpc3RpbmcgQW5ndWxhcidzIHdpZGdldCB0byBiZSBzcGVjaWZpZWQgZm9yIHVzZSBmb3IgYSBwYXJ0aWN1bGFyIGZpZWxkIG9yIGxheW91dFxuICogdXNpbmcgcnVsZXMgLS0gd2l0aG91dCBhbnkgYWRkaXRpb25hbCBnbHVlIGNvZGUgLlxuICpcbiAqICBjb21wb25lbnQgdXNpbmcgJ3dyYXBwZXJDb21wb25lbnQnIGFuZCAnd3JhcHBlckJpbmRpbmdzJywgYmluZGluZyBjb21wb25lbnQgY29udGVudCB1c2luZyB0aGVcbiAqIGJpbmRpbmdzICduZ2NvbnRlbnQnLCBuZ2NvbnRlbnRMYXlvdXQgYW5kICduZ2NvbnRlbnRlbEVsZW1lbnQnLCBhbmQgZXZlbnQgYmluZGluZyBuYW1lZCBDb250ZW50XG4gKiB0ZW1wbGF0ZXMgdXNpbmcgYW5cbiAqICdhd2NvbnRlbnRMYXlvdXRzJyBtYXAgYmluZGluZy4gV2l0aG91dCB0aGlzIHdlIHdpbGwgbm90IGJlIGFibGUgdG8gdXNlIGNvbXBsZXggbGF5b3V0cy5cbiAqXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnbS1pbmNsdWRlLWNvbXBvbmVudCdcbn0pXG5leHBvcnQgY2xhc3MgTWV0YUluY2x1ZGVDb21wb25lbnREaXJlY3RpdmUgZXh0ZW5kcyBJbmNsdWRlQ29tcG9uZW50RGlyZWN0aXZlIGltcGxlbWVudHMgRG9DaGVjayxcbiAgICBBZnRlclZpZXdJbml0IHtcblxuICAgIC8qKlxuICAgICAqIEp1c3QgYSBjb25zdGFudCB1c2UgdG8gYWNjZXNzIEVudmlyb25tZW50IHdoZXJlIHdlIHN0b3JlIGN1cnJlbnQgY29udGV4dCBmb3IgY3VycmVudCByZW5kZXJcbiAgICAgKiBsaWZlY3ljbGVcbiAgICAgKlxuICAgICAqL1xuICAgIHN0YXRpYyByZWFkb25seSBGb3JtYXR0ZXJCaW5kaW5nID0gJ2Zvcm1hdHRlcic7XG5cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogSW4gbWV0YVUgd2UgY2FuIGFsc28gaW5zZXJ0IGludG8gdGhlIGVsZW1lbnQgbm90IG9ubHkgbmdjb250ZW50IGJ1dCBuZXcgaW5zdGFudGlhdGVkXG4gICAgICogY29tcG9uZW50IHdoaWNoIGlzIGRlZmluZWQgYnkgbGF5b3V0XG4gICAgICpcbiAgICAgKmBgYFxuICAgICAqIGZpZWxkIHRyYWl0PU9iamVjdERldGFpbCB7XG4gICAgICogXHRlZGl0YWJsZT1mYWxzZSB7XG4gICAgICogXHRcdGNvbXBvbmVudDogSG92ZXJDYXJkQ29tcG9ubmV0O1xuICAgICAqIFx0XHRiaW5kaW5nczoge1xuICAgICAqIFx0XHRcdG5nY29udGVudExheW91dDogQ29udGVudDtcbiAgICAgKiBcdFx0XHRsaW5rVGl0bGU6JHtwcm9wZXJ0aWVzLmdldChcImxhYmVsXCIpfTtcbiAgICAgKiBcdFx0fVxuICAgICAqIFx0fVxuICAgICAqXG4gICAgICogICAgQGxheW91dD1Db250ZW50IHtcbiAgICAgKiBcdFx0Y29tcG9uZW50OiBNZXRhQ29udGV4dE9iamVjdDtcbiAgICAgKiBcdFx0YmluZGluZ3M6IHtcbiAgICAgKiBcdFx0XHRvYmplY3Q6ICR2YWx1ZTtcbiAgICAgKiBcdFx0XHRsYXlvdXQ6RGV0YWlsTGF5b3V0XG4gICAgICogXHRcdFx0b3BlcmF0aW9uOlwidmlld1wiO1xuICAgICAqIFx0XHR9XG4gICAgICogXHR9XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICovXG4gICAgc3RhdGljIHJlYWRvbmx5IE5nQ29udGVudExheW91dCA9ICduZ2NvbnRlbnRMYXlvdXQnO1xuXG5cbiAgICAvKipcbiAgICAgKiBJIGNvdWxkIG5vdCBmaW5kIGFueSByZWFsaWFibGUgd2F5IGhvdyB0byBhY2Nlc3MgcGFyZW50IHZpZXcuIEV2ZW4gZm9yd2FyZFJlZiB1cCB0byBjZXJ0YWluXG4gICAgICogcG9pbnQgd29ya2VkIGJ1dCBoYWQgdG8gZ2V0IGF3YXkgZnJvbSB0aGlzIGFwcHJvYWNoIGFzIGl0IGZhaWxzIGZvciBteSB1c2VjYXNlIHdoZW4gdXBkYXRpbmdcbiAgICAgKiBjb250ZXh0IGFuZCBwdXNoaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIHRoZSBzdGFjay5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGNvbnRleHQ6IE1ldGFDb250ZXh0Q29tcG9uZW50O1xuXG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTWV0YUNvbnRleHRDb21wb25lbnQpKVxuICAgICAgICAgICAgICAgIHB1YmxpYyBtZXRhQ29udGV4dDogTWV0YUNvbnRleHRDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgcHVibGljIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXG4gICAgICAgICAgICAgICAgcHVibGljIGZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgICAgICAgICAgICAgIHB1YmxpYyBlbnY6IEVudmlyb25tZW50LFxuICAgICAgICAgICAgICAgIHB1YmxpYyBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgICAgICAgICAgICAgcHVibGljIGNvbXBSZWdpc3RyeTogQ29tcG9uZW50UmVnaXN0cnksXG4gICAgICAgICAgICAgICAgcHVibGljIGRvbVV0aWxzOiBEb21VdGlsc1NlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIodmlld0NvbnRhaW5lciwgZmFjdG9yeVJlc29sdmVyLCBjZCwgY29tcFJlZ2lzdHJ5KTtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpcnN0IHdlIHNpbXBseSByZW5kZXIgdGhlIGEgY29tcG9uZW50IGluIHRoZSBuZ09uSW5pdCgpIGFuZCB0aGVuIGV2ZXJ5IHRpbWUgc29tZXRoaW5nXG4gICAgICogY2hhbmdlcy5cbiAgICAgKi9cbiAgICBuZ0RvQ2hlY2soKTogdm9pZCB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdNZXRhSW5jbHVkZShuZ0RvQ2hlY2spOicsIHRoaXMubmFtZSk7XG5cbiAgICAgICAgbGV0IGNvbnRleHQgPSB0aGlzLm1ldGFDb250ZXh0Lm15Q29udGV4dCgpO1xuICAgICAgICBpZiAoaXNCbGFuayhjb250ZXh0KSB8fCBpc0JsYW5rKHRoaXMuY3VycmVudENvbXBvbmVudCkpIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdObyBjb250ZXh0LyBjb21wb25lbnQgZm9yICcgKyB0aGlzLm5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG5ld0NvbXBvbmVudCA9IGNvbnRleHQucHJvcGVydHlGb3JLZXkoJ2NvbXBvbmVudCcpO1xuICAgICAgICBpZiAoaXNQcmVzZW50KG5ld0NvbXBvbmVudCkgJiYgaXNQcmVzZW50KHRoaXMubmFtZSkgJiYgKHRoaXMubmFtZSAhPT0gbmV3Q29tcG9uZW50KSkge1xuICAgICAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLmRvUmVuZGVyQ29tcG9uZW50KCk7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnTWV0YUluY2x1ZGUobmdEb0NoZWNrLSByZXJlbmRlciApOicsIHRoaXMubmFtZSk7XG5cbiAgICAgICAgICAgIHRoaXMuY3JlYXRlV3JhcHBlckVsZW1lbnRJZkFueSgpO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb250ZW50RWxlbWVudElmQW55KCk7XG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIC8vIHdlIG1pZ2h0IG5vdCBza2lwIGNvbXBvbmVudCBpbnN0YW50aWF0aW9uIGJ1dCB3ZSBzdGlsbCBuZWVkIHRvIHVwZGF0ZSBiaW5kaW5nc1xuICAgICAgICAgICAgLy8gYXMgcHJvcGVydGllcyBjb3VsZCBjaGFuZ2VcbiAgICAgICAgICAgIGxldCBlZGl0YWJsZSA9IGNvbnRleHQucHJvcGVydHlGb3JLZXkoT2JqZWN0TWV0YS5LZXlFZGl0YWJsZSk7XG4gICAgICAgICAgICBpZiAoaXNCbGFuayhlZGl0YWJsZSkpIHtcbiAgICAgICAgICAgICAgICBlZGl0YWJsZSA9IGNvbnRleHQucHJvcGVydHlGb3JLZXkoVUlNZXRhLktleUVkaXRpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IG1ldGFCaW5kaW5ncyA9IGNvbnRleHQucHJvcGVydHlGb3JLZXkoVUlNZXRhLktleUJpbmRpbmdzKTtcbiAgICAgICAgICAgIGxldCB0eXBlID0gY29udGV4dC5wcm9wZXJ0eUZvcktleShPYmplY3RNZXRhLktleVR5cGUpO1xuICAgICAgICAgICAgbGV0IGlucHV0czogc3RyaW5nW10gPSB0aGlzLmNvbXBvbmVudFJlZmVyZW5jZSgpLm1ldGFkYXRhLmlucHV0cztcblxuICAgICAgICAgICAgLy8gcmUtYXBwbHkgSW5wdXRzXG4gICAgICAgICAgICAvLyBtYXliZSB3ZSBzaG91bGQgZGlmZiBwcm9wZXJ0aWVzIGFuZCBvbmx5IGlmIHRoZXkgY2hhbmdlZCByZS1hcHBseVxuICAgICAgICAgICAgaWYgKGlzUHJlc2VudChtZXRhQmluZGluZ3MpICYmIGlzUHJlc2VudChpbnB1dHMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBseUlucHV0cyh0aGlzLmN1cnJlbnRDb21wb25lbnQsIHR5cGUsIG1ldGFCaW5kaW5ncywgaW5wdXRzLCBlZGl0YWJsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qXG4gICAgICogUmV0cmlldmVzIGNvbXBvbmVudCBOYW1lIGZyb20gdGhlIENvbnRleHQuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHJlc29sdmVDb21wb25lbnRUeXBlKCk6IFR5cGU8YW55PiB7XG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMubWV0YUNvbnRleHQubXlDb250ZXh0KCkucHJvcGVydHlGb3JLZXkoVUlNZXRhLktleUNvbXBvbmVudE5hbWUpO1xuXG4gICAgICAgIGlmIChpc0JsYW5rKHRoaXMubmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBOb01ldGFDb21wb25lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1cGVyLnJlc29sdmVDb21wb25lbnRUeXBlKCk7XG4gICAgfVxuXG5cbiAgICAvKlxuICAgICAqIElmIHRoZXJlIGlzIGEgTkcgY29udGVudCBhcyBwYXJ0IG9mIHRoZSBiaW5kaW5ncyBhcHBseSBpdCBhbmQgcmVtb3ZlIGl0IGZyb20gdGhlIGxpc3QuIEluXG4gICAgICogdGhlIE1ldGFVSSB3b3JsZCBpdCBjYW4gYXBwZWFyIGlmIHdlIHdhbnQgdG8gaW5zZXJ0IGEgdGV4dCBjb250ZW50IGludG8gdGhlIGVsZW1lbnQ6XG4gICAgICpcbiAgICAgKlxuICAgICAqICB0cmFpdD10b01hbnlMaW5rIHtcbiAgICAgKiAgICAgICAgIGNvbXBvbmVudDpBV0h5cGVybGluaztcbiAgICAgKiAgICAgICAgIGJpbmRpbmdzOiB7XG4gICAgICogICAgICAgICAgICAgYWN0aW9uOiAke1xuICAgICAqICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwib2JqZWN0XCIsIHZhbHVlKTtcbiAgICAgKiAgICAgICAgICAgICAgICB0aGlzLnNldChcImFjdGlvbkNhdGVnb3J5XCIsIFwiR2VuZXJhbFwiKTtcbiAgICAgKiAgICAgICAgICAgICAgICB0aGlzLnNldChcImFjdGlvblwiLCBcIkluc3BlY3RcIik7XG4gICAgICogICAgICAgICAgICAgICAgIG1ldGEuZmlyZUFjdGlvbih0aGlzLCB0cnVlKVxuICAgICAqICAgICAgICAgICAgIH07XG4gICAgICogICAgICAgICAgICAgYXdjb250ZW50OiBcIkNsaWNrIE1lXCI7XG4gICAgICogICAgICAgICB9XG4gICAgICogICAgIH1cbiAgICAgKlxuICAgICAqXG4gICAgICovXG4gICAgcHJvdGVjdGVkIG5nQ29udGVudCgpOiBzdHJpbmcge1xuICAgICAgICBsZXQgY250VmFsdWU6IGFueTtcbiAgICAgICAgbGV0IGJpbmRpbmdzID0gdGhpcy5tZXRhQ29udGV4dC5teUNvbnRleHQoKS5wcm9wZXJ0eUZvcktleShVSU1ldGEuS2V5QmluZGluZ3MpO1xuXG4gICAgICAgIGlmIChpc1ByZXNlbnQoYmluZGluZ3MpICYmXG4gICAgICAgICAgICBpc1ByZXNlbnQoY250VmFsdWUgPSBiaW5kaW5ncy5nZXQoSW5jbHVkZUNvbXBvbmVudERpcmVjdGl2ZS5OZ0NvbnRlbnQpKSkge1xuICAgICAgICAgICAgY250VmFsdWUgPSBpc1N0cmluZyhjbnRWYWx1ZSkgPyBjbnRWYWx1ZSA6XG4gICAgICAgICAgICAgICAgdGhpcy5tZXRhQ29udGV4dC5teUNvbnRleHQoKS5yZXNvbHZlVmFsdWUoY250VmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbnRWYWx1ZTtcbiAgICB9XG5cblxuICAgIHByb3RlY3RlZCBuZ0NvbnRlbnRFbGVtZW50KCk6IHN0cmluZyB7XG4gICAgICAgIGxldCBjbnRWYWx1ZTogYW55O1xuICAgICAgICBsZXQgYmluZGluZ3MgPSB0aGlzLm1ldGFDb250ZXh0Lm15Q29udGV4dCgpLnByb3BlcnR5Rm9yS2V5KFVJTWV0YS5LZXlCaW5kaW5ncyk7XG5cbiAgICAgICAgaWYgKGlzUHJlc2VudChiaW5kaW5ncykgJiZcbiAgICAgICAgICAgIGlzUHJlc2VudChjbnRWYWx1ZSA9IGJpbmRpbmdzLmdldChJbmNsdWRlQ29tcG9uZW50RGlyZWN0aXZlLk5nQ29udGVudEVsZW1lbnQpKSkge1xuICAgICAgICAgICAgY250VmFsdWUgPSBpc1N0cmluZyhjbnRWYWx1ZSkgPyBjbnRWYWx1ZSA6XG4gICAgICAgICAgICAgICAgdGhpcy5tZXRhQ29udGV4dC5teUNvbnRleHQoKS5yZXNvbHZlVmFsdWUoY250VmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbnRWYWx1ZTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEltcGxlbWVudCBjdXN0b20gYmVoYXZpb3Igb2YgYWRkaW5nIG5nY29udGVudExheW91dCBkZXNjcmliZWQgYWJvdmUgKHdoZXJlIHRoZSBjb25zdGFudFxuICAgICAqIGlzIGRlZmluZWQpXG4gICAgICpcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgY3JlYXRlQ29udGVudEVsZW1lbnRJZkFueSgpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IGRldGVjdENoYW5nZXMgPSBmYWxzZTtcbiAgICAgICAgbGV0IGJpbmRpbmdzID0gdGhpcy5tZXRhQ29udGV4dC5teUNvbnRleHQoKS5wcm9wZXJ0eUZvcktleShVSU1ldGEuS2V5QmluZGluZ3MpO1xuXG5cbiAgICAgICAgaWYgKGlzUHJlc2VudChiaW5kaW5ncykgJiYgYmluZGluZ3MuaGFzKE1ldGFJbmNsdWRlQ29tcG9uZW50RGlyZWN0aXZlLk5nQ29udGVudExheW91dCkpIHtcblxuICAgICAgICAgICAgbGV0IGxheW91dE5hbWUgPSBiaW5kaW5ncy5nZXQoTWV0YUluY2x1ZGVDb21wb25lbnREaXJlY3RpdmUuTmdDb250ZW50TGF5b3V0KTtcbiAgICAgICAgICAgIGxldCBjb250ZXh0ID0gdGhpcy5tZXRhQ29udGV4dC5teUNvbnRleHQoKTtcblxuICAgICAgICAgICAgY29udGV4dC5wdXNoKCk7XG4gICAgICAgICAgICBjb250ZXh0LnNldChVSU1ldGEuS2V5TGF5b3V0LCBsYXlvdXROYW1lKTtcblxuICAgICAgICAgICAgbGV0IGNvbXBvbmVudE5hbWUgPSBjb250ZXh0LnByb3BlcnR5Rm9yS2V5KCdjb21wb25lbnQnKTtcbiAgICAgICAgICAgIGxldCBjb21wVHlwZSA9IHRoaXMuY29tcFJlZ2lzdHJ5Lm5hbWVUb1R5cGUuZ2V0KGNvbXBvbmVudE5hbWUpO1xuXG4gICAgICAgICAgICBsZXQgY29tcG9uZW50RmFjdG9yeTogQ29tcG9uZW50RmFjdG9yeTxhbnk+ID0gdGhpcy5mYWN0b3J5UmVzb2x2ZXJcbiAgICAgICAgICAgICAgICAucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoY29tcFR5cGUpO1xuXG4gICAgICAgICAgICBsZXQgY29tcG9uZW50TWV0YTogQ29tcG9uZW50ID0gdGhpcy5yZXNvbHZlRGlyZWN0aXZlKGNvbXBvbmVudEZhY3RvcnkpO1xuICAgICAgICAgICAgbGV0IG5nQ29tcG9uZW50ID0gdGhpcy52aWV3Q29udGFpbmVyLmNyZWF0ZUNvbXBvbmVudChjb21wb25lbnRGYWN0b3J5LCAwKTtcblxuICAgICAgICAgICAgbGV0IGNSZWZlcmVuY2U6IENvbXBvbmVudFJlZmVyZW5jZSA9IHtcbiAgICAgICAgICAgICAgICBtZXRhZGF0YTogY29tcG9uZW50TWV0YSxcbiAgICAgICAgICAgICAgICByZXNvbHZlZENvbXBGYWN0b3J5OiBjb21wb25lbnRGYWN0b3J5LFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudFR5cGU6IGNvbXBUeXBlLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudE5hbWU6IGNvbXBvbmVudE5hbWVcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMuYXBwbHlCaW5kaW5ncyhjUmVmZXJlbmNlLCBuZ0NvbXBvbmVudCwgY29udGV4dC5wcm9wZXJ0eUZvcktleShVSU1ldGEuS2V5QmluZGluZ3MpLFxuICAgICAgICAgICAgICAgIGZhbHNlKTtcblxuICAgICAgICAgICAgdGhpcy5kb21VdGlscy5pbnNlcnRJbnRvUGFyZW50TmdDb250ZW50KHRoaXMuY3VycmVudENvbXBvbmVudC5sb2NhdGlvbi5uYXRpdmVFbGVtZW50LFxuICAgICAgICAgICAgICAgIG5nQ29tcG9uZW50LmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQpO1xuXG4gICAgICAgICAgICBjb250ZXh0LnBvcCgpO1xuXG4gICAgICAgICAgICBkZXRlY3RDaGFuZ2VzID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRldGVjdENoYW5nZXMgPSBzdXBlci5jcmVhdGVDb250ZW50RWxlbWVudElmQW55KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRldGVjdENoYW5nZXMpIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdNZXRhSW5jbHVkZShjcmVhdGVDb250ZW50RWxlbWVudElmQW55KTonLCB0aGlzLm5hbWUpO1xuICAgICAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGV0ZWN0Q2hhbmdlcztcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIE1ldGEgcGxhY2VUaGVDb21wb25lbnQgbmVlZHMgdG8gYWNjb3VudCBmb3Igd3JhcHBlciBjb21wb25lbnQuIElmIHdyYXBwZXIgY29tcG9uZW50XG4gICAgICogaXMgcHJlc2VudC4gSXQgbmVlZHMgdG8gaW5qZWN0IHRoZSB3cmFwcGVyIGNvbXBvbmVudCBvbiB0aGUgcGFnZSBhbmQgYWRkIHRoaXMgY29tcG9uZW50XG4gICAgICogaW5zaWRlIHRoZSB3cmFwcGVyIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgY3JlYXRlV3JhcHBlckVsZW1lbnRJZkFueSgpOiB2b2lkIHtcbiAgICAgICAgbGV0IHdyYXBwZXJOYW1lID0gdGhpcy5tZXRhQ29udGV4dC5teUNvbnRleHQoKS5wcm9wZXJ0eUZvcktleShVSU1ldGEuS2V5V3JhcHBlckNvbXBvbmVudCk7XG4gICAgICAgIGlmIChpc0JsYW5rKHdyYXBwZXJOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTm93IHdlIGhhdmUgd3JhcHBlckNvbXBvbmVudC4gV2UgZG8gdGhlIGZvbGxvd2luZzpcbiAgICAgICAgLy8gMS4gIENyZWF0ZSB3cmFwcGVyIGNvbXBvbmVudC5cbiAgICAgICAgbGV0IHdyYXBwZXJUeXBlID0gdGhpcy5jb21wUmVnaXN0cnkubmFtZVRvVHlwZS5nZXQod3JhcHBlck5hbWUpO1xuXG4gICAgICAgIGxldCBjb21wb25lbnRGYWN0b3J5OiBDb21wb25lbnRGYWN0b3J5PGFueT4gPSB0aGlzLmZhY3RvcnlSZXNvbHZlclxuICAgICAgICAgICAgLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KHdyYXBwZXJUeXBlKTtcbiAgICAgICAgbGV0IGNvbXBvbmVudE1ldGE6IENvbXBvbmVudCA9IHRoaXMucmVzb2x2ZURpcmVjdGl2ZSh3cmFwcGVyVHlwZSk7XG5cbiAgICAgICAgbGV0IHdyYXBwZXJDb21wb25lbnQgPSB0aGlzLnZpZXdDb250YWluZXIuY3JlYXRlQ29tcG9uZW50KGNvbXBvbmVudEZhY3RvcnkpO1xuXG4gICAgICAgIC8vIDIuIEFkZCB3cmFwcGVyIGJpbmRpbmdzIHRvIHdyYXBwZXIgY29tcG9uZW50LlxuICAgICAgICBsZXQgd3JhcHBlckJpbmRpbmdzID0gdGhpcy5tZXRhQ29udGV4dC5teUNvbnRleHQoKS5wcm9wZXJ0eUZvcktleShVSU1ldGEuS2V5V3JhcHBlckJpbmRpbmcpO1xuICAgICAgICAoPGFueT4gd3JhcHBlckNvbXBvbmVudC5pbnN0YW5jZSlbJ2JpbmRpbmdzJ10gPSB3cmFwcGVyQmluZGluZ3M7XG5cbiAgICAgICAgLy8gMy4gQXBwbHkgdGhlIGJpbmRpbmdzLiBHZXQgdGhlIHdyYXBwZXIgbWV0YWRhdGEsIGxvb2sgdGhyb3VnaCBpdCdzIGlucHV0IC0gb3V0cHV0XG4gICAgICAgIC8vIGJpbmRpbmdzLiBhbmQgYXBwbHkgdGhlIHdyYXBwZXJCaW5kaW5ncyB0byB0aGVzZSBiaW5kaW5ncy5cbiAgICAgICAgbGV0IHdyYXBwZXJDb21wb25lbnRSZWY6IENvbXBvbmVudFJlZmVyZW5jZSA9IHtcbiAgICAgICAgICAgIG1ldGFkYXRhOiBjb21wb25lbnRNZXRhLFxuICAgICAgICAgICAgcmVzb2x2ZWRDb21wRmFjdG9yeTogY29tcG9uZW50RmFjdG9yeSxcbiAgICAgICAgICAgIGNvbXBvbmVudFR5cGU6IHdyYXBwZXJUeXBlLFxuICAgICAgICAgICAgY29tcG9uZW50TmFtZTogd3JhcHBlck5hbWVcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmFwcGx5QmluZGluZ3Mod3JhcHBlckNvbXBvbmVudFJlZiwgd3JhcHBlckNvbXBvbmVudCwgd3JhcHBlckJpbmRpbmdzKTtcbiAgICAgICAgdGhpcy5kb21VdGlscy5pbnNlcnRJbnRvUGFyZW50TmdDb250ZW50KHdyYXBwZXJDb21wb25lbnQubG9jYXRpb24ubmF0aXZlRWxlbWVudCxcbiAgICAgICAgICAgIHRoaXMuY3VycmVudENvbXBvbmVudC5sb2NhdGlvbi5uYXRpdmVFbGVtZW50KTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEFwcGx5QmluZGluZ3MgcmVhZHMgdGhlIEBJbnB1dHMgZnJvbSBDb21wb25lbnRNZXRhZGF0YSBhbmQgY2hlY2sgaWYgdGhlcmUgZXhpc3RzIGEgYmluZGluZ1xuICAgICAqIGNvbWluZyBmcm9tIE1ldGFSdWxlcy4gSWYgdGhlcmUgaXMgd2UgYXNzaWduIGl0IHRvIHRoZSBpbnB1dC5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgYXBwbHlCaW5kaW5ncyhjUmVmOiBDb21wb25lbnRSZWZlcmVuY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50OiBDb21wb25lbnRSZWY8YW55PixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5kaW5nczogTWFwPHN0cmluZywgYW55PixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiVXNlTWV0YUJpbmRpbmdzOiBib29sZWFuID0gdHJ1ZSk6IHZvaWQge1xuICAgICAgICBzdXBlci5hcHBseUJpbmRpbmdzKGNSZWYsIGNvbXBvbmVudCwgYmluZGluZ3MpO1xuICAgICAgICBsZXQgaW5wdXRzOiBzdHJpbmdbXSA9IGNSZWYubWV0YWRhdGEuaW5wdXRzO1xuICAgICAgICBsZXQgb3V0cHV0czogc3RyaW5nW10gPSBjUmVmLm1ldGFkYXRhLm91dHB1dHM7XG5cbiAgICAgICAgbGV0IG1ldGFCaW5kaW5ncyA9IHRoaXMubWV0YUNvbnRleHQubXlDb250ZXh0KCkucHJvcGVydHlGb3JLZXkoVUlNZXRhLktleUJpbmRpbmdzKTtcbiAgICAgICAgbGV0IGVkaXRhYmxlID0gdGhpcy5tZXRhQ29udGV4dC5teUNvbnRleHQoKS5wcm9wZXJ0eUZvcktleShPYmplY3RNZXRhLktleUVkaXRhYmxlKTtcbiAgICAgICAgbGV0IHR5cGUgPSB0aGlzLm1ldGFDb250ZXh0Lm15Q29udGV4dCgpLnByb3BlcnR5Rm9yS2V5KE9iamVjdE1ldGEuS2V5VHlwZSk7XG5cbiAgICAgICAgLy8gVGhlcmUgYXJlIGNhc2VzIHdoZXJlIHdlIHdhbnQgdG8gdXNlIHRoZSBiaW5kaW5ncyBwYXNzZWQgaW50byB0aGlzIGZ1bmN0aW9uLlxuICAgICAgICAvLyBGb3IgZXhhbXBsZSwgdGhlIHdyYXBwZXJCaW5kaW5ncy5cbiAgICAgICAgaWYgKCFiVXNlTWV0YUJpbmRpbmdzKSB7XG4gICAgICAgICAgICBtZXRhQmluZGluZ3MgPSBiaW5kaW5ncztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0JsYW5rKG1ldGFCaW5kaW5ncykgfHwgaXNCbGFuayhpbnB1dHMpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY3VycmVuQmluZGluZ3MgPSBNYXBXcmFwcGVyLmNsb25lKG1ldGFCaW5kaW5ncyk7XG4gICAgICAgIHRoaXMuYXBwbHlJbnB1dHMoY29tcG9uZW50LCB0eXBlLCBjdXJyZW5CaW5kaW5ncywgaW5wdXRzLCBlZGl0YWJsZSk7XG4gICAgICAgIHRoaXMuYXBwbHlPdXRwdXRzKGNvbXBvbmVudCwgY3VycmVuQmluZGluZ3MsIG91dHB1dHMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXBwbHlJbnB1dHMoY29tcG9uZW50OiBDb21wb25lbnRSZWY8YW55PiwgdHlwZTogYW55LCBiaW5kaW5nczogYW55LFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzOiBzdHJpbmdbXSwgZWRpdGFibGU6IGFueSwgY29tcFRvQmVSZW5kZXJlZDogYm9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgLy8gcHJvcGFnYXRlIGEgZmllbGQgdHlwZSB0byBiaW5kaW5ncy5cbiAgICAgICAgaWYgKGlzUHJlc2VudCh0eXBlKSAmJiBpc1ByZXNlbnQoY29tcG9uZW50Lmluc3RhbmNlLmNhblNldFR5cGUpICYmXG4gICAgICAgICAgICBjb21wb25lbnQuaW5zdGFuY2UuY2FuU2V0VHlwZSgpKSB7XG4gICAgICAgICAgICBiaW5kaW5ncy5zZXQoT2JqZWN0TWV0YS5LZXlUeXBlLCB0eXBlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc1ByZXNlbnQoZWRpdGFibGUpICYmIGlzUHJlc2VudChjb21wb25lbnQuaW5zdGFuY2VbJ2VkaXRhYmxlJ10pKSB7XG4gICAgICAgICAgICBjb21wb25lbnQuaW5zdGFuY2VbJ2VkaXRhYmxlJ10gPSBlZGl0YWJsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGtleSBvZiBpbnB1dHMpIHtcbiAgICAgICAgICAgIGxldCBwdWJsaWNLZXkgPSBub25Qcml2YXRlUHJlZml4KGtleSk7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBiaW5kaW5ncy5nZXQocHVibGljS2V5KTtcblxuICAgICAgICAgICAgLy8gSGFuZGxlIHNwZWNpYWwgY2FzZSB3aGVyZSB3ZSBkbyBub3QgcGFzcyBleHBsaWNpdGx5IG9yIGluaGVyaXQgZnJvbSBwYXJlbnQgQElucHV0XG4gICAgICAgICAgICAvLyBuYW1lIGZvciB0aGUgY29tcG9uZW50XG5cbiAgICAgICAgICAgIGlmIChrZXkgPT09ICduYW1lJyAmJiBpc0JsYW5rKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5tZXRhQ29udGV4dC5teUNvbnRleHQoKS5wcm9wZXJ0eUZvcktleShPYmplY3RNZXRhLktleUZpZWxkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuc2tpcElucHV0KGtleSwgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNvbXBUb0JlUmVuZGVyZWQgPSBvbmx5IGZpcnN0IHRpbWVcbiAgICAgICAgICAgIGlmIChjb21wVG9CZVJlbmRlcmVkICYmIHZhbHVlIGluc3RhbmNlb2YgQ29udGV4dEZpZWxkUGF0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlEeW5hbWljSW5wdXRCaW5kaW5ncyhjb21wb25lbnQuaW5zdGFuY2UsIGJpbmRpbmdzLCBpbnB1dHMsIGtleSwgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGVkaXRhYmxlKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChjb21wVG9CZVJlbmRlcmVkICYmIHZhbHVlIGluc3RhbmNlb2YgRHluYW1pY1Byb3BlcnR5VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBsZXQgZHludmFsOiBEeW5hbWljUHJvcGVydHlWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCBuZXdWYWx1ZSA9IGR5bnZhbC5ldmFsdWF0ZSh0aGlzLm1ldGFDb250ZXh0Lm15Q29udGV4dCgpKTtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQuaW5zdGFuY2VbcHVibGljS2V5XSA9IG5ld1ZhbHVlO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIHdoZW4gcmUtYXBwbHlpbmcgSW5wdXRzIHNraXAgYWxsIGV4cHJlc3Npb25zIGFib3ZlIGFuZCBvbmx5IHdvcmsgd2l0aCByZWd1bGFyXG4gICAgICAgICAgICAgICAgICogdHlwZXNcbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIHNldCBpdCBvbmx5IGlmIGl0IGNoYW5nZXMgc28gaXQgd2lsbCBub3QgdHJpZ2dlciBuZWNlc3NhcnkgYHZhbHVlIGNoYW5nZWRcbiAgICAgICAgICAgICAgICAgKiBhZnR0ZXIgY2hlY2tgXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgaWYgKCFlcXVhbHMoY29tcG9uZW50Lmluc3RhbmNlW3B1YmxpY0tleV0sIHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuaW5zdGFuY2VbcHVibGljS2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBhcHBseSBGb3JtYXR0ZXIgdGhhdCBjYW4gYmUgc3BlY2lmaWVkIGluIHRoZSBvc3NcbiAgICAgICAgLy8gdGVtcG9yYXJ5IGRpc2FibGVkIHVudGlsbCBhbmd1bGFyIHdpbGwgc3VwcG9ydCBydW50aW1lIGkxOG5cbiAgICAgICAgLy8gaWYgKGJpbmRpbmdzLmhhcyhNZXRhSW5jbHVkZUNvbXBvbmVudERpcmVjdGl2ZS5Gb3JtYXR0ZXJCaW5kaW5nKSkge1xuICAgICAgICAvLyAgICAgbGV0IHRyYW5zZm9ybSA9IHRoaXMuZm9ybWF0dGVyc1xuICAgICAgICAvLyAgICAgICAgIC5nZXQoYmluZGluZ3MuZ2V0KE1ldGFJbmNsdWRlQ29tcG9uZW50RGlyZWN0aXZlLkZvcm1hdHRlckJpbmRpbmcpKTtcbiAgICAgICAgLy8gICAgIGNvbXBvbmVudC5pbnN0YW5jZVtNZXRhSW5jbHVkZUNvbXBvbmVudERpcmVjdGl2ZS5Gb3JtYXR0ZXJCaW5kaW5nXSA9IHRyYW5zZm9ybTtcbiAgICAgICAgLy8gfVxuICAgIH1cblxuXG4gICAgcHJpdmF0ZSBza2lwSW5wdXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGlzQmxhbmsodmFsdWUpIHx8IGtleSA9PT0gSW5jbHVkZUNvbXBvbmVudERpcmVjdGl2ZS5OZ0NvbnRlbnQgfHxcbiAgICAgICAgICAgIGtleSA9PT0gTWV0YUluY2x1ZGVDb21wb25lbnREaXJlY3RpdmUuTmdDb250ZW50TGF5b3V0O1xuICAgIH1cblxuICAgIHByaXZhdGUgYXBwbHlPdXRwdXRzKGNvbXBvbmVudDogQ29tcG9uZW50UmVmPGFueT4sIGJpbmRpbmdzOiBhbnksIG91dHB1dHM6IHN0cmluZ1tdKSB7XG4gICAgICAgIGZvciAobGV0IGtleSBvZiBvdXRwdXRzKSB7XG4gICAgICAgICAgICBsZXQgcHVibGljS2V5ID0gbm9uUHJpdmF0ZVByZWZpeChrZXkpO1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gYmluZGluZ3MuZ2V0KHB1YmxpY0tleSk7XG5cbiAgICAgICAgICAgIGlmIChrZXkgPT09IEluY2x1ZGVDb21wb25lbnREaXJlY3RpdmUuTmdDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZXZlbnRFbWl0dGVyOiBFdmVudEVtaXR0ZXI8YW55PiA9IGNvbXBvbmVudC5pbnN0YW5jZVtwdWJsaWNLZXldO1xuICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRHluYW1pY1Byb3BlcnR5VmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGx5RHluYW1pY091dHB1dEJpbmRpbmcoZXZlbnRFbWl0dGVyLCB2YWx1ZSwgdGhpcy5tZXRhQ29udGV4dC5teUNvbnRleHQoKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGp1c3QgdHJpZ2dlciBldmVudCBvdXRzaWRlXG5cbiAgICAgICAgICAgICAgICBldmVudEVtaXR0ZXIuc3Vic2NyaWJlKCh2YWw6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5lbnYuaGFzVmFsdWUoJ3BhcmVudC1jbngnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGV2ZW50OiBhbnkgPSB2YWw7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY254OiBNZXRhQ29udGV4dENvbXBvbmVudCA9IHRoaXMuZW52LmdldFZhbHVlKCdwYXJlbnQtY254Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHZhbCBpbnN0YW5jZW9mIE1ldGFVSUFjdGlvbkV2ZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50ID0gbmV3IE1ldGFVSUFjdGlvbkV2ZW50KGNvbXBvbmVudC5pbnN0YW5jZSwgcHVibGljS2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdWJsaWNLZXksIHZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjbngub25BY3Rpb24uZW1pdChldmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXBwbHlEeW5hbWljT3V0cHV0QmluZGluZyhlbWl0dGVyOiBFdmVudEVtaXR0ZXI8YW55PiwgdmFsdWU6IGFueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogQ29udGV4dCk6IHZvaWQge1xuXG4gICAgICAgIGVtaXR0ZXIuYXNPYnNlcnZhYmxlKCkuc3Vic2NyaWJlKCh2YWw6IGFueSkgPT4ge1xuICAgICAgICAgICAgbGV0IGR5bnZhbDogRHluYW1pY1Byb3BlcnR5VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIGNvbnRleHQucmVzb2x2ZVZhbHVlKGR5bnZhbCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXBwbHlEeW5hbWljSW5wdXRCaW5kaW5ncyhtZTogYW55LCBiaW5kaW5nczogYW55LCBpbnB1dHM6IHN0cmluZ1tdLCBrZXk6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGFueSwgZWRpdGFibGU6IGJvb2xlYW4pIHtcblxuICAgICAgICBsZXQgcHVibGljS2V5ID0gbm9uUHJpdmF0ZVByZWZpeChrZXkpO1xuICAgICAgICBsZXQgY254dFBhdGg6IENvbnRleHRGaWVsZFBhdGggPSB2YWx1ZTtcbiAgICAgICAgbGV0IG1ldGFDb250ZXh0ID0gdGhpcy5tZXRhQ29udGV4dDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNhcHR1cmVkIGFsc28gY3VycmVudCBjb250ZXh0IHNuYXBzaG90IHNvIHdlIGNhbiByZXBsYXkgQ29udGV4dEZpZWxkUGF0aC5ldmFsdWF0ZSgpIGlmXG4gICAgICAgICAqIGNhbGxlZCBvdXRzaWRlIG9mIHB1c2gvcG9wIGN5Y2xlLlxuICAgICAgICAgKlxuICAgICAgICAgKiB0b2RvOiBjaGVjayBpZiB3ZSBjYW4gcmVwbGFjZSB0aGlzIHdpdGggQ3VzdG9tIHZhbHVlIGFjY2Vzc29yXG4gICAgICAgICAqL1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobWUsIHB1YmxpY0tleSwge1xuICAgICAgICAgICAgZ2V0OiAoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBsZXQgY29udGV4dCA9IHRoaXMubWV0YUNvbnRleHQubXlDb250ZXh0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNueHRQYXRoLmV2YWx1YXRlKGNvbnRleHQpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2V0OiAodmFsKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGNvbnRleHQgPSB0aGlzLm1ldGFDb250ZXh0Lm15Q29udGV4dCgpO1xuICAgICAgICAgICAgICAgIGxldCBlZGl0aW5nID0gY29udGV4dC5wcm9wZXJ0eUZvcktleShPYmplY3RNZXRhLktleUVkaXRhYmxlKVxuICAgICAgICAgICAgICAgICAgICB8fCBjb250ZXh0LnByb3BlcnR5Rm9yS2V5KFVJTWV0YS5LZXlFZGl0aW5nKTtcblxuICAgICAgICAgICAgICAgIGlmIChlZGl0aW5nICYmICFTdHJpbmdXcmFwcGVyLmVxdWFscyh2YWwsIG1lW3B1YmxpY0tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0eXBlID0gY29udGV4dC5wcm9wZXJ0eUZvcktleShPYmplY3RNZXRhLktleVR5cGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNueHRQYXRoLmV2YWx1YXRlU2V0KGNvbnRleHQsIFZhbHVlQ29udmVydGVyLnZhbHVlKHR5cGUsIHZhbCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IFNBUCBBcmliYVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqIEJhc2VkIG9uIG9yaWdpbmFsIHdvcms6IE1ldGFVSTogQ3JhaWcgRmVkZXJpZ2hpICgyMDA4KVxuICpcbiAqL1xuaW1wb3J0IHtDb21wb25lbnR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtFbnZpcm9ubWVudH0gZnJvbSAnQGFyaWJhdWkvY29yZSc7XG5cblxuLyoqXG4gKiBUaGlzIGlzIGp1c3QgYSB3cmFwcGVyIGNvbXBvbmVudCBhcm91bmQgbWV0YS1mb3JtLXRhYmxlIGFzIHdlIG5lZWQgZXZlcnkgc2luZ2xlIGNvbnRleHQgcHVzaCB0b1xuICogaGFwcGVuIGJlZm9yZSB0aGUgY2hpbGQgY29udGVudCBzdGFydCB0byByZW5kZXIuXG4gKlxuICogSW4gdGhpcyBjYXNlIEkgd291bGQgbGlrZSB0byB3cmFwIHdyYXAgbXkgY29udGVudCB3aXRoIG0tY29udGV4dCBpbiB0aGUgd2F5OlxuICpcbiAqICA8bS1jb250ZXh0IHNjb3BlS2V5PVwiY2xhc3NcIj5cbiAqICAgICAgICA8IS0tIGxldHMgcHJvY2VzcyBvbmUgem9uZSBub3cgYW5kIGZvdXIgd2UgY2FuIGRlYWwgbGF0ZXItLT5cbiAqICAgICAgICA8bmctdGVtcGxhdGUgW25nSWZdPVwiaXNGaXZlWm9uZUxheW91dFwiPlxuICogICAgICAgICAgICAgIDxhdy1mb3JtLXRhYmxlIFtpc0VkaXRhYmxlXT1cImlzRWRpdGFibGVcIiBbbGFiZWxzT25Ub3BdPVwibGFiZWxzT25Ub3BcIlxuICogKG9uU3VibWl0KT1cIm9uU2F2ZUFjdGlvbigkZXZlbnQpXCI+XG4gKiAgICAgICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSBuZ0ZvciBsZXQtY3VyZW50RmllbGQgW25nRm9yT2ZdPVwiekxlZnQoKVwiPlxuICogICAgICAgICAgICAgICAgICAgICAgPG0tY29udGV4dCBbZmllbGRdPVwiY3VyZW50RmllbGRcIj5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgPG0tZm9ybS1yb3cgW2ZpZWxkXT1cImN1cmVudEZpZWxkXCI+PC9tLWZvcm0tcm93PlxuICogICAgICAgICAgICAgICAgICAgICAgPC9tLWNvbnRleHQ+XG4gKiAgICAgICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gKiAgICAgICAgICA8L2F3LWZvcm0tdGFibGU+XG4gKiAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAqICA8L20tY29udGV4dD5cbiAqXG4gKlxuICpcbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdtLWZvcm0nLFxuICAgIHRlbXBsYXRlVXJsOiAnbWV0YS1mb3JtLmNvbXBvbmVudC5odG1sJyxcblxufSlcbmV4cG9ydCBjbGFzcyBNZXRhRm9ybUNvbXBvbmVudFxue1xuXG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVudmlyb25tZW50OiBFbnZpcm9ubWVudClcbiAgICB7XG5cbiAgICB9XG5cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IFNBUCBBcmliYVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqXG4gKi9cbmltcG9ydCB7QWZ0ZXJWaWV3Q2hlY2tlZH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge2Fzc2VydCwgRW52aXJvbm1lbnQsIGlzUHJlc2VudH0gZnJvbSAnQGFyaWJhdWkvY29yZSc7XG5pbXBvcnQge0Jhc2VGb3JtQ29tcG9uZW50fSBmcm9tICdAYXJpYmF1aS9jb21wb25lbnRzJztcbmltcG9ydCB7TWV0YUNvbnRleHRDb21wb25lbnR9IGZyb20gJy4uL2NvcmUvbWV0YS1jb250ZXh0L21ldGEtY29udGV4dC5jb21wb25lbnQnO1xuaW1wb3J0IHtDb250ZXh0LCBTbmFwc2hvdH0gZnJvbSAnLi4vY29yZS9jb250ZXh0JztcbmltcG9ydCB7VUlNZXRhfSBmcm9tICcuLi9jb3JlL3VpbWV0YSc7XG5pbXBvcnQge09iamVjdE1ldGF9IGZyb20gJy4uL2NvcmUvb2JqZWN0LW1ldGEnO1xuXG5cbi8qKlxuICogQ29tbW9uIGNvbXBvbmVudCB0byBzZXR1cCB0aGUgY29udGV4dCBhbmQgYWxzbyBjcmVhdGUgY29udGV4dCBzbmFwc2hvdCBmb3IgbGF0ZXIgdXNlci5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE1ldGFCYXNlQ29tcG9uZW50IGV4dGVuZHMgQmFzZUZvcm1Db21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdDaGVja2VkXG57XG4gICAgZWRpdGluZzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIE5lZWQgdG8gY2FwdHVyZSBjdXJyZW50IHNuYXBzaG90IGZvciBlZGl0IG9wZXJhdGlvbiBhcyB3aGVuIHdlIGVudGVyIGVkaXRpbmcgbW9kZSBhbmQgdXNlclxuICAgICAqIHN0YXJ0IHRvIGNoYW5nZSB2YWx1ZXMgdGhlIGRldGVjdGlvbiBsb29wIHJ1bnMgb3V0IG9mIGFueSBwdXNoL3BvcCBjeWNsZSBhbmQgYW55IG9yZGVyIGFuZCBJXG4gICAgICogY291bGQgbm90IGZpbmQgYSB3YXkgaG93IHRvIGRldGVjdCBjb25zaXN0ZW50IGJlaGF2aW9yIHdoZXJlIHJvb3QgY29tcG9lbm50IHN0YXJ0IG5nRG9DaGVjayxcbiAgICAgKiBjaGlsZCBjb21wb25lbnQgdHJpZ2dlciBuZ0RvQ2hlY2ssIGNoaWxkIGZpbmlzaGVzLCByb290IGZpbmlzaGVzLlxuICAgICAqXG4gICAgICogVGhpcyBvbmx5IHdvcmtzIHdoZW4gdmlldyBpcyBmaXJzdCB0aW1lIHJlbmRlcmVkLCBidXQgbm90IHdoZW4gbWFraW5nIGNoYW5nZXNcbiAgICAgKlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBjb250ZXh0U25hcHNob3Q6IFNuYXBzaG90O1xuICAgIHByb3RlY3RlZCBvYmplY3Q6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbnY6IEVudmlyb25tZW50LFxuICAgICAgICAgICAgICAgIHByb3RlY3RlZCBfbWV0YUNvbnRleHQ6IE1ldGFDb250ZXh0Q29tcG9uZW50KVxuICAgIHtcbiAgICAgICAgc3VwZXIoZW52LCBfbWV0YUNvbnRleHQpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCk6IHZvaWRcbiAgICB7XG4gICAgICAgIHN1cGVyLm5nT25Jbml0KCk7XG4gICAgICAgIHRoaXMudXBkYXRlTWV0YSgpO1xuICAgIH1cblxuXG4gICAgbmdEb0NoZWNrKCk6IHZvaWRcbiAgICB7XG4gICAgICAgIHRoaXMudXBkYXRlTWV0YSgpO1xuXG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdDaGVja2VkKCk6IHZvaWRcbiAgICB7XG4gICAgfVxuXG5cbiAgICBwcm90ZWN0ZWQgdXBkYXRlTWV0YSgpXG4gICAge1xuICAgICAgICB0aGlzLmVkaXRpbmcgPSB0aGlzLmNvbnRleHQuYm9vbGVhblByb3BlcnR5Rm9yS2V5KFVJTWV0YS5LZXlFZGl0aW5nLCBmYWxzZSk7XG4gICAgICAgIGlmICh0aGlzLmVkaXRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0ID0gdGhpcy5jb250ZXh0LnZhbHVlcy5nZXQoT2JqZWN0TWV0YS5LZXlPYmplY3QpO1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0U25hcHNob3QgPSB0aGlzLmNvbnRleHQuc25hcHNob3QoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRvVXBkYXRlKCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBQbGFjZWhvbGRlciB0byBiZSBpbXBsZW1lbnRlZCBieSBzdWJjbGFzcy4gdGhpcyBtZXRob2QgaXMgdHJpZ2dlcmVkIHdoZW4gd2UgZGV0ZWN0IGFueVxuICAgICAqIGNoYW5nZXMgb24gdGhlIE1ldGFDb250ZXh0XG4gICAgICovXG4gICAgcHJvdGVjdGVkIGRvVXBkYXRlKCk6IHZvaWRcbiAgICB7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGxhc3Qgc2F2ZWQgY29udGV4dCBmcm9tIHRoZSBNZXRhQ29udGV4dCBjb21wb25lbnRcbiAgICAgKlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXQgY29udGV4dCgpOiBDb250ZXh0XG4gICAge1xuICAgICAgICBpZiAoaXNQcmVzZW50KHRoaXMuX21ldGFDb250ZXh0KSAmJiBpc1ByZXNlbnQodGhpcy5fbWV0YUNvbnRleHQubXlDb250ZXh0KCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbWV0YUNvbnRleHQubXlDb250ZXh0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBhc3NlcnQoZmFsc2UsICdTaG91bGQgYWx3YXlzIGhhdmUgbWV0YUNvbnRleHQgYXZhaWxhYmxlJyk7XG4gICAgfVxuXG5cbiAgICBpc05lc3RlZENvbnRleHQoKTogYm9vbGVhblxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5pc05lc3RlZDtcbiAgICB9XG5cbiAgICAvLyByZW1vdmUgdGhpcyB1Z2x5IHNvbHV0aW9uIG9uY2UgSSBmaWd1cmUgb3V0IGN1c3RvbSB2YWx1ZSBhY2Nlc3NvciB0aGF0IEkgY2FuXG4gICAgLy8gcHJvdmlkZSBhcyBhIGV4cHJlc3Npb25cbiAgICBwcm9wZXJ0aWVzKGtleTogc3RyaW5nLCBkZWZWYWx1ZTogYW55ID0gbnVsbCk6IGFueVxuICAgIHtcbiAgICAgICAgcmV0dXJuIGlzUHJlc2VudCh0aGlzLmNvbnRleHQpID8gKGlzUHJlc2VudCh0aGlzLmNvbnRleHQucHJvcGVydHlGb3JLZXkoa2V5KSkgP1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LnByb3BlcnR5Rm9yS2V5KGtleSkgOiBkZWZWYWx1ZSkgOiBkZWZWYWx1ZTtcblxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGFjdGl2ZSBjb250ZXh0J3MgcHJvcGVydGllc1xuICAgICAqXG4gICAgICovXG4gICAgYVByb3BlcnRpZXMobWU6IENvbnRleHQsIGtleTogc3RyaW5nLCBkZWZWYWx1ZTogYW55ID0gbnVsbCk6IGFueVxuICAgIHtcbiAgICAgICAgbGV0IGFjdGl2ZUNvbnRleHQ6IENvbnRleHQgPSB0aGlzLl9tZXRhQ29udGV4dC5hY3RpdmVDb250ZXh0KCk7XG4gICAgICAgIHJldHVybiBpc1ByZXNlbnQobWUpID8gbWUucHJvcGVydHlGb3JLZXkoa2V5KSA6IGRlZlZhbHVlO1xuXG4gICAgfVxuXG5cbn1cblxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgU0FQIEFyaWJhXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogQmFzZWQgb24gb3JpZ2luYWwgd29yazogTWV0YVVJOiBDcmFpZyBGZWRlcmlnaGkgKDIwMDgpXG4gKlxuICovXG5pbXBvcnQge0NvbXBvbmVudCwgSG9zdCwgVmlld0NoaWxkfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RW52aXJvbm1lbnQsIGlzQmxhbmssIGlzUHJlc2VudH0gZnJvbSAnQGFyaWJhdWkvY29yZSc7XG5pbXBvcnQge0Zvcm1UYWJsZUNvbXBvbmVudH0gZnJvbSAnQGFyaWJhdWkvY29tcG9uZW50cyc7XG5pbXBvcnQge01ldGFCYXNlQ29tcG9uZW50fSBmcm9tICcuLi8uLi9tZXRhLmJhc2UuY29tcG9uZW50JztcbmltcG9ydCB7TWV0YUNvbnRleHRDb21wb25lbnR9IGZyb20gJy4uLy4uLy4uL2NvcmUvbWV0YS1jb250ZXh0L21ldGEtY29udGV4dC5jb21wb25lbnQnO1xuaW1wb3J0IHtVSU1ldGF9IGZyb20gJy4uLy4uLy4uL2NvcmUvdWltZXRhJztcbmltcG9ydCB7VUlDb250ZXh0fSBmcm9tICcuLi8uLi8uLi9jb3JlL2NvbnRleHQnO1xuXG4vKipcbiAqIFRoaXMgaXMgYSB3cmFwcGVyIGFyb3VuZCBGb3JtdFRhYmxlIHRvIHJlbmRlciBkYXRhIGJhc2VkIG9uIGN1cnJlbnQgTWV0YUNvbnRleHQuXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbS1mb3JtLXRhYmxlJyxcbiAgICB0ZW1wbGF0ZVVybDogJ21ldGEtZm9ybS10YWJsZS5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJ21ldGEtZm9ybS10YWJsZS5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIE1ldGFGb3JtVGFibGVDb21wb25lbnQgZXh0ZW5kcyBNZXRhQmFzZUNvbXBvbmVudFxue1xuICAgIC8qKlxuICAgICAqIEZvciBtdWx0aXpvbmUgbGF5b3V0IHRoaXMgY29udGFpbnMgZmllbGRzIGJyb2tlbiBieSBpdHMgYXNzaWduZWQgem9uZXNcbiAgICAgKi9cbiAgICBwcml2YXRlIGZpZWxkc0J5Wm9uZTogTWFwPHN0cmluZywgYW55PjtcblxuICAgIC8qKlxuICAgICAqIElzIGZpdmUgem9uZSBsYXlvdXQ/IEZvck1ldGFVaSB3ZSBwcm9iYWxieSBoYXZlIGFsd2F5cyBmaXZlWm9uZSwgdW5sZXNzIGluIE1ldGFSdWxlcyB3ZSBzYXlcbiAgICAgKiBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBpc0ZpdmVab25lTGF5b3V0OiBib29sZWFuO1xuXG5cbiAgICAvKipcbiAgICAgKiBEbyB3ZSBoYXZlIGxhYmVscyBvbiB0b3AgbGF5b3V0P1xuICAgICAqL1xuICAgIHNob3dMYWJlbHNBYm92ZUNvbnRyb2xzOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogUmVmZXJlbmNlIHRvIGN1cnJlbnQgcmVuZGVyZWQgRm9ybVRhYmxlXG4gICAgICovXG4gICAgQFZpZXdDaGlsZCgnbWV0YUZvcm1UYWJsZScpXG4gICAgcHJpdmF0ZSBmb3JtOiBGb3JtVGFibGVDb21wb25lbnQ7XG5cbiAgICAvKipcbiAgICAgKiBBY3RpdmUgem9uZXMgcGFzc2VkIHRvIHRoZSBGb3JtVGFibGUuXG4gICAgICpcbiAgICAgKiBOb3RlOiBJIGNvdWxkIG5vdCBmaW5kIGJldHRlciB3YXkgd2l0aG91dCBoYXZpbmcgdGhpcyBwcm9wZXJ0eS4gV2hlbiB1c2luZyBGb3JtVGFibGUgSSBkb250XG4gICAgICogd2FudCB0byB0ZWxsIHdoYXQgem9uZXMgYXJlIGFjdGl2ZS4gVGhlIGZvcm0gdGFibGUgc2hvdWxkIGZpZ3VyZSBvdXQgYnlpdHNlbGYganVzdCBmcm9tIHRoZVxuICAgICAqIG5nLWNvbnRlbnRlZCBzZWN0aW9ucy5cbiAgICAgKlxuICAgICAqIFRoZSBvdGhlciBhcHByb2FjaCBpcyB0aGUgd3JhcCB0aGVzZSBpbnRvIGNvbXBvbmVudCBhbmQgcHJvYmFibHkgYmV0dGVyXG4gICAgICpcbiAgICAgKmUuZy5cbiAgICAgKlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiAgPGF3LWZvcm0tdGFibGUgLi4uPlxuICAgICAqICAgIDxhdy1mb3JtLXpvbmUgbmFtZT0ndG9wJz5cbiAgICAgKiAgICAgICAgPGF3LWZvcm0tcm93Pi4uLjwvYXctZm9ybS1yb3c+XG4gICAgICogICAgIDxhdy1mb3JtLXpvbmU+XG4gICAgICpcbiAgICAgKlxuICAgICAqICAgIC4uLlxuICAgICAqICA8L2F3LWZvcm0tdGFibGUgLi4uPlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICovXG5cblxuICAgIGNvbnN0cnVjdG9yKEBIb3N0KCkgcHJvdGVjdGVkIF9jb250ZXh0OiBNZXRhQ29udGV4dENvbXBvbmVudCwgcHVibGljIGVudjogRW52aXJvbm1lbnQpXG4gICAge1xuICAgICAgICBzdXBlcihlbnYsIF9jb250ZXh0KTtcbiAgICB9XG5cblxuICAgIGNhblNob3dab25lKHpvbmU6IHN0cmluZyk6IGJvb2xlYW5cbiAgICB7XG4gICAgICAgIHJldHVybiBpc1ByZXNlbnQodGhpcy5maWVsZHNCeVpvbmUpICYmIHRoaXMuZmllbGRzQnlab25lLmhhcyh6b25lKTtcbiAgICB9XG5cblxuICAgIHByb3RlY3RlZCBkb1VwZGF0ZSgpOiB2b2lkXG4gICAge1xuICAgICAgICBzdXBlci5kb1VwZGF0ZSgpO1xuXG4gICAgICAgIHRoaXMuZmllbGRzQnlab25lID0gdGhpcy5jb250ZXh0LnByb3BlcnR5Rm9yS2V5KFVJTWV0YS5Qcm9wRmllbGRzQnlab25lKTtcbiAgICAgICAgdGhpcy5pc0ZpdmVab25lTGF5b3V0ID0gdGhpcy5jb250ZXh0LnByb3BlcnR5Rm9yS2V5KFVJTWV0YS5Qcm9wSXNGaWVsZHNCeVpvbmUpO1xuXG5cbiAgICAgICAgbGV0IGJpbmRpbmdzOiBNYXA8c3RyaW5nLCBhbnk+ID0gdGhpcy5jb250ZXh0LnByb3BlcnR5Rm9yS2V5KFVJTWV0YS5LZXlCaW5kaW5ncyk7XG4gICAgICAgIGlmIChpc1ByZXNlbnQoYmluZGluZ3MpKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dMYWJlbHNBYm92ZUNvbnRyb2xzID0gYmluZGluZ3MuZ2V0KCdzaG93TGFiZWxzQWJvdmVDb250cm9scycpO1xuXG4gICAgICAgICAgICBpZiAoaXNCbGFuayh0aGlzLnNob3dMYWJlbHNBYm92ZUNvbnRyb2xzKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0xhYmVsc0Fib3ZlQ29udHJvbHMgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaW5pdEZvcm0oKTtcbiAgICB9XG5cblxuICAgIHpMZWZ0KCk6IHN0cmluZ1tdXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5maWVsZHNCeVpvbmUuZ2V0KFVJTWV0YS5ab25lTGVmdCk7XG4gICAgfVxuXG4gICAgek1pZGRsZSgpOiBzdHJpbmdbXVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGRzQnlab25lLmdldChVSU1ldGEuWm9uZU1pZGRsZSk7XG4gICAgfVxuXG4gICAgelJpZ2h0KCk6IHN0cmluZ1tdXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5maWVsZHNCeVpvbmUuZ2V0KFVJTWV0YS5ab25lUmlnaHQpO1xuICAgIH1cblxuICAgIHpUb3AoKTogc3RyaW5nW11cbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpZWxkc0J5Wm9uZS5nZXQoVUlNZXRhLlpvbmVUb3ApO1xuICAgIH1cblxuICAgIHpCb3R0b20oKTogc3RyaW5nW11cbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpZWxkc0J5Wm9uZS5nZXQoVUlNZXRhLlpvbmVCb3R0b20pO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogTmVlZCB0byBpbml0aWFsaXplIEZvcm1Hcm91cCB3aXRoIGFsbCB0aGUgYXZhaWxhYmxlIGZpZWxkcyBiYXNlZCBvbiB0aGUgZ2l2ZW4gb2JqZWN0LiBJdHNcbiAgICAgKiBoYXJkIHRvIG1hbmFnZSBhIHN0YXRlIHdoZXJlIHdlIGR5bmFtaWNhbGx5IHJlbmRlciBkaWZmZXJlbnQgbnVtYmVyIG9mIGZpZWxkcyBwZXIgb3BlcmF0aW9uLlxuICAgICAqXG4gICAgICogKlxuICAgICAqL1xuICAgIHByaXZhdGUgaW5pdEZvcm0oKTogdm9pZFxuICAgIHtcbiAgICAgICAgaWYgKGlzUHJlc2VudCh0aGlzLmZvcm0pKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm0uZWRpdGFibGUgPSB0aGlzLmVkaXRhYmxlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBvYmogPSAoPFVJQ29udGV4dD50aGlzLmNvbnRleHQpLm9iamVjdDtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMuZm9ybUdyb3VwLnZhbHVlKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKG9iaikubGVuZ3RoKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goKGtleTogc3RyaW5nKSA9PlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuZG9SZWdpc3RlcihrZXksIG9ialtrZXldKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBTQVAgQXJpYmFcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiBCYXNlZCBvbiBvcmlnaW5hbCB3b3JrOiBNZXRhVUk6IENyYWlnIEZlZGVyaWdoaSAoMjAwOClcbiAqXG4gKi9cbmltcG9ydCB7Q29tcG9uZW50LCBmb3J3YXJkUmVmLCBIb3N0LCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Fic3RyYWN0Q29udHJvbCwgVmFsaWRhdG9yRm4sIFZhbGlkYXRvcnN9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7Qm9vbGVhbldyYXBwZXIsIEVudmlyb25tZW50LCBpc1ByZXNlbnR9IGZyb20gJ0BhcmliYXVpL2NvcmUnO1xuaW1wb3J0IHtGb3JtUm93Q29tcG9uZW50fSBmcm9tICdAYXJpYmF1aS9jb21wb25lbnRzJztcbmltcG9ydCB7TWV0YUNvbnRleHRDb21wb25lbnR9IGZyb20gJy4uLy4uLy4uL2NvcmUvbWV0YS1jb250ZXh0L21ldGEtY29udGV4dC5jb21wb25lbnQnO1xuaW1wb3J0IHtVSU1ldGF9IGZyb20gJy4uLy4uLy4uL2NvcmUvdWltZXRhJztcbmltcG9ydCB7TWV0YUJhc2VDb21wb25lbnR9IGZyb20gJy4uLy4uL21ldGEuYmFzZS5jb21wb25lbnQnO1xuXG4vKipcbiAqIENvbXBvbmVudCByZXNwb25zaWJsZSBmb3IgcmVuZGVyaW5nIGEgcm93IHVzaW5nIE1ldGFJbmNsdWRlQ29tcG9uZW50LlxuICogV2hhdCBJIGFtIHN0aWxsIG5vdCBzdXJlLCBpZiBJIHdhbnQgdG8gdXNlIGZ1bGx5IHZhbGlkYXRpb24gZnJvbSBNZXRhUnVsZSBhbmQgaWYgSSBjYW5ub3RcbiAqIGxldmVyYWdlIGJhc2ljIHZhbGlkYXRpb24gZnJvbSBhbmd1bGFyLlxuICpcbiAqIE1lYW5pbmcgSSBtaWdodCByZW1vdmUgZGVmYXVsdCB2YWxpZDo6KiogcnVsZSBmcm9tIFdpZGdldHNSdWxlcyBhbmQgd2hlbiBpdHMgcmVxdWlyZWQgaW5zZXJ0XG4gKiBkZWZhdWx0IFJlcXVpcmVkIHZhbGlkYXRpb24gZnJvbSBhbmd1bGFyLlxuICpcbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdtLWZvcm0tcm93JyxcbiAgICB0ZW1wbGF0ZVVybDogJ21ldGEtZm9ybS1yb3cuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWydtZXRhLWZvcm0tcm93LmNvbXBvbmVudC5zY3NzJ10sXG4gICAgcHJvdmlkZXJzOiBbXG5cbiAgICAgICAge3Byb3ZpZGU6IEZvcm1Sb3dDb21wb25lbnQsIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE1ldGFGb3JtUm93Q29tcG9uZW50KX1cbiAgICBdXG5cbn0pXG5leHBvcnQgY2xhc3MgTWV0YUZvcm1Sb3dDb21wb25lbnQgZXh0ZW5kcyBNZXRhQmFzZUNvbXBvbmVudFxue1xuXG4gICAgQElucHV0KClcbiAgICBmaWVsZDogc3RyaW5nO1xuXG5cbiAgICAvKipcbiAgICAgKiBUaGVyZSBjb3VsZCBiZSBzcGVjaWFsIGNhc2VzIHdoZW4gd2UgYXJlIGxheW91dCBjb21wb25lbnQgdGhhdCB3ZSB3YW50IHRvIGV4dGVuZHMgdGhlIHJvd1xuICAgICAqIDEwMCUuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBpbml0aWFsU2l6ZTogc3RyaW5nID0gJ21lZGl1bSc7XG5cbiAgICAvKipcbiAgICAgKiBDYWNoZWQgdmFsaWRhdG9zXG4gICAgICovXG4gICAgdmFsaWRhdG9yczogVmFsaWRhdG9yRm5bXTtcblxuXG4gICAgY29uc3RydWN0b3IoQEhvc3QoKSBwcm90ZWN0ZWQgX21ldGFDb250ZXh0OiBNZXRhQ29udGV4dENvbXBvbmVudCwgcHVibGljIGVudjogRW52aXJvbm1lbnQpXG4gICAge1xuICAgICAgICBzdXBlcihlbnYsIF9tZXRhQ29udGV4dCk7XG4gICAgfVxuXG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkXG4gICAge1xuICAgICAgICBzdXBlci5uZ09uSW5pdCgpO1xuICAgICAgICB0aGlzLnZhbGlkYXRvcnMgPSB0aGlzLmNyZWF0ZVZhbGlkYXRvcnMoKTtcbiAgICB9XG5cbiAgICBiaW5kaW5nQm9vbFByb3BlcnR5KGtleTogc3RyaW5nKTogYm9vbGVhblxuICAgIHtcbiAgICAgICAgbGV0IGJpbmRpbmdzOiBNYXA8c3RyaW5nLCBhbnk+ID0gdGhpcy5jb250ZXh0LnByb3BlcnR5Rm9yS2V5KFVJTWV0YS5LZXlCaW5kaW5ncyk7XG5cbiAgICAgICAgaWYgKGlzUHJlc2VudChiaW5kaW5ncykgJiYgYmluZGluZ3MuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IGJpbmRpbmdzLmdldChrZXkpO1xuICAgICAgICAgICAgcmV0dXJuIEJvb2xlYW5XcmFwcGVyLmJvbGVhblZhbHVlKHZhbHVlKTtcblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cblxuICAgIGJpbmRpbmdTdHJpbmdQcm9wZXJ0eShrZXk6IHN0cmluZyk6IHN0cmluZ1xuICAgIHtcbiAgICAgICAgbGV0IGJpbmRpbmdzOiBNYXA8c3RyaW5nLCBhbnk+ID0gdGhpcy5jb250ZXh0LnByb3BlcnR5Rm9yS2V5KFVJTWV0YS5LZXlCaW5kaW5ncyk7XG5cbiAgICAgICAgaWYgKGlzUHJlc2VudChiaW5kaW5ncykgJiYgYmluZGluZ3MuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiBiaW5kaW5ncy5nZXQoa2V5KTtcblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuXG4gICAgZ2V0IHNpemUoKTogc3RyaW5nXG4gICAge1xuICAgICAgICBsZXQgYmluZGluZ3M6IE1hcDxzdHJpbmcsIGFueT4gPSB0aGlzLmNvbnRleHQucHJvcGVydHlGb3JLZXkoVUlNZXRhLktleUJpbmRpbmdzKTtcblxuICAgICAgICBpZiAoaXNQcmVzZW50KGJpbmRpbmdzKSAmJiBiaW5kaW5ncy5oYXMoJ3NpemUnKSkge1xuICAgICAgICAgICAgcmV0dXJuIGJpbmRpbmdzLmdldCgnc2l6ZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmluaXRpYWxTaXplO1xuICAgIH1cblxuICAgIHNldCBzaXplKHZhbHVlOiBzdHJpbmcpXG4gICAge1xuICAgICAgICB0aGlzLmluaXRpYWxTaXplID0gdmFsdWU7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZ3VsYXIgYmFzZWQgVmFsaWRhdG9yIHdoaWNoIGZvciBhIGN1cnJlbnQgZmllbGQgZXhlY3V0ZXMgdmFsaWRhdGlvbiBydWxlcyByZWFsXG4gICAgICogdGltZSBhcyB1c2UgdHlwZS4gQXQgdGhlIGJvdHRvbSBvZiB0aGUgZmlsZSB0aGVyZSBpcyBleGFtcGxlIG9mIGFzeW5jIHZhbGlkYXRvclxuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSBjcmVhdGVWYWxpZGF0b3JzKCk6IFZhbGlkYXRvckZuW11cbiAgICB7XG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcbiAgICAgICAgbGV0IG1ldGFWYWxpZGF0b3IgPSAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9PlxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoaXNQcmVzZW50KFZhbGlkYXRvcnMucmVxdWlyZWQoY29udHJvbCkpIHx8ICFjb250cm9sLnRvdWNoZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGVycm9yTXNnID0gVUlNZXRhLnZhbGlkYXRpb25FcnJvcih0aGF0LmNvbnRleHQpO1xuICAgICAgICAgICAgcmV0dXJuIGlzUHJlc2VudChlcnJvck1zZykgPyB7XG4gICAgICAgICAgICAgICAgJ21ldGF2YWxpZCc6IHsnbXNnJzogZXJyb3JNc2d9XG4gICAgICAgICAgICB9IDogbnVsbDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gW21ldGFWYWxpZGF0b3JdO1xuICAgIH1cblxuICAgIGlzUmVxdWlyZWQoKTogYm9vbGVhblxuICAgIHtcbiAgICAgICAgcmV0dXJuIChpc1ByZXNlbnQodGhpcy5lZGl0aW5nKSAmJiB0aGlzLmNvbnRleHQuYm9vbGVhblByb3BlcnR5Rm9yS2V5KCdyZXF1aXJlZCcsIGZhbHNlKSk7XG4gICAgfVxuXG59XG5cblxuLypcblxuIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuIHNldFRpbWVvdXQgKCgpPT57XG5cbiBsZXQgY29udGV4dDogVUlDb250ZXh0ID0gPFVJQ29udGV4dD4gdGhpcy5fY29udGV4dFNuYXBzaG90Lmh5ZHJhdGUoKTtcbiBjb250ZXh0LnZhbHVlID0gY29udHJvbC52YWx1ZTtcblxuIGxldCBlcnJvck1zZyA9IFVJTWV0YS52YWxpZGF0aW9uRXJyb3IoY29udGV4dCk7XG5cblxuIGlmKGlzUHJlc2VudChlcnJvck1zZykpIHtcbiByZXNvbHZlKHttZXRhdmFsaWQ6IHttc2c6IGVycm9yTXNnfX0pO1xuIH0gZWxzZXtcbiByZXNvbHZlKG51bGwpO1xuIH1cblxuIH0sIDcwMCk7XG4gfSk7XG5cblxuICovXG5cblxuLy8gbWV0YVZhbGlkICgpOiBBc3luY1ZhbGlkYXRvckZuW11cbi8vIHtcbi8vICAgICBsZXQgbWV0YVZhbGlkYXRvciA9IChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7W2tleTogc3RyaW5nXTogYW55fSA9PlxuLy8gICAgIHtcbi8vICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PlxuLy8gICAgICAgICB7XG4vLyAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpPT5cbi8vICAgICAgICAgICAgIHtcbi8vICAgICAgICAgICAgICAgICBsZXQgY29udGV4dDogVUlDb250ZXh0ID0gPFVJQ29udGV4dD4gdGhpcy5fY29udGV4dFNuYXBzaG90Lmh5ZHJhdGUoKTtcbi8vICAgICAgICAgICAgICAgICBjb250ZXh0LnZhbHVlID0gY29udHJvbC52YWx1ZTtcbi8vXG4vLyAgICAgICAgICAgICAgICAgbGV0IGVycm9yTXNnID0gVUlNZXRhLnZhbGlkYXRpb25FcnJvcihjb250ZXh0KTtcbi8vXG4vL1xuLy8gICAgICAgICAgICAgICAgIGlmIChpc1ByZXNlbnQoZXJyb3JNc2cpKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe21ldGF2YWxpZDoge21zZzogZXJyb3JNc2d9fSk7XG4vLyAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcbi8vICAgICAgICAgICAgICAgICB9XG4vL1xuLy8gICAgICAgICAgICAgfSAsIDQwMCk7XG4vLyAgICAgICAgIH0pO1xuLy8gICAgIH07XG4vLyAgICAgcmV0dXJuIFttZXRhVmFsaWRhdG9yXTtcbi8vIH1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IFNBUCBBcmliYVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqIEJhc2VkIG9uIG9yaWdpbmFsIHdvcms6IE1ldGFVSTogQ3JhaWcgRmVkZXJpZ2hpICgyMDA4KVxuICpcbiAqL1xuaW1wb3J0IHtDb21wb25lbnQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0FjdGl2YXRlZFJvdXRlfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHtCb29sZWFuV3JhcHBlciwgaXNQcmVzZW50LCBSb3V0aW5nU2VydmljZX0gZnJvbSAnQGFyaWJhdWkvY29yZSc7XG5pbXBvcnQge1VJTWV0YX0gZnJvbSAnLi4vLi4vY29yZS91aW1ldGEnO1xuXG5cbi8qKlxuICogTWV0YUNvbnRlbnRQYWdlICBjb21wb25lbnQgaXMgdXNlZCBmcm9tIE1ldGFSdWxlcyBhbmQgdW5pdmVyc2FsIGNvbXBvbmVudCByZW5kZXJpbmcgZGlmZmVyZW50XG4gKiBvcGVyYXRpb24gbW9kZXMuXG4gKlxuICpcbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdtLWNvbnRlbnQtcGFnZScsXG4gICAgdGVtcGxhdGVVcmw6ICdtZXRhLWNvbnRlbnQtcGFnZS5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJ21ldGEtY29udGVudC1wYWdlLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgTWV0YUNvbnRlbnRQYWdlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0XG57XG5cbiAgICBvYmplY3Q6IGFueTtcbiAgICBvcGVyYXRpb246IHN0cmluZztcbiAgICBsYXlvdXQ6IHN0cmluZztcbiAgICBuZXdDb250ZXh0OiBib29sZWFuID0gdHJ1ZTtcbiAgICBvYmplY3ROYW1lOiBzdHJpbmc7XG4gICAgaXNJbnNwZWN0QWN0aW9uOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBva0xhYmVsID0gJ0JhY2snO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZTogQWN0aXZhdGVkUm91dGUsIHByaXZhdGUgcm91dGluZ1NlcnZpY2U6IFJvdXRpbmdTZXJ2aWNlKVxuICAgIHtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpXG4gICAge1xuICAgICAgICB0aGlzLmxheW91dCA9IHRoaXMucm91dGUuc25hcHNob3QucGFyYW1zWydsYXlvdXQnXTtcbiAgICAgICAgdGhpcy5vcGVyYXRpb24gPSB0aGlzLnJvdXRlLnNuYXBzaG90LnBhcmFtc1snb3BlcmF0aW9uJ107XG5cbiAgICAgICAgbGV0IHVybCA9ICcvJyArIHRoaXMucm91dGUuc25hcHNob3QudXJsWzBdLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmICh0aGlzLnJvdXRpbmdTZXJ2aWNlLnN0YXRlQ2FjaGVIaXN0b3J5Lmhhcyh1cmwpKSB7XG4gICAgICAgICAgICB0aGlzLm9iamVjdCA9IHRoaXMucm91dGluZ1NlcnZpY2Uuc3RhdGVDYWNoZUhpc3RvcnkuZ2V0KHVybCk7XG4gICAgICAgICAgICB0aGlzLm9iamVjdE5hbWUgPSBVSU1ldGEuZGVmYXVsdExhYmVsRm9ySWRlbnRpZmllcih0aGlzLm9iamVjdC5jb25zdHJ1Y3Rvci5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgd2l0aEJhY2tBY3Rpb24gPSB0aGlzLnJvdXRlLnNuYXBzaG90LnBhcmFtc1snYiddO1xuICAgICAgICBpZiAoaXNQcmVzZW50KHdpdGhCYWNrQWN0aW9uKSAmJiBCb29sZWFuV3JhcHBlci5pc1RydWUod2l0aEJhY2tBY3Rpb24pKSB7XG4gICAgICAgICAgICB0aGlzLmlzSW5zcGVjdEFjdGlvbiA9IHRydWU7XG4gICAgICAgIH1cblxuICAgIH1cblxuXG4gICAgb25CYWNrKGV2ZW50OiBhbnkpOiB2b2lkXG4gICAge1xuICAgICAgICB0aGlzLnJvdXRpbmdTZXJ2aWNlLmdvQmFjaygpO1xuICAgIH1cblxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgU0FQIEFyaWJhXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogQmFzZWQgb24gb3JpZ2luYWwgd29yazogTWV0YVVJOiBDcmFpZyBGZWRlcmlnaGkgKDIwMDgpXG4gKlxuICovXG5pbXBvcnQge2Fzc2VydCwgRW52aXJvbm1lbnQsIGlzQmxhbmssIGlzUHJlc2VudH0gZnJvbSAnQGFyaWJhdWkvY29yZSc7XG5pbXBvcnQge01ldGFCYXNlQ29tcG9uZW50fSBmcm9tICcuL21ldGEuYmFzZS5jb21wb25lbnQnO1xuaW1wb3J0IHtJdGVtUHJvcGVydGllc30gZnJvbSAnLi4vY29yZS9pdGVtLXByb3BlcnRpZXMnO1xuaW1wb3J0IHtQcm9wZXJ0eU1hcH0gZnJvbSAnLi4vY29yZS9tZXRhJztcbmltcG9ydCB7TWV0YUNvbnRleHRDb21wb25lbnR9IGZyb20gJy4uL2NvcmUvbWV0YS1jb250ZXh0L21ldGEtY29udGV4dC5jb21wb25lbnQnO1xuaW1wb3J0IHtVSU1ldGF9IGZyb20gJy4uL2NvcmUvdWltZXRhJztcbmltcG9ydCB7Q29udGV4dH0gZnJvbSAnLi4vY29yZS9jb250ZXh0JztcbmltcG9ydCB7T25EZXN0cm95fSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBNZXRhTGF5b3V0IHJlcHJlc2VudCBhIGhpZ2ggbGV2ZWwgcnVsZSB0aGF0IGFnZ3JlZ2F0ZXMgZGVmaW5lZCBsYXlvdXQuIFdoZW4gd2UgaXRlcmF0ZSB0aHJ1IHRoZVxuICogZGlmZmVyZW50IGxheW91dCB3ZSBuZWVkIHRvIHJlbWVtYmVyIGJvdGggY3VycmVudCByZW5kZXJlZCBjb250ZXh0IGFzIHdlbGwgYXMgSXRlbVByb3BlcnRpZXMuXG4gKlxuICpcbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXRhTGF5b3V0IGV4dGVuZHMgTWV0YUJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3lcbntcbiAgICAvKipcbiAgICAgKiBMaXN0IGFsbCBhdmFpbGFibGUgTGF5b3V0cyBkZWZpbmVzIGZvciBjdXJyZW50IENvbnRleHRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX2FsbExheW91dHM6IEl0ZW1Qcm9wZXJ0aWVzW107XG5cbiAgICAvKipcbiAgICAgKiBMYXlvdXQgc29ydGVkIGJ5IHpvbmVzLiBFYWNoIGltcGxlbWVudGF0aW9uIGNhbiBzdXBwb3J0IGRpZmZlcmVudCB6b25lcy5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX2xheW91dHNCeVpvbmVzOiBNYXA8c3RyaW5nLCBhbnk+O1xuXG4gICAgLyoqXG4gICAgICogQ29udGV4dCBwcm9wZXJ0aWVzIGZvciBjdXJyZW50IGFjdGl2ZSByZW5kZXJlZCBsYXlvdXRcbiAgICAgKlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBfcHJvcGVydHlNYXA6IFByb3BlcnR5TWFwO1xuXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBMYXlvdXQgYmVpbmcgcmVuZGVyZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX2xheW91dDogSXRlbVByb3BlcnRpZXM7XG5cbiAgICAvKipcbiAgICAgKiBMYXlvdXQgZGVmaW5pdGlvbnMgYnkgaXRzIG5hbWVcbiAgICAgKlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBuYW1lVG9MYXlvdXQ6IE1hcCA8c3RyaW5nLCBJdGVtUHJvcGVydGllcz4gPSBuZXcgTWFwPHN0cmluZywgSXRlbVByb3BlcnRpZXM+KCk7XG5cbiAgICAvKipcbiAgICAgKiBBIG1hcCBsaW5raW5nIHRoZSBuYW1lIG9mIHRoZSBsYXlvdXQgdG8gdGhlIGFjdHVhbCBjb250ZXh0LiBXZSBuZWVkIHRoaXMgd2hlbiB3ZSBuZWVkXG4gICAgICogdG8gYWNjZXNzIGN1cnJlbnQgY29udGVudC5cbiAgICAgKlxuICAgICAqL1xuICAgIGNvbnRleHRNYXA6IE1hcCA8c3RyaW5nLCBDb250ZXh0PiA9IG5ldyBNYXA8c3RyaW5nLCBDb250ZXh0PigpO1xuXG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IGNvbnRleHQgYmVpbmcgcmVuZGVyZWRcbiAgICAgKi9cbiAgICBsYXlvdXRDb250ZXh0OiBDb250ZXh0O1xuXG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgX21ldGFDb250ZXh0OiBNZXRhQ29udGV4dENvbXBvbmVudCwgcHVibGljIGVudjogRW52aXJvbm1lbnQpXG4gICAge1xuICAgICAgICBzdXBlcihlbnYsIF9tZXRhQ29udGV4dCk7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYW4gYmUgY2FsbGVkIGJ5IG0tY29udGVudCB0byBAT3V0cHV0IHdoZW4gY29udGV4dCBwcm9wZXJ0aWVzIGFyZSBwdXNoZWQgdG8gc3RhY2tcbiAgICAgKlxuICAgICAqL1xuICAgIGFmdGVyQ29udGV4dFNldChsYXlvdXROYW1lOiBhbnkpOiB2b2lkXG4gICAge1xuICAgICAgICB0aGlzLmxheW91dENvbnRleHQgPSB0aGlzLmFjdGl2ZUNvbnRleHQ7XG4gICAgICAgIHRoaXMuY29udGV4dE1hcC5zZXQobGF5b3V0TmFtZSwgdGhpcy5sYXlvdXRDb250ZXh0LnNuYXBzaG90KCkuaHlkcmF0ZShmYWxzZSkpO1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FuIGJlIGNhbGxlZCBieSBtLWNvbnRlbnQgdG8gQE91dHB1dCBhZnRlciBjb250ZXh0IHByb3BlcnRpZXMgYXJlIHB1c2hlZCB0byBzdGFja1xuICAgICAqXG4gICAgICovXG4gICAgYmVmb3JlQ29udGV4dFNldChsYXlvdXROYW1lOiBhbnkpOiB2b2lkXG4gICAge1xuICAgICAgICB0aGlzLmxheW91dCA9IHRoaXMubmFtZVRvTGF5b3V0LmdldChsYXlvdXROYW1lKTtcbiAgICB9XG5cblxuICAgIGdldCBhY3RpdmVDb250ZXh0KCk6IENvbnRleHRcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRhQ29udGV4dC5hY3RpdmVDb250ZXh0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGFsbCBhdmFpbGFibGUgYW5kIGFjdGl2ZSBsYXlvdXRzIGZvciB6b25lcyBkZWZpbmVkIGJ5IHN1YmNsYXNzZXNcbiAgICAgKlxuICAgICAqL1xuICAgIGdldCBhbGxMYXlvdXRzKCk6IEl0ZW1Qcm9wZXJ0aWVzW11cbiAgICB7XG4gICAgICAgIGlmIChpc0JsYW5rKHRoaXMuX2FsbExheW91dHMpKSB7XG4gICAgICAgICAgICBsZXQgbWV0YTogVUlNZXRhID0gPFVJTWV0YT4gdGhpcy5hY3RpdmVDb250ZXh0Lm1ldGE7XG4gICAgICAgICAgICB0aGlzLl9hbGxMYXlvdXRzID0gbWV0YS5pdGVtTGlzdCh0aGlzLmFjdGl2ZUNvbnRleHQsIFVJTWV0YS5LZXlMYXlvdXQsIHRoaXMuem9uZXMoKSk7XG4gICAgICAgICAgICB0aGlzLm5hbWVUb0xheW91dC5jbGVhcigpO1xuXG4gICAgICAgICAgICB0aGlzLl9hbGxMYXlvdXRzLmZvckVhY2goKGl0ZW06IEl0ZW1Qcm9wZXJ0aWVzKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMubmFtZVRvTGF5b3V0LnNldChpdGVtLm5hbWUsIGl0ZW0pKTtcblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9hbGxMYXlvdXRzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBhbGwgYXZhaWxhYmxlIGFuZCBhY3RpdmUgbGF5b3V0cyBhbmQgYWdncmVnYXRlIHRoZW0gdGhlaXIgbmFtZVxuICAgICAqXG4gICAgICovXG4gICAgZ2V0IGxheW91dHNCeVpvbmVzKCk6IE1hcDxzdHJpbmcsIGFueT5cbiAgICB7XG4gICAgICAgIGlmIChpc0JsYW5rKHRoaXMuX2xheW91dHNCeVpvbmVzKSkge1xuICAgICAgICAgICAgbGV0IG1ldGE6IFVJTWV0YSA9IDxVSU1ldGE+IHRoaXMuYWN0aXZlQ29udGV4dC5tZXRhO1xuICAgICAgICAgICAgdGhpcy5fbGF5b3V0c0J5Wm9uZXMgPSBtZXRhLml0ZW1zQnlab25lcyh0aGlzLmFjdGl2ZUNvbnRleHQsIFVJTWV0YS5LZXlMYXlvdXQsXG4gICAgICAgICAgICAgICAgdGhpcy56b25lcygpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fbGF5b3V0c0J5Wm9uZXM7XG4gICAgfVxuXG5cbiAgICBnZXQgbGF5b3V0KCk6IEl0ZW1Qcm9wZXJ0aWVzXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGF5b3V0O1xuICAgIH1cblxuICAgIHNldCBsYXlvdXQodmFsdWU6IEl0ZW1Qcm9wZXJ0aWVzKVxuICAgIHtcbiAgICAgICAgdGhpcy5fbGF5b3V0ID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX3Byb3BlcnR5TWFwID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyB0b2RvOiBzaG91bGQgdGhpcyBiZSBmb3IgY3VycmVudCBsYXlvdXQ/XG4gICAgZ2V0IHByb3BlcnR5TWFwKCk6IFByb3BlcnR5TWFwXG4gICAge1xuICAgICAgICBpZiAoaXNCbGFuayh0aGlzLl9wcm9wZXJ0eU1hcCkpIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlQ29udGV4dC5wdXNoKCk7XG4gICAgICAgICAgICB0aGlzLl9wcm9wZXJ0eU1hcCA9IHRoaXMuYWN0aXZlQ29udGV4dC5hbGxQcm9wZXJ0aWVzKCk7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZUNvbnRleHQucG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3BlcnR5TWFwO1xuICAgIH1cblxuXG4gICAgbGFiZWwoKTogc3RyaW5nXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5hY3RpdmVDb250ZXh0LnJlc29sdmVWYWx1ZSh0aGlzLnByb3BlcnR5TWFwLmdldChVSU1ldGEuS2V5TGFiZWwpKTtcbiAgICB9XG5cblxuICAgIGxhYmVsRm9yQ29udGV4dChuYW1lOiBzdHJpbmcpOiBzdHJpbmdcbiAgICB7XG4gICAgICAgIGxldCBjb250ZXh0OiBDb250ZXh0ID0gdGhpcy5jb250ZXh0TWFwLmdldChuYW1lKTtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmFQcm9wZXJ0aWVzKGNvbnRleHQsIFVJTWV0YS5LZXlMYWJlbCk7XG4gICAgfVxuXG4gICAgem9uZXMoKTogc3RyaW5nW11cbiAgICB7XG4gICAgICAgIHJldHVybiBVSU1ldGEuWm9uZXNUTFJNQjtcbiAgICB9XG5cblxuICAgIC8vIHJlbW92ZSB0aGlzIHVnbHkgc29sdXRpb24gb25jZSBJIGZpZ3VyZSBvdXQgY3VzdG9tIHZhbHVlIGFjY2Vzc29yXG4gICAgcHJvcGVydGllcyhrZXk6IHN0cmluZywgZGVmVmFsdWU6IGFueSA9IG51bGwpOiBhbnlcbiAgICB7XG4gICAgICAgIHJldHVybiBpc1ByZXNlbnQodGhpcy5hY3RpdmVDb250ZXh0KSA/IHRoaXMuYWN0aXZlQ29udGV4dC5wcm9wZXJ0eUZvcktleShrZXkpIDogZGVmVmFsdWU7XG5cbiAgICB9XG5cbiAgICBkZWJ1Z1N0cmluZyhuYW1lOiBzdHJpbmcpOiBzdHJpbmdcbiAgICB7XG4gICAgICAgIGxldCBjb250ZXh0ID0gdGhpcy5jb250ZXh0TWFwLmdldChuYW1lKTtcbiAgICAgICAgYXNzZXJ0KGlzUHJlc2VudChjb250ZXh0KSwgJ1RyeWluZyB0byByZXRyaXZlIGRlYnVnU3RyaW5nIG9uIG5vbi1leGlzdGluZyBjb250ZXh0Jyk7XG5cbiAgICAgICAgcmV0dXJuIGNvbnRleHQuZGVidWdTdHJpbmcoKTtcbiAgICB9XG5cblxuICAgIG5nT25EZXN0cm95KCk6IHZvaWRcbiAgICB7XG4gICAgICAgIHRoaXMubGF5b3V0Q29udGV4dCA9IG51bGw7XG4gICAgICAgIHRoaXMuY29udGV4dE1hcC5jbGVhcigpO1xuICAgICAgICB0aGlzLmNvbnRleHRNYXAgPSBudWxsO1xuICAgIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IFNBUCBBcmliYVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqIEJhc2VkIG9uIG9yaWdpbmFsIHdvcms6IE1ldGFVSTogQ3JhaWcgRmVkZXJpZ2hpICgyMDA4KVxuICpcbiAqL1xuaW1wb3J0IHtDb21wb25lbnR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtEb21TYW5pdGl6ZXJ9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHtFbnZpcm9ubWVudCwgaXNQcmVzZW50fSBmcm9tICdAYXJpYmF1aS9jb3JlJztcbmltcG9ydCB7TWV0YUxheW91dH0gZnJvbSAnLi4vbWV0YS1sYXlvdXQnO1xuaW1wb3J0IHtNZXRhQ29udGV4dENvbXBvbmVudH0gZnJvbSAnLi4vLi4vY29yZS9tZXRhLWNvbnRleHQvbWV0YS1jb250ZXh0LmNvbXBvbmVudCc7XG5pbXBvcnQge0NvbnRleHR9IGZyb20gJy4uLy4uL2NvcmUvY29udGV4dCc7XG5cbi8qKlxuICogTWV0YUVsZW1lbnRMaXN0IGlzIGltcGxlbWVudGF0aW9uIG9mIFN0YWNrIExheW91dCB3aGVyZSB0aGUgY29udGVudCBpcyByZW5kZXJlZCBhcyBsaXN0IChzdGFja2VkKVxuICogWW91IGRvIG5vdCB1c2UgdGhpcyBsYXlvdXQgZGlyZWN0bHkgYXMgaXQgaXMgaW5zdGFudGlhdGVkIGR5bmFtaWNhbGx5IHVzaW5nIE1ldGFJbmNsdWRlQ29tcG9uZW50LlxuICpcbiAqIEZvciBtb3JlIGRldGFpbCBwbGVhc2UgY2hlY2tvdXQgV2lkZ2V0UnVsZXMub3NzIHRoZSBwYXJ0IGJlbGxvdyB3aGVyZSBjcmVhdGUgbmV3IHRyYWl0XG4gKiB0aGF0IGNhbiBiZSBhcHBsaWVkIHRvIGFueSBsYXlvdXQuXG4gKlxuICogYGBgXG4gKlxuICogbGF5b3V0IHtcbiAqXG4gKiAgIEB0cmFpdD1TdGFjayB7IHZpc2libGU6dHJ1ZTsgY29tcG9uZW50Ok1ldGFFbGVtZW50TGlzdENvbXBvbmVudCB9XG4gKlxuICogfVxuICpcbiAqIGBgYFxuICpcbiAqIEFjdHVhbCB1c2FnZSBjb3VsZCBiZSA6XG4gKlxuICpcbiAqIGBgYFxuICogIGxheW91dD1JbnNwZWN0MiNTdGFjayB7XG4gKiAgICAgICBAbGF5b3V0PUZpcnN0I0Zvcm0ge1xuICogICAgICAgICAgIGVsZW1lbnRTdHlsZTpcInBhZGRpbmctYm90dG9tOjEwMHB4XCI7XG4gKiAgICAgICB9XG4gKiAgICAgICBAbGF5b3V0PVNlY29uZCNGb3JtIHsgem9uZVBhdGg6U2Vjb25kOyB9XG4gKiAgIH1cbiAqXG4gKlxuICpcbiAqICAgIGNsYXNzPVVzZXIge1xuICogICAgICAgek5vbmUgPT4gKjtcbiAqICAgICAgIHpMZWZ0ID0+IGZpcnN0TmFtZSA9PiBsYXN0TmFtZSA9PiBhZ2UgPT4gZGVwYXJ0bWVudDtcbiAqICAgICAgIFNlY29uZC56TGVmdCA9PiBlbWFpbDtcbiAqXG4gKiAgIH1cbiAqXG4gKiBgYGBcbiAqXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHRlbXBsYXRlVXJsOiAnbWV0YS1lbGVtZW50LWxpc3QuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWydtZXRhLWVsZW1lbnQtbGlzdC5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIE1ldGFFbGVtZW50TGlzdENvbXBvbmVudCBleHRlbmRzIE1ldGFMYXlvdXRcbntcblxuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIF9tZXRhQ29udGV4dDogTWV0YUNvbnRleHRDb21wb25lbnQsIHB1YmxpYyBlbnY6IEVudmlyb25tZW50LFxuICAgICAgICAgICAgICAgIHB1YmxpYyBzYW5pdGl6ZXI6IERvbVNhbml0aXplcilcbiAgICB7XG4gICAgICAgIHN1cGVyKF9tZXRhQ29udGV4dCwgZW52KTtcblxuICAgIH1cblxuXG4gICAgc3R5bGVTdHJpbmcobmFtZTogc3RyaW5nKTogYW55XG4gICAge1xuICAgICAgICBsZXQgbENvbnRleHQ6IENvbnRleHQgPSB0aGlzLmNvbnRleHRNYXAuZ2V0KG5hbWUpO1xuICAgICAgICAvLyByZXR1cm4gaXNQcmVzZW50KGxDb250ZXh0KSAmJiBpc1ByZXNlbnQobENvbnRleHQucHJvcGVydHlGb3JLZXkoJ2VsZW1lbnRTdHlsZScpKSA/XG4gICAgICAgIC8vICAgICB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0U3R5bGUobENvbnRleHQucHJvcGVydHlGb3JLZXkoJ2VsZW1lbnRTdHlsZScpKSA6XG4gICAgICAgIC8vIG51bGw7XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG5cbiAgICBjbGFzc1N0cmluZyhuYW1lOiBzdHJpbmcpOiBhbnlcbiAgICB7XG4gICAgICAgIGxldCBsQ29udGV4dDogQ29udGV4dCA9IHRoaXMuY29udGV4dE1hcC5nZXQobmFtZSk7XG4gICAgICAgIHJldHVybiBpc1ByZXNlbnQobENvbnRleHQpID8gbENvbnRleHQucHJvcGVydHlGb3JLZXkoJ2VsZW1lbnRDbGFzcycpIDogbnVsbDtcbiAgICB9XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBTQVAgQXJpYmFcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiBCYXNlZCBvbiBvcmlnaW5hbCB3b3JrOiBNZXRhVUk6IENyYWlnIEZlZGVyaWdoaSAoMjAwOClcbiAqXG4gKi9cbmltcG9ydCB7Q29tcG9uZW50LCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Vudmlyb25tZW50LCBpc0JsYW5rLCBpc1ByZXNlbnR9IGZyb20gJ0BhcmliYXVpL2NvcmUnO1xuaW1wb3J0IHtNZXRhQ29udGV4dENvbXBvbmVudH0gZnJvbSAnLi4vLi4vY29yZS9tZXRhLWNvbnRleHQvbWV0YS1jb250ZXh0LmNvbXBvbmVudCc7XG5pbXBvcnQge01ldGFCYXNlQ29tcG9uZW50fSBmcm9tICcuLi9tZXRhLmJhc2UuY29tcG9uZW50JztcbmltcG9ydCB7Q29udGV4dCwgVUlDb250ZXh0fSBmcm9tICcuLi8uLi9jb3JlL2NvbnRleHQnO1xuaW1wb3J0IHtVSU1ldGF9IGZyb20gJy4uLy4uL2NvcmUvdWltZXRhJztcbmltcG9ydCB7SXRlbVByb3BlcnRpZXN9IGZyb20gJy4uLy4uL2NvcmUvaXRlbS1wcm9wZXJ0aWVzJztcbmltcG9ydCB7TWVudUl0ZW19IGZyb20gJ3ByaW1lbmcvY29tcG9uZW50cy9jb21tb24vYXBpJztcblxuXG5leHBvcnQgaW50ZXJmYWNlIE1lbnVJdGVtQ29tbWFuZCBleHRlbmRzIE1lbnVJdGVtXG57XG4gICAgYWN0aW9uTmFtZT86IHN0cmluZztcbiAgICBtb2R1bGVOYW1lPzogc3RyaW5nO1xuICAgIHJvdXRlUGF0aD86IHN0cmluZztcblxufVxuXG4vKipcbiAqIE1ldGFBY3Rpb25MaXN0IHByb3ZpZGVzIGEgd2F5IGhvdyB0byBhdHRhY2ggYWN0aW9ucyB0byB0aGUgc2NyZWVuLiBXZSBjYW4gdXNlIEBhY3Rpb24gZGVjbGFyYXRpb25cbiAqIHRvIGRlZmluZSBuZXcgYWN0aW9uIGFuZCB0aGVpciBhY3Rpb25SZXN1bHRzLiBhY3Rpb25SZXN1bHRzIGlzIGFuIGV4cHJlc3Npb24gdGhhdCBpcyBleGVjdXRlZFxuICogYW5kIGVpdGhlciByZWRpcmVjdCB5b3UgdG8gZGlmZmVyZW50IHBhZ2Ugb3Igc29tZSBsb2dpYyBpcyBleGVjdXRlZC5cbiAqXG4gKiBBY3Rpb25zIGNhbiBiZSBvcmdhbml6ZWQgaW50byBhY3Rpb24gY2F0ZWdvcmllcyBidXQgaWYgd2UgZG8gbm90IHByb3ZpZGUgYW55IGFjdGlvbiBjYXRlZ29yeVxuICogZGVmYXVsdCBvbmUgaXMgdXNlZC5cbiAqXG4gKiBUaGlzIHdheSB3ZSBkZWZpbmUgcGxhY2Vob2xkZXIgdXNpbmcgYSBsYXlvdXQgd2hlcmUgYWN0aW9ucyBhcmUgaW5zZXJ0ZWRcbiAqXG4gKlxuICpgYGBodG1sXG4gKlxuICogICAgbGF5b3V0PUluc3BlY3QyI1N0YWNrIHtcbiAqICAgICAgIEBsYXlvdXQ9TWVudVRvcCNBY3Rpb25CdXR0b25zIHtcbiAqICAgICAgIH1cbiAqXG4gKiAgICAgQGxheW91dD1GaXJzdCNGb3JtIHtcbiAqICAgICB9XG4gKlxuICogICAgIEBsYXlvdXQ9U2Vjb25kI0Zvcm0geyB6b25lUGF0aDpTZWNvbmQ7IH1cbiAqICB9XG4gKlxuICpcbiAqIGBgYFxuICpcbiAqIEFuZCB0aGlzIGlzIGhvdyB3ZSBkZWZpbmUgYWN0aW9ucyBmb3IgY3VycmVudCBwYWdlL2NsYXNzL29iamVjdFxuICpcbiAqIGBgYFxuICogICAgQGFjdGlvbj11cGRhdGUgIHtcbiAqICAgICAgICAgICAgIGFjdGlvblJlc3VsdHM6JHsgb2JqZWN0LmZpcnN0TmFtZSA9IFwiTXIuXCIgKyAgb2JqZWN0LmZpcnN0TmFtZSB9O1xuICogICAgICAgICAgICAgdmlzaWJsZTogJHsgcHJvcGVydGllcy5lZGl0aW5nIH07XG4gKiAgICB9XG4gKlxuICpcbiAqICAgIEBhY3Rpb249U2F2ZSAge1xuICogICAgICAgICAgICAgbGFiZWw6IFwiTXkgU2F2ZVwiO1xuICogICAgICAgICAgICAgYWN0aW9uUmVzdWx0czokeyBvYmplY3QuZmlyc3ROYW1lID0gXCJNcy5cIiArICBvYmplY3QuZmlyc3ROYW1lIH07XG4gKiAgICAgICAgICAgICB2aXNpYmxlOiAkeyBwcm9wZXJ0aWVzLmVkaXRpbmcgfTtcbiAqICAgICAgICAgICAgIGJ1dHRvblN0eWxlOmluZm87XG4gKiAgICB9XG4gKiBgYGBcbiAqXG4gKlxuICpcbiAqXG4gKlxuICpcbiAqXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHRlbXBsYXRlVXJsOiAnbWV0YS1hY3Rpb24tbGlzdC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJ21ldGEtYWN0aW9uLWxpc3QuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBNZXRhQWN0aW9uTGlzdENvbXBvbmVudCBleHRlbmRzIE1ldGFCYXNlQ29tcG9uZW50XG57XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIERlZmluZXMgdHlwZSBvZiBjb21wb25lbnRzIHRoYXQgcmVuZGVycyBvdXIgYWN0aW9ucy4gV2UgaGF2ZSAzIHR5cGVzOlxuICAgICAqIEJ1dHRvbnMsIExpbmtzIGFuZCBQb3B1cCBNZW51XG4gICAgICpcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHJlbmRlckFzOiBzdHJpbmcgPSAnYnV0dG9ucyc7XG5cblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgc3R5bGUgdXNlZCBmb3IgdGhlIGJ1dHRvbnMgaWYgbm9uZSBpcyBzcGVjaWZpZWRcbiAgICAgKlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgZGVmYXVsdFN0eWxlOiBzdHJpbmcgPSAnaW5mbyc7XG5cblxuICAgIC8qKlxuICAgICAqIFRlbGxzIHVzIGlmIHRoZSBhY3Rpb24gc2hvdWxkIGJlIHJlbmRlcmVkIG9uIHRoZSBsZWZ0IG9yIHJpZ2h0IHNpZGVcbiAgICAgKlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgYWxpZ246IHN0cmluZyA9ICdyaWdodCc7XG5cblxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgc3BlY2lhbCBpZGVudGlmaWVyIGFuZCB3aGVuIHVzZWQgd2UgcHVzaCBleHRyYSBzdGFjayBwcm9wZXJ0eSBpbiBvcmRlciB0byBnZXQgc29tZVxuICAgICAqIGFkZGl0aW9uYWwgcHJvcGVydGllcyB0aGF0IGFyZSBwcmltYXJpbHkgcmVsYXRlZCB0byB0eXBlIG9mIGFjdGlvbnMgdGhhdCBjYW4gYmUgdmlzaWJsZSBvclxuICAgICAqIGVuYWJsZWRcbiAgICAgKlxuICAgICAqIEUuZy4gd2UgY2FuIHNheSB3ZSB3YW50IG9ubHkgb2JqZWN0IEluc3RhbmNlIGJhc2VkIGJ1dHRvbnNcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqICBAdHJhaXQ9SW5zdGFuY2VBY3Rpb25CdXR0b25zIHtcbiAgICAgKiAgICAgICAgICB2aXNpYmxlOnRydWU7XG4gICAgICogICAgICAgICAgY29tcG9uZW50Ok1ldGFBY3Rpb25MaXN0Q29tcG9uZW50O1xuICAgICAqICAgICAgICAgIGJpbmRpbmdzOntcbiAgICAgKiAgICAgICAgICAgICAgcmVuZGVyQXM6YnV0dG9ucztcbiAgICAgKiAgICAgICAgICAgICAgYWxpZ246cmlnaHQ7XG4gICAgICogICAgICAgICAgICAgIGZpbHRlckFjdGlvbnM6aW5zdGFuY2U7XG4gICAgICogICAgICAgICAgIH07XG4gICAgICogICAgICAgICAgIGVsZW1lbnRDbGFzczpcImwtYWN0aW9uLWJ1dHRvbnNcIjtcbiAgICAgKiAgICAgIH1cbiAgICAgKlxuICAgICAqICBgYGBcbiAgICAgKlxuICAgICAqIFdoZW4gdGhpcyB0cmFpdCBpcyB1c2VkIHdlIHB1c2ggZmlsdGVyQWN0aW9uID0gaW5zdGFuY2UgYW5kIGl0IHdpbGwgZ2l2ZSB1cyBiYWNrXG4gICAgICpcbiAgICAgKiAgYGBgXG4gICAgICogIGZpbHRlckFjdGlvbnM9aW5zdGFuY2Uge1xuICAgICAqICAgICAgICAgIHZpc2libGU6JHtwcm9wZXJ0aWVzLmlzSW5zdGFuY2VBY3Rpb24gPT0gdHJ1ZX1cbiAgICAgKiAgICAgIH1cbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogV2hpY2ggY2FuIGJlIHVzZWQgdG8gc2hvdyBvciBoaWRlIGJ1dHRvbiBpZiBlLmcuIG9iamVjdCBpbnN0YW5jZSBpcyBzZWxlY3RlZCBvciBhdmFpbGFibGVcbiAgICAgKlxuICAgICAqXG4gICAgICpcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGZpbHRlckFjdGlvbnM6IHN0cmluZztcblxuXG4gICAgLyoqXG4gICAgICogSnVzdCBzdG9yZXMgbWFwcGluZyBiZXR3ZWVuIGFjdGlvbiBhbmQgY29udGV4dCBhbmQgYWN0aW9uIGFuZCBJdGVtUHJvcGVydGllcy4gU28gZXZlcnl0aW1lXG4gICAgICpcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX2FjdGlvbnNCeUNhdGVnb3J5OiBNYXA8c3RyaW5nLCBJdGVtUHJvcGVydGllc1tdPjtcbiAgICBwcm90ZWN0ZWQgX2FjdGlvbnNCeU5hbWU6IE1hcDxzdHJpbmcsIEl0ZW1Qcm9wZXJ0aWVzPjtcblxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgIGFjdGlvbiBncm91cHMgcmV0cmlldmVkIGZyb20gY3VycmVudCBDb250ZXh0XG4gICAgICovXG4gICAgY2F0ZWdvcmllczogSXRlbVByb3BlcnRpZXNbXTtcblxuICAgIC8qKlxuICAgICAqIFdoZW4gQWN0aW9uTWVudSB0cmFpdCBpcyB1c2VkIHRoaXMgaXMgdGhlIG1lbnUgbW9kZWwgdGhhdCBkZWZpbmVzIHdoYXQgaXRlbXMgYXJlIGF2YWlsYWJsZVxuICAgICAqL1xuICAgIG1lbnVNb2RlbDogTWVudUl0ZW1Db21tYW5kW107XG5cbiAgICAvKipcbiAgICAgKiBNYXAgbGlua2luZyB0aGUgbmFtZSBvZiB0aGUgbGF5b3V0IHRvIHRoZSBhY3R1YWwgY29udGV4dC4gV2UgbmVlZCB0aGlzIHdoZW4gd2UgbmVlZFxuICAgICAqIHRvIGFjY2VzcyBjdXJyZW50IGNvbnRlbnQuXG4gICAgICpcbiAgICAgKi9cbiAgICBfY29udGV4dE1hcDogTWFwIDxzdHJpbmcsIENvbnRleHQ+ID0gbmV3IE1hcDxzdHJpbmcsIENvbnRleHQ+KCk7XG5cblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBfbWV0YUNvbnRleHQ6IE1ldGFDb250ZXh0Q29tcG9uZW50LCBwdWJsaWMgZW52OiBFbnZpcm9ubWVudClcbiAgICB7XG4gICAgICAgIHN1cGVyKGVudiwgX21ldGFDb250ZXh0KTtcblxuICAgIH1cblxuXG4gICAgLy8gcHJvdGVjdGVkIHVwZGF0ZU1ldGEoKTogYW55XG4gICAgLy8ge1xuICAgIC8vICAgICAvLyB0b2RvOiByZXBsYWNlIGl0IHdpdGggRXZlbnRFbW1pdHRlci5cbiAgICAvLyAgICAgdGhpcy5fYWN0aW9uc0J5Q2F0ZWdvcnkgPSBudWxsO1xuICAgIC8vICAgICB0aGlzLl9hY3Rpb25zQnlOYW1lID0gbnVsbDtcbiAgICAvLyAgICAgcmV0dXJuIHN1cGVyLnVwZGF0ZU1ldGEoKTtcbiAgICAvLyB9XG5cbiAgICAvKipcbiAgICAgKiBSZWFkIGFuZCBzdG9yZXMgY3VycmVudCBhY3Rpb24gY2F0ZWdvcmllcyBhdmFpbGFibGUgdG8gY3VycmVudCBDb250ZXh0XG4gICAgICpcbiAgICAgKi9cbiAgICBhY3Rpb25DYXRlZ29yaWVzKCk6IEl0ZW1Qcm9wZXJ0aWVzW11cbiAgICB7XG4gICAgICAgIGlmIChpc0JsYW5rKHRoaXMuX2FjdGlvbnNCeUNhdGVnb3J5KSB8fCBpc0JsYW5rKHRoaXMuX2FjdGlvbnNCeU5hbWUpKSB7XG5cbiAgICAgICAgICAgIGlmIChpc1ByZXNlbnQodGhpcy5maWx0ZXJBY3Rpb25zKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5zZXQoJ2ZpbHRlckFjdGlvbnMnLCB0aGlzLmZpbHRlckFjdGlvbnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgbWV0YTogVUlNZXRhID0gPFVJTWV0YT4gdGhpcy5jb250ZXh0Lm1ldGE7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQucHVzaCgpO1xuXG4gICAgICAgICAgICB0aGlzLm1lbnVNb2RlbCA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fYWN0aW9uc0J5Q2F0ZWdvcnkgPSBuZXcgTWFwPHN0cmluZywgSXRlbVByb3BlcnRpZXNbXT4oKTtcbiAgICAgICAgICAgIHRoaXMuX2FjdGlvbnNCeU5hbWUgPSBuZXcgTWFwPHN0cmluZywgSXRlbVByb3BlcnRpZXM+KCk7XG4gICAgICAgICAgICB0aGlzLmNhdGVnb3JpZXMgPSBtZXRhLmFjdGlvbnNCeUNhdGVnb3J5KHRoaXMuY29udGV4dCwgdGhpcy5fYWN0aW9uc0J5Q2F0ZWdvcnksXG4gICAgICAgICAgICAgICAgVUlNZXRhLkFjdGlvblpvbmVzKTtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5wb3AoKTtcblxuICAgICAgICAgICAgdGhpcy5fYWN0aW9uc0J5Q2F0ZWdvcnkuZm9yRWFjaCgodjogSXRlbVByb3BlcnRpZXNbXSwgazogc3RyaW5nKSA9PlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHYuZm9yRWFjaCgoaXRlbTogSXRlbVByb3BlcnRpZXMpID0+IHRoaXMuX2FjdGlvbnNCeU5hbWUuc2V0KGl0ZW0ubmFtZSwgaXRlbSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5jYXRlZ29yaWVzO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBBY3Rpb24gYmVsb25naW5nIHRvIGN1cnJlbnQgY2F0ZWdvcnkuLlxuICAgICAqXG4gICAgICovXG4gICAgYWN0aW9ucyhjYXRlZ29yeTogSXRlbVByb3BlcnRpZXMpOiBJdGVtUHJvcGVydGllc1tdXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aW9uc0J5Q2F0ZWdvcnkuZ2V0KGNhdGVnb3J5Lm5hbWUpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBXaGVuIGFjdGlvbiBjbGlja2VkIHRoaXMgbWV0aG9kIGRlbGVnYXRlcyBpdCBpbnRvIG1ldGEgbGF5ZXIgdG8gYmUgZXhlY3V0ZWQuXG4gICAgICpcbiAgICAgKi9cbiAgICBhY3Rpb25DbGlja2VkKGFjdGlvbjogYW55KTogdm9pZFxuICAgIHtcbiAgICAgICAgbGV0IGNvbnRleHQgPSB0aGlzLl9jb250ZXh0TWFwLmdldChhY3Rpb24pO1xuICAgICAgICBsZXQgbWV0YTogVUlNZXRhID0gPFVJTWV0YT4gY29udGV4dC5tZXRhO1xuXG4gICAgICAgIG1ldGEuZmlyZUFjdGlvbkZyb21Qcm9wcyh0aGlzLl9hY3Rpb25zQnlOYW1lLmdldChhY3Rpb24pLCA8VUlDb250ZXh0PiBjb250ZXh0KTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEEgaG9vayB1c2VkIHRvIHN0b3JlIHRoZSBtb3N0IGN1cnJlbnQgY29udGV4dCBmb3IgZWFjaCBhY3Rpb24uXG4gICAgICpcbiAgICAgKi9cbiAgICBvbkFmdGVyQ29udGV4dFNldChhY3Rpb25OYW1lOiBzdHJpbmcpOiB2b2lkXG4gICAge1xuICAgICAgICBsZXQgYUNvbnRleHQgPSB0aGlzLl9tZXRhQ29udGV4dC5hY3RpdmVDb250ZXh0KCkuc25hcHNob3QoKS5oeWRyYXRlKGZhbHNlKTtcbiAgICAgICAgdGhpcy5fY29udGV4dE1hcC5zZXQoYWN0aW9uTmFtZSwgYUNvbnRleHQpO1xuXG5cbiAgICAgICAgaWYgKHRoaXMucmVuZGVyQXMgPT09ICdtZW51Jykge1xuICAgICAgICAgICAgdGhpcy5wb3B1bGF0ZU1lbnUoYWN0aW9uTmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEEgaG9vayB1c2VkIHRvIHN0b3JlIHRoZSBtb3N0IGN1cnJlbnQgY29udGV4dCBmb3IgZWFjaCBhY3Rpb24uXG4gICAgICpcbiAgICAgKi9cbiAgICBvbkNvbnRleHRDaGFuZ2VkKGNoYW5nZTogc3RyaW5nKTogdm9pZFxuICAgIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0NoYW5nZWQgPSAnICsgY2hhbmdlKTtcbiAgICB9XG5cbiAgICBsYWJlbChhY3Rpb25OYW1lOiBzdHJpbmcpOiBzdHJpbmdcbiAgICB7XG4gICAgICAgIGxldCBjb250ZXh0OiBDb250ZXh0ID0gdGhpcy5fY29udGV4dE1hcC5nZXQoYWN0aW9uTmFtZSk7XG4gICAgICAgIHJldHVybiBzdXBlci5hUHJvcGVydGllcyhjb250ZXh0LCBVSU1ldGEuS2V5TGFiZWwpO1xuICAgIH1cblxuICAgIGlzQWN0aW9uRGlzYWJsZWQoYWN0aW9uTmFtZTogc3RyaW5nKTogYm9vbGVhblxuICAgIHtcbiAgICAgICAgbGV0IGNvbnRleHQ6IENvbnRleHQgPSB0aGlzLl9jb250ZXh0TWFwLmdldChhY3Rpb25OYW1lKTtcbiAgICAgICAgcmV0dXJuIGlzUHJlc2VudChjb250ZXh0KSA/ICFjb250ZXh0LmJvb2xlYW5Qcm9wZXJ0eUZvcktleSgnZW5hYmxlZCcsIGZhbHNlKSA6IHRydWU7XG4gICAgfVxuXG4gICAgYWxpZ25SaWdodCgpOiBib29sZWFuXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5hbGlnbiA9PT0gJ3JpZ2h0JztcbiAgICB9XG5cbiAgICBzdHlsZShhY3Rpb25OYW1lOiBzdHJpbmcpOiBzdHJpbmdcbiAgICB7XG4gICAgICAgIGxldCBjb250ZXh0OiBDb250ZXh0ID0gdGhpcy5fY29udGV4dE1hcC5nZXQoYWN0aW9uTmFtZSk7XG4gICAgICAgIGxldCBzdHlsZSA9IHN1cGVyLmFQcm9wZXJ0aWVzKGNvbnRleHQsICdidXR0b25TdHlsZScpO1xuXG4gICAgICAgIHJldHVybiBpc1ByZXNlbnQoc3R5bGUpID8gc3R5bGUgOiB0aGlzLmRlZmF1bHRTdHlsZTtcbiAgICB9XG5cblxuICAgIHByaXZhdGUgcG9wdWxhdGVNZW51KGFjdGlvbk5hbWU6IHN0cmluZyk6IHZvaWRcbiAgICB7XG4gICAgICAgIGxldCBsYWJlbCA9IHRoaXMubGFiZWwoYWN0aW9uTmFtZSk7XG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMubWVudU1vZGVsLmZpbmRJbmRleChcbiAgICAgICAgICAgIChpdGVtOiBNZW51SXRlbUNvbW1hbmQpID0+IGl0ZW0uYWN0aW9uTmFtZSA9PT0gYWN0aW9uTmFtZSk7XG5cbiAgICAgICAgbGV0IGl0ZW1Db21tYW5kOiBNZW51SXRlbUNvbW1hbmQgPSB7XG4gICAgICAgICAgICBsYWJlbDogbGFiZWwsXG4gICAgICAgICAgICBhY3Rpb25OYW1lOiBhY3Rpb25OYW1lLFxuICAgICAgICAgICAgZGlzYWJsZWQ6IHRoaXMuaXNBY3Rpb25EaXNhYmxlZChhY3Rpb25OYW1lKSxcbiAgICAgICAgICAgIGNvbW1hbmQ6IChldmVudDogYW55KSA9PlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uQ2xpY2tlZChldmVudC5pdGVtLmFjdGlvbk5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLm1lbnVNb2RlbC5wdXNoKGl0ZW1Db21tYW5kKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubWVudU1vZGVsW2luZGV4XSA9IGl0ZW1Db21tYW5kO1xuICAgICAgICB9XG4gICAgfVxuXG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBTQVAgQXJpYmFcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiBCYXNlZCBvbiBvcmlnaW5hbCB3b3JrOiBNZXRhVUk6IENyYWlnIEZlZGVyaWdoaSAoMjAwOClcbiAqXG4gKi9cbmltcG9ydCB7Q29tcG9uZW50LCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Jhc2VDb21wb25lbnR9IGZyb20gJ0BhcmliYXVpL2NvbXBvbmVudHMnO1xuaW1wb3J0IHtFbnZpcm9ubWVudCwgaXNQcmVzZW50fSBmcm9tICdAYXJpYmF1aS9jb3JlJztcbmltcG9ydCB7QWN0aXZhdGVkUm91dGV9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQge1VJTWV0YX0gZnJvbSAnLi4vLi4vY29yZS91aW1ldGEnO1xuXG5cbi8qKlxuICogRGVmYXVsdCBob21lUGFnZSBpbXBsZW1lbnRhdGlvbiBmb3IgYSBNb2R1bGUuIEp1c3QgbGlrZSBvbiB0aGUgZXhhbXBsZSBiZWxsb3cgd2hlbiB3ZSBkZWZpbmUgYVxuICogbW9kdWxlIHdpdGhvdXQgYSBob21lUGFnZSB0aGlzIE1ldGFIb21lUGFnZUNvbXBvbmVudCB3aWxsIGJlIHVzZWQuXG4gKlxuICogYGBgXG4gKlxuICogICBAbW9kdWxlPUhvbWUge1xuICogICAgICAgbGFiZWw6XCJNeSBIb21lXCI7XG4gKiAgICAgICBwYWdlVGl0bGU6XCJZb3UgYXJlIG5vdyBvbiBIb21lcGFnZVwiO1xuICpcbiAqICAgICAgIEBsYXlvdXQ9VG9kYXkge1xuICogICAgICAgICAgYWZ0ZXI6elRvcDtcbiAqICAgICAgICAgIGxhYmVsOiBcIlNhbGVzIEdyYXBoXCI7XG4gKiAgICAgICAgICBjb21wb25lbnQ6U2FsZXNHcmFwaENvbXBvbmVudDtcbiAqICAgICB9XG4gKiAgfVxuICpcbiAqIGBgYFxuICogT3IgeW91IGNhbiBkZWNpZGUgbm90IHRvIHVzZSB0aGlzIE1ldGFIb21lUGFnZSBhbmQgUHJvdmlkZSB5b3VyIG93biBlLmc6XG4gKlxuICogYGBgXG4gKiAgQG1vZHVsZT1Qcm9kdWN0cyB7XG4gKiAgICAgIGxhYmVsOlwiUHJvZHVjdHMgZm9yIFNvbWV0aGlnXCI7XG4gKiAgICAgIHBhZ2VUaXRsZTpcIllvdSBhcmUgbm93IG9uIFByb2R1Y3RzXCI7XG4gKiAgICAgIGhvbWVQYWdlOlByb2R1Y3RDb250ZW50Q29tcG9uZW50O1xuICogIH1cbiAqXG4gKiBgYGBcbiAqXG4gKlxuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ20taG9tZS1wYWdlJyxcbiAgICB0ZW1wbGF0ZVVybDogJ21ldGEtaG9tZS5wYWdlLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnbWV0YS1ob21lLnBhZ2UuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBNZXRhSG9tZVBhZ2VDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50XG57XG5cbiAgICBASW5wdXQoKVxuICAgIG1vZHVsZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGVudjogRW52aXJvbm1lbnQsIHByaXZhdGUgYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZW52KTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogVGhpcyBwYWdlIGlzIHRyaWdnZXJlZCBieSByb3V0ZXIgYW5kIHdlIGV4cGVjdCBhIG1vZHVsZSB0byBiZSBwYXNzZWQgaW4gYnkgcm91dGluZ1xuICAgICAqIHBhcmFtc1xuICAgICAqXG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZFxuICAgIHtcbiAgICAgICAgc3VwZXIubmdPbkluaXQoKTtcblxuICAgICAgICBsZXQgcm91dGVQYXJhbXMgPSB0aGlzLmFjdGl2YXRlZFJvdXRlLnNuYXBzaG90LnBhcmFtcztcbiAgICAgICAgaWYgKGlzUHJlc2VudChyb3V0ZVBhcmFtcykgJiYgaXNQcmVzZW50KHJvdXRlUGFyYW1zW1VJTWV0YS5LZXlNb2R1bGVdKSkge1xuICAgICAgICAgICAgdGhpcy5tb2R1bGUgPSByb3V0ZVBhcmFtc1tVSU1ldGEuS2V5TW9kdWxlXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhc01vZHVsZSgpOiBib29sZWFuXG4gICAge1xuICAgICAgICByZXR1cm4gaXNQcmVzZW50KHRoaXMubW9kdWxlKTtcbiAgICB9XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBTQVAgQXJpYmFcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiBCYXNlZCBvbiBvcmlnaW5hbCB3b3JrOiBNZXRhVUk6IENyYWlnIEZlZGVyaWdoaSAoMjAwOClcbiAqXG4gKi9cbmltcG9ydCB7Q29tcG9uZW50fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RW52aXJvbm1lbnQsIGlzUHJlc2VudH0gZnJvbSAnQGFyaWJhdWkvY29yZSc7XG5pbXBvcnQge01ldGFMYXlvdXR9IGZyb20gJy4uL21ldGEtbGF5b3V0JztcbmltcG9ydCB7TWV0YUNvbnRleHRDb21wb25lbnR9IGZyb20gJy4uLy4uL2NvcmUvbWV0YS1jb250ZXh0L21ldGEtY29udGV4dC5jb21wb25lbnQnO1xuaW1wb3J0IHtVSU1ldGF9IGZyb20gJy4uLy4uL2NvcmUvdWltZXRhJztcbmltcG9ydCB7Q29udGV4dH0gZnJvbSAnLi4vLi4vY29yZS9jb250ZXh0JztcbmltcG9ydCB7SXRlbVByb3BlcnRpZXN9IGZyb20gJy4uLy4uL2NvcmUvaXRlbS1wcm9wZXJ0aWVzJztcblxuXG4vKipcbiAqXG4gKiBEZWZpbmVzIDQgc2l6ZXMgZm9yIHRoZSBwb3J0bGV0IHNpemVcbiAqXG4gKi9cbmNvbnN0IFBvcnRsZXRTaXplczoge1trOiBzdHJpbmddOiBzdHJpbmd9ID0ge1xuICAgICdzbWFsbCc6ICd1aS1tZC0zJyxcbiAgICAnbWVkaXVtJzogJ3VpLW1kLTQnLFxuICAgICd3aWRlJzogJ3VpLW1kLTYnLFxuICAgICdsYXJnZSc6ICd1aS1tZC0xMidcbn07XG5cbi8qKlxuICogU2ltcGxlIERhc2hib2FyZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhlIGhvbWVQYWdlLiBKdXN0IGxpa2Ugd2Ugc3VwcG9ydCBpbnNpZGUgTWV0YUZvcm1UYWJsZVxuICogZGlmZmVyZW50IHpvbmVzIGFuZCBkaXN0cmlidXRlIGZpZWxkcyB0byB0aGVtLCB3ZSBkbyB0aGUgc2FtZSB3aXRoIGRlZmluZWQgbGF5b3V0cy5cbiAqXG4gKiBUaGlzIGRhc2hib2FyZCBzdXBwb3J0cyAzIHpvbmVzLlxuICpcbiAqICAgIHpUb2M6IFRoaXMgaXMgdGhlIHBsYWNlIHdoZXJlIHVzdWFsbHkgYWxsIHRoZSBhY3Rpb25zIG9yIDJuZCBsZXZlbCBuYXZpZ2F0aW9uIHdpbGwgZ29cbiAqICAgIHpUb3AsekJvdHRvbTogaXMgd2hlcmUgdGhlIHBvcnRsZXRzIGFyZSByZW5kZXJlZC5cbiAqXG4gKlxuICogVG8gZGlzdHJpYnV0ZSBsYXlvdXRzIHRvIGRpZmZlcmVudCB6b25lcyA6XG4gKlxuICogYGBgXG4gKiAgICAgICBAbW9kdWxlPUhvbWUge1xuICogICAgICAgICAgIGxhYmVsOlwiTXkgSG9tZVwiO1xuICogICAgICAgICAgIHBhZ2VUaXRsZTpcIllvdSBhcmUgbm93IG9uIEhvbWVwYWdlXCI7XG4gKlxuICpcbiAqICAgICAgICAgICBAbGF5b3V0PVRvZGF5IHtcbiAqICAgICAgICAgICAgICBhZnRlcjp6VG9wO1xuICogICAgICAgICAgICAgIGxhYmVsOiBcIlNhbGVzIEdyYXBoXCI7XG4gKiAgICAgICAgICAgICAgY29tcG9uZW50OlNhbGVzR3JhcGhDb21wb25lbnQ7XG4gKlxuICogICAgICAgICAgIH1cbiAqXG4gKiAgICAgICAgICAgQGxheW91dD1TcG9ydCB7XG4gKiAgICAgICAgICAgICAgYWZ0ZXI6VG9kYXk7XG4gKiAgICAgICAgICAgICAgbGFiZWw6IFwiU3BvcnQgdG9kYXkhXCI7XG4gKiAgICAgICAgICAgICAgY29tcG9uZW50OlN0cmluZ0NvbXBvbmVudDtcbiAqICAgICAgICAgICAgICBiaW5kaW5nczp7dmFsdWU6XCJUaGUgVGV4YXMgVGVjaCBxdWFydGVyYmFjayBhcnJpdmVkIGF0ICBcIiB9XG4gKlxuICogICAgICAgICAgIH1cbiAqXG4gKiBgYGBcbiAqXG4gKiAgb3IgUHVzaCBhY3Rpb25zIHRvIHRoZSB6VG9jIHpvbmU6XG4gKlxuICogYGBgXG4gKiAgICAgICBAbW9kdWxlPUhvbWUge1xuICogICAgICAgICAgIGxhYmVsOlwiTXkgSG9tZVwiO1xuICogICAgICAgICAgIHBhZ2VUaXRsZTpcIllvdSBhcmUgbm93IG9uIEhvbWVwYWdlXCI7XG4gKlxuICpcbiAqICAgICAgICAgICBAbGF5b3V0PVRvZGF5IHtcbiAqICAgICAgICAgICAgICBhZnRlcjp6VG9wO1xuICogICAgICAgICAgICAgIGxhYmVsOiBcIlNhbGVzIEdyYXBoXCI7XG4gKiAgICAgICAgICAgICAgY29tcG9uZW50OlNhbGVzR3JhcGhDb21wb25lbnQ7XG4gKlxuICogICAgICAgICAgIH1cbiAqXG4gKiAgICAgICAgICAgIEBsYXlvdXQ9QWN0aW9ucyNBY3Rpb25MaW5rcyB7XG4gKiAgICAgICAgICAgICAgIGxhYmVsOiRbYTAwNF1BY3Rpb25zO1xuICogICAgICAgICAgICAgICAgYWZ0ZXI6elRvYztcbiAqICAgICAgICAgICAgfVxuICpcbiAqXG4gKiAgICAgICAgICAgQGFjdGlvbkNhdGVnb3J5PUNyZWF0ZSB7XG4gKiAgICAgICAgICAgICAgQGFjdGlvbj1OZXdCbG9nI3BhZ2VBY3Rpb24geyBwYWdlTmFtZTpibG9nUGFnZTt9XG4gKiAgICAgICAgICAgICAgQGFjdGlvbj1OZXdDaGFydCNwYWdlQWN0aW9uIHsgcGFnZU5hbWU6Y2hhcnRQYWdlO31cbiAqICAgICAgICAgICB9XG4gKlxuICogfVxuICpcbiAqXG4gKlxuICovXG5AQ29tcG9uZW50KHtcbiAgICB0ZW1wbGF0ZVVybDogJ21ldGFkYXNoYm9hcmQtbGF5b3V0LmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnbWV0YWRhc2hib2FyZC1sYXlvdXQuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBNZXRhRGFzaGJvYXJkTGF5b3V0Q29tcG9uZW50IGV4dGVuZHMgTWV0YUxheW91dFxue1xuXG4gICAgLyoqXG4gICAgICogTmV3IGRlZmluZWQgem9uZSBmb3IgQWN0aW9uc1xuICAgICAqXG4gICAgICovXG4gICAgc3RhdGljIFpvbmVUb2MgPSAnelRvYyc7XG4gICAgc3RhdGljIFpvbmVzVEIgPSBbXG4gICAgICAgIE1ldGFEYXNoYm9hcmRMYXlvdXRDb21wb25lbnQuWm9uZVRvYywgVUlNZXRhLlpvbmVUb3AsXG4gICAgICAgIFVJTWV0YS5ab25lQm90dG9tXG4gICAgXTtcblxuICAgIC8qKlxuICAgICAqIERlZmluZXMgaWYgc2lkZWJhciBpcyBjb2xsYXBzZWQgb3IgZXhwYW5kZWRcbiAgICAgKlxuICAgICAqL1xuICAgIGFjdGl2ZU1lbnU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgTW9kdWxlIG5hbWVcbiAgICAgKlxuICAgICAqL1xuICAgIGRhc2hib2FyZE5hbWU6IHN0cmluZyA9ICcnO1xuXG4gICAgY29uc3RydWN0b3IobWV0YUNvbnRleHQ6IE1ldGFDb250ZXh0Q29tcG9uZW50LCBlbnY6IEVudmlyb25tZW50KVxuICAgIHtcbiAgICAgICAgc3VwZXIobWV0YUNvbnRleHQsIGVudik7XG4gICAgfVxuXG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkXG4gICAge1xuICAgICAgICBzdXBlci5uZ09uSW5pdCgpO1xuXG4gICAgICAgIHRoaXMuZGFzaGJvYXJkTmFtZSA9IHRoaXMubGFiZWwoKTtcbiAgICB9XG5cbiAgICB0b2dnbGVNZW51KGV2ZW50OiBhbnkpXG4gICAge1xuICAgICAgICB0aGlzLmFjdGl2ZU1lbnUgPSAhdGhpcy5hY3RpdmVNZW51O1xuICAgIH1cblxuICAgIHpvbmVzKCk6IHN0cmluZ1tdXG4gICAge1xuICAgICAgICByZXR1cm4gTWV0YURhc2hib2FyZExheW91dENvbXBvbmVudC5ab25lc1RCO1xuICAgIH1cblxuICAgIHRvcExheW91dHMoKTogSXRlbVByb3BlcnRpZXNbXVxuICAgIHtcbiAgICAgICAgbGV0IHRvcHMgPSB0aGlzLmxheW91dHNCeVpvbmVzLmdldChVSU1ldGEuWm9uZVRvcCk7XG5cbiAgICAgICAgcmV0dXJuIGlzUHJlc2VudCh0b3BzKSA/IHRvcHMgOiBbXTtcbiAgICB9XG5cbiAgICBwb3J0bGV0V2lkdGgobmFtZTogc3RyaW5nKTogYW55XG4gICAge1xuICAgICAgICBsZXQgbENvbnRleHQ6IENvbnRleHQgPSB0aGlzLmNvbnRleHRNYXAuZ2V0KG5hbWUpO1xuICAgICAgICBsZXQgd2lkdGggPSBsQ29udGV4dC5wcm9wZXJ0eUZvcktleSgncG9ydGxldFdpZHRoJyk7XG4gICAgICAgIHJldHVybiBpc1ByZXNlbnQod2lkdGgpICYmIGlzUHJlc2VudChQb3J0bGV0U2l6ZXNbd2lkdGhdKSA/IFBvcnRsZXRTaXplc1t3aWR0aF0gOlxuICAgICAgICAgICAgJ3VpLW1kLTQnO1xuICAgIH1cblxuICAgIGJvdHRvbUxheW91dHMoKTogSXRlbVByb3BlcnRpZXNbXVxuICAgIHtcbiAgICAgICAgbGV0IGJvdHRvbSA9IHRoaXMubGF5b3V0c0J5Wm9uZXMuZ2V0KFVJTWV0YS5ab25lQm90dG9tKTtcblxuICAgICAgICByZXR1cm4gaXNQcmVzZW50KGJvdHRvbSkgPyBib3R0b20gOiBbXTtcbiAgICB9XG5cblxuICAgIHpUb2NMYXlvdXRzKCk6IEl0ZW1Qcm9wZXJ0aWVzW11cbiAgICB7XG4gICAgICAgIGxldCBib3R0b20gPSB0aGlzLmxheW91dHNCeVpvbmVzLmdldChNZXRhRGFzaGJvYXJkTGF5b3V0Q29tcG9uZW50LlpvbmVUb2MpO1xuICAgICAgICByZXR1cm4gaXNQcmVzZW50KGJvdHRvbSkgPyBib3R0b20gOiBbXTtcbiAgICB9XG5cblxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgU0FQIEFyaWJhXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogQmFzZWQgb24gb3JpZ2luYWwgd29yazogTWV0YVVJOiBDcmFpZyBGZWRlcmlnaGkgKDIwMDgpXG4gKlxuICovXG5pbXBvcnQge0FmdGVyVmlld0luaXQsIENvbXBvbmVudCwgUXVlcnlMaXN0LCBWaWV3Q2hpbGRyZW59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtFbnZpcm9ubWVudCwgaXNCbGFuaywgaXNQcmVzZW50fSBmcm9tICdAYXJpYmF1aS9jb3JlJztcbmltcG9ydCB7TWV0YUxheW91dH0gZnJvbSAnLi4vbWV0YS1sYXlvdXQnO1xuaW1wb3J0IHtcbiAgICBNZXRhQ29udGV4dENvbXBvbmVudCxcbiAgICBNZXRhVUlBY3Rpb25FdmVudFxufSBmcm9tICcuLi8uLi9jb3JlL21ldGEtY29udGV4dC9tZXRhLWNvbnRleHQuY29tcG9uZW50JztcbmltcG9ydCB7Q29udGV4dH0gZnJvbSAnLi4vLi4vY29yZS9jb250ZXh0JztcbmltcG9ydCB7U2VjdGlvbkNvbXBvbmVudH0gZnJvbSAnQGFyaWJhdWkvY29tcG9uZW50cyc7XG5pbXBvcnQge0l0ZW1Qcm9wZXJ0aWVzfSBmcm9tICcuLi8uLi9jb3JlL2l0ZW0tcHJvcGVydGllcyc7XG5cbi8qKlxuICogTWV0YVNlY3Rpb24gcmVuZGVycyBsaXN0IG9mIHNlY3Rpb25zIGRlZmluZWQgYnkgQHRyYWl0IGluc2lkZSBXaWRnZXRzUnVsZXMuIEl0IHVzZXMgbGF5b3V0cyB0b1xuICogc3RydWN0dXJlIHRoZSBsaXN0LlxuICpcbiAqIGBgYFxuICogIGxheW91dCB7XG4gKiAgICAgICBAdHJhaXQ9U2VjdGlvbnMgeyB2aXNpYmxlOnRydWU7IGNvbXBvbmVudDpNZXRhU2VjdGlvbnNDb21wb25lbnQgfVxuICogIH1cbiAqXG4gKiBgYGBcbiAqXG4gKiBhbmQgY2FuIGJlIHVzZWQgYXMgOlxuICpcbiAqIGBgYFxuICogICAgIGxheW91dD1SZnhEZXRhaWxMYXlvdXQjU2VjdGlvbnMge1xuICpcbiAqICAgICAgICAgQGxheW91dD1IZWFkZXIjRm9ybSB7XG4gKiAgICAgICAgICAgICB0cmFpdDpsYWJlbHNPblRvcDtcbiAqICAgICAgICAgICAgIHpvbmVQYXRoOkhlYWRlcjtcbiAqXG4gKiAgICAgICAgICAgICBiaW5kaW5nczoge1xuICogICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiRvYmplY3QuaGVhZGVyLmRlc2NyaXB0aW9uO1xuICogICAgICAgICAgICAgfVxuICogICAgICAgICB9XG4gKiAgICAgICAgIEBsYXlvdXQ9TGluZUl0ZW1zIHtcbiAqICAgICAgICAgICAgIGNvbXBvbmVudDpSZnhMaW5lSXRlbXNDb21wb25lbnQ7XG4gKiAgICAgICAgICAgICBiaW5kaW5nczoge1xuICogICAgICAgICAgICAgICAgIHJmeEV2ZW50OiRvYmplY3Q7XG4gKiAgICAgICAgICAgICB9XG4gKiAgICAgICAgIH1cbiAqICAgICAgICAgQGxheW91dD1QYXJ0aWNpcGFudHMge1xuICogICAgICAgICAgICAgY29tcG9uZW50OlJmeFBhcnRpY2lwYW50c0NvbXBvbmVudDtcbiAqICAgICAgICAgICAgIGJpbmRpbmdzOiB7XG4gKiAgICAgICAgICAgICAgICAgcmZ4RXZlbnQ6JG9iamVjdDtcbiAqICAgICAgICAgICAgIH1cbiAqICAgICAgICAgfVxuICogICAgIH1cbiAqXG4gKlxuICogICAgIGNsYXNzPVJmeEV2ZW50SGVhZGVyIHtcbiAqICAgICAgICAgek5vbmUgPT4gKjtcbiAqICAgICAgICAgSGVhZGVyLnpMZWZ0ID0+IHJlcXVlc3RlciA9PiByZWdpb24gPT4gbmVlZEJ5O1xuICogICAgIH1cbiAqIGBgYFxuICogSW4gYWJvdmUgZXhhbXBsZSB3ZSBoYXZlIGZpcnN0IHNlY3Rpb24gd2l0aCBGb3JtIHdoZXJlIFJmeEV2ZW50SGVhZGVyIHNlbmRzIGl0cyBmaWVsZHNcbiAqIGFuZCBzZXZlcmFsIG90aGVyIHNlY3Rpb25zIHdpdGggY3VzdG9tIGNvbXBvbmVudC5cbiAqXG4gKlxuICovXG5AQ29tcG9uZW50KHtcbiAgICB0ZW1wbGF0ZVVybDogJ21ldGEtc2VjdGlvbnMuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWydtZXRhLXNlY3Rpb25zLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgTWV0YVNlY3Rpb25zQ29tcG9uZW50IGV4dGVuZHMgTWV0YUxheW91dCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXRcbntcbiAgICAvKipcbiAgICAgKiBDb2xsZWN0IGxpc3Qgb2Ygc2VjdGlvbnMgdGhhdCBhcmUgcmVuZGVyZWQgc28gd2UgY2FuIHVzZSB0aGVtIGxhdGVyIG9uIHdoZW4gYnJvYWRjYXN0aW5nXG4gICAgICogYW4gZXZlbnQgdG8gYXBwbGljYXRpb24uIEluIHNvbWUgY2FzZSBqdXN0IGxpa2UgdGhpcyB5b3UgbmVlZCB0byBoYXZlIGEgcmVmZXJlbmNlXG4gICAgICogdG8gdGhlIGNvbXBvbmVudFxuICAgICAqL1xuICAgIEBWaWV3Q2hpbGRyZW4oU2VjdGlvbkNvbXBvbmVudClcbiAgICB2aWV3U2VjdGlvbnM6IFF1ZXJ5TGlzdDxTZWN0aW9uQ29tcG9uZW50PjtcblxuICAgIC8qKlxuICAgICAqIExpc3Qgb2Ygc2VjdGlvbiByZWFkIGZyb20gUXVlcnlMaXN0IGFmdGVyIHZpZXcgaXMgaW5pdGlhbGl6ZWRcbiAgICAgKi9cbiAgICBzZWN0aW9uczogU2VjdGlvbkNvbXBvbmVudFtdO1xuXG5cbiAgICBzZWN0aW9uT3BlcmF0aW9uczoge1tuYW1lOiBzdHJpbmddOiBzdHJpbmd9ID0ge307XG5cblxuICAgIHByaXZhdGUgb25Db21wbGV0ZVN1YnNjcmlwdGlvbnM6IHtbbmFtZTogc3RyaW5nXTogU2VjdGlvbkNvbXBvbmVudH0gPSB7fTtcblxuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIF9tZXRhQ29udGV4dDogTWV0YUNvbnRleHRDb21wb25lbnQsIHB1YmxpYyBlbnY6IEVudmlyb25tZW50KVxuICAgIHtcbiAgICAgICAgc3VwZXIoX21ldGFDb250ZXh0LCBlbnYpO1xuXG4gICAgfVxuXG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkXG4gICAge1xuICAgICAgICBzdXBlci5uZ09uSW5pdCgpO1xuXG4gICAgICAgIHRoaXMuYWxsTGF5b3V0cy5mb3JFYWNoKCh2YWx1ZTogSXRlbVByb3BlcnRpZXMpID0+XG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvbk9wZXJhdGlvbnNbdmFsdWUubmFtZV0gPSAndmlldyc7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG5nRG9DaGVjaygpOiB2b2lkXG4gICAge1xuICAgICAgICBzdXBlci5uZ0RvQ2hlY2soKTtcblxuXG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWRcbiAgICB7XG4gICAgICAgIHRoaXMuc2VjdGlvbnMgPSBbLi4udGhpcy52aWV3U2VjdGlvbnMudG9BcnJheSgpXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBY3Rpb24gaGFuZGxlciB0byBicm9hZGNhc3QgZXZlbnQgb3V0c2lkZSBzbyBpdCBjYW4gYmUgaGFuZGxlZCBieSB0aGUgYXBwbGljYXRpb25cbiAgICAgKlxuICAgICAqL1xuICAgIG9uQWN0aW9uKG5hbWU6IHN0cmluZywgc2VjdGlvbkluZGV4OiBudW1iZXIsIGNueE5hbWU6IHN0cmluZywgZXZlbnQ6IGFueSk6IHZvaWRcbiAgICB7XG4gICAgICAgIGxldCBzZWN0aW9uID0gdGhpcy5zZWN0aW9uc1tzZWN0aW9uSW5kZXhdO1xuICAgICAgICBpZiAodGhpcy5lbnYuaGFzVmFsdWUoJ3BhcmVudC1jbngnKSkge1xuICAgICAgICAgICAgbGV0IGNueDogTWV0YUNvbnRleHRDb21wb25lbnQgPSB0aGlzLmVudi5nZXRWYWx1ZSgncGFyZW50LWNueCcpO1xuXG4gICAgICAgICAgICBjbngub25BY3Rpb24uZW1pdChuZXcgTWV0YVVJQWN0aW9uRXZlbnQoc2VjdGlvbiwgbmFtZSwgY254TmFtZSxcbiAgICAgICAgICAgICAgICBldmVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5hbWUgPT09ICdvbkVkaXQnICYmIHNlY3Rpb24uZWRpdFN0YXRlICYmIHNlY3Rpb24uZWRpdE1vZGUgPT09ICdkZWZhdWx0Jykge1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uT3BlcmF0aW9uc1tjbnhOYW1lXSA9ICdlZGl0JztcblxuICAgICAgICAgICAgaWYgKGlzQmxhbmsodGhpcy5vbkNvbXBsZXRlU3Vic2NyaXB0aW9uc1tjbnhOYW1lXSkpIHtcbiAgICAgICAgICAgICAgICBzZWN0aW9uLm9uRWRpdGluZ0NvbXBsZXRlLnN1YnNjcmliZSgodmFsdWU6IGFueSkgPT5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWN0aW9uT3BlcmF0aW9uc1tjbnhOYW1lXSA9ICd2aWV3J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkNvbXBsZXRlU3Vic2NyaXB0aW9uc1tjbnhOYW1lXSA9IHNlY3Rpb247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBSZXRyaWV2ZXMgYSBwcm9wZXJ0eSBmcm9tIHRoZSBjdXJyZW50IGNvbnRleHRcbiAgICAgKlxuICAgICAqL1xuICAgIHNlY3Rpb25Qcm9wKHByb3BOYW1lOiBzdHJpbmcsIGNueE5hbWU6IHN0cmluZywgZGVmYXVsdFZhbDogYW55KTogYW55XG4gICAge1xuICAgICAgICBsZXQgbENvbnRleHQ6IENvbnRleHQgPSB0aGlzLmNvbnRleHRNYXAuZ2V0KGNueE5hbWUpO1xuICAgICAgICByZXR1cm4gKGlzUHJlc2VudChsQ29udGV4dCkgJiYgaXNQcmVzZW50KGxDb250ZXh0LnByb3BlcnR5Rm9yS2V5KHByb3BOYW1lKSkpID9cbiAgICAgICAgICAgIGxDb250ZXh0LnByb3BlcnR5Rm9yS2V5KHByb3BOYW1lKSA6IGRlZmF1bHRWYWw7XG4gICAgfVxuXG5cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkXG4gICAge1xuICAgICAgICBzdXBlci5uZ09uRGVzdHJveSgpO1xuXG4gICAgICAgIHRoaXMuYWxsTGF5b3V0cy5mb3JFYWNoKCh2YWx1ZTogSXRlbVByb3BlcnRpZXMpID0+XG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmIChpc1ByZXNlbnQodGhpcy5vbkNvbXBsZXRlU3Vic2NyaXB0aW9uc1t2YWx1ZS5uYW1lXSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ29tcGxldGVTdWJzY3JpcHRpb25zW3ZhbHVlLm5hbWVdLm9uRWRpdGluZ0NvbXBsZXRlLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IFNBUCBBcmliYVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqIEJhc2VkIG9uIG9yaWdpbmFsIHdvcms6IE1ldGFVSTogQ3JhaWcgRmVkZXJpZ2hpICgyMDA4KVxuICpcbiAqL1xuaW1wb3J0IHtDb21wb25lbnQsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RW52aXJvbm1lbnQsIGlzQmxhbmssIGlzU3RyaW5nTWFwfSBmcm9tICdAYXJpYmF1aS9jb3JlJztcbmltcG9ydCB7QmFzZUNvbXBvbmVudH0gZnJvbSAnQGFyaWJhdWkvY29tcG9uZW50cyc7XG5cblxuLyoqXG4gKiBKdXN0IGxpa2UgTWV0YUNvbnRlbnRQYWdlIHRoaXMgY29tcG9uZW50cyByZW5kZXJzIG1ldGEgY29udGV4dCBkZXRhaWxzIGJ1dCBlbWJlZGRlZCBhcyBzb21lXG4gKiBpbmxpbmUgY29tcG9uZW50LiBOb3QgYSBwYWdlIHdpdGggcGFnZSBsZXZlbCBidXR0b25zXG4gKlxuICpcbiAqIFRvZG86IFdlIGRvbnQgcmVhbGx5IG5lZWQgdGhpcyBjb21wb25lbnQgd2Ugd2UgaW4gdGhlIGZ1dHVyZSBleHRlbmRzIE1ldGFJbmNsdWRlQ29tcG9uZW50IHRvXG4gKiBzdXBwb3J0IGF3Y29udGVudEVsZW1lbnQ6XG4gKlxuICogYGBgXG4gKiAge1xuICogICAgICBjb21wb25lbnQ6TWV0YUNvbnRleHRDb21wb25lbnQ7XG4gKiAgICAgIGJpbmRpbmdzOiB7XG4gKiAgICAgICAgICBvYmplY3Q6JHZhbHVlO1xuICogICAgICAgICAgbGF5b3V0Okluc3BlY3Q7XG4gKiAgICAgICAgICBvcGVyYXRpb246dmlldztcbiAqICAgICAgICAgIGF3Y29udGVudEVsZW1lbnQ6TWV0YUluY2x1ZGVDb21wb25uZXREaXJlY3RpdmU7XG4gKiAgICAgIH1cbiAqXG4gKiAgfVxuICpcbiAqICBgYGBcbiAqXG4gKiAgVGhpcyB3b3VsZCBpbnN0YW50aWF0ZSByaWdodCBtZXRhIGNvbnRleHQganVzdCBsaWtlIHRoaXMgY2xhc3MuXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbS1jb250ZW50LWRldGFpbCcsXG4gICAgdGVtcGxhdGVVcmw6ICdtZXRhLW9iamVjdC1kZXRhaWwuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWydtZXRhLW9iamVjdC1kZXRhaWwuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBNZXRhT2JqZWN0RGV0YWlsQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudFxue1xuXG4gICAgLyoqXG4gICAgICogT2JqZWN0IGRldGFpbCB0byBiZSByZW5kZXJlZFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgb2JqZWN0OiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBGb3IgdGhlIGRldGFpbCB2aWV3IHdlIGFsd2F5cyB1c2UgcmVhZCBvbmx5IGNvbnRlbnRcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIG9wZXJhdGlvbjogc3RyaW5nID0gJ3ZpZXcnO1xuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBsYXlvdXRcbiAgICAgKlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgbGF5b3V0OiBzdHJpbmcgPSAnSW5zcGVjdCc7XG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXJlZCBvYmplY3QgZGV0YWlsIGNhbiBoYXZlIGEgc2VjdGlvbiBsYWJlbFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgbGFiZWw6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbnY6IEVudmlyb25tZW50KVxuICAgIHtcbiAgICAgICAgc3VwZXIoZW52KTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpXG4gICAge1xuICAgICAgICBpZiAoaXNCbGFuayh0aGlzLm9iamVjdCkgfHwgIWlzU3RyaW5nTWFwKHRoaXMub2JqZWN0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgcmVuZGVyIHByaW1pdGl2ZSB2YWx1ZXMgYXMgb2JqZWN0IGRldGFpbHMhJyk7XG4gICAgICAgIH1cblxuICAgIH1cblxuXG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBTQVAgQXJpYmFcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKlxuICovXG5pbXBvcnQge05nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Rm9ybXNNb2R1bGUsIFJlYWN0aXZlRm9ybXNNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7Q29tbW9uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtNZXRhSW5jbHVkZUNvbXBvbmVudERpcmVjdGl2ZX0gZnJvbSAnLi9tZXRhLWluY2x1ZGUuZGlyZWN0aXZlJztcbmltcG9ydCB7TWV0YUZvcm1Db21wb25lbnR9IGZyb20gJy4vbWV0YS1mb3JtL21ldGEtZm9ybS5jb21wb25lbnQnO1xuaW1wb3J0IHtNZXRhRm9ybVRhYmxlQ29tcG9uZW50fSBmcm9tICcuL21ldGEtZm9ybS9tZXRhLWZvcm0tdGFibGUvbWV0YS1mb3JtLXRhYmxlLmNvbXBvbmVudCc7XG5pbXBvcnQge01ldGFGb3JtUm93Q29tcG9uZW50fSBmcm9tICcuL21ldGEtZm9ybS9tZXRhLWZvcm0tcm93L21ldGEtZm9ybS1yb3cuY29tcG9uZW50JztcbmltcG9ydCB7Tm9NZXRhQ29tcG9uZW50fSBmcm9tICcuL25vLW1ldGEvbm8tbWV0YS5jb21wb25lbnQnO1xuaW1wb3J0IHtNZXRhQ29udGVudFBhZ2VDb21wb25lbnR9IGZyb20gJy4vbWV0YS1jb250ZW50LXBhZ2UvbWV0YS1jb250ZW50LXBhZ2UuY29tcG9uZW50JztcbmltcG9ydCB7TWV0YUVsZW1lbnRMaXN0Q29tcG9uZW50fSBmcm9tICcuL21ldGEtZWxlbWVudC1saXN0L21ldGEtZWxlbWVudC1saXN0LmNvbXBvbmVudCc7XG5pbXBvcnQge01ldGFBY3Rpb25MaXN0Q29tcG9uZW50fSBmcm9tICcuL21ldGEtYWN0aW9uLWxpc3QvbWV0YS1hY3Rpb24tbGlzdC5jb21wb25lbnQnO1xuaW1wb3J0IHtNZXRhSG9tZVBhZ2VDb21wb25lbnR9IGZyb20gJy4vbWV0YS1ob21lLXBhZ2UvbWV0YS1ob21lLnBhZ2UuY29tcG9uZW50JztcbmltcG9ydCB7TWV0YURhc2hib2FyZExheW91dENvbXBvbmVudH0gZnJvbSAnLi9tZXRhLWRhc2hib2FyZC9tZXRhZGFzaGJvYXJkLWxheW91dC5jb21wb25lbnQnO1xuaW1wb3J0IHtBV01ldGFDb3JlTW9kdWxlfSBmcm9tICcuLi9jb3JlL21ldGEtY29yZS5tb2R1bGUnO1xuaW1wb3J0IHtBcmliYUNvbXBvbmVudHNNb2R1bGV9IGZyb20gJ0BhcmliYXVpL2NvbXBvbmVudHMnO1xuaW1wb3J0IHtNZXRhU2VjdGlvbnNDb21wb25lbnR9IGZyb20gJy4vbWV0YS1zZWN0aW9uL21ldGEtc2VjdGlvbnMuY29tcG9uZW50JztcbmltcG9ydCB7QXJpYmFDb3JlTW9kdWxlfSBmcm9tICdAYXJpYmF1aS9jb3JlJztcbmltcG9ydCB7TWV0YU9iamVjdERldGFpbENvbXBvbmVudH0gZnJvbSAnLi9tZXRhLW9iamVjdC1kZXRhaWwvbWV0YS1vYmplY3QtZGV0YWlsLmNvbXBvbmVudCc7XG5cblxuQE5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IFtcbiAgICAgICAgTWV0YUluY2x1ZGVDb21wb25lbnREaXJlY3RpdmUsXG4gICAgICAgIE1ldGFGb3JtQ29tcG9uZW50LFxuICAgICAgICBNZXRhRm9ybVRhYmxlQ29tcG9uZW50LFxuICAgICAgICBNZXRhRm9ybVJvd0NvbXBvbmVudCxcbiAgICAgICAgTm9NZXRhQ29tcG9uZW50LFxuICAgICAgICBNZXRhQ29udGVudFBhZ2VDb21wb25lbnQsXG4gICAgICAgIE1ldGFFbGVtZW50TGlzdENvbXBvbmVudCxcbiAgICAgICAgTWV0YUFjdGlvbkxpc3RDb21wb25lbnQsXG4gICAgICAgIE1ldGFIb21lUGFnZUNvbXBvbmVudCxcbiAgICAgICAgTWV0YURhc2hib2FyZExheW91dENvbXBvbmVudCxcbiAgICAgICAgTWV0YVNlY3Rpb25zQ29tcG9uZW50LFxuICAgICAgICBNZXRhT2JqZWN0RGV0YWlsQ29tcG9uZW50LFxuICAgIF0sXG4gICAgaW1wb3J0czogW1xuICAgICAgICBDb21tb25Nb2R1bGUsXG4gICAgICAgIEZvcm1zTW9kdWxlLFxuICAgICAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxuICAgICAgICBBV01ldGFDb3JlTW9kdWxlLFxuICAgICAgICBBcmliYUNvcmVNb2R1bGUsXG4gICAgICAgIEFyaWJhQ29tcG9uZW50c01vZHVsZVxuICAgIF0sXG4gICAgZW50cnlDb21wb25lbnRzOiBbXG4gICAgICAgIE1ldGFGb3JtQ29tcG9uZW50LFxuICAgICAgICBNZXRhRm9ybVRhYmxlQ29tcG9uZW50LFxuICAgICAgICBNZXRhRm9ybVJvd0NvbXBvbmVudCxcbiAgICAgICAgTm9NZXRhQ29tcG9uZW50LFxuICAgICAgICBNZXRhQ29udGVudFBhZ2VDb21wb25lbnQsXG4gICAgICAgIE1ldGFDb250ZW50UGFnZUNvbXBvbmVudCxcbiAgICAgICAgTWV0YUVsZW1lbnRMaXN0Q29tcG9uZW50LFxuICAgICAgICBNZXRhQWN0aW9uTGlzdENvbXBvbmVudCxcbiAgICAgICAgTWV0YUhvbWVQYWdlQ29tcG9uZW50LFxuICAgICAgICBNZXRhRGFzaGJvYXJkTGF5b3V0Q29tcG9uZW50LFxuICAgICAgICBNZXRhU2VjdGlvbnNDb21wb25lbnQsXG4gICAgICAgIE1ldGFPYmplY3REZXRhaWxDb21wb25lbnRcbiAgICBdLFxuICAgIGV4cG9ydHM6IFtcbiAgICAgICAgTWV0YUluY2x1ZGVDb21wb25lbnREaXJlY3RpdmUsXG4gICAgICAgIE1ldGFGb3JtQ29tcG9uZW50LFxuICAgICAgICBNZXRhRm9ybVRhYmxlQ29tcG9uZW50LFxuICAgICAgICBNZXRhRm9ybVJvd0NvbXBvbmVudCxcbiAgICAgICAgTm9NZXRhQ29tcG9uZW50LFxuICAgICAgICBNZXRhQ29udGVudFBhZ2VDb21wb25lbnQsXG4gICAgICAgIE1ldGFDb250ZW50UGFnZUNvbXBvbmVudCxcbiAgICAgICAgTWV0YUVsZW1lbnRMaXN0Q29tcG9uZW50LFxuICAgICAgICBNZXRhQWN0aW9uTGlzdENvbXBvbmVudCxcbiAgICAgICAgTWV0YUhvbWVQYWdlQ29tcG9uZW50LFxuICAgICAgICBNZXRhRGFzaGJvYXJkTGF5b3V0Q29tcG9uZW50LFxuICAgICAgICBNZXRhU2VjdGlvbnNDb21wb25lbnQsXG4gICAgICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgICAgIEZvcm1zTW9kdWxlLFxuICAgICAgICBBcmliYUNvcmVNb2R1bGUsXG4gICAgICAgIEFyaWJhQ29tcG9uZW50c01vZHVsZSxcbiAgICAgICAgTWV0YU9iamVjdERldGFpbENvbXBvbmVudFxuICAgIF0sXG4gICAgcHJvdmlkZXJzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBBV01ldGFMYXlvdXRNb2R1bGVcbntcbn1cblxuXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBTQVAgQXJpYmFcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKlxuICovXG5pbXBvcnQge05nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Um91dGVyTW9kdWxlLCBSb3V0ZXN9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQge01ldGFDb250ZW50UGFnZUNvbXBvbmVudH0gZnJvbSAnLi9sYXlvdXQvbWV0YS1jb250ZW50LXBhZ2UvbWV0YS1jb250ZW50LXBhZ2UuY29tcG9uZW50JztcblxuY29uc3Qgcm91dGVzOiBSb3V0ZXMgPSBbXG4gICAge3BhdGg6ICdjb250ZXh0JywgY29tcG9uZW50OiBNZXRhQ29udGVudFBhZ2VDb21wb25lbnR9XG5dO1xuXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtcbiAgICAgICAgUm91dGVyTW9kdWxlLmZvckNoaWxkKHJvdXRlcylcbiAgICBdLFxuICAgIGV4cG9ydHM6IFtSb3V0ZXJNb2R1bGVdLFxuICAgIHByb3ZpZGVyczogW11cbn0pXG5leHBvcnQgY2xhc3MgQXJpYmFNZXRhVUlSb3V0aW5nTW9kdWxlXG57XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBTQVAgQXJpYmFcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKlxuICovXG5pbXBvcnQge0FQUF9JTklUSUFMSVpFUiwgSW5qZWN0b3IsIE5nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q29tbW9uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtVSU1ldGF9IGZyb20gJy4vY29yZS91aW1ldGEnO1xuaW1wb3J0IHtSdWxlTG9hZGVyU2VydmljZX0gZnJvbSAnLi9jb3JlL3J1bGUtbG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0ICogYXMgc3lzTWV0YUNvbXBvbmVudHMgZnJvbSAnLi9lbnRyeS1jb21wb25lbnRzJztcbmltcG9ydCB7QXJpYmFNZXRhVUlSb3V0aW5nTW9kdWxlfSBmcm9tICcuL2FyaWJhLW1ldGF1aS1yb3V0aW5nLm1vZHVsZSc7XG5pbXBvcnQge0FXTWV0YUNvcmVNb2R1bGV9IGZyb20gJy4vY29yZS9tZXRhLWNvcmUubW9kdWxlJztcbmltcG9ydCB7QVdNZXRhTGF5b3V0TW9kdWxlfSBmcm9tICcuL2xheW91dC9tZXRhLWxheW91dC5tb2R1bGUnO1xuXG5cbi8qKlxuICogVGhpcyBtb2R1bGUgY29udGFpbnMgZXZlcnl0aGluZyBuZWVkcyB0byBkeW5hbWljYWxseSBnZW5lcmF0ZWQgVUkgYmFzZWQgb24gbWV0YVJ1bGVzXG4gKiBTaW5jZSB3ZSBhcmUgdXNpbmcgcHJpbWVORywgY2hlY2sgQXJpYmFDb21wb25lbnQgaWYgaXRzIGFscmVhZHkgaW1wb3J0ZWQgc28geW91IGRvbnQgaGF2ZVxuICogaW1wb3J0IGl0IGFnYWluLlxuICpcbiAqL1xuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbXG4gICAgICAgIENvbW1vbk1vZHVsZSxcbiAgICAgICAgQXJpYmFNZXRhVUlSb3V0aW5nTW9kdWxlLFxuICAgICAgICBBV01ldGFDb3JlTW9kdWxlLFxuICAgICAgICBBV01ldGFMYXlvdXRNb2R1bGVcbiAgICBdLFxuICAgIGV4cG9ydHM6IFtcbiAgICAgICAgQVdNZXRhQ29yZU1vZHVsZSxcbiAgICAgICAgQVdNZXRhTGF5b3V0TW9kdWxlXG4gICAgXSxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgJ3Byb3ZpZGUnOiBBUFBfSU5JVElBTElaRVIsXG4gICAgICAgICAgICAndXNlRmFjdG9yeSc6IGluaXRNZXRhVUksXG4gICAgICAgICAgICAnZGVwcyc6IFtJbmplY3Rvcl0sXG4gICAgICAgICAgICAnbXVsdGknOiB0cnVlLFxuICAgICAgICB9LFxuICAgIF0sXG59KVxuZXhwb3J0IGNsYXNzIEFyaWJhTWV0YVVJTW9kdWxlXG57XG5cblxuICAgIGNvbnN0cnVjdG9yKClcbiAgICB7XG4gICAgfVxufVxuXG4vKipcbiAqXG4gKiBFbnRyeSBmYWN0b3J5IG1ldGhvZCB0aGF0IGluaXRpYWxpemUgVGhlIE1FVEFVSSBsYXllciBhbmQgaGVyZSB3ZSBsb2FkIFdpZGdldHNSdWxlcy5vc3MgYXMgd2VsbFxuICogYXMgUGVyc2lzdGVuY2UgUnVsZXMuXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdE1ldGFVSShpbmplY3RvcjogSW5qZWN0b3IpXG57XG4gICAgbGV0IGluaXRGY2UgPSBmdW5jdGlvbiBpbml0KGluajogSW5qZWN0b3IpXG4gICAge1xuICAgICAgICBsZXQgcHJvbWlzZTogUHJvbWlzZTxhbnk+ID0gbmV3IFByb21pc2UoKHJlc29sdmU6IGFueSkgPT5cbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IG1ldGFVSSA9IFVJTWV0YS5nZXRJbnN0YW5jZSgpO1xuXG4gICAgICAgICAgICAvLyBhY2Nlc3Mgc2VydmljZXMgbGF6aWx5IHdoZW4gdGhleSBhcmUgbmVlZGVkIGFuZCBpbml0aWFsaXplZCBhcyB3b3JrYXJvdW5kIGZvclxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMTY4NTNcbiAgICAgICAgICAgIG1ldGFVSS5pbmplY3RvciA9IGluajtcblxuICAgICAgICAgICAgbWV0YVVJLnJlZ2lzdGVyTG9hZGVyKG5ldyBSdWxlTG9hZGVyU2VydmljZSgpKTtcbiAgICAgICAgICAgIG1ldGFVSS5sb2FkRGVmYXVsdFJ1bGVGaWxlcyhzeXNNZXRhQ29tcG9uZW50cyk7XG5cbiAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9O1xuICAgIHJldHVybiBpbml0RmNlLmJpbmQoaW5pdEZjZSwgaW5qZWN0b3IpO1xufVxuXG4iXSwibmFtZXMiOlsiaXNCbGFuayIsImlzUHJlc2VudCIsImFzc2VydCIsImNyYzMyIiwiU3RyaW5nSm9pbmVyIiwidHNsaWJfMS5fX2V4dGVuZHMiLCJzaGlmdExlZnQiLCJpc0FycmF5IiwidHNsaWJfMS5fX3ZhbHVlcyIsImhhc2hDb2RlIiwicHJpbnQiLCJ1bmltcGxlbWVudGVkIiwiRmllbGRQYXRoIiwiaXNGdW5jdGlvbiIsImV2YWxFeHByZXNzaW9uV2l0aENudHgiLCJpc1N0cmluZyIsImlzQm9vbGVhbiIsIkJvb2xlYW5XcmFwcGVyIiwiaXNOdW1iZXIiLCJvYmplY3RUb05hbWUiLCJMaXN0V3JhcHBlciIsIk1hcFdyYXBwZXIiLCJjbGFzc05hbWUiLCJpc1N0cmluZ01hcCIsIkV4dGVuc2libGUiLCJDb2xsZWN0aW9ucy5EaWN0aW9uYXJ5IiwiQ29sbGVjdGlvbnMudXRpbCIsImVxdWFscyIsImlzRW50aXR5IiwiaXNWYWx1ZSIsIlN0cmluZ1dyYXBwZXIiLCJzaGlmdFJpZ2h0IiwiZGVjYW1lbGl6ZSIsIlJvdXRpbmdTZXJ2aWNlIiwiRW52aXJvbm1lbnQiLCJBcHBDb25maWciLCJDb21wb25lbnRSZWdpc3RyeSIsIndhcm4iLCJFdmVudEVtaXR0ZXIiLCJDb21wb25lbnQiLCJDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSIsIkJhc2VGb3JtQ29tcG9uZW50IiwiZm9yd2FyZFJlZiIsIkVsZW1lbnRSZWYiLCJTa2lwU2VsZiIsIk9wdGlvbmFsIiwiSW5qZWN0IiwiSW5wdXQiLCJPdXRwdXQiLCJOZ01vZHVsZSIsIkNvbW1vbk1vZHVsZSIsIkZvcm1zTW9kdWxlIiwiUmVhY3RpdmVGb3Jtc01vZHVsZSIsIkluamVjdGFibGUiLCJJbmNsdWRlQ29tcG9uZW50RGlyZWN0aXZlIiwibm9uUHJpdmF0ZVByZWZpeCIsIkRpcmVjdGl2ZSIsIlZpZXdDb250YWluZXJSZWYiLCJDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIiLCJDaGFuZ2VEZXRlY3RvclJlZiIsIkRvbVV0aWxzU2VydmljZSIsIkhvc3QiLCJWaWV3Q2hpbGQiLCJWYWxpZGF0b3JzIiwiRm9ybVJvd0NvbXBvbmVudCIsIkFjdGl2YXRlZFJvdXRlIiwiRG9tU2FuaXRpemVyIiwiQmFzZUNvbXBvbmVudCIsIlZpZXdDaGlsZHJlbiIsIlNlY3Rpb25Db21wb25lbnQiLCJBcmliYUNvcmVNb2R1bGUiLCJBcmliYUNvbXBvbmVudHNNb2R1bGUiLCJSb3V0ZXJNb2R1bGUiLCJBUFBfSU5JVElBTElaRVIiLCJJbmplY3RvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0lBQUE7Ozs7Ozs7Ozs7Ozs7O0lBY0E7SUFFQSxJQUFJLGFBQWEsR0FBRyxVQUFTLENBQUMsRUFBRSxDQUFDO1FBQzdCLGFBQWEsR0FBRyxNQUFNLENBQUMsY0FBYzthQUNoQyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsWUFBWSxLQUFLLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUM1RSxVQUFVLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDO2dCQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMs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