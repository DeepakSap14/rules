/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { isArray, isBlank, isPresent, isStringMap, ListWrapper, MapWrapper } from '@aribaui/core';
import { LocalizedString } from './uimeta';
import { Rule, Selector } from './rule';
import { Meta, OverrideValue } from './meta';
import { ContextFieldPath, Expr, StaticallyResolvableWrapper, StaticDynamicWrapper } from './property-value';
/** @typedef {?} */
var DynamicValueType;
/**
 * @record
 */
export function RuleLoader() { }
/** @type {?} */
RuleLoader.prototype.loadRules;
export class RuleLoaderService {
    constructor() {
    }
    /**
     * @return {?}
     */
    get uiMeta() {
        return this._uiMeta;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set uiMeta(value) {
        this._uiMeta = value;
    }
    /**
     * @param {?} meta
     * @param {?} source
     * @param {?} module
     * @param {?} onRule
     * @return {?}
     */
    loadRules(meta, source, module, onRule) {
        this._uiMeta = /** @type {?} */ (meta);
        source.forEach((val, index) => {
            /** @type {?} */
            let rule = this.readRule(val, module);
            if (isPresent(onRule)) {
                onRule(rule);
            }
        });
    }
    /**
     * @param {?} source
     * @param {?} module
     * @return {?}
     */
    loadRulesWithReturn(source, module) {
        /** @type {?} */
        let rules = new Array();
        source.forEach((val, index) => {
            /** @type {?} */
            let rule = this.readRule(val, module);
            rules.push(rule);
        });
        return rules;
    }
    /**
     * @param {?} jsonRule
     * @param {?} module
     * @return {?}
     */
    readRule(jsonRule, module) {
        /** @type {?} */
        let selectors = new Array();
        for (let item of jsonRule._selectors) {
            if (isPresent(item._value) && item._value.constructor === Object && Object.keys(item._value).length === 0) {
                item._value = Meta.NullMarker;
            }
            /** @type {?} */
            let selector = new Selector(item._key, item._value, item._isDecl);
            selectors.push(selector);
        }
        /** @type {?} */
        let properties = MapWrapper.createFromStringMapWithResolve(jsonRule._properties, (k, v) => {
            if (isStringMap(v) &&
                isPresent(v['t'])) {
                return this.resoveValue(v['t'], v, module);
            }
            else if (isStringMap(v) && !isArray(v)) {
                // we have some
                // other sub level
                // of object
                // literal - lets
                // convert this
                // into Map.
                return MapWrapper.createFromStringMapWithResolve(v, (key, val) => this.resoveValue(val['t'], val, module));
            }
            else if (isArray(v)) {
                // let convert with
                // typings as well
                return ListWrapper.clone(v);
            }
            return v;
        });
        /** @type {?} */
        let props = properties.size === 0 ? undefined : properties;
        /** @type {?} */
        let rule = new Rule(selectors, props, jsonRule._rank);
        return rule;
    }
    /**
     * @param {?} type
     * @param {?} value
     * @param {?} module
     * @return {?}
     */
    resoveValue(type, value, module) {
        if (isBlank(value)) {
            return null;
        }
        if (type === 'Expr') {
            return new Expr(value['v']);
        }
        else if (type === 'SDW') {
            /** @type {?} */
            let expr = new Expr(value['v']);
            return new StaticDynamicWrapper(new StaticallyResolvableWrapper(expr));
        }
        else if (type === 'CFP') {
            return new ContextFieldPath(value['v']);
        }
        else if (type === 'OV') {
            return new OverrideValue(value['v']);
        }
        else if (type === 'i18n' && value['v']['key']) {
            /** @type {?} */
            let locKey = value['v']['key'];
            return isPresent(this._uiMeta) ? this._uiMeta.createLocalizedString(locKey, value['v']['defVal'])
                :
                    new LocalizedString(null, module, locKey, value['v']['defVal']);
        }
        return value;
    }
}
RuleLoaderService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RuleLoaderService.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    RuleLoaderService.prototype._uiMeta;
}

//# sourceMappingURL=data:application/json;base64,