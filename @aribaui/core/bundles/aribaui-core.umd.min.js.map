{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@aribaui/core/utils/lang.ts","ng://@aribaui/core/utils/collection.ts","ng://@aribaui/core/config/app-config.ts","ng://@aribaui/core/config/environment.ts","ng://@aribaui/core/domain/domain-model.ts","ng://@aribaui/core/domain/url/segment.ts","ng://@aribaui/core/domain/url/builder.ts","ng://@aribaui/core/domain/url/url-group.ts","ng://@aribaui/core/domain/resource.service.ts","ng://@aribaui/core/not-found/not-found.component.ts","ng://@aribaui/core/routing/routing.service.ts","ng://@aribaui/core/messaging/notifications.service.ts","ng://@aribaui/core/global-error-handler.ts","ng://@aribaui/core/ariba-core-routing.module.ts","ng://@aribaui/core/http/http-mock-interceptor.ts","ng://@aribaui/core/ariba.core.module.ts","ng://@aribaui/core/utils/field-path.ts","ng://@aribaui/core/ariba-application.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","__read","n","r","e","ar","push","error","__spread","arguments","concat","bigInt","bigIntImported","_global","window","readGlobalParam","varName","unimplemented","Error","isPresent","obj","undefined","isBlank","isBoolean","isString","isFunction","isType","isStringMap","STRING_MAP_PROTO","getPrototypeOf","isArray","isDate","Date","isNaN","valueOf","now","isWindow","isRegExp","toString","className","clazz","classN","substr","indexOf","StringWrapper","fromCharCode","code","String","charCodeAt","s","index","split","regExp","equals","s2","stripLeft","charVal","pos","substring","stripRight","replace","from","replaceAll","slice","to","contains","compare","a","endsWidth","subject","searchString","position","endsWith","sstring","subjectString","isFinite","Math","floor","lastIndex","startsWidth","StringJoiner","parts","add","part","last","join","NumberWrapper","toFixed","fractionDigits","equal","parseIntAutoRadix","text","result","parseInt","radix","test","parseFloat","isNumeric","isInteger","Number","FunctionWrapper","apply","fn","posArgs","bind","scope","isJsObject","assert","condition","msg","Json","parse","JSON","stringify","data","DateWrapper","year","month","day","hour","minutes","seconds","milliseconds","fromISOString","str","fromMillis","ms","toMillis","date","getTime","toJson","toJSON","BooleanWrapper","boleanValue","isFalse","isTrue","_symbolIterator","getSymbolIterator","keys","getOwnPropertyNames","Map","key","ReservedKeyword","objectToName","target","name","o1","o2","keySet","t1","charAt","set","keys_1","tslib_1.__values","keys_1_1","has","nonPrivatePrefix","input","Extensible","extendedFields","_clearValues","k","keyIterator","forEach","v","MapWrapper","createEmpty","clone","map","createFromStringMap","stringMap","createFromAnyMap","createFromStringMapWithResolve","resolve","updatedValue","toStringMap","toAnyMap","inner","sj","clearValues","iterable","mergeMapIntoMapWithObject","dest","source","overwriteMismatched","sourceValue","get","destValue","ListWrapper","copyValue","allElementsAreStrings","convertListToMap","sourceVect","addElementIfAbsent","sourceHash","groupBy","items","groupByKey","reduce","groupResult","currentValue","gKey","grouped","StringMapWrapper","isEmpty","prop","delete","callback","_a","_b","merge","m1","m2","_d","_e","k1","k2","createFixedSize","size","createGrowableSize","array","forEachWithIndex","first","startIndex","list","el","containsAll","els","needle","containsComplex","item","findIndex","findIndexComplex","removeIfExist","removeAt","reversed","reverse","insert","splice","res","removeAll","remove","removeLast","clear","fill","start","end","l","sort","compareFn","sortByExample","toSort","pattern","out","l_1","l_1_1","maximum","predicate","solution","maxValue","Infinity","candidate","candidateValue","flatten","_flattenArray","target_1","target_1_1","addAll","element","Collections.arrays","item1","item2","addElementsIfAbsent","elements","elements_1","elements_1_1","elem","InjectionToken","SuportedLanguages","AppConfig","injector","environment","values","init","config","_this","initDefaults","setValue","AssetFolder","location","pathname","search","inTest","InTestUrl","parseGlobalParams","globalConfig","AppConfigGlobalVar","toLowerCase","InTest","getNumber","val","getBoolean","IsDevMode","isDevMode","UserAgent","navigator","userAgent","Direction","document","documentElement","dir","NavPlatform","platform","ContentType","ConnectionRetryInterval","ConnectionUseMockServer","ConnectionMockServerPath","i18nEnabled","DomainUniqueName","DomainQuery","ConnectionAbortTimeout","Lang","language","SupportedLangs","getRestApiContextUrl","entity","isNested","withEntity","RestApiContextUrl","url","getRestApiContext","getRestApiHost","RestApiHostUrl","isProductionMode","getBaseUrl","isMocked","cnx","host","initializeI18n","Promise","makeConfig","env","conf","Environment","EventEmitter","_locale","envVariables","stacksVariables","getValue","deleteValue","hasValue","allVariables","defineProperty","onLocaleChange","emit","peak","stack","pop","Injectable","isEntity","identity","isValue","Host","Context","Action","Resource","Identifier","OfParent","Load","Query","Save","Do","UrlSegment","type","params","rank","assertSegment","prevSegment","assertMsg","HostSegment","_super","RestSegmentType","tslib_1.__extends","ContextSegment","ActionSegment","action","actionType","ResourceSegment","resourceName","IdentifierSegment","OfParentSegment","DefaultRestBuilder","urlGroup","assembleUrl","validate","sortedSegments","adjustRank","segments","resSegment","addSlash","RestAction","shouldAdd","lookup","withIdCount","count","ofIndex","of","segment","RestUrlGroup","_segments","updateSegment","segmentType","byResource","ss","find","hasMatch","filter","http","appConfig","load","save","do","query","where","resource","withId","identifier","withData","urlSegment","asEntity","subscriber","options","observe","observable","post","put","pipe","convertToComposite","subscribe","asHttpResponse","hasProgress","reportProgress","_url","_urlBuilder","_urlGroup","isComposite","sgm","deserialize","payload","httpRes","myResp","body","serialize","json","instances","instance","Boolean","types","getTypes","HttpClient","NotFoundComponent","ngOnInit","Component","args","template","RoutingService","router","Subject","events","event","subscribeToRoutingEvents","NavigationEnd","stateCacheHistory","stateCache","routingState","NavigationStart","itemBeforeRoute","currentStateFrom","currentStateTo","goBack","numOfSteps","steps","navigateUrl","popState","navigateByUrl","navigate","commands","state","extras","navigateWithRoute","route","path","bindStateCache","listener","asObservable","stateItem","operation","snapshot","pathForPage","pageName","pathName","routerState","routeForPage","activatedPath","nextRoute","normalizedPath","currentRoute","routePath","children","componentName","component","Router","Notifications","topic","toAll","AllTopics","content","publish","message","GlobalErrorHandler","notifications","handleError","ErrorHandler","routes","NgModule","imports","RouterModule","forChild","exports","providers","HttpMockInterceptor","intercept","req","mockedResp","makeRes","status","observableOf","errror","HttpErrorResponse","statusText","urlWithParams","observableThrowError","handle","loadRoutes","ConnectionMockServerRoutes","routes_1","routes_1_1","routeName","makeReq","mocked","requestForRoutes","routesByEntity","xmlHttpReq","XMLHttpRequest","open","method","headers","all","getAll","setRequestHeader","send","response","responseText","assetFolder","HttpRequest","responseType","responseOp","doHandleRequest","HttpResponse","matchedRoute","responseCode","MockInterceptorHandler","interceptor","UserConfig","AribaCoreModule","parentModule","forRoot","ngModule","Title","Meta","provide","useValue","useFactory","deps","Injector","HttpHandler","makeHttpClientHandler","HttpBackend","Optional","Inject","HTTP_INTERCEPTORS","useClass","CommonModule","HttpClientModule","AribaCoreRoutingModule","declarations","bootstrap","decorators","SkipSelf","ngBackend","mockInterceptor","interceptors","reduceRight","FieldPath","_path","_fieldPaths","objectPathInstance","((objectPath))['create']","includeInheritedProps","setFieldValue","field","getFieldValue","objectToBeUpdated","mapTarget","nestedMap","AribaApplication","metaTags","MetaTags","title","initialize","AppTitle","setTitle","isListLikeIterable$1","areIterablesEqual","comparator","iterator1","iterator2","iterateListLike","findLast","arr","getTypeNameForDebugging","isNumber","isStrictStringMap","isPromise","then","noop","token","overriddenName","newLineIndex","applyMixins","derivedCtor","baseCtors","baseCtor","looseIdentical","getMapKey","normalizeBlank","normalizeBool","print","console","log","warn","checksum","chk","len","crc32","crc","anInt","evalExpression","expr","lets","fnBody","fnArgNames","fnArgValues","argName","Function","evalExpressionWithCntx","thisContext","isPrimitive","hasConstructor","escape","encodeURI","escapeRegExp","hashCode","hash","shiftLeft","shiftRight","decamelize","string","separator","initialCaps","lastUCIndex","allCaps","splitOnUC","buf","inWord","c","toUpperCase","ch","hasGetter","uuid","dt","random","objectValues"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n *\n * @original-license\n *\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n *\n *\n *  Credit: Derived and extended from https://github.com/angular/angular in order to have set of\n *  reusable globals. Since its not exported API need to have a copy under core.\n */\nimport * as bigIntImported from 'big-integer';\n\nconst bigInt = bigIntImported;\n\n/**\n *  Set of reusable globals. This is taken from the Angular 2 since its not exported API. And there\n *  is a need for such common functions and wrappers\n *\n */\n\nconst __window = typeof window !== 'undefined' && window;\nconst _global: { [name: string]: any } = __window;\n\n\nexport function readGlobalParam(varName: any): { [name: string]: any }\n{\n    return _global[varName];\n}\n\nexport function readGlobalType(varName: any): any\n{\n    return _global[varName];\n}\n\n\nexport function getTypeNameForDebugging(type: any): string\n{\n    if (type['name']) {\n        return type['name'];\n    }\n    return typeof type;\n}\n\nexport function unimplemented(): any\n{\n    throw new Error('unimplemented');\n}\n\nexport function isPresent(obj: any): boolean\n{\n    return obj !== undefined && obj !== null;\n}\n\nexport function isBlank(obj: any): boolean\n{\n    return obj === undefined || obj === null;\n}\n\nexport function isBoolean(obj: any): boolean\n{\n    return typeof obj === 'boolean';\n}\n\nexport function isNumber(obj: any): boolean\n{\n    return typeof obj === 'number';\n}\n\nexport function isString(obj: any): obj is string\n{\n    return typeof obj === 'string';\n}\n\nexport function isFunction(obj: any): boolean\n{\n    return typeof obj === 'function';\n}\n\nexport function isType(obj: any): boolean\n{\n    return isFunction(obj);\n}\n\nexport function isStringMap(obj: any): obj is Object\n{\n    return typeof obj === 'object' && obj !== null;\n}\n\nconst STRING_MAP_PROTO = Object.getPrototypeOf({});\n\nexport function isStrictStringMap(obj: any): boolean\n{\n    return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;\n}\n\nexport function isPromise(obj: any): boolean\n{\n    // allow any Promise/A+ compliant thenable.\n    // It's up to the caller to ensure that obj.then conforms to the spec\n    return isPresent(obj) && isFunction(obj.then);\n}\n\nexport function isArray(obj: any): boolean\n{\n    return Array.isArray(obj);\n}\n\nexport function isDate(obj: any): obj is Date\n{\n    return (obj instanceof Date && !isNaN(obj.valueOf())) ||\n        (isPresent(obj) && isFunction(obj.now));\n}\n\n\nexport function isListLikeIterable(obj: any): boolean\n{\n    if (!isJsObject(obj)) {\n        return false;\n    }\n    return Array.isArray(obj) ||\n        (!(obj instanceof Map) &&      // JS Map are iterables but return entries as [k, v]\n            getSymbolIterator() in obj);  // JS Iterable have a Symbol.iterator prop\n}\n\n\n/**\n * Checks if `obj` is a window object.\n *\n */\nexport function isWindow(obj: any): boolean\n{\n    return obj && obj.window === obj;\n}\n\n\n/**\n * Determines if a value is a regular expression object.\n *\n */\nexport function isRegExp(value: any): boolean\n{\n    return Object.prototype.toString.call(value) === '[object RegExp]';\n}\n\n\nexport function noop()\n{\n}\n\n\nexport function shiftLeft(a: number, b: number): number\n{\n    return bigInt(a).shiftLeft(b).valueOf();\n}\n\n\nexport function shiftRight(a: number, b: number): number\n{\n    return bigInt(a).shiftRight(b).valueOf();\n}\n\n\nexport function stringify(token: any): string\n{\n    if (typeof token === 'string') {\n        return token;\n    }\n\n    if (token === undefined || token === null) {\n        return '' + token;\n    }\n\n    if (token.overriddenName) {\n        return token.overriddenName;\n    }\n    if (token.name) {\n        return token.name;\n    }\n\n    let res = token.toString();\n    let newLineIndex = res.indexOf('\\n');\n    return (newLineIndex === -1) ? res : res.substring(0, newLineIndex);\n}\n\n\nexport function className(clazz: any): string\n{\n    if (isPresent(clazz.constructor)) {\n        let classN = clazz.constructor.toString();\n        classN = classN.substr('function '.length);\n        return classN.substr(0, classN.indexOf('('));\n    }\n    return clazz;\n}\n\n\n/**\n *  Source: https://www.typescriptlang.org/docs/handbook/mixins.html\n *\n *  Function that copies properties of the baseCtors to derivedCtor.\n *  Can be used to achieve multiple inheritance.\n */\nexport function applyMixins(derivedCtor: any, baseCtors: any[])\n{\n    baseCtors.forEach(baseCtor =>\n    {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name =>\n        {\n            derivedCtor.prototype[name]\n                = baseCtor.prototype[name];\n        });\n    });\n}\n\nexport class StringWrapper\n{\n    static fromCharCode(code: number): string\n    {\n        return String.fromCharCode(code);\n    }\n\n    static charCodeAt(s: string, index: number): number\n    {\n        return s.charCodeAt(index);\n    }\n\n    static split(s: string, regExp: RegExp): string[]\n    {\n        return s.split(regExp);\n    }\n\n    static equals(s: string, s2: string): boolean\n    {\n        return s === s2;\n    }\n\n    static stripLeft(s: string, charVal: string): string\n    {\n        if (s && s.length) {\n            let pos = 0;\n            for (let i = 0; i < s.length; i++) {\n                if (s[i] !== charVal) {\n                    break;\n                }\n                pos++;\n            }\n            s = s.substring(pos);\n        }\n        return s;\n    }\n\n    static stripRight(s: string, charVal: string): string\n    {\n        if (s && s.length) {\n            let pos = s.length;\n            for (let i = s.length - 1; i >= 0; i--) {\n                if (s[i] !== charVal) {\n                    break;\n                }\n                pos--;\n            }\n            s = s.substring(0, pos);\n        }\n        return s;\n    }\n\n    static replace(s: string, from: string, replace: string): string\n    {\n        return s.replace(from, replace);\n    }\n\n    static replaceAll(s: string, from: RegExp, replace: string): string\n    {\n        return s.replace(from, replace);\n    }\n\n    static slice<T>(s: string, from: number = 0, to: number = null): string\n    {\n        return s.slice(from, to === null ? undefined : to);\n    }\n\n    static contains(s: string, substr: string): boolean\n    {\n        return s.indexOf(substr) !== -1;\n    }\n\n    static compare(a: string, b: string): number\n    {\n        if (a < b) {\n            return -1;\n        } else if (a > b) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n\n    static endsWidth(subject: string, searchString: string, position: number = 0): boolean\n    {\n        if (!String.prototype.endsWith) {\n            String.prototype.endsWith = function (sstring, pos = 0)\n            {\n                let subjectString = this.toString();\n                if (typeof pos !== 'number' || !isFinite(pos) || Math.floor(pos) !== pos || pos\n                    >\n                    subjectString.length)\n                {\n                    pos = subjectString.length;\n                }\n                pos -= sstring.length;\n                let lastIndex = subjectString.indexOf(sstring, pos);\n                return lastIndex !== -1 && lastIndex === pos;\n            };\n        }\n        return subject.endsWith(searchString);\n    }\n\n\n    static startsWidth(subject: string, searchString: string): boolean\n    {\n        return subject.indexOf(searchString) === 0;\n    }\n}\n\nexport class StringJoiner\n{\n    constructor(public parts: string[] = [])\n    {\n    }\n\n    add(part: string): StringJoiner\n    {\n        this.parts.push(part);\n        return this;\n    }\n\n\n    last(): string\n    {\n        return this.parts[this.parts.length - 1];\n    }\n\n    toString(): string\n    {\n        return this.parts.join('');\n    }\n}\n\n\nexport class NumberWrapper\n{\n    static toFixed(n: number, fractionDigits: number): string\n    {\n        return n.toFixed(fractionDigits);\n    }\n\n    static equal(a: number, b: number): boolean\n    {\n        return a === b;\n    }\n\n    static parseIntAutoRadix(text: string): number\n    {\n        let result: number = parseInt(text);\n        if (isNaN(result)) {\n            throw new Error('Invalid integer literal when parsing ' + text);\n        }\n        return result;\n    }\n\n    static parseInt(text: string, radix: number): number\n    {\n        if (radix === 10) {\n            if (/^(\\-|\\+)?[0-9]+$/.test(text)) {\n                return parseInt(text, radix);\n            }\n        } else if (radix === 16) {\n            if (/^(\\-|\\+)?[0-9ABCDEFabcdef]+$/.test(text)) {\n                return parseInt(text, radix);\n            }\n        } else {\n            let result: number = parseInt(text, radix);\n            if (!isNaN(result)) {\n                return result;\n            }\n        }\n        throw new Error(\n            'Invalid integer literal when parsing ' + text + ' in base ' + radix);\n    }\n\n    // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.\n    static parseFloat(text: string): number\n    {\n        return parseFloat(text);\n    }\n\n    static isNumeric(value: any): boolean\n    {\n        return !isNaN(value - parseFloat(value));\n    }\n\n    static isNaN(value: any): boolean\n    {\n        return isNaN(value);\n    }\n\n    static isInteger(value: any): boolean\n    {\n        return Number.isInteger(value);\n    }\n}\n\nexport class FunctionWrapper\n{\n    static apply(fn: Function, posArgs: any): any\n    {\n        return fn.apply(null, posArgs);\n    }\n\n    static bind(fn: Function, scope: any): Function\n    {\n        return fn.bind(scope);\n    }\n}\n\n// JS has NaN !== NaN\nexport function looseIdentical(a: any, b: any): boolean\n{\n    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n}\n\n// JS considers NaN is the same as NaN for map Key (while NaN !== NaN otherwise)\n// see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\nexport function getMapKey<T>(value: T): T\n{\n    return value;\n}\n\nexport function normalizeBlank(obj: Object): any\n{\n    return isBlank(obj) ? null : obj;\n}\n\nexport function normalizeBool(obj: boolean): boolean\n{\n    return isBlank(obj) ? false : obj;\n}\n\nexport function isJsObject(o: any): boolean\n{\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n\nexport function print(obj: Error | Object)\n{\n    console.log(obj);\n}\n\nexport function warn(obj: Error | Object)\n{\n    console.warn(obj);\n}\n\n\nexport function assert(condition: boolean, msg: string)\n{\n    if (!condition) {\n        throw new Error(msg);\n    }\n}\n\nexport function checksum(s: any)\n{\n    let chk = 0x12345678;\n    let len = s.length;\n    for (let i = 0; i < len; i++) {\n        chk += (s.charCodeAt(i) * (i + 1));\n    }\n\n    return (chk & 0xffffffff).toString(16);\n}\n\nexport function crc32(crc: number, anInt: number)\n{\n    /* tslint:disable */\n    let table = '00000000 77073096 EE0E612C 990951BA 076DC419 706AF48F E963A535 9E6495A3 0EDB8832 79DCB8A4 E0D5E91E 97D2D988 09B64C2B 7EB17CBD E7B82D07 90BF1D91 1DB71064 6AB020F2 F3B97148 84BE41DE 1ADAD47D 6DDDE4EB F4D4B551 83D385C7 136C9856 646BA8C0 FD62F97A 8A65C9EC 14015C4F 63066CD9 FA0F3D63 8D080DF5 3B6E20C8 4C69105E D56041E4 A2677172 3C03E4D1 4B04D447 D20D85FD A50AB56B 35B5A8FA 42B2986C DBBBC9D6 ACBCF940 32D86CE3 45DF5C75 DCD60DCF ABD13D59 26D930AC 51DE003A C8D75180 BFD06116 21B4F4B5 56B3C423 CFBA9599 B8BDA50F 2802B89E 5F058808 C60CD9B2 B10BE924 2F6F7C87 58684C11 C1611DAB B6662D3D 76DC4190 01DB7106 98D220BC EFD5102A 71B18589 06B6B51F 9FBFE4A5 E8B8D433 7807C9A2 0F00F934 9609A88E E10E9818 7F6A0DBB 086D3D2D 91646C97 E6635C01 6B6B51F4 1C6C6162 856530D8 F262004E 6C0695ED 1B01A57B 8208F4C1 F50FC457 65B0D9C6 12B7E950 8BBEB8EA FCB9887C 62DD1DDF 15DA2D49 8CD37CF3 FBD44C65 4DB26158 3AB551CE A3BC0074 D4BB30E2 4ADFA541 3DD895D7 A4D1C46D D3D6F4FB 4369E96A 346ED9FC AD678846 DA60B8D0 44042D73 33031DE5 AA0A4C5F DD0D7CC9 5005713C 270241AA BE0B1010 C90C2086 5768B525 206F85B3 B966D409 CE61E49F 5EDEF90E 29D9C998 B0D09822 C7D7A8B4 59B33D17 2EB40D81 B7BD5C3B C0BA6CAD EDB88320 9ABFB3B6 03B6E20C 74B1D29A EAD54739 9DD277AF 04DB2615 73DC1683 E3630B12 94643B84 0D6D6A3E 7A6A5AA8 E40ECF0B 9309FF9D 0A00AE27 7D079EB1 F00F9344 8708A3D2 1E01F268 6906C2FE F762575D 806567CB 196C3671 6E6B06E7 FED41B76 89D32BE0 10DA7A5A 67DD4ACC F9B9DF6F 8EBEEFF9 17B7BE43 60B08ED5 D6D6A3E8 A1D1937E 38D8C2C4 4FDFF252 D1BB67F1 A6BC5767 3FB506DD 48B2364B D80D2BDA AF0A1B4C 36034AF6 41047A60 DF60EFC3 A867DF55 316E8EEF 4669BE79 CB61B38C BC66831A 256FD2A0 5268E236 CC0C7795 BB0B4703 220216B9 5505262F C5BA3BBE B2BD0B28 2BB45A92 5CB36A04 C2D7FFA7 B5D0CF31 2CD99E8B 5BDEAE1D 9B64C2B0 EC63F226 756AA39C 026D930A 9C0906A9 EB0E363F 72076785 05005713 95BF4A82 E2B87A14 7BB12BAE 0CB61B38 92D28E9B E5D5BE0D 7CDCEFB7 0BDBDF21 86D3D2D4 F1D4E242 68DDB3F8 1FDA836E 81BE16CD F6B9265B 6FB077E1 18B74777 88085AE6 FF0F6A70 66063BCA 11010B5C 8F659EFF F862AE69 616BFFD3 166CCF45 A00AE278 D70DD2EE 4E048354 3903B3C2 A7672661 D06016F7 4969474D 3E6E77DB AED16A4A D9D65ADC 40DF0B66 37D83BF0 A9BCAE53 DEBB9EC5 47B2CF7F 30B5FFE9 BDBDF21C CABAC28A 53B39330 24B4A3A6 BAD03605 CDD70693 54DE5729 23D967BF B3667A2E C4614AB8 5D681B02 2A6F2B94 B40BBE37 C30C8EA1 5A05DF1B 2D02EF8D';\n    /* tslint:enable */\n\n    let x = 0;\n    let y = 0;\n\n    let myCrc = crc ^ (-1);\n    for (let i = 0; i < 4; i++) {\n        y = (crc ^ anInt) & 0xFF;\n        x = Number('0x' + table.substr(y * 9, 8));\n        crc = (crc >>> 8) ^ x;\n    }\n    return crc ^ (-1);\n}\n\n\n// Can't be all uppercase as our transpiler would think it is a special directive...\nexport class Json\n{\n    static parse(s: string): Object\n    {\n        return JSON.parse(s);\n    }\n\n    static stringify(data: Object): string\n    {\n        // Dart doesn't take 3 arguments\n        return JSON.stringify(data, null, 2);\n    }\n}\n\nexport class DateWrapper\n{\n    static create(year: number, month: number = 1, day: number = 1, hour: number = 0,\n                  minutes: number = 0,\n                  seconds: number = 0, milliseconds: number = 0): Date\n    {\n        return new Date(year, month - 1, day, hour, minutes, seconds, milliseconds);\n    }\n\n    static fromISOString(str: string): Date\n    {\n        return new Date(str);\n    }\n\n    static fromMillis(ms: number): Date\n    {\n        return new Date(ms);\n    }\n\n    static toMillis(date: Date): number\n    {\n        return date.getTime();\n    }\n\n    static now(): Date\n    {\n        return new Date();\n    }\n\n    static toJson(date: Date): string\n    {\n        return date.toJSON();\n    }\n}\n\n\nexport class BooleanWrapper\n{\n\n    static boleanValue(value: any = false): boolean\n    {\n        if (value && isString(value)) {\n            return value === 'true';\n        }\n        return value;\n    }\n\n\n    static isFalse(value: any): boolean\n    {\n        if (value && isString(value)) {\n            return value === 'false';\n        } else if (isStringMap(value)) {\n            return false;\n        } else if (isBoolean(value)) {\n            return (value === false) ? true : false;\n        }\n        return value;\n    }\n\n\n    static isTrue(value: any): boolean\n    {\n        if (value && isString(value)) {\n            return value === 'true';\n        } else if (isStringMap(value)) {\n            return false;\n        } else if (isBoolean(value)) {\n            return (value === true) ? true : false;\n        }\n        return value;\n    }\n}\n\n\n// When Symbol.iterator doesn't exist, retrieves the key used in es6-shim\ndeclare let Symbol: any;\nlet _symbolIterator: any = null;\n\nexport function getSymbolIterator(): string | symbol\n{\n    if (isBlank(_symbolIterator)) {\n        if (isPresent(Symbol.iterator)) {\n            _symbolIterator = Symbol.iterator;\n        } else {\n            // es6-shim specific logic\n            let keys = Object.getOwnPropertyNames(Map.prototype);\n            for (let i = 0; i < keys.length; ++i) {\n                let key = keys[i];\n                if (key !== 'entries' && key !== 'size' &&\n                    (Map as any).prototype[key] === Map.prototype['entries'])\n                {\n                    _symbolIterator = key;\n                }\n            }\n        }\n    }\n    return _symbolIterator;\n}\n\nconst ReservedKeyword = ['class'];\n\nexport function evalExpression(expr: string, declarations: string,\n                               lets: { [key: string]: any }): any\n{\n    let fnBody = `${declarations}\\n\\treturn ${expr}\\n//# sourceURL=AribaExpression`;\n    let fnArgNames: string[] = [];\n    let fnArgValues: any[] = [];\n    for (let argName in lets) {\n        if (StringWrapper.contains(expr, argName)) {\n            fnArgNames.push(argName);\n            fnArgValues.push(lets[argName]);\n        }\n    }\n    if (lets instanceof Extensible) {\n        let extValues: Extensible = lets;\n\n        extValues.extendedFields().forEach((value, key) =>\n        {\n            if (StringWrapper.contains(expr, key) &&\n                fnArgNames.indexOf(\n                    key) === -1 && ReservedKeyword.indexOf(\n                    key) === -1)\n            {\n                fnArgNames.push(key);\n                fnArgValues.push(value);\n            }\n        });\n    }\n\n    // fnArgNames.push('this');\n    // fnArgValues.push(lets);\n    return new Function(...fnArgNames.concat(fnBody))(...fnArgValues);\n}\n\n\nexport function evalExpressionWithCntx(expr: string, declarations: string,\n                                       lets: { [key: string]: any },\n                                       thisContext: any): any\n{\n    let fnBody = `${declarations}\\n\\treturn ${expr}\\n//# sourceURL=AribaExpression`;\n    let fnArgNames: string[] = [];\n    let fnArgValues: any[] = [];\n    for (let argName in lets) {\n        if (StringWrapper.contains(expr, argName)) {\n            fnArgNames.push(argName);\n            fnArgValues.push(lets[argName]);\n        }\n    }\n    if (lets instanceof Extensible) {\n        let extValues: Extensible = lets;\n\n        extValues.extendedFields().forEach((value, key) =>\n        {\n            if (StringWrapper.contains(expr, key) &&\n                fnArgNames.indexOf(\n                    key) === -1 && ReservedKeyword.indexOf(\n                    key) === -1)\n            {\n                fnArgNames.push(key);\n                fnArgValues.push(value);\n            }\n        });\n    }\n\n    // fnArgNames.push('this');\n    // fnArgValues.push(lets);\n    let fn = new Function(...fnArgNames.concat(fnBody));\n    assert(isPresent(fn), 'Cannot evaluate expression. FN is not defined');\n    let fnBound = fn.bind(thisContext);\n\n    return fnBound(...fnArgValues);\n}\n\nexport function isPrimitive(obj: any): boolean\n{\n    return !isJsObject(obj);\n}\n\nexport function hasConstructor(value: Object, type: any): boolean\n{\n    return value.constructor === type;\n}\n\nexport function escape(s: string): string\n{\n    return encodeURI(s);\n}\n\nexport function escapeRegExp(s: string): string\n{\n    return s.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n}\n\n\nexport function hashCode(str: string): number\n{\n    let hash = 0;\n    let char: number;\n    if (str.length === 0) {\n        return hash;\n    }\n    for (let i = 0; i < str.length; i++) {\n        char = str.charCodeAt(i);\n        hash = ((hash << 5) - hash) + char;\n        hash = hash & hash;\n    }\n    return hash;\n}\n\nexport function objectValues(obj: any): any[]\n{\n    return Object.keys(obj).map(key => obj[key]);\n}\n\n/**\n *\n * Converts object to a name;\n *\n */\nexport function objectToName(target: any): string\n{\n    if (isBlank(target) || (!isStringMap(target) && !isType(target))) {\n        throw new Error(' Cannot convert. Uknown object');\n    }\n\n    return isType(target) ? target.prototype.constructor.name : target.constructor.name;\n}\n\n/**\n *\n * Basic function to generate UUID taken from W3C from one of the examples\n *\n */\nexport function uuid(): string\n{\n    let dt = new Date().getTime();\n    let proto = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,\n        (c: string) =>\n        {\n            let r = (dt + Math.random() * 16) % 16 | 0;\n            dt = Math.floor(dt / 16);\n            return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n        });\n    return proto;\n}\n\n/**\n * Check object equality derived from angular.equals 1.5 implementation\n *\n */\nexport function equals(o1: any, o2: any): boolean\n{\n    if (o1 === o2) {\n        return true;\n    }\n    if (o1 === null || o2 === null) {\n        return false;\n    }\n    // eslint-disable-next-line no-self-compare\n    if (o1 !== o1 && o2 !== o2) {\n        return true; // NaN === NaN\n    }\n\n    let t1 = typeof o1, t2 = typeof o2, length: any, key: any, keySet: any;\n    if (t1 === t2 && t1 === 'object') {\n        if (isArray(o1)) {\n            if (!isArray(o2)) {\n                return false;\n            }\n            if ((length = o1.length) === o2.length) {\n                for (key = 0; key < length; key++) {\n                    if (!equals(o1[key], o2[key])) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        } else if (isDate(o1)) {\n            if (!isDate(o2)) {\n                return false;\n            }\n            return equals(o1.getTime(), o2.getTime());\n        } else if (isRegExp(o1)) {\n            if (!isRegExp(o2)) {\n                return false;\n            }\n            return o1.toString() === o2.toString();\n        } else {\n            if (isWindow(o1) || isWindow(o2) ||\n                isArray(o2) || isDate(o2) || isRegExp(o2))\n            {\n                return false;\n            }\n            keySet = new Map<string, boolean>();\n            // using Object.keys as iterating thru object stop working in NG6, TS2.7\n            let keys = Object.keys(o2);\n            for (key in keys) {\n                if (keys[key].charAt(0) === '$' || isFunction(o1[keys[key]])) {\n                    continue;\n                }\n                if (!equals(o1[keys[key]], o2[keys[key]])) {\n                    return false;\n                }\n                keySet.set(keys[key], true);\n            }\n\n            keys = Object.keys(o2);\n            for (key of keys) {\n                if (!(keySet.has(key)) && key.charAt(0) !== '$'\n                    && isPresent(o2[key]) && !isFunction(o2[key]))\n                {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}\n\n\n/**\n * transform a string into decamel. form. Mostly used when reading class names or field names\n * such firstName and we want to create a label First Name\n *\n *\n */\nexport function decamelize(string: string, separator: string = ' ', initialCaps: boolean = true)\n{\n    if (isBlank(string)) {\n        return '';\n    }\n\n    let lastUCIndex = -1;\n    let allCaps = true;\n\n    let splitOnUC = !StringWrapper.contains(string, '_');\n    let buf = '';\n    let inWord = 0;\n\n    for (let i = string.length; inWord < i; ++inWord) {\n        let c = string[inWord];\n\n        if (c.toUpperCase() === c) {\n            if ((inWord - 1) !== lastUCIndex && splitOnUC) {\n                buf += separator;\n            }\n            lastUCIndex = inWord;\n            if (!initialCaps) {\n                c = c.toLowerCase();\n            }\n        } else if (c.toLowerCase() === c) {\n            if (inWord === 0 && initialCaps) {\n                c = c.toUpperCase();\n            }\n            allCaps = false;\n\n        } else if (c !== '_') {\n            c = separator;\n        }\n        buf += c;\n    }\n\n    if (allCaps) {\n        let toCaps = false;\n        for (let i = 0, c = buf.length; i < c; i++) {\n            let ch = buf[i];\n\n            if (ch.toLowerCase() !== ch.toUpperCase()) {\n                if (inWord && ch === ch.toUpperCase()) {\n                    buf = buf.substr(0, i) + ch.toLowerCase() + buf.substr(i + 1);\n                }\n                toCaps = true;\n            } else {\n                toCaps = false;\n            }\n        }\n    }\n    return buf;\n}\n\n\nexport function nonPrivatePrefix(input: string): string\n{\n    return input[0] === '_' ? StringWrapper.stripLeft(input, '_') : input;\n}\n\n\n/**\n *\n * This considers currently only 1 form which when we have getter we have this form for\n * declaration _<name> and get <name>(). I do not check any other forms now.\n *\n *\n */\nexport function hasGetter(instance: any, field: string): boolean\n{\n    if (isBlank(field)) {\n        return false;\n    }\n\n    return (field[0] === '_' && isPresent(nonPrivatePrefix(field)));\n\n}\n\n/**\n * The Extensible interface can be implemented when a given class\n * wants to provide dynamically added fields.  Once this is implemented\n * to return a Map, the FieldValue system will be able to look in\n * the Map to see if the desired field exists.\n *\n *\n */\nexport abstract class Extensible\n{\n\n    /**\n     *  Returns the Map in which the dynamically added fields reside.\n     *\n     */\n    extendedFields(): Map<string, any>\n    {\n        return unimplemented();\n    }\n}\n\n","/**\n *\n * @original-license\n *\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n *\n *\n *  Credit: Derived and extended from https://github.com/angular/angular in order to have set of\n *  reusable globals. Since its not exported API need to have a copy under core.\n */\nimport * as Collections from 'typescript-collections';\nimport {\n    className,\n    equals,\n    getSymbolIterator,\n    isArray,\n    isBlank,\n    isJsObject,\n    isPresent,\n    isString,\n    StringJoiner\n} from './lang';\n\n\nexport const createMapFromMap: { (m: Map<any, any>): Map<any, any> } = (function () {\n    try {\n        if (new Map(<any>new Map())) {\n            return function createMapFromMapInner(m: Map<any, any>): Map<any, any> {\n                return new Map(<any>m);\n            };\n        }\n    } catch (e) {\n    }\n    return function createMapAndPopulateFromMap(m: Map<any, any>): Map<any, any> {\n        let map = new Map();\n        m.forEach((v, k) => {\n            map.set(k, v);\n        });\n        return map;\n    };\n})();\nexport const _clearValues: { (m: Map<any, any>): void } = (function () {\n    if ((<any>(new Map()).keys()).next) {\n        return function _clearValuesInner(m: Map<any, any>) {\n            let keyIterator = m.keys();\n            let k: any /** TODO #???? */;\n            while (!((k = (<any>keyIterator).next()).done)) {\n                m.set(k.value, null);\n            }\n        };\n    } else {\n        return function _clearValuesWithForeEach(m: Map<any, any>) {\n            m.forEach((v, k) => {\n                m.set(k, null);\n            });\n        };\n    }\n})();\n\nexport class MapWrapper {\n\n    static createEmpty<K, V>(): Map<K, V> {\n        return new Map<K, V>();\n    }\n\n    static clone<K, V>(m: Map<K, V>): Map<K, V> {\n        try {\n            if (new Map(<any>new Map())) {\n                return new Map<K, V>(<any> m);\n            }\n        } catch (e) {\n        }\n        let map = new Map();\n        m.forEach((v, k) => {\n            map.set(k, v);\n        });\n        return map;\n    }\n\n    static createFromStringMap<T>(stringMap: { [key: string]: T }): Map<string, T> {\n        let result = new Map<string, T>();\n        for (let key in stringMap) {\n            result.set(key, stringMap[key]);\n        }\n        return result;\n    }\n\n\n    static createFromAnyMap<T>(stringMap: { [key: string]: T }): Map<any, T> {\n        let result = new Map<any, T>();\n        for (let key in stringMap) {\n            result.set(key, stringMap[key]);\n        }\n        return result;\n    }\n\n\n    static createFromStringMapWithResolve<T>(stringMap: { [key: string]: T },\n                                             resolve: (key: string,\n                                                       value: any) => any): Map<string, T> {\n        let result = new Map<string, T>();\n        for (let key in stringMap) {\n            let updatedValue = resolve(key, stringMap[key]);\n            result.set(key, updatedValue);\n        }\n        return result;\n    }\n\n    static toStringMap<T>(m: Map<string, T>): { [key: string]: T } {\n        let r: { [key: string]: T } = {};\n        m.forEach((v, k) => r[k] = v);\n        return r;\n    }\n\n    static toAnyMap<T>(m: Map<any, T>): any {\n        let r = {};\n\n        if (isPresent(m)) {\n            m.forEach((v, k) => (<any>r)[k] = v);\n        }\n        return r;\n    }\n\n\n    static toString(m: Map<string, any>, inner: boolean = false): string {\n        let sj = new StringJoiner(['']);\n        if (!inner) {\n            sj.add('{');\n        }\n        m.forEach((v, k) => {\n\n            if (v instanceof Map) {\n                sj.add(MapWrapper.toString(v, true));\n\n            } else {\n                sj.add(k);\n                sj.add('=');\n                sj.add(v);\n            }\n            sj.add(', ');\n        });\n\n        if (!inner) {\n            sj.add('} ');\n        }\n        return sj.toString();\n    }\n\n\n    static clearValues(m: Map<any, any>) {\n        _clearValues(m);\n    }\n\n    static iterable<T>(m: T): T {\n        return m;\n    }\n\n\n    static mergeMapIntoMapWithObject(dest: Map<string, any>, source: Map<string, any>,\n                                     overwriteMismatched: boolean): Map<string, any> {\n\n        let keys = Array.from(source.keys());\n\n        for (let key of keys) {\n            let sourceValue = source.get(key);\n            let destValue = dest.get(key);\n\n            if (isBlank(destValue)) {\n                dest.set(key, ListWrapper.copyValue(sourceValue));\n                continue;\n            } else if (destValue instanceof Map && sourceValue instanceof Map) {\n\n                dest.set(key,\n                    MapWrapper.mergeMapIntoMapWithObject(\n                        MapWrapper.clone<string, any>(destValue),\n                        sourceValue, overwriteMismatched)\n                );\n            } else if (destValue instanceof Map && isArray(sourceValue)) {\n\n                if (ListWrapper.allElementsAreStrings(sourceValue)) {\n\n                    dest.set(key, MapWrapper.mergeMapIntoMapWithObject(\n                        MapWrapper.clone<string, any>(destValue),\n                        MapWrapper.convertListToMap(sourceValue), overwriteMismatched)\n                    );\n\n                } else {\n                    let sourceVect: string[] = ListWrapper.clone<any>(sourceValue);\n                    ListWrapper.addElementIfAbsent<any>(sourceVect, destValue);\n                    dest.set(key, sourceVect);\n                }\n            } else if (isArray(destValue) && sourceValue instanceof Map) {\n\n                if (ListWrapper.allElementsAreStrings(destValue)) {\n                    dest.set(key, MapWrapper.mergeMapIntoMapWithObject(\n                        MapWrapper.convertListToMap(destValue),\n                        sourceValue,\n                        overwriteMismatched)\n                    );\n                } else {\n                    // todo: can we really match this values with indexOf\n                    ListWrapper.addElementIfAbsent<Map<string, any>>(destValue,\n                        MapWrapper.clone<string, any>(\n                            sourceValue)\n                    );\n                }\n            } else if (destValue instanceof Map && isString(sourceValue)) {\n                let destValueMap = MapWrapper.clone(destValue);\n\n                if (isBlank(destValueMap.get(sourceValue))) {\n                    destValue.set(sourceValue, MapWrapper.createEmpty());\n                }\n            } else if (isString(destValue) && sourceValue instanceof Map) {\n                let sourceHash = MapWrapper.clone(sourceValue);\n                if (isBlank(sourceHash.get(destValue))) {\n                    sourceHash.set(destValue, MapWrapper.createEmpty());\n                }\n                dest.set(key, sourceHash);\n\n            } else if (isArray(destValue) && isArray(sourceValue)) {\n                dest.set(key, sourceValue);\n\n            } else if (isArray(destValue) && isString(sourceValue)) {\n                ListWrapper.addElementIfAbsent(destValue, sourceValue);\n\n            } else if (isString(destValue) && isArray(sourceValue)) {\n                let sourceVect: string[] = ListWrapper.clone<string>(sourceValue);\n\n                ListWrapper.addElementIfAbsent(sourceVect, destValue);\n                dest.set(key, sourceVect);\n\n            } else if (isString(destValue) && isString(sourceValue)) {\n                dest.set(key, sourceValue);\n\n            } else if (overwriteMismatched) {\n                dest.set(key, sourceValue);\n            } else {\n                let destClass = className(destValue);\n                let sourceClass = className(sourceValue);\n\n                if (destClass === sourceClass) {\n                    dest.set(key, sourceValue);\n                }\n            }\n        }\n        return dest;\n    }\n\n    static convertListToMap(keys: string[]): Map<string, any> {\n        let map = new Map<string, any>();\n        for (let i = 0; i < keys.length; i++) {\n            map.set(keys[i], MapWrapper.createEmpty<string, any>());\n        }\n        return map;\n    }\n\n    static groupBy<K>(items: any, groupByKey: (item: K) => string): Map<string, any> {\n        let result = items.reduce((groupResult: any, currentValue: any) => {\n\n            let gKey = groupByKey(currentValue);\n            (groupResult[gKey] = groupResult[gKey] || []).push(currentValue);\n            return groupResult;\n        }, {});\n\n\n        let grouped: Map<string, any> = new Map<string, any>();\n        Object.keys(result).forEach((key) => {\n            grouped.set(key, result[key]);\n        });\n        return grouped;\n    }\n}\n\n/**\n * Wraps Javascript Objects\n */\nexport class StringMapWrapper {\n    static create(): { [k: /*any*/ string]: any } {\n        // Note: We are not using Object.create(null) here due to\n        // performance!\n        // http://jsperf.com/ng2-object-create-null\n        return {};\n    }\n\n    static contains(map: { [key: string]: any }, key: string): boolean {\n        return map.hasOwnProperty(key);\n    }\n\n    static get<V>(map: { [key: string]: V }, key: string): V {\n        return map.hasOwnProperty(key) ? map[key] : undefined;\n    }\n\n    static set<V>(map: { [key: string]: V }, key: string, value: V) {\n        map[key] = value;\n    }\n\n\n    static isEmpty(map: { [key: string]: any }): boolean {\n        for (let prop in map) {\n            return false;\n        }\n        return true;\n    }\n\n    static delete(map: { [key: string]: any }, key: string) {\n        delete map[key];\n    }\n\n    static forEach<K, V>(map: { [key: string]: V }, callback: (v: V, K: string) => void) {\n        for (let k of Object.keys(map)) {\n            callback(map[k], k);\n        }\n    }\n\n    static merge<V>(m1: { [key: string]: V }, m2: { [key: string]: V }): { [key: string]: V } {\n        let m: { [key: string]: V } = {};\n\n        for (let k of Object.keys(m1)) {\n            m[k] = m1[k];\n        }\n\n        for (let k of Object.keys(m2)) {\n            m[k] = m2[k];\n        }\n\n        return m;\n    }\n\n    static equals<V>(m1: { [key: string]: V }, m2: { [key: string]: V }): boolean {\n        let k1 = Object.keys(m1);\n        let k2 = Object.keys(m2);\n        if (k1.length !== k2.length) {\n            return false;\n        }\n        let key: any /** TODO #???? */;\n        for (let i = 0; i < k1.length; i++) {\n            key = k1[i];\n            if (m1[key] !== m2[key]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}\n\n/**\n * A boolean-valued function over a value, possibly including context information\n * regarding that value's position in an array.\n */\nexport interface Predicate<T> {\n    (value: T, index?: number, array?: T[]): boolean;\n}\n\nexport class ListWrapper {\n    // JS has no way to express a statically fixed size list, but dart does so we\n    // keep both methods.\n    static createFixedSize(size: number): any[] {\n        return new Array(size);\n    }\n\n    static createGrowableSize(size: number): any[] {\n        return new Array(size);\n    }\n\n    static clone<T>(array: T[]): T[] {\n        return array.slice(0);\n    }\n\n    static forEachWithIndex<T>(array: T[], fn: (t: T, n: number) => void) {\n        for (let i = 0; i < array.length; i++) {\n            fn(array[i], i);\n        }\n    }\n\n    static first<T>(array: T[]): T {\n        if (!array) {\n            return null;\n        }\n    }\n\n    static last<T>(array: T[]): T {\n        if (!array || array.length === 0) {\n            return null;\n        }\n        return array[array.length - 1];\n    }\n\n    static indexOf<T>(array: T[], value: T, startIndex: number = 0): number {\n        return array.indexOf(value, startIndex);\n    }\n\n    static contains<T>(list: T[], el: T): boolean {\n        return list.indexOf(el) !== -1;\n    }\n\n\n    static containsAll<T>(list: T[], els: T[]): boolean {\n        return els.map(function (needle) {\n            return list.indexOf(needle);\n        }).indexOf(-1) === -1;\n    }\n\n    static containsComplex(list: Array<any>, item: any): boolean {\n        return list.findIndex(el => {\n            return equals(el, item);\n        }) > -1;\n    }\n\n    static findIndexComplex(list: Array<any>, item: any): number {\n        const index = list.findIndex(el => {\n            return equals(el, item);\n        });\n\n        return index;\n    }\n\n\n    static removeIfExist(list: Array<any>, item: any): void {\n        let index: number = list.findIndex(el => {\n            return equals(el, item);\n        });\n        if (index !== -1) {\n            ListWrapper.removeAt<any>(list, index);\n        }\n    }\n\n    static reversed<T>(array: T[]): T[] {\n        let a = ListWrapper.clone(array);\n        return a.reverse();\n    }\n\n    static concat(a: any[], b: any[]): any[] {\n        return a.concat(b);\n    }\n\n    static insert<T>(list: T[], index: number, value: T) {\n        list.splice(index, 0, value);\n    }\n\n    static removeAt<T>(list: T[], index: number): T {\n        let res = list[index];\n        list.splice(index, 1);\n        return res;\n    }\n\n    static removeAll<T>(list: T[], items: T[]) {\n        for (let i = 0; i < items.length; ++i) {\n            let index = list.indexOf(items[i]);\n            list.splice(index, 1);\n        }\n    }\n\n    static remove<T>(list: T[], el: T): boolean {\n        let index = list.indexOf(el);\n        if (index > -1) {\n            list.splice(index, 1);\n            return true;\n        }\n        return false;\n    }\n\n    static removeLast<T>(array: T[]): void {\n        if (!array || array.length === 0) {\n            return null;\n        }\n        array.splice(array.length - 1);\n    }\n\n\n    static clear(list: any[]) {\n        list.length = 0;\n    }\n\n    static isEmpty(list: any[]): boolean {\n        return list.length === 0;\n    }\n\n    static fill(list: any[], value: any, start: number = 0, end: number = null) {\n        list.fill(value, start, end === null ? list.length : end);\n    }\n\n    static equals(a: any[], b: any[]): boolean {\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    static slice<T>(l: T[], from: number = 0, to: number = null): T[] {\n        return l.slice(from, to === null ? undefined : to);\n    }\n\n    static splice<T>(l: T[], from: number, length: number): T[] {\n        return l.splice(from, length);\n    }\n\n    static sort<T>(l: T[], compareFn?: (a: T, b: T) => number) {\n        if (isPresent(compareFn)) {\n            l.sort(compareFn);\n        } else {\n            l.sort();\n        }\n    }\n\n\n    static sortByExample(toSort: string[], pattern: string[]) {\n        toSort.sort((a: string, b: string) => {\n            let indexA = pattern.indexOf(a) === -1 ? 10 : pattern.indexOf(a);\n            let indexB = pattern.indexOf(b) === -1 ? 10 : pattern.indexOf(b);\n\n            return indexA - indexB;\n        });\n    }\n\n    static toString<T>(l: T[]): string {\n        let out = '';\n        for (let item of l) {\n            out += item.toString() + ',  ';\n        }\n        return out;\n    }\n\n    static toJSON<T>(l: T[]): string {\n        return JSON.stringify(l);\n    }\n\n    static maximum<T>(list: T[], predicate: (t: T) => number): T {\n        if (list.length === 0) {\n            return null;\n        }\n        let solution: any /** TODO #???? */ = null;\n        let maxValue = -Infinity;\n        for (let index = 0; index < list.length; index++) {\n            let candidate = list[index];\n            if (isBlank(candidate)) {\n                continue;\n            }\n            let candidateValue = predicate(candidate);\n            if (candidateValue > maxValue) {\n                solution = candidate;\n                maxValue = candidateValue;\n            }\n        }\n        return solution;\n    }\n\n    static flatten<T>(list: Array<T | T[]>): T[] {\n        let target: any[] = [];\n        _flattenArray(list, target);\n        return target;\n    }\n\n\n    static allElementsAreStrings<T>(list: Array<T | T[]>): boolean {\n        let target: any[] = ListWrapper.flatten(list);\n        for (let element of target) {\n            if (!isString(element)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    static addAll<T>(list: Array<T>, source: Array<T>): void {\n        for (let i = 0; i < source.length; i++) {\n            list.push(source[i]);\n        }\n    }\n\n    // todo: check if this handles objects with contains\n    static addElementIfAbsent<T>(list: Array<T>, element: T): void {\n\n        let contains = Collections.arrays.contains(list, element, (item1: any, item2: any) => {\n\n            if (item1['equalsTo']) {\n                return item1['equalsTo'](item2);\n\n            }\n            return item1 === item2;\n        });\n        if (!contains) {\n            list.push(element);\n        }\n    }\n\n\n    static addElementsIfAbsent<T>(list: Array<T>, elements: T[]): void {\n\n\n        if (isBlank(elements)) {\n            return;\n        }\n\n        for (let elem of elements) {\n\n            let contains = Collections.arrays.contains(list, elem, (item1: any, item2: any) => {\n                if (item1['equalsTo'] && item2['equalsTo']) {\n                    return item1['equalsTo'](item2);\n                }\n                return item1 === item2;\n            });\n            if (!contains) {\n                list.push(elem);\n            }\n        }\n    }\n\n\n    static copyValue<T>(value: any): any {\n        if (value instanceof Map) {\n            return MapWrapper.clone(value);\n        } else if (isArray(value)) {\n            return ListWrapper.clone(value);\n        }\n\n        return value;\n    }\n\n\n}\n\nfunction _flattenArray(source: any[], target: any[]): any[] {\n    if (isPresent(source)) {\n        for (let i = 0; i < source.length; i++) {\n            let item = source[i];\n            if (isArray(item)) {\n                _flattenArray(item, target);\n            } else {\n                target.push(item);\n            }\n        }\n    }\n    return target;\n}\n\n\nexport function isListLikeIterable(obj: any): boolean {\n    if (!isJsObject(obj)) {\n        return false;\n    }\n    return isArray(obj) ||\n        (!(obj instanceof Map) &&      // JS Map are iterables but return entries as [k, v]\n            getSymbolIterator() in obj);  // JS Iterable have a Symbol.iterator prop\n}\n\nexport function areIterablesEqual(a: any, b: any, comparator: Function): boolean {\n    let iterator1 = a[getSymbolIterator()]();\n    let iterator2 = b[getSymbolIterator()]();\n\n    while (true) {\n        let item1 = iterator1.next();\n        let item2 = iterator2.next();\n        if (item1.done && item2.done) {\n            return true;\n        }\n        if (item1.done || item2.done) {\n            return false;\n        }\n        if (!comparator(item1.value, item2.value)) {\n            return false;\n        }\n    }\n}\n\nexport function iterateListLike(obj: any, fn: Function) {\n    if (isArray(obj)) {\n        for (let i = 0; i < obj.length; i++) {\n            fn(obj[i]);\n        }\n    } else {\n        let iterator = obj[getSymbolIterator()]();\n        let item: any /** TODO #???? */;\n        while (!((item = iterator.next()).done)) {\n            fn(item.value);\n        }\n    }\n}\n\n\nexport function findLast<T>(arr: T[], condition: (value: T) => boolean): T | null {\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (condition(arr[i])) {\n            return arr[i];\n        }\n    }\n    return null;\n}\n\n// Safari and Internet Explorer do not support the iterable parameter to the\n// Set constructor.  We work around that by manually adding the items.\nlet createSetFromList: { (lst: any[]): Set<any> } = (function () {\n    let test = new Set([1, 2, 3]);\n    if (test.size === 3) {\n        return function createSetFromListInner(lst: any[]): Set<any> {\n            return new Set(lst);\n        };\n    } else {\n        return function createSetAndPopulateFromList(lst: any[]): Set<any> {\n            let res = new Set(lst);\n            if (res.size !== lst.length) {\n                for (let i = 0; i < lst.length; i++) {\n                    res.add(lst[i]);\n                }\n            }\n            return res;\n        };\n    }\n})();\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {InjectionToken, Injector, isDevMode} from '@angular/core';\nimport {BooleanWrapper, isPresent, NumberWrapper, readGlobalParam} from '../utils/lang';\nimport {MapWrapper} from '../utils/collection';\nimport {Environment} from './environment';\n\n\n/**\n * Since on enterprise level we need to support all available locales as user might change\n * to different lang anytime we need to import all expected locales that we want to support.\n *\n * Note:  Remember when you want to support more locales you need to import them and register\n * them using registerLocaleData\n */\nexport const AppConfigToken = new InjectionToken<string>('App.Config');\n\nconst SuportedLanguages = ['en', 'fr'];\n\n\n/**\n * Simple Configuration implementation  which let us configure application during a bootstrap\n * phase. You can pass values in 3 different ways\n *\n * 1) Using import - at the time you import your module\n * 2) injected as service and you can set values\n * 3) From Script tag or globally defined VAR during a deployment\n *\n *\n * There is also from URL option that is for now temporary disabled.\n *\n */\nexport class AppConfig {\n    /**\n     * This is not regular env. param we use this to query global var that can be attached to\n     * window to read env. settings that can be injected by server\n     *\n     */\n    static readonly AppConfigGlobalVar = 'AppConfigGlobal';\n\n    static readonly IsDevMode = 'devmode.enabled';\n    static readonly UserAgent = 'useragent';\n    static readonly Lang = 'lang';\n    static readonly SupportedLangs = 'supportedlang';\n    static readonly Direction = 'dir';\n    static readonly NavPlatform = 'platform';\n    static readonly i18nEnabled = 'i18n.enabled';\n    static readonly AppTitle = 'app.title';\n    static readonly RestApiContextUrl = 'restapi.context';\n    static readonly RestApiHostUrl = 'restapi.host';\n    static readonly ContentType = 'content-type';\n    static readonly ConnectionRetryInterval = 'connection.retry';\n    static readonly ConnectionAbortTimeout = 'connection.abort-timeout';\n    static readonly ConnectionUseMockServer = 'connection.mock-server.enabled';\n    static readonly ConnectionMockServerPath = 'connection.mock-server.path';\n    static readonly ConnectionMockServerRoutes = 'connection.mock-server.routes';\n    static readonly DomainUniqueName = 'domain.uniquename';\n    static readonly DomainQuery = 'domain.uniquename';\n    static readonly AssetFolder = 'asset-folder';\n    static readonly InTest = 'env.test';\n\n    /**\n     * Since we unable to change and simulate URL during ng test but still we need to be able to\n     * test this URL parsing logic then just for a Test purposes this `env.test.url` property\n     * will be used to pass url during a test.\n     */\n    static readonly InTestUrl = 'env.test.url';\n\n    private values: Map<string, any>;\n    // private queryValues: Map<string,  any>;\n\n\n    testUrl: string;\n\n    constructor(public injector: Injector, public environment: Environment) {\n        // we expect there will be always window available.\n        this.values = new Map<string, any>();\n        // this.queryValues = new Map<string,  any>();\n    }\n\n\n    /**\n     *\n     * Called by factory method to initialize this config class\n     *\n     */\n    init(config: { [key: string]: any }) {\n        this.initDefaults();\n        if (isPresent(config)) {\n            let values: Map<string, any> = MapWrapper.createFromStringMap<any>(config);\n            values.forEach((v: any, k: any) => this.set(k, v));\n        }\n\n        this.environment.setValue(AppConfig.AssetFolder, this.get(AppConfig.AssetFolder));\n\n        let location: any = window.location.pathname + window.location.search;\n        if (this.environment.inTest) {\n            location = this.get(AppConfig.InTestUrl);\n        }\n\n        // if (isPresent(location)) {\n        //     this.parseQueryParms(location);\n        // }\n\n\n    }\n\n\n    /**\n     * This will read globally inserted scripts to initialize application from the server side.\n     * The script can directly declare the variables :\n     *\n     * ```js\n     *   <script>\n     *      var AppConfigGlobal = {\n     *               'app.pro1': 'value1',\n     *               'app.pro2': 'value2',\n     *               'lang': 'ch'\n     *      };\n     *  </script>\n     * ```\n     *\n     *   or it can be included on the index.html page during build time.\n     *\n     *   We expect that will find the `AppConfigGlobal`\n     *\n     *\n     */\n    parseGlobalParams(): void {\n        let globalConfig: { [name: string]: any } = readGlobalParam(AppConfig.AppConfigGlobalVar);\n        if (isPresent(globalConfig)) {\n            for (let key in globalConfig) {\n                this.values.set(key.toLowerCase(), globalConfig[key]);\n            }\n        }\n    }\n\n\n    /**\n     * Sets values to configuration. to make sure we will not run into case-sensitive problems we\n     * are converting all keys into lowercase\n     *\n     */\n    set(key: string, value: any): void {\n        this.values.set(key.toLowerCase(), value);\n\n        if (key.toLowerCase() === AppConfig.InTest) {\n            this.environment.inTest = value;\n        }\n    }\n\n\n    /**\n     * Sets values to configuration\n     * todo: dont do all this with this hacky way. just if you need to check case sensitivity, then\n     * simply map keys from this.values into lowercase and then check if it has a key\n     */\n    get(key: string): any {\n        if (this.values.has(key.toLowerCase())) {\n            return this.values.get(key.toLowerCase());\n        }\n        return null;\n    }\n\n\n    getNumber(key: string): number {\n        let val = this.get(key);\n        return NumberWrapper.parseIntAutoRadix(val);\n    }\n\n\n    getBoolean(key: string): boolean {\n        let val = this.get(key);\n        return BooleanWrapper.boleanValue(val);\n    }\n\n    // /**\n    //  *\n    //  * Called during instantiation and it read query params if any and use them as\n    // configuration.\n    //  * We might want to force to prefix each param with env. to make sure we do not store\n    // everything * */ private parseQueryParms(url: string) {  let urlSerializer = new\n    // DefaultUrlSerializer(); let urlTree = urlSerializer.parse(url);  if\n    // (isPresent(urlTree.queryParams)) {  for (let key in urlTree.queryParams) {\n    // this.queryValues.set(key.toLowerCase(), urlTree.queryParams[key]); } } }\n\n    private initDefaults() {\n\n        this.set(AppConfig.IsDevMode, isDevMode());\n        this.set(AppConfig.UserAgent, window.navigator.userAgent);\n        this.set(AppConfig.Direction, document.documentElement.dir);\n        this.set(AppConfig.NavPlatform, window.navigator.platform);\n        this.set(AppConfig.ContentType, 'application/json; charset=utf-8');\n        this.set(AppConfig.ConnectionRetryInterval, 500);\n        this.set(AppConfig.ConnectionUseMockServer, false);\n        this.set(AppConfig.ConnectionMockServerPath, '/mock-routing');\n        this.set(AppConfig.i18nEnabled, true);\n        this.set(AppConfig.InTest, false);\n        this.set(AppConfig.DomainUniqueName, 'uniqueName');\n        this.set(AppConfig.DomainQuery, 'q');\n\n        if (this.environment.inTest) {\n            this.set(AppConfig.ConnectionAbortTimeout, 500);\n        } else {\n            this.set(AppConfig.ConnectionAbortTimeout, 8000);\n        }\n        this.set(AppConfig.AssetFolder, 'assets');\n\n        if (!this.values.has(AppConfig.Lang)) {\n            this.set(AppConfig.Lang, window.navigator.language);\n        }\n\n        if (!this.values.has(AppConfig.SupportedLangs)) {\n            this.set(AppConfig.SupportedLangs, SuportedLanguages);\n        }\n    }\n\n\n    getRestApiContextUrl(entity: string, isNested: boolean = false): string {\n        let nestedFlag = isNested ? '$' : '';\n        let withEntity = `${AppConfig.RestApiContextUrl}.${nestedFlag}${entity}`;\n        let url = this.get(withEntity) || this.get(AppConfig.RestApiContextUrl);\n\n        if (isPresent(url)) {\n            if (/\\/$/g.test(url)) {\n                url = url.substring(0, url.length - 1);\n            }\n            return url;\n        }\n\n        throw new Error('Rest APIUri is not configured');\n    }\n\n\n    getRestApiContext(): string {\n        return this.get(AppConfig.RestApiContextUrl) || '';\n    }\n\n    getRestApiHost(): string {\n        return this.get(AppConfig.RestApiHostUrl) || '';\n    }\n\n    isProductionMode(): boolean {\n        return !this.getBoolean(AppConfig.IsDevMode);\n    }\n\n    getBaseUrl() {\n        const isMocked = this.getBoolean(AppConfig.ConnectionUseMockServer);\n        const cnx = this.getRestApiContext();\n        const host = this.getRestApiHost() || '';\n\n        if (isMocked) {\n            const prefix = this.get(AppConfig.AssetFolder);\n            return `${prefix}${cnx || '/'}`;\n        }\n\n        let url = `${host}${cnx || '/'}`;\n        return url;\n    }\n\n\n    /**\n     * Used by factory method insider APP_INITIALIZER to pre-load i18n support\n     *\n     */\n    initializeI18n(): Promise<any> {\n        let promise: Promise<any> = new Promise((resolve: any) => {\n            resolve(true);\n        });\n        return promise;\n    }\n}\n\n\n/**\n * Factory method used by CoreModule in order to instantiate AppConfig provider\n *\n */\nexport function makeConfig(config: { [key: string]: any }, injector: Injector,\n                           env: Environment): AppConfig {\n    // when empty we asume we are in Test. Application should always have some basic initialization\n    // todo: Need to get back to this as this is temporary.\n\n    let conf: AppConfig = new AppConfig(injector, env);\n    conf.init(config);\n    return conf;\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {EventEmitter, Injectable} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {ListWrapper} from '../utils/collection';\nimport {assert} from '../utils/lang';\n\n\n/**\n * Environment is sharable state between components and its injected at the root level and\n * the same instance accessible down the component tree.\n *\n */\n@Injectable()\nexport class Environment\n{\n\n    /**\n     * Keep Current Locale. Initialized from AppConfig along with i18n support\n     */\n    private _locale: string;\n\n\n    /**\n     * Used by component to save save additional properties for processing and its rendering\n     */\n    private envVariables: Map<string, any>;\n\n\n    /**\n     * Simple stack-like storage where we need to a keep history\n     */\n    private stacksVariables: Map<string, any[]>;\n\n    /**\n     * Helper properties for debugging and testing purposes\n     *\n     */\n    isPseudoLocalized: boolean = false;\n    inTest: boolean = false;\n\n\n    /**\n     * Store current Page FormGroup State that need to be shared down across components\n     */\n    currentForm: FormGroup;\n\n    /**\n     * An EventEmitter to listen to locale change events\n     */\n    onLocaleChange: EventEmitter<string> = new EventEmitter<string>();\n\n    isProduction: boolean = false;\n\n    /**\n     *\n     * Register and save reference to user defined rules if any. You might define its own metadata\n     * when rendering UI.\n     */\n    userRules: any;\n\n    /**\n     * This is jsut for debugging purposes to save some temp message that I can then trace.\n     *\n     */\n    debugString: string;\n\n\n    constructor()\n    {\n        this._locale = 'en';\n        this.envVariables = new Map<string, any>();\n        this.stacksVariables = new Map<string, any[]>();\n    }\n\n\n    getValue(key: string): any\n    {\n        if (this.envVariables.has(key)) {\n            return this.envVariables.get(key);\n        }\n        return null;\n    }\n\n    setValue(key: string, value: any): void\n    {\n        this.envVariables.set(key, value);\n    }\n\n    deleteValue(key: string): void\n    {\n        if (this.hasValue(key)) {\n            this.envVariables.delete(key);\n        }\n    }\n\n    hasValue(key: string): boolean\n    {\n        return this.envVariables.has(key);\n    }\n\n    allVariables(): Map<string, any>\n    {\n        return this.envVariables;\n    }\n\n\n    get locale(): string\n    {\n        return this._locale;\n    }\n\n    set locale(value: string)\n    {\n        this._locale = value;\n\n        // Emit locale changed event\n        this.onLocaleChange.emit(value);\n    }\n\n    peak<T>(key: string): T\n    {\n        let stack: T[] = this.stacksVariables.get(key) || [];\n        return ListWrapper.last<T>(stack);\n\n    }\n\n\n    pop<T>(key: string): T\n    {\n        let stack: T[] = this.stacksVariables.get(key) || [];\n        assert(stack.length > 0, ' Attempt to get value from empty stack');\n\n        return ListWrapper.removeAt<any>(stack, stack.length - 1);\n    }\n\n\n    push<T>(key: string, value: T): void\n    {\n        let stack: T[] = this.stacksVariables.get(key) || [];\n        stack.push(value);\n        this.stacksVariables.set(key, stack);\n    }\n\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\n\nimport {isPresent} from '../utils/lang';\n\n/**\n * To unify the work with domain objects we have these set of interfaces that each Entity or Value\n * must use to leverage some of the functionality we have in the core\n *\n */\nexport interface CompositeType\n{\n\n    className(): string;\n\n    $proto?(): CompositeType;\n}\n\n\nexport interface Identity\n{\n\n    identity(): string;\n\n}\n\nexport interface Deserializable\n{\n    getTypes(): any;\n}\n\n\n/**\n * EntityComposite having identity that can be identified in the storage by its ID. Entities are\n * mutable objects\n */\nexport interface Entity extends Identity,\n    Deserializable,\n    CompositeType\n{\n}\n\n/**\n * <li>No Identity</li>\n * <li>Immutable</li>\n */\nexport interface Value extends Deserializable,\n    CompositeType\n{\n    // for use of type guard only, later on we can use it for something\n    clone(): Value;\n}\n\nexport function isEntity(entity: any): entity is Entity\n{\n    return isPresent(entity) && isPresent((<Entity>entity).identity);\n}\n\nexport function isValue(val: any): val is Value\n{\n    return isPresent(val)  && isPresent((<Value>val).clone);\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Type} from '@angular/core';\nimport {assert, objectToName} from '../../utils/lang';\n\nexport enum RestSegmentType\n{\n    Host,\n    Context,\n    Action,\n    Resource,\n    Identifier,\n    OfParent\n}\n\n\nexport enum RestAction\n{\n    Load,\n    Query,\n    Save,\n    Do\n}\n\n\n/**\n * Set of AST like classes to keep the fluent API grammar in the abstract format to give developers\n * changes to provide their own implementation\n *\n * Todo: Expose Builder as a service\n *\n */\n\nexport abstract class UrlSegment\n{\n    constructor(public type: RestSegmentType, public value?: any,\n                public params?: Map<string, string>, public rank: number = -1)\n    {\n\n    }\n\n\n    assertSegment(prevSegment: RestSegmentType): void\n    {\n    }\n\n    assertMsg(): string\n    {\n        return 'Wrong Rest Segment order';\n    }\n}\n\n\nexport class HostSegment extends UrlSegment\n{\n\n    constructor(public value: any, public params?: Map<string, string>)\n    {\n        super(RestSegmentType.Host, value, params, 5);\n    }\n\n\n    assertSegment(prevSegment: RestSegmentType): void\n    {\n        assert(prevSegment == null, this.assertMsg());\n    }\n\n\n    assertMsg(): string\n    {\n        return `${super.assertMsg()}. . Host segment must be first!`;\n    }\n}\n\n\nexport class ContextSegment extends UrlSegment\n{\n\n    constructor(public value: any, public params?: Map<string, string>)\n    {\n        super(RestSegmentType.Context, value, params, 10);\n    }\n\n\n    assertSegment(prevSegment: RestSegmentType): void\n    {\n        assert(prevSegment === RestSegmentType.Host, this.assertMsg());\n    }\n\n\n    assertMsg(): string\n    {\n        return `${super.assertMsg()}. . Context segment must follow Host!`;\n    }\n}\n\n\nexport class ActionSegment extends UrlSegment\n{\n    actionType: RestAction;\n\n    constructor(public action: RestAction, public data?: any, public params?: Map<string, string>)\n    {\n        super(RestSegmentType.Action, action, params, 0);\n\n        // save it to local property for easier comparision\n        this.actionType = action;\n    }\n\n\n    assertSegment(prevSegment: RestSegmentType): void\n    {\n        assert(prevSegment === RestSegmentType.Context, this.assertMsg());\n    }\n\n\n    assertMsg(): string\n    {\n        return `${super.assertMsg()}. . Action must follow Context segment!`;\n    }\n}\n\n\nexport class ResourceSegment extends UrlSegment\n{\n\n    resourceName: string;\n\n    constructor(public value: Type<any>, public params?: Map<string, string>)\n    {\n        super(RestSegmentType.Resource, value, params, 15);\n\n        this.resourceName = `${objectToName(this.value).toLowerCase()}s`;\n    }\n\n\n    assertSegment(prevSegment: RestSegmentType): void\n    {\n        assert((prevSegment === RestSegmentType.Action || prevSegment === RestSegmentType.OfParent),\n            this.assertMsg());\n    }\n\n\n    assertMsg(): string\n    {\n        return `${super.assertMsg()}. . Resource must follow either Action or Of!`;\n    }\n}\n\n\nexport class IdentifierSegment extends UrlSegment\n{\n\n    constructor(public value: any, public params?: Map<string, string>)\n    {\n        super(RestSegmentType.Identifier, value, params, 20);\n    }\n\n\n    assertSegment(prevSegment: RestSegmentType): void\n    {\n        assert(prevSegment === RestSegmentType.Resource, this.assertMsg());\n    }\n\n    assertMsg(): string\n    {\n        return `${super.assertMsg()}. . Identifier must follow Resource!`;\n    }\n}\n\n\nexport class OfParentSegment extends UrlSegment\n{\n\n    constructor()\n    {\n        super(RestSegmentType.OfParent);\n        this.rank = 2;\n    }\n\n\n    assertSegment(prevSegment: RestSegmentType): void\n    {\n        assert(prevSegment === RestSegmentType.Resource ||\n            prevSegment === RestSegmentType.Identifier,\n            this.assertMsg());\n    }\n\n    assertMsg(): string\n    {\n        return `${super.assertMsg()}. . Of must follow Resource!`;\n    }\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {ActionSegment, ResourceSegment, RestAction, RestSegmentType, UrlSegment} from './segment';\nimport {assert, isPresent, StringJoiner} from '../../utils/lang';\nimport {RestUrlGroup} from './url-group';\n\n\n/**\n * Default implementation that reads abstract URL structure and assembles correct URL.\n */\nexport class DefaultRestBuilder\n{\n    private sorted: boolean = false;\n\n\n    constructor(private urlGroup: RestUrlGroup)\n    {\n    }\n\n    assembleUrl(isMocked: boolean): string\n    {\n\n        this.validate();\n\n        let sortedSegments = this.adjustRank(this.urlGroup.segments);\n\n        let url = new StringJoiner();\n        for (let i = 1; i < sortedSegments.length; i++) {\n\n            switch (sortedSegments[i].type) {\n                case RestSegmentType.Action:\n                case RestSegmentType.OfParent:\n                    break;\n\n                case RestSegmentType.Resource:\n                    let resSegment: ResourceSegment = <ResourceSegment> sortedSegments[i];\n                    if (isMocked) {\n                        url.add('mocked').add('/');\n                    }\n                    url.add(resSegment.resourceName);\n                    this.addSlash(url, i !== (sortedSegments.length - 1));\n                    break;\n\n\n                default:\n                    url.add(sortedSegments[i].value);\n                    this.addSlash(url,\n                                  isPresent(sortedSegments[i].value) &&\n                                  sortedSegments[i].value.toString().length > 0 &&\n                                  i !== (sortedSegments.length - 1));\n            }\n        }\n        if ((<ActionSegment>sortedSegments[0]).value === RestAction.Do) {\n            url.add('/').add('actions').add('/').add((<ActionSegment>sortedSegments[0]).data);\n        }\n\n        return url.toString();\n    }\n\n\n    private addSlash(url: StringJoiner, shouldAdd: boolean): void\n    {\n        if (shouldAdd) {\n            url.add('/');\n        }\n\n    }\n\n\n    private validate(): void\n    {\n        let action: ActionSegment = <ActionSegment>this.urlGroup.lookup(RestSegmentType.Action);\n\n        switch (action.actionType) {\n            case RestAction.Save:\n            case RestAction.Do:\n                // make sure we have a Identifier\n                let withIdCount = this.urlGroup.count(RestSegmentType.Identifier);\n                let of = this.urlGroup.lookup(RestSegmentType.OfParent);\n\n                assert(withIdCount >= 1, 'Missing withId(<IDENTIFIER>) call!');\n                break;\n\n        }\n    }\n\n\n    /**\n     *\n     * Check to see if we have OF segment where we refer to parent resource. In such case we\n     * need move all before OF at the end. Either after parent RESOURCE or IDENTIFIER\n     *\n     *\n     * ```\n     *   service\n     *      .load()\n     *      .resource(LineItem)\n     *      .of\n     *      .resource(Requisition)\n     *      .withId('123');\n     *  ```\n     *\n     *\n     *\n     * Find the OF segment and go back until we reach Resource and adjust rank of these adn\n     * then\n     * sort\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     */\n    private adjustRank(segments: UrlSegment[]): UrlSegment[]\n    {\n        let ofIndex = segments\n            .findIndex((s: UrlSegment) => s.type === RestSegmentType.OfParent);\n\n        if (ofIndex !== -1) {\n            let of = segments[ofIndex];\n            let segment: UrlSegment;\n            do {\n                segment = segments[--ofIndex];\n                segment.rank *= of.rank;\n            } while (segment.type !== RestSegmentType.Resource);\n        }\n\n        return segments.sort((a, b) => a.rank - b.rank);\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {ResourceSegment, RestSegmentType, UrlSegment} from './segment';\nimport {assert, isBlank, isPresent, isString} from '../../utils/lang';\nimport {ListWrapper} from '../../utils/collection';\nimport {Type} from '@angular/core';\n\n/**\n *\n * This class just aggregates and provides convient apit to to work with UrlSegments\n *\n */\nexport class RestUrlGroup\n{\n    constructor(private _segments?: UrlSegment[])\n    {\n        if (isBlank(this._segments)) {\n            this._segments = [];\n        }\n    }\n\n\n    /**\n     *\n     * Every push is validated againts UrlSegment assert methods to make sure the order of the\n     * method calls is correct\n     *\n     */\n    push(segment: UrlSegment): void\n    {\n        segment.assertSegment((this._segments.length > 0) ? this.peak().type : null);\n\n        if (isString(segment.value)) {\n            segment.value = segment.value.replace(/^\\/|\\/$/g, '');\n        }\n        this._segments.push(segment);\n    }\n\n\n    /**\n     * Stack like API\n     *\n     */\n    peak(): UrlSegment\n    {\n        return ListWrapper.last<UrlSegment>(this._segments);\n    }\n\n\n    pop(): UrlSegment\n    {\n        assert(this._segments.length > 0,\n            ' Attempt to get value from empty segments stack');\n\n        return ListWrapper.removeAt<UrlSegment>(this._segments, this._segments.length - 1);\n    }\n\n    updateSegment(segmentType: RestSegmentType, data: any): void\n    {\n        let urlSegment = this.lookup(segmentType);\n        urlSegment.value = data;\n    }\n\n    /**\n     *\n     * Based on the enum Segment Type  it will retrieve correct segment from the stack\n     *\n     */\n    lookup(segment: RestSegmentType, byResource?: Type<any>): UrlSegment\n    {\n        if (isBlank(this.segments)) {\n            return null;\n        }\n\n        let ss = [...this.segments];\n        ss = ss.reverse();\n\n        return ss.find(((s: UrlSegment) => {\n            let hasMatch = s.type === segment;\n\n            if (segment === RestSegmentType.Resource) {\n\n                if (isPresent(byResource)) {\n                    return hasMatch && (<ResourceSegment>s).value === byResource;\n                } else {\n                    return hasMatch;\n                }\n            }\n            return hasMatch;\n        }));\n    }\n\n    /**\n     *\n     * Counts number of segments of certain type\n     *\n     */\n    count(segment: RestSegmentType): number\n    {\n        let segments = this.segments.filter((s: UrlSegment) => segment === s.type);\n        return isPresent(segments) ? segments.length : 0;\n    }\n\n\n    get segments(): UrlSegment[]\n    {\n        return this._segments;\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\n\n\nimport {map} from 'rxjs/operators';\n\nimport {Injectable, Type} from '@angular/core';\nimport {\n    HttpClient,\n    HttpErrorResponse,\n    HttpHeaders,\n    HttpParams,\n    HttpProgressEvent,\n    HttpResponse\n} from '@angular/common/http';\nimport {Entity, isEntity, isValue, Value} from './domain-model';\nimport {AppConfig} from '../config/app-config';\nimport {\n    ActionSegment,\n    ContextSegment,\n    HostSegment,\n    IdentifierSegment,\n    OfParentSegment,\n    ResourceSegment,\n    RestAction,\n    RestSegmentType\n} from './url/segment';\nimport {Subscription, Observable} from 'rxjs';\nimport {DefaultRestBuilder} from './url/builder';\nimport {RestUrlGroup} from './url/url-group';\nimport {assert, isArray, isBlank, isDate, isPresent} from '../utils/lang';\n\n\n/**\n * Response is the generic wrapper interface encapsulating a response from the micro service.\n * Currently we have only body field, but later on we need to extend it for different notifications,\n * errors, paging information and much more.\n *\n *\n *\n */\nexport interface Response<T> {\n    payload: T;\n}\n\n\n/**\n *\n * To simplify work with current HttpClient the Resource provides fluent API on top of it. You dont\n * assemble URL traditional way rather more fluent and functional way, working with real data types\n * such a Value and Entity.\n *\n * Entity and Value are two main key interfaces that all domain objects should inherit from if they\n * want to leverage this functionality.\n *\n * ###Example\n *\n * 1.  to simply assemble following URL http://api.ariba.com/myService/v1/requisitions/123 and\n *  and fetch Requisition data:\n *\n * ```ts\n *  let r: Resource\n *\n *  r.load()\n *   .resource(Requisition)\n *   .withId('123')\n *   .asEntity<Requisition>((r: Requisition) => receivedR = r);\n *\n * ```\n * You you can simply read it: load resource Requisition with ID 123 and return this as Entity\n *\n * 2. Current fluent API also support partial updates and subcontext resource\n *  to load data from this REST API endpoint\n *      http://api.ariba.com/myService/v1/requisitions/123/suppliers\n\n\n * ```ts\n *  let r: Resource\n *\n *  r.load()\n *   .resource(Supplier)\n *   .of\n *   .resource(Requisition)\n *   .withId('123')\n *   .asEntity<Supplier>((r:  Supplier[]) => receivedR = r);\n *\n * ```\n *\n *  You can read above: Load all from resource Supplier of Requisition (or supplier belongs to\n *  Requisition)  with ID 123 and return this as Entity.\n *\n *\n * 3. To save data you follow the same syntax\n *      Save requisition so we are PUTting data to following URL\n *      http://api.ariba.com/myService/v1/requisitions/123\n *\n * ```ts\n *  let r: Resource\n *\n *          r\n *        .save()\n *        .resource(Requisition)\n *        .withId('123')\n *        .withData(pr)\n *        .asEntity<Requisition>((r: Requisition) => receivedR = r);\n *\n *\n * ```\n *\n *  You can read above: Save resource Requisition with ID 123 and with Data .... and return it as\n *  a Entity\n *\n *\n *  4. API can also for you assemble and execute actions sometimes called interaction. Not all is\n *  about CRUD. Our current syntax for actions is\n *\n *                       http://api.ariba.com/myService/v1/requisitions/123/actions/approve\n *\n * ```ts\n *  let r: Resource\n *\n *        r\n *        .do('approve')\n *        .resource(Requisition)\n *        .withId('123')\n *        .asEntity<Requisition>((r: Requisition) => receivedR = r);\n *\n *\n * ```\n *\n * To make it easily extensible they are 3 main pieces\n *  - Resource: This class just put together abstract structure URLSegment\n *  - URLSegments: More like AST style to assemble the URL\n *  - builder: that read this AST to assemble the URL\n *\n *\n * Later on we might want to expose builder as a provider and you can have your own implementation\n *\n *\n *\n *\n */\n@Injectable()\nexport class Resource {\n    /**\n     * RestUrlGroup aggregates UrlSegments\n     *\n     */\n    private _urlGroup: RestUrlGroup;\n\n    /**\n     * Once all URL are assembled the builder returns final URL to be used for the HttpClient\n     */\n    private _urlBuilder: DefaultRestBuilder;\n\n    /**\n     * Cached url, so we dont have to assemble this everytime somebody calls url\n     */\n    private _url: string;\n\n\n    constructor(private http: HttpClient, private appConfig: AppConfig) {\n    }\n\n    /**\n     * Identifies GET operation\n     *\n     */\n    load(): Resource {\n        this.init();\n\n        this.urlGroup.push(new ActionSegment(RestAction.Load));\n        return this;\n    }\n\n\n    /**\n     * Identifies PUT or POST operation. Depending on the object. If the object has already\n     * populated its identifier, then we use PUT, otherwise POST\n     *\n     */\n    save(): Resource {\n        this.init();\n\n        this.urlGroup.push(new ActionSegment(RestAction.Save));\n        return this;\n    }\n\n\n    /**\n     * Identifies interaction. For this we use POST\n     *\n     */\n    do(action: string): Resource {\n        this.init();\n\n        this.urlGroup.push(new ActionSegment(RestAction.Do, action));\n        return this;\n    }\n\n\n    /**\n     *\n     * TODO: Since query API is not yet implemented on the server side => TBD\n     *\n     * There where should be able to accepts individual query grammar. Similar style like rxjs\n     * operators.\n     *\n     *  e.g.: Resource.prototype.contains = ....\n     *        Resource.prototype.eq = ....\n     *\n     * You should be able to add dynamically let;s call it QuerySpecification\n     *\n     *      res\n     *      .query()\n     *      .resource(Requsition)\n     *      .where( contains<string>(reqEntity.title(), '*asdf*' )\n     *\n     *  so it could look like something like:\n     *\n     *\n     *  contains<T>(title: string, value: T): T\n     *\n     *  But since all these Specification would have a way to translate this key|value to the\n     *  query so the where, would just list all the specification to bulid\n     *  the query\n     *\n     *\n     */\n    query(): Resource {\n        this.init();\n\n        throw new Error('Not implemented');\n    }\n\n    where(): Resource {\n        this.init();\n        throw new Error('Not implemented');\n    }\n\n\n    /**\n     *\n     * Identifies ResourceSegment with specific type that must be either Entity or Value\n     *\n     */\n    resource<T extends Entity | Value>(type: Type<T>): Resource {\n        this.urlGroup.push(new ResourceSegment(type));\n        return this;\n    }\n\n    /**\n     * Identifier IdentifierSegment\n     *\n     */\n    withId(identifier: string): Resource {\n        this.urlGroup.push(new IdentifierSegment(identifier));\n        return this;\n    }\n\n    /**\n     * When we are saving data this method is used to insert a payload to the ActionSegment\n     *\n     */\n    withData<T extends Entity | Value>(data: T): Resource {\n        let urlSegment = this.urlGroup.lookup(RestSegmentType.Action);\n        let isSave = (<ActionSegment>urlSegment).actionType === RestAction.Save;\n\n        assert(isSave, 'withData can be used with SAVE operation only!');\n\n        (<ActionSegment>urlSegment).data = data;\n        return this;\n    }\n\n\n    /**\n     * OF is just a syntactic suggar for better readability and to easier work with sub resources.\n     * using OF we are able to tell that some resource belongs to other resource\n     *\n     */\n    get of(): Resource {\n        this.urlGroup.push(new OfParentSegment());\n        return this;\n    }\n\n\n    /**\n     *\n     * Once tell what you want this is the last call you want to make to return resources as actual\n     * Entities or Values.\n     *\n     * Todo: Maybe rename a method name as we can return both Entity and Value.\n     *\n     * You have also option to insert HttpOption\n     *\n     */\n    asEntity<T extends Entity | Value>(subscriber: (res: T | T[]) => void,\n                                       options: {\n                                           headers?: HttpHeaders,\n                                           observe: 'body'\n                                           params?: HttpParams,\n                                           reportProgress?: boolean,\n                                           responseType?: 'json',\n                                           withCredentials?: boolean,\n                                       } = {observe: 'body'}): Subscription {\n        let segment: ActionSegment = <ActionSegment> this.urlGroup.lookup(RestSegmentType.Action);\n        assert(isPresent(segment), 'Missing Http method. Not sure how to handle this!');\n\n        let observable: Observable<any>;\n\n        let actionType: RestAction = segment.value;\n        switch (actionType) {\n            case RestAction.Load:\n                observable = this.http.get<Response<T | T[]>>(this.url, options);\n                break;\n\n            case RestAction.Do:\n                observable = this.http.post<Response<T | T[]>>(this.url, {}, options);\n                break;\n\n            case RestAction.Save:\n                // we dont have right now other usecase subcontext resource will be always some\n                // array\n                if (isEntity(segment.data)) {\n                    if (isBlank((<Entity>segment.data).identity())) {\n                        observable = this.http.post<Response<T | T[]>>(this.url, segment.data,\n                            options);\n                    } else {\n                        observable = this.http.put<Response<T | T[]>>(this.url, segment.data,\n                            options);\n                    }\n                } else if (isValue(segment.data)) {\n                    // we expect value will be always pushed\n                    observable = this.http.put<Response<T | T[]>>(this.url, segment.data, options);\n                }\n                break;\n        }\n\n\n        return observable.pipe(map<Response<T | T[]>, T | T[]>(res => this.convertToComposite(res,\n            true, false))).subscribe(subscriber);\n    }\n\n\n    asHttpResponse<T extends Entity |\n        Value>(subscriber: (res: HttpResponse<Response<T | T[]>> | HttpProgressEvent) => void,\n               error?: (error: HttpErrorResponse) => void,\n               options: {\n                   headers?: HttpHeaders, observe: 'response',\n                   params?: HttpParams, reportProgress?: boolean,\n                   responseType?: 'json', withCredentials?: boolean\n               } = {observe: 'response'}): Subscription {\n\n        let segment: ActionSegment = <ActionSegment> this.urlGroup.lookup(RestSegmentType.Action);\n        assert(isPresent(segment), 'Missing Http method. Not sure how to handle this!');\n\n        let observable: Observable<any>;\n\n        let actionType: RestAction = segment.value;\n        switch (actionType) {\n            case RestAction.Load:\n                observable = this.http.get<Response<T | T[]>>(this.url, options);\n                break;\n\n            case RestAction.Do:\n                observable = this.http.post<Response<T | T[]>>(this.url, {}, options);\n                break;\n\n            case RestAction.Save:\n                // we dont have right now other usecase subcontext resource will be always some\n                // array\n                if (isEntity(segment.data)) {\n                    if (isBlank((<Entity>segment.data).identity())) {\n                        observable = this.http.post<Response<T | T[]>>(this.url, segment.data,\n                            options);\n                    } else {\n                        observable = this.http.put<Response<T | T[]>>(this.url, segment.data,\n                            options);\n                    }\n                } else if (isValue(segment.data)) {\n                    // we expect value will be always pushed\n                    observable = this.http.put<Response<T | T[]>>(this.url, segment.data, options);\n                }\n                break;\n        }\n\n        const hasProgress = options.reportProgress || false;\n        return observable.pipe(\n            map(res => this.convertToComposite(res, false, hasProgress)))\n            .subscribe(subscriber, error);\n    }\n\n\n    /**\n     *\n     * Return assebled URL AST -> string\n     *\n     */\n    get url(): string {\n        if (isBlank(this._url)) {\n            let isMocked = this.appConfig.getBoolean(AppConfig.ConnectionUseMockServer);\n\n            this._url = this._urlBuilder.assembleUrl(isMocked);\n        }\n        return this._url;\n    }\n\n\n    /**\n     * private\n     *\n     */\n    get urlGroup(): RestUrlGroup {\n        return this._urlGroup;\n    }\n\n    /**\n     * private\n     *\n     */\n    get urlBuilder(): DefaultRestBuilder {\n        return this._urlBuilder;\n    }\n\n    /**\n     * private\n     *\n     */\n    private init(): void {\n        this._urlGroup = new RestUrlGroup();\n        this._urlBuilder = new DefaultRestBuilder(this._urlGroup);\n        this._url = null;\n\n\n        this.urlGroup.push(new HostSegment(this.appConfig.getRestApiHost()));\n        this.urlGroup.push(new ContextSegment(this.appConfig.getRestApiContext()));\n    }\n\n\n    /**\n     * Used inside .map to map JSON response or HttpResponse.body to actual type\n     *\n     */\n    private convertToComposite<T extends Entity | Value>(res: Response<T | T[]> |\n                                                             HttpResponse<Response<T | T[]>>,\n                                                         isComposite: boolean,\n                                                         hasProgress: boolean): any {\n        if (hasProgress) {\n            return res;\n        }\n        // unsorted segments will have have our target resource as first one\n        let sgm: ResourceSegment = <ResourceSegment>this.urlGroup.lookup(RestSegmentType.Resource);\n\n        if (isComposite) {\n            return this.deserialize((<Response<T>>res).payload, sgm.value);\n\n        } else {\n            let httpRes = <HttpResponse<Response<T>>>res;\n            let myResp: Response<T> = {\n                payload: this.deserialize(httpRes.body.payload, sgm.value)\n            };\n            return httpRes.clone({body: myResp});\n        }\n    }\n\n\n    serialize<T>(data: T): string {\n        return JSON.stringify(data);\n    }\n\n    /**\n     *\n     * Converts JSON object to actual Type. We don't care about primitive types as we dont have to\n     * do anything with them. We do instantiate objects or complex types only.\n     *\n     *\n     */\n    deserialize(json: any, clazz: Type<any>): any {\n        if (isArray(json)) {\n            let instances = [];\n            for (let item in json) {\n                instances.push(this.deserialize(json[item], clazz));\n            }\n            return instances;\n        } else {\n            let instance;\n            if (clazz === String) {\n                instance = json.toString();\n            } else if (clazz === Number) {\n                instance = json;\n            } else if (clazz === Boolean) {\n                instance = json;\n            } else {\n                instance = new clazz();\n                let types = instance.getTypes();\n\n                for (let prop in json) {\n                    if (!json.hasOwnProperty(prop)) {\n                        continue;\n                    }\n\n                    if (isPresent(types[prop]) && isPresent(json[prop]) && types[prop] !== Date) {\n                        instance[prop] = this.deserialize(json[prop], types[prop]);\n\n                    } else if (isDate(types[prop])) {\n                        instance[prop] = new types[prop](json[prop]);\n\n                    } else {\n                        instance[prop] = json[prop];\n                    }\n\n                    // else if (isString(json[prop]) && isEntity(instance)\n                    //     && prop === (<Entity>instance).identity()) {\n                    //\n                    //     const idString = (<Entity>instance).identity();\n                    //     (<any>instance)[idString] = <string>json[prop];\n                    //\n                    // }\n\n\n                }\n            }\n\n            return instance;\n        }\n    }\n}\n\n\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, OnInit} from '@angular/core';\n\n@Component({\n    templateUrl: 'not-found.component.html',\n    styleUrls: ['not-found.component.scss']\n})\nexport class NotFoundComponent implements OnInit\n{\n\n    constructor()\n    {\n    }\n\n    ngOnInit()\n    {\n    }\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Injectable} from '@angular/core';\nimport {\n    ActivatedRoute,\n    Event,\n    NavigationEnd,\n    NavigationExtras,\n    NavigationStart,\n    Route,\n    Router\n} from '@angular/router';\nimport {Subject} from 'rxjs';\nimport {isBlank, isPresent} from '../utils/lang';\nimport {ListWrapper} from '../utils/collection';\n\n/**\n * Basic wrapper around Angular's ROUTE service to simplify temporary state caching as well\n * navigation. This service listen for Routing events such as NavigationStart as well,\n * NavigationEnds and when the routing Enters, We check if there any state which needs to be cached\n * if yes then we save it into the stateCacheHistory which maps final URL to the actual STATE\n * object, and when we are navigate back to the same URL We check if there is any saved state.\n *\n * This service was originally created as a response that angular always destroyes and recreates\n * components when navigating aways and then back to it. By a of angular 4.2.0+ this might be\n * obsolete.\n *\n */\n@Injectable()\nexport class RoutingService\n{\n    /**\n     * Stack keeping active Routes so we can go back/redirect back\n     *\n     */\n    private routingState: Event[] = [];\n\n    /**\n     * Temporary field holding a state Object of type T before its saved into stateCacheHistory,\n     * and retrieved when getting back from State\n     */\n    private currentStateFrom: any;\n\n\n    /**\n     * Temporary field holding a state Object of type T before its saved into stateCacheHistory,\n     * and retrieved when getting to State\n     */\n    private currentStateTo: any;\n\n    /*\n     * Event object for registering listeners to save a certain state as well as broadcasting back\n     * when state needs to be retrieved back to the Page\n     *\n     */\n    stateCache: Subject<any> = new Subject<any>();\n\n    /**\n     *\n     * This is our cache which maps URL => to = >STATE. Any page can save any state using\n     * observable object which will be retrieved back.\n     *\n     */\n    stateCacheHistory: Map<string, any> = new Map<string, any>();\n\n\n    constructor(public router: Router)\n    {\n        this.router.events.subscribe((event: Event) => this.subscribeToRoutingEvents(event));\n    }\n\n    /**\n     *\n     * Here is the main routing logic that proceses every routing events.\n     *\n     */\n    subscribeToRoutingEvents(event: Event): void\n    {\n\n        if (event instanceof NavigationEnd) {\n            let url = event.url;\n            if (this.stateCacheHistory.has(url)) {\n                this.stateCache.next(this.stateCacheHistory.get(url));\n                this.stateCacheHistory.delete(url);\n            }\n            this.routingState.push(event);\n        }\n\n        if (event instanceof NavigationStart) {\n\n            let itemBeforeRoute = ListWrapper.last<Event>(this.routingState);\n\n\n            if (isPresent(this.currentStateFrom) && isPresent(itemBeforeRoute) && isPresent(\n                    this.currentStateFrom) && itemBeforeRoute instanceof NavigationEnd ||\n                itemBeforeRoute instanceof NavigationStart) {\n\n                this.stateCacheHistory.set(itemBeforeRoute.url, this.currentStateFrom);\n                this.currentStateFrom = null;\n\n            } else if (isPresent(this.currentStateTo)) {\n                this.stateCacheHistory.set(event.url, this.currentStateTo);\n                this.currentStateTo = null;\n            }\n        }\n    }\n\n    /**\n     * Convenient GO BACK method. which takes you to previous route along with the URL change.\n     *\n     *\n     */\n    goBack(numOfSteps: number = 1): void\n    {\n        // we are starting from -1 as we need to also remove current route\n        let steps = -1;\n        let navigateUrl = '/404';\n        while (steps !== numOfSteps) {\n            let popState = this.routingState.pop();\n            if (popState instanceof NavigationEnd || popState instanceof NavigationStart) {\n                navigateUrl = popState.url;\n                steps++;\n            }\n        }\n\n        this.router.navigateByUrl(navigateUrl);\n    }\n\n    /**\n     *\n     * When navigating to a new Page you can use directly router or if you want to remember some\n     * state tne this method can be used as well.\n     *\n     */\n    navigate<T>(commands: any[], state?: T, extras?: NavigationExtras): void\n    {\n        this.currentStateFrom = state;\n        this.router.navigate(commands, extras);\n\n\n    }\n\n\n    /**\n     *\n     * When navigating to a new Page you can use directly router or if you want to remember some\n     * state tne this method can be used as well.\n     *\n     */\n    navigateWithRoute<T>(route: Route, params?: any, state?: T, extras?: NavigationExtras): void\n    {\n        this.currentStateTo = state;\n        this.router.navigate([route.path, params], extras);\n    }\n\n    /**\n     *\n     * Entry method for broadcasting stateCache and sending saved State back to the page\n     *\n     *\n     */\n    bindStateCache<T>(listener: (item: T) => void): void\n    {\n        this.stateCache.asObservable().subscribe((stateItem: T) => listener(stateItem));\n    }\n\n    /**\n     * Utility method so check extra parameters which are passed using Matrix notation\n     *\n     *\n     */\n    operation(route: ActivatedRoute): string\n    {\n        let operation = route.snapshot.params['o'];\n        return isBlank(\n            operation) || (operation !== 'view' && operation !== 'create' && operation !== 'edit')\n            ? 'view' : operation;\n    }\n\n\n    /**\n     * Assembles a path based on the current route.\n     *\n     */\n    pathForPage(pageName: string, pathName: string): string\n    {\n        return `${this.router.routerState.snapshot.url}/${pathName}`;\n    }\n\n    /**\n     *\n     * Search top level routes and return Route that has component name equal to pageName\n     *\n     *\n     */\n    routeForPage(pageName: string, pathName?: string, activatedPath?: string): Route\n    {\n        let nextRoute: any;\n        // we need this as we need to lookup if there is any route with given pageName as\n        // child route, if not search for global onces\n\n        let normalizedPath = activatedPath.indexOf('/') === 0 ? activatedPath.substring(1) :\n            activatedPath;\n\n        let currentRoute: Route = this.router.config.find((r: Route) =>\n            {\n                let routePath = r.path.indexOf('/') === 0 ? r.path.substring(1) :\n                    r.path;\n                return isPresent(normalizedPath) && normalizedPath === routePath;\n            }\n        );\n\n        // try to match the path and expected pageName\n        if (isPresent(pathName) && isPresent(currentRoute) && currentRoute.children.length > 0) {\n\n            nextRoute = currentRoute.children.find((r: Route) =>\n            {\n                let componentName = r.component.prototype.constructor.name;\n                return pathName === r.path && pageName === componentName;\n            });\n        } else if (isPresent(pageName)) {\n\n            nextRoute = this.router.config.find((r: Route) =>\n            {\n                let componentName = r.component.prototype.constructor.name;\n                return pathName === r.path && pageName === componentName;\n            });\n        }\n        // path not found then check only if we find anywhere in the path pageNae\n        if (isBlank(nextRoute)) {\n            this.router.config.forEach((r: Route) =>\n            {\n                if (isPresent(r.component)) {\n                    let componentName = r.component.prototype.constructor.name;\n                    if (pageName === componentName) {\n                        nextRoute = r;\n                    }\n                }\n            });\n        }\n        return nextRoute;\n    }\n\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Injectable} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n/**\n * Notifications service is a implementation of the publish/subscribe event bus for publishing\n * and listening for application level events.\n *\n * To subscribe to specific event e.g. User Logged In where topic is called user:signedIn\n *\n *\n * ```ts\n *\n *     @Component({\n *         selector: 'my-comp',\n *         template: `\n *                 Hello\n *             `\n *     })\n *     class MyComponent implements OnDestroy\n *     {\n *\n *        subscr: Subscription;\n *\n *         constructor(private notifications: Notifications) {\n *\n *              this.subscr = notifications.subscribe('user:signedIn', (message: any) =>\n *              {\n *                  // load user profile\n *              });\n *         }\n *\n *          ngOnDestroy(): void\n *          {\n *             this.subscr.unsubscribe();\n *          }\n *\n *\n *\n *     }\n *\n *\n * ```\n *\n * To publish event:\n *\n * ```\n *     let notifications: Notification;\n *     notifications.publish('user:signedIn', 'User just signed in');\n *\n * ```\n *\n * You can create and listen for your own application level events or you can also listen for all\n * the topics in the application if you use  `*` as application topic\n *\n * Unsubscribing is responsibility  of each subscriber\n *\n */\n@Injectable()\nexport class Notifications\n{\n\n    /**\n     * When this is used as a topic subscriber receives all messages\n     *\n     */\n    static readonly AllTopics = '*';\n\n    /**\n     * Observable used to publish and subscribe to application level events\n     */\n    private events: Subject<Message>;\n\n\n    constructor()\n    {\n        this.events = new Subject<Message>();\n    }\n\n    /**\n     *\n     * Subscribe to specific listener based on given topic.\n     *\n     */\n    subscribe(topic: string, subscriber: (value: any) => void): Subscription\n    {\n        const toAll = Notifications.AllTopics;\n\n        return this.events.pipe(\n            filter(msg => msg.topic === topic || topic === toAll),\n            map((msg: Message) => msg.content)\n\n        ).subscribe(subscriber);\n    }\n\n    /**\n     *\n     * Publish new event to a topic\n     *\n     */\n    publish(topic: string, message: any): void\n    {\n        let msg: Message = {topic: topic, content: message};\n        this.events.next(msg);\n\n    }\n\n}\n\n/**\n *\n * Base class for generic message\n *\n */\nexport interface Message\n{\n    topic: string;\n    content: any;\n}\n","/**\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\nimport {ErrorHandler, Injectable} from '@angular/core';\nimport {Notifications} from './messaging/notifications.service';\nimport {isPresent} from './utils/lang';\n\n\n@Injectable()\nexport class GlobalErrorHandler extends ErrorHandler\n{\n\n\n    constructor(private notifications?: Notifications)\n    {\n        super();\n    }\n\n    handleError(error: any)\n    {\n        if (isPresent(this.notifications)) {\n            this.notifications.publish('app:error', error);\n        }\n\n    }\n}\n\n","/**\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {NotFoundComponent} from './not-found/not-found.component';\n\nconst routes: Routes = [\n    {path: 'not-found', component: NotFoundComponent}\n];\n\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes)\n    ],\n    exports: [RouterModule],\n    providers: []\n})\nexport class AribaCoreRoutingModule\n{\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    HttpErrorResponse,\n    HttpEvent,\n    HttpHandler,\n    HttpInterceptor,\n    HttpRequest,\n    HttpResponse\n} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {throwError as observableThrowError, of as observableOf, Observable} from 'rxjs';\n\nimport {AppConfig} from '../config/app-config';\nimport {isBlank, isPresent, isString} from '../utils/lang';\nimport {Response} from '../domain/resource.service';\n\n\n/**\n * Typed interfaced to process easier routes\n */\nexport interface MockRoutes\n{\n    resource: string;\n    routes: MockRoute[];\n}\nexport interface MockRoute\n{\n    path: string;\n    method: string;\n    responseCode: number;\n    responseText: string;\n    data: any | null;\n}\n\n/**\n * Interceptor providing Mock Server functionality and is inserted only and if mock server is\n * enabled using AppConfig's connection.mock-server.enabled bootstrap property\n *\n *\n */\n@Injectable()\nexport class HttpMockInterceptor implements HttpInterceptor\n{\n\n    /**\n     * Stores loaded routes by given entity name.\n     *\n     */\n    routesByEntity: Map<string, MockRoute[]> = new Map<string, MockRoute[]>();\n\n\n    constructor(private appConfig: AppConfig)\n    {\n\n\n    }\n\n\n    /**\n     *\n     * If route is found returned Mock resuled defined in the JSON files, otherwise pass\n     * the request to the next interceptor.\n     *\n     *\n     */\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>\n    {\n\n        let mockedResp = this.makeRes(req);\n\n        if (isPresent(mockedResp)) {\n\n            if (mockedResp.status >= 200 && mockedResp.status < 300) {\n                return observableOf(<HttpResponse<any>>mockedResp);\n            } else {\n                let errror = new HttpErrorResponse({\n                    error: mockedResp.body,\n                    status: mockedResp.status,\n                    statusText: mockedResp.statusText,\n                    url: req.urlWithParams\n                });\n                observableThrowError(errror);\n            }\n\n\n        }\n        return next.handle(req);\n    }\n\n\n    /**\n     * Based on user configuration we load all the available routes and register them into\n     * `this.routesByEntity`\n     *\n     */\n    loadRoutes()\n    {\n        let routes: string[] = this.appConfig.get(AppConfig.ConnectionMockServerRoutes);\n        for (let routeName of routes) {\n            let req: HttpRequest<any> = this.makeReq(routeName);\n\n            // let's make quick and dirty async call to load our routes before anything else\n            let mocked: MockRoutes = this.requestForRoutes(req);\n            this.routesByEntity.set(mocked.resource, mocked.routes);\n        }\n    }\n\n\n    /**\n     *\n     * Returns configuration based on mock JSON files.\n     *\n     */\n    private requestForRoutes(req: HttpRequest<any>): MockRoutes\n    {\n\n        let xmlHttpReq = new XMLHttpRequest();\n\n\n        xmlHttpReq.open(req.method, req.urlWithParams, false);\n\n        req.headers.keys().forEach((key: string) =>\n        {\n            let all = req.headers.getAll(key);\n            xmlHttpReq.setRequestHeader(name, all.join(','));\n        });\n        xmlHttpReq.setRequestHeader('Accept', 'application/json, text/plain, */*');\n        xmlHttpReq.send(null);\n\n\n        let body = isBlank(xmlHttpReq.response) ? xmlHttpReq.responseText :\n            xmlHttpReq.response;\n\n        if (xmlHttpReq.status < 200 && xmlHttpReq.status >= 300) {\n            throw new Error('Cannot load Mock server configuration. Please make sure that you' +\n                ' have a mock-routing/ folder under your assets');\n        }\n\n        return isString(body) ? JSON.parse(body) : body;\n    }\n\n\n    /**\n     *\n     * Create a requests to load routes\n     *\n     */\n    private makeReq(routeName: string): HttpRequest<any>\n    {\n        let assetFolder: string = this.appConfig.get(AppConfig.AssetFolder);\n        let path: string = this.appConfig.get(AppConfig.ConnectionMockServerPath);\n\n        return new HttpRequest('GET', `${assetFolder}${path}/${routeName}.json`, {\n            responseType: 'json'\n        });\n    }\n\n\n    /**\n     *\n     * When we are creating a response we always expect two things:\n     * 1) We are dealing with Entity\n     * 2) REST API is handled using Resource which prepend /mocked/\n     *\n     */\n    private makeRes(req: HttpRequest<any>): HttpResponse<any>\n    {\n        let responseOp: HttpResponse<any>;\n\n        let path = req.urlWithParams.substring(req.url.indexOf('mocked') + 6);\n        let resource = path.substring(1);\n        if (resource.indexOf('/') !== -1) {\n            resource = resource.substring(0, resource.indexOf('/'));\n        }\n\n        if (this.routesByEntity.has(resource)) {\n            responseOp = this.doHandleRequest(req, path, resource);\n        }\n\n        if (isBlank(responseOp) && this.appConfig.getBoolean(AppConfig.InTest)) {\n            return new HttpResponse({\n                body: {}, status: 404, statusText: 'Not Found',\n                url: req.urlWithParams\n            });\n        }\n        return responseOp;\n    }\n\n\n    /**\n     *\n     * This will get the content from the routes -> route as it as and return it as a\n     * response\n     *\n     */\n    private doHandleRequest(req: HttpRequest<any>, path: string,\n                            resource: string): HttpResponse<any>\n    {\n        let routes: MockRoute[] = this.routesByEntity.get(resource);\n\n        let matchedRoute = routes.findIndex((el: MockRoute) =>\n        {\n            return req.method.toLowerCase() === el.method.toLowerCase() && el.path === path;\n        });\n\n        if (matchedRoute !== -1) {\n            let route: MockRoute = routes[matchedRoute];\n\n            let payload: Response<any> = {\n                payload:  route.data\n            };\n\n            return new HttpResponse<Response<any>>({\n                body: payload,\n                status: route.responseCode,\n                statusText: route.responseText,\n                url: route.path\n            });\n\n        }\n        return null;\n    }\n}\n\n\n/**\n * Default implementation of the HttpHandler so we can have custom behavior to HTTPClient\n */\nexport class MockInterceptorHandler implements HttpHandler\n{\n    constructor(private next: HttpHandler, private interceptor: HttpInterceptor)\n    {\n    }\n\n    handle(req: HttpRequest<any>): Observable<HttpEvent<any>>\n    {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\n","/**\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\nimport {Meta, Title} from '@angular/platform-browser';\nimport {\n    APP_INITIALIZER,\n    ErrorHandler,\n    Inject,\n    InjectionToken,\n    Injector,\n    ModuleWithProviders,\n    NgModule,\n    Optional,\n    SkipSelf\n} from '@angular/core';\nimport {\n    HTTP_INTERCEPTORS,\n    HttpBackend,\n    HttpClientModule,\n    HttpHandler,\n    HttpInterceptor\n} from '@angular/common/http';\nimport {Router} from '@angular/router';\nimport {AppConfig, makeConfig} from './config/app-config';\nimport {Environment} from './config/environment';\nimport {NotFoundComponent} from './not-found/not-found.component';\nimport {RoutingService} from './routing/routing.service';\nimport {GlobalErrorHandler} from './global-error-handler';\nimport {AribaCoreRoutingModule} from './ariba-core-routing.module';\nimport {Notifications} from './messaging/notifications.service';\nimport {HttpMockInterceptor, MockInterceptorHandler} from './http/http-mock-interceptor';\nimport {Resource} from './domain/resource.service';\nimport {CommonModule} from '@angular/common';\n\nexport const UserConfig = new InjectionToken<string>('UserConfig');\n\n\n/**\n * Core mode includes all shared logic accross whole application\n */\n    // todo: for AOT use exported functions for factories insteads this inline ones.\n@NgModule({\n    imports: [\n        CommonModule,\n        HttpClientModule,\n        AribaCoreRoutingModule\n    ],\n    declarations: [NotFoundComponent],\n\n    bootstrap: []\n\n})\nexport class AribaCoreModule {\n\n    static forRoot(config: { [key: string]: any } = {}): ModuleWithProviders {\n        return {\n            ngModule: AribaCoreModule,\n            providers: [\n                Title,\n                Meta,\n                Environment,\n                Notifications,\n                HttpMockInterceptor,\n\n                Resource,\n\n                {provide: UserConfig, useValue: config},\n                {\n                    provide: AppConfig, useFactory: makeConfig,\n                    deps: [UserConfig, Injector, Environment]\n                },\n                {\n                    provide: HttpHandler,\n                    useFactory: makeHttpClientHandler,\n                    deps: [\n                        HttpBackend, AppConfig, HttpMockInterceptor,\n                        [new Optional(), new Inject(HTTP_INTERCEPTORS)]\n                    ],\n                },\n\n                {provide: ErrorHandler, useClass: GlobalErrorHandler, deps: [Notifications]},\n                {provide: RoutingService, useClass: RoutingService, deps: [Router]}\n            ]\n        };\n    }\n\n\n    constructor(@Optional() @SkipSelf() parentModule: AribaCoreModule, private conf: AppConfig) {\n\n    }\n\n}\n\n\n/**\n *\n * Add custom Mock functionality only and if we enabled this in the settings. I dont really want to\n * have NoopIntercepter in the chain\n *\n */\nexport function makeHttpClientHandler(ngBackend: HttpBackend, config: AppConfig,\n                                      mockInterceptor: HttpMockInterceptor,\n                                      interceptors: HttpInterceptor[] | null = []): HttpHandler {\n    if (config.getBoolean(AppConfig.ConnectionUseMockServer)) {\n\n        mockInterceptor.loadRoutes();\n        interceptors = [...interceptors, mockInterceptor];\n    }\n\n    if (!interceptors) {\n        return ngBackend;\n    }\n    return interceptors.reduceRight(\n        (next, interceptor) => new MockInterceptorHandler(next, interceptor), ngBackend);\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport * as objectPath from 'object-path';\nimport {isBlank, isString, isStringMap} from './lang';\n\n\n/**\n * The FieldPath is utility class for representing of a dotted fieldPath.\n *\n * A String such as \"foo.bar.baz\" can be used to access a value on a target object.\n *\n */\nexport class FieldPath\n{\n    _fieldPaths: string[];\n    private objectPathInstance: any;\n\n    /**\n     *\n     * Sets a value to target objects\n     *\n     */\n    static setFieldValue(target: any, field: string, value: any): void\n    {\n        let fp = new FieldPath(field);\n        fp.setFieldValue(target, value);\n    }\n\n\n    /**\n     * Reads a value from target objects\n     */\n    static getFieldValue(target: any, field: string): any\n    {\n        let fp = new FieldPath(field);\n        let value = fp.getFieldValue(target);\n\n        if (field === '$toString') {\n            return value();\n        }\n        return value;\n    }\n\n    constructor(private _path: string)\n    {\n        this._fieldPaths = isBlank(_path) ? [] : _path.split('.');\n        this.objectPathInstance = (<any>objectPath)['create']({includeInheritedProps: true});\n    }\n\n    /**\n     *  One of the main reason why I have this is not only to iterate thru dotted field path but\n     * mainly to be able to set naturally value into a nested maps like :\n     *\n     *  fieldName.fieldNameMap.fieldKey => it will access fieldName on the target, from there it\n     * reads FieldNameMap since fieldName nested objects and sets a new value identified by Map key\n     * fieldKey\n     *\n     *  ```\n     *  class MyClass {\n     *      fieldName:NestedObject\n     *\n     *  }\n     *\n     *  class NestedObject {\n     *      fieldNameMap:Map<key, value>;\n     *  }\n     *\n     *  ```\n     * use field value for assignment so keys of form \"a.b.c\" will go in nested Maps\n     */\n    setFieldValue(target: any, value: any): void\n    {\n        // implement the same thing what we have on the get, if Map set field into map\n        if (this._fieldPaths.length > 1 && !(target instanceof Map)) {\n\n            let path = this._fieldPaths.slice(0, this._fieldPaths.length - 1).join('.');\n            let objectToBeUpdated = this.objectPathInstance.get(target, path);\n            if (objectToBeUpdated instanceof Map) {\n                objectToBeUpdated.set(this._fieldPaths[this._fieldPaths.length - 1], value);\n            } else {\n                this.objectPathInstance.set(target, this._path, value);\n            }\n        }\n\n        if (target instanceof Map) {\n            let mapTarget: Map<string, any> = target;\n            // handle Nested Map\n            if (this._fieldPaths.length > 1) {\n                let path = this._fieldPaths.splice(0, 1);\n\n                let nestedMap: Map<string, any> = mapTarget.get(path[0]);\n                if (isBlank(nestedMap)) {\n                    nestedMap = new Map<string, any>();\n                    mapTarget.set(path[0], nestedMap);\n                }\n                this.setFieldValue(nestedMap, value);\n            } else {\n                target.set(this._fieldPaths[0], value);\n            }\n        } else {\n            this.objectPathInstance.set(target, this._path, value);\n        }\n    }\n\n    /**\n     * The same reason as for SetFieldValue. Need to be able to read value by dotted path as well\n     * as ready value from Maps.\n     *\n     * todo: this is quick and dirty implementation - need to write better solution\n     */\n    getFieldValue(target: any): any\n    {\n        let value: any;\n        for (let i = 0; i < this._fieldPaths.length; i++) {\n            if ((isStringMap(target) || isString(target)) && !(target instanceof Map)) {\n                value = this.objectPathInstance.get(target, this._fieldPaths[i]);\n                target = value;\n            } else if (target instanceof Map) {\n                let targetMap: Map<string, any> = target;\n                value = targetMap.get(this._fieldPaths[i]);\n            }\n\n            // just tweak to be able to access maps field.someMapField.mapKey\n            // I want this to get the element from the map\n            if (value instanceof Map && (i + 1) < this._fieldPaths.length) {\n                let mapValue = <Map<string, any>> value;\n                return mapValue.get(this._fieldPaths[i + 1]);\n            }\n        }\n        return value;\n    }\n\n\n    get path(): string\n    {\n        return this._path;\n    }\n\n    toString(): string\n    {\n        return this._path;\n    }\n\n}\n\n","/**\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\nimport {isBlank} from './utils/lang';\nimport {AppConfig} from './config/app-config';\nimport {Meta as MetaTags, Title} from '@angular/platform-browser';\nimport {OnInit} from '@angular/core';\n\n\n/**\n * Notion of having `AribaApplication` class came from  a simple requirement that every single\n * application needs a common way how to initialize.\n *\n * We want to be more application specific therefore we don't want to have generic names such as\n * `app.component or app.module`, the root component should be named based on what it is doing\n * or what is real application name e.g.: TodoApp, SourcingApp, etcs. and these application will\n * inherit from `AribaApplication` to get some common behavior.\n *\n * Specific application types will extends this class to add more behavior.\n *\n * There are two types of bootstrapping and passing environment parameters to the application:\n *\n * -  During AribaCoreUI import:\n *\n * ### example\n *\n * ```ts\n *      AribaCoreModule.forRoot({\n *                  'app.title': 'Playground Application',\n *                  'asset-folder': 'playground/assets',\n *                  'metaui.rules.file-names': ['Application', 'Layout'],\n *                  'restapi.context': '/myService/',\n *                  'connection.mock-server.enabled': true,\n *                  'connection.mock-server.routes': ['users'],\n *              }),\n *\n * ```\n *  Use this to pass some static properties.\n *\n *\n * -  From AribaApplication :\n *\n *  When you have specific type of applications that needs more settings you inherit from this\n *  class to extend its behavior and then use it for your applications to share common behavior\n *\n * ### example\n *\n *  ```ts\n *\n *     export class FacebookApplication extends AribaApplication {\n *\n *         protected appId: string = '.....';\n *\n *\n *          protected initialize(): void\n *          {\n *              super.initialize();\n *\n *              this.appId = readAppIdfromEnv();\n *\n *              this.appConfig.set('facebook.appId', this.appId );\n *\n *              this.registerFBAuthenticator();\n *\n *          }\n *\n *     }\n *\n *  ```\n *  Once you defined your type of application, then you can start creating applications that inherit\n *  from this `FacebookApplication`. Root App component\n *\n *\n * ```ts\n *      @Component({...})\n *      export PictureAppComponent extends FacebookApplication {\n *             ...\n *\n *      }\n *\n *\n *\n *     @NgModule({ bootstrap: [PictureAppComponent] })\n *     export class PictureAppModule {\n *\n *     }\n *\n *\n * ```\n *\n */\nexport class AribaApplication implements OnInit\n{\n\n    /**\n     * Title service for setting page title\n     */\n    title: Title;\n\n\n    /**\n     * Meta service for adding and updating page meta tags\n     */\n    metaTags: MetaTags;\n\n\n    constructor(protected appConfig: AppConfig)\n    {\n        this.metaTags = this.appConfig.injector.get(MetaTags);\n        this.title = this.appConfig.injector.get(Title);\n\n\n    }\n\n\n    ngOnInit(): void\n    {\n        this.initialize();\n    }\n\n    /**\n     * Current default behavior just sets a title for the application\n     */\n    protected initialize(): void\n    {\n        let title: string = this.appConfig.get(AppConfig.AppTitle);\n        if (isBlank(title)) {\n            title = 'Ariba Application';\n        }\n        this.title.setTitle(title);\n\n    }\n}\n"]}