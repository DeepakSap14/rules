{"version":3,"file":"aribaui-components.js.map","sources":["ng://@aribaui/components/core/embedded-item.ts","ng://@aribaui/components/core/generic-container.component.ts","ng://@aribaui/components/core/base.component.ts","ng://@aribaui/components/core/base-form.component.ts","ng://@aribaui/components/widgets/string/string.component.ts","ng://@aribaui/components/core/component-registry.service.ts","ng://@aribaui/components/core/include-component.directive.ts","ng://@aribaui/components/core/error-manager.service.ts","ng://@aribaui/components/core/error-messages/error-messages.component.ts","ng://@aribaui/components/core/modal-service/modal.service.ts","ng://@aribaui/components/core/modal-service/modal/modal.component.ts","ng://@aribaui/components/core/pipes/currency-format.pipe.ts","ng://@aribaui/components/core/on-ngfor-set.directive.ts","ng://@aribaui/components/core/dom-utils.service.ts","ng://@aribaui/components/core/infite-scroll/infite-scroll.component.ts","ng://@aribaui/components/core/aw-name/aw-name.store.ts","ng://@aribaui/components/core/aw-name/aw-name.directive.ts","ng://@aribaui/components/core/core.module.ts","ng://@aribaui/components/core/modal-service/modal-container.ts","ng://@aribaui/components/core/data/datatype-registry.service.ts","ng://@aribaui/components/core/data/array-data-provider.ts","ng://@aribaui/components/core/data/data-providers.ts","ng://@aribaui/components/core/data/data-finders.ts","ng://@aribaui/components/core/data/data-source.ts","ng://@aribaui/components/layouts/five-zone-layout.component.ts","ng://@aribaui/components/layouts/form-table/form-row/form-row.component.ts","ng://@aribaui/components/layouts/form-table/form-table.component.ts","ng://@aribaui/components/layouts/form-table/form-table.module.ts","ng://@aribaui/components/widgets/input-field/input-field.component.ts","ng://@aribaui/components/widgets/string/string.module.ts","ng://@aribaui/components/widgets/input-field/input-field.module.ts","ng://@aribaui/components/widgets/basic-navigator/basic-navigator.component.ts","ng://@aribaui/components/widgets/button/button.component.ts","ng://@aribaui/components/widgets/button/button.module.ts","ng://@aribaui/components/widgets/basic-navigator/basic-navigator.module.ts","ng://@aribaui/components/widgets/card/card.component.ts","ng://@aribaui/components/widgets/card/card-title/card-title.component.ts","ng://@aribaui/components/widgets/card/card.module.ts","ng://@aribaui/components/widgets/checkbox/checkbox.component.ts","ng://@aribaui/components/widgets/checkbox/check-box.module.ts","ng://@aribaui/components/widgets/check-box-list/check-box-list.component.ts","ng://@aribaui/components/widgets/check-box-list/check-box-list.module.ts","ng://@aribaui/components/widgets/hyperlink/hyperlink.component.ts","ng://@aribaui/components/widgets/hyperlink/hyperlink.module.ts","ng://@aribaui/components/widgets/chooser/chooser-selection-state.ts","ng://@aribaui/components/widgets/chooser/chooser-state.ts","ng://@aribaui/components/widgets/chooser/chooser-data-source.ts","ng://@aribaui/components/widgets/chooser/chooser.component.ts","ng://@aribaui/components/widgets/chooser/chooser.module.ts","ng://@aribaui/components/widgets/dropdown/dropdown.component.ts","ng://@aribaui/components/widgets/dropdown/dropdown.module.ts","ng://@aribaui/components/widgets/currency/currency.component.ts","ng://@aribaui/components/widgets/currency/currency.module.ts","ng://@aribaui/components/widgets/date-and-time/date-and-time.component.ts","ng://@aribaui/components/widgets/date-and-time/data-and-time.module.ts","ng://@aribaui/components/widgets/dialog/dialog-header.component.ts","ng://@aribaui/components/widgets/dialog/dialog-footer.component.ts","ng://@aribaui/components/widgets/dialog/dialog.component.ts","ng://@aribaui/components/widgets/dialog/dialog.module.ts","ng://@aribaui/components/widgets/generic-chooser/generic-chooser.component.ts","ng://@aribaui/components/widgets/radio-button-list/radio-button-list.component.ts","ng://@aribaui/components/widgets/radio-button/radio-button.component.ts","ng://@aribaui/components/widgets/radio-button/radio-button.module.ts","ng://@aribaui/components/widgets/radio-button-list/radio-button-list.module.ts","ng://@aribaui/components/widgets/generic-chooser/generic-chooser.module.ts","ng://@aribaui/components/widgets/outline/outline-state.ts","ng://@aribaui/components/widgets/outline/outline-for.component.ts","ng://@aribaui/components/widgets/outline/outline-control/outline-control.component.ts","ng://@aribaui/components/widgets/outline/outline-for.module.ts","ng://@aribaui/components/widgets/text-area/text-area.component.ts","ng://@aribaui/components/widgets/text-area/text-area.module.ts","ng://@aribaui/components/widgets/page-notification/page-notification.component.ts","ng://@aribaui/components/widgets/page-notification/page-notification.module.ts","ng://@aribaui/components/widgets/page-wrapper/page-events.ts","ng://@aribaui/components/widgets/page-wrapper/page-lifecycle.service.ts","ng://@aribaui/components/widgets/page-wrapper/page-wrapper.ts","ng://@aribaui/components/widgets/page-wrapper/sidenav/sidenav.component.ts","ng://@aribaui/components/widgets/page-wrapper/page-header/page-header.component.ts","ng://@aribaui/components/widgets/page-wrapper/page-footer/page-footer.component.ts","ng://@aribaui/components/widgets/page-wrapper/object-page-wrapper/object-page-wrapper.component.ts","ng://@aribaui/components/widgets/page-wrapper/page-actions/page-actions.component.ts","ng://@aribaui/components/widgets/page-wrapper/page-content/page-content.component.ts","ng://@aribaui/components/widgets/stepper/stepper.component.ts","ng://@aribaui/components/widgets/stepper/step/step.component.ts","ng://@aribaui/components/widgets/stepper/stepper.module.ts","ng://@aribaui/components/widgets/page-wrapper/page-wrapper.module.ts","ng://@aribaui/components/widgets/rich-text-area/rich-text-area.component.ts","ng://@aribaui/components/widgets/rich-text-area/rich-text-area.module.ts","ng://@aribaui/components/widgets/section/section.component.ts","ng://@aribaui/components/widgets/section/section.module.ts","ng://@aribaui/components/widgets/datatable2/column/dt-column.component.ts","ng://@aribaui/components/widgets/datatable2/header/header.component.ts","ng://@aribaui/components/widgets/datatable2/column/detail-row/dt-detail-row.component.ts","ng://@aribaui/components/widgets/datatable2/column/detail-row-expander/dt-detail-row-expander.component.ts","ng://@aribaui/components/widgets/datatable2/aw-datatable.ts","ng://@aribaui/components/widgets/datatable2/datatable2-data-source.ts","ng://@aribaui/components/widgets/datatable2/column/multi-select/dt-multi-select-column.component.ts","ng://@aribaui/components/widgets/datatable2/column/single-select/dt-single-select-column.component.ts","ng://@aribaui/components/widgets/datatable2/datatable2.component.ts","ng://@aribaui/components/widgets/datatable2/table-wrapper/table-wrapper.component.ts","ng://@aribaui/components/widgets/datatable2/directives/dt-cell-directives.ts","ng://@aribaui/components/widgets/datatable2/directives/dt-draggable-row.directive.ts","ng://@aribaui/components/widgets/datatable2/datatable2.module.ts","ng://@aribaui/components/widgets/confirmation/confirmation-header.component.ts","ng://@aribaui/components/widgets/confirmation/confirmation-footer.component.ts","ng://@aribaui/components/widgets/confirmation/confirmation.component.ts","ng://@aribaui/components/widgets/confirmation/confirmation.module.ts","ng://@aribaui/components/widgets/scrollable-container/scrollable-container.component.ts","ng://@aribaui/components/widgets/scrollable-container/scrollable-container.module.ts","ng://@aribaui/components/widgets/list/list.component.ts","ng://@aribaui/components/widgets/list/list.module.ts","ng://@aribaui/components/widgets/wizard-progress/wizard-progress.component.ts","ng://@aribaui/components/widgets/wizard-progress/wizard-progress.module.ts","ng://@aribaui/components/widgets/toggle-switch/toggle-switch.component.ts","ng://@aribaui/components/widgets/toggle-switch/toggle-switch.module.ts","ng://@aribaui/components/widgets/overlay/overlay.component.ts","ng://@aribaui/components/widgets/hover-card/hover-card.component.ts","ng://@aribaui/components/spy-lifecycle.directive.ts","ng://@aribaui/components/widgets/overlay/overlay.module.ts","ng://@aribaui/components/widgets/hover-card/hover-card.module.ts","ng://@aribaui/components/ariba.component.module.ts","ng://@aribaui/components/ariba.component.provider.module.ts"],"sourcesContent":["/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    Directive,\n    EmbeddedViewRef,\n    Input,\n    OnChanges,\n    SimpleChanges,\n    TemplateRef,\n    ViewContainerRef\n} from '@angular/core';\nimport {isPresent} from '@aribaui/core';\n\n\n/**\n * When we have a custom component like dropdown, radiobuttonlist and\n * many more we want to provide a custom content to it like so:\n *\n * ```\n *  <aw-dropdown [list]=\"listOfUsers\" let somehowGetItemOut>\n *      {{item.userName}}\n *\n *   <aw-dropdown\n *\n * ```\n * Who else would know how to render list of objects..\n *\n * But its not possible in current form. if I do not provide Angular some as they call it this\n * syntactic sugar *,\n *\n *\n * ```\n *  <aw-dropdown *mySugerDirective=.....>\n *      {{item.userName}}\n *\n *   <aw-dropdown\n * ```\n *\n *\n * then angular will not know  inside is a template and I wont be able to get hold of TemplateRef\n * inside the component\n *\n * So the only way I found (expecting I do not want to change anything in terms of bindings and the\n * signature I use it. I have to use it like this:\n *\n * ```\n *  <aw-dropdown [list]=\"listOfUsers\" let somehowGetItemOut>\n *      <ng-template let-item> {{item.userName}}</ng-template>\n *\n *   <aw-dropdown\n *\n * ```\n *\n *  This way it could work. Since I am inside ngFor I want to render the item into the correct\n * viewContainer of ngFor's current item.\n *\n *  This way I can also expose item outside using Angular's special local variable called:\n * $implicit.\n *\n * This gets even more complex if we try to pass this template 2 levels down, like in case of\n * RadioButtonList. But later on I might want to refactor this into custom NG FOR\n *\n * @deprecated in favor of ngTemplateOutlet (will be removed in the next version)\n *\n */\n@Directive({selector: '[embeddedItem]'})\nexport class EmbeddedItemDirective implements OnChanges\n{\n    /**\n     * Template we want to render N-Times\n     */\n    @Input()\n    embeddedItem: TemplateRef<any>;\n\n    @Input()\n    set item(item: any)\n    {\n        this._implicitValue = item;\n    }\n\n    private _implicitValue: any;\n    private _viewRef: EmbeddedViewRef<any>;\n\n\n    constructor(private _viewContainer: ViewContainerRef)\n    {\n    }\n\n    /**\n     *\n     */\n    ngOnChanges(changes: SimpleChanges): void\n    {\n        if (isPresent(this._viewRef)) {\n            this._viewContainer.remove(this._viewContainer.indexOf(this._viewRef));\n        }\n\n        if (isPresent(this.embeddedItem)) {\n            let context = new EmbededItem(this._implicitValue);\n            this._viewRef = this._viewContainer.createEmbeddedView(this.embeddedItem, context);\n        }\n    }\n}\n\n\n/**\n * Wrapper class around Angular's EmbeddedViewRef.context()\n *\n */\nexport class EmbededItem\n{\n    constructor(public $implicit: any)\n    {\n    }\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, DoCheck, ElementRef, Input, OnInit, Renderer2} from '@angular/core';\nimport {isBlank, isPresent, MapWrapper} from '@aribaui/core';\n\n/**\n * GenericContainerComponent is used by include-component.directive to dynamically create an\n * HTMLElement and use this element to wrap a child component. This is very useful when we want to\n * modify a child by wrapping it with a border, a background, or bold its text.\n *\n * The wrapper element is dynamically created. It's element is specified by the tagName property in\n * the bindings @Input.\n *\n *  ### Example.  Directly in html\n *\n *   app.html\n *      <aw-generic-container tagName=\"tagName\" bindings=\"bindings\">\n *          <my-component ..bindings..></my-component>\n *      </aw-generic-container>\n *\n *   app.component.ts\n *\n *       tagName = (bBold) ? 'h1' : 'span';\n *       bindings = {  style: 'background-color: red' }\n *\n */\n@Component({\n    selector: 'aw-generic-container',\n    template: '<ng-content></ng-content>',\n    styles: []\n})\nexport class GenericContainerComponent implements OnInit, DoCheck\n{\n\n    /**\n     * Default tagName if none is specified inside bindings.\n     *\n     */\n    static readonly DefaultTagName = 'div';\n\n    /**\n     * Bindings to be added as attributes to the tagName element.\n     */\n    @Input()\n    bindings: Map<string, any>;\n\n    /**\n     * Element to be created that wraps it's content.\n     */\n    @Input()\n    tagName: string;\n\n    /**\n     * Native root element. Points to <aw-generic-container>\n     */\n    private nativeElement: Node;\n\n    private childElement: Node;\n\n\n    /**\n     * param renderer - Renderer is used to create 'tagName' element.\n     */\n    constructor(private renderer: Renderer2, private element: ElementRef)\n    {\n        this.nativeElement = element.nativeElement;\n    }\n\n    /**\n     * During the initialization, verify that at least one input has been set.\n     */\n    ngOnInit()\n    {\n        // If there's no input, this component wouldn't know what to do and throw exception.\n        if (isBlank(this.bindings) && isBlank(this.tagName)) {\n            throw new Error('GenericContainerComponent input bindings or tagName ' +\n                'have not been set.');\n        }\n\n        // If the tagName is blank, the get it from bindings.\n        if (isBlank(this.tagName)) {\n            this.tagName = this.bindings.get('tagName');\n            if (isBlank(this.tagName)) {\n                this.tagName = GenericContainerComponent.DefaultTagName;\n            }\n        }\n\n        // Save first added\n        this.childElement = this.nativeElement.firstChild;\n        this.doRender();\n    }\n\n    ngDoCheck(): void\n    {\n\n        if (isPresent(this.childElement) &&\n            this.childElement.parentNode !== this.nativeElement.firstChild) {\n\n            this.nativeElement.firstChild.appendChild(this.childElement);\n        }\n    }\n\n\n    /**\n     * After content has been initialized. Create the tagName element. Apply all the bindings on to\n     * the element as attribute. Finally, move the child element, <ng-content>, to inside the\n     * wrapper component.\n     */\n    private doRender()\n    {\n        const el = this.renderer.createElement(this.tagName);\n        if (isPresent(this.nativeElement)) {\n            this.renderer.appendChild(this.nativeElement, el);\n        }\n\n        // Loop through all the bindings and add them to the element.\n        MapWrapper.iterable(this.bindings).forEach((v, k) =>\n        {\n            this.renderer.setStyle(el, k, v);\n        });\n\n        // Attach the component to this divElement.\n        el.appendChild(this.childElement);\n    }\n\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {DoCheck, Input, OnChanges, OnDestroy, OnInit, SimpleChanges} from '@angular/core';\nimport {AppConfig, Environment} from '@aribaui/core';\n\n\n/**\n *  Base component shares common functionality among all the components (layouts, widgets).\n *\n */\nexport abstract class BaseComponent implements OnInit, OnChanges, DoCheck, OnDestroy\n{\n\n    /**\n     * Adds disabled flag to the component\n     *\n     */\n    @Input()\n    disabled: boolean = false;\n\n\n    /**\n     * Weather this component is visible\n     * Default is false;\n     */\n    @Input()\n    visible: boolean = false;\n\n    /**\n     * Tell  the component if we are in editing mode.\n     *\n     */\n    @Input()\n    editable?: boolean = true;\n\n    /**\n     * Every component have option to set a custom with\n     *\n     */\n    @Input()\n    width: any;\n\n    /**\n     * Every component have option to set a custom with\n     */\n    @Input()\n    height: any;\n\n    /**\n     * optional css class which can be utilized by component\n     */\n    @Input()\n    styleClass: any;\n\n    /**\n     * Removes padding from the component. Usually used when we are nesting other component with\n     * its own grid.\n     */\n    @Input()\n    omitPadding = false;\n\n    /**\n     * Class extension support register here any dynamic field that does not existing on the\n     * class/component\n     */\n    extBindings: Map<string, any>;\n\n\n    /**\n     * Prefix for the correct asset path\n     */\n    assetFolder: string = 'assets';\n\n    constructor(public env?: Environment)\n    {\n        this.extBindings = new Map<string, any>();\n        this.omitPadding = false;\n    }\n\n\n    ngOnInit(): void\n    {\n        this.assetFolder = this.env.getValue(AppConfig.AssetFolder);\n    }\n\n\n    ngOnChanges(changes: SimpleChanges): void\n    {\n    }\n\n\n    ngDoCheck(): void\n    {\n    }\n\n\n    ngOnDestroy(): void\n    {\n    }\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Environment, isBlank, isPresent, noop, uuid} from '@aribaui/core';\nimport {forwardRef, Inject, Input, Optional, PipeTransform, SkipSelf} from '@angular/core';\nimport {ControlValueAccessor, FormControl, FormGroup} from '@angular/forms';\nimport {BaseComponent} from '../core/base.component';\n\n/**\n * x-small = > 12%  = > col-1\n * small = > `\n * medium = > 50%   = > col-6\n * large = > 75%    = > col-9\n * large = > 100%   = > col-12\n *\n */\nexport type WidgetSize = 'x-small' | 'small' | 'medium' | 'large' | 'x-large';\n\nexport enum WidgetSizeColumns\n{\n    xsmall = 1,\n    small = 3,\n    medium = 6,\n    large = 9,\n    xlarge = 12\n}\n\n\n/**\n *  BaseFormComponnet extends BaseComponent for add specific form behavior\n *\n */\nexport abstract class BaseFormComponent extends BaseComponent implements ControlValueAccessor\n{\n    /*\n     *  Supported layout constants. It is expected there will be more options as we currently\n     *  support only these two there will be other variations of it. e.g. for stacked it will not\n     *  be 1 columns like it is now but multiple columns\n     *\n     */\n    static readonly LayoutStacked = 'stacked';\n    static readonly LayoutInline = 'inline';\n\n\n    /**\n     * Component name attribute. Can be used to lookup component in form.\n     */\n    @Input()\n    name: string;\n\n\n    /**\n     * Component Id. Can be used to lookup component in form.\n     */\n    @Input()\n    id: string;\n\n\n    /**\n     *\n     * Is current element visible\n     */\n    @Input()\n    hidden: boolean = false;\n\n    /**\n     * You can pass in formGroup which will be used with in the form\n     *\n     * @Input() - see getter\n     */\n    private _formGroup: FormGroup;\n\n\n    /**\n     * Renders required flex around the component\n     *\n     */\n    @Input()\n    required: boolean = false;\n\n\n    /**\n     *  a text displayed when value is empty or NULL\n     */\n    @Input()\n    placeHolder: String = '';\n\n    /**\n     * Identify if this control is used directly or if its part of some other control\n     * e.g. GenericChooser and managed by this control.\n     * Meaning State is mananged outside of this component\n     *\n     */\n    @Input()\n    isStandalone: boolean = true;\n\n\n    /**\n     * Form Control for the component. Its either inherited since it was precreated in parent\n     * component or its created based on passed 'name' and registered with the 'formGroup'\n     *\n     * When  initialize FormControl we do setValue with onlySelf:true flag and we do not emit any\n     * event outside\n     *\n     */\n    formControl: FormControl;\n\n\n    /**\n     * Formatter that can be assign to the component in order to format its input\n     */\n    formatter: PipeTransform;\n\n\n    protected onModelChanged: (_: any) => void = noop;\n    protected onModelTouched: (_: any) => void = noop;\n\n\n    /**\n     * Some of the BaseFormComponent can wrap other component and in these cases we want to\n     * inherit some of the behavior from parent\n     *\n     * @Inject(Environment) public env: Environment : is tem a workaround as without inject\n     * on this specific component it complains that Environment is unresolved symbol\n     *\n     */\n    constructor (@Inject(Environment) public env: Environment,\n                 @SkipSelf() @Optional() @Inject(forwardRef(() => BaseFormComponent))\n                 protected parentContainer: BaseFormComponent)\n    {\n        super(env);\n    }\n\n\n    ngOnInit (): void\n    {\n        super.ngOnInit();\n\n        if (isPresent(this.parentContainer)) {\n            this.formGroup = this.parentContainer.formGroup;\n            this.editable = this.parentContainer.editable;\n        }\n\n        this.checkInitForm();\n    }\n\n\n    /**\n     * Make sure that we have available formGroup and Name and ID\n     *\n     */\n    protected checkInitForm ()\n    {\n\n        if (isBlank(this.env.currentForm)) {\n            this.env.currentForm = new FormGroup({});\n        }\n\n        /**\n         * Todo: Right now I just need to initialize name , but ideally it needs to be generated\n         * number basedon some semantics app.page.component if there are more component on the page\n         * then app.page.componentNumber. Simple solution is to is to get Elementref and query it.\n         */\n        if (isBlank(this.name)) {\n            this.name = uuid();\n        }\n\n        if (isBlank(this.id)) {\n            this.id = uuid();\n        }\n\n    }\n\n    protected doRegister (name: string, value: any): FormControl\n    {\n\n        let fControl: FormControl;\n\n        if (isBlank(this.formGroup.controls[name])) {\n            this.formGroup.registerControl(name, new FormControl(value));\n            fControl = <FormControl> this.formGroup.controls[name];\n\n        } else {\n            fControl = <FormControl> this.formGroup.controls[name];\n            let updatedValue: any = isPresent(fControl.value) ? fControl.value : value;\n            fControl.patchValue(updatedValue, {onlySelf: true, emitEvent: false});\n        }\n        return fControl;\n    }\n\n\n    /**\n     * When we are dealing with Forms this is a helper method to register control\n     *\n     *\n     * @param value default value to be pre-set\n     */\n    registerFormControl (value: any)\n    {\n        this.formControl = this.doRegister(this.name, value);\n\n        if (this.disabled) {\n            this.formControl.disable();\n        }\n    }\n\n\n    @Input() get formGroup (): FormGroup\n    {\n        return isPresent(this._formGroup) ? this._formGroup : this.env.currentForm;\n    }\n\n    set formGroup (value: FormGroup)\n    {\n        this._formGroup = value;\n    }\n\n    /**\n     * Indicates if we can pass field type as a binding to the components. e.g. InputField need\n     * such type to correctly render input type=text, number\n     *\n     * todo: is this needed? can we maybe pass this to the formRow?\n     */\n    canSetType (): boolean\n    {\n        return false;\n    }\n\n\n    writeValue (value: any)\n    {\n\n    }\n\n    registerOnChange (fn: any)\n    {\n        this.onModelChanged = fn;\n    }\n\n    registerOnTouched (fn: any)\n    {\n        this.onModelTouched = fn;\n    }\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, forwardRef, Inject, Input, Optional, SkipSelf} from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser';\nimport {BaseFormComponent} from '../../core/base-form.component';\nimport {Environment} from '@aribaui/core';\n\n\n/**\n * Simple component rendering values in the read only mode. Just needed some component used\n * to render Strings in read only mode\n *\n *\n *  ### Example\n *\n * Using it inside form container along with label\n *\n *\n *  ```\n *          @Component({\n *              selector: 'userInfo' ,\n *              template: `\n *                      <aw-form-table [editable]=\"false\" >\n *                          <aw-form-row [name]=\"fieldName\"  [label]=\"label\">\n *                                 <aw-string [value]=\"inputValue\" ></aw-string>\n *                           </aw-form-row>\n *                      </aw-form-table>\n *\n *                  `\n *          })\n *          export class UserProfileComponent\n *          {\n *              inputValue: string = 'Some text';\n *              inputType: string = 'string';\n *              fieldName: string = 'firstName';\n *              label: string = 'My Name';\n *              required: boolean = true;\n *              editing: boolean = true;\n *              labelsOnTop: boolean = false;\n *\n *          }\n *\n *  ```\n *\n * You can also pass html tags.\n *\n */\n@Component({\n    selector: 'aw-string',\n    template: `\n        <span class=\"w-string-field\" [innerHTML]=\"value\"></span>\n    `,\n    styleUrls: ['string.component.scss']\n})\nexport class StringComponent extends BaseFormComponent\n{\n    /**\n     *  Value to be interpolated\n     *\n     */\n    private _value: string = '';\n\n\n    constructor(public env: Environment, private sanitizer: DomSanitizer,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => BaseFormComponent))\n                protected parentContainer: BaseFormComponent)\n    {\n        super(env, parentContainer);\n\n    }\n\n\n    @Input()\n    set value(value: any)\n    {\n        this._value = value;\n    }\n\n    get value(): any\n    {\n        return this.sanitizer.bypassSecurityTrustHtml(this._value);\n    }\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Injectable} from '@angular/core';\nimport {Environment, isStringMap} from '@aribaui/core';\n\n\n/**\n * A class holding a references to components. The methods are self-explanatory.\n *\n */\n@Injectable()\nexport class ComponentRegistry\n{\n    private _nameToType: Map<string, any> = new Map<string, any>();\n\n    constructor(private env: Environment)\n    {\n    }\n\n\n    initialize(references: any): Promise<any>\n    {\n        this.registerTypes(references);\n        let promise: Promise<any> = new Promise((resolve: any) =>\n        {\n            resolve(true);\n        });\n        return promise;\n\n    }\n\n\n    registerType(name: string, type: any): void\n    {\n        if (!this.nameToType.has(name)) {\n            this._nameToType.set(name, type);\n        }\n    }\n\n\n    registerTypes(references: any): void\n    {\n        if (!isStringMap(references)) {\n            return;\n        }\n\n        Object.keys(references).forEach((name: string) =>\n        {\n            this.registerType(name, references[name]);\n        });\n    }\n\n\n    get nameToType(): Map<string, any>\n    {\n        return this._nameToType;\n    }\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    AfterContentInit,\n    AfterViewChecked,\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Directive,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChanges,\n    ViewContainerRef\n} from '@angular/core';\nimport {assert, isBlank, isPresent, MapWrapper} from '@aribaui/core';\nimport {StringComponent} from '../widgets/string/string.component';\nimport {ComponentReference} from './component-reference';\nimport {ComponentRegistry} from './component-registry.service';\n\n/**\n * this is specific import to we can use components as components[typename] and  get back a\n * type.\n * I could not find any better dynamic way up to now\n */\n/**\n *  `IncludeComponent` directive dynamically instantiate and insert a components into the screen\n * based on the name. It can accepts bindings as well which will be automatically bound and applied\n * to the component\n *\n *  ### usage:\n *\n *  Instead of inserting component in the way:\n *\n *  ```\n *    <textfield value=\"some value\">\n *\n *  ```\n *\n *  you can do so dynamically like this:\n *\n * ```\n *  <aw-include-component 'TextfieldComponent' [bindings]=bindings ></aw-include-component>\n * ```\n *\n * This is the main building block to dynamically generated UI.\n *\n *\n * Todo: Currently the way Angular API work and we use it to create programatically components\n * is too complext we need to create everything 3 different calls to place a component to the\n * container. What I want is is to create some kind of representation of ContainerElement and this\n * can be also parent for our BaseComponent with method add and remove content. Then we could have\n * some AWContent.\n *\n * e.g.: to replace applyContentElementIfAny where we have several calls to create and add\n * component to the view.\n *\n * ```ts\n *  let containerElement = AWConcreteTemplate(viewContainer, factoryResolver)\n *  containerElement.add('Clck Me')\n * ```\n *\n * To assemble different components together - not only adding string content\n *\n * ```ts\n *  let content = new AWContent(ButtonComponent, bindingsMap)\n *  content.add('Click Me');\n *  containerElement.add(content)\n *\n * ```\n *\n * add more component hierarchy:\n *\n * ```ts\n *  let content = new AWContent(HoverCardComponnets, bindingsMap)\n *  content.add(createLayout();\n *  containerElement.add(content)\n *\n * ```\n *\n *\n *\n *\n */\n@Directive({\n    selector: 'aw-include-component'\n})\nexport class IncludeComponentDirective implements OnDestroy, OnInit, AfterViewChecked,\n    OnChanges, AfterViewInit, AfterContentInit\n{\n\n    static readonly NgContent = 'ngcontent';\n    static readonly NgContentElement = 'ngcontentElement';\n\n    /**\n     * Full component name e.g.: DropdownComponent which is going to be inserted. We need to take\n     * this name and translate it into actual TYPE. In order to do this we use a trick where we\n     * access an IMPORTED components.\n     *\n     * ```\n     * import * as components from '../components';\n     * ```\n     *\n     * Then you can retrieve a type by just components[<String Literal >] => Component TYPE\n     *\n     */\n    @Input()\n    protected name: string;\n\n    /**\n     * Provides bindings which will be passed into the component when instantiated\n     */\n    @Input()\n    protected bindings: Map<string, any>;\n\n    /**\n     * Current created component reference using ComponentFactoryResolver. We use this to access\n     * the actual component instance and Element Reference\n     */\n    protected currentComponent: ComponentRef<any>;\n\n    /**\n     * I use this flag to identify that component is rendering for first time or its updated during\n     * change detection\n     *\n     */\n    protected initRenderInProgress = false;\n\n    /**\n     * Not sure if we need this, but want to keep it here or maybe move it to some service so we\n     * can cache created components and maybe reuse them.\n     *\n     */\n    protected componentReferences: Map<string, ComponentReference> =\n        new Map<string, ComponentReference>();\n\n\n    /**\n     * Need to cache the resolved component reference so we dont call ComponentFactoryResolver\n     * everything we want to refresh a screen\n     */\n    resolvedComponentRef: ComponentReference;\n\n\n    constructor(public viewContainer: ViewContainerRef,\n                public factoryResolver: ComponentFactoryResolver,\n                public cd: ChangeDetectorRef,\n                public compRegistry: ComponentRegistry)\n    {\n\n        this.bindings = new Map<string, any>();\n    }\n\n    ngOnInit(): void\n    {\n\n        this.initRenderInProgress = true;\n        // todo: check if this the right lifecycle callback, this is called only once and you want\n        // to probably listen for changes, and change dection decide there is some change and we\n        // need to re-draw the view\n        this.viewContainer.clear();\n        this.doRenderComponent();\n    }\n\n\n    ngOnChanges(changes: SimpleChanges): void\n    {\n        if (isPresent(changes['name']) &&\n            (changes['name'].currentValue !== changes['name'].previousValue)) {\n            this.viewContainer.clear();\n            this.doRenderComponent();\n        }\n    }\n\n\n    ngAfterViewChecked(): void\n    {\n        this.initRenderInProgress = false;\n    }\n\n\n    ngAfterViewInit(): void\n    {\n        // check to see if we need to render and reposition DOM element both for wrapper and\n        // content\n        this.createWrapperElementIfAny();\n        this.createContentElementIfAny();\n    }\n\n\n    ngAfterContentInit(): void\n    {\n    }\n\n    /**\n     * Handles a case where we need to resolve additional component and wrap the current one.\n     * Just like reateContentElementIfAny() this method needs to be executed after all\n     * is created and initialized (inside the ngAfterViewInit() )\n     *\n     */\n    protected createWrapperElementIfAny(): void\n    {\n    }\n\n    /**\n     * Renders a component into actual View Container. The process goes as this.\n     *  1. We retrieve component Type based on the component name, which creates componentRef\n     *  2. Place the component onto the screen\n     *  3. Read component metadata, mainly INPUTs and apply bindings for each of them\n     *  4. Manually spin change detection to update the screen. Mainly for case where I need to\n     * redraw a screen\n     */\n    protected doRenderComponent(): void\n    {\n        this.placeTheComponent();\n        // this.currentComponent.changeDetectorRef.detach();\n\n        this.applyBindings(this.componentReference(), this.currentComponent, this.bindings);\n        // this.currentComponent.changeDetectorRef.detectChanges();\n\n        // Still not sure about this what all I should release here.\n        this.currentComponent.onDestroy(() =>\n        {\n            // this.bindings.clear();\n            // this.bindings = undefined;\n            //\n            // this.componentReferences.clear();\n            // this.componentReferences = undefined;\n\n            this.destroy();\n        });\n    }\n\n\n    /**\n     * Place actual component onto the screen using ViewContainerRef\n     *\n     */\n    protected placeTheComponent(): void\n    {\n        let reference = this.componentReference();\n        this.currentComponent = this.viewContainer.createComponent(reference.resolvedCompFactory);\n    }\n\n\n    /**\n     * When inserting Component that needs to have a content like e.g. hyperlink or button\n     *\n     * ```\n     *   <button> MY NG CONTENT </button>\n     *\n     * ```\n     *  this method applies and insert a child content into the main component. This method insert\n     * a simple string. We are not wrapping existing component with another component here.\n     *\n     * @return need to run detect changes ? default is false\n     */\n    protected createContentElementIfAny(): boolean\n    {\n\n        let detectChanges = false;\n        let ngContent = this.ngContent();\n        let ngContentElement = this.ngContentElement();\n        if (isPresent(ngContent)) {\n            let awContentComponent = this.factoryResolver.resolveComponentFactory(StringComponent);\n            let component = this.viewContainer.createComponent(awContentComponent, 0);\n\n            (<StringComponent>component.instance).value = ngContent;\n            let awContentContainer = this.currentComponent.location.nativeElement.firstChild;\n            awContentContainer.appendChild(component.location.nativeElement);\n\n            detectChanges = true;\n        } else if (isPresent(ngContentElement)) {\n            // console.log('content Element: ', ngContentElement);\n        }\n\n        return detectChanges;\n    }\n\n\n    /**\n     *\n     * Retrieve a NG Content from binding list and remove it so it its not prepagated down when\n     * applying other bindings.\n     *\n     */\n    protected ngContent(): string\n    {\n        let content: any;\n        if (isPresent(content = this.bindings.get(IncludeComponentDirective.NgContent))) {\n            this.bindings.delete(IncludeComponentDirective.NgContent);\n        }\n        return content;\n    }\n\n\n    protected ngContentElement(): string\n    {\n        let content: any;\n        if (isPresent(content = this.bindings.get(IncludeComponentDirective.NgContentElement))) {\n            this.bindings.delete(IncludeComponentDirective.NgContentElement);\n        }\n        return content;\n    }\n\n    /**\n     * We need to convert a component name to actual a type and then use ComponentFactoryResolver\n     * to instantiate a a component and save its information into our component references. The\n     * reason why we have this component reference is we need to store Angular's component metadata\n     * so we can iterate thru all the inputs and bind them to the context.\n     *\n     * returns {ComponentReference} a reference representing a compoent currently being rendered\n     */\n    protected componentReference(): ComponentReference\n    {\n        if (isPresent(this.resolvedComponentRef)) {\n            return this.resolvedComponentRef;\n        }\n        let currType = this.resolveComponentType();\n        let componentFactory: ComponentFactory<any> = this.factoryResolver\n            .resolveComponentFactory(currType);\n\n        let componentMeta: Component = this.resolveDirective(componentFactory);\n        let compReference: ComponentReference = {\n            metadata: componentMeta,\n            resolvedCompFactory: componentFactory,\n            componentType: currType,\n            componentName: this.name\n        };\n\n        this.resolvedComponentRef = compReference;\n        return compReference;\n    }\n\n    /**\n     * Iterates thru ComponentMetadata @Inputs() and check if we have available binding inside the\n     * 'this.bindings'\n     */\n    protected applyBindings(cRef: ComponentReference,\n                            component: ComponentRef<any>,\n                            bindings: Map<string, any>): void\n    {\n        let inputs: string[] = cRef.metadata.inputs;\n\n        if (isBlank(inputs) || inputs.length === 0) {\n            return;\n        }\n        // should we do any type conversion?\n        MapWrapper.iterable(bindings).forEach((v, k) =>\n        {\n\n            if (isPresent(component.instance[k])) {\n                component.instance[k] = v;\n            }\n        });\n    }\n\n\n    /**\n     * Resolves a component Type based on the string literal\n     *\n     * @returns component type used by `ComponentFactoryResolver`\n     *\n     * todo: rename the method so its clear that it returns component type based on string.\n     */\n    protected resolveComponentType(): any\n    {\n        let componentType = this.compRegistry.nameToType.get(this.name);\n\n        if (isBlank(componentType)) {\n            assert(false, this.name + ' component does not exists. Create Dummy Component instead' +\n                ' of throwing this error');\n            return;\n        }\n        return componentType;\n    }\n\n\n    protected resolveDirective(compFactory: ComponentFactory<any>): Component\n    {\n        let compMeta: Component = {\n            inputs: [],\n            outputs: []\n        };\n\n        if (isPresent(compFactory.inputs) && compFactory.inputs.length > 0) {\n\n            compFactory.inputs.forEach((input: {propName: string, templateName: string}) =>\n            {\n                compMeta.inputs.push(input.propName);\n            });\n        }\n\n        if (isPresent(compFactory.outputs) && compFactory.outputs.length > 0) {\n\n            compFactory.outputs.forEach((output: {propName: string, templateName: string}) =>\n            {\n                compMeta.outputs.push(output.propName);\n            });\n        }\n        return compMeta;\n    }\n\n\n    ngOnDestroy(): void\n    {\n        if (isPresent(this.currentComponent)) {\n            this.currentComponent.destroy();\n            this.currentComponent = undefined;\n        }\n\n        if (isPresent(this.viewContainer)) {\n            this.viewContainer.clear();\n        }\n\n    }\n\n    private destroy(): void\n    {\n        if (isPresent(this.currentComponent)) {\n            this.currentComponent = null;\n            this.resolvedComponentRef = null;\n        }\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Injectable} from '@angular/core';\nimport {StringWrapper} from '@aribaui/core';\n\n/**\n * Error Manager is a service used by Forms components to map error codes into meaningful messages.\n * Currently it does not have much but once we plug in localization it will make more sense\n *\n *\n * todo: Once ng-translate is implemented replace this with ng-translate functionality so we can\n * externalize these messages into locale files.\n *\n */\n@Injectable()\nexport class ErrorManagerService\n{\n    messages: {[key: string]: any};\n\n    constructor()\n    {\n        this.messages = {\n            'required': 'Required field',\n            'minlength': 'Field does not meet minimum length',\n            'maxlength': 'Field does not meet maximum length',\n            'customMsg': '%s',\n            'metavalid': '%s'\n        };\n    }\n\n\n    errorMessage(validatorName: string, validatorValue?: any)\n    {\n        let message = this.messages[validatorName];\n        if (StringWrapper.contains(message, '%s')) {\n            // todo: use ng-translate with proper message formatting\n\n            return StringWrapper.replace(message, '%s', validatorValue.msg);\n        }\n        return message;\n    }\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, Input, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {isPresent} from '@aribaui/core';\nimport {ErrorManagerService} from '../../core/error-manager.service';\n\n/**\n * ErrorMessagesComponent is used by form's component like FormRow to print its validation errors.\n * Its  based on ModelDriven (Reactive forms) and it reads errors from FormControl\n *\n *\n *\n */\n@Component({\n    selector: 'a-error-messages',\n    template: `\n            <div class=\"ui-g\">\n                    <small *ngIf=\"hasMessage()\"\n                        class=\"ui-g-12 ui-message ui-messages-error ui-corner-all\">\n                        {{ errorMsg }}\n                    </small>\n            </div>\n    `,\n    styleUrls: ['error-messages.component.scss']\n})\nexport class ErrorMessagesComponent implements OnInit\n{\n\n    /**\n     * Current form FormControll to check for Errors\n     */\n    @Input()\n    control: FormControl;\n\n\n    constructor(private errManager: ErrorManagerService)\n    {\n    }\n\n    ngOnInit()\n    {\n\n    }\n\n\n    hasMessage(): boolean\n    {\n        let msg = this.errorMsg;\n        return isPresent(msg);\n    }\n\n    /**\n     * Retrieve a messages if any registered by added validators\n     *\n     */\n    get errorMsg(): string\n    {\n        for (let propertyName in this.control.errors) {\n            if (this.control.errors.hasOwnProperty(propertyName) && this.control.touched) {\n                return this.errManager.errorMessage(propertyName,\n                    this.control.errors[propertyName]);\n            }\n        }\n    }\n\n    /**\n     *\n     * Show errors? We currently shows errors if the control is not valid, it was touched by user.\n     * Most of the type on blur event  and at last its not pristine anymore (its dirty)\n     *\n     */\n    showErrors(): boolean\n    {\n        return !this.control.valid && !this.control.pristine && this.control.touched;\n    }\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Injectable,\n    Type,\n    ViewContainerRef\n} from '@angular/core';\n\n/**\n * Modal service is used to to create modal dialogs. It creates modal dialogs dynamically.\n * The service also keeps track of the created modal dialog and can close it by calling the\n * service's close()\n *\n * Modal service requires a ViewContainer to insert newly created modals. This is taken care\n * by the ModalComponent.\n *\n * Usage:\n *     Add   <aw-modal></aw-modal>  into your application main html. It needs to be on every\n *     page where a modal dialog will appear.\n *\n *    1.  Popup a dialog without creating your own component.\n *        Use the existing DialogComponent in widgets.\n *\n *             this.modalService.open<DialogComponent>(DialogComponent, {\n *                     title: 'My Popup Title',\n *                     body: 'My Popup Body'\n *              });\n *\n *\n *   2.   Creating your own Dialog Component to popup.\n *\n *         let componentRef = this.modalService.open<MyDialogComponent>(MyDialogComponent,\n * {inputs});\n *\n *          @Component({\n *                selector: 'aw-mydialog' ,\n *                           template: `\n *                                         <aw-dialog (onClose)=\"closePopup()\">\n *                                              <ng-template #titleTemplate>\n *                                                 <span><i class=\"fa fa-envira\" ></i>This is my\n *     Title </span>\n *                                              </ng-template>\n *                                              <ng-template #bodyTemplate>\n *                                                 <span><i class=\"fa fa-envira\" ></i>This is my\n *     Body </span>\n *                                              </ng-template>\n *                                        </aw-dialog>\n *                                     `\n *         })\n *         export class MyDialogComponent extends DialogComponent implements OnInit {\n *                     constructor(private modalService: ModalService) {\n *                          super();\n *                       }\n *                     ngOnInit() { }\n *\n *                     closePopup() {\n *                            this.modalService.close();\n *                      }\n *         }\n */\n@Injectable()\nexport class ModalService\n{\n    /**\n     * This is a static list of output parameter from Dialog, Confirmation components\n     * that needs to be handled.\n     *\n     */\n    private static OUTPUT_PARAMETERS: string[] = ['onClose', 'onConfirm', 'onCancel'];\n\n\n    /**\n     * Container for the newly created modal. This is passed in through the\n     * registerViewContainerRef().\n     */\n    private vcRef: ViewContainerRef;\n\n    /**\n     * Storing the created modal instance.\n     */\n    private instance: any;\n\n    /**\n     * DI ComponentFactoryResolver to be used to create modal component.\n     *\n     * @param cfr\n     */\n    constructor(private cfr: ComponentFactoryResolver)\n    {\n    }\n\n    /**\n     *  PlaceHolder for modal to be inserted.\n     *\n     * @param vcRef\n     */\n    registerViewContainerRef(vcRef: ViewContainerRef): void\n    {\n        this.vcRef = vcRef;\n    }\n\n    /**\n     * Opens the modal dialog by dynamically creating the component and adding it to vcRef.\n     *\n     */\n    open<T>(component: Type<T>, parameters?: any): ComponentRef<T>\n    {\n        const cf: ComponentFactory<T> = this.cfr.resolveComponentFactory(component);\n        let componentRef: ComponentRef<T> = this.vcRef.createComponent(cf);\n\n        // Auto set visiblity to true. So that the Dialog will display\n        parameters = (parameters) ? parameters : {};\n        parameters['visible'] = true;\n\n        // Handle output parameters.\n        ModalService.OUTPUT_PARAMETERS.forEach((param) =>\n        {\n            if (parameters[param]) {\n                (<any>componentRef.instance)[param].subscribe(parameters[param]);\n                delete parameters[param];\n            }\n        });\n\n        Object.assign(componentRef.instance, parameters);\n\n        // had to cast it in order to avoid any index Error\n        // Attach a destroy method to the newly created component.\n        (<any>componentRef.instance)['destroy'] = () =>\n        {\n            componentRef.destroy();\n        };\n        // Save the instance, so it can be destroyed later.\n        this.instance = componentRef;\n\n        return componentRef;\n    }\n\n    /**\n     * Calling close() will remove the modal from view.\n     */\n    close()\n    {\n        if (this.instance) {\n            this.instance.destroy();\n            this.instance = null;\n        }\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, OnInit, ViewChild, ViewContainerRef} from '@angular/core';\nimport {ModalService} from '../modal.service';\n\n\n/**\n * Place holder for all modal dialogs. This component works with the modalService by providing\n * a place holder for it to inject Dialog component into.\n */\n@Component({\n    selector: 'aw-modal',\n    templateUrl: 'modal.component.html',\n    styleUrls: ['modal.component.scss']\n})\nexport class ModalComponent implements OnInit\n{\n\n    @ViewChild('modal', {read: ViewContainerRef})\n    viewContainerRef: ViewContainerRef;\n\n    constructor(private modalService: ModalService)\n    {\n    }\n\n    ngOnInit()\n    {\n        this.modalService.registerViewContainerRef(this.viewContainerRef);\n    }\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {CurrencyPipe} from '@angular/common';\nimport {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * This currency formatter will ignore null and empty string for value.\n * Issue : https://github.com/angular/angular/issues/8694  DI fails when extends other classes\n */\n@Pipe({\n    name: 'currencyFormat',\n    pure: false\n})\nexport class CurrencyFormatPipe implements PipeTransform\n{\n\n    constructor(private currencyPipe: CurrencyPipe)\n    {\n    }\n\n    transform(value: string, ...args: any[]): any\n    {\n\n        // Default values\n        let currencyCode = 'USD', symbolDisplay = true, digits = '1.0-2';\n\n        if (!value || value.length === 0) {\n            return value;\n        }\n\n        if (args && args.length > 0) {\n            let code = args[0];\n            if (code && code.length > 0) {\n                currencyCode = code;\n            }\n        }\n\n        return this.currencyPipe.transform(value, currencyCode, symbolDisplay, digits);\n    }\n}\n\n","/**\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\nimport {Directive, EventEmitter, Output} from '@angular/core';\n\n\n/**\n * Simple utility directive that is used by NG For cycle in situation where we need to call a\n * or execute some logic after each iteration\n */\n@Directive({\n    selector: '[ngForSet]'\n})\nexport class NgForSetDirective\n{\n\n    @Output()\n    onItem: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor()\n    {\n    }\n\n    ngOnInit()\n    {\n        this.onItem.emit('--');\n    }\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Injectable} from '@angular/core';\nimport {isPresent} from '@aribaui/core';\n\n\n/**\n * Simple convenient service to work with the dom. All the future logic related to DOM manipulation\n * or traversal should be put into this service\n *\n */\n@Injectable()\nexport class DomUtilsService\n{\n\n    constructor ()\n    {\n    }\n\n    /**\n     * goes all the way up to the body and checks if there is a element identified by a 'selector'\n     *\n     */\n    hasParent (nativeElement: any, selector: string): boolean\n    {\n        return isPresent(this.closest(nativeElement, selector));\n    }\n\n\n    /**\n     *  Travels all the way up to the BODY and retrieve element identified by 'selector' or NULL if\n     * not found\n     *\n     */\n    closest (nativeElement: any, selector: string): any\n    {\n        let firstChar = selector.charAt(0);\n\n        let parentNode = nativeElement;\n\n\n        while (isPresent((parentNode = parentNode.parentNode))) {\n            if (firstChar === '.' && parentNode.classList.contains(selector.substr(1))) {\n                return parentNode;\n            }\n\n            if (firstChar === '#' && parentNode.id === selector.substr(1)) {\n                return parentNode;\n            }\n\n            // If selector is a tag\n            if (parentNode.nodeType === 1 && parentNode.tagName.toLowerCase() === selector) {\n                return parentNode;\n            }\n\n            if (parentNode.nodeType === 1 && parentNode.tagName === 'BODY') {\n                return null;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * When angular component is rendered along with NGContent it has its own _ngContent_INDEX\n     * which always corresponds with _nghost_INDEX, this works fine if we have actual component\n     * that is already rendered. If we are creating component programatically there is no way to\n     * identify where the actual ng-content is placed within the component\n     *\n     * e.g. Consider following example:\n     *\n     *\n     * Button Component Template:\n     *\n     * ```\n     *  <span class=mybuttonTitle><ng-content></ng-content></span>\n     * ```\n     *\n     * When you use button component as <aw-button>ClickMe</aw-button>  then its rendered as\n     *\n     * ```\n     * <aw-button _nghost_123>\n     *  <span _ngcontent_123 class=mybuttonTitle>ClickMe</span>\n     * </aw-button>\n     * ```\n     *\n     * But with programmatic API you instantiate Button and since it created without a Content it\n     * looks like this;\n     *\n     *  ```\n     * <aw-button _nghost_123>\n     *  <span class=mybuttonTitle></span>\n     * </aw-button>\n     * ```\n     *\n     * Where do you place you child (content component)? Therefore utility css class was created\n     * to wrap <ng-content> to get around this limitation.\n     *\n     *  ```\n     *   <span class=\"u-ngcontent\">\n     *      <ng-content></ng-content>\n     *   </span>\n     *  ````\n     *\n     *\n     *\n     *\n     */\n    insertIntoParentNgContent (parentNativeEl: any, childNativeEl: any): void\n    {\n        // default behavior is to insert it as child to parentNativeEl\n        let ngContentParent = parentNativeEl;\n\n        let foundNgContent = parentNativeEl.querySelector('.u-ngcontent');\n        if (isPresent(foundNgContent)) {\n            // we don't cover a case where there could be multiple ngcontents\n            ngContentParent = foundNgContent;\n        }\n        ngContentParent.appendChild(childNativeEl);\n\n    }\n\n\n    /**\n     *\n     * Retrieves current browser window width and height\n     *\n     */\n    browserDimentions (): any\n    {\n        return {\n            width: (window.innerWidth || document.documentElement.clientWidth\n                || document.body.clientWidth),\n            height: (window.innerHeight || document.documentElement.clientHeight\n                || document.body.clientHeight)\n        };\n    }\n\n\n    /**\n     *\n     * Retrieves elemements dimensions\n     *\n     */\n    elementDimensions (element: any): any\n    {\n        if (isPresent(element.getBoundingClientRect)) {\n            return element.getBoundingClientRect();\n        }\n        return {left: 0, top: 0, right: 0, bottom: 0, x: 0, y: 0, width: 0, height: 0};\n    }\n}\n\n","/**\n *\n * Under @original-license\n *\n * Copyright 2015-present Drifty Co.\n * http://drifty.com/\n *\n *  MIT License\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n *\n * Credit to drifty for this excellent component. We have a strong needs for good infinite\n * scrolling component so this is derived work based on this drifty component as we can not really\n * bring in whole framework and their component/API. It would be too heavy\n *\n * Component is updated with native DOM API. plus simplified by removing things\n * that are not necessary for our usecase. Updated directive prefix to match our guidelines\n *\n *\n *\n */\n\n\nimport {\n    AfterContentInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgZone, OnInit,\n    Output,\n    Renderer2,\n    ViewChild\n} from '@angular/core';\nimport {isPresent} from '@aribaui/core';\nimport {DomUtilsService} from '../../core/dom-utils.service';\n\n/**\n * The Infinite Scroll allows you to perform an action when the user\n * scrolls a specified distance from the bottom or top of the page.\n *\n * The expression assigned to the `infinite` event is called when\n * the user scrolls to the specified distance. When this expression\n * has finished its tasks, it should call the `complete()` method\n * on the infinite scroll instance.\n *\n * ## Usage\n *\n * ```html\n *\n *  <div  *ngFor=\"let item of items\">{{item}} </div>\n *   <aw-infinite-scroll (onLoad)=\"doInfinite($event)\">\n *  </aw-infinite-scroll>\n *\n * ```\n *\n *\n * You can also set a threshold to change the distance when the lazy load kicks\n * in.\n * ## Usage\n *\n * ```html\n *\n *  <div  *ngFor=\"let item of items\">{{item}} </div>\n *   <aw-infinite-scroll (onLoad)=\"doInfinite($event)\"  [distance]=\"'15%'\">\n *  </aw-infinite-scroll>\n *\n * ```\n */\n@Component({\n    selector: 'aw-infinite-scroll',\n    templateUrl: 'infite-scroll.component.html',\n    styleUrls: ['infite-scroll.component.scss'],\n})\nexport class InfiniteScrollComponent implements OnInit, AfterContentInit\n{\n    _lastCheck: number = 0;\n    _lastScrollTop: number = 0;\n    _scLsn: any;\n    _thr: string = '10%';\n    _thrPx: number = 0;\n    _thrPc: number = 0.10;\n    _init: boolean = false;\n\n    _content: any;\n    _docBody: any;\n\n    /**\n     * @internal\n     */\n    state: string = STATE_ENABLED;\n\n    /**\n     * @input {string} The threshold distance from the bottom\n     * of the content to call the `onLoad` output event when scrolled.\n     * The threshold value can be either a percent, or\n     * in pixels. For example, use the value of `10%` for the `infinite`\n     * output event to get called when the user has scrolled 10%\n     * from the bottom of the page. Use the value `100px` when the\n     * scroll is within 100 pixels from the bottom of the page.\n     * Default is `15%`.\n     */\n    @Input()\n    get distance (): string\n    {\n        return this._thr;\n    }\n\n    set distance (val: string)\n    {\n        this._thr = val;\n        if (val.indexOf('%') > -1) {\n            this._thrPx = 0;\n            this._thrPc = (parseFloat(val) / 100);\n\n        } else {\n            this._thrPx = parseFloat(val);\n            this._thrPc = 0;\n        }\n    }\n\n    /**\n     * @input {boolean} If true, Whether or not the infinite scroll should be\n     * enabled or not. Setting to `false` will remove scroll event listeners\n     * and hide the display.\n     */\n    @Input()\n    set enabled (shouldEnable: boolean)\n    {\n        this.enable(shouldEnable);\n    }\n\n\n    /**\n     * @output {event} Emitted when the scroll reaches\n     * the threshold distance. From within your infinite handler,\n     * you must call the infinite scroll's `complete()` method when\n     * your async operation has completed.\n     */\n    @Output()\n    onLoad: EventEmitter<any> = new EventEmitter<any>();\n\n\n    @ViewChild('loadinPanel')\n    loadPanel: ElementRef;\n\n\n    /**\n     *\n     * Lazy load current numbers. tell the app starting point and what is the size of loaded\n     * list\n     *\n     */\n    @Input()\n    fetchSize: number = 0;\n\n    loadOffset: number = 0;\n\n\n    constructor (private _render: Renderer2, private _zone: NgZone,\n                 private domUtils: DomUtilsService,\n                 private _cd: ChangeDetectorRef)\n    {\n\n\n    }\n\n\n    ngOnInit (): void\n    {\n        this._render.addClass(document.body, 'has-infinite-scroll');\n\n    }\n\n    _onScroll (ev: any): void\n    {\n        if (this.state === STATE_LOADING || this.state === STATE_DISABLED) {\n            return;\n        }\n\n        // must throttle the class by 100ms\n        if (this._lastCheck + 100 > ev.timeStamp) {\n            // no need to check less than every XXms\n            return;\n        }\n\n        this._lastCheck = ev.timeStamp;\n        let scrollTop = this.scrollTop();\n\n        let winHeight = this.domUtils.browserDimentions().height;\n        const height = Math.max(this._docBody.scrollHeight, this._docBody.offsetHeight,\n            winHeight, this._content.scrollHeight, this._content.offsetHeight);\n\n        if (!height) {\n            // if there is no height of this element then do nothing\n            return;\n        }\n        const threshold = this._thrPc ? (height * this._thrPc) : this._thrPx;\n        let distanceFromInfinite = this._content.scrollHeight - winHeight - scrollTop - threshold;\n\n        // console.log('Document height (' + height + ') , Distance from bottom '\n        // + distanceFromInfinite + ',  => threshold = ' +\n        //     this.distance + ' (' + threshold + ')');\n\n        if (distanceFromInfinite < 0 && this._lastScrollTop < scrollTop) {\n            this.fireOnLazyLoad();\n\n        } else if (this._lastScrollTop > scrollTop && scrollTop < winHeight\n            && this.loadOffset !== this.fetchSize) {\n            this.fireOnLazyUnLoad();\n        }\n        this._lastScrollTop = scrollTop;\n        return;\n    }\n\n    /**\n     * Todo: refactor to one method\n     */\n    private fireOnLazyLoad ()\n    {\n        this._zone.run(() =>\n        {\n            if (this.state !== STATE_LOADING && this.state !== STATE_DISABLED) {\n                this.state = STATE_LOADING;\n\n                this.onLoad.emit({\n                    isLoad: true,\n                    limit: this.fetchSize,\n                    offset: this.loadOffset\n                });\n                // start on the next record\n                this.loadOffset += this.fetchSize;\n            }\n        });\n    }\n\n\n    private fireOnLazyUnLoad ()\n    {\n        this._zone.run(() =>\n        {\n            if (this.state !== STATE_LOADING && this.state !== STATE_DISABLED) {\n                this.state = STATE_LOADING;\n\n                // start on the next record\n                this.loadOffset = this.fetchSize;\n\n                this.onLoad.emit({\n                    isLoad: false,\n                    limit: this.fetchSize,\n                    offset: this.loadOffset\n                });\n            }\n        });\n    }\n\n\n    private scrollTop (): number\n    {\n        return (window.pageYOffset || this._content.scrollTop);\n    }\n\n    /**\n     * Call `complete()` within the `infinite` output event handler when\n     * your async operation has completed. For example, the `loading`\n     * state is while the app is performing an asynchronous operation,\n     * such as receiving more data from an AJAX request to add more items\n     * to a data list. Once the data has been received and UI updated, you\n     * then call this method to signify that the loading has completed.\n     * This method will change the infinite scroll's state from `loading`\n     * to `enabled`.\n     */\n    complete ()\n    {\n        if (this.state !== STATE_LOADING) {\n            return;\n        }\n\n        setTimeout(() =>\n        {\n            this.state = STATE_ENABLED;\n\n            // need to trigger extra detect changes to rerender loading icon\n            this._cd.detectChanges();\n        }, 100);\n    }\n\n\n    /**\n     * Call `enable(false)` to disable the infinite scroll from actively\n     * trying to receive new data while scrolling. This method is useful\n     * when it is known that there is no more data that can be added, and\n     * the infinite scroll is no longer needed.\n     * @param shouldEnable  If the infinite scroll should be\n     * enabled or not. Setting to `false` will remove scroll event listeners\n     * and hide the display.\n     */\n    enable (shouldEnable: boolean)\n    {\n        this.state = (shouldEnable ? STATE_ENABLED : STATE_DISABLED);\n        this._setListeners(shouldEnable);\n    }\n\n    /**\n     * Subscribes to native windows scroll event\n     */\n    _setListeners (shouldListen: boolean)\n    {\n        if (this._init) {\n            if (shouldListen) {\n                if (!this._scLsn) {\n                    this._zone.runOutsideAngular(() =>\n                    {\n                        this._scLsn = this._onScroll.bind(this);\n                        window.addEventListener('scroll', this._scLsn);\n                    });\n                }\n            } else {\n\n                if (isPresent(this._scLsn)) {\n                    window.removeEventListener('scroll', this._scLsn);\n                    this._scLsn = null;\n                }\n            }\n        }\n    }\n\n\n    isLoading (): boolean\n    {\n        return this.state === STATE_LOADING;\n    }\n\n    ngAfterContentInit ()\n    {\n        this._init = true;\n        this._docBody = document.body;\n        this._content = document.documentElement;\n\n        this._setListeners(this.state !== STATE_DISABLED);\n\n        if (this.loadOffset === 0) {\n            this.fireOnLazyLoad();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy ()\n    {\n        this._setListeners(false);\n    }\n\n}\n\n\nconst STATE_ENABLED = 'enabled';\nconst STATE_DISABLED = 'disabled';\nconst STATE_LOADING = 'loading';\n","import {Injectable} from '@angular/core';\n\n@Injectable()\nexport class AwNameStore {\n\n    private store: Map<string, any>;\n\n    constructor() {\n        this.store = new Map();\n    }\n\n    add(name: string, el: any) {\n        if (this.collides(name)) {\n            throw new Error('Name is not unique!');\n        }\n        return this.store.set(name, el);\n    }\n\n    remove(name: string) {\n        return this.store.delete(name);\n    }\n\n    collides(name: string): boolean {\n        return this.store.has(name);\n    }\n\n    clear() {\n        this.store.clear();\n    }\n\n}\n","import {\n    ElementRef,\n    Input,\n    OnInit,\n    Directive,\n    OnDestroy\n} from '@angular/core';\nimport {\n    AppConfig\n} from '@aribaui/core';\n\nimport {\n    AwNameStore\n} from './aw-name.store';\n\n/**\n * The 'awName' directive attaches a identifier to decorated element to aid selectors for testing\n * purposes. The 'awName' directive tries to generate a unique identifier based on contextual data\n * and inherant immutable element attributes.\n *\n * **Generating the Base Name**\n *\n * The 'awName' directive generates a base name from element tag name and attributes which are\n * static by nature.\n *\n *     Example:\n *         <button name=\"order\" awName>\n *\n *     Result:\n *         <button name=\"order\" awname=\"button_order\">\n *\n * If the element has an 'id', that value takes precedent and is used instead of a generated\n * name.\n *\n *     Example:\n *         <button name=\"order\" id=\"myOrderButton\" awName>\n *\n *     Result:\n *         <button name=\"order\" id=\"myOrderButton\" awname=\"button_myOrderButton\">\n *\n *\n * **Repeated Elements and the 'ext' Parameter**\n *\n * There are many cases where elements are generated dynamically in the code as lists or tables.\n * In such cases, it may not be easy to distinguish individual elements by standard HTML\n * attributes, so the 'awName' directive allows custom extentions to the base name to be provided\n * using the 'ext' attribute.\n *\n *    Example:\n *        fruits = ['apple', 'banana', 'orange'];\n *\n *        <ul>\n *            <li *ngFor=\"let fruit of fruits\" awName ext=\"{{fruit}}\">{{fruit}}</li>\n *        </ul>\n *\n *   Result:\n *       <ul>\n *           <li awname=\"li_apple\">apple</li>\n *           <li awname=\"li_banana\">banana</li>\n *           <li awname=\"li_orane\">orange</li>\n *       </ul>\n *\n * **Adding Context Through Ancestor Inspection**\n *\n * In order to provide context to the element naming, the 'awName' directive loops through the\n * parent ancestry and searches for any unique element 'id' to prepend to the base name.\n *\n *     Example:\n *         <form id=\"applicant\">\n *            <input type=\"text\" name=\"firstName\" awName>\n *            <input type=\"text\" name=\"lastName\" awName>\n *         </form>\n *         <form id=\"spouse\">\n *            <input type=\"text\" name=\"firstName\" awName>\n *            <input type=\"text\" name=\"lastName\" awName>\n *         </form>\n *\n *     Result:\n *         <form id=\"applicant\">\n *            <input type=\"text\" name=\"firstName\" awname=\"applicant_input_firstName\">\n *            <input type=\"text\" name=\"lastName\" awname=\"applicant_input_lastName\">\n *         </form>\n *         <form id=\"spouse\">\n *            <input type=\"text\" name=\"firstName\" awname=\"spouse_input_firstName\">\n *            <input type=\"text\" name=\"lastName\" awname=\"spouse_input_lastname\">\n *         </form>\n *\n * **Uniqueness Check**\n *\n * 'awName' keeps track of the names it creates by adding them to a map store. Whenever it\n * creates a new name during the `ngOnInit` phase it checks it against the existing map,\n * and will throw an error if it encounters a duplicate. Moreover during the element destruction\n * phase, `ngOnDestroy`, 'awName' removes the generated name from the store.\n *\n *\n * **In Production**\n *\n * Using 'awName' adds a small bit of rendering overhead for each element it is used on. In\n * a production environment, 'awName' serves no functionality to the end user, but may have\n * a performance impact on the application. As such, 'awName' takes into account the\n * `AppConfig` settings and disables name generation when `AppConfig.isProductionMode()`\n * is `true`.\n *\n * In your application, you can turn on production mode by setting `devmode.enabled` to\n * `false` when configuring `AribaCoreModule`:\n *\n *     AribaCoreModule.forRoot({\n *         'devmode.enabled': false\n *     })\n *\n */\n@Directive({\n    selector: '[awName]',\n})\nexport class AwNameDirective implements OnInit, OnDestroy {\n\n    @Input() ext: string;\n\n    private name: string;\n\n    private separator: string = '_';\n\n    constructor(\n        private el: ElementRef,\n        private store: AwNameStore,\n        private config: AppConfig\n    ) {}\n\n    ngOnInit() {\n            this.name = this.createName(this.el);\n            this.addElementToStore(this.name, this.el);\n            this.el.nativeElement.setAttribute('awname', this.name);\n        }\n\n    ngOnDestroy() {\n        this.store.remove(this.name);\n    }\n\n    /**\n     * Add element name/id and reference to map store. If name/id already\n     * exists in store then it throws an error.\n     *\n     */\n    addElementToStore(name: string, elem: ElementRef) {\n        try {\n            this.store.add(name, elem);\n        } catch (e) {\n            console.error(e.message + `. \"${name}\" is already in use.`, elem.nativeElement);\n            return;\n        }\n    }\n\n    /**\n     * Generate name/id for element.\n     *\n     * param elem Reference to element\n     * @return String Name/ID\n     */\n    createName(elem: ElementRef) {\n\n        const tagName = this.getTagName(elem);\n\n        // Initialize array of string parts\n        const parts = [];\n\n        // Find ancestor tag id, if there is one\n        const parentID = this.getAncestorId(elem);\n        if (parentID) {\n            parts.push(parentID);\n        }\n\n        // Check the tag type\n        if (tagName === 'option') {\n            const parentName = this.getParentName(elem);\n            if (parentName) {\n                parts.push(parentName);\n            }\n        }\n\n        // Get tagname\n        parts.push(tagName);\n\n        // Choose id property if it exists\n        if (elem.nativeElement.id) {\n            parts.push(elem.nativeElement.id);\n\n        // Otherwise build extension from tag properties\n        } else {\n            // check for a name attribute\n            if (elem.nativeElement.hasAttribute('name')) {\n                parts.push(elem.nativeElement.name);\n            }\n\n            // check for value attribute if 'option' tag\n            if (tagName === 'option') {\n                if (elem.nativeElement.hasAttribute('value')) {\n                    parts.push(this.spacesToUnderscore(elem.nativeElement.value));\n                }\n            }\n        }\n        // Add custom extension if it exists\n        if (this.ext) {\n            parts.push(this.spacesToUnderscore(this.ext));\n        }\n\n        return parts.join(this.separator);\n    }\n\n    /**\n     * Get tag name from element reference.\n     * @param elem Reference to element\n     */\n    getTagName(elem: ElementRef) {\n        return elem.nativeElement.tagName.toLowerCase();\n    }\n\n    /**\n     * Traverse element ancestry and return first id attribute\n     * encountered.\n     * @param elem Reference to element\n     */\n    getAncestorId(elem: ElementRef) {\n        let parent = elem.nativeElement.parentNode;\n        let id = '';\n        while (parent && !id) {\n            if (parent.id) {\n                id = parent.id;\n            }\n            parent = parent.parentNode;\n        }\n        return id;\n    }\n\n    /**\n     * Get name attribute from parent if name attribute exists.\n     * @param elem Reference to element\n     */\n    getParentName(elem: ElementRef) {\n        const parent = elem.nativeElement.parentNode;\n        return (parent.name && !parent.id) ? parent.name : null;\n    }\n\n    spacesToUnderscore(str: string) {\n        return str.replace(/\\s+/g, '_');\n    }\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {EmbeddedItemDirective} from './embedded-item';\nimport {GenericContainerComponent} from './generic-container.component';\nimport {IncludeComponentDirective} from './include-component.directive';\nimport {ErrorMessagesComponent} from './error-messages/error-messages.component';\nimport {ModalComponent} from './modal-service/modal/modal.component';\nimport {CurrencyFormatPipe} from './pipes/currency-format.pipe';\nimport {NgForSetDirective} from './on-ngfor-set.directive';\nimport {InfiniteScrollComponent} from './infite-scroll/infite-scroll.component';\nimport {AwNameDirective} from './aw-name/aw-name.directive';\n\n\n@NgModule({\n    declarations: [\n        EmbeddedItemDirective,\n        IncludeComponentDirective,\n        GenericContainerComponent,\n        ErrorMessagesComponent,\n        ModalComponent,\n        CurrencyFormatPipe,\n        NgForSetDirective,\n        InfiniteScrollComponent,\n        AwNameDirective\n    ],\n    imports: [\n        CommonModule\n    ],\n    entryComponents: [\n        GenericContainerComponent,\n        ModalComponent\n    ],\n    exports: [\n        EmbeddedItemDirective,\n        IncludeComponentDirective,\n        GenericContainerComponent,\n        ErrorMessagesComponent,\n        ModalComponent,\n        CurrencyFormatPipe,\n        NgForSetDirective,\n        InfiniteScrollComponent,\n        AwNameDirective\n    ]\n})\nexport class AWCoreComponentModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Environment, noop} from '@aribaui/core';\nimport {BaseComponent} from '../base.component';\n\n/**\n * Parent class for all modal dialogs. Provides defaults functionality for all modals.\n */\nexport class ModalContainer extends BaseComponent\n{\n\n    /**\n     * Override function.\n     */\n    destroy: () => void = noop;\n\n\n    constructor(public env: Environment)\n    {\n        super(env);\n    }\n\n\n    /**\n     * function that closes the dialog by calling destroy on the component reference.\n     * Method inherited by all its children.\n     */\n    closeModal(): void\n    {\n        this.destroy();\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Injectable, Type} from '@angular/core';\nimport {isBlank, isPresent, isStringMap, isType, objectToName} from '@aribaui/core';\nimport {BehaviorSubject, Observable} from 'rxjs';\n\n\n/**\n * DataTypeProviderRegistry aggregates different DataProviders per type.\n */\n@Injectable()\nexport class DataTypeProviderRegistry\n{\n\n    /**\n     * Maps class name to DataProvider implementation\n     */\n    private registryByProvider: Map<string, DataProvider<any>>;\n\n\n    /**\n     * Maps a class Name  to actual type\n     */\n    private registryNameToClass: Map<string, any>;\n\n\n    constructor()\n    {\n        this.registryByProvider = new Map<string, DataProvider<any>>();\n        this.registryNameToClass = new Map<string, any>();\n    }\n\n    /**\n     * For every single registered DataProvider implementation we also need store its prototype\n     * in order to be able to support some kind of inheritance. You can register a provider for\n     * a parent class if needed\n     *\n     */\n    registerProvider<T>(target: any, provider: DataProvider<T>): void\n    {\n        if (isBlank(target) || (!isStringMap(target) && !isType(target))) {\n            throw new Error(' Cannot register non-object');\n        }\n\n        let name = isType(target) ? target.prototype.constructor.name : target.constructor.name;\n        this.registryByProvider.set(name, provider);\n\n        let prototype = Object.getPrototypeOf(target);\n        this.registryNameToClass.set(name, prototype);\n    }\n\n\n    /**\n     * Search for best matching provider. If not found then use object prototype to get hold of its\n     * parent and see if there is a provider registered on this level\n     *\n     */\n    bestMatchForClass<T>(className: string): DataProvider<T>\n    {\n        let registeredClassName = className;\n        let classProto = this.registryNameToClass.get(className);\n\n        while (isPresent(registeredClassName)) {\n            let provider: DataProvider<T> = this.registryByProvider.get(registeredClassName);\n\n            if (isPresent(provider)) {\n                provider.type = className;\n                return provider;\n            }\n\n            // Go up to parent\n            if (isPresent(classProto)) {\n                classProto = Object.getPrototypeOf(classProto);\n                let parentName = objectToName(classProto);\n                registeredClassName =\n                    (isPresent(parentName) && parentName !== registeredClassName) ? parentName\n                        : null;\n            } else {\n                return null;\n            }\n        }\n        return null;\n    }\n\n\n    /**\n     * The same as bestMatchForClass() with the difference to pass a type. If you want to\n     * support object inheritance you need this.\n     *\n     *\n     */\n    bestMatchForType<T>(type: Type<T>): DataProvider<T>\n    {\n        let name: string = objectToName(type);\n\n        this.registryNameToClass.set(name, type);\n        return this.bestMatchForClass<T>(name);\n    }\n}\n\n\n/**\n * Provider is a data driver that can access data and retrieve them. It knows how to get 1\n * or more records, maybe do paging and some other things.\n *\n */\nexport abstract class DataProvider<T>\n{\n    /**\n     * Defines current type for this DataProvider\n     */\n    type: any;\n\n    /**\n     * Notifies all the listeners in case of data are available or if they changed due to some user\n     * interaction  (search, adding or removing).\n     *\n     */\n    dataChanges: BehaviorSubject<T[]> = new BehaviorSubject<T[]>([]);\n\n\n    /**\n     * Internal data source populated by fetch or search. JS application can hold large amount of\n     * records without going back to the REST server. This can be used to cache search result on\n     * the client site.\n     *\n     */\n    offScreenData: any[];\n\n\n    /**\n     *  Return size of the source\n     *\n     */\n    expectedCount(params?: Map<string, any>): number\n    {\n        return -1;\n    }\n\n    /**\n     *\n     * For use cases where we need to retrieve data based on some criteria e.g.\n     *\n     *  - max number of records\n     *  - support paging with offset and limit\n     *\n     * @deprecated by fetch\n     */\n    abstract dataForParams(params: Map<string, any>): Array<T>;\n\n\n    /**\n     *\n     * Fetches data from underlying dataProvider.\n     *\n     * Replacement for dataforParams\n     *\n     */\n    abstract fetch(params: Map<string, any>): Observable<T[]>;\n\n    /**\n     *\n     * Returns non-async current state of data\n     */\n    data(): Array<T>\n    {\n        return this.dataChanges.getValue();\n    }\n\n\n    /**\n     * Tells if this DataProvider supports INSERT, REMOVE\n     *\n     */\n    canCRUD(): boolean\n    {\n        return false;\n    }\n\n\n    /**\n     * Tells if this DataProvider supports query capability\n     *\n     */\n    canQuery(): boolean\n    {\n        return false;\n    }\n\n    /**\n     * Implement to support insertion. After record is inserted emit event for dataChanges to\n     * inform all subscribers\n     *\n     */\n    insert(obj: any): void\n    {\n    }\n\n\n    /**\n     * Implement to support record removal. After record is removed emit event for dataChanges to\n     * inform all subscribers.\n     *\n     */\n    remove(obj: any): void\n    {\n\n    }\n\n    /**\n     * Implement to provide access to low level searcg API.\n     *\n     */\n    query(params: Map<string, string>): void\n    {\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {DataProvider} from './datatype-registry.service';\nimport {FieldPath, isBlank, isPresent} from '@aribaui/core';\nimport {Observable, of as observableOf} from 'rxjs';\n\n\n/**\n * Default implementation for Arrays.\n */\nexport class ArrayDataProvider<T> extends DataProvider<T>\n{\n\n    constructor(protected  values: Array<T>)\n    {\n        super();\n        this.type = Array;\n\n        this.offScreenData = this.values;\n        this.dataChanges.next(this.values);\n    }\n\n    expectedCount(params?: Map<string, any>): number\n    {\n        return this.offScreenData.length;\n    }\n\n    dataForParams(params?: Map<string, any>): Array<T>\n    {\n        if (isBlank(params)) {\n            return this.offScreenData;\n        }\n        let data = this.offScreenData;\n\n        if (isPresent(params) && params.has('offset') && params.has('limit')) {\n            let offset = params.get('offset');\n            let limit = params.get('limit');\n\n            if (data.length > (offset + limit)) {\n                data = data.slice(offset, offset + limit);\n            } else {\n                data = data.slice(offset, data.length);\n            }\n        }\n\n        if (params.has('orderby') && params.has('selector')) {\n            this.sort(data, params.get('orderby'), params.get('selector'));\n        }\n        return data;\n    }\n\n\n    fetch(params: Map<string, any>): Observable<T[]>\n    {\n        return observableOf(this.dataForParams(params));\n    }\n\n\n    /**\n     * Provides default implementation for sorting current dataset by one column / key\n     *\n     * for sortOrdering please see Datatable and its sortOrderingForNumber()\n     *\n     *      1  = ascending\n     *      -1 = descending\n     */\n    private sort(arrayToSort: any[], key: string, sortOrder: number): void\n    {\n        arrayToSort.sort((data1: any, data2: any) =>\n        {\n            let value1 = FieldPath.getFieldValue(data1, key);\n            let value2 = FieldPath.getFieldValue(data2, key);\n            let result = null;\n\n            if (value1 == null && value2 != null) {\n                result = -1;\n            } else if (value1 != null && value2 == null) {\n                result = 1;\n            } else if (value1 == null && value2 == null) {\n                result = 0;\n            } else if (typeof value1 === 'string' && typeof value2 === 'string') {\n                result = value1.localeCompare(value2);\n            } else {\n                result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\n            }\n\n            return (sortOrder * result);\n        });\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport {DataProvider, DataTypeProviderRegistry} from './datatype-registry.service';\nimport {Injectable} from '@angular/core';\nimport {isArray, isString} from '@aribaui/core';\nimport {ArrayDataProvider} from './array-data-provider';\n\n\n/**\n * Provides top level accessor class in order to make {@link DataProvider} retrieval process easier.\n * Using {@link DataTypeProviderRegistry} we either retrieve registered instance of concrete\n * provider or instantiate our implicit provider for native types such as Array.\n *\n *\n */\n@Injectable()\nexport class DataProviders\n{\n\n\n    constructor(private registry: DataTypeProviderRegistry)\n    {\n    }\n\n    /**\n     * Finds the best matching  DataProvider or create new one in case of Array\n     * More room to register and instantiate some other implicit Providers\n     */\n    find(target: any): DataProvider<any>\n    {\n        if (isArray(target)) {\n            return new ArrayDataProvider(target);\n        } else if (isString(target)) {\n            return this.registry.bestMatchForClass(target);\n        }\n\n        return this.registry.bestMatchForType(target);\n    }\n\n\n    /**\n     * Registers new provider within DataTypeProviderRegistry\n     *\n     */\n    register<T>(target: any, provider: DataProvider<T>): void\n    {\n        this.registry.registerProvider(target, provider);\n    }\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport {DataProvider} from './datatype-registry.service';\nimport {Injectable, Type} from '@angular/core';\nimport {\n    assert,\n    FieldPath,\n    isArray,\n    isBlank,\n    isFunction,\n    isJsObject,\n    isPresent,\n    objectToName,\n    objectValues,\n    unimplemented\n} from '@aribaui/core';\nimport {Observable, of as observableOf} from 'rxjs';\nimport {ArrayDataProvider} from './array-data-provider';\nimport {OutlineNode} from '../../widgets/outline/outline-for.component';\n\n\n/**\n *\n * Provides a registry of different data Finders used mostly by DataSources. All Finders are\n * registered by this class as we don't have any needs right now to expose this to developer.\n *\n */\n@Injectable()\nexport class DataFinders\n{\n\n    private findersByType: Map<DataFinder, Type<DataFinder>> = new Map();\n\n    constructor()\n    {\n        this.initFinders();\n    }\n\n    /**\n     * Finds the best matching DataFinder based on the object type and queryType.\n     */\n    find(forProvider: DataProvider<any>, forType: QueryType): DataFinder\n    {\n\n        let finderMatch: Type<DataFinder>;\n        this.findersByType.forEach((v: Type<DataFinder>, k: DataFinder) =>\n        {\n            if (k.accepts(forProvider, forType)) {\n                finderMatch = v;\n                return true;\n            }\n        });\n\n        if (isPresent(finderMatch)) {\n            let copy = new finderMatch();\n            copy.forData(forProvider);\n            return copy;\n\n        }\n        return null;\n    }\n\n    /**\n     * Registers new finder\n     *\n     */\n    register<T>(prototype: DataFinder, type: Type<DataFinder>): void\n    {\n        this.findersByType.set(prototype, type);\n    }\n\n    private initFinders()\n    {\n        // create a prototype for each\n        this.findersByType.set(new FullTextArrayDataFinder(), FullTextArrayDataFinder);\n        this.findersByType.set(new OutlineFullTextArrayDataFinder(),\n            OutlineFullTextArrayDataFinder);\n\n    }\n}\n\n/**\n * We have different options how to query data. FullText uses a string where predicate is\n * using key:value pair to built a query\n */\nexport enum QueryType\n{\n    FullText,\n    FullTextOutline,\n    Predicate,\n    FullTextAndPredicate\n}\n\n\n/**\n * This class provides matching capability for given DataProvider.\n */\nexport abstract class DataFinder\n{\n\n\n    /**\n     *\n     * Lookup key to apply when running match. Ideally your DS should be able to set lookupKey\n     * either globally for given dataProvider or locally every time you run search. This is in\n     * case you have many choosers for the same type and you want them to have different lookup\n     * key.\n     *\n     *\n     *\n     */\n    abstract set lookupKey(key: string);\n\n    /**\n     * In order to find concrete DataFinder we need to know the target type and the query type\n     *\n     */\n    accepts(forData: DataProvider<any>, forType: QueryType): boolean\n    {\n        return false;\n    }\n\n    /**\n     *\n     * Sets a DataProvider for DataFinder\n     *\n     */\n    abstract forData(provider: DataProvider<any>): DataFinder;\n\n    /**\n     *\n     * Matching methods which are either async or sync\n     *\n     */\n    abstract instantMatch<T>(query: any, max: number): T[];\n\n    abstract instantMatchWithSelections<T>(selectionsForMatch: any[], query: any,\n                                           max: number): T[];\n\n\n    /**\n     *\n     * Query can be a simple string literal or a map having different key value pair as a\n     * filter\n     *\n     */\n    match<T>(query: any, max: number = -1): Observable<T[]>\n    {\n        return unimplemented();\n    }\n\n    matchWithSelections<T>(selections: any[], query: any, max: number): Observable<T[]>\n    {\n        return unimplemented();\n    }\n}\n\n\n/**\n * Simple FullText implementation based on infix string matching which works on top of\n * ArrayDataProvider.\n *\n */\nexport class FullTextArrayDataFinder extends DataFinder\n{\n    /**\n     *  If list value is object set keyPath to get the object value\n     */\n    _keyPath: FieldPath;\n\n    /**\n     * Current DataProvider used to access data\n     */\n    protected _provider: DataProvider<any>;\n\n    set lookupKey(key: string)\n    {\n        this._keyPath = isPresent(key) ? new FieldPath(key) : null;\n    }\n\n    accepts(forData: DataProvider<any>, forType: QueryType): boolean\n    {\n        return forData instanceof ArrayDataProvider && forType === QueryType.FullText;\n    }\n\n    forData(provider: DataProvider<any>): FullTextArrayDataFinder\n    {\n        this._provider = provider;\n        return this;\n    }\n\n    instantMatch<T>(query: any, max: number): T[]\n    {\n        assert(isPresent(this._provider), 'Missing DataProvider');\n\n        let list = this._provider.dataForParams(new Map().set('limit', max));\n        return this.instantMatchWithSelections<T>(list, query, max);\n    }\n\n    instantMatchWithSelections<T>(selectionsForMatch: any[], query: string, max: number): Array<T>\n    {\n        assert(isPresent(this._provider), 'Missing DataProvider');\n\n        if (isBlank(query)) {\n            return selectionsForMatch;\n        }\n        let result: any[] = [];\n        let toLowerPattern = query.toLowerCase();\n\n        for (let i = 0; i < selectionsForMatch.length; i++) {\n            let item = selectionsForMatch[i];\n            if (this.matches(item, toLowerPattern)) {\n                result.push(item);\n                if (result.length >= max) {\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     *\n     * Warning: If you dont supply search Key and you want fulltext search and you use this\n     * default implementation be aware that it can  perform poorly as it is naive implementaion\n     * that does not do deep compare.\n     *\n     */\n    matches<T>(item: any, pattern: string): boolean\n    {\n        let val = (isPresent(this._keyPath)) ? this._keyPath.getFieldValue(item) : item;\n        if (isFunction(val)) {\n            val = val.call(item);\n        } else if (isJsObject(item)) {\n            return this.hasObjectValue(item, pattern);\n\n        } else {\n            return isBlank(pattern) ||\n                isPresent(val) && val.toString().toLowerCase().indexOf(pattern) > -1;\n        }\n    }\n\n\n    match<T>(query: any, max: number): Observable<T[]>\n    {\n        return observableOf(this.instantMatch(query, max));\n    }\n\n    matchWithSelections<T>(selections: any[], query: any, max: number): Observable<T[]>\n    {\n        return observableOf(this.instantMatchWithSelections(selections, query, max));\n    }\n\n    protected hasObjectValue(obj: any, pattern: string): boolean\n    {\n        let values = objectValues(obj);\n        let parentObj = objectToName(obj);\n        let length2 = values.filter((value: any) =>\n        {\n            if (isBlank(value) || isArray(value)) {\n                return false;\n\n            } else if (!isJsObject(value) && !isFunction(value)) {\n                return value.toString().toLowerCase().indexOf(pattern) !== -1;\n\n            } else if (isJsObject(value) && objectToName(value) !== parentObj) {\n                return this.hasObjectValue(value, pattern);\n            }\n\n            return false;\n        }).length;\n        return length2 > 0;\n    }\n}\n\n\n/**\n * Extends basic Infix implementation to work on top of OutlineNodes. It first checks all the\n * children on lowest level and moving up to the root and marking nodes that can be removed.\n *\n *  For simple data structure which operates on local array this should be good enough we this\n *  can never match with real DB full text search.\n *\n */\nexport class OutlineFullTextArrayDataFinder extends FullTextArrayDataFinder\n{\n\n    accepts(forData: DataProvider<any>, forType: QueryType): boolean\n    {\n        return forData instanceof ArrayDataProvider && forType === QueryType.FullTextOutline;\n    }\n\n\n    instantMatchWithSelections<T>(selectionsForMatch: any[], query: string, max: number): Array<T>\n    {\n        assert(isPresent(this._provider), 'Missing DataProvider');\n\n        if (isBlank(query)) {\n            return selectionsForMatch;\n        }\n        let toLowerPattern = query.toLowerCase();\n\n        let sourceToSearch = selectionsForMatch.slice();\n        this.rollup(sourceToSearch, toLowerPattern);\n        return this.shake(sourceToSearch);\n    }\n\n\n    /**\n     *\n     * Going thru the tree from bottom up and mark all that matches query\n     *\n     */\n    rollup(nodes: OutlineNode[], query: string): boolean\n    {\n        nodes.forEach((item: OutlineNode) =>\n        {\n            // start from bottom up and capture how many occurrences is found for future use\n            let hasChildrenMatch = false;\n            if (isPresent(item.children) && item.children.length > 0) {\n                hasChildrenMatch = this.rollup(item.children, query);\n            }\n            item.visible = hasChildrenMatch || this.matches(item, query);\n        });\n\n        return nodes.some((item: OutlineNode) => item.visible);\n    }\n\n    /**\n     * Filter out all the nodes that are marked as visible = false and make sure and\n     * don't modify original list\n     *\n     */\n    shake(nodes: OutlineNode[]): any[]\n    {\n        return nodes\n            .filter(node => node.visible)\n            .map(node => ({\n                ...node,\n                isExpanded: node.visible,\n                children: node.children && this.shake(node.children)\n            }));\n    }\n\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport {DataProviders} from './data-providers';\nimport {DataFinders} from './data-finders';\nimport {Observable} from 'rxjs';\nimport {InjectionToken} from '@angular/core';\nimport {unimplemented} from '@aribaui/core';\nimport {DataFinder, QueryType} from '../../core/data/data-finders';\nimport {DataProvider} from '../../core/data/datatype-registry.service';\n\n\nexport const DATA_SOURCE = new InjectionToken<DataSource>('DATA_SOURCE');\n\n/**\n * DataSource describes basic functionality for handling stream of data specific to component\n *\n * It is expected that DataSource will be defined as component provider using\n *\n * @Components ({\n *      ...\n *      providers:[\n *\n *          provide: DATA_SOURCE, useClass: ChooserDataSourcePlainArrayExample,\n                        deps: [DataProviders, DataFinders]\n *      ]\n *\n * })\n *\n *\n * so all the dependencies (DataProviders, DataFinders) are properly injected.\n *\n * DataProvider uses open() method to broadcast changes to all the subscribers in reactive way.\n * Or you can use instant() method to retrieve current state of this DataSource (sync)\n *\n */\nexport abstract class DataSource\n{\n    static readonly MaxLength = 10;\n    static readonly MaxRecentSelected = 5;\n\n    /**\n     *\n     * Each DataSource have injected DataProviders and DataFinders to retrieve concrete\n     * implementation\n     *\n     */\n    constructor(protected dataProviders?: DataProviders, protected finders?: DataFinders)\n    {\n    }\n\n\n    /**\n     * Allows to initialize data source and pass some additional values\n     *\n     *\n     */\n    abstract init(...args: any[]): void;\n\n    /**\n     * DataProviders works with stream of data and this opens up the channel in order to\n     * listen and react for any changes that could happen inside DataProvider\n     */\n    abstract open<T>(): Observable<T[]>;\n\n\n    /**\n     * Release subscription to DataProvider\n     */\n    abstract close(): void;\n\n\n    /**\n     * Returns a data instantly from the internal state of DataProvider\n     */\n    instant<T>(): T[]\n    {\n\n        return unimplemented();\n    }\n\n}\n\n\n/**\n * To make initialization easier we have this common format.\n */\nexport interface DSInitParams\n{\n    /**\n     * List of values or the object type name we want to render\n     */\n    obj?: any;\n\n    /**\n     * Which find we want to load FullText or Predicate\n     */\n    queryType: QueryType;\n\n    /**\n     * Can specify lookup Key to narrow down the search to specific field. If lookup key is\n     * null, items are assumed to be strings\n     */\n    lookupKey?: string;\n\n    /**\n     * Tells if the Chooser is single or multi select\n     */\n    multiselect: boolean;\n\n    /**\n     * Option to pass custom DataProvider instead letting DataProviders to find match\n     */\n    dataProvider?: DataProvider<any>;\n\n    /**\n     * Option to pass custom DataFinder instead letting DataFinders to find match\n     */\n    dataFinder?: DataFinder;\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, HostBinding} from '@angular/core';\n\n/**\n * We are using these components as a better way selectors.\n *\n */\n\n\n/**\n * Common class used used for Five Zone layout. Used for the ng-content selector\n */\n@Component({\n    selector: 'aw-top',\n    template: '<ng-content></ng-content>'\n})\nexport class TopZoneComponent\n{\n    @HostBinding('class') classList: string = 'ui-g-12 ui-g-nopad ';\n}\n\n/**\n * Common class used used for Five Zone layout. Used for the ng-content selector\n */\n@Component({\n    selector: 'aw-left',\n    template: '<ng-content></ng-content>'\n})\nexport class LeftZoneComponent\n{\n    @HostBinding('class') classList: string = 'ui-g-12 ui-g-nopad';\n}\n\n/**\n * Common class used used for Five Zone layout. Used for the ng-content selector\n */\n@Component({\n    selector: 'aw-middle',\n    template: '<ng-content></ng-content>'\n})\nexport class MiddleZoneComponent\n{\n    @HostBinding('class') classList: string = 'ui-g-12 ui-md-6 ui-lg-4 ui-g-nopad';\n}\n\n\n/**\n * Common class used used for Five Zone layout. Used for the ng-content selector\n */\n@Component({\n    selector: 'aw-right',\n    template: '<ng-content></ng-content>'\n})\nexport class RightZoneComponent\n{\n    @HostBinding('class') classList: string = 'ui-g-12 ui-g-nopad';\n\n}\n\n/**\n * Common class used used for Five Zone layout. Used for the ng-content selector\n */\n@Component({\n    selector: 'aw-bottom',\n    template: '<ng-content></ng-content>'\n})\nexport class BottomZoneComponent\n{\n    @HostBinding('class') classList: string = 'ui-g-12 ui-g-nopad';\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, forwardRef, HostBinding, Inject, Input, Optional, SkipSelf} from '@angular/core';\nimport {AsyncValidatorFn, ValidatorFn, Validators} from '@angular/forms';\nimport {Environment, isBlank, isPresent, ListWrapper, StringWrapper} from '@aribaui/core';\nimport {FormTableComponent} from '../form-table.component';\nimport {BaseFormComponent, WidgetSizeColumns} from '../../../core/base-form.component';\n\n/**\n * Used by FormTable to layout fields into Rows. Each FormTable row is reasonable for not only to\n * include actual component such is DropDown or InputField but mainly provides a enough context for\n * the component to specify the size, how it should layout, whether we need to show required flag,\n * to show/hide labels in case if we have no label layout and much more.\n *\n * FormRow component also registers angular validator for the current row/field. As already\n * mentioned We treat our widgets with minimal responsibility as possible to present and retrive\n * information to/from user and let somebody else to figure out where it appear and how.\n *\n * todo: Move under FormTable\n */\n@Component({\n    selector: 'aw-form-row',\n    templateUrl: 'form-row.component.html',\n    styleUrls: ['form-row.component.scss'],\n    providers: [\n        {provide: BaseFormComponent, useExisting: forwardRef(() => FormRowComponent)}\n    ]\n})\nexport class FormRowComponent extends BaseFormComponent\n{\n\n    /**\n     * Hides the label\n     *\n     */\n    @Input()\n    noLabelLayout: boolean = false;\n\n    /**\n     * Renders row with highlighted background\n     *\n     */\n    @Input()\n    highlightRow: boolean = false;\n\n    /**\n     *\n     *  Field label that should appear above or next to the control\n     *\n     */\n    @Input()\n    label: string = '';\n\n    /**\n     *  For inputs type fields provides default angular validators, maximal length of the field\n     */\n    @Input()\n    maxLength: number;\n\n    /**\n     *  For inputs type fields provides default angular validators, minimal length of the field\n     */\n    @Input()\n    minLength: number;\n\n\n    /**\n     *  For inputs type fields provides default angular formatters. How the input fields should be\n     * formatted\n     */\n    @Input()\n    pattern: string;\n\n\n    /**\n     * Defines custom async validators which will be attached to the Control\n     */\n    @Input()\n    customAsyncValidators: AsyncValidatorFn[];\n\n    /**\n     * Defines custom  validators which will be attached to the Control\n     */\n    @Input()\n    customValidators: ValidatorFn[];\n\n    /**\n     * Tells the form row that we are rendering another nested form in this row. so we need\n     * to go 100%\n     */\n    @Input()\n    isNestedLayout: boolean = false;\n\n    /**\n     * What is the current size of the field. Current we support 4 different sizes: x-small, small,\n     * medium, large, x-large\n     */\n    private _size: string;\n\n    /**\n     *\n     * For single column layout without zones we need to apply grid directly to the FormRow tag\n     * so we don't need to introduce extra div level\n     *\n     */\n    @HostBinding('class') classList: string = '';\n\n\n    private _labelsOnTop: boolean;\n\n    constructor(public env: Environment,\n                // Event this creates CI depends. Need to have a reference to parent\n                // I need to refactor more parent to not use this child and refactor layouting\n                @SkipSelf() @Optional() @Inject(forwardRef(() => FormTableComponent))\n                protected parentContainer: FormTableComponent)\n    {\n        super(env, parentContainer);\n\n        this._size = 'ui-g-12 ui-md-' + WidgetSizeColumns.medium;\n    }\n\n\n    /**\n     * Right now we just initialize this once and use the values we do not expect now to react to\n     * changes\n     */\n    ngOnInit()\n    {\n        super.ngOnInit();\n        super.registerFormControl(null);\n\n        this.registerValidators();\n\n        this.omitPadding = this.parentContainer.omitPadding;\n        this.classList += isPresent(this.parentContainer) ? ' ui-g-12 ' : '';\n        this.classList = this.highlightRow ? this.classList + ' highlight-row ' : this.classList;\n\n        this.classList = this.omitPadding ? this.classList + ' ui-g-nopad ' : this.classList;\n    }\n\n\n    /**\n     * Just a size getter\n     *\n     */\n    get size(): string\n    {\n        return this._size;\n    }\n\n    /**\n     *  A size setter we translate custom sizes into actual bootstrap grid system. We use medium\n     * right now. but we should extend this for other screen sizes\n     *\n     *  todo: provide mapping and add other grid classes for other sizes xs, sm, lg, xl\n     *\n     *  Also check if this is dynamic size that should vary based on the how many number of columns\n     * we have. e.g. Date widgets is by default small, but in 2, 3 columns layout this small is too\n     * small.\n     */\n\n\n\n    @Input()\n    set size(value: string)\n    {\n\n        let isDynVal = false;\n\n        if (StringWrapper.startsWidth(value, 'd-')) {\n            isDynVal = true;\n            value = value.substr(2, value.length - 1);\n        }\n\n        if (isPresent(value) && !this.isNestedLayout) {\n            this._size = value;\n            let dSize = this.dynSize(value, isDynVal);\n            this._size = 'ui-g-12 ui-md-' + dSize;\n        } else if (this.isNestedLayout) {\n            this._size = 'ui-g-12 ui-md-12';\n        }\n    }\n\n\n    ngDoCheck(): void\n    {\n        super.ngDoCheck();\n\n        if (isPresent(this.parentContainer) && this.editable !== this.parentContainer.editable) {\n            this.editable = this.parentContainer.editable;\n        }\n    }\n\n    /**\n     * Push out of box angular validator as well as custom one to current FormControl\n     */\n    private registerValidators()\n    {\n        let validators: ValidatorFn[] = [];\n\n        if (isPresent(this.maxLength)) {\n            validators.push(Validators.maxLength(this.maxLength));\n        }\n\n        if (isPresent(this.minLength)) {\n            validators.push(Validators.minLength(this.minLength));\n        }\n\n        if (isPresent(this.required) && this.required) {\n            validators.push(Validators.required);\n        }\n\n        if (isPresent(this.pattern)) {\n            validators.push(Validators.pattern(this.pattern));\n        }\n        if (isPresent(this.customValidators)) {\n            ListWrapper.addAll(validators, this.customValidators);\n        }\n\n        if (validators.length === 1) {\n            this.formControl.setValidators(validators[0]);\n        } else if (validators.length > 1) {\n            this.formControl.setValidators(Validators.compose(validators));\n        }\n\n        if (isPresent(this.customAsyncValidators) && this.customAsyncValidators.length === 1) {\n            this.formControl.setAsyncValidators(this.customAsyncValidators[0]);\n        } else if (isPresent(this.customAsyncValidators) && this.customAsyncValidators.length > 1) {\n            this.formControl.setAsyncValidators(\n                Validators.composeAsync(this.customAsyncValidators));\n        }\n    }\n\n\n    /**\n     *\n     * Do we have labels on TOP, try to read this from Parent\n     *\n     */\n    get labelsOnTop(): boolean\n    {\n        if (isBlank(this._labelsOnTop) && isPresent(this.parentContainer)) {\n            return (<FormTableComponent>this.parentContainer).isLabelsOnTop();\n        }\n        return false;\n    }\n\n\n    /**\n     *\n     * Can refactor all into 1 line but its hard to debug so this is just for read\n     *\n     */\n    private dynSize(value: string, isDynValue: boolean): string\n    {\n        let normalizeSize = value.toLowerCase().replace('-', '');\n\n        if (isPresent(this.parentContainer) &&\n            (<FormTableComponent>this.parentContainer).hasTwoColumn && isDynValue)\n        {\n\n            let enumValues: string[] = Object.keys(WidgetSizeColumns);\n            normalizeSize = enumValues[enumValues.indexOf(normalizeSize) + 1];\n        }\n        return (<any>WidgetSizeColumns)[normalizeSize];\n\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    ContentChildren,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    SimpleChanges\n} from '@angular/core';\nimport {Environment, isPresent} from '@aribaui/core';\nimport {\n    BottomZoneComponent,\n    LeftZoneComponent,\n    MiddleZoneComponent,\n    RightZoneComponent,\n    TopZoneComponent\n} from '../five-zone-layout.component';\nimport {FormRowComponent} from './form-row/form-row.component';\nimport {BaseFormComponent} from '../../core/base-form.component';\n\n\n/**\n * FormTable is a specific layout component for rendering Labels and its controls in two columns\n * and 5 different zones.\n *\n * We support LEFT, MIDDLE, RIGHT, TOP, BOTTOM zone where we can place our component or widgets.\n * This\n * component is used as primary layout to wrap all the common use cases. E.g. When we lay out\n * fields in the form I do not want controls to be aware of error validation, size, labels, and\n * some other things. Control such INPUT is just responsible for retrieve user value but not how it\n * appear on the page.\n *\n * This way we can be flexible how we treat widgets for different kinds of situation depending\n * where they appear\n\n * FormTable just like the rest of the components are using Model driven approach how to work with\n * data, mean we are using FormGroup, FormControl etc. FormGroup can be passed into the FormTable,\n * otherwise its automatically created when the FormTable is instantiated.\n *\n * FormGroup is saved insode Environment where we are using this to pass this around the pages and\n * components.\n *\n * ### Example\n *\n * Simple Layout fields and its control\n *\n *\n * ```typescript\n *  @Component({\n *      selector: 'wrapper-comp' ,\n *      template: `\n *  \t\t\t<aw-form-table [formGroup]=\"formGroup\" (onSubmit)=>\n *  \t\t\t\t<aw-form-row [label]=\"'name'\" [name]=\"'name'\">\n *  \t\t\t\t\t<aw-input-field [type]=\"'string'\"></aw-input-field>\n *  \t\t\t\t</aw-form-row>\n *\n *  \t\t\t\t<aw-form-row [label]=\"'Preferred Colors'\" [name]=\"'myColors'\">\n *  \t\t\t\t\t<aw-checkbox-list [list]=\"checkBoxListValues\"\n *  \t\t\t\t\t                 [selections]=\"selectedValues\"\n *  \t\t\t\t\t                 [layout]=\"'inline'\"\n *  \t\t\t\t\t                 (onSelection)=\"onCBClick($event)\">\n *  \t\t\t\t\t</aw-checkbox-list>\n *  \t\t\t\t</aw-form-row>\n *  \t\t\t\t<aw-form-row [label]=\"'Gender'\" [name]=\"'gender'\">\n *\n *  \t\t\t\t\t<aw-radiobutton-list [list]=\"rbValues\" [selection]=\"rbSelection\">\n *\n *  \t\t\t\t\t</aw-radiobutton-list>\n *\n *  \t\t\t\t</aw-form-row>\n *  \t\t\t\t<aw-form-row [label]=\"'My birthdate'\" [name]=\"'birthDate'\" [size]=\"'small'\">\n *\n *  \t\t\t\t\t<aw-date-time [value]=\"date\" [editable]=\"editable\" [showTime]=\"showTime\">\n *  \t\t\t\t\t</aw-date-time>\n *  \t\t\t\t</aw-form-row>\n *  \t\t\t</aw-form-table>\n *    `\n *  })\n *  export class ShowUserInfoComponent\n *  {\n *       checkBoxListValues: string[] = ['blue' , 'red' , 'yellow' , 'orange' , 'white' , 'silver'\n *     , 'black' , 'Green'\n *     , 'Gray' , 'Navy' ,\n *          'Olive' , 'Aqua' , 'Purple'];\n *      selectedValues: string[] = ['blue' , 'Olive' , 'Aqua' , 'Purple'];\n *      rbValues: string[] = ['male' , 'female' , 'other'];\n *      rbSelection: string = 'male';\n *      editable: boolean = true;\n *      showTime: boolean = true;\n *\n *      formGroup: FormGroup = new FormGroup({});\n *\n *\n *      onCBClick (event): void\n *      {\n *          console.log('onCBClick = ' + event);\n *      }\n *\n *      onSubmit (model: any): void\n *      {\n *         console.log(model)\n *\n *         // will print { name:null, myColors:['blue' , 'Olive' , 'Aqua' , 'Purple'], gender:\n *     male}\n *      }\n *\n *  }\n *\n *  ```\n *\n *  Or you can use zone to layout these fields into two columns:\n *\n *  Current zones are implement with <ng-content SELECT> which is just a selector to searches for\n *     specific pattern. In our case instead of creating extra wrapper custom component use simple\n *     CSS class\n *\n *\n *  ```\n *            <aw-form-table #metaFormTable [editable]=\"editing\"\n *                          [useFiveZone]=\"isFiveZoneLayout\"\n *                          (onSubmit)=\"onSaveAction($event)\">\n *\n *                <aw-left  *ngIf=\"canShowZone('zLeft')\">\n *\n *                        <aw-form-row [label]=\"'name'\" [name]=\"'name'\">\n *                            <aw-input-field [type]=\"'string'\"></aw-input-field>\n *                        </aw-form-row>\n *\n *                        <aw-form-row [label]=\"'Preferred Colors'\" [name]=\"'myColors'\">\n *                            <aw-checkbox-list [list]=\"checkBoxListValues\"\n *                                             [selections]=\"selectedValues\"\n *                                             [layout]=\"'inline'\"\n *                                             (onSelection)=\"onCBClick($event)\">\n *                            </aw-checkbox-list>\n *                        </aw-form-row>\n *                </aw-left>\n *\n *\n *                <aw-right  *ngIf=\"canShowZone('zRight')\">\n *                        <aw-form-row [label]=\"'Gender'\" [name]=\"'gender'\">\n *                                <aw-radiobutton-list [list]=\"rbValues\" [selection]=\"rbSelection\">\n *                                </aw-radiobutton-list>\n *                        </aw-form-row>\n *\n *                        <aw-form-row [label]=\"'My birthdate'\" [name]=\"'birthDate'\"\n *     [size]=\"'small'\">\n *                            <aw-date-time [value]=\"date\" [editable]=\"editable\"\n *     [showTime]=\"showTime\">\n *                            </aw-date-time>\n *                        </aw-form-row>\n *                </<aw-right>\n *            </aw-form-table>\n *\n *  ```\n *\n *  todo: remove my css selectors for zones and replace it with real component even just a tag\n *  todo: would work file\n *\n */\n@Component({\n    selector: 'aw-form-table',\n    templateUrl: 'form-table.component.html',\n    styleUrls: ['form-table.component.scss'],\n    providers: [\n        {provide: BaseFormComponent, useExisting: forwardRef(() => FormTableComponent)}\n    ]\n})\nexport class FormTableComponent extends BaseFormComponent implements AfterContentInit\n{\n\n    /**\n     * Used for the form layout to see if we need to render labels stacked  or side by side next to\n     * the control\n     *\n     */\n    @Input()\n    labelsOnTop?: boolean = false;\n\n\n    /**\n     *\n     * Is this a 4 zone layout\n     *\n     */\n    @Input()\n    useFiveZone?: boolean = false;\n\n    /**\n     * For certain usecase we dont want to set automatically this to all children\n     */\n    @Input()\n    editabilityCheck: boolean = true;\n\n    /**\n     *  Triggers when the <form> is submitted. onSubmit we emit the whole formController objects\n     *\n     *\n     */\n    @Output()\n    onSubmit: EventEmitter<any> = new EventEmitter();\n\n\n    /**\n     * These properties represent individual zones and we use them to adjust our column grid\n     * layout\n     */\n    @ContentChild(LeftZoneComponent) leftZone: LeftZoneComponent;\n\n    @ContentChild(MiddleZoneComponent) middleZone: MiddleZoneComponent;\n\n    @ContentChild(RightZoneComponent) rightZone: RightZoneComponent;\n\n    @ContentChild(TopZoneComponent) topZone: TopZoneComponent;\n\n    @ContentChild(BottomZoneComponent) bottomZone: BottomZoneComponent;\n\n\n    @ContentChildren(BaseFormComponent, {descendants: true})\n    formFields: QueryList<BaseFormComponent>;\n\n    @ContentChildren(forwardRef(() => FormRowComponent), {descendants: true})\n    rows: QueryList<FormRowComponent>;\n\n\n    /**\n     * Cache calculated properties when init this component\n     *\n     */\n    hasOneColumn: boolean = false;\n    hasTwoColumn: boolean = false;\n    hasThreeColumn: boolean = false;\n\n\n    constructor(public env: Environment)\n    {\n        super(env, null);\n    }\n\n\n    ngOnChanges(changes: SimpleChanges): void\n    {\n        super.ngOnChanges(changes);\n\n        if (isPresent(changes['editable']) &&\n            changes['editable'].previousValue !== changes['editable'].currentValue) {\n\n            this.updateFormFields();\n        }\n    }\n\n\n    onSubmitForm(event: any)\n    {\n        this.onSubmit.emit(event);\n    }\n\n    /**\n     *\n     * Are labels on top\n     *\n     */\n    isLabelsOnTop(): boolean\n    {\n        return this.labelsOnTop;\n    }\n\n\n    /**\n     *\n     * Used by child component to inherit editability\n     *\n     */\n    isFormEditable(): boolean\n    {\n        return this.editable;\n    }\n\n\n    applyColumns(): void\n    {\n        if (!this.useFiveZone && this.hasAnyZones()) {\n            throw new Error('Zones detected in the FormTable but useFiveZone option is false');\n        }\n\n        this.hasOneColumn = !isPresent(this.rightZone) && !isPresent(this.middleZone);\n        this.hasTwoColumn = isPresent(this.leftZone) && isPresent(this.rightZone) &&\n            !isPresent(this.middleZone);\n\n        this.hasThreeColumn = isPresent(this.leftZone) && isPresent(this.rightZone) &&\n            isPresent(this.middleZone);\n\n        if (this.hasTwoColumn && !this.isTwoZoneReady()) {\n            this.leftZone.classList += ' ui-md-6 ui-lg-6';\n            this.rightZone.classList += ' ui-md-6 ui-lg-6';\n        }\n\n        if (this.hasThreeColumn && !this.isThreeZoneReady()) {\n            this.leftZone.classList += ' ui-md-6 ui-lg-4';\n            this.rightZone.classList += ' ui-md-6 ui-lg-4';\n        }\n    }\n\n\n    private hasAnyZones()\n    {\n        return isPresent(this.leftZone) || isPresent(this.rightZone) || isPresent(this.middleZone)\n            || isPresent(this.topZone) || isPresent(this.bottomZone);\n    }\n\n    /**\n     * Helper method to check if we already initialized the classList.\n     * the\n     *\n     * TODO: Probably string array would be easier\n     */\n    isTwoZoneReady(): boolean\n    {\n        return this.leftZone.classList.indexOf('ui-lg-6') > 0 &&\n            this.leftZone.classList.indexOf('ui-lg-6') > 0;\n    }\n\n\n    /**\n     * Helper method to check if we already initialized the classList.\n     * the\n     *\n     * TODO: Probably string array would be easier\n     */\n    isThreeZoneReady(): boolean\n    {\n        return this.leftZone.classList.indexOf('ui-lg-4') > 0 &&\n            this.leftZone.classList.indexOf('ui-lg-4') > 0;\n    }\n\n    ngAfterContentInit(): void\n    {\n        // problem since Angular 4.2, ngAfterContentInit\n        // without this I get error that value was changed after view was checked\n        // todo: refactor  - mainly our zones left, right middle\n        setTimeout(() =>\n        {\n            this.applyColumns();\n            this.updateFormFields();\n            this.adjustLayout();\n        });\n    }\n\n\n    private updateFormFields(): void\n    {\n        if (this.editabilityCheck && isPresent(this.formFields) && this.formFields.length > 0) {\n            this.formFields.forEach((item: BaseFormComponent) =>\n            {\n                item.editable = this.editable;\n                // item.formGroup = this.formGroup;\n            });\n        }\n    }\n\n\n    /**\n     * Based on if we are 2 or 3 or 1 column layout we need to adjust widgets width within the\n     * form row.\n     */\n    private adjustLayout(): void\n    {\n        if (isPresent(this.rows) && this.rows.length > 0) {\n            if (this.hasThreeColumn) {\n                this.rows.forEach((item: FormRowComponent) => item.size = 'large');\n            }\n\n        }\n    }\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {InputTextModule} from 'primeng/components/inputtext/inputtext';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {FormTableComponent} from './form-table.component';\nimport {FormRowComponent} from './form-row/form-row.component';\nimport {\n    BottomZoneComponent,\n    LeftZoneComponent,\n    MiddleZoneComponent,\n    RightZoneComponent,\n    TopZoneComponent\n} from '../five-zone-layout.component';\nimport {AWCoreComponentModule} from '../../core/core.module';\n\n\n@NgModule({\n    declarations: [\n        FormTableComponent,\n        FormRowComponent,\n        TopZoneComponent,\n        LeftZoneComponent,\n        RightZoneComponent,\n        MiddleZoneComponent,\n        BottomZoneComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        InputTextModule,\n        AWCoreComponentModule\n    ],\n    entryComponents: [\n        FormTableComponent,\n        FormRowComponent,\n        TopZoneComponent,\n        LeftZoneComponent,\n        RightZoneComponent,\n        MiddleZoneComponent,\n        BottomZoneComponent\n    ],\n    exports: [\n        FormTableComponent,\n        FormRowComponent,\n        TopZoneComponent,\n        LeftZoneComponent,\n        RightZoneComponent,\n        MiddleZoneComponent,\n        BottomZoneComponent\n    ]\n})\nexport class AWFormTableModule\n{\n}\n\n\n","import {distinctUntilChanged} from 'rxjs/operators';\nimport {Component, forwardRef, Inject, Input, Optional, SkipSelf} from '@angular/core';\nimport {NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Environment, isPresent, Value} from '@aribaui/core';\nimport {BaseFormComponent} from '../../core/base-form.component';\nimport {FormRowComponent} from '../../layouts/form-table/form-row/form-row.component';\nimport {Subscription} from 'rxjs';\nimport {DecimalPipe} from '@angular/common';\n\n\n/**\n * This component represent a Input field and it can  accept different types of values such as\n * text, number.\n *\n *\n *\n * ### Example\n *\n * ```typescript\n *  @Component({\n *      selector: 'wrapper-comp' ,\n *      template: '<aw-input-field [value]=\"inputValue\" [type]=\"inputType\"></aw-input-field>'\n *  })\n *  export class TestInputComponent\n *  {\n *      inputValue: string = 'Some text';\n *\n *      // by default input type is text, you can pass string, String, or text\n *      inputType: string = 'string';\n *  }\n *\n * ```\n *\n *\n *\n * ### Example wher input field is initialized with ngModel\n *\n * ```typescript\n *  @Component({\n *      selector: 'wrapper-comp' ,\n *      template: '<aw-input-field [value]=\"inputValue\" [(ngModel)]=\"inputType\"></aw-input-field>'\n *  })\n *  export class TestInputComponent\n *  {\n *      inputValue: string = 'Some text';\n *\n *      // by default input type is text, you can pass string, String, or text\n *      inputType: string = 'string';\n *  }\n *\n * ```\n *\n *  Note: if you are using this outside of FormTable please provide your own FormGroup\n *\n */\n\n\n\nexport const INPUT_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => InputFieldComponent),\n    multi: true\n};\n\n\n@Component({\n    selector: 'aw-input-field',\n    templateUrl: 'input-field.component.html',\n    styleUrls: ['input-field.component.scss'],\n\n    providers: [\n        INPUT_CONTROL_VALUE_ACCESSOR,\n\n        {provide: BaseFormComponent, useExisting: forwardRef(() => InputFieldComponent)}\n    ]\n})\nexport class InputFieldComponent extends BaseFormComponent\n{\n\n    /**\n     *\n     * A value used to save and read  when rendering and updating a component\n     *\n     */\n    @Input()\n    value: any = '';\n\n    /**\n     *\n     * The number of decimal places used to format the number object.\n     *\n     */\n    @Input()\n    precision: number;\n\n    /**\n     * BigDecimal object that encapsulates value and locale.\n     * If this object is set, values will be taken from this object\n     */\n    @Input()\n    bigDecimal: BigDecimal;\n\n    /**\n     * Provide custom icon that is placed into the input field.\n     *\n     * Todo: add extra binding that will allow developer to tell position, left right\n     */\n    @Input()\n    icon: string;\n    /**\n     * The decimal pipe is used to format our number object.\n     */\n    decimalPipe: DecimalPipe;\n    /**\n     * The formatted decimal value. Uses angular decimalPipe to format based on locale.\n     */\n    displayValue: string = '';\n    /**\n     * Just to clean up subscriber when component is destroyed\n     */\n    private vchSubscriber: Subscription;\n\n    constructor(public env: Environment,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => FormRowComponent))\n                protected parentContainer: BaseFormComponent)\n    {\n        super(env, parentContainer);\n        this.decimalPipe = new DecimalPipe(env.locale);\n    }\n\n    /**\n     * Input field type. Currently we support either Number or text\n     */\n    private _type: string = 'string';\n\n    get type(): string\n    {\n        return this._type;\n    }\n\n    /**\n     *\n     * generated setter to check for value and normalizing into expected either number or text\n     *\n     */\n    @Input()\n    set type(value: string)\n    {\n        if (value.toLowerCase() === 'string' || value.toLowerCase() === 'text') {\n            this._type = 'text';\n        } else if (value.toLowerCase() === 'number') {\n            this._type = 'number';\n        }\n    }\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n        super.registerFormControl(this.bigDecimal);\n\n        this.vchSubscriber = this.formControl.valueChanges\n            .pipe(distinctUntilChanged())\n            .subscribe(val =>\n            {\n                this.value = val;\n                this.onModelChanged(this.value);\n            });\n\n        if (this.bigDecimal) {\n            this.displayValue = this.formatNumber(this.bigDecimal.amount);\n        } else {\n            this.displayValue = this.value;\n        }\n    }\n\n    canSetType(): boolean\n    {\n        return true;\n    }\n\n    onKeyDown(el: any): void\n    {\n        if (this._type === 'number') {\n            this.displayValue = el.value;\n            this.onModelChanged(this.displayValue);\n        }\n    }\n\n    onBlur(el: any): void\n    {\n        if (this._type === 'number') {\n            this.bigDecimal = new BigDecimal(Number(el.value));\n            this.displayValue = this.formatNumber(this.bigDecimal.amount);\n            this.onModelChanged(this.displayValue);\n        }\n    }\n\n    writeValue(value: any)\n    {\n        if (value !== this.displayValue) {\n            this.value = value;\n            this.displayValue = '';\n            if (this.value) {\n                this.displayValue = this.value;\n            }\n            this.formControl.setValue(value, {onlySelf: true});\n        }\n    }\n\n    /**\n     * Format the number object according to its precision.\n     *\n     */\n    formatNumber(value: any)\n    {\n        if (!value) {\n            return '';\n        }\n\n        // If precision is present, use it for format the bigDecimal value for display.\n        if (isPresent(this.precision) &&\n            this._type === 'number')\n        {\n            // The default precision is 2. For example, 10.23.\n            let digits = '1.0-2';\n            digits = '1.0-' + this.precision;\n            return this.decimalPipe.transform(value, digits);\n        }\n        return value;\n    }\n\n    ngOnDestroy(): void\n    {\n        super.ngOnDestroy();\n\n        if (isPresent(this.vchSubscriber)) {\n            this.vchSubscriber.unsubscribe();\n        }\n    }\n}\n\n/**\n * BigDecimal object is represented as a value, locale, and currencyCode\n */\nexport class BigDecimal implements Value\n{\n    uniqueName: string;\n\n    constructor(public readonly amount: number = 0,\n                public readonly locale: string = 'en_US')\n    {\n    }\n\n\n    getTypes(): any\n    {\n        return {\n            amount: Number,\n            locale: String\n        };\n    }\n\n    className(): string\n    {\n        return 'BigDecimal';\n    }\n\n    $proto(): BigDecimal\n    {\n        return new BigDecimal(1, 'en_US');\n    }\n\n    toString(): string\n    {\n        return this.amount + ', locale: ' + this.locale;\n    }\n\n\n    clone(data: { amount?: number, locale?: string } = {}): BigDecimal\n    {\n        return new BigDecimal(\n            isPresent(data.amount) ? data.amount : this.amount,\n            isPresent(data.locale) ? data.locale : this.locale);\n    }\n\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {StringComponent} from './string.component';\n\n@NgModule({\n    declarations: [\n        StringComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule\n    ],\n    entryComponents: [\n        StringComponent\n    ],\n    exports: [\n        StringComponent\n    ],\n    providers: []\n})\nexport class AWStringFieldModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {InputTextModule} from 'primeng/components/inputtext/inputtext';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {InputFieldComponent} from '../input-field/input-field.component';\nimport {AWStringFieldModule} from '../string/string.module';\n\n@NgModule({\n    declarations: [\n        InputFieldComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        InputTextModule,\n        AWStringFieldModule\n    ],\n    entryComponents: [\n        InputFieldComponent\n    ],\n    exports: [\n        InputFieldComponent,\n        AWStringFieldModule,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    providers: []\n})\nexport class AWInputFieldModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, ContentChild, EventEmitter, Input, Output, TemplateRef} from '@angular/core';\nimport {BaseComponent} from '../../core/base.component';\nimport {AppConfig, Environment, isBlank, isPresent} from '@aribaui/core';\n\n\n/**\n *\n * basic navigation bar provide a main action buttons for its content (page level buttons).\n * This is not the Top level application navigation. This component provides by default action OK,\n * CANCEL and you are free to modify how the OK or CANCEL will be call as well as subscribe to the\n * event. Or you can provide your own buttons template which will be used instead of this default\n * one.\n *\n *\n *\n *\n *\n * ### Example 1:\n *\n * In order to use navigation bar in its basic usage you can do following:\n * this will render buttons on the top as well as on the bottom around the content.\n *\n *\n *  ```html\n *\n *      <aw-basic-navigator [brandImg]=\"'img/aribalogobal.png'\">\n *\n *            <div class=\"container\">\n *                <form>\n *                    User name: <input type=text value=\"peter.pan\">\n *                </<form>>\n *            </div>\n *      </aw-basic-navigator>\n *\n *\n * ```\n *\n *  if you do not want button on the top or bottom you can say thi using binding showTop or\n * showBottom.\n *\n *\n * ### Example 2:\n *  In this example we are providing custom buttons as well as brank section\n *\n *\n *  ```html\n *\n *\n *      <aw-basic-navigator [brandImg]=\"'img/aribalogobal.png'\">\n *            <ng-template #buttons>\n *                <ul class=\"nav navbar-nav float-md-right collapse navbar-toggleable-xs\">\n *                    <li class=\"nav-item \">\n *                        <button class=\"btn btn-secondary\" type=\"button\"\n * (click)=\"onSaveAction($evemt)\">Cancel</button>\n *                    </li>\n *                    <li class=\"nav-item active\">\n *                        <button class=\"btn btn-primary\" type=\"button\"\n * (click)=\"onCancelAction($event)\"> Save\n *                        </button>\n *                    </li>\n *                </ul>\n *            </ng-template>\n *\n *            <ng-template #brand>\n *                <span class=\"brand-title\">Ariba</span>\n *            </ng-template>\n *\n *\n *            <div class=\"container\">\n *                <form>\n *                    User name: <input type=text value=\"peter.pan\">\n *                </<form>>\n *            </div>\n *      </aw-basic-navigator>\n *\n *\n * ```\n\n *\n */\n@Component({\n    selector: 'aw-basic-navigator',\n    templateUrl: 'basic-navigator.component.html',\n    styleUrls: ['basic-navigator.component.scss']\n})\nexport class BasicNavigatorComponent extends BaseComponent\n{\n\n    /**\n     * Indicates that buttons will be rendered on the top\n     *\n     * Default value is TRUE\n     *\n     */\n    @Input()\n    showTop: boolean = true;\n\n\n    /**\n     * Indicates that buttons will be rendered on the bottom\n     *\n     * Default value is TRUE\n     *\n     */\n    @Input()\n    showBottom: boolean = true;\n\n    /**\n     * Indicates that brand section that is on the left side and only in the top bar is visible\n     *\n     * Default value is TRUE\n     *\n     */\n    @Input()\n    showBrand: boolean = true;\n\n    /**\n     * Relative path to a image. Images are saved inside assets folder.\n     *\n     */\n    @Input()\n    brandImg: string;\n\n    /**\n     * If you are not using custom buttons you can pass a label to OK action\n     *\n     * Default value is OK\n     */\n    @Input()\n    okActionLabel: string;\n\n    /**\n     * If you are not using custom buttons you can pass a label to Cancel action\n     *\n     * Default value is OK\n     */\n    @Input()\n    cancelActionLabel: string;\n\n\n    /**\n     * Context is an object which is rendered inside nav-bar content. Sometimes there are situation\n     * that you want to render some information from the object inside navigation bar. So you are\n     * free to pass a context object and then access it inside your template\n     *\n     * ```HTML\n     *            <ng-template #brand let-item>\n     *                <span class=\"brand-title\">{{item.firstName}}</span>\n     *            </ng-template>\n     *\n     * ```\n     */\n    @Input()\n    context: any;\n\n\n    @Input()\n    showCancelButton: boolean;\n\n    /**\n     *\n     * EventEmitter that is triggered when you click on default OK Action\n     *\n     */\n    @Output()\n    onOKAction: EventEmitter<any> = new EventEmitter<any>();\n\n    /**\n     *\n     * EventEmitter that is triggered when you click on default CANCEL Action\n     *\n     */\n    @Output()\n    onCancelAction: EventEmitter<any> = new EventEmitter<any>();\n\n\n    /**\n     * Queries a buttons template if any\n     */\n    @ContentChild('buttons')\n    buttonsTemplate: TemplateRef<any>;\n\n    /**\n     * Queries a brand template if any\n     */\n    @ContentChild('brand')\n    brandTemplate: TemplateRef<any>;\n\n\n\n    constructor(env: Environment, appConfig: AppConfig)\n    {\n        super(env);\n\n        // todo: load this from resource file using ngTranslate service\n        this.okActionLabel = 'OK';\n        this.cancelActionLabel = 'Cancel';\n        this.brandImg = 'images/aribalogobal.png';\n    }\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n        if (isBlank(this.showCancelButton)) {\n            this.showCancelButton = this.editable || (this.onCancelAction.observers.length > 0\n                && this.onOKAction.observers.length > 0);\n        }\n    }\n\n\n    /**\n     * Returns if buttonsTemplate is available\n     *\n     */\n    hasButtonTemplate(): boolean\n    {\n        return isPresent(this.buttonsTemplate);\n    }\n\n    /**\n     * Returns if brandTemplate is available\n     *\n     */\n    hasBrandTemplate(): boolean\n    {\n        return isPresent(this.brandTemplate);\n    }\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {AfterViewInit, Component, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {Environment, isBlank, isPresent} from '@aribaui/core';\nimport {BaseComponent} from '../../core/base.component';\n\n/**\n * Button component that implements consistent styling, behavior. Button can be rendered either as\n * a button or as a link. It could be standalone or be part of a form.\n *\n *  ### Example\n *  ```\n *\n *  @Component({\n *    selector: 'registration' ,\n *    template: `\n *\n *   <aw-form-table >\n *       <aw-form-row [label]=\"'Amount'\" [name]=\"'amount'\" [size]=\"'small'\">\n *\n *           <aw-button [type]=\"'submit'\" [name]=\"'button'\"\n *                     (action)=\"onClicked($event)\" [value]=\"command\"\n *                     [style]=\"'warning'\" >Button</aw-button>\n *       </aw-form-row>\n *   </aw-form-table>\n *\n *    `\n *    })\n *    export class MyComponent\n *    {\n *        command:boolean;\n *\n *        constructor ()\n *        {\n *        }\n *\n *        onClicked(value:string) {\n *           if (value) {\n *              // submit form.\n *           }\n *        }\n *    }\n */\n@Component({\n    selector: 'aw-button',\n    templateUrl: 'button.component.html',\n    styleUrls: ['button.component.scss']\n})\nexport class ButtonComponent extends BaseComponent implements AfterViewInit\n{\n\n    /**\n     * Button types  [ button | submit | reset ]\n     *\n     */\n    @Input()\n    type: string = 'button';\n\n    /**\n     * Name for this button. Can be used to lookup component in form.\n     */\n    @Input()\n    name: string;\n\n\n    /**\n     * styling for this button. See ButtonStyle for all supported styles.\n     */\n    @Input()\n    style: ButtonStyle = 'primary';\n\n\n    /**\n     * sizing for this button. [large, normal, small].\n     */\n    @Input()\n    size: ButtonSize = 'normal';\n\n    /**\n     * Specify the target of the button. [_blank | _self | _parent | _top | framename ]\n     */\n    @Input()\n    target: string;\n\n    /**\n     * Value to be send to server when clicked.\n     */\n    @Input()\n    value: string;\n\n    /**\n     * Event fired when user select a item\n     */\n    @Output()\n    action: EventEmitter<any> = new EventEmitter();\n\n\n    /**\n     * PrimeNg button simply does not support content so we need to get around it\n     */\n    label: string;\n\n    /**\n     * Internal CSS class that styles this button based on input 'style' and 'size'\n     */\n    buttonClass: string;\n\n    constructor(protected element: ElementRef, public env: Environment)\n    {\n        super(env);\n\n        // Default button class is secondary.\n        this.buttonClass = 'ui-button-secondary';\n\n        // Default disabled\n        this.disabled = false;\n    }\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n        // How to style this button.\n        if (isPresent(this.style)) {\n            if (this.style === 'primary') {\n                // Default .ui-button and .ui-button-primary get the same style.\n                // .ui-button-primary is necessary because button style can be overridden\n                // when included inside other widgets. So specify primary\n                this.buttonClass = 'ui-button-primary';\n            } else {\n                this.buttonClass = 'ui-button-' + this.style;\n            }\n        }\n\n        // Determine the button class based on input size.\n        if (this.size) {\n\n            switch (this.size) {\n                case 'large' :\n                    this.buttonClass += ' btn-lg';\n                    break;\n                case 'normal' :\n                    this.buttonClass += ' btn-mid';\n                    break;\n                case 'small' :\n                    this.buttonClass += ' btn-sm';\n                    break;\n            }\n        }\n    }\n\n\n    /**\n     * This is little hacky hackity hack as currently primeng button directive does not work with\n     * ngcontent projection but it has a label bindings, which is not the way developers work with\n     * button. you want to\n     *\n     * <button> MY CONTENT</button instead of <button label='MyContent'></button>\n     *\n     *\n     * @Todo: Change this until the time keep a test that check that they are still using ui-button\n     *     that we are expecting and replacing\n     */\n    ngAfterViewInit(): void\n    {\n        if (isPresent(this.element)) {\n            let button = this.element.nativeElement.querySelector('button');\n            let buttonTitle = button.children[0];\n            button.children[0].textContent = this.element.nativeElement.textContent.trim()\n                .replace('ui-button', '').replace('ui-btn', '');\n\n            button.classList.remove('ui-button-text-empty');\n            button.textContent = '';\n            button.appendChild(buttonTitle);\n        }\n    }\n\n    /**\n     *  Action clicked. Call parent action.\n     */\n    clicked($event: any)\n    {\n        this.action.emit(isBlank(this.value) ? $event : this.value);\n    }\n}\n\n\n/**\n * Supported Button Style\n */\nexport type ButtonStyle = 'info' | 'primary' | 'secondary' | 'warning' | 'success' | 'danger' |\n    'link';\n\n/**\n * Supported Button Size\n */\nexport type ButtonSize = 'large' | 'normal' | 'small';\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ButtonComponent} from './button.component';\nimport {ButtonModule} from 'primeng/primeng';\n\n\n@NgModule({\n    declarations: [\n        ButtonComponent\n    ],\n    imports: [\n        CommonModule,\n        ButtonModule,\n\n    ],\n    entryComponents: [\n        ButtonComponent\n    ],\n    exports: [\n        ButtonComponent\n    ],\n    providers: []\n})\nexport class AWButtonModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {BasicNavigatorComponent} from './basic-navigator.component';\nimport {ToolbarModule} from 'primeng/primeng';\nimport {AWButtonModule} from '../button/button.module';\nimport {AWCoreComponentModule} from '../../core/core.module';\n\n\n@NgModule({\n    declarations: [\n        BasicNavigatorComponent\n    ],\n    imports: [\n        CommonModule,\n        ToolbarModule,\n        AWButtonModule,\n        AWCoreComponentModule\n\n    ],\n    exports: [\n        BasicNavigatorComponent\n    ],\n    providers: []\n})\nexport class AWBasicNavigatorModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport {\n    Component,\n    ContentChild,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport {BaseComponent} from '../../core/base.component';\nimport {Environment, isBlank, isPresent} from '@aribaui/core';\n\n\n@Directive({\n    selector: `aw-card-top`,\n    host: {\n        'class': 'w-card-ztop'\n    }\n})\nexport class CardZoneTopComponent\n{\n}\n\n@Directive({\n    selector: `aw-card-bottom`,\n    host: {\n        'class': 'w-card-zbottom'\n    }\n})\nexport class CardZoneBottomComponent\n{\n}\n\n/**\n *\n * Card component is a container rendering its content inside 3 different zones.\n *\n *  ------------------------------------------\n *  |   TITLE                       | ACTION |\n *  |-----------------------------------------\n *  |                                        |\n *  |   TOP                                  |\n *  |                                        |\n *  ------------------------------------------\n *  |                                        |\n *  |   BOTTOM                               |\n *  |                                        |\n *  |                                        |\n *  ------------------------------------------\n *\n *\n *  There are 3 zones  + 1 placeholder for the actionIcon\n *\n *  Cards can be selectable which means when you click on it there will be rendered a border with\n *  a check mark inside Action zone (this is default behavior).\n *  You can use [selectable] binding to disable this, in such case card will have just a border\n *  without any check mark.\n *\n *  Cards can also contain custom Action which is rendered inside ACTION zone and on the\n *  application level you can listen for (click) events as well as you can provide your own action\n *  icon\n *\n *  Besides ACTION, TITLE, TOP and BOTTOM content zones cards support hover overlay effect and\n *  when its activated there is a overlay displayed on top of the card with Icon in the middle.\n *  Please note when [hasHover] is TRUE all the actions and selectability are disabled as there is\n *  only one action which click on the hover overlay.\n *\n *\n * ###example 1:\n *  Basic hover card which by default support selectable mode\n *\n * ```\n *          <aw-card #card1 [hasAction]=\"false\" [width]=\"'202px'\" [height]=\"'154px'\">\n *\n *                 <aw-card-title [align]=\"'bottom-left'\">\n *                     <span class=\"a-supplier-tag\">\n *                         Preferred\n *                     </span>\n *                 </aw-card-title>\n *\n *                 <aw-card-top>\n *                     <div class=\"supplierName\">\n *                         Haight Pumps\n *                     </div>\n *                     <div class=\"supplierLocation\">\n *                         Palo Alto, CA, USA\n *                     </div>\n *                 </aw-card-top>\n *\n *                 <aw-card-bottom class=\"w-card-zbottom\">\n *                     some text about the supplier and his parents<br/>\n *                     and some contacts\n *                 </aw-card-bottom>\n *\n *             </aw-card>\n *\n * ```\n *\n *  ###example 2:\n *   Hover card with custom action. when unselected action will appear and user can click on it.\n *\n * ```\n *          <aw-card #card1 [selectable]=\"true\" [actionIcon]=\"'icon-question-mark'\"\n *                     (onAction)=\"onAction(3, $event)\">\n *\n *                 <aw-card-title [align]=\"'bottom-left'\">\n *                     <span class=\"a-supplier-tag\">\n *                         Preferred\n *                     </span>\n *                 </aw-card-title>\n *\n *                 <aw-card-top>\n *                     <div class=\"supplierName\">\n *                         Haight Pumps\n *                     </div>\n *                     <div class=\"supplierLocation\">\n *                         Palo Alto, CA, USA\n *                     </div>\n *                 </aw-card-top>\n *\n *                 <aw-card-bottom class=\"w-card-zbottom\">\n *                     some text about the supplier and his parents<br/>\n *                     and some contacts\n *                 </aw-card-bottom>\n *\n *             </aw-card>\n *\n * ```\n *\n *\n *\n */\n@Component({\n    selector: 'aw-card',\n    templateUrl: './card.component.html',\n    styleUrls: ['./card.component.scss']\n})\nexport class CardComponent extends BaseComponent\n{\n    /**\n     * Tells if we should explicitly hide the action\n     *\n     */\n    @Input()\n    hasAction: boolean = false;\n\n    /**\n     *\n     * Is selectable mode supported? Saying Yes, card will have by default check-mark in the\n     * ACTION zone when selected\n     *\n     */\n    @Input()\n    selectable: boolean = true;\n\n    /**\n     * Option to pass custom \"Card Selected\" Icon\n     *\n     */\n    @Input()\n    selectedIcon: string = 'icon-accept';\n\n    /**\n     * There is no default value for action icon, when application want to add action to the card\n     * it must also provide a icon\n     *\n     */\n    @Input()\n    actionIcon: string;\n\n    /*\n     * Enable and disables hover effect on top of the card\n     */\n    @Input()\n    hasHover: boolean = false;\n\n    /**\n     *\n     * Default icon name for the hover overlay. This icons shows up in the middle over the card\n     * vertically and horizontally centered\n     *\n     */\n    @Input()\n    hoverIcon: string = 'icon-add';\n\n\n    /**\n     *  Selection state\n     *\n     */\n    @Input()\n    selected: boolean = true;\n\n\n    /**\n     * Fired when the card is selected.\n     *\n     */\n    @Output()\n    onSelect: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Fired when action icon is clicked.\n     *\n     */\n    @Output()\n    onAction: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Fired when the user clicks on the hover overlay.\n     *\n     */\n    @Output()\n    onHoverAction: EventEmitter<any> = new EventEmitter();\n\n\n    /**\n     * This query is used to save the content reference to bottom section if any\n     */\n    @ContentChild(CardZoneBottomComponent)\n    bottom: CardZoneBottomComponent;\n\n\n    /**\n     * Provides custom template for the body which is under application developer control.\n     */\n    @ContentChild('body')\n    bodyTemplate: TemplateRef<any>;\n\n\n    @ViewChild('hoverDiv')\n    hoverDiv: ElementRef;\n\n    /**\n     * Usually when template is provided we want to use it and replace internal one but in this\n     * case it will be always conditional and application developer can switch between default\n     * template with zones and custom one provided by developer.\n     *\n     */\n    useBodyTemplate: boolean = false;\n\n\n    constructor(public env: Environment)\n    {\n        super(env);\n\n        // sets default value\n        this.width = '202px';\n        this.height = '154px';\n    }\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n\n        // If application wants to use action it must provide actionIcon\n        if (isBlank(this.actionIcon) && this.hasAction) {\n            throw new Error('You need to provide action icon');\n        }\n\n    }\n\n    public showBottomSection()\n    {\n        return isPresent(this.bottom);\n    }\n\n\n    /**\n     * fires select and unselect event.\n     */\n    toggleSelect(event: any)\n    {\n        if (!this.selectable) {\n            event.preventDefault();\n            event.stopPropagation();\n\n        } else {\n            this.selected = !this.selected;\n            this.onSelect.emit(this.selected);\n        }\n    }\n\n    /**\n     *\n     * Only fired when action is rendered and user clicks on custom actionIcon\n     *\n     */\n    onActionClick(event: any)\n    {\n        if (this.hasAction && (!this.selected || !this.selectable)) {\n            this.onAction.emit(this.selected);\n        }\n    }\n\n    /**\n     * Triggered  when hover effect is on + user click on the card\n     *\n     */\n    onHover(isEnter: boolean): void\n    {\n        if (isPresent(this.hoverDiv)) {\n            this.hoverDiv.nativeElement.style.opacity = isEnter ? 0.5 : 0;\n        }\n    }\n\n    /**\n     *\n     * Used to decide if we should render implicit card template with our zones or\n     * user provided template\n     *\n     */\n    showBodyTemplate(): boolean\n    {\n        return isPresent(this.bodyTemplate)  && this.useBodyTemplate;\n    }\n\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {BaseComponent} from '../../../core/base.component';\nimport {Environment} from '@aribaui/core';\n\n\n/**\n * Maps our internal alignment value to real css values\n *\n */\nconst VAlignMap = {\n    'top-left': 'flex-start',\n    'top-center': 'flex-start',\n    'top-right': 'flex-start',\n    'center-left': 'center',\n    'center-center': 'center',\n    'center-right': 'center',\n    'bottom-left': 'flex-end',\n    'bottom-center': 'flex-end',\n    'bottom-right': 'flex-end'\n};\n\n\nconst HAlignMap = {\n    'top-left': 'flex-start',\n    'top-center': 'center',\n    'top-right': 'flex-end',\n    'center-left': 'flex-start',\n    'center-center': 'center',\n    'center-right': 'flex-end',\n    'bottom-left': 'flex-start',\n    'bottom-center': 'center',\n    'bottom-right': 'flex-end'\n};\n\n\n/**\n * Title zone provides a content placeholder for the Title Area. This zone is adding ability\n * to align its content into 9 different position.\n *\n * You can use this Title zone within <aw-card> as:\n *\n *\n * ```html\n *\n *  <aw-card  [width]=\"'202px'\" [height]=\"'154px'\" [hasHover]=\"true\"\n *                       [selectable]=\"false\" [hasAction]=\"false\"\n *                  (onHoverAction)=\"onAction(7, $event)\" >\n *\n *                  <aw-card-title [align]=\"'bottom-left'\">\n *                      <span class=\"a-supplier-tag\">\n *                          Preferred\n *                      </span>\n *                  </aw-card-title>\n *\n *   </aw-card>\n *\n * ```\n * Default alignment is top-left\n *\n *\n *\n *\n */\n@Directive({\n    selector: `aw-card-title`,\n    host: {\n        'class': 'w-card-title'\n    }\n})\nexport class CardZoneTitleComponent extends BaseComponent\n{\n    /**\n     * Special property which is used to apply flex properties for aligning content vertically\n     * as well as horizontally\n     *\n     */\n    @Input()\n    align: CardTitleAlignment = 'top-left';\n\n\n    constructor(public env: Environment, public elem: ElementRef)\n    {\n        super(env);\n\n    }\n\n\n    ngOnInit(): void\n    {\n        super.ngOnInit();\n\n        this.elem.nativeElement.style.alignItems = VAlignMap[this.align];\n        this.elem.nativeElement.style.justifyContent = HAlignMap[this.align];\n    }\n}\n\n\n/**\n * Make sure we dont accept any unsupported values. These values maps to the HAlignMap and\n * VAlignMap in order to get real css value for the flex alignment\n */\nexport type CardTitleAlignment = 'top-left' | 'top-center' | 'top-right' | 'center-left' |\n    'center-center'  | 'center-right' | 'bottom-left' | 'bottom-center' | 'bottom-right';\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CardComponent, CardZoneBottomComponent, CardZoneTopComponent} from './card.component';\nimport {CardZoneTitleComponent} from './card-title/card-title.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        CardComponent,\n        CardZoneTitleComponent,\n        CardZoneTopComponent,\n        CardZoneBottomComponent\n    ],\n    entryComponents: [\n        CardComponent\n    ],\n    exports: [\n        CardComponent,\n        CardZoneTitleComponent,\n        CardZoneTopComponent,\n        CardZoneBottomComponent\n    ],\n    providers: []\n})\nexport class AWCardModule\n{\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    Component,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    SimpleChanges,\n    SkipSelf\n} from '@angular/core';\nimport {FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Environment, isBoolean, isPresent} from '@aribaui/core';\nimport {BaseFormComponent} from '../../core/base-form.component';\n\n\n/**\n *  CheckboxType describes what type of checkbox is this:\n *\n * - Form type: that is writing and reading a value from/to model both using FormGroup as well\n *              as ngModel\n * - Action type:  only fires action and does not write value to model.\n *\n *\n */\nexport type CheckboxType = 'form' | 'action';\n\n/**\n *\n * Implements standard HTML checkbox on top of PrimeNG. There are 2 types of\n * {@link CheckboxComponent}: form and action checkbox as described above.\n *\n *\n * Usage: Basic example having red checkbox checked\n *\n * ```HTML\n *        <aw-checkbox [name]=\"'color'\" [value]=\"'red'\" [label]=\"'Red'\"\n *                                        [(ngModel)]=\"model\">\n *        </aw-checkbox>\n *        <aw-checkbox [name]=\"'color'\" [value]=\"'blue'\" [label]=\"'Blue'\"\n *                                        [(ngModel)]=\"model\">\n *       </aw-checkbox>\n *\n * ```\n *\n * ```ts\n *\n *\n *   class CBBasicWithNgModelComponent\n *   {\n *\n *       model: string[] = ['red'];\n *\n *       constructor()\n *       {\n *       }\n *   }\n *\n * ```\n *\n * For more examples please see a playground or unit test.\n *\n */\nexport const CB_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CheckboxComponent),\n    multi: true\n};\n\n\n@Component({\n    selector: 'aw-checkbox',\n    templateUrl: 'checkbox.component.html',\n    styleUrls: ['checkbox.component.scss'],\n\n    providers: [\n        CB_CONTROL_VALUE_ACCESSOR,\n        {provide: BaseFormComponent, useExisting: forwardRef(() => CheckboxComponent)}\n    ]\n})\nexport class CheckboxComponent extends BaseFormComponent\n{\n\n    /**\n     *\n     * A value associated with this checkbox\n     *\n     */\n    @Input()\n    value: any = '';\n\n\n    /**\n     * Type of checkbox. Form based updates model and Action based only fires click events\n     *\n     */\n    @Input()\n    type: CheckboxType = 'form';\n\n\n    /**\n     * Label to be used when rendering a checkbox\n     */\n    @Input()\n    label: string;\n\n\n    /**\n     * Trigger click event.\n     *\n     */\n    @Output()\n    action: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * PrimeNG has this type called binary which works only with Boolean meaning it does not add or\n     * remove values.\n     *\n     * In our case Checktype = Action is always binary or when this.value is boolean\n     *\n     */\n    isBinary: boolean = false;\n\n    /**\n     * Internal model for checkbox\n     */\n    model: any;\n\n\n    constructor(public env: Environment,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => BaseFormComponent))\n                protected parentContainer: BaseFormComponent)\n    {\n        super(env, parentContainer);\n    }\n\n    ngOnInit()\n    {\n        this.model = this.value;\n        this.type = this.action.observers.length > 0 ? 'action' : this.type;\n\n        if (this.isFormType()) {\n            super.ngOnInit();\n\n            if (this.isStandalone) {\n                super.registerFormControl(this.value);\n                this.model = this.formControl.value;\n                this.onModelChanged(this.model);\n            } else {\n                // get control from parent\n                this.formControl = <FormControl> this.formGroup.controls[this.name];\n            }\n        }\n        // When value is boolean we are dealing with PrimeNg Binary checkbox\n        // which only sets TRUE/FALSE and does not add or remove values\n        this.isBinary = isBoolean(this.value);\n\n    }\n\n\n    ngOnChanges(changes: SimpleChanges): void\n    {\n        super.ngOnChanges(changes);\n\n        if (isPresent(changes['value']) &&\n            (changes['value'].currentValue !== changes['value'].previousValue)) {\n            this.model = changes['value'].currentValue;\n        }\n\n\n    }\n\n    /**\n     * Called when Checkbox is clicked and it either fire action or updates the model.\n     *\n     */\n    onChange(event: any): void\n    {\n        if (this.isFormType()) {\n            this.onModelChanged(this.model);\n            if (this.isStandalone) {\n                this.formControl.setValue(this.model);\n            }\n        } else {\n            this.action.emit(event);\n        }\n    }\n\n\n    /**\n     *\n     * Tell if we are using Form Checkbox. This is used remove some of the bindings that are not\n     * applicable for certain type.\n     *\n     */\n    isFormType(): boolean\n    {\n        return this.type === 'form';\n    }\n\n    /**\n     * Internal. Please see ControlValueAccessor\n     *\n     */\n    writeValue(value: any)\n    {\n        if (value !== this.model && this.isFormType()) {\n            this.model = value;\n\n            if (this.isStandalone) {\n                this.onModelChanged(this.model);\n                this.formControl.setValue(this.model);\n            }\n        }\n    }\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CheckboxComponent} from './checkbox.component';\nimport {CheckboxModule} from 'primeng/primeng';\n\n\n@NgModule({\n    declarations: [\n        CheckboxComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CheckboxModule\n    ],\n\n    entryComponents: [\n        CheckboxComponent\n    ],\n    exports: [\n        CheckboxComponent,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    providers: []\n})\nexport class AWCheckBoxModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    AfterContentInit,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    SkipSelf\n} from '@angular/core';\nimport {Environment, equals, isBlank, isPresent} from '@aribaui/core';\nimport {NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BaseFormComponent} from '../../core/base-form.component';\nimport {FormRowComponent} from '../../layouts/form-table/form-row/form-row.component';\n\n\n/**\n *  Checkbox list is a wrapper class around 'Checkbox' component to simply assembly of multi choice\n * component\n *\n * In Addition it adds ability to work with complex object. PrimeNG checkboxes work only with\n * primitive values.\n *\n * @see {@link check-box/check-box.component.ts}\n *\n *\n * ### Example\n *\n *\n *    @Component({\n *       selector: 'showCheckBoxList' ,\n *       template: `\n *           <aw-checkbox-list [list]=\"checkBoxListValues\" [selections]=\"selectedValues\"\n *\n *            [name]=\"'myColors'\" [formGroup]=\"formGroup\" (onSelection)=\"onCBClick\">\n *           </aw-checkbox-list>\n *       `\n *\n *       })\n *        class MyShowCLComponent\n *        {\n *            checkBoxListValues: string[] = ['blue' , 'red' , 'yellow' , 'orange' , 'white' ,\n *     'silver' , 'black' ,\n *            'Green' , 'Gray' , 'Navy' , 'Olive' , 'Aqua' , 'Purple'];\n *\n *            selectedValues: string[] = ['blue' , 'Olive' , 'Aqua' , 'Purple'];\n *\n *\n *            formGroup: FormGroup = new FormGroup({});\n *\n *\n *            onCBClick (event): void\n *            {\n *                console.log('onCBClick = ' + event);\n *            }\n *\n *        }\n **\n */\n\n\n\n\nexport const CB_LIST_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CheckBoxListComponent),\n    multi: true\n};\n\n\n@Component({\n    selector: 'aw-checkbox-list',\n    templateUrl: 'check-box-list.component.html',\n    styleUrls: ['check-box-list.component.scss'],\n\n    providers: [\n        CB_LIST_CONTROL_VALUE_ACCESSOR,\n        {provide: BaseFormComponent, useExisting: forwardRef(() => CheckBoxListComponent)}\n    ]\n})\nexport class CheckBoxListComponent extends BaseFormComponent implements AfterContentInit\n{\n    /**\n     * List of values used to render checkboxes. Even we have here type as ANY we internally\n     * support only string at the moment\n     */\n    @Input()\n    list: any[];\n\n\n    /**\n     *  Selections are default CHECKED values passed. e.g. When rendering field favorite colors:\n     * blue, red, yellow you will pass in here blue, red, then checkboxes with value blue, red wil\n     * be rendered as check and yellow unchecked\n     */\n    @Input()\n    selections: any[];\n\n    /**\n     * Fires event when checkbox is selected/clicked. Emits current clicked checkboxed. not the\n     * actuall internal model value in this case array of choices\n     *\n     */\n    @Output()\n    onSelection: EventEmitter<any> = new EventEmitter<any>();\n\n    /**\n     * special expression to format label\n     */\n    @Input()\n    labelFormatter: (value: any) => string;\n\n\n    /**\n     * Internal model\n     */\n    model: any = [];\n\n    constructor(public env: Environment,\n                private cd: ChangeDetectorRef,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => FormRowComponent))\n                protected parentContainer: BaseFormComponent)\n    {\n        super(env, parentContainer);\n    }\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n\n        if (isBlank(this.selections)) {\n            this.selections = [];\n        }\n\n        this.registerFormControl(this.selections);\n\n        this.updateModel(this.selections);\n        this.onModelChanged(this.selections);\n    }\n\n\n    ngAfterContentInit(): void\n    {\n        let updatedModel: any[] = [];\n\n        this.model.forEach((index: number) => updatedModel.push(this.list[index]));\n        this.formControl.setValue(updatedModel, {\n            emitEvent: true,\n            emitViewToModelChange: false\n        });\n        this.cd.detectChanges();\n\n    }\n\n\n    /**\n     * Label is extracted into this method so in the future we can play more how we want to display\n     * the value. Since I want to support formatters for each components we might have a chance to\n     * decide how label will look like.\n     *\n     */\n    labelValue(item: any): string\n    {\n        if (isPresent(this.labelFormatter)) {\n            return this.labelFormatter(item);\n        }\n        return item.toString();\n    }\n\n\n    /**\n     * In this version of checkboxes we still expect only primitive types. Keep this functionality\n     * in extra method so we can work with it even now we just return the same value back\n     */\n    value(item: any): any\n    {\n        return item;\n    }\n\n    /**\n     * Delegate event outside of this component and convert indexed model to original objects\n     *\n     */\n    onChange(event: any): void\n    {\n        let updatedModel: any[] = [];\n\n        this.model.forEach((index: number) =>\n        {\n            updatedModel.push(this.list[index]);\n        });\n\n        this.onSelection.emit(updatedModel);\n        this.onModelChanged(updatedModel);\n        this.formControl.setValue(updatedModel, {\n            emitEvent: true,\n            emitViewToModelChange: false\n        });\n    }\n\n\n    /**\n     * Since we might be dealing with complex object store only INDEXes number in the model.\n     *\n     */\n    updateModel(sourceList: any[]): void\n    {\n        sourceList.forEach((item: any) =>\n        {\n            let index = this.list.findIndex((elem: any) =>\n            {\n                return equals(item, elem);\n            });\n            this.model.push(index);\n        });\n    }\n\n\n    /**\n     * Internal. Please see ControlValueAccessor\n     *\n     */\n    writeValue(value: any)\n    {\n        if (isPresent(this.model) && isPresent(value)) {\n            let newModel = value;\n            this.updateModel(newModel);\n\n            // this.cd.markForCheck();\n        }\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CheckBoxListComponent} from '../check-box-list/check-box-list.component';\nimport {AWCheckBoxModule} from '../checkbox/check-box.module';\n\n\n@NgModule({\n    declarations: [\n        CheckBoxListComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        AWCheckBoxModule\n    ],\n\n\n    exports: [\n        CheckBoxListComponent\n    ],\n    providers: []\n})\nexport class AWCheckBoxListModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {BaseComponent} from '../../core/base.component';\nimport {Environment} from '@aribaui/core';\n\n/**\n * Hyperlink component that implements consistent styling, behavior. Hyperlink supports all of the\n * native link functionality. In addition, it supports navigation to components through the action\n * binding.\n *\n *\n * for more info please see class Doc of the:\n *  @see {@link button/button.component.ts}\n *\n *  ### Example\n *  ```\n *\n *  @Component({\n *    selector: 'registration' ,\n *    template: `\n *\n *           <aw-hyperlink  [type]=\"'text/html'\" [name]=\"'link'\"\n *                        (action)=\"onClicked($event)\" [value]=\"customerId\"\n *                        [size]=\"'large'\" >my link</aw-hyperlink>\n *\n *    `\n *    })\n *    export class MyComponent\n *    {\n *        command:boolean;\n *\n *        constructor ()\n *        {\n *        }\n *\n *        onClicked(customerId:string) {\n *           if (customerId) {\n *              // display customer details component.\n *           }\n *        }\n *    }\n */\n@Component({\n    selector: 'aw-hyperlink',\n    templateUrl: 'hyperlink.component.html',\n    styleUrls: ['hyperlink.component.scss']\n})\nexport class HyperlinkComponent extends BaseComponent\n{\n\n    /**\n     *    Specifies the media type of the linked document. Mime type\n     *    ex: [text/html | text/csv | image/png | audio/3gpp | ....]\n     */\n    @Input()\n    type: string;\n\n    /**\n     * url for this hyperlink. Can be used to navigate to a component.\n     */\n    @Input()\n    href: string;\n\n    /**\n     * rel for this hyperlink. Specify the relationship of the current document and linked document\n     */\n    @Input()\n    rel: string;\n\n\n    /**\n     * sizing for this link. [large, normal, small].\n     */\n    @Input()\n    size: LinkSize = 'normal';\n\n    /**\n     * Specify the target of the hyperlink. [_blank | _self | _parent | _top | framename ]\n     */\n    @Input()\n    target: string;\n\n    /**\n     * Value to be send to server when clicked.\n     */\n    @Input()\n    value: string;\n\n    /**\n     * Event fired when user select a item\n     */\n    @Output()\n    action: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Internal CSS class that styles this hyperlink based on input 'size'\n     */\n    linkClass: string = 'link';\n\n    constructor(public env: Environment)\n    {\n        super(env);\n\n    }\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n\n        // Determine the link class based on input size.\n        if (this.size) {\n            switch (this.size) {\n                case 'large' :\n                    this.linkClass += ' link-lg';\n                    break;\n                case 'normal' :\n                    this.linkClass += ' link-mid';\n                    break;\n                case 'small' :\n                    this.linkClass += ' link-sm';\n                    break;\n            }\n        }\n\n        // If I have an action tag, and no href. We add default styling and behavior.\n        if (this.action.observers.length > 0) {\n            this.linkClass += ' link-bh';\n        }\n\n    }\n\n    /**\n     *  Action clicked. Call parent action.\n     */\n    clicked(event: any)\n    {\n        this.action.emit({\n            event: event,\n            value: this.value\n        });\n    }\n}\n\n/**\n * Supported Link Size\n */\nexport type LinkSize = 'large' | 'normal' | 'small';\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {HyperlinkComponent} from './hyperlink.component';\n\n\n@NgModule({\n    declarations: [\n        HyperlinkComponent\n    ],\n    imports: [\n        CommonModule\n    ],\n    entryComponents: [\n        HyperlinkComponent\n    ],\n    exports: [\n        HyperlinkComponent\n    ],\n    providers: []\n})\nexport class AWHyperlinkModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {unimplemented} from '@aribaui/core';\n\n\n/**\n * Selection State for the chooser in order to be able to comunicate with the parent object using a\n * chooser. If I would have to manage only single values with no addional methods i would user\n * emitters to do the job, but in this case we need this interface (abstract class) between a\n * chooser and actual object.\n *\n *\n */\nexport abstract class ChooserSelectionState\n{\n    /**\n     *\n     * Set selection state is usually triggered by selecting and unselecting a item (in case of\n     * multiselect) and it should update its list of objects with either settings/adding item or\n     * removing it.\n     *\n     *\n     */\n    setSelectionState(selection: any, selected: boolean): void\n    {\n    }\n\n    /**\n     * The most recent selection . Null if last action was a deselection. Usually used by Chooser\n     * or ChooserState to get cuurent value.\n     *\n     */\n    selectedObject(): any\n    {\n        return unimplemented();\n    }\n\n\n    /**\n     * The most recent selections.\n     *\n     */\n    selectedObjects(): Array<any>\n    {\n        return unimplemented();\n    }\n\n\n    /**\n     *\n     * Check if the item selection items is in the selectedObjects\n     */\n    isSelected(selection: any): boolean\n    {\n        return unimplemented();\n    }\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {isBlank, isPresent, ListWrapper} from '@aribaui/core';\nimport {ChooserSelectionState} from './chooser-selection-state';\nimport {DataSource} from '../../core/data/data-source';\n\n/**\n * ChooserState manages complete lifecycle for the Chooser Component. It keeps track of current\n * selection as well as it can broadcast any updates.\n *\n *\n */\nexport class ChooserState\n{\n\n    /**\n     *  Callback to the parent object to store current selection\n     */\n    selectionState: ChooserSelectionState;\n\n    /**\n     * todo: We do not needed this !!\n     */\n    currentItem: any;\n\n\n    /**\n     * Matching pattern. User latest input to the chooser input field\n     */\n    pattern: string;\n\n\n    /**\n     * Last successfull pattern that retrieved some data\n     */\n    lastFullMatchPattern: string;\n\n\n    /**\n     * Current matched items using ChooserSelectionState\n     */\n    matches: Array<any>;\n\n\n    /**\n     * Is this multiselect chooser\n     */\n    multiselect: boolean;\n\n\n    /**\n     *\n     * Implementation can set lookup key to narrow the search. If we are dealing with object\n     * you should set this.\n     *\n     */\n    lookupKey: string;\n\n\n    /**\n     * previous display value is set when the display value is rendered on the chooser. we cache\n     * the UI value to compare with the inbound value later instead of the value from underlying\n     * object because business logic level code could have changed the underlying object's value\n     *\n     * todo: do I still need this?\n     */\n    prevDisplayValue: string;\n\n\n    /**\n     * Indicates if there are any validation like entered value does not much with the source list.\n     *\n     */\n    isInvalid: boolean = false;\n\n    /**\n     *\n     * indicates that we started to some editing e.g. starting to type in something into the\n     * filter, or removing already selected items\n     */\n    addMode: boolean = false;\n\n\n    recentSelectedDisplayed: number = 0;\n\n\n    /**\n     * When this option is active we do not show all selected items, but max number that is\n     * defined. User is able to toggle to expand the view to see all selections and hide them as\n     * well\n     */\n    showAllRecentlySelected: boolean = false;\n\n\n    constructor(chooserSelectionState?: ChooserSelectionState, isMulti: boolean = true)\n    {\n\n        this.selectionState = chooserSelectionState;\n        this.multiselect = isMulti;\n\n        if (isBlank(this.selectionState)) {\n            this.selectionState = new DefaultSelectionState(this.multiselect);\n        }\n    }\n\n\n    /**\n     *\n     * It will select and persist an item using ChooserSelectionState provider.\n     *\n     */\n    updatedSelectedObjects(item: any): void\n    {\n        if (isBlank(item)) {\n            item = this.currentItem;\n        }\n\n        if (!this.multiselect) {\n            this.setSelectionState(item, true);\n        } else {\n            let selectedObject = this.selectedObject();\n            let selectedObjects = this.selectedObjects();\n\n\n            if (this.addMode) {\n                if (this.isInvalid) {\n                    if (isPresent(selectedObject)) {\n                        this.setSelectionState(selectedObject, false);\n                    }\n\n                }\n                this.setSelectionState(item, !ListWrapper.containsComplex(selectedObjects, item));\n            } else {\n                if (isPresent(selectedObject)) {\n                    this.setSelectionState(selectedObject, false);\n                }\n                this.setSelectionState(item, true);\n            }\n        }\n    }\n\n\n    /**\n     * When user selection is large we use this method to check if we need to show all selected\n     * items or only MaxRecentSelected\n     */\n    toggleAllSelected(): void\n    {\n        this.showAllRecentlySelected = !this.showAllRecentlySelected;\n    }\n\n\n    /**\n     *\n     * Renders user's selection under the input field\n     *\n     */\n    get recentSelectedObjects(): Array <any>\n    {\n\n        if (!this.multiselect) {\n            return [];\n        }\n\n        let recentSelectedObjects: any[] = [];\n        this.recentSelectedDisplayed = 0;\n        let selectedObjects = this.selectedObjects();\n        let size = selectedObjects.length;\n        let maxCount = DataSource.MaxRecentSelected;\n        if (size > DataSource.MaxRecentSelected && !this.showAllRecentlySelected) {\n            maxCount -= 1;\n        }\n        if (this.showAllRecentlySelected) {\n            maxCount = size;\n        }\n\n        for (let i = size - 1; i >= 0 && (this.recentSelectedDisplayed < maxCount); i--) {\n            let selection = selectedObjects[i];\n            recentSelectedObjects.push(selection);\n            this.recentSelectedDisplayed++;\n        }\n\n        return recentSelectedObjects;\n    }\n\n    selectedObject(): any\n    {\n        return this.selectionState.selectedObject();\n    }\n\n\n    selectedObjects(): Array<any>\n    {\n        return this.selectionState.selectedObjects();\n    }\n\n    setSelectionState(selection: any, selected: boolean): void\n    {\n        if (isPresent(selection)\n        ) {\n            this.selectionState.setSelectionState(selection, selected);\n        }\n    }\n\n}\n\n\n/**\n * Dummy implementation ChooserSelectionState\n */\nexport class DefaultSelectionState extends ChooserSelectionState\n{\n    private _selectedObject: any;\n    private _selectedObjects: any;\n\n\n    constructor(private multiSelect: boolean)\n    {\n        super();\n    }\n\n    setSelectionState(selection: any, selected: boolean): void\n    {\n        if (selected) {\n            this._selectedObject = selection;\n            if (this.multiSelect && !ListWrapper.containsComplex(this.selectedObjects(),\n                    selection)) {\n                this.selectedObjects().push(selection);\n            }\n        } else {\n            if (this.multiSelect) {\n                ListWrapper.removeIfExist(this.selectedObjects(), selection);\n            }\n        }\n    }\n\n    selectedObject(): any\n    {\n        return this._selectedObject;\n    }\n\n    selectedObjects(): Array<any>\n    {\n        if (isBlank(this._selectedObjects)) {\n            this._selectedObjects = [];\n        }\n        return this._selectedObjects;\n    }\n\n    isSelected(selection: any): boolean\n    {\n        return super.isSelected(selection);\n    }\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport {DataSource, DSInitParams} from '../../core/data/data-source';\nimport {DataFinder, DataFinders} from '../../core/data/data-finders';\nimport {DataProviders} from '../../core/data/data-providers';\nimport {Observable} from 'rxjs';\nimport {DataProvider} from '../../core/data/datatype-registry.service';\nimport {ChooserState} from './chooser-state';\nimport {assert, isArray, isBlank, isPresent, ListWrapper} from '@aribaui/core';\n\n/**\n * Concrete DataSource implementation for the Chooser component. There are two ways how to use it:\n *\n * 1) You can use default DataSource injected inside component constructor and just call\n * initialize to configure it with correct DataProvider and DataFinder:\n *\n *\n * ```\n *   this.dataSource.init({\n *               obj: this.list,\n *               queryType: QueryType.FullText,\n *               state: null,\n *               multiselect: this.multiselect\n *           });\n *\n * ```\n *\n * and then you can use it to simply retrieve data or run queries.\n *\n * 2) You will instantiate your own DataSource and pass it into the component using [dataSource]\n * binding\n *\n * ```\n *\n *   this.ds = new ChooserDataSource(this.data, this.finders);\n *   this.ds.init({\n *               obj: this.list,\n *               queryType: QueryType.FullText,\n *               state: null,\n *               multiselect: this.multiselect\n *           });\n *\n * ```\n *\n *\n */\nexport class ChooserDataSource extends DataSource\n{\n\n    /**\n     * Matching dataProviders and finders\n     */\n    private dataProvider: DataProvider<any>;\n    private dataFinder: DataFinder;\n\n\n    /**\n     * Special object to keep current state of this chooser\n     */\n    state: ChooserState;\n\n\n    constructor(public dataProviders: DataProviders, public finders: DataFinders)\n    {\n        super(dataProviders, finders);\n    }\n\n\n    /**\n     * To initialize this DataSource with current DataFinder and Provider as well as state we use\n     * an interface DSChooserInitParams to have all init values typed checked\n     *\n     *\n     */\n    init(...args: any[]): void\n    {\n        if (isBlank(args) || args.length !== 1 && !isDSChooserInitParams(args[0])) {\n            throw new Error('You need to initialize DS with (DSChooserInitParams)');\n        }\n        let init: DSChooserInitParams = args[0];\n\n        this.dataProvider = isPresent(init.dataProvider) ? init.dataProvider\n            : this.dataProviders.find(init.obj);\n\n        this.dataFinder = isPresent(init.dataFinder) ? init.dataFinder\n            : this.finders.find(this.dataProvider, init.queryType);\n\n        assert(isPresent(this.dataProvider) && isPresent(this.dataFinder),\n            'DataSource incorrectly initialized. (DataProvider, DataFinder) missing. ');\n\n        if (isPresent(init.state)) {\n            this.state = init.state;\n        } else {\n            this.state = new ChooserState(null, init.multiselect);\n        }\n\n        this.dataFinder.lookupKey = init.lookupKey;\n        this.state.lookupKey = init.lookupKey;\n    }\n\n\n    find(pattern: string, max: number): void\n    {\n        this.state.pattern = pattern;\n        this.state.lastFullMatchPattern = pattern;\n\n        if (pattern.length === 0) {\n            return;\n        }\n        if (pattern === '*') { // query everything\n            pattern = '';\n        }\n\n\n        // make sure we dataFinder has expected lookup key\n        let origKey = this.dataFinder.lookupKey;\n        this.dataFinder.lookupKey = this.state.lookupKey;\n        this.dataFinder.forData(this.dataProvider).match<any>(pattern, max)\n            .subscribe((result: any[]) =>\n            {\n                this.state.matches = result;\n\n                if (this.state.multiselect) {\n                    for (let i = 0; i < this.state.selectedObjects().length; i++) {\n                        let item = this.state.selectedObjects()[i];\n                        ListWrapper.removeIfExist(this.state.matches, item);\n                    }\n                }\n\n                this.dataFinder.lookupKey = origKey;\n            });\n    }\n\n    /**\n     *\n     * When multiselect this method checks if we need to show SHOW MORE label under the selected\n     * items. We do not want show e.g. 50 selection under the chooser that would take up whole\n     * page.\n     *\n     */\n    showMoreSelected(): boolean\n    {\n        return this.state.selectedObjects().length >= DataSource.MaxRecentSelected;\n    }\n\n    open<T>(): Observable<T[]>\n    {\n        return this.dataProvider.dataChanges.asObservable();\n    }\n\n    close(): void\n    {\n        this.dataProvider = null;\n        this.dataFinder = null;\n        this.state = null;\n    }\n\n    instant<T>(): T[]\n    {\n        return this.dataProvider.data();\n    }\n\n    updateValue(value: any): void\n    {\n        this.state.addMode = true;\n        if (isArray(value)) {\n            let items: any[] = value;\n            items.forEach((item) => this.state.updatedSelectedObjects(item));\n        } else {\n            this.state.updatedSelectedObjects(value);\n        }\n        this.state.addMode = false;\n\n    }\n\n\n    get lookupKey(): string\n    {\n        return this.dataFinder.lookupKey;\n    }\n}\n\n/* is \"init\" type of DSChooserInitParams interface ? */\nexport function isDSChooserInitParams(init: DSChooserInitParams): init is DSChooserInitParams\n{\n    return isPresent(init.obj) || isPresent(init.queryType);\n}\n\n/**\n * To make initialization easier we have this common format.\n */\nexport interface DSChooserInitParams extends DSInitParams\n{\n    /**\n     * Chooser state keeping information what is currently selected , result of the last match\n     */\n    state?: ChooserState;\n}\n\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    AfterViewChecked,\n    AfterViewInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    SkipSelf,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport {FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {AutoComplete} from 'primeng/primeng';\nimport {assert, Environment, isBlank, isPresent} from '@aribaui/core';\nimport {BaseFormComponent} from '../../core/base-form.component';\nimport {DATA_SOURCE} from '../../core/data/data-source';\nimport {ChooserDataSource} from './chooser-data-source';\nimport {DataProviders} from '../../core/data/data-providers';\nimport {DataFinders, QueryType} from '../../core/data/data-finders';\nimport {ChooserState, DefaultSelectionState} from './chooser-state';\n\n\n/**\n * Typeahead chooser that supports both single and multi-select. Not like Dropdown, this chooser\n * requires little bit different setup. It requires at minimum @Input dataSource or\n * destinationClass\n *\n *\n * By default chooser is multi-select. If you want single select then you must provide multi-select\n * with @Input.\n *\n * ### Example\n *\n * In simple scenario you can use Chooser like so:\n *\n *\n * ```\n *  @Component({\n *      selector: 'chooser-app' ,\n *      template: `<aw-chooser  [formGroup]=\"formGroup\" name=\"color\"'\n *                      [dataSource]=\"ds\"></aw-chooser>`\n *  })\n *  export class MyChooserApp\n *  {\n *\n *      ds: ChooserDataSource;\n *\n *     constructor(private data: DataProviders, private finders: DataFinders){\n *          this.ds = new ChooserDataSource(this.data, this.finders);\n *\n *       this.ds.init({\n *           obj: ['blue', 'red', 'yellow'], queryType: QueryType.FullText, state: null,\n *            multiselect: true\n *       });\n *\n *     }\n *  }\n *\n * ````\n *  Above example will use provided dataSource and render multi-select chooser. With default\n *  implementation  selected values will appear as a tags under the input box\n *\n *\n *\n * * ### Example\n *\n *  In this example we provide custom template to change the way how chooser's MenuItem are\n *     rendered as well as template for the selection item looks like\n *\n * ```\n *  @Component({\n *      selector: 'chooser-app' ,\n *      template: `<aw-chooser  name=\"commodity\"' [dataSource]=\"ds\">\n *\n *          <ng-template #menuItem let-item>\n *             \t<span>\n *             \t\t<i class=\"fa fa-envira \" ></i>\n *             \t\t{{item}}\n *             \t</span>\n *\n *          </ng-template>\n *\n *          <ng-template #selectionItem let-item>\n *             \t<span class=\"tag tag-circle\">\n *             \t\titem: {{item }}\n *             \t\t<i class=\"fa fa-close\" (click)=\"chooser.removeValue(item)\"></i>\n *             \t</span>\n *\n *\n *          </ng-template>\n *\n *\n *          </aw-chooser>\n *      `\n *      style: [`\n *              .tag-circle {\n *              \tborder-radius: 6rem;\n *              \theight: 7rem;\n *              \tcolor: #e8eef1;\n *              \tbackground-color: rgba(53, 56, 58, 0.67);\n *              \tline-height: 6rem;\n *              }\n *      `]\n *  })\n *\n * ````\n *\n *  In above example we change how the chooser's menu item look like as well as we define custom\n *     template for selection item to turn all selection to circles with text in the middle.\n *\n *\n *\n */\n\nexport const CHOOSER_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ChooserComponent),\n    multi: true\n};\n\n\n@Component({\n    selector: 'aw-chooser',\n    templateUrl: 'chooser.component.html',\n    styleUrls: ['chooser.component.scss'],\n    providers: [\n        CHOOSER_CONTROL_VALUE_ACCESSOR,\n        {provide: BaseFormComponent, useExisting: forwardRef(() => ChooserComponent)},\n        {provide: DATA_SOURCE, useClass: ChooserDataSource, deps: [DataProviders, DataFinders]}\n    ]\n\n\n})\nexport class ChooserComponent extends BaseFormComponent implements AfterViewChecked,\n    AfterViewInit {\n\n    /**\n     * Max number of items return at single Match so we do not return 1000 items at single time.\n     *\n     */\n    @Input()\n    maxLength: number = 10;\n\n\n    /**\n     * Max number of items return at single Match so we do not return 1000 items at single time.\n     *\n     */\n    @Input()\n    minLenForSearch: number = 1;\n\n\n    /**\n     * Formatter used to format each selection and selected object for display.\n     *\n     */\n    @Input()\n    valueTransformer: (value: any) => string;\n\n    /**\n     * Is this multiselect\n     *\n     */\n    @Input()\n    multiselect: boolean = true;\n\n\n    /**\n     * By default ChooserDataSource will be created but there is a option to set\n     * custom one on application level\n     */\n    @Input()\n    dataSource: ChooserDataSource;\n\n\n    /**\n     * In case we want to change the place where selection is rendered use this appendTo property\n     * and it will use DOM operation appendChild() to move selectionView under different parent\n     */\n    @Input()\n    selectionAppendTo: ElementRef;\n\n\n    @Input()\n    delay: number = 300;\n\n\n    /**\n     * Target type to render. Data will be read from the registered DataProvider\n     */\n    @Input()\n    destinationClass: string;\n\n\n    @Input()\n    field: string;\n\n\n    /**\n     * Event fired when user select a item\n     */\n    @Output()\n    onSelection: EventEmitter<any> = new EventEmitter();\n\n\n    /**\n     * internal model to listen for Input value changes\n     */\n    internalChooserModel: any;\n\n\n    /**\n     * Embedded template defined by user. If user does not provide any template then when rendering\n     * an item we assume we are dealing with primitive types and call on each item toString(), if\n     * we are dealing with object, then we expect user to provide a template and tell the chooser\n     * how items shoulds be handled or at least valueTransformer so we know how to convert this\n     * value.\n     *\n     * Each object can provide its own toString implementation.\n     *\n     */\n    @ContentChild('menuItem')\n    menuTemplate: TemplateRef<any>;\n\n\n    @ContentChild('selectionItem')\n    selectionTemplate: TemplateRef<any>;\n\n    @ViewChild('autoCompplete')\n    autoCompleteComponent: AutoComplete;\n\n    @ViewChild('selectionView')\n    selectionViewElem: ElementRef;\n\n\n    /**\n     * When the selection is > max selection, then show hide link.\n     */\n    private hideLink: string;\n\n    constructor(public env: Environment, private elemementRef: ElementRef,\n                @Inject(DATA_SOURCE) private _defaultDS: ChooserDataSource,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => BaseFormComponent))\n                protected parentContainer: BaseFormComponent) {\n        super(env, parentContainer);\n\n        if (isBlank(this.placeHolder)) {\n            // this.placeHolder = i18n.instant('Widgets.chooser.placeHolder');\n            this.placeHolder = 'Search';\n        }\n        // this.hideLink = i18n.instant('Widgets.chooser.hideSelection');\n        this.hideLink = 'Hide';\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n\n        if (isBlank(this.dataSource)) {\n\n            this.dataSource = this._defaultDS;\n            this.initDatasource();\n        }\n\n        if (isPresent(this.formControl) && isPresent(this.formControl.value)) {\n            this.dataSource.updateValue(this.formControl.value);\n        }\n\n        this.initInternalModel();\n\n\n        if (this.isStandalone) {\n            super.registerFormControl(this.internalChooserModel);\n        } else {\n            if (isPresent(this.name)) {\n                this.formControl = <FormControl> this.formGroup.controls[this.name];\n            }\n        }\n    }\n\n    /**\n     * Add Search icon in case of multiselect.\n     * todo: Once PrimeNG will provide a template to override default behavior remove it\n     *\n     */\n    ngAfterViewInit() {\n        if (!this.dataSource.state.multiselect) {\n            return;\n        }\n\n        let searchInput = this.elemementRef.nativeElement.querySelector(\n            '.ui-autocomplete-input-token');\n\n        if (isPresent(searchInput)) {\n            let iconElement = document.createElement('span');\n            iconElement.className = 'search-icon-right fa fa-fw fa-search';\n            searchInput.appendChild(iconElement);\n        }\n\n        if (isPresent(this.selectionAppendTo) && isPresent(this.selectionViewElem)) {\n            let parentElem = this.selectionAppendTo instanceof ElementRef ?\n                this.selectionAppendTo.nativeElement : this.selectionAppendTo;\n\n            parentElem.appendChild(this.selectionViewElem.nativeElement);\n        }\n    }\n\n    /**\n     * Need to change current behavior since we want to show selection under the chooser. K\n     *\n     */\n    ngAfterViewChecked(): void {\n        if (!this.dataSource.state.multiselect) {\n            return;\n        }\n\n        let tokens = this.elemementRef.nativeElement.querySelectorAll(\n            '.ui-autocomplete .ui-autocomplete-token');\n        if (isPresent(tokens) && tokens.length > 0) {\n            tokens.forEach((item: any) => {\n                item.remove();\n            });\n        }\n    }\n\n    /**\n     *\n     * When value is entered into search box, we ask our DataSource to match this pattern\n     * against data repository. It will retrieve all possible matches limited by MaxLen and this\n     * is again filtered so it does not include already selected items.\n     *\n     *  the matched resulted is saved in the: this.dataSource.state.matches\n     */\n    match(pattern: string): void {\n        let maxLen = this.maxLength ? this.maxLength : ChooserDataSource.MaxLength;\n        this.dataSource.find(pattern, maxLen);\n\n\n        // fix: for tests: In version 4 we need to explicitly focus input otherwise autocomplete\n        // doesn't give us any popup panel\n        if (this.env.inTest && isPresent(this.autoCompleteComponent)) {\n            this.autoCompleteComponent.focusInput();\n        }\n    }\n\n\n    /**\n     *\n     * Invoked by Dropdown button in case of single select and here we want to invoke match\n     * to retrieve all suggestions without any filter\n     *\n     */\n    onDropdownClick(event: any): void {\n        this.match('*');\n        setTimeout(() => {\n            this.match('*');\n        }, 100);\n    }\n\n    /**\n     *\n     * Chooser state is updated  with user selection. Please see writeValue. When do not need\n     * call anything additional as internalChooserModel and this.chooserState.selectedObjects()\n     * shares the same references so its important that we first save reference to\n     * this.chooserState.selectedObjects() and then back to internalChooserModel\n     *\n     */\n    selectItem(item: any): void {\n        this.onSelection.emit(this.internalChooserModel);\n        this.formControl.setValue(this.internalChooserModel, {emitEvent: true});\n        this.formControl.markAsDirty({onlySelf: true});\n\n        this.dataSource.state.addMode = true;\n\n        this.onModelChanged(this.internalChooserModel);\n        this.dataSource.state.updatedSelectedObjects(item);\n\n        this.dataSource.state.addMode = true;\n\n        if (!this.dataSource.state.multiselect) {\n            this.autoCompleteComponent.inputEL.nativeElement.value =\n                this.displayItem(this.internalChooserModel);\n        }\n    }\n\n\n    /**\n     *\n     * Unselect item\n     *\n     */\n    removeValue(item: any): void {\n        this.dataSource.state.addMode = true;\n        this.dataSource.state.updatedSelectedObjects(item);\n        this.dataSource.state.addMode = false;\n\n        this.internalChooserModel = this.dataSource.state.selectedObjects();\n\n        this.onSelection.emit(this.internalChooserModel);\n        this.formControl.setValue(this.internalChooserModel, {emitEvent: true});\n        this.formControl.markAsDirty({onlySelf: true});\n\n        this.onModelChanged(this.internalChooserModel);\n\n\n        if (isPresent(this.autoCompleteComponent)) {\n            this.autoCompleteComponent.focusInput();\n        }\n\n    }\n\n    /**\n     *\n     * Convert a object if any into the string representation\n     *\n     * todo: implement better way how to work with objects\n     *\n     */\n    displayItem(item: any) {\n        if (isBlank(item)) {\n            return null;\n        }\n        this.dataSource.state.currentItem = item;\n\n        if (isPresent(this.valueTransformer)) {\n            return this.valueTransformer(item);\n\n        } else if (isPresent(this.dataSource.lookupKey)) {\n            return item[this.dataSource.lookupKey];\n\n        } else {\n            return item.toString();\n        }\n    }\n\n    /**\n     *\n     * Returns a label that is shown under the selected item when user selection is >\n     * MaxRecentSelected\n     *\n     */\n    moreSelectString(): string {\n        let moreSelected = this.dataSource.state.selectedObjects().length -\n            this.dataSource.state.recentSelectedDisplayed;\n        if (moreSelected < 2 && !this.dataSource.state.showAllRecentlySelected) {\n            return '';\n        }\n\n        if (this.dataSource.state.showAllRecentlySelected) {\n            return this.hideLink;\n        }\n        return `${moreSelected} more selected...`;\n    }\n\n\n    /**\n     * In case of multiselect = false check if we want to show a selected value inside the input\n     * field\n     *\n     */\n    singleValueSelected(): boolean {\n        return !this.dataSource.state && isPresent(this.dataSource.state.currentItem)\n            && !this.dataSource.state.addMode;\n    }\n\n    hasMenuTemplate(): boolean {\n        return isPresent(this.menuTemplate);\n    }\n\n\n    hasSelectionTemplate(): boolean {\n        return isPresent(this.selectionTemplate);\n    }\n\n\n    /**\n     * Internal. Please see ControlValueAccessor\n     * As we are using DataSource internally for [(ngModel)] case we need to deffer DataSource\n     * initialization once we have a value and we only accept []\n     *\n     *\n     * ? Should we do some deeper comparision?\n     */\n    writeValue(value: any) {\n        if (isBlank(value)) {\n            return;\n        }\n\n        if (isPresent(this.dataSource)) {\n            this.dataSource.updateValue(value);\n        } else {\n            let selState: DefaultSelectionState = new DefaultSelectionState(this.multiselect);\n            let chState: ChooserState = new ChooserState(selState, this.multiselect);\n            this.initDatasource(chState);\n\n            this.dataSource.updateValue(value);\n        }\n\n        this.initInternalModel();\n    }\n\n    initDatasource(chooserState?: ChooserState): void {\n        assert(isPresent(this.destinationClass),\n            'You need to provide destinationClass or custom DataSource');\n\n        this.dataSource.init({\n            obj: this.destinationClass,\n            queryType: QueryType.FullText,\n            lookupKey: this.field,\n            state: chooserState,\n            multiselect: this.multiselect\n        });\n    }\n\n    /**\n     *\n     * Used by ngOnInit and Write value to read state from ChooserState and set it to internal\n     * ngModel property\n     *\n     */\n    private initInternalModel(): void {\n        if (this.dataSource.state.multiselect) {\n            this.internalChooserModel = this.dataSource.state.selectedObjects();\n        } else {\n            this.internalChooserModel = this.dataSource.state.selectedObject();\n        }\n        if (isPresent(this.formControl)) {\n            this.formControl.setValue(this.internalChooserModel);\n        }\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {ChooserComponent} from './chooser.component';\nimport {AutoCompleteModule} from 'primeng/primeng';\nimport {AWHyperlinkModule} from '../hyperlink/hyperlink.module';\nimport {AWCoreComponentModule} from '../../core/core.module';\n\n\n@NgModule({\n    declarations: [\n        ChooserComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        AutoCompleteModule,\n        AWHyperlinkModule,\n        AWCoreComponentModule\n\n    ],\n    entryComponents: [\n        ChooserComponent\n    ],\n    exports: [\n        ChooserComponent,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    providers: []\n})\nexport class AWChooserModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    Component,\n    ContentChild,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    SkipSelf,\n    TemplateRef\n} from '@angular/core';\nimport {FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {SelectItem} from 'primeng/primeng';\nimport {Environment, equals, isPresent} from '@aribaui/core';\nimport {BaseFormComponent} from '../../core/base-form.component';\n\n\n/**\n * A popup like component rendering list of values as. Based on PrimeNG component and one of the\n * main reason why we need to wrap this is to extend its capabilities to accept almost any\n * data type without using Primens's specific SelectItem type.\n *\n *\n * ### Example\n *\n * ```\n *  @Component({\n *      selector: 'showDropDown' ,\n *      template: '<aw-dropdown [list]=\"testItemSmall\"\n *     (onSelection)=\"onSelection($event)\"></aw-dropdown>'\n *  })\n *  export class MyDropComponent\n *  {\n *      testItemSmall: string[] = ['view' , 'edit'];\n *\n *      // when you switch list binding to refert to large item fiilter automatically is shown and\n *     max 10 items are\n *      // visible\n *      testItemLarge: string[] = ['view' , 'edit' , 'frank' , 'kolar' , 'The Sun' , 'Dog' ,\n *     'Computer' , 'A Desk' ,\n *      'My Car' , 'Pencil' , 'This Page' , 'Yesterday' , 'Monday' , 'Tuesday' , 'BMW R1200 GS' ,\n *     'Czech Republic' ,\n *      'Last Item'];\n *\n *\n *      itemSelected: string = 'view';\n *      itemSelectedLg: string = 'Monday';\n *\n *      noselString: string = '(no selection)';\n *\n *\n *      onSelection (event): void\n *      {\n *          this.itemSelected = event;\n *\n *      }\n *  }\n *\n *  ```\n *\n */\n\n\nexport const DD_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => DropdownComponent),\n    multi: true\n};\n\n\n@Component({\n    selector: 'aw-dropdown',\n    templateUrl: 'dropdown.component.html',\n    styleUrls: ['dropdown.component.scss'],\n    providers: [\n        DD_CONTROL_VALUE_ACCESSOR,\n        {provide: BaseFormComponent, useExisting: forwardRef(() => DropdownComponent)}\n    ]\n\n})\nexport class DropdownComponent extends BaseFormComponent\n{\n\n    static readonly MaxNumShown = 10;\n\n    /**\n     * Ordered list of items rendered as a popup menu\n     */\n    @Input()\n    list: any[];\n\n    /**\n     * Items which was selected as a default value or by used in the popup menu.\n     */\n    @Input()\n    selection: any;\n\n    /**\n     * String rendered as first value in the popup which let the user to make 'no selection' from\n     * available list of values. When this option is active and use make this selection we save a\n     * NULL value\n     */\n    @Input()\n    noSelectionString: string;\n\n    /**\n     * Event fired when user select a item\n     */\n    @Output()\n    onSelection: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * This is the internal list that hides PrimeNG specifics where we need to deal with special\n     * type: SelectItem. Our expectation is that you need to be able to pass regular string values\n     * or full object and not trying to wrap it into extra layer.\n     *\n     */\n    internalList: SelectItem[];\n\n\n    /**\n     * Embedded template defined by user. If user does not provide any template and while rendering\n     * item we assume we are dealing with primitive types and call on each item toString(), if we\n     * are dealing with object, then we expect user to provide a template and tell the dropdown of\n     * each item should be handled\n     *\n     */\n    @ContentChild('itemTemplate')\n    itemTemplate: TemplateRef<any>;\n\n\n    /**\n     * Internal model used for embedded version.\n     */\n    model: SelectItem;\n\n\n    constructor(public env: Environment,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => BaseFormComponent))\n                protected parentContainer: BaseFormComponent)\n    {\n        super(env, parentContainer);\n    }\n\n    /**\n     * Todo: Put back the scrolling option once we decide so. Currently the requirements are\n     * show only 10 items max, no scrolling. Functionality commented out can show scrollbar with\n     * search filter.\n     */\n    ngOnInit()\n    {\n\n        if (this.isStandalone) {\n            super.ngOnInit();\n            super.registerFormControl(this.selection);\n\n        } else {\n            if (isPresent(this.name)) {\n                this.formControl = <FormControl> this.formGroup.controls[this.name];\n            }\n        }\n\n\n        // transform a value to PrimeNg Format, we are not really be using a label field only a\n        // value.\n        this.internalList = [];\n        // if (isPresent(this.noSelectionString)) {\n        //     this.internalList.push({\n        //         label: this.noSelectionString,\n        //         value: null\n        //     });\n        //\n        //     if (isBlank(this.selection)) {\n        //         this.selection = this.noSelectionString;\n        //     }\n        // }\n\n        if (isPresent(this.list) && this.list.length >= DropdownComponent.MaxNumShown) {\n\n            this.internalList = this.list.slice(0, DropdownComponent.MaxNumShown).map((item: any) =>\n            {\n                return {label: item.toString(), value: item};\n            });\n        } else if (isPresent(this.list)) {\n            this.internalList = this.list.slice(0).map((item: any) =>\n            {\n                return {label: item.toString(), value: item};\n            });\n        }\n    }\n\n\n    hasEmbeddedTemplate(): boolean\n    {\n        return isPresent(this.itemTemplate);\n    }\n\n    /**\n     * Check to prevent Empty item to be rendered\n     *\n     * todo: Report this on PrimeNg\n     *\n     */\n    itemExist(item: any)\n    {\n        return isPresent(item);\n    }\n\n\n    /**\n     * When dropdown list is more then defined constant MaxNumShown (10) automatically show filter\n     * input field\n     */\n    showFilter()\n    {\n        return false;\n        // return isPresent(this.list) && this.list.length > DropdownComponent.MaxNumShown;\n    }\n\n    /**\n     *\n     * Updates internal models of current selections and triggers onSelection event\n     *\n     */\n    onItemSelection(value: any)\n    {\n        this.selection = value.value;\n        this.onSelection.emit(value.value);\n\n        if (this.isStandalone) {\n            this.formControl.setValue(this.selection);\n            this.formControl.markAsDirty({onlySelf: true});\n        }\n\n        this.onModelChanged(value.value);\n    }\n\n    displayItem(item: any)\n    {\n        return isPresent(item) ? item.label : 'No Selection';\n    }\n\n    /**\n     * Internal. Please see ControlValueAccessor\n     *\n     */\n    writeValue(value: any)\n    {\n        if (!equals(value, this.selection)) {\n\n            this.selection = value;\n            this.formControl.setValue(value);\n        }\n\n    }\n\n}\n\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {DropdownComponent} from './dropdown.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {DropdownModule} from 'primeng/primeng';\nimport {AWCoreComponentModule} from '../../core/core.module';\n\n\n@NgModule({\n    declarations: [\n        DropdownComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        DropdownModule,\n        AWCoreComponentModule\n    ],\n    entryComponents: [\n        DropdownComponent\n    ],\n    exports: [\n        DropdownComponent,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    providers: []\n})\nexport class AWDropdownModule\n{\n}\n\n\n","import {Component, forwardRef, Inject, Input, Optional, SkipSelf} from '@angular/core';\nimport {CurrencyPipe} from '@angular/common';\nimport {NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Environment, equals, isBlank, isPresent, Value} from '@aribaui/core';\nimport {BaseFormComponent} from '../../core/base-form.component';\nimport {FormRowComponent} from '../../layouts/form-table/form-row/form-row.component';\n\n/**\n * Lightweight and configurable Currency component based on the ng bootstrap directive. This\n * component combines an input and currency code dropdown.\n *\n *\n * for more info please see class Doc of the:\n *  @see {@link currency/currency.component.ts}\n *\n *  ### Example\n *  ```\n *\n *  @Component({\n *    selector: 'amount' ,\n *    template: `\n *\n *      <aw-currency [money]=\"price\" [currencies]=\"currencies\" [name]=\"'currency'\">\n *      </aw-currency>\n *\n *    `\n *    })\n *    export class MyComponent\n *    {\n *        amount: number = 1000;\n *        currencies: string[] = ['USD', 'CNY', 'AUD', 'EUR', 'GBP'];\n *        currencyCode: string = this.currencies[0];\n *\n *        constructor ()\n *        {\n *        }\n *    }\n */\n\nexport const CURRENCY_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CurrencyComponent),\n    multi: true\n};\n\n\n@Component({\n    selector: 'aw-currency',\n    templateUrl: 'currency.component.html',\n    styleUrls: ['currency.component.scss'],\n    providers: [\n        CURRENCY_CONTROL_VALUE_ACCESSOR,\n        {provide: BaseFormComponent, useExisting: forwardRef(() => CurrencyComponent)}\n    ]\n\n})\nexport class CurrencyComponent extends BaseFormComponent\n{\n    /**\n     * Money object that encapsulates value, locale, currency code.\n     * If this object is set, values will be taken from this object\n     */\n    @Input()\n    money: Money;\n\n    /**\n     * Disable user to change Money's currency code and still\n     * allow user to edit Money's amount.\n     */\n    @Input()\n    readonlyCurrencyCode: boolean = false;\n\n    /**\n     * The currency that's selected for this currency field.\n     */\n    @Input()\n    currencySelection: string;\n\n    /**\n     *\n     * The number of decimal places used to format the money object.\n     *\n     */\n    @Input()\n    precision: number;\n\n    /**\n     * List of currencies that this currency widget support. The format for each entry should be\n     * [currency-code - description]\n     */\n    _currencies: any[];\n\n\n    /**\n     * The formatted currency value. Uses angular currencyPipe to format based on country code.\n     */\n    displayValue: string;\n\n    /**\n     * The currency pipe is used to format our money object.\n     */\n    currencyPipe: CurrencyPipe;\n\n    constructor(public env: Environment,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => FormRowComponent))\n                protected parentContainer: BaseFormComponent)\n    {\n        super(env, parentContainer);\n\n        // Initialize currencies.\n        this.initCurrencies();\n\n        this.currencyPipe = new CurrencyPipe(env.locale);\n\n        env.onLocaleChange.subscribe((locale: string) => {\n            this.currencyPipe = new CurrencyPipe(locale);\n\n            if (isPresent(this.money)) {\n                this.displayValue = this.formatCurrency(\n                    this.money.amount);\n            }\n        });\n    }\n\n    ngOnInit()\n    {\n\n        super.ngOnInit();\n        super.registerFormControl(this.money);\n\n        this.initCurrencies();\n\n        if (isBlank(this.currencySelection)) {\n            this.currencySelection = this._currencies[0];\n        }\n\n        // ready the money field if it exists. and override the existing values.\n        if (this.money) {\n            this.currencySelection = this.money.currency;\n        } else {\n            this.money = new Money(null, this.currencySelection);\n        }\n\n        this.displayValue = this.formatCurrency(this.money.amount);\n    }\n\n\n    private initCurrencies()\n    {\n        if (!this._currencies || this._currencies.length === 0) {\n            this._currencies = ['USD', 'CNY', 'AUD', 'EUR', 'GBP'];\n        }\n    }\n\n\n    /**\n     * Display the real value when the user clicks in the currency widget. Then he can modify the\n     * value without seeing the formatting.\n     *\n     * @param el\n     */\n    onFocus(el: any): void\n    {\n        if (isPresent(this.money) && isPresent(this.money.amount)) {\n            this.displayValue = this.money.amount.toString();\n        }\n    }\n\n    /**\n     * display the formatted currency value when the user navigates away.\n     * @param el\n     */\n    onBlur(el: any): void\n    {\n        this.money = this.money.clone({amount: Number(el.value)});\n        this.displayValue = this.formatCurrency(this.money.amount);\n\n        this.onModelChanged(this.money);\n    }\n\n    onSelection(currency: any): void\n    {\n        this.currencySelection = currency;\n        this.displayValue = this.formatCurrency(this.money.amount);\n\n    }\n\n\n    /**\n     * Function will check to see if currency is a valid number before formatting.\n     * @param val\n     */\n    private formatCurrency(val: any): any\n    {\n        if (!val || val.length === 0) {\n            return val;\n        }\n\n        if (isNaN(val)) {\n            return val;\n        }\n\n        let code = 'USD';\n        if (this.currencySelection) {\n            code = this.currencySelection;\n        }\n\n        this.money = this.money.clone({currency: this.currencySelection});\n\n        // By default, the precision is 2. For example, 10.23 USD.\n        let digits = '1.0-2';\n        // If precision is present, use it for format the money value for display.\n        if (isPresent(this.precision)) {\n            digits = '1.0-' + this.precision;\n        }\n        return this.currencyPipe.transform(val, code, 'symbol', digits);\n    }\n\n    getMoneyCurrency(): string {\n        if (isPresent(this.displayValue) && this.displayValue.length > 0) {\n            return this.currencySelection;\n        }\n        return '';\n    }\n\n    @Input()\n    get currencies(): any[]\n    {\n        return this._currencies;\n    }\n\n    set currencies(value: any[])\n    {\n        if (isPresent(value)) {\n            this._currencies = value;\n        }\n    }\n\n    /**\n     * Internal. Please see ControlValueAccessor\n     *\n     */\n    writeValue(value: any)\n    {\n        if ((value instanceof Money) && !equals(value, this.money)) {\n            this.money = value;\n            if (isPresent(this.money.currency)) {\n                this.currencySelection = this.money.currency;\n            }\n            this.displayValue = this.formatCurrency(this.money.amount);\n            this.formControl.setValue(this.money);\n        }\n    }\n}\n\n/**\n * Money object is represented as a value, locale, and currencyCode\n */\nexport class Money implements Value\n{\n    uniqueName: string;\n\n    constructor(public readonly amount: number = 0, public readonly currency: string = 'USD',\n                public readonly locale: string = 'en_US')\n    {\n    }\n\n\n    getTypes(): any\n    {\n        return {\n            amount: Number,\n            currency: String,\n            locale: String\n        };\n    }\n\n    className(): string\n    {\n        return 'Money';\n    }\n\n    $proto(): Money\n    {\n        return new Money(1, '23', '33');\n    }\n\n    toString(): string\n    {\n        return this.amount + ', locale: ' + this.locale + ', code:  ' + this.currency;\n    }\n\n\n    clone(data: { amount?: number, currency?: string, locale?: string } = {}): Money\n    {\n        return new Money(\n            isPresent(data.amount) ? data.amount : this.amount,\n            isPresent(data.currency) ? data.currency : this.currency,\n            isPresent(data.locale) ? data.locale : this.locale\n        );\n    }\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule, CurrencyPipe} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {DropdownModule, InputTextModule} from 'primeng/primeng';\nimport {CurrencyComponent} from './currency.component';\nimport {AWStringFieldModule} from '../string/string.module';\nimport {AWDropdownModule} from '../dropdown/dropdown.module';\nimport {AWCoreComponentModule} from '../../core/core.module';\n\n@NgModule({\n    declarations: [\n        CurrencyComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        InputTextModule,\n        DropdownModule,\n        AWDropdownModule,\n        AWStringFieldModule,\n        AWCoreComponentModule\n    ],\n    entryComponents: [\n        CurrencyComponent\n    ],\n    exports: [\n        CurrencyComponent,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    providers: [CurrencyPipe]\n})\nexport class AWCurrencyModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    Component,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    SkipSelf\n} from '@angular/core';\nimport {distinctUntilChanged} from 'rxjs/operators';\nimport {Environment, isBlank, isDate} from '@aribaui/core';\nimport {NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BaseFormComponent} from '../../core/base-form.component';\nimport {FormRowComponent} from '../../layouts/form-table/form-row/form-row.component';\n\n\n/**\n * Lightweight and configurable Date and Time component based on the primeng. This\n * component combines both date picker as well as time picker\n *\n *\n *  ### Example\n *  ```\n *\n *  @Component({\n *    selector: 'myTimer' ,\n *    template: `\n *    <aw-date-time [value]=\"date\" [editable]=\"editable\"  [name]=\"'dueDate'\">\n *    </aw-date-time>\n *\n *    `\n *    })\n *    export class MyTimmerComponet\n *    {\n *\n *        date: Date = new Date();\n *\n *\n *        constructor ()\n *        {\n *            this.date.setFullYear(2016 , 10 , 3);\n *            this.date.setHours(10 , 10 , 10);\n *        }\n *    }\n *\n * ```\n *\n * By default you will see date field and time field is hidden to show both you just do following:\n *\n *  ```\n *\n *  @Component({\n *    selector: 'myTimer' ,\n *    template: `\n *\n *    <aw-date-time [value]=\"date\"  [showTime]=\"showTime\" [editable]=\"editable\"  [name]=\"'bbdd'\">\n *    </aw-date-time>\n *\n *    `\n *    })\n *    export class MyTimmerComponet\n *    {\n *        date: Date = new Date();\n *        showTime = true;\n *\n *        constructor ()\n *        {\n *            this.date.setFullYear(2016 , 10 , 3);\n *            this.date.setHours(10 , 10 , 10);\n *        }\n *    }\n *\n * ```\n *\n *\n *\n */\n\n\nexport const DATETIME_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => DateAndTimeComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'aw-date-time',\n    templateUrl: 'date-and-time.component.html',\n    styleUrls: ['date-and-time.component.scss'],\n    providers: [\n        DATETIME_CONTROL_VALUE_ACCESSOR,\n        {provide: BaseFormComponent, useExisting: forwardRef(() => DateAndTimeComponent)}\n    ]\n\n})\nexport class DateAndTimeComponent extends BaseFormComponent {\n\n    static readonly NgTime12: string = 'hh:mm a';\n    static readonly NgTime24: string = 'HH.mm a';\n\n\n    /**\n     * Default value used to set the date and time picker\n     */\n    @Input()\n    value: Date;\n\n    /**\n     * Default date format pattern used if none is passed\n     *\n     */\n    @Input()\n    formatPattern: string = 'mm/dd/yy';\n\n\n    /**\n     * Special workaround as formatters in the primeNG and angular are different so until its\n     * fixed we need to keep this extra pattern.\n     */\n    @Input()\n    formatPatternNG: string = 'MM/dd/yy';\n\n\n    /**\n     * Shows and hides navigation bar with year and months selections\n     */\n    @Input()\n    showNavigation: boolean = false;\n\n\n    /**\n     * Year range displayed for the drop down.\n     */\n    @Input()\n    yearRange: string;\n\n    /**\n     * Shows and hides navigation bar with year and months selections\n     */\n    @Input()\n    showIcon: boolean = true;\n\n    /**\n     * Whether to show timepicker\n     */\n    @Input()\n    showTime: boolean = false;\n\n\n    /**\n     * Whether to show DatePicker. Even we can hide it. it should be for most of the case always\n     * true\n     */\n    @Input()\n    showDate: boolean = true;\n\n\n    /**\n     *\n     * Tells the date picker what format it should use when presenting time. When hourFormat is 12,\n     * it shows the AM, PM\n     *\n     */\n    @Input()\n    hourFormat: string = '24';\n\n    /**\n     * Triggers event when specific date is clicked inside DatePicker\n     *\n     */\n    @Output()\n    onChange: EventEmitter<Date> = new EventEmitter<Date>();\n\n    /**\n     * Set the date to highlight on first opening if the field is blank.\n     *\n     */\n    defaultDate: Date = new Date();\n\n    /**\n     * In case of Datetime we need to make sure the DateAndTime formatName is not propagated\n     * to Date field.\n     */\n    formatNameWithTime: string;\n\n\n    i18n: any;\n    timePlaceHolder: string = 'hh:ss';\n\n\n    constructor(public env: Environment,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => FormRowComponent))\n                protected parentContainer: BaseFormComponent) {\n        super(env, parentContainer);\n    }\n\n    ngOnInit() {\n\n        super.ngOnInit();\n        super.registerFormControl(this.value);\n\n        // default to dateTime pattern which is defined in resource files\n        if (this.hourFormat !== '12' && this.hourFormat !== '24') {\n            this.hourFormat = '24';\n        }\n\n        this.timePlaceHolder = (this.hourFormat === '12') ?\n            ` ${DateAndTimeComponent.NgTime12}` : ` ${DateAndTimeComponent.NgTime24}`;\n\n        this.formControl.valueChanges.pipe(distinctUntilChanged()).subscribe((val: Date) => {\n            this.value = val;\n            this.onModelChanged(this.value);\n        });\n\n        this.initTranslations();\n\n        this.env.onLocaleChange.subscribe((locale: string) => {\n            this.initTranslations();\n\n        });\n\n    }\n\n\n    /**\n     * Need to refactor this as this really get complicated trying to cover usecase with time\n     * and date and every format we have. We should probably have separate patterns for\n     * dates only and date + time\n     */\n    private initTranslations() {\n\n        this.formatNameWithTime = this.formatPattern;\n        if (!this.showDate) {\n            this.formatPatternNG = this.formatPattern += (this.hourFormat === '12') ?\n                ` ${DateAndTimeComponent.NgTime12}` : ` ${DateAndTimeComponent.NgTime24}`;\n\n        }\n\n        if (this.showTime) {\n            let timeStarts = this.formatPattern.indexOf('h');\n            if (timeStarts !== -1) {\n                this.formatNameWithTime = this.formatPattern.substring(0, timeStarts);\n            }\n            this.formatPatternNG += (this.hourFormat === '12') ?\n                ` ${DateAndTimeComponent.NgTime12}` : ` ${DateAndTimeComponent.NgTime24}`;\n        }\n\n\n        this.i18n = {\n            firstDayOfWeek: 0,\n            dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday',\n                'Saturday'],\n            dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            dayNamesMin: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n            monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',\n                'September', 'October', 'November', 'December'],\n            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct',\n                'Nov', 'Dec']\n        };\n\n    }\n\n\n    /**\n     * Fired when dates changes. Here we update  this.value - > date and also update value inside\n     * formController\n     *\n     */\n    onDateChange(event: any): void {\n\n        if (isBlank(event)) {\n            // throw some error ?\n            return;\n        }\n\n        this.value = isDate(event) ? event : new Date(event);\n\n        this.formControl.setValue(this.value, {onlySelf: false, emitEvent: true});\n        this.onModelChanged(this.value);\n        this.onChange.emit(this.value);\n    }\n\n    /**\n     * Internal. Please see ControlValueAccessor\n     *\n     */\n    writeValue(value: any) {\n        if (value !== this.value) {\n            this.value = value;\n            this.formControl.setValue(value);\n        }\n\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CalendarModule} from 'primeng/primeng';\nimport {DateAndTimeComponent} from './date-and-time.component';\nimport {AWStringFieldModule} from '../string/string.module';\n\n@NgModule({\n    declarations: [\n        DateAndTimeComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CalendarModule,\n        AWStringFieldModule\n    ],\n    entryComponents: [\n        DateAndTimeComponent\n    ],\n    exports: [\n        DateAndTimeComponent,\n        ReactiveFormsModule,\n        FormsModule\n    ]\n})\nexport class AWDateAndTimeModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component} from '@angular/core';\n\n/**\n * An dialog header area.\n *\n * See {@link DialogComponent} for more explanation.\n */\n@Component({\n    selector: 'aw-dialog-header',\n    template: '<ng-content></ng-content>'\n})\nexport class DialogHeaderComponent\n{\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component} from '@angular/core';\n\n/**\n * An dialog header area.\n *\n * See {@link DialogComponent} for more explanation.\n */\n@Component({\n    selector: 'aw-dialog-footer',\n    template: '<ng-content></ng-content>'\n})\nexport class DialogFooterComponent\n{\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, ContentChild, EventEmitter, Input, Output} from '@angular/core';\nimport {Environment, isPresent} from '@aribaui/core';\nimport {ModalContainer} from '../../core/modal-service/modal-container';\nimport {DialogHeaderComponent} from './dialog-header.component';\nimport {DialogFooterComponent} from './dialog-footer.component';\n\n/**\n * Dialog Component that provides the look and feel for a modal dialog. This component has three\n * sections: header, body, and footer. It can be used by itself or extended.\n *\n * There are three types of popup.\n *   1.  a regular dialog box that has header, body and footer. It's the most customizable.\n *   2.  a confirmation box is similar to a dialog box but has accept and reject action buttons.\n *   3.  a overlay, which is a very basic popup with what you put inside.\n *       It doesn't have header and footer.\n *\n * There are two ways to use any popup component.\n *   1.  Either directly by using component, aw-dialog, aw-confirmation or aw-overlay\n *   2.  or the ModalService  service.open(<DialogComponent>), service.close()\n *\n * Usage:\n *    1.  Using Dialog directly to display a modal popup. This usage is a quick way to show a\n * message to the user.\n *\n *             this.modalService.open<DialogComponent>( DialogComponent, {\n *                     title: 'My Popup Title',\n *                     body: 'My Popup Body'\n *              });\n *\n *\n *   2.   Use the component inside your template.\n *\n *          @Component({\n *                selector: 'aw-page' ,\n *                           template: `\n *                              <aw-dialog [(visible)]=\"display\" [modal]=\"true\"\n *                                        (onOpen)=\"openAction()\" (onClose)=\"closeAction()\">\n *\n *                                    <aw-dialog-header>Dialog Header</aw-dialog-header>\n *\n *                                     Dialog Body: Creating a dialog using the dialog component\n *\n *                                    <aw-dialog-footer>\n *                                      <aw-button [size]=\"'small'\" [style]=\"'primary'\"\n *                                                 (click)=\"close()\">OK</aw-button>\n *                                    </aw-dialog-footer>\n *                              </aw-dialog>\n *\n *                          <aw-button [size]=\"'small'\" (click)=\"open()\">Open Dialog</aw-button>\n *                  `\n *         export class MyPageComponent implements OnInit {\n *\n *                     display: boolean = false;\n *\n *                     dialogAction: string;\n *\n *                     constructor(private modalService: ModalService) {\n *                          super();\n *                       }\n *                     ngOnInit() { }\n *\n *                     open() {\n *                        this.display = true;\n *                     }\n *\n *                     openAction()  {\n *                        this.dialogAction = \"open\";\n *                      }\n *       }\n *\n *\n */\n@Component({\n    selector: 'aw-dialog',\n    templateUrl: 'dialog.component.html',\n    styleUrls: ['dialog.component.scss']\n})\nexport class DialogComponent extends ModalContainer\n{\n    /**\n     * Title for the Dialog.  if title and 'TitleTemplate' are both set, titleTemplate takes\n     * precedence.\n     */\n    @Input()\n    title: string;\n\n    /**\n     * Body section for Dialog. Caller should use either the body string, or content projection\n     * to add values to the dialog. If both are used, they will both show up.\n     */\n    @Input()\n    body: string;\n    /**\n     * support two way data binding on visible property.\n     */\n    @Output()\n    visibleChange: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * whether this dialog blocks the rest of the page or not when displayed.\n     */\n    @Input()\n    modal: boolean = true;\n\n    /**\n     * Whether there's an x at the top right that makes the dialog closable.\n     */\n    @Input()\n    closable: boolean = true;\n\n    /**\n     * Target element to attach the dialog. \"body\" or local ng-template variable are valid.\n     */\n    @Input()\n    appendTo: any;\n\n    /**\n     * Event fired when dialog is closed.\n     */\n    @Output()\n    onClose: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Event fired when the dialog is opened.\n     */\n    @Output()\n    onOpen: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Header component. Usually contains the title.\n     */\n    @ContentChild(DialogHeaderComponent) header: DialogHeaderComponent;\n\n    /**\n     * Dialog footer. Usually contains buttons\n     */\n    @ContentChild(DialogFooterComponent) footer: DialogFooterComponent;\n\n\n    constructor(public env: Environment)\n    {\n        super(env);\n\n        this.width = 300;\n        this.height = 'auto';\n    }\n\n    /**\n     * Open this dialog.\n     */\n    open()\n    {\n        this.visible = true;\n        this.onOpen.emit();\n\n        // visible is a 2-way binding variable.\n        this.visibleChange.emit(true);\n    }\n\n    /**\n     * close the dialog\n     */\n    close()\n    {\n        this.visible = false;\n        this.onClose.emit();\n\n        // Important to make sure change is set on parent binding.\n        // Otherwise, the variable and dialog open/close state can be out\n        // of sync and we wouldn't trigger change detection.\n        this.visibleChange.emit(false);\n    }\n\n    /**\n     * Does this dialog have header.\n     *\n     */\n    hasHeader(): boolean\n    {\n        return isPresent(this.header);\n    }\n\n    /**\n     * Does this dialog have footer.\n     *\n     */\n    hasFooter(): boolean\n    {\n        return isPresent(this.footer);\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {AWCoreComponentModule} from '../../core/core.module';\nimport {DialogComponent} from './dialog.component';\nimport {DialogHeaderComponent} from './dialog-header.component';\nimport {DialogFooterComponent} from './dialog-footer.component';\nimport {ModalComponent} from '../../core/modal-service/modal/modal.component';\nimport {DialogModule} from 'primeng/dialog';\n\n@NgModule({\n    declarations: [\n        DialogComponent,\n        DialogHeaderComponent,\n        DialogFooterComponent\n    ],\n    imports: [\n        CommonModule,\n        AWCoreComponentModule,\n        DialogModule\n    ],\n    entryComponents: [\n        ModalComponent,\n        DialogComponent,\n        DialogHeaderComponent,\n        DialogFooterComponent\n    ],\n    exports: [\n        DialogComponent,\n        DialogHeaderComponent,\n        DialogFooterComponent,\n        AWCoreComponentModule\n    ],\n    providers: []\n})\nexport class AWDialogModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    Component,\n    forwardRef,\n    Inject,\n    Input,\n    Optional,\n    SkipSelf,\n    ViewContainerRef\n} from '@angular/core';\nimport {\n    Environment,\n    equals,\n    FieldPath,\n    isArray,\n    isBlank,\n    isFunction,\n    isPresent,\n    ListWrapper\n} from '@aribaui/core';\nimport {ChooserSelectionState} from '../chooser/chooser-selection-state';\nimport {ChooserState} from '../chooser/chooser-state';\nimport {BaseFormComponent} from '../../core/base-form.component';\nimport {ChooserDataSource} from '../chooser/chooser-data-source';\nimport {DATA_SOURCE} from '../../core/data/data-source';\nimport {DataFinders, QueryType} from '../../core/data/data-finders';\nimport {DataProviders} from '../../core/data/data-providers';\n\n\n/**\n * Convenient wrapper class around controls such as radiobuttons, dropdown, checkboxes,\n * Chooser. The type of the chooser may be determined dynamically based on the number of items in\n * the data source list, or can be specified explicitly via the \"type\" binding.\n *\n *\n *\n */\n@Component({\n    selector: 'aw-generic-chooser',\n    templateUrl: 'generic-chooser.component.html',\n    styleUrls: ['generic-chooser.component.scss'],\n    providers: [\n        {provide: BaseFormComponent, useExisting: forwardRef(() => GenericChooserComponent)},\n        {provide: DATA_SOURCE, useClass: ChooserDataSource, deps: [DataProviders, DataFinders]}\n    ]\n\n})\nexport class GenericChooserComponent extends BaseFormComponent\n{\n\n    /**\n     * Ordered list of items assignable to the key of the object\n     */\n    @Input()\n    list: any[];\n\n    /**\n     * The object this control is being assigned to.\n     */\n    @Input()\n    object: any;\n\n\n    /**\n     * The key field path this control is being assigned to.\n     */\n    @Input()\n    key: string;\n\n\n    /**\n     * Can be used in place of LIST binding to retrieve a list based on the ChoiceSource\n     *\n     */\n    @Input()\n    destinationClass: string;\n\n\n    /**\n     * Used when retrieving choiceSource by destination class and this are extra params that can be\n     * used to narrow the matching or to pass parameters into ChoiceSource provider\n     */\n    @Input()\n    choiceProviderParams: Map<string, any>;\n\n\n    /**\n     *  Is this a List property, or a to-one.\n     */\n    @Input()\n    multiselect: boolean = false;\n\n    /**\n     *  The style of chooser to use (Radio, Checkbox, Dropdown, Chooser)\n     *  Defaults based on cardinality of the list and whether it's multiSelect.\n     */\n    @Input()\n    type: string;\n\n    /**\n     * Support custom key. in order to make this work we need to introduce custom <templates> for\n     * all this chooser types\n     */\n    @Input()\n    displayKey: string;\n\n    // /**\n    //  *  Should we attempt a match as they type (against the full list)\n    //  */\n    // @Input()\n    // allowFullMatchOnInput: boolean;\n\n    /**\n     * String rendered as first value in the dropdown which let the user to make 'no selection'\n     * from available list of values. When this option is active and use make this selection we\n     * save a NULL value\n     */\n    @Input()\n    noSelectionString: string;\n\n\n    /**\n     * Generic Chooser works directly with object and its references and we need to create this\n     * keypath to be able to set/get value from target or parent object\n     */\n    keyPath: FieldPath;\n\n\n    constructor(public env: Environment, private _viewContainer: ViewContainerRef,\n                @Inject(DATA_SOURCE) public dataSource: ChooserDataSource,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => BaseFormComponent))\n                protected parentContainer: BaseFormComponent)\n    {\n        super(env, parentContainer);\n    }\n\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n\n        if (isBlank(this.object)) {\n            this.object = (<any>this._viewContainer.injector).view.context;\n        }\n        this.keyPath = new FieldPath(this.key);\n        let defaultDataProvider = null;\n\n        if (isPresent(this.list)) {\n            defaultDataProvider = this.dataSource.dataProviders.find(this.list);\n        } else {\n            defaultDataProvider = this.dataSource.dataProviders.find(this.destinationClass);\n        }\n\n        let projectedSize = defaultDataProvider.expectedCount(this.choiceProviderParams);\n        this.initType(projectedSize);\n\n        if (this.type === 'Chooser') {\n\n            this.dataSource.init({\n                dataProvider: defaultDataProvider,\n                queryType: QueryType.FullText,\n                lookupKey: this.displayKey,\n                state: new ChooserState(new GCChooserState(this), this.multiselect),\n                multiselect: this.multiselect\n            });\n        } else {\n\n            // do we need to read this value in async?\n            this.list = defaultDataProvider.data();\n        }\n        super.registerFormControl(this.selection);\n        this.validateRequired();\n\n        if (isBlank(this.selection)) {\n            // this.noSelectionString = this.i18n.instant('Widgets.gchooser.noSelString');\n            this.noSelectionString = 'Select a Item';\n        }\n    }\n\n    /**\n     *\n     * When @Input type is not passed we try to guess and select the best type for current data\n     *\n     */\n    private initType(projectedSize: number)\n    {\n        if (isBlank(this.type)) {\n            if (this.multiselect) {\n                this.type = (projectedSize <= 0 || projectedSize > 8) ? 'Chooser' : 'Checkbox';\n            } else {\n                this.type = (projectedSize <= 0 || projectedSize > 20) ? 'Chooser'\n                    : (projectedSize < 6) ? 'Radio' :\n                        'Dropdown';\n            }\n        }\n    }\n\n    /**\n     * There are certain properties which are required by this component. As already mentioned\n     * above GenericChooser works with references and thefore two key properties are object and key\n     * so we can access an object\n     *\n     *\n     */\n    private validateRequired()\n    {\n        if (isBlank(this.object)) {\n            throw Error('Cannot continue without a object');\n        }\n\n        if (isBlank(this.key)) {\n            throw Error('Cannot continue without a key binding');\n        }\n        if (isBlank(this.list) && isBlank(this.destinationClass)) {\n            throw Error('Cannot continue without having either list of values or destinationClass');\n        }\n\n        if (isPresent(\n                this.type) &&\n            (this.type !== 'Radio' && this.type !== 'Checkbox' && this.type !== 'Dropdown' &&\n                this.type !== 'Chooser')) {\n            throw Error('Cannot instantiate GenericChooser  - invalid type');\n        }\n\n        if (isBlank(this.displayKey)) {\n            this.displayKey = 'toString';\n        }\n    }\n\n    /**\n     *\n     * Used when displaying value both from primitive type as well complex object. If you want to\n     * control how item is displayed you can provide display key, which is can be a  method or\n     * property of the object you are displaying.\n     *\n     * Todo: think about formatters as well\n     *\n     */\n    displayValue(item: any): string\n    {\n        if (isBlank(this.displayKey)) {\n            return item;\n        }\n        let fieldValue = FieldPath.getFieldValue(item, this.displayKey);\n        if (isFunction(fieldValue)) {\n            return fieldValue.call(item);\n        }\n        return fieldValue;\n    }\n\n\n    /**\n     *  Retrieve a current value from the parent/target object\n     *\n     */\n    get selection(): any\n    {\n        return this.keyPath.getFieldValue(this.object);\n    }\n\n    /**\n     *  set value back to the object\n     *\n     */\n    set selection(value: any)\n    {\n        this.keyPath.setFieldValue(this.object, value);\n    }\n\n\n    onSelection(value: any): void\n    {\n        this.selection = value;\n\n        this.formControl.setValue(this.selection);\n        this.formControl.markAsDirty();\n\n    }\n}\n\n/**\n * GenericChooser implementation of the ChooserSelectionState which is used when Type = Chooser.\n *\n */\nexport class GCChooserState extends ChooserSelectionState\n{\n\n    constructor(private gChooser: GenericChooserComponent)\n    {\n        super();\n    }\n\n    setSelectionState(selection: any, selected: boolean): void\n    {\n        if (selected === this.isSelected(selection)) {\n            return;\n        }\n\n        if (this.gChooser.multiselect) {\n\n            // Check if we can implement smarter and more generic way how we use it in java\n            // RelationshipField.addTo(_object, _keyPath, selection);\n\n            let multiRel: Array<any> = this.gChooser.keyPath.getFieldValue(this.gChooser.object);\n            if (isBlank(multiRel)) {\n                multiRel = [];\n\n            } else if (isPresent(multiRel) && !isArray(multiRel)) {\n                throw new Error('I can not store multiselect value into non-array object');\n            }\n\n            if (selected) {\n                multiRel.push(selection);\n                this.gChooser.selection = multiRel;\n\n            } else {\n                ListWrapper.removeIfExist(multiRel, selection);\n            }\n\n        } else {\n            if (!selection) {\n                selection = null;\n            }\n            this.gChooser.selection = selection;\n\n        }\n    }\n\n    selectedObject(): any\n    {\n        if (this.gChooser.multiselect) {\n            let objects = this.selectedObjects();\n            return (isBlank(objects) || ListWrapper.isEmpty(objects)) ? null : ListWrapper.last(\n                objects);\n        }\n        return this.gChooser.selection;\n    }\n\n    selectedObjects(): Array<any>\n    {\n        let selection = this.gChooser.selection;\n        if (this.gChooser.multiselect && isBlank(selection)) {\n            selection = [];\n        }\n        return (this.gChooser.multiselect && isArray(selection)) ? selection : [selection];\n    }\n\n    isSelected(selection: any): boolean\n    {\n        if (this.gChooser.multiselect) {\n            return ListWrapper.containsComplex(this.selectedObjects(), selection);\n        }\n        let curValue = this.selectedObject();\n        return equals(curValue, selection);\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport {\n    AfterContentInit,\n    Component,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    SkipSelf\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Environment, isPresent} from '@aribaui/core';\nimport {BaseFormComponent} from '../../core/base-form.component';\nimport {FormRowComponent} from '../../layouts/form-table/form-row/form-row.component';\n\n\n/**\n * Wrapper class for RadioButton component providing convenient way to to render RadioButton Groups\n *\n *\n * ### Example\n *\n *\n * ```\n *      @Component({\n *          selector: 'gender-selector' ,\n *          template: `\n *              <aw-radiobutton-list [list]=\"rbListValues\" [layout]=\"layout\"\n *     [selection]=\"selectedValue\" [name]=\"'name'\">\n *               </aw-radiobutton-list>\n *      `\n *      })\n *      export class GenderSelectorComponent\n *      {\n *          rbListValues: string[] = ['male' , 'female' , 'other'];\n *          selectedValue: string = 'other';\n *          layout: string = 'stacked';\n *\n *\n *          formGroup: FormGroup = new FormGroup({});\n *\n *\n *          onCBClick (event): void\n *          {\n *              console.log('onCBClick = ' + event);\n *          }\n *\n *      }\n *\n * ```\n */\n\n\nexport const RB_LIST_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioButtonListComponent),\n    multi: true\n};\n\n\n@Component({\n    selector: 'aw-radiobutton-list',\n    templateUrl: 'radio-button-list.component.html',\n    styleUrls: ['radio-button-list.component.scss'],\n    providers: [\n        RB_LIST_CONTROL_VALUE_ACCESSOR,\n        {provide: BaseFormComponent, useExisting: forwardRef(() => RadioButtonListComponent)}\n    ]\n\n})\nexport class RadioButtonListComponent extends BaseFormComponent implements AfterContentInit\n{\n\n    /**\n     * LIst of values used to render the radio button group\n     */\n    @Input()\n    list: any[];\n\n\n    /**\n     * Identifies which radio buttons is selected when rendered\n     */\n    @Input()\n    selection: any;\n\n\n    /**\n     * special expression to format label\n     */\n    @Input()\n    labelFormatter: (value: any) => string;\n\n\n    /**\n     *\n     * Fires an event when radio button is selected\n     *\n     */\n    @Output()\n    onSelection: EventEmitter<any> = new EventEmitter<any>();\n\n\n    /**\n     * internal model to listen for radio value changes\n     *\n     */\n    model: any;\n\n    constructor(public env: Environment,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => FormRowComponent))\n                protected parentContainer: BaseFormComponent)\n    {\n        super(env, parentContainer);\n    }\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n\n        if (isPresent(this.selection)) {\n            this.model = 0;\n        }\n\n        this.updateModel(this.selection);\n        this.onModelChanged(this.selection);\n        this.registerFormControl(this.selection);\n    }\n\n\n    /**\n     * Label is extracted into a method so in the future we can play how we want to display the\n     * value. Since I want to support formatters for each components we might have a chance to\n     * decide how the label will look like.\n     *\n     */\n    labelValue(item: any): string\n    {\n        if (isPresent(this.labelFormatter)) {\n            return this.labelFormatter(item);\n        }\n        return item.toString();\n    }\n\n\n    /**\n     * In this version of checkboxes we still expect only primitive types. Keep this functionality\n     * in extra method so we can work with it even now we just return the same value back\n     *\n     *\n     */\n    value(item: any): any\n    {\n        return item;\n    }\n\n\n    /**\n     *\n     * On NGModel change retrieve actual record based on the INDEX and propagate it to both\n     * ngModel as well as FormGroup.\n     *\n     */\n    onChange(event: any)\n    {\n        let updatedModel: any = this.list[this.model];\n\n        this.onSelection.emit(updatedModel);\n        this.onModelChanged(updatedModel);\n        this.formControl.setValue(updatedModel, {\n            emitEvent: true,\n            emitViewToModelChange: false\n        });\n    }\n\n\n    /**\n     * Since we might be dealing with complex object store only INDEX number in the model.\n     *\n     */\n    updateModel(souceItem: any): void\n    {\n        let index = this.list.findIndex((elem: any) =>\n        {\n            return souceItem === elem;\n        });\n        this.model = index === -1 ? 0 : index;\n    }\n\n    ngAfterContentInit(): void\n    {\n        let updatedModel: any = this.list[this.model];\n        this.formControl.setValue(updatedModel, {\n            emitEvent: true,\n            emitViewToModelChange: false\n        });\n        // this.cd.detectChanges();\n\n    }\n\n    /**\n     * Internal. Please see ControlValueAccessor\n     *\n     */\n    writeValue(value: any)\n    {\n        if (value !== this.value) {\n            let newModel = value;\n            this.updateModel(newModel);\n        }\n\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport {\n    Component,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    SkipSelf\n} from '@angular/core';\nimport {FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Environment} from '@aribaui/core';\nimport {BaseFormComponent} from '../../core/base-form.component';\nimport {FormRowComponent} from '../../layouts/form-table/form-row/form-row.component';\n\n\n/**\n *\n * Implements standard HTML radio button on top of PrimeNG with ariba styling\n *\n * ### Example\n *\n * 1. Basic usage using ngModel pre-selected first radio\n *\n *  ```ts\n *\n *      @Component({\n *          selector: 'demo-comp',\n *          template: `\n *              <aw-radiobutton [name]=\"'color'\" [value]=\"'red'\" [label]=\"'Red'\"\n *                             [(ngModel)]=\"model\">\n *             </aw-radiobutton>\n *              <aw-radiobutton [name]=\"'color'\" [value]=\"'blue'\" [label]=\"'Blue'\"\n *                      [(ngModel)]=\"model\">\n *              </aw-radiobutton>\n *      `\n *      })*\n *      class BasicWithNgModelComponent\n *      {\n *          model: string[] = ['red'];\n *\n *          constructor()\n *          {\n *          }\n *      }\n *\n *  ```\n *\n *\n * 2. Basic usage with formGroup\n *\n *\n * ```ts\n *       @Component({\n *           selector: 'demo-comp',\n *           template: `\n *          <div [formGroup]=\"env.currentForm\">\n *               <aw-radiobutton [name]=\"'color2'\" [value]=\"'red'\" [label]=\"'Red'\"\n *               (onChange)=\"onChange($event)\">\n *               </aw-radiobutton>\n *               <aw-radiobutton [name]=\"'color2'\" [value]=\"'blue'\" [label]=\"'Blue'\"\n *               (onChange)=\"onChange($event)\">\n *               </aw-radiobutton>\n *\n *       </div>\n *       `\n *       })\n *       class BasicWithFormGroupComponent implements OnInit\n *       {\n *           model: string = 'blue';\n *\n *           constructor(public env: Environment)\n *           {\n *           }\n *\n *           ngOnInit(): void\n *           {\n *               this.env.currentForm = new FormGroup({});\n *               this.env.currentForm.registerControl('color2', new FormControl(this.model));\n *           }\n *\n *\n *           onChange(event: any): void\n *           {\n *               this.modelSet = event;\n *           }\n *\n *       }\n *  ````\n *\n *\n *\n *\n */\nexport const RAB_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioButtonComponent),\n    multi: true\n};\n\n\n@Component({\n    selector: 'aw-radiobutton',\n    templateUrl: 'radio-button.component.html',\n    styleUrls: ['radio-button.component.scss'],\n\n    providers: [\n        RAB_CONTROL_VALUE_ACCESSOR,\n        {provide: BaseFormComponent, useExisting: forwardRef(() => RadioButtonComponent)}\n    ]\n})\nexport class RadioButtonComponent extends BaseFormComponent\n{\n\n    /**\n     *\n     * A value associated with this radio\n     *\n     */\n    @Input()\n    value: any = '';\n\n\n    /**\n     * Label to be used when rendering a radio\n     */\n    @Input()\n    label: string;\n\n\n    /**\n     * Trigger click event with currrent selected value\n     *\n     */\n    @Output()\n    onChange: EventEmitter<any> = new EventEmitter();\n\n\n    /**\n     * Internal model to comunicate with primeNg Radio\n     */\n    model: any;\n\n\n    constructor (public env: Environment,\n                 @SkipSelf() @Optional() @Inject(forwardRef(() => FormRowComponent))\n                 protected parentContainer: BaseFormComponent)\n    {\n        super(env, parentContainer);\n    }\n\n    ngOnInit ()\n    {\n        super.ngOnInit();\n        if (this.isStandalone) {\n            super.registerFormControl(this.value);\n            this.model = this.formControl.value;\n            this.onModelChanged(this.model);\n\n        } else {\n            this.formControl = <FormControl> this.formGroup.controls[this.name];\n        }\n    }\n\n    /**\n     * Called when radio is clicked. Not using PrimeNG click event as it is fired before\n     * the model is changed. Therefore need to listen on (ngModelChange)\n     *\n     */\n    onModelChange (newVal: any): void\n    {\n        this.onModelChanged(this.model);\n        if (this.isStandalone) {\n            this.formControl.setValue(this.model, {emitEvent: true});\n        }\n        this.onChange.emit(this.model);\n    }\n\n    /**\n     * Internal. Please see ControlValueAccessor\n     *\n     */\n    writeValue (value: any)\n    {\n        if (value !== this.model) {\n            this.model = value;\n            if (this.isStandalone) {\n                this.formControl.setValue(this.model, {emitEvent: true});\n            }\n\n            this.onModelChanged(this.model);\n        }\n    }\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {RadioButtonComponent} from './radio-button.component';\nimport {RadioButtonModule} from 'primeng/primeng';\n\n\n@NgModule({\n    declarations: [\n        RadioButtonComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RadioButtonModule\n    ],\n    entryComponents: [\n        RadioButtonComponent\n    ],\n    exports: [\n        RadioButtonComponent,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    providers: []\n})\nexport class AWRadioButtonModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {RadioButtonListComponent} from './radio-button-list.component';\nimport {AWRadioButtonModule} from '../radio-button/radio-button.module';\n\n\n@NgModule({\n    declarations: [\n        RadioButtonListComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        AWRadioButtonModule\n    ],\n    entryComponents: [\n        RadioButtonListComponent\n    ],\n    exports: [\n        RadioButtonListComponent,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    providers: []\n})\nexport class AWRadioButtonListModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {AWCoreComponentModule} from '../../core/core.module';\nimport {GenericChooserComponent} from './generic-chooser.component';\nimport {AWCheckBoxListModule} from '../check-box-list/check-box-list.module';\nimport {AWChooserModule} from '../chooser/chooser.module';\nimport {AWRadioButtonListModule} from '../radio-button-list/radio-button-list.module';\nimport {AWDropdownModule} from '../dropdown/dropdown.module';\n\n\n@NgModule({\n    declarations: [\n        GenericChooserComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        AWCoreComponentModule,\n        AWDropdownModule,\n        AWCheckBoxListModule,\n        AWChooserModule,\n        AWRadioButtonListModule\n    ],\n    entryComponents: [\n        GenericChooserComponent\n    ],\n    exports: [\n        ReactiveFormsModule,\n        FormsModule,\n        GenericChooserComponent\n    ]\n})\nexport class AWGenericChooserModule\n{\n}\n\n\n","import {Entity, isBlank, isEntity, isPresent, ListWrapper} from '@aribaui/core';\nimport {Injectable} from '@angular/core';\nimport {OutlineForComponent, OutlineNode} from './outline-for.component';\n\n/**\n * OutlineState is the key gluing part for the OutlineFor and OutlineController components. It\n * holds all important information for the current outline tree and manages expansion states in form\n * of so called expansionPath and expansionStates\n *\n * We need to have a way how to work with generic data structure in order not to hold UI specific\n * information on the domain object model just like we had it before, where we had an interface\n * called OutlineNode, with fields (expanded, selected, etc.. )\n *\n *\n * `expansionPath`: Holds an array of currently selected and expanded nodes. This is filled by\n * OutlineController.\n *\n *\n * If we are dealing with Entity or anything that has identity then we have easier situation as we\n * can ask for ID and it is more efficient for serialization\n */\n@Injectable()\nexport class OutlineState\n{\n    /**\n     * Array of currently selected and expanded nodes\n     *\n     */\n    private _expansionPath: any[];\n\n    /**\n     * When `allowSelection` is enabled on OutlineControl it saved currently selected item to be\n     * able later on apply some styling and broadcast this selection outside of the component.\n     */\n    selectedItem: any;\n\n    /**\n     *\n     * Maps object reference to boolean values, where TRUE means EXPANDED, FALSE collapsed\n     *\n     */\n    expansionStates: Map<any, boolean>;\n\n\n    /**\n     *\n     * When outline is rendered for first time or re-rendered and we set default value for the\n     * expansionStates. This way we can pretty easily execute CollapseAll, ExpandAll\n     *\n     */\n    isExpandedAll: boolean = false; // collapsed\n\n    /**\n     *\n     * Holds current level during tree node rendering so we can apply correct indentation\n     *\n     */\n    currentLevel: number = -1;\n\n    /**\n     * Used during a toggle action to record current selection path.\n     *\n     */\n    currentPath: any[];\n\n\n    /**\n     * Globally shared property\n     */\n    outlineFor: OutlineForComponent;\n\n\n    constructor ()\n    {\n        this.expansionStates = new Map();\n    }\n\n    /**\n     * For the collapseAll and expandAll we are using simple mechanism where we clean up all\n     * selection and then set the global expand state, this whey isExpand method returns the same\n     * state for all items\n     */\n    collapseAll (): void\n    {\n        if (isPresent(this.outlineFor) &&\n            this.outlineFor.isTreeModelFormat()) {\n\n            // for this case we collapse all but root nodes\n            if (this.outlineFor.pushRootSectionOnNewLine) {\n\n                this.outlineFor.list.forEach((item: OutlineNode) =>\n                {\n                    this.updateNodes(item.children || [], false);\n                });\n            } else {\n                this.updateNodes(this.outlineFor.list || [], false);\n            }\n\n        } else {\n            this.expansionStates.clear();\n        }\n        this.isExpandedAll = false;\n    }\n\n    expandAll (): void\n    {\n        if (isPresent(this.outlineFor) &&\n            this.outlineFor.isTreeModelFormat()) {\n            this.updateNodes(this.outlineFor.list, true);\n\n        } else {\n            this.expansionStates.clear();\n        }\n        this.isExpandedAll = true;\n    }\n\n\n    get expansionPath (): any[]\n    {\n        if (isBlank(this._expansionPath)) {\n            this._expansionPath = [];\n        }\n        return this._expansionPath;\n    }\n\n\n    set expansionPath (value: any[])\n    {\n        this._expansionPath = value;\n\n        if (isBlank(this._expansionPath)) {\n            return;\n        }\n        this._expansionPath.forEach((item: any) =>\n        {\n            this.setExpansionState(item, true);\n        });\n    }\n\n\n    toggleExpansion (currentPath: any[], children?: any[]): void\n    {\n\n        if (isBlank(currentPath)) {\n            return;\n        }\n        let item = ListWrapper.last(currentPath);\n        let itemChildren = children || [];\n        let newState = !this.isExpanded(item);\n        this.setExpansionState(item, newState);\n\n        if (!newState) {\n            ListWrapper.removeLast(currentPath);\n            this.updateNodes(itemChildren, newState);\n        }\n\n        this.setExpansionPath(currentPath);\n    }\n\n    updateNodes (nodes: any[], newState: boolean): void\n    {\n        nodes.forEach((child: any) =>\n        {\n            let items = this.outlineFor.childrenForItem(child);\n            if (isPresent(items) && items.length > 0) {\n                this.updateNodes(items, newState);\n            }\n            this.setExpansionState(child, newState);\n        });\n    }\n\n    setExpansionState (item: any, isExpanded: boolean): void\n    {\n        // Even for tree mode format save the state so we can use it later on in case object\n        // references gets meesed up\n        if (this.outlineFor &&\n            this.outlineFor.isTreeModelFormat()) {\n            (<OutlineNode>item).isExpanded = isExpanded;\n        } else {\n            let key = this.itemToKey(item);\n            if (isExpanded === this.isExpandedAll) {\n                this.expansionStates.delete(key);\n            } else {\n                this.expansionStates.set(key, (isExpanded) ? true : false);\n            }\n        }\n    }\n\n    /**\n     * To improve state persisting lets check if we are dealing with an Object that has Identity\n     * so we can extract an ID otherwise use object to compare by reference\n     *\n     *\n     */\n    private itemToKey (item: any): string\n    {\n        return isEntity(item) ? (<Entity>item).identity() : item;\n    }\n\n\n    setExpansionPath (items: any[]): void\n    {\n        this.expansionPath = items;\n\n        items.forEach((node: any) =>\n        {\n            this.setExpansionState(node, true);\n        });\n    }\n\n    isExpanded (item: any): boolean\n    {\n        if (isPresent(this.outlineFor) &&\n            this.outlineFor.isTreeModelFormat()) {\n            return (<OutlineNode>item).isExpanded;\n        } else {\n            let key = this.itemToKey(item);\n            if (!this.expansionStates.has(key)) {\n                return this.isExpandedAll;\n            }\n            return this.expansionStates.get(key);\n        }\n    }\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    Component,\n    ContentChild,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnInit,\n    Output,\n    TemplateRef,\n    ViewChild,\n    ViewContainerRef\n} from '@angular/core';\nimport {animate, AnimationBuilder, state, style, transition, trigger} from '@angular/animations';\nimport {assert, Environment, Identity, isBlank, isPresent, ListWrapper} from '@aribaui/core';\nimport {BaseComponent} from '../../core/base.component';\nimport {OutlineState} from './outline-state';\n\n\n/**\n * This interface represent concrete tree structure for the outline tree mode\n */\nexport interface OutlineNode extends Identity\n{\n    /**\n     * Reference to parent node.\n     */\n    parent: OutlineNode;\n\n    /**\n     * Node's children. Even its a field it can be implemented lazily using getter where a target\n     * object does not implement this as a public field but a getter with control over the\n     * retrieved list\n     */\n    children: OutlineNode[];\n\n    /**\n     * Different states for outline Node\n     *\n     * isExpanded: boolean;= moving out as this is managed by expansionstate.\n     */\n    isExpanded: boolean;\n    isSelected: boolean;\n    isMatch?: boolean;\n    readonly?: boolean;\n    type?: string;\n    draggable?: boolean;\n    droppable?: boolean;\n    visible?: boolean;\n\n}\n\n\n/**\n *\n * Checks type for OutlineNode\n *\n */\nexport function isOutlineNode(node: any): node is OutlineNode\n{\n    return isPresent(node) && isPresent((<OutlineNode>node))\n        && isPresent((<OutlineNode>node).parent)\n        && isPresent((<OutlineNode>node).children);\n}\n\n\n/**\n * Currently outline supports only two modes free, where application is responsible to retrieve\n * children for each node and tree with above OutlineNode structure\n */\nexport type ModelFormat = 'free' | 'tree';\n\n\n/**\n *\n * OutlineForComponent is like ngFor, but for hierarchical (outline/tree) structures -- i.e. in\n * those cases where an item may have children.\n *\n *\n * It uses outline `<aw-outline-control>` to provide expanding functionality, indentation\n * and other things.\n *\n *\n * This component has minimal styling to make sure it can be changed easily.\n *\n * ### Example rendering tree section, where based on the type we format the out plus\n * for the main root section we always render little popup menu.\n *\n * ```\n *\n *   <aw-outline-for [list]=\"list\" [hasChildren]=\"hasChildren\">\n *\n *       <ng-template #outline let-item>\n *\n *           <div class=\"my-section\">\n *               <div class=\"outline\">\n *                   <aw-outline-control>\n *                       <ng-container [ngSwitch]=\"item.type\">\n *                           <ng-template [ngSwitchCase]=\"'text'\">\n *                               <div class=\"as-paragraf\">\n *                                   {{item?.content}}\n *                               </div>\n *                           </ng-template>\n *\n *\n *                           <ng-template ngSwitchDefault>\n *                               {{item?.content}}\n *                           </ng-template>\n *\n *\n *                       </ng-container>\n *\n *\n *                   </aw-outline-control>\n *               </div>\n *\n *               <div class=\"filters\" *ngIf=\"item.type === 'section'\" >\n *\n *                   <aw-hover-card [linkTitle]=\"'Filter Items'\">\n *                       <aw-list [list]=\"filterItems\" [borderless]=\"true\"></aw-list>\n *                   </aw-hover-card>\n *\n *               </div>\n *           </div>\n *     </ng-template>`\n *   </aw-outline-for>\n *\n * ```\n *\n *\n * We can use it also in embedded mode where we use the `awOutlineFor` directive\n *\n * ## Example\n *\n *\n * ````\n *  <table  class=\"tree-table\" >\n *      <thead>\n *          <tr>\n *              <th>Name</th>\n *              <th>Type</th>\n *          </tr>\n *      </thead>\n *      <tbody #ooo2 awOutlineFor [list]=\"list\"\n *             [hasChildren]=\"hasChildren\"\n *             class=\"outline-table\"\n *      >\n *          <ng-template #outline let-item>\n *              <tr>\n *                  <td class=\"item-name outline-animation\">\n *                      <div><aw-outline-control>\n *                          {{item?.content}}\n *                      </aw-outline-control></div>\n *                  </td>\n *                  <td class=\"item-type outline-animation\">\n *                      <div>{{item.type}}</div>\n *                  </td>\n *              </tr>\n *          </ng-template>\n *      </tbody>\n *  </table>\n *\n * ```\n *\n * I was thinking maybe for first time we don't need the same animation like expanding and\n * collapsing. Maybe we need fade-in. In such case I would probably apply @section anim only\n * on items where level > 0 (in the template I keep levels) and if level == 0 then I would\n * execute the same rendering just without [@section]\n *\n *\n * Todo: Think about how to do animation for the table case. Must also write unitest - due to\n * AribaLive aggressive schedule we are skipping them for now\n *\n */\n@Component({\n    selector: 'aw-outline-for, [awOutlineFor]',\n    templateUrl: 'outline-for.component.html',\n    styleUrls: ['outline-for.component.scss'],\n\n    animations: [\n        trigger('section', [\n            state('*', style({\n                'overflow-y': 'hidden',\n                'height': '*',\n                'opacity': '1'\n\n            })),\n            state('void', style({\n                'height': '0',\n                'opacity': '0',\n                'overflow-y': 'hidden'\n\n            })),\n            transition('* => void', animate('200ms ease-out')),\n            transition('void => *', animate('200ms ease-in'))\n        ]),\n    ]\n})\nexport class OutlineForComponent extends BaseComponent\n{\n\n    /**\n     * List of items that needs to be rendered. It does not have to in hierarchical order or we\n     * leave it up to the application to decide about the structure.\n     */\n    @Input()\n    list?: any[];\n\n\n    /**\n     * Tells the component not to render expansion control, in such case we expandAll as a\n     * default behavior\n     *\n     */\n    @Input()\n    showExpansionControl: boolean = true;\n\n    /**\n     * Custom method provided by application to retrieve list of children for current item. If\n     * children is undefined then, default 'children' field is used <currentItem>.children\n     */\n    @Input()\n    children: (value: any) => any[];\n\n    /**\n     *\n     * Option to conditionally render only items that are satisfying filter condition\n     *\n     */\n    @Input()\n    filterOut: (value: any) => boolean;\n\n\n    /**\n     * Opens all tree nodes.\n     *\n     */\n    @Input()\n    expandAll: boolean = false;\n\n\n    /**\n     *  Manages the state for the Outline component. Later on we can provide easier we how to\n     *  initialize and set selectionPaths and selectionStates from the application\n     *\n     */\n    @Input()\n    state: OutlineState;\n\n    /**\n     *\n     * Set indentation size to be used for each level\n     *\n     */\n    @Input()\n    indentationPerLevel: number = 25;\n\n\n    /**\n     * In case template is outside of the outlineFor\n     */\n    @Input()\n    externalTemplate: TemplateRef<any>;\n\n\n    /**\n     * Reference to current object using this component\n     */\n    @Input()\n    context: any;\n\n\n    @Input()\n    pushRootSectionOnNewLine: boolean = false;\n\n    /**\n     *\n     * Identifies current model mode.\n     *\n     * We recognize two modes:\n     *\n     * Free - Application needs to implement a children method to retrieve a list of children for\n     * each node and format is pretty much upt to the application\n     *\n     * Tree - this is more restrictive where we have concrete data structure\n     * interface that needs to be folled\n     *\n     * todo: instead of passing format binding try to look into the list to see what type so\n     * we dont make it mandatory\n     *\n     */\n    @Input()\n    format: ModelFormat = 'free';\n\n    /**\n     *\n     * Used when in selection mode to push current selected Item to the application\n     *\n     */\n    @Output()\n    onItemSelected: EventEmitter<any> = new EventEmitter();\n\n\n    /**\n     *\n     * This event is triggered by OutlineControl when node is expanded or collapsed\n     *\n     */\n    @Output()\n    onExpandChange: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * A template to use on application level to render individual items\n     */\n    @ContentChild('outline')\n    controlTemplate: TemplateRef<any>;\n\n\n    @ViewChild('renderedItem')\n    outlineItem: ElementRef;\n\n\n    /**\n     * Internals\n     *\n     * currentItem and parentItem are used to capture current processed item of ngFor. This is\n     * set by directive `InitNestingDirective`\n     *\n     * animationInProgress: used by animation engine to make sure we dont do any actions while\n     * animation is in the progress\n     *\n     * embedded: Indicates that we are using directive so it will not have default component\n     * wrapper\n     *\n     */\n    currentItem: any;\n    parentItem: any;\n    animationInProgress: boolean;\n    embedded: boolean = false;\n\n    /**\n     * Flag that tells us that component is fully rendered\n     *\n     */\n    viewInitialized: boolean = false;\n\n\n    constructor(public env: Environment,\n                private _viewContainer: ViewContainerRef,\n                private builder: AnimationBuilder,\n                private element: ElementRef)\n    {\n        super(env);\n\n    }\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n\n        if (isBlank(this.state)) {\n            this.state = new OutlineState();\n        }\n        if (isBlank(this.state.outlineFor)) {\n            this.state.outlineFor = this;\n        }\n\n        if (this.expandAll) {\n            this.showExpansionControl = false;\n        }\n\n        this.state.isExpandedAll = this.expandAll;\n\n        // in case we want to render content of tree outside of outlineFor\n        if (isPresent(this.externalTemplate)) {\n            this.controlTemplate = this.externalTemplate;\n        }\n\n        this.embedded = this.element.nativeElement.hasAttribute('awoutlinefor');\n\n        if (isBlank(this.context)) {\n            this.context = this;\n        }\n\n    }\n\n\n    ngDoCheck(): void\n    {\n        super.ngDoCheck();\n    }\n\n    isTreeModelFormat(): boolean\n    {\n        return this.format === 'tree';\n    }\n\n    /**\n     * Used by template and OutlineControl to identify which item is expanded and collapsed\n     *\n     */\n    isExpanded(item: any, currentLevel: number = -1): boolean\n    {\n        if (currentLevel === 0 && this.pushRootSectionOnNewLine) {\n            // always override/reset for root nodes\n            if (this.isTreeModelFormat()) {\n                (<OutlineNode>item).isExpanded = true;\n            }\n            return true;\n        }\n        return this.state.isExpanded(item);\n    }\n\n    /**\n     *\n     * Since we have currently two ways how to pass children items we need have this method to\n     * unify the way how we access it. If we pass `children` binding we use this instead, otherwise\n     * we expect current object to have `children` field\n     *\n     */\n    childrenForItem(item: any): any[]\n    {\n        if (this.isTreeModelFormat()) {\n            return (<OutlineNode>item).children || [];\n        } else {\n            return this.hasChildren(item) ? this.doGetChildren(item) : [];\n        }\n    }\n\n\n    /**\n     *\n     * Check if the current item has a children and needs to be rendered\n     *\n     */\n    hasChildren(item: any): boolean\n    {\n        if (this.isTreeModelFormat()) {\n            let children = (<OutlineNode>item).children;\n            return isPresent(children) && children.length > 0;\n\n        } else if (isBlank(this.children) && isBlank(item.children)) {\n            assert(false, 'Missing [children] method binding');\n        }\n\n        return this.doGetChildren(item).length > 0;\n\n    }\n\n    doGetChildren(item: any): any[]\n    {\n        return this.children.apply(this.context, [item]);\n    }\n\n\n    /**\n     *  Uses the `OutlineState` to toggle state of current selectionPath. The `selectionPath` is\n     *  put together inside `OutlineControl` where we iterate all the way to the root and add\n     *  each item to the `currentPath` array. This way we collect list of item representing current\n     *  current expansionPath.\n     *\n     *\n     */\n    toggleExpansion(): void\n    {\n        if (this.animationInProgress) {\n            // backup procedure in case onAnimationDone fails\n            setTimeout(() =>\n            {\n                if (this.animationInProgress) { // change only if its fails\n                    this.animationInProgress = false;\n                }\n            }, 200);\n            return;\n        }\n\n        if (!this.embedded) {\n            this.animationInProgress = true;\n        }\n\n        let currentItem = ListWrapper.last(this.state.currentPath);\n        this.state.toggleExpansion(this.state.currentPath, this.childrenForItem(currentItem));\n\n        if (this.embedded) {\n            // this.animateEmbeddedItem();\n        }\n    }\n\n\n    /**\n     * Angular anim. callback that sets back the flag to make sure we don't trigger animations\n     * when one is in progress.\n     *\n     */\n    onAnimationDone(event: Event)\n    {\n        this.animationInProgress = false;\n    }\n\n    /**\n     * Calculated indentation used to shift the nested section to the right or later on to the\n     * left when RTL is supported\n     *\n     *\n     */\n    indentation(currentLevel: number): number\n    {\n        if (this.pushRootSectionOnNewLine && currentLevel > 0) {\n            currentLevel -= 1;\n        }\n\n        return (currentLevel === 0 && this.pushRootSectionOnNewLine)\n            ? 0 : (this.indentationPerLevel * currentLevel);\n    }\n\n    /**\n     * Not all rows are visible by default, there can be a case where you dont want to render items\n     * using outline. e.g. Datatable with detail row.\n     */\n    isVisible(item: any): boolean\n    {\n        if (isPresent(this.filterOut)) {\n            return !this.filterOut(item);\n        }\n        return true;\n    }\n}\n\n/**\n *\n * Since we can not directly set `*ngTemplateOutlet` context variables to the typescript class we\n * use this directive to do the Job\n *\n */\n@Directive({\n    selector: '[initNesting]'\n})\nexport class InitNestingDirective implements OnInit\n{\n\n    @Input()\n    setLevel: number;\n\n\n    @Input()\n    setCurrrentItem: any;\n\n\n    @Input()\n    setParentItem: any;\n\n\n    constructor(private outline: OutlineForComponent)\n    {\n    }\n\n\n    ngOnInit(): void\n    {\n        if (isPresent(this.setLevel)) {\n            this.outline.state.currentLevel = this.setLevel;\n        }\n\n\n        if (isPresent(this.setCurrrentItem)) {\n            this.outline.currentItem = this.setCurrrentItem;\n\n            if (this.outline.isTreeModelFormat()) {\n                this.outline.currentItem['$$parentItem']\n                    = (<OutlineNode>this.setCurrrentItem).parent;\n            }\n        }\n\n        if (!this.outline.isTreeModelFormat() && isPresent(this.setParentItem)) {\n            this.outline.currentItem['$$parentItem'] = this.setParentItem;\n        }\n    }\n\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    Component,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    SkipSelf\n} from '@angular/core';\nimport {assert, Environment, isBlank, isPresent} from '@aribaui/core';\nimport {BaseComponent} from '../../../core/base.component';\nimport {OutlineForComponent} from '../outline-for.component';\nimport {OutlineState} from '../outline-state';\n\n\n/**\n * OutlineControlComponent renders the indentation, arrow, and text for a node in an outline.\n * It should be used either in the body of an OutlineFor component, or inside datatable\n *\n *\n * ##Usage inside body:\n *\n *  Here you can see that we need to wrap out content inside ng-template which will push us\n *  give us current item item and then we can place OutlineControlComponent to control\n *  the tree.\n *\n * ```\n *  <aw-outline-for2 #ooo [list]=\"list\" [hasChildren]=\"hasChildren\">\n *\n *      <ng-template #outline let-item>\n *          <div class=\"my-section\">\n *              <div class=\"outline\">\n *                  <aw-outline-control>\n *                      {{item?.content}}\n *                  </aw-outline-control>\n *              </div>*\n *          </div>\n *      </ng-template>\n *  </aw-outline-for2>\n *\n *\n * ```\n *\n *\n *\n *\n */\n@Component({\n    selector: 'aw-outline-control',\n    templateUrl: 'outline-control.component.html',\n    styleUrls: ['outline-control.component.scss'],\n})\nexport class OutlineControlComponent extends BaseComponent\n{\n\n    /**\n     *\n     *  If TRUE it changes the behavior of the outline node text which click is triggered\n     *  it selects the item and broadcast the `onItemSelected` event\n     *\n     */\n    @Input()\n    allowSelection: boolean = false;\n\n    @Input()\n    allowEdit: boolean = false;\n\n    /**\n     *\n     * Triggers action when outline item is expanded\n     *\n     */\n    @Output()\n    action: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Current item used for this `OutlineControl`\n     *\n     */\n    item: any;\n\n    /**\n     * Calculated indentation used to shift the nested section to the left. This is used for\n     * embedded mode e.g. tree table where we cannot indent parent\n     */\n    indentation: number;\n\n\n    isRootItem: boolean = false;\n\n    constructor(public env: Environment,\n                @Optional() @Inject(forwardRef(() => OutlineState))\n                private outlineState: OutlineState,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => OutlineControlComponent))\n                private parentControl: OutlineControlComponent,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => OutlineForComponent))\n                public outlineFor: OutlineForComponent)\n    {\n        super(env);\n\n    }\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n\n        this.prepareControl();\n    }\n\n\n    /**\n     *\n     * We dont show expansion icons when there no children\n     *\n     */\n    hasExpansionControl(): boolean\n    {\n        return this.outlineFor.hasChildren(this.item) && this.outlineFor.showExpansionControl;\n    }\n\n\n    isSelected(): boolean\n    {\n        return this.outlineFor.state.selectedItem === this.item;\n    }\n\n    calculateStyleClass(): string\n    {\n        if (!this.hasExpansionControl() ||\n            (this.outlineFor.pushRootSectionOnNewLine && isBlank(this.item.$$parentItem)))\n        {\n            return '';\n        }\n\n        if (this.outlineFor.embedded) {\n            return this.outlineFor.isExpanded(this.item) ? 'icon-slim-arrow-down'\n                : 'icon-slim-arrow-right';\n        } else {\n            return this.outlineFor.isExpanded(this.item)\n                ? 'icon-slim-arrow-right outline-icon-expanded' : 'icon-slim-arrow-right';\n        }\n    }\n\n    /**\n     * Collapses and expands current node\n     *\n     */\n    toggleExpansion(event: any): void\n    {\n        this.outlineFor.state.currentPath = [];\n        let currentPath = this.item;\n\n        while (isPresent(currentPath)) {\n            this.outlineFor.state.currentPath.unshift(currentPath);\n            currentPath = currentPath.$$parentItem;\n        }\n\n        this.outlineFor.toggleExpansion();\n        let payload = {\n            item: this.item,\n            expanded: this.outlineFor.state.isExpanded(this.item)\n        };\n        this.action.emit(payload);\n        this.outlineFor.onExpandChange.emit(payload);\n\n        event.stopPropagation();\n    }\n\n    select(): void\n    {\n        this.outlineFor.state.selectedItem = this.item;\n        this.outlineFor.onItemSelected.emit(this.item);\n    }\n\n    private prepareControl(): void\n    {\n        if (isBlank(this.outlineFor) && isPresent(this.outlineState)) {\n            this.outlineFor = this.outlineState.outlineFor;\n        }\n\n        assert(isPresent(this.outlineFor), 'Missing outlineFor component');\n        if (this.outlineFor.embedded) {\n            let level = this.outlineFor.state.currentLevel;\n            if (this.outlineFor.pushRootSectionOnNewLine && level > 0) {\n                level -= 1;\n            }\n\n            this.indentation = (this.outlineFor.indentationPerLevel * level);\n        }\n        this.item = this.outlineFor.currentItem;\n        this.isRootItem = isBlank(this.item.$$parentItem);\n    }\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {InitNestingDirective, OutlineForComponent} from './outline-for.component';\nimport {AWCoreComponentModule} from '../../core/core.module';\nimport {OutlineControlComponent} from './outline-control/outline-control.component';\n\n@NgModule({\n    declarations: [\n        OutlineForComponent,\n        OutlineControlComponent,\n        InitNestingDirective\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        AWCoreComponentModule\n    ],\n    exports: [\n        OutlineForComponent,\n        OutlineControlComponent,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    providers: []\n})\nexport class AWOutlineForModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, forwardRef, Inject, Input, Optional, SkipSelf} from '@angular/core';\nimport {NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Environment} from '@aribaui/core';\nimport {BaseFormComponent} from '../../core/base-form.component';\nimport {FormRowComponent} from '../../layouts/form-table/form-row/form-row.component';\nimport {distinctUntilChanged} from 'rxjs/operators';\n\n\n/**\n * Renders html text area component\n\n *\n * ### Example\n *\n * ```typescript\n *\n *      @Component({\n *          selector: 'myNote' ,\n *          template: '<aw-text-area [value]=\"inputValue\" [autoResize]=\"autoResize\" >\n *              </aw-text-area>'\n *      })\n *      export class MyNoteComponent\n *      {\n *          inputValue: string = 'Some really long text';\n *          autoResize: false;\n *      }\n *\n * ```\n *  Note: if you are using this outside of FormTable please provide your own FormGroup\n */\n\nexport const TEXTAREA_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TextAreaComponent),\n    multi: true\n};\n\n\n@Component({\n    selector: 'aw-text-area',\n    templateUrl: 'text-area.component.html',\n    styleUrls: ['text-area.component.scss'],\n\n    providers: [\n        TEXTAREA_CONTROL_VALUE_ACCESSOR,\n        {provide: BaseFormComponent, useExisting: forwardRef(() => TextAreaComponent)}\n    ]\n})\nexport class TextAreaComponent extends BaseFormComponent\n{\n    /**\n     *\n     * A value used to store and read user input\n     *\n     */\n    @Input()\n    value: any = '';\n\n\n    /**\n     * Spefifies visible number of lines\n     */\n    @Input()\n    rows: number = 2;\n\n\n    /**\n     * Specifies visible width\n     */\n    @Input()\n    columns: number = 20;\n\n\n    /**\n     * when this option is TRUE and user starts typing it will maximize textarea's width and height\n     */\n    @Input()\n    autoResize: boolean = true;\n\n    constructor(public env: Environment,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => FormRowComponent))\n                protected parentContainer: BaseFormComponent)\n    {\n        super(env, parentContainer);\n    }\n\n    ngOnInit()\n    {\n\n        super.ngOnInit();\n        super.registerFormControl(this.value);\n\n        this.formControl.valueChanges.pipe(\n            distinctUntilChanged()\n        ).subscribe(val =>\n        {\n            this.value = val;\n            this.onModelChanged(this.value);\n        });\n    }\n\n\n    /**\n     * Internal. Please see ControlValueAccessor\n     *\n     */\n    writeValue(value: any)\n    {\n        if (value !== this.value) {\n            this.value = value;\n            this.formControl.setValue(value, {onlySelf: true});\n        }\n\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {InputTextareaModule} from 'primeng/primeng';\nimport {TextAreaComponent} from './text-area.component';\nimport {AWStringFieldModule} from '../string/string.module';\n\n@NgModule({\n    declarations: [\n        TextAreaComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        InputTextareaModule,\n        AWStringFieldModule\n    ],\n\n    entryComponents: [\n        TextAreaComponent\n    ],\n    exports: [\n        TextAreaComponent,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    providers: []\n})\nexport class AWTextAreaModule\n{\n}\n\n\n","import {Component, ElementRef, Input, TemplateRef} from '@angular/core';\nimport {Environment, isPresent} from '@aribaui/core';\nimport {BaseComponent} from '../../core/base.component';\n\n/**\n *\n * Page-Notification component that implements a notification system for the user regarding\n * the current object he's working on. Typical notification are:\n *      Success - saved.\n *      Warning - Sourcing request requires 3 suppliers.\n *      Error   - cannot connect to server, check internet connection.\n *\n *\n *\n * Usage 1:  As part of page wrapper.\n *\n *  @Component({\n *    selector: 'MyPage' ,\n *    template: `\n *       <aw-object-page-wrapper\n *                        [title]=\"MyPage\"\n *                        [objectType]=\"MyType\"\n *                        [notification]=\"pageNotification\">\n *             page content\n *          `\n *       </aw-object-pager-wrapper>\n *    })\n *    export class MyPage\n *    {\n *\n *        pageNotification: PageNotification = new PageNotification(\"warn\",\n *                              \"Policy Warning\", \"This request requires 3 bids.\");\n *\n *        constructor ()\n *        {\n *        }\n *    }\n *\n * Usage 2: directly into the page.\n *\n *  @Component({\n *    selector: 'registration' ,\n *    template: `\n *      <aw-header></aw-header>\n *        Page Header\n *\n *        <ng-template [ngIf]=\"hasNotifications()\">\n *          <div class=\"ui-g-12 u-nopadding\">\n *            <aw-page-notification [notification]=\"notification\"></aw-page-notification>\n *          </div>\n *        </ng-template>\n *\n *      <aw-footer></aw-footer>\n *    `\n *    })\n *    export class MyPage\n *    {\n *\n *        notification: PageNotification = new PageNotification(\"warning\",\n *                              \"Policy Warning\", \"This request requires 3 bids.\");\n *\n *        constructor ()\n *        {\n *        }\n *    }\n *\n */\n@Component({\n    selector: 'aw-page-notification',\n    templateUrl: 'page-notification.component.html',\n    styleUrls: ['page-notification.component.scss']\n})\nexport class PageNotificationComponent extends BaseComponent\n{\n\n    /**\n     * Any info, Error, or Warn for this page.\n     */\n    @Input()\n    notification: PageNotification;\n\n    constructor(protected element: ElementRef, public env: Environment)\n    {\n        super(env);\n    }\n\n    notificationClass(): string\n    {\n        return `notification-${this.notification.type}`;\n    }\n\n    notificationIcon(): string\n    {\n        return `ariba-icon icon-${this.notification.type}`;\n    }\n\n}\n\n/**\n * Page Notification are messages for this page only. It displays in the center of the page\n * right under page title. Typical page notifications are 'save confirmation',\n * 'error during submit', warnings of field requirements, etc.\n */\nexport class PageNotification\n{\n    constructor(public type: PageNotificationType, public title: string,\n                public description: string, public contentTmpl?: TemplateRef<any>)\n    {\n    }\n\n    hasTemplate(): boolean\n    {\n        return isPresent(this.contentTmpl);\n    }\n\n    toString(): string\n    {\n        return this.type + ', title: ' + this.title + ', description:  ' + this.description;\n    }\n}\n\nexport type PageNotificationType = 'success' | 'info' | 'warning' | 'error';\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {PageNotificationComponent} from './page-notification.component';\n\n@NgModule({\n    declarations: [\n        PageNotificationComponent\n\n    ],\n    imports: [\n        CommonModule\n    ],\n    entryComponents: [\n        PageNotificationComponent\n    ],\n    exports: [\n        PageNotificationComponent\n    ],\n    providers: []\n})\nexport class AWPageNotificationModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\n/**\n * Represents an event triggered when a page has been initialized.\n *\n */\nexport class PageInitialized\n{\n    constructor(public title: string)\n    {\n    }\n\n    toString(): string\n    {\n        return `PageInitializied(title: ${this.title})`;\n    }\n}\n\n/**\n * Represents an event triggered when a page has been destroyed.\n *\n */\nexport class PageDestroyed\n{\n    constructor(public title: string)\n    {\n    }\n\n    toString(): string\n    {\n        return `PageDestroyed(title: ${this.title})`;\n    }\n}\n\nexport type PageEvent = PageInitialized | PageDestroyed;\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {PageDestroyed, PageEvent, PageInitialized} from './page-events';\n\n/**\n * Page LifeCycle Service monitors all page initialization and destructions.\n * The purpose of this service is to help the application monitor page lifecycle, subscribe\n * to lifecycle events and execute actions such as user analytics.\n *\n * Usage:\n *\n *    1.  Inject PageLifeCycleService into your constructor\n *\n *    constructor(pageLifecycle:PageLifeCycleService) {\n *        pageLifecycle.pageEvents.subscribe(event:Event => {\n *            if(event instanceof PageInitialized) {\n *            }\n *            // PageDestroyed\n *\n *        });\n *     }\n */\n@Injectable()\nexport class PageLifeCycleService\n{\n\n    /**\n     * Page event queue when all page lifecycle events: init, destroy are emitted.\n     * Listeners can subscribe to these events.\n     */\n    public pageEvents: Subject<PageEvent> = new Subject<PageEvent>();\n\n    /**\n     *\n     */\n    constructor()\n    {\n\n    }\n\n    /**\n     * Called when page is initialized.\n     * @param pageTitle\n     */\n    public onPageInit(pageTitle: string): void\n    {\n        this.pageEvents.next(new PageInitialized(pageTitle));\n    }\n\n    /**\n     * Call when page has been destroyed\n     * @param title\n     */\n    public onPageDestroy(pageTitle: string): void\n    {\n        this.pageEvents.next(new PageDestroyed(pageTitle));\n    }\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Environment} from '@aribaui/core';\nimport {ComponentRegistry} from '../../core/component-registry.service';\nimport {PageLifeCycleService} from './page-lifecycle.service';\nimport {BaseComponent} from '../../core/base.component';\n\n/**\n * Represents the different page types in an application.\n */\nexport enum PageType {\n    Init,         // Init Page type\n    Login,        // Login Page\n    Object,       // Object detail page\n    List,         // List Page\n    MasterDetail, // MasterDetail\n    Dashboard,    // Dashboard page\n    Modal         // Modal page, it can be configured to be a popup, or standalone page.\n}\n\n/** Placeholder now. The Error Manager handles all the errors on the page.\n *  It is initialized for every page. Page errors, warning, info goes through\n *  the error Manager and the result message is displayed on the page notification area.\n */\nexport class ErrorManager\n{\n\n}\n\n/**\n *  Page wrapper is the base class for all pages. The idea is that there are different page types\n *  in an Application. A List Page renders a list of objects, ex: customers, requests, PO.  And\n *  a object page will render one object in detail.\n *\n *  They share common attributes such as page type and page id.\n *\n *  Ariba Page have a life cycle. When page starts up, it's initialized. And when the page is\n *  destroyed, it'll be complete.\n */\nexport abstract class PageWrapper extends BaseComponent\n{\n    /**\n     * What type of page this is.\n     *\n     */\n    protected pageType: PageType = PageType.Init;\n\n    /**\n     * Page Id. Used when pages are stored in map.\n     */\n    id: string;\n\n    /**\n     * Handling all the error on a page.\n     */\n    public errorManager: ErrorManager;\n\n    /**\n     * Indicate that this page wrapper has been wrapped by another page wrapper.\n     * In this case, we wouldn't display header and footer and other page wrapper components\n     */\n    alreadyInPageWrapper: boolean;\n\n\n    constructor(public env: Environment, pageType: PageType,\n                protected componentRegistry: ComponentRegistry,\n                protected pageLifecycleService: PageLifeCycleService)\n    {\n        super(env);\n        this.pageType = pageType;\n    }\n\n    /**\n     * All subclass needs to generated a page identifier.\n     * It follows the following pattern:\n     *    type_title_id\n     *\n     *    RFQ_SourcingRequest_123\n     */\n    abstract generatePageId(): string;\n\n    /**\n     * Get the unique Id for this page.\n     *\n     */\n    public getId(): string\n    {\n        if (this.id) {\n            return this.id;\n        }\n\n        this.id = this.generatePageId();\n    }\n\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, ElementRef, Input} from '@angular/core';\nimport {Environment} from '@aribaui/core';\nimport {PageMenuItem} from '../page-header/page-header.component';\nimport {BaseComponent} from '../../../core/base.component';\n\n/**\n *  This is a temporary implementation for the page header component.\n *  When the real implementation of side menu is done, PageHeaderComponent will\n *  be swaped to use it.\n *\n */\n@Component({\n    selector: 'aw-sidenav',\n    templateUrl: 'sidenav.component.html',\n    styleUrls: ['sidenav.component.scss']\n})\nexport class SidenavComponent extends BaseComponent\n{\n    /**\n     * list of menu items\n     */\n    @Input()\n    items: PageMenuItem[];\n\n    /**\n     * displays the back link that navigates user to the previous page when clicked.\n     */\n    @Input()\n    show: boolean;\n\n    constructor(protected element: ElementRef, public env: Environment)\n    {\n        super(env);\n    }\n\n    getSidenavClass(): string\n    {\n        // Only show if I have items\n        return (this.show && this.items) ? 'sidenav sidenav-active' : 'sidenav';\n    }\n\n    open(): void\n    {\n        this.show = true;\n    }\n\n    close(): void\n    {\n        this.show = false;\n    }\n\n    toggle(): void\n    {\n        this.show = !this.show;\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, ElementRef, Input, ViewChild} from '@angular/core';\nimport {Environment, isPresent, RoutingService} from '@aribaui/core';\nimport {SidenavComponent} from '../sidenav/sidenav.component';\nimport {BaseComponent} from '../../../core/base.component';\n\n/**\n *\n * Header component that implements consistent styling, behavior for an Ariba page.\n * Header includes a menu, user profile, and alerts.\n *\n *  @Component({\n *    selector: 'registration' ,\n *    template: `\n *                <aw-page-header [showBackAction]=\"true\" userName=\"Chad Noll\"\n *                                 [menuItems]=\"menuItems\" [notifications]=\"userNotifications\">\n *                     <div class=\"page-header-center\">\n *                           <a class=\"navbar-brand\" tabindex=\"0\" href=\"/\">\n *                               <img class=\"navbar-logo\" src=\"./images/SAP_Ariba_DB.png\"\n *                                   alt=\"Go to homepage\" data-pin-nopin=\"true\">\n *                          </a>\n *                     </div>\n *                </aw-page-header>\n *\n *    `\n *    })\n *    export class MyPage\n *    {\n *      menuItems: PageMenuItem[] = [new PageMenuItem('icon-home', 'Home', '/play/'),\n *                                  new PageMenuItem('icon-expense-report', 'Reports',\n *                                                     '/play/pageheader'),\n *                                  new PageMenuItem('icon-sales-order', 'Purchase Order',\n *                                                       '/play/pageheader'),\n *                                  new PageMenuItem('icon-account', 'Accounts',\n *                                                     '/play/pageheader')];\n *\n *     userNotifications: UserNotification[] = [\n *       new UserNotification('icon-expense-report', 'Expense report EXP453 has been approved.',\n *                             '/play/'),\n *         new UserNotification('icon-sales-order', 'Sales Order SO1234 has been created.',\n *                             '/play/'),\n *           new UserNotification('icon-account', 'Supplier account SA1234 has been updated.',\n *                               '/play/')\n *        ];\n *\n *        constructor ()\n *        {\n *        }\n *\n *    }\n */\n@Component({\n    selector: 'aw-page-header',\n    templateUrl: 'page-header.component.html',\n    styleUrls: ['page-header.component.scss']\n})\nexport class PageHeaderComponent extends BaseComponent\n{\n\n    /**\n     * list of menu entries. The page menu icon will only display when this list is not empty.\n     */\n    @Input()\n    menuItems: PageMenuItem[];\n\n    /**\n     * list of user notification\n     */\n    @Input()\n    notifications: UserNotification[];\n\n    /**\n     * Should the user notification icon be hidden. Default it to show the icon even\n     * if there's no notifications.\n     *\n     */\n    @Input()\n    hideNotification: boolean = false;\n\n    /**\n     * displays the back link that navigates user to the previous page when clicked.\n     */\n    @Input()\n    showBackAction: boolean = false;\n\n    /**\n     * Current logged in user name.\n     */\n    @Input()\n    userName: string;\n\n    /**\n     * The sidemenu\n     */\n    @ViewChild('sidemenu')\n    sidenav: SidenavComponent;\n\n    showNotificationPanel: boolean = false;\n\n\n    constructor(protected element: ElementRef, public env: Environment,\n                private routing: RoutingService)\n    {\n        super(env);\n\n    }\n\n    backAction(): void\n    {\n        this.routing.goBack();\n    }\n\n    /**\n     * Do i have any menu items.\n     *\n     */\n    hasMenuItems(): boolean\n    {\n        return (this.menuItems && this.menuItems.length > 0);\n    }\n\n    /**\n     * Toggle the side navigation menu.\n     */\n    showHideMenu(): void\n    {\n        this.sidenav.toggle();\n    }\n\n    /**\n     * Do I have any notifications.\n     *\n     */\n    hasNotifications(): boolean\n    {\n        return isPresent(this.notifications) && this.notifications.length > 0;\n    }\n\n    /**\n     * toggling wheather notification panel is displayed or not.\n     */\n    toggleNotificationPanel(): void\n    {\n        this.showNotificationPanel = !this.showNotificationPanel;\n    }\n}\n\n/**\n * PageMenuItem represents an item in the page menu structure.\n */\nexport class PageMenuItem\n{\n    /**\n     * @param icon    - Icon of this menu item.\n     * @param label   - label of this item.\n     * @param link    - link to the destination when user clicks on it.\n     */\n    constructor(public icon: string, public label: string,\n                public link: string)\n    {\n    }\n\n    toString(): string\n    {\n        return `PageMenuItem: (label, ${this.label})`;\n    }\n}\n\n/**\n * notification for the current logged in user.\n * Ex:  PR2049 has been approved.\n *      Order PO518 received.\n */\nexport class UserNotification\n{\n\n    /**\n     * @param icon   - alert notification icon\n     * @param label  - alert notification label\n     * @param link   - link\n     */\n    constructor(public icon: string, public label: string,\n                public link: string)\n    {\n\n    }\n\n    toString(): string\n    {\n        return `PageUserNotification: (label, ${this.label})`;\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {AfterContentInit, Component, ContentChild, ElementRef} from '@angular/core';\nimport {Environment, isPresent} from '@aribaui/core';\nimport {BaseComponent} from '../../../core/base.component';\n\n/**\n * Footer component that implements consistent styling, behavior.\n * This footer component self contained.\n *\n *  @Component({\n *    selector: 'registration' ,\n *    template: `\n *\n *          <aw-page-footer>\n *               <div class=\"page-footer-logo\">\n *                   <img src=\"images/ariba_logo_white_bkgd.png\">\n *               </div>\n *               <div class=\"page-footer-user-info\">\n *                   Chad Noll (cnoll) last visit {{last_visited | date:'MM/dd/yyyy h:mma' }}\n  *                   | Buyer Organization\n *               </div>\n *               <span class=\"page-footer-copyright\" #copyright>\n *                   <p>Â© 2020â2028 The Future, Inc. All rights reserved</p>\n *               </span>\n *           </aw-page-footer>\n *    `\n *    })\n *    export class MyPage\n *    {\n *        constructor ()\n *        {\n *        }\n *\n *    }\n */\n@Component({\n    selector: 'aw-page-footer',\n    templateUrl: 'page-footer.component.html',\n    styleUrls: ['page-footer.component.scss']\n})\nexport class PageFooterComponent extends BaseComponent implements AfterContentInit\n{\n\n    /**\n     * copyright content\n     */\n    @ContentChild('copyright') copyright: any;\n\n    /**\n     * show default copyright. If copyright is passed in, then show the passed in one.\n     */\n    showDefaultCopyright: boolean = true;\n\n    constructor(protected element: ElementRef, public env: Environment)\n    {\n        super(env);\n    }\n\n\n    ngOnInit(): void\n    {\n        super.ngOnInit();\n    }\n\n    ngAfterContentInit()\n    {\n        this.showDefaultCopyright = !isPresent(this.copyright);\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    Component,\n    ContentChild,\n    ElementRef,\n    Input,\n    OnDestroy,\n    SimpleChanges,\n    TemplateRef\n} from '@angular/core';\nimport {Environment, isPresent} from '@aribaui/core';\nimport {ComponentRegistry} from '../../../core/component-registry.service';\nimport {PageType, PageWrapper} from '../page-wrapper';\nimport {PageNotification} from '../../page-notification/page-notification.component';\nimport {PageLifeCycleService} from '../page-lifecycle.service';\nimport {PageHeaderComponent} from '../page-header/page-header.component';\nimport {PageFooterComponent} from '../page-footer/page-footer.component';\n\n/**\n *\n * Object Page Wrapper Component renders any object instance in detail. It has a uniform layout,\n * Header, Page title, Page notification, actions, content, and Footer.\n *\n *\n *  Usage:\n *\n *  @Component({\n *    selector: 'RFXPage' ,\n *    template: `\n *       <aw-object-page-wrapper\n *                        [title]=\"rfxEntity.headerInfo.title\"\n *                        [objectType]=\"rfxEntity.headerInfo.eventTypeString\"\n *                        [notification]=\"pageNotification\">\n *\n *\n *           <aw-page-actions>\n *               <aw-button [type]=\"'submit'\" [name]=\"'edit'\" [value]=\"edit\" [style]=\"'primary'\">\n *                   Edit\n *                </aw-button>\n *               <aw-button [type]=\"'button'\" [name]=\"'cancel'\" [value]=\"cancel\"\n *                                                         [style]=\"'secondary'\">\n *                  Cancel\n *               </aw-button>\n *           </aw-page-actions>\n *\n *           <aw-page-content>\n *             <aw-section title=\"Sourcing request info\" (onStateChanged)=\"onStateChange($event)\">\n *\n *                   <m-context [object]=\"rfxEntity.headerInfo\"\n *                              [operation]=\"this.editabilityState.headerInfoOp\"\n *                              layout=\"Inspect\"\n *                              uiGroup=\"HeaderGeneral\"\n *                   >\n *                       <m-include-component></m-include-component>\n *                   </m-context>\n *\n *             </aw-section>\n *           </aw-page-content>\n *       </aw-object-page-wrapper>\n *    `\n *    })\n *    export class RFXPage\n *    {\n *       // To keep track what section is editable and which read only\n *       editabilityState: EditabilityState;\n *\n *       // Current RFX event\n *       rfxEntity: RfxEventEntity;\n *\n *       // Notifications\n *       notification: PageNotification = new PageNotification(\"warn\",\n *                              \"Policy Warning\", \"This request requires 3 bids.\");\n *\n *        constructor ()\n *        {\n *        }\n *\n *    }\n */\n@Component({\n    selector: 'aw-object-page-wrapper',\n    templateUrl: 'object-page-wrapper.component.html',\n    styleUrls: ['object-page-wrapper.component.scss']\n})\nexport class ObjectPageWrapperComponent extends PageWrapper implements OnDestroy\n{\n\n    /**\n     * The title of this page\n     */\n    @Input()\n    title: string;\n\n    /**\n     * The type of the object being rendered - Event, Workspace, contract, etc.\n     */\n    @Input()\n    objectType: string;\n\n    /**\n     * label for the object status.\n     */\n    @Input()\n    objectStatusLabel: string;\n\n    /**\n     * This object's status. For example, draft, pending selection,\n     */\n    @Input()\n    objectStatus: string;\n\n    /**\n     * Optional. Some object has states. For example: RFxObject has Resolve, Review, Get Quote.\n     * Object states will appear on the page when they are present.\n     */\n    @Input()\n    objectStates: string[];\n\n\n    /**\n     * When Stepper is used this identifies current set state\n     */\n    @Input()\n    currentState: string;\n\n\n    /**\n     * Header is a component type to be rendered as a page Header.\n     *\n     * The 'default' value is the component/widget/HeaderComponent\n     */\n    @Input()\n    header: any;\n\n    /**\n     * Set true if page should not include any header. Need to set to true even no header\n     * object is passed in. Otherwise, a default Header component will be added.\n     */\n    @Input()\n    hideHeader: boolean = false;\n\n    /**\n     * Footer Component is the page footer.\n     * can be overriden but the default value is compoenent/widget/FooterComponent.\n     */\n    @Input()\n    footer: any;\n\n    /**\n     * Set true if page should not include any footer. Need to set to true even no footer\n     * object is passed in. Otherwise, a default Footer component will be added.\n     */\n    @Input()\n    hideFooter: boolean = false;\n\n    /**\n     * The positioning of the page actions (page buttons)\n     *   'top' :    page buttons are placed at the top of the page, below the title, to the right.\n     *   'bottom' : page buttons are placed at the bottom of the page, above the footer.\n     *   'both'   : page buttons are placed at both top and bottom.\n     *\n     */\n    @Input()\n    pageActionPosition: string = 'top';\n\n\n    /**\n     * This flag is driven by pageActionPosition. The default position is top.\n     * Value is true for both 'top' and 'both' of pageActionPosition.\n     */\n    hasTopPageActions: boolean = true;\n\n    /**\n     * This flag is driven by pageAction position.\n     * Value is true for both 'bottom' and 'both' of pageActionPosition.\n     */\n    hasBottomPageActions: boolean;\n\n\n    /**\n     * Queries a p template if any\n     */\n    @ContentChild('pageActions')\n    actionsTemplate: TemplateRef<any>;\n\n    /**\n     * Any Success, Info, Error, or Warn for this page.\n     */\n    @Input()\n    notifications: PageNotification[];\n\n\n    objectStateIndex: number = 0;\n\n    constructor(protected element: ElementRef, public env: Environment,\n                componentRegistry: ComponentRegistry, pageLifecycleService: PageLifeCycleService)\n    {\n        super(env, PageType.Object, componentRegistry, pageLifecycleService);\n\n        // Setting Default header component\n        this.header = PageHeaderComponent;\n        this.footer = PageFooterComponent;\n    }\n\n    /**\n     * Generate a unique Id for this object.\n     *\n     */\n    generatePageId(): string\n    {\n        return this.objectType + '_' + this.title + (this.id) ? ('_' + this.id) : '';\n    }\n\n    /**\n     * Does my page have page notification?\n     *\n     */\n    hasNotifications(): boolean\n    {\n        return (this.notifications && this.notifications.length > 0);\n    }\n\n    hasObjectStates(): boolean\n    {\n        return isPresent(this.objectStates);\n    }\n\n    /**\n     * Initialize my local components\n     */\n    ngOnInit()\n    {\n        super.ngOnInit();\n\n        // New Component types that are used in c-include-component\n        if (this.header) {\n            this.componentRegistry.registerType(this.header.name, this.header);\n        }\n\n        // New Component types that are used in c-include-component\n        if (this.footer) {\n            this.componentRegistry.registerType(this.footer.name, this.footer);\n        }\n\n        /** notify subscribers of the page lifecycle service  */\n        this.pageLifecycleService.onPageInit(this.title);\n\n        // Setting the page action position.\n        if (this.pageActionPosition === 'bottom') {\n            this.hasTopPageActions = false;\n            this.hasBottomPageActions = true;\n\n        } else if (this.pageActionPosition === 'both') {\n\n            this.hasTopPageActions = true;\n            this.hasBottomPageActions = true;\n        }\n\n        if (isPresent(this.objectStates) && this.objectStates.length > 1\n            && isPresent(this.currentState)) {\n\n            this.objectStateIndex = this.objectStates.indexOf(this.currentState);\n        }\n    }\n\n\n    ngOnChanges(changes: SimpleChanges): void\n    {\n        super.ngOnChanges(changes);\n\n        if (isPresent(changes['currentState']) &&\n            changes['currentState'].currentValue !== changes['currentState'].previousValue) {\n            // we dont need to check if objectStates exists\n            this.objectStateIndex = this.objectStates.indexOf(this.currentState);\n        }\n\n    }\n\n    ngOnDestroy()\n    {\n        this.pageLifecycleService.onPageDestroy(this.title);\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, ElementRef} from '@angular/core';\nimport {Environment} from '@aribaui/core';\nimport {BaseComponent} from '../../../core/base.component';\n\n/**\n * Page actions is a wrapper for all page actions, buttons, links, menus that interacts it with the\n * page. The wrapper use the ability to position it as needed.\n */\n@Component({\n    selector: 'aw-page-actions',\n    templateUrl: 'page-actions.component.html',\n    styleUrls: ['page-actions.component.scss']\n})\nexport class PageActionsComponent extends BaseComponent\n{\n\n    constructor(protected element: ElementRef, public env: Environment)\n    {\n        super(env);\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, ElementRef} from '@angular/core';\nimport {Environment} from '@aribaui/core';\nimport {BaseComponent} from '../../../core/base.component';\n\n/**\n * Page content is a wrapper for page content.\n * Currently, it's pretty bare, but as we add more interactions on the page, like a side bar,\n * the page content area will likely get affected.\n */\n@Component({\n    selector: 'aw-page-content',\n    template: '<ng-content></ng-content>',\n    styles: [':host {width: 100%; padding: 0 .5em;}']\n})\nexport class PageContentComponent extends BaseComponent\n{\n\n    constructor(protected element: ElementRef, public env: Environment)\n    {\n        super(env);\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, Input} from '@angular/core';\nimport {Environment, isPresent} from '@aribaui/core';\nimport {BaseComponent} from '../../core/base.component';\n\n\nconst STEPPER_COMPLETED_STEP_COLOR = '#58b957';\nconst STEPPER_CURRENT_STEP_COLOR = '#0076CB';\nconst STEPPER_REMAINING_STEP_COLOR = '#D7D7D7';\n\n/**\n * Stepper component displays a list of steps for user to follow. It can be used as a checklist\n * to indicate completed, current and remaining items. It could be also be used to indicate\n * the state of an document, created, submitted, approved, etc...\n *\n *\n * Usage:\n *   1.   Use the component inside your template. provide a list of steps and the current step.\n *\n *          @Component({\n *                selector: 'aw-page' ,\n *                           template: `\n *                <aw-stepper [steps]=\"steps\" [currentStep]=\"currentStep\"></aw-stepper>\n *\n *                  `\n *         export class MyPageComponent implements OnInit {\n *\n *                     steps: string[] = ['Monitor', 'Add Supplier', 'Get Quote'];\n *                     currentStep: number = 1;\n *\n *                     constructor(private modalService: ModalService) {\n *                          super();\n *                       }\n *                     ngOnInit() { }\n *       }\n *\n *   2.  Override the default colors.\n *\n *         @Component({\n *                selector: 'aw-page' ,\n *                           template: `\n *                            <aw-stepper [steps]=\"steps\" [stepColorCurrent]=\"'#ff9900'\"\n *                                        [stepColorRemaining]=\"'#CC0000'\"\n *                                        [stepColorCompleted]=\"'#97a822'\"\n *                                        [currentStep]=\"currentStep\">\n *                            </aw-stepper>\n *                  `\n */\n@Component({\n    selector: 'aw-stepper',\n    templateUrl: 'stepper.component.html',\n    styleUrls: ['stepper.component.scss']\n})\nexport class StepperComponent extends BaseComponent\n{\n    /**\n     * Required\n     * Array of steps. Order of the steps should be in array order.\n     */\n    @Input()\n    steps: string[];\n\n\n    /**\n     * specify the colors associated with steps above. The number of colors\n     * and number of steps must match.\n     * Optional:, if empty, default colors or colors from stepColor inputs will be used.\n     */\n    @Input()\n    colors: string[];\n\n    /**\n     * Local variable to indicate whether to use the colors array or not.\n     */\n    bUseColorArray: boolean = false;\n\n    /**\n     * Optional Input for caller to override the color of completed step.\n     */\n    @Input()\n    stepColorCompleted: string;\n\n    /**\n     * Optional Input for caller to override the color of current step.\n     */\n    @Input()\n    stepColorCurrent: string;\n\n    /**\n     * Optional Input for caller to override the color of remaining step.\n     */\n    @Input()\n    stepColorRemaining: string;\n\n    /**\n     * The current step that's on. If not provided default to the first step.\n     */\n    @Input()\n    currentStep: number = 0;\n\n    /**\n     * calculated the width of connectors between steps. The calculations is so\n     * that the steps are spread out evenly.\n     */\n    connectorWidth: any;\n\n    constructor(public env: Environment)\n    {\n        super(env);\n        // Initial color for the different stages of steps.\n        this.stepColorCompleted = STEPPER_COMPLETED_STEP_COLOR;\n        this.stepColorCurrent = STEPPER_CURRENT_STEP_COLOR;\n        this.stepColorRemaining = STEPPER_REMAINING_STEP_COLOR;\n    }\n\n    ngOnInit()\n    {\n        // Calculate the connector width based on how many steps\n        if (isPresent(this.steps) && this.steps.length > 1) {\n\n            // (100% - 20% (side margins)) / (NumOfSteps -1)\n            this.connectorWidth = Math.ceil(80 / (this.steps.length - 1)) + '%';\n        }\n\n        /**\n         * Use the color array if it's defined.\n         */\n        if (isPresent(this.colors)) {\n\n            this.bUseColorArray = true;\n\n            if (this.colors.length !== this.steps.length) {\n                throw new Error(`The size of the steps and colors don't match:\n                  (steps.length = ${this.steps.length}), (colors.length = ${this.colors.length}`);\n            }\n        }\n    }\n\n    /**\n     * Getting the color of the step for the current index\n     *\n     * @param index\n     */\n    getStepColor(index: number)\n    {\n        // Color Array overrides everything else.\n        if (this.bUseColorArray) {\n            return this.colors[index];\n        }\n\n        if (index < this.currentStep) {\n\n            return this.stepColorCompleted;\n\n        } else if (index === this.currentStep) {\n\n            return this.stepColorCurrent;\n\n        } else {\n\n            return this.stepColorRemaining;\n        }\n    }\n\n    /**\n     * The connector colors are driven by the step colors.\n     *\n     */\n    getConnectorColor(index: number)\n    {\n        // Color Array overrides everything else.\n        if (this.bUseColorArray) {\n            return this.colors[index];\n        }\n\n        if (index < this.currentStep) {\n\n            return this.stepColorCompleted;\n\n        } else {\n\n            return this.stepColorRemaining;\n        }\n    }\n\n    /**\n     * Next step.\n     */\n    nextStep()\n    {\n        this.currentStep++;\n    }\n\n    /**\n     * previous step.\n     */\n    prevStep()\n    {\n        this.currentStep--;\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, Input, OnInit} from '@angular/core';\nimport {Environment, isBlank} from '@aribaui/core';\n\n/**\n * Renders html step component\n *\n *  * Usage:\n *       Straight forward to use. But mostly it would be used as part of the stepper component.\n *\n *          @Component({\n *                selector: 'aw-page' ,\n *                           template: `\n *                           <aw-step [title]=\"step\" [color]=\"color\"></aw-step>\n *                           `\n */\n\n    // Default color for this step.\nconst DEFAULT_COLOR = '#58b957';\n\n@Component({\n    selector: 'aw-step',\n    templateUrl: 'step.component.html',\n    styleUrls: ['step.component.scss']\n})\nexport class StepComponent implements OnInit\n{\n    /**\n     * The color of step icon.\n     */\n    @Input()\n    color: string;\n\n    /**\n     * title appears under the step graphics.\n     */\n    @Input()\n    title: string;\n\n    constructor(public env: Environment)\n    {\n    }\n\n    ngOnInit()\n    {\n        if (isBlank(this.color)) {\n            this.color = DEFAULT_COLOR;\n        }\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {StepperComponent} from './stepper.component';\nimport {StepComponent} from './step/step.component';\nimport {AWCoreComponentModule} from '../../core/core.module';\n\n@NgModule({\n    declarations: [\n        StepComponent,\n        StepperComponent\n\n    ],\n    imports: [\n        CommonModule,\n        AWCoreComponentModule,\n    ],\n    entryComponents: [\n        StepComponent,\n        StepperComponent\n    ],\n    exports: [\n        StepComponent,\n        StepperComponent\n    ],\n    providers: []\n})\nexport class AWStepperModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {PageLifeCycleService} from './page-lifecycle.service';\nimport {ObjectPageWrapperComponent} from './object-page-wrapper/object-page-wrapper.component';\nimport {PageActionsComponent} from './page-actions/page-actions.component';\nimport {PageContentComponent} from './page-content/page-content.component';\nimport {PageFooterComponent} from './page-footer/page-footer.component';\nimport {PageHeaderComponent} from './page-header/page-header.component';\nimport {AWStepperModule} from '../stepper/stepper.module';\nimport {SidenavComponent} from './sidenav/sidenav.component';\nimport {AWCoreComponentModule} from '../../core/core.module';\nimport {AWPageNotificationModule} from '../page-notification/page-notification.module';\nimport {RouterModule} from '@angular/router';\n\n@NgModule({\n    declarations: [\n        ObjectPageWrapperComponent,\n        PageActionsComponent,\n        PageContentComponent,\n        PageFooterComponent,\n        PageHeaderComponent,\n        SidenavComponent\n\n    ],\n    imports: [\n        CommonModule,\n        RouterModule,\n        AWCoreComponentModule,\n        AWStepperModule,\n        AWPageNotificationModule\n    ],\n    entryComponents: [\n        PageFooterComponent,\n        PageActionsComponent,\n        PageContentComponent,\n        PageHeaderComponent\n    ],\n    exports: [\n        ObjectPageWrapperComponent,\n        PageActionsComponent,\n        PageContentComponent,\n        PageFooterComponent,\n        PageHeaderComponent,\n        SidenavComponent\n    ],\n    providers: [PageLifeCycleService]\n})\nexport class AWPageWrapperModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, forwardRef, Inject, Input, Optional, SkipSelf} from '@angular/core';\nimport {NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Environment} from '@aribaui/core';\nimport {BaseFormComponent} from '../../core/base-form.component';\nimport {FormRowComponent} from '../../layouts/form-table/form-row/form-row.component';\nimport {distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * RichTextArea component represents a text editor which allows users to format text input.\n * The editor's toolbar is pre-configured to contain functionalities that are in our design.\n * @see {@link editor/editor.component.html}\n *\n *  ### Example\n *  ```\n *\n *  @Component({\n *    selector: 'rfx-event' ,\n *    template: `\n *\n *        <!-- Basic Usage. -->\n *        <aw-richtextarea [name]=\"'description'\" [value]=\"description\" placeHolder=\"put\n *        description\">\n *        </aw-richtextarea>\n *\n *        <!-- Editor with Full functionality -->\n *      <aw-richtextarea [name]=\"'comment'\" [type]=\"editorType\" [value]=\"value\"\n *      placeHolder=\"hold this\">\n *      </aw-richtextarea>\n *    })\n *    export class MyComponent\n *    {\n *        description: string;\n *\n *        editorType:EditorType = EditorType.Full;\n *        value:String;\n *\n *        constructor ()\n *        {\n *        }\n *    }\n */\n\n/**\n * Represents the different types of text editor. They are preconfigured with\n * functionality based on type. Use custom to add your own toolbar menu.\n */\nexport enum EditorType {\n    Default,    // Default Editor supports Minimal set of functionality\n    // [ bold | italic | underline | ordered | bullet | alignment]\n    Full,       // The full list of functionality,\n    TextFormat, // Functionalities that affects text formatting.\n    Custom     // Custom toolbar.\n}\n\n\nexport const EDITOR_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RichTextAreaComponent),\n    multi: true\n};\n\n\n@Component({\n    selector: 'aw-richtextarea',\n    templateUrl: 'rich-text-area.component.html',\n    styleUrls: ['rich-text-area.component.scss'],\n    providers: [\n        EDITOR_CONTROL_VALUE_ACCESSOR,\n        {provide: BaseFormComponent, useExisting: forwardRef(() => RichTextAreaComponent)}\n    ]\n\n})\nexport class RichTextAreaComponent extends BaseFormComponent {\n    /**\n     * The type of the editor.  See EditorType for description.\n     */\n    @Input()\n    type: EditorType;\n\n    /**\n     * A value used to save and read when rendering and updating this component\n     */\n    @Input()\n    value: any = '';\n\n    /**\n     * Expose editorType so that it can be used in this components template.\n     */\n    EditorType: any = EditorType;\n\n\n    constructor(public env: Environment,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => FormRowComponent))\n                protected parentContainer: BaseFormComponent) {\n        super(env, parentContainer);\n\n        this.type = EditorType.Default;\n        this.styleClass = 'default-editor';\n    }\n\n\n    ngOnInit() {\n        super.ngOnInit();\n        super.registerFormControl(this.value);\n\n        this.formControl.valueChanges.pipe(\n            distinctUntilChanged()\n        ).subscribe(val => {\n            this.value = val;\n            this.onModelChanged(this.value);\n        });\n    }\n\n    /**\n     * Internal. Please see ControlValueAccessor\n     */\n    writeValue(value: any) {\n        if (value !== this.value) {\n            this.value = value;\n            this.formControl.setValue(value);\n        }\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {EditorModule} from 'primeng/primeng';\nimport {AWStringFieldModule} from '../string/string.module';\nimport {RichTextAreaComponent} from '../rich-text-area/rich-text-area.component';\n\n\n@NgModule({\n    declarations: [\n        RichTextAreaComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        EditorModule,\n        AWStringFieldModule\n    ],\n    entryComponents: [\n        RichTextAreaComponent\n    ],\n    exports: [\n        RichTextAreaComponent,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    providers: []\n})\nexport class AWRichTextAreaModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    ViewChild\n} from '@angular/core';\nimport {Environment, isPresent} from '@aribaui/core';\nimport {AccordionTab} from 'primeng/primeng';\nimport {BaseComponent} from '../../core/base.component';\n\n\n/**\n * Allow developer to override default actions. Must have this declared before class when we\n * want to have this declaration inside the same file.\n */\n@Component({\n    selector: 'aw-section-actions',\n    template: `<ng-content></ng-content> `,\n})\nexport class SectionActionsComponent\n{\n\n}\n\n\n/**\n *\n * Section component that implements a section of the page. It's an outline box that\n * has the ability to expand and hide its content.\n *\n * ```ts\n *  @Component({\n *    selector: 'rfx-details' ,\n *    template: `\n *         <aw-section title=\"Sourcing request info\" (onEdit)=\"onStateChange($event)\"\n  *                          [editable]=\"true\">\n *\n *                <m-context [object]=\"rfxEntity.headerInfo\"\n *                          [operation]=\"this.editabilityState.headerInfoOp\"\n *                          layout=\"Inspect\"\n *                          uiGroup=\"HeaderGeneral\">\n *                   <m-include-component></m-include-component>\n *               </m-context>\n *           </aw-section>\n *\n *\n *           <aw-section #supplierSection title=\"Selected suppliers\" (onOpen)=\"onOpen()\"\n   *                [opened]=\"false\">\n *               <supplier-profile-card></supplier-profile-card>\n *           </aw-section>\n *\n *           <aw-section title=\"RFQ Details\"\n *                       description=\"Review and update information for suppliers to respond.\"\n *                       [disableClose]=\"true\">\n *\n *               <aw-subsection title=\"Event timeline\">\n *                   <aw-form-table [useFiveZone]=\"false\" [editable]=\"true\">\n *\n *                       <aw-form-row [label]=\"'Start Date'\" [name]=\"'startDate'\" [size]=\"'small'\"\n *                                   [highlightRow]=\"true\">\n *                           <aw-date-time\n *                               formatName=\"dateTime\"\n *                               name=\"startDate\" [value]=\"rfxEntity.created\"\n *                               [showTime]=\"true\"></aw-date-time>\n *                       </aw-form-row>\n *                   </aw-form-table>\n *               </aw-subsection>\n *          </aw-section>\n *    `\n *    })\n *    export class MyPage\n *    {\n *\n *        constructor ()\n *        {\n *        }\n *\n *    }\n *\n * ```\n *\n * Section component also supports editability modes and if enabled it will render action buttons\n * in the footer. Developer can also override default behavior and provide custom actions.\n *\n *\n * e.g:\n *\n * ```\n *      <aw-section [title]=\"title\" [editable]=\"true\"\n *                          (onCancelAction)=\"someHandler1($event)\"\n *                          (onSaveAction)=\"someHandler2($event)\" >\n *              section content\n *\n *\n *   </aw-section>\n *\n * ```\n *\n * or custom action buttons:\n *\n *\n * ```html\n *\n *       <aw-section-actions>\n *                      <aw-button >\n *                            ButtonTest1\n *                      </aw-button>\n *                      <aw-button>\n *                            ButtonTest2\n *                      </aw-button>\n *     </aw-section-actions>\n *\n * ```\n *\n *\n * There are two edit modes\n *  # Default\n *      Renders action buttons in the footers and emit actions to the application\n *\n *  # External\n *     No action buttons are shown in the footer and behavior is handled by application. Only event\n *     is emited.\n *\n *\n *  e.g:\n *\n *  ```ts\n *\n *      <aw-section title=\"User Information\" (onEdit)=\"onAddSomething($event)\"\n *                  [editable]=\"true\" [editMode]=\"'external'\" >\n *                  <div>\n *                      Content\n *                  </div>\n *      </aw-section>\n *\n *  ```\n *\n * Note: When using editing mode you have to call at the end of the editing cycle method\n * `completeEditing()` to commit editing which changes internal state of the Section.\n *\n *\n *\n */\n@Component({\n    selector: 'aw-section',\n    templateUrl: 'section.component.html',\n    styleUrls: ['section.component.scss']\n})\nexport class SectionComponent extends BaseComponent\n{\n\n    /**\n     * The title of this section\n     */\n    @Input()\n    title: string;\n\n    /**\n     * The description of this section.\n     */\n    @Input()\n    description: string;\n\n    /**\n     * Should this section be opened at the start. Default is opened.\n     */\n    @Input()\n    opened: boolean = true;\n\n    /**\n     * Whether this section can be closed or not.\n     **/\n    @Input()\n    disableClose: boolean = false;\n\n    /**\n     * Whether this section is in EditState or not.\n     *\n     * When in editing state and we show \"Cancel / Save\" button developer needs use this binding\n     * to control the state.\n     */\n    @Input()\n    editState: boolean = false;\n\n\n    /**\n     * Current Editing mode. Tells the components if its its default behavior or driven by\n     * application using this component.\n     *\n     * {@see EditMode}\n     *\n     */\n    @Input()\n    editMode: EditMode = 'default';\n\n\n    /**\n     * Developer can provide custom Edit action icon that will appear in the right top corner\n     */\n    @Input()\n    actionIcon: string = 'icon-edit';\n\n    /**\n     * Event emitted when the section is fully opened.\n     */\n    @Output()\n    onOpen: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Event emitted when the section is fully closed.\n     */\n    @Output()\n    onClose: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Edit state to broadcast state of current section\n     */\n    @Output()\n    onEdit: EventEmitter<any> = new EventEmitter();\n\n\n    /**\n     * When in editing state and default buttons are rendered on click broadcast Cancel action\n     */\n    @Output()\n    onCancelAction: EventEmitter<any> = new EventEmitter();\n\n\n    /**\n     * When in editing state and default buttons are rendered on click broadcast Save action\n     */\n    @Output()\n    onSaveAction: EventEmitter<any> = new EventEmitter();\n\n\n    @Output()\n    onEditingComplete: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Local variable on whether this section is expanded or not.\n     * Differs from 'opened'. opened is an input parameter and it doesn't track\n     * current section expanded state.\n     */\n    expanded: boolean;\n\n    /**\n     * internal accordionTab\n     */\n    @ViewChild('accordionTab')\n    private accordionTab: AccordionTab;\n\n\n    /**\n     * Save reference to developer's defined actions so if we can hide default ones\n     */\n    @ContentChild(SectionActionsComponent)\n    customActions: SectionActionsComponent;\n\n    constructor(protected element: ElementRef, public env: Environment)\n    {\n        super(env);\n        this.editable = false;\n    }\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n        // If I have not header, then I can't close the section.\n        if (!this.isHeaderDisplayed()) {\n            this.disableClose = true;\n        }\n\n        // If I can't close the section, then it should default open.\n        if (this.disableClose) {\n            this.opened = true;\n        }\n\n\n        // initialize the expanded state.\n        this.expanded = this.opened;\n    }\n\n    /**\n     * Don't display header area if I don't have title and description.\n     *\n     */\n    private isHeaderDisplayed(): boolean\n    {\n        return (isPresent(this.title) || isPresent(this.description));\n    }\n\n    /**\n     * Css Class that control the look and feel for section component.\n     */\n    aClass(): string\n    {\n        if (!this.isHeaderDisplayed()) {\n            return 'section-no-header';\n        }\n\n        return '';\n    }\n\n    /**\n     * Since we introduced buttons and editState the decision on when to exit editing mode\n     * should be on the developer using this component therefore only startEditing\n     *\n     */\n    onEditAction($event: any): void\n    {\n\n        // when in editing make sure we dont switch state as there can be some Form errors\n        // which needs to be handled by developer and only then change the editState\n        if (!this.editState) {\n            this.editState = !this.editState;\n            let state: string = (this.editState) ? 'inEdit' : 'notInEdit';\n\n            this.onEdit.emit(state);\n            this.open();\n        }\n\n        // prevent the original event from bubbling up. Because the edit icon is inside\n        // the header. If the click even is bubbled up, this event will cause the section to\n        // expand or collapse.\n        if (isPresent($event.event)) {\n            $event.event.stopPropagation();\n            $event.event.preventDefault();\n        }\n    }\n\n    hasDescription(): boolean\n    {\n        return isPresent(this.description);\n    }\n\n    /**\n     * Open this section, if it's already open, will do nothing.\n     */\n    open(event?: any): void\n    {\n\n        if (!this.expanded) {\n            this.accordionTab.toggle(event);\n        }\n    }\n\n    /**\n     * Close this section, if it's already close, will do nothing.\n     */\n    close(event: any): void\n    {\n        if (this.expanded) {\n            this.accordionTab.toggle(event);\n        }\n    }\n\n    /**\n     * Callback to be invoked when accordion is opened\n     *\n     */\n    onSectionOpen(event: any): void\n    {\n        this.expanded = true;\n        this.onOpen.emit('open');\n    }\n\n    /**\n     * Callback to be invoked when accordion is closed\n     *\n     */\n    onSectionClose(event: any): void\n    {\n        this.expanded = false;\n        this.onClose.emit('close');\n    }\n\n\n    /**\n     *\n     * Tells us if we need to render application defined custom actions\n     *\n     */\n    hasCustomActions(): boolean\n    {\n        return isPresent(this.customActions);\n    }\n\n    /**\n     * Emit the editing state back to non-editable\n     */\n    completeEditing(): void\n    {\n        this.editState = false;\n        this.onEditingComplete.emit(this.editState);\n    }\n}\n\n@Component({\n    selector: 'aw-subsection',\n    template: `\n                    <h4 class=\"subsection-title\">{{title}}</h4>\n                    <ng-content></ng-content>\n                 `,\n    styles: ['.subsection-title {color: #363636; }']\n})\nexport class SubSectionComponent\n{\n\n    /**\n     * The title of this sub section\n     */\n    @Input()\n    title: string;\n}\n\n\n/**\n * Defines editing modes for the Sections. Default means we show cancel / save buttons and hide\n * edit icons when in editing. external is driven by application\n */\nexport type EditMode = 'default' | 'external';\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {AribaCoreModule} from '@aribaui/core';\nimport {AWStringFieldModule} from '../string/string.module';\nimport {AccordionModule, SharedModule} from 'primeng/primeng';\nimport {SectionActionsComponent, SectionComponent, SubSectionComponent} from './section.component';\nimport {AWHyperlinkModule} from '../hyperlink/hyperlink.module';\nimport {AWButtonModule} from '../button/button.module';\n\n\n@NgModule({\n    declarations: [\n        SectionComponent,\n        SubSectionComponent,\n        SectionActionsComponent\n    ],\n    imports: [\n        CommonModule,\n        AccordionModule,\n        AribaCoreModule,\n        AWStringFieldModule,\n        AWHyperlinkModule,\n        AWButtonModule,\n        SharedModule\n    ],\n\n    entryComponents: [\n        SectionComponent,\n        SubSectionComponent,\n        SectionActionsComponent\n    ],\n    exports: [\n        SectionComponent,\n        SectionActionsComponent,\n        SubSectionComponent,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    providers: []\n})\nexport class AWSectionModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    Input,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport {AWDataTable} from '../aw-datatable';\nimport {Datatable2Component} from '../datatable2.component';\nimport {BooleanWrapper, Environment, isBlank, isPresent} from '@aribaui/core';\nimport {BaseComponent} from '../../../core/base.component';\nimport {DomHandler} from 'primeng/primeng';\n\n\nexport type DTHAlignment = 'left' | 'center' | 'right';\n\n\n/**\n * DTColumn represent single column including header and its body. Each column has its own\n * rendererTemplate which a entry to this component.\n *\n * Keeping this separate from the datatable where DT is not really aware what it is rendering,\n * it allows us more flexibility in terms of different type of column inheriting from this\n * one.. Such as:\n *  DTRowDetail  column\n *  DTSingleSelection column\n *  DTMultiSelection column\n *\n * This way we don't do IF/THEN/ELSE inside the datatable and trying to create different cases.\n *\n *  Then later on this will let us create additional logic for the pivotal layout. Because DT\n *  does know anything about the type of the column so whatever is added to the DT.columns it\n *  will be rendered.\n *\n *\n *  Columns can be also frozen meaning if the content overflows they dont scroll. To make the\n *  column frozen we need to use [frozen] binding and se it to TRUE plus it requires a [width]\n *  binding to be set (in px).\n *  We need this to be able to properly position the second table which is changed to absolute\n *  positioning.\n *\n *\n *\n */\n@Component({\n    selector: 'aw-dt-column2',\n    templateUrl: 'dt-column.component.html',\n    styleUrls: ['dt-column.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [DomHandler]\n\n})\nexport class DTColumn2Component extends BaseComponent implements AfterContentInit\n{\n    /**\n     * Column header label.\n     *\n     * Or you can use headerTemplate to define your own template\n     */\n    @Input()\n    label: string;\n\n    /**\n     * What field name to read from the given object\n     */\n    @Input()\n    key: string;\n\n    /**\n     *\n     * Cell alignment. It inserts regular align attribute to the table cell\n     *\n     */\n    @Input()\n    align: DTHAlignment = 'left';\n\n\n    /**\n     * Retrieves dynamic class based on data and then its added to the table cell TD\n     */\n    @Input()\n    bodyClassFn: (column: DTColumn2Component, item: any) => string;\n\n    /**\n     *\n     * If false applies dt-is-hidden style that hides the column\n     *\n     */\n    @Input()\n    isVisible: boolean = true;\n\n    /**\n     * Marks column as sortable which means sorting icon is added to the header with special\n     * sorting handling\n     */\n    @Input()\n    sortable: any;\n\n    /**\n     * Sorting direction\n     *\n     */\n    @Input()\n    sortOrdering: string = 'descending';\n\n    /**\n     * Tells the template if whether to render a label\n     *\n     */\n    @Input()\n    showColumnLabel: boolean = true;\n\n    /**\n     *\n     * See AWDataTable\n     *\n     */\n    @Input()\n    showSubHeader: boolean = false;\n\n\n    /**\n     * Default static class that is added to the TH into the header. It does not rely on data\n     *\n     */\n    @Input()\n    headerStyleClass: string;\n\n    /**\n     * Default static class that is added to the td into the body. It does not rely on data\n     *\n     */\n    @Input()\n    bodyStyleClass: string;\n\n    /**\n     *\n     * Used together with cell selectionMode to tell which column is selectable\n     *\n     */\n    @Input()\n    selectable: boolean = false;\n\n    /**\n     * Use globally defined HEADER template for current column\n     *\n     */\n    @Input()\n    useGlobalHeader: boolean = true;\n\n    /**\n     * Use globally defined SubHeader template for current column\n     *\n     */\n    @Input()\n    useGlobalSubHeader: boolean = true;\n\n    /**\n     * Use globally defined body template\n     *\n     */\n    @Input()\n    useGlobalBody: boolean = true;\n\n\n    /**\n     * Tells if the column is data column  - if it is rendering data or just a label or some\n     * control\n     *\n     * This is important when calculating a column span and we need to know which columns are or\n     * will be just for selection controls and which holds data\n     */\n    @Input()\n    isDataColumn: boolean = true;\n\n    /**\n     * Identifies column that will not scroll horizontally with other columns. Column is\n     * frozen.\n     *\n     * For such columns that are marked as frozen binding [width] is required.\n     *\n     */\n    @Input()\n    frozen: boolean = false;\n\n    /**\n     * Sets the Max Width for the TD. Even TD does not support we calculate the content width\n     * for each cell and then decide if we need to enlarge the column.\n     *\n     * @Experimantal binding that is currently working if the content of the cell is inline\n     * element where we can control whitespace wrapping in order to find out the real width\n     */\n    @Input()\n    maxWidth: string;\n\n\n    /**\n     * Sets the minWidth on the cell. Again just like maxWidth css properly is not supported on\n     * the table so there is a workaround where we create additional row that sets padding right\n     * and this will prevent the column to collapse under specified width\n     *\n     * todo: still TBD\n     */\n    @Input()\n    minWidth: string;\n\n    /**\n     * Main rendering template used by datatable to render each column.\n     */\n    @ViewChild('renderingTemplate')\n    rendererTemplate: TemplateRef<any>;\n\n    /**\n     * Custom header template. It will override provided label\n     */\n    @ContentChild('header')\n    headerTemplate: TemplateRef<any>;\n\n    /**\n     * Custom subHeader template.\n     */\n    @ContentChild('subHeader')\n    subHeaderTemplate: TemplateRef<any>;\n\n    /**\n     * Custom body template that will override read value from the [key] binding\n     */\n    @ContentChild('body')\n    bodyTemplate: TemplateRef<any>;\n\n\n    /**\n     * Internal...\n     */\n    sortOrder: number;\n    maxWidthPx: number = 0;\n    minWidthPx: number = 0;\n    widthPx: number = 0;\n    widestCell: number = 0;\n\n    /**\n     * Reference to Datatable Implementations\n     */\n    dt: AWDataTable;\n\n\n    constructor(public env: Environment,\n                public domHandler: DomHandler)\n    {\n        super(env);\n    }\n\n\n    ngOnInit(): void\n    {\n        super.ngOnInit();\n\n        if (isBlank(this.key) && isBlank(this.label)) {\n            throw new Error('Missing required binding: ' +\n                '[key] or [label] bindings must be used at minimum');\n        }\n\n        // To be able to position second DT we require [width] to be set as well\n        if (this.frozen && isBlank(this.width)) {\n            throw new Error('Missing required binding [width]: ' +\n                'when [frozen]=true then [width] binding needs to be specified.');\n        }\n    }\n\n\n    ngAfterContentInit(): void\n    {\n\n    }\n\n    ngAfterViewInit(): void\n    {\n        // need to deffer this and trigger change detection otherwise I get\n        // value was changed after it was checked error\n        // setTimeout(() =>\n        // {\n\n        // });\n    }\n\n    /**\n     *\n     * When cell selectionMode is enabled this method is triggered when we click on header.\n     * It delegates the call to the DT where it toggles currently selected value\n     *\n     */\n    handleHeaderClick(event: any, element: any): void\n    {\n        if (this.isHeaderSelectable()) {\n            this.dt.onHeaderSelectionChange(element, this);\n\n        } else if (this.sortable) {\n            this.sort(event);\n        }\n        event.preventDefault();\n    }\n\n    /**\n     *\n     * Todo: Implement our own sorting mechanism once we extract the sorting logic to its component\n     *\n     */\n    sort(event: any)\n    {\n        if (!this.sortable) {\n            return;\n        }\n        let targetNode = event.target;\n        if (this.domHandler.hasClass(targetNode, 'dt-u-sortable') ||\n            this.domHandler.hasClass(targetNode, 'dt-col-title') ||\n            this.domHandler.hasClass(targetNode, 'dt-col-sortable-icon'))\n        {\n\n            if (isPresent(this.dt.sortColumn) && this.dt.sortColumn.key === this.key) {\n                this.sortOrder = this.sortOrder * -1;\n                this.sortOrdering = this.dt.sortOrderingForNumber(this.sortOrder);\n\n            } else {\n                this.dt.sortColumn = this;\n\n            }\n            this.dt.dataSource.state.sortKey = this.key;\n            this.dt.dataSource.state.sortOrder = this.dt.sortOrderingForString(this.sortOrdering);\n\n            this.dt.sortSingle();\n        }\n        this.dt.updateDataToRender();\n    }\n\n    /**\n     * Calculated style class based on data\n     *\n     *\n     */\n    dynamicBodyClass(item: any): boolean\n    {\n        let dynClass = isPresent(this.bodyClassFn)\n            ? this.bodyClassFn.apply(this.dt.context, [this, item]) : '';\n\n        if (isPresent(this.bodyStyleClass)) {\n            dynClass += ' ' + this.bodyStyleClass;\n\n        } else if (isPresent(this.styleClass)) {\n            dynClass += ' ' + this.styleClass;\n        }\n\n        return dynClass;\n    }\n\n\n    isRowSelectable(item: any): boolean\n    {\n        if (isPresent(this.dt.isRowSelectable)) {\n            return this.dt.isRowSelectable(item);\n        }\n\n        return false;\n    }\n\n    isCellSelectable(item: any): boolean\n    {\n        return this.dt.selectionMode === 'cell' && this.isRowSelectable(item) && this.selectable;\n\n    }\n\n\n    isHeaderSelectable(): boolean\n    {\n        return this.dt.selectionMode === 'cell' && this.selectable;\n\n    }\n\n\n    getSortOrder()\n    {\n        let order = 0;\n\n        if (isPresent(this.dt.sortColumn) && this.key === this.dt.sortColumn.key) {\n            order = this.dt.sortColumn.sortOrder;\n        }\n        return order;\n    }\n\n    isSorted()\n    {\n        if (!this.sortable) {\n            return false;\n        }\n        return isPresent(this.dt.sortColumn) && this.key === this.dt.sortColumn.key;\n    }\n\n    initialize(table: AWDataTable): void\n    {\n        this.dt = table;\n\n        if (isPresent(this.dt.initialSortKey) && this.dt.initialSortKey === this.key) {\n            this.sortable = true;\n            this.sortOrder = this.dt.sortOrderingForString(this.dt.initialSortOrder);\n            this.dt.sortColumn = this;\n        }\n\n        if (isBlank(this.bodyTemplate) && this.useGlobalBody) {\n            this.bodyTemplate = this.dt.bodyTemplate;\n        }\n\n        if (isBlank(this.headerTemplate) && this.useGlobalHeader) {\n            this.headerTemplate = this.dt.headerTemplate;\n        }\n\n        if (isBlank(this.subHeaderTemplate) && this.useGlobalSubHeader) {\n            this.subHeaderTemplate = this.dt.subHeaderTemplate;\n        }\n\n        if (isBlank(this.bodyClassFn)) {\n            this.bodyClassFn = this.dt.bodyClassFn;\n        }\n\n        this.maxWidthPx = this.widthToPx(this.maxWidth);\n        this.minWidthPx = this.widthToPx(this.minWidth);\n        this.widthPx = this.widthToPx(this.width);\n    }\n\n    /**\n     * This method is called at the end of the view init cycle from the dt.ngAfterViewChecked.\n     *\n     * In case we use MaxWidth directive we set new width once for all columsn\n     */\n    postInitialize(myIndex: number): void\n    {\n        const colIndex = myIndex + 1;\n        let table;\n\n        if (this.dt.hasFrozenColumns()) {\n            table = (<Datatable2Component>this.dt).el\n                .nativeElement.querySelector('.dt-body-frozen table');\n        } else {\n            table = (<Datatable2Component>this.dt).el.nativeElement.querySelector('table');\n        }\n\n\n        if (this.widestCell > 0) {\n            let all = table.querySelectorAll('tr th:nth-child(' + colIndex + '), ' +\n                'tr td:nth-child(' + colIndex + ')').forEach((node: any) =>\n            {\n                node.style.width = this.widestCell + 'px';\n            });\n        }\n    }\n\n\n    /**\n     * You either use this binding directly and say its datacolumn or when there is a [key]\n     * biding we know it refers to some field.\n     *\n     */\n    isValueColumn(): boolean\n    {\n        return (isPresent(this.isDataColumn) && BooleanWrapper.isTrue(this.isDataColumn)) ||\n            isPresent(this.key);\n    }\n\n    /**\n     * When we are in outline mode  we need to also indend each selection control accordingly.\n     *\n     * indent - 1 > only offset with\n     * indent\n     */\n    indentForControl(cell: any, level: number): any\n    {\n        if (this.dt.isOutline() && level > 0 && cell.offsetWidth > 0\n            && isPresent(cell.nextElementSibling))\n        {\n\n            let outlineNodePadding =\n                parseInt(getComputedStyle(cell.nextElementSibling).paddingLeft) || 0;\n\n            // 1st level is pushed as root\n            if (this.dt.pushRootSectionOnNewLine) {\n                return (level === 1) ? null : (this.dt.indentationPerLevel * level)\n                    - outlineNodePadding;\n            } else {\n                return (this.dt.indentationPerLevel * level) + outlineNodePadding;\n            }\n        }\n        return null;\n    }\n\n\n    /**\n     *\n     * Internal\n     */\n    private widthToPx(width: string): number\n    {\n        let px;\n        if (isPresent(width)) {\n            if (width.indexOf('%') > 0) {\n                const nonPc = parseFloat(width) / 100;\n                px = nonPc * (<Datatable2Component>this.dt).el.nativeElement.offsetWidth;\n            } else {\n                px = parseFloat(width);\n            }\n        }\n\n        return px;\n    }\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component} from '@angular/core';\n\n/**\n * An datatable header area.\n *\n * See {@link DataTableComponent} for more explanation.\n */\n@Component({\n    selector: 'aw-dt-header2',\n    template: '<ng-content></ng-content>'\n})\nexport class DTHeaderComponent2\n{\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, Input, ViewEncapsulation} from '@angular/core';\nimport {Environment, isPresent} from '@aribaui/core';\nimport {DomHandler} from 'primeng/primeng';\nimport {DTColumn2Component} from '../dt-column.component';\nimport {AWDataTable} from '../../aw-datatable';\n\n\n/**\n *\n * Custom column implementation to render detail row spaning its column across whole table width.\n *\n *\n */\n@Component({\n    selector: 'aw-dt-detail-column',\n    templateUrl: 'dt-detail-row.component.html',\n    styleUrls: ['dt-detail-row.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [DomHandler]\n\n})\nexport class DTDetailRowComponent extends DTColumn2Component\n{\n\n    /**\n     * Defines current visibility for current data row using method reference\n     *\n     */\n    @Input()\n    isVisibleFn: (column: DTColumn2Component, item: any) => boolean;\n\n\n    /**\n     *\n     * tells if we need to render a line between item row and its detail\n     *\n     */\n    @Input()\n    showRowLine: boolean = true;\n\n\n    constructor(public env: Environment, public domHandler: DomHandler)\n    {\n        super(env, domHandler);\n    }\n\n\n    ngOnInit(): void\n    {\n        // just to get around the check in parent class\n        this.key = '';\n        super.ngOnInit();\n    }\n\n\n    /**\n     * Check if we need to keep some leading TDs\n     *\n     */\n    visibleLeadingCols(): number\n    {\n        return this.dt.numberOfColsBeforeData - (this.dt.hasInvisibleSelectionColumn() ? 1 : 0);\n    }\n\n\n    /**\n     *\n     * Check if we can show detail row/column using either [isVisible] or [isVisibleFn] bindings.\n     * Here can hook on application level custom method to decide if current item has detail row\n     * or not\n     *\n     * Or we can use isVisible=true to tell all row have detail row\n     *\n     */\n    showDetailRow(item: any): boolean\n    {\n        let isVisible = this.isVisible;\n        if (isPresent(this.isVisibleFn)) {\n            isVisible = this.isVisibleFn.apply(this.dt.context, [this, item]);\n        }\n        return isVisible;\n    }\n\n\n    initialize(table: AWDataTable): void\n    {\n        super.initialize(table);\n\n        this.isVisible = !this.dt.isOutline() || !this.dt.pivotalLayout;\n    }\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, ViewEncapsulation} from '@angular/core';\nimport {Environment} from '@aribaui/core';\nimport {DomHandler} from 'primeng/primeng';\nimport {DTColumn2Component} from '../dt-column.component';\n\n\n/**\n *\n *\n *\n *\n */\n@Component({\n    selector: 'aw-dt-detail-column-expand',\n    templateUrl: 'dt-detail-row-expander.component.html',\n    styleUrls: ['dt-detail-row-expander.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [DomHandler]\n\n})\nexport class DTDetailRowExpanderComponent extends DTColumn2Component\n{\n\n    constructor(public env: Environment, public domHandler: DomHandler)\n    {\n        super(env, domHandler);\n\n        // we dont want to show the row/column unless application says so\n        this.isVisible = false;\n\n        // default width of the selection control\n        this.width = '45px';\n    }\n\n\n    ngOnInit(): void\n    {\n        // just to get around the check in parent class\n        this.key = '';\n\n        super.ngOnInit();\n    }\n\n    toggleExpansion(event: any, item: any): void\n    {\n        this.dt.detailRowExpansionState.toggle(item);\n        event.stopPropagation();\n    }\n\n    calculateStyleClass(item: any): string\n    {\n        return this.dt.detailRowExpansionState.isExpanded(item) ?\n            'icon-slim-arrow-down' : 'icon-slim-arrow-right';\n    }\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\n\n\nimport {TemplateRef} from '@angular/core';\nimport {SelectionMode} from './datatable2.component';\nimport {DTColumn2Component} from './column/dt-column.component';\n\nimport {DetailRowExpansionState, DT2DataSource} from './datatable2-data-source';\nimport {OutlineState} from '../outline';\nimport {DTDetailRowComponent} from './column/detail-row/dt-detail-row.component';\n\n\nexport const DragEvents: string[] = ['mousedown', 'dragstart', 'dragover', 'dragenter', 'dragleave',\n    'drop', 'dragend'];\n\nexport enum DragDirection\n{\n    None = 'none',\n    Up = 'dt-drag-row-top',\n    Down = 'dt-drag-row-bottom',\n    Middle = 'dt-drag-row-both'\n}\n\n\nexport enum DropPosition\n{\n    Before = 'before',\n    After = 'after',\n    Into = 'into'\n}\n\n\n/**\n * Abstract type that is sharable among dependant DT object such as Columns, DataSources,\n * Directives to be able to communicate back to the datatable mainly to avoid circular dependency\n */\nexport interface AWDataTable\n{\n\n    /**\n     * Allows you to pass your own datasource to override default one. Also when dataSource is\n     * used the destinationClass or list are ignored\n     */\n    dataSource: DT2DataSource;\n\n    /**\n     * Manages outline states for Datatables using outline control\n     */\n    outlineState: OutlineState;\n\n\n    /**\n     * In case we have detail row remember its expansion state\n     */\n    detailRowExpansionState: DetailRowExpansionState;\n\n    /**\n     * What column is used as first for sorting\n     */\n    initialSortKey: string;\n\n    /**\n     * Allow to change sorting direction\n     */\n    initialSortOrder: string;\n\n    /**\n     *\n     * Tells DT if we support cell selection or row based selection which is regular DT.\n     *\n     */\n    selectionMode: SelectionMode;\n\n    /**\n     * In case of single or multiselection show controls\n     *\n     */\n    showSelectionColumn: boolean;\n\n    /**\n     * Tells if we want to render one selection control in the header to select all the\n     * rows. Applicable for multiselection\n     *\n     */\n    showSelectAll: boolean;\n\n    /**\n     * Identify if row or cell is selectable based on data\n     */\n    isRowSelectable: (item: any) => boolean;\n\n\n    /**\n     * Each DTColumn have have its own template to provide content for header, subheader and\n     * body but if those template are identical there would be too much duplicate code to replicate\n     * for each column the same. Therefore we have these global templates that you can declare\n     * on DT level (not under columns) and content of these template will be used for each column\n     *\n     * You can mix them as well. You can have global templates as well as template on the Column\n     * level which would override the global one\n     *\n     */\n    headerTemplate: TemplateRef<any>;\n\n    /**\n     * See headerTemplate for more details\n     */\n    subHeaderTemplate: TemplateRef<any>;\n\n    /**\n     * See headerTemplate for more details\n     */\n    bodyTemplate: TemplateRef<any>;\n    /**\n     * See headerTemplate for more details\n     */\n    headerFilterTemplate: TemplateRef<any>;\n\n    /**\n     *\n     * Render a subHeader template if present\n     *\n     */\n    showSubHeader: boolean;\n\n    /**\n     * This is global style function that can be bound to table and read by each column.\n     * The same you can see on the DTColumn\n     */\n    bodyClassFn: (column: DTColumn2Component, item: any) => string;\n\n\n    /**\n     * Context is important when we execute any function that is passed in as input. We need to\n     * give option to be executed within the context (this) of the code using this component.\n     *\n     */\n    context: any;\n\n    // Outline needed properties\n\n    /**\n     * Pushes outlineFor section on the new line and 2nd level child make it root for this\n     * section\n     */\n    pushRootSectionOnNewLine: boolean;\n\n    /**\n     * You can change default indentation for the outline nodes\n     *\n     */\n    indentationPerLevel: number;\n\n    /**\n     * When active applies special styles to the DT. Later on once pivot is implemented this will\n     * also add additional behavior to the DT\n     *\n     */\n    pivotalLayout: boolean;\n\n\n    /**\n     * When sorting is enabled this is current active column being sorted.\n     *\n     *  - we dont support multiple column sorting\n     */\n    sortColumn: DTColumn2Component;\n\n    /**\n     * Reference to aw-dt-detail-column if present detail row is rendered for specified\n     * items\n     */\n    rowDetailColumn: DTDetailRowComponent;\n\n    /**\n     * Used for spaning calculation or for the detail row to identify correct number of columns\n     * to span, when they are some non-data column (expansion control, single/multi selection)\n     */\n    numberOfColsBeforeData: number;\n\n\n    /**\n     *  what is the index of first data columns\n     */\n    startOfFirstDataColumn: number;\n\n\n    /**\n     * Triggered when in cell selection mode\n     *\n     */\n    onCellSelectionChange(cell: any, column: DTColumn2Component, item: any): void;\n\n\n    /**\n     * Triggered by column whe header is selected. Current we assume the only one header can be\n     * selected at the time.\n     *\n     */\n    onHeaderSelectionChange(cell: any, column: DTColumn2Component): void;\n\n\n    onHandleRowClicked(event: any, item: any): void;\n\n    /**\n     *\n     * Handles row selection logic where if the item is found inside the selected items, then\n     * its removed otherwise its added.\n     *\n     * Todo: Sync & refactor this with dt.onCellSelectionChange - pretty similar code\n     *\n     * We want to have rowToggle as well as we will have rowSelect or somethign similar to\n     * identify we are dealing with multiselect and single selection\n     */\n    onRowToggle(event: any, item: any): void;\n\n\n    /**\n     *\n     * Handles row single selection\n     *\n     */\n    onRowSelect(event: any, item: any): void;\n\n    /**\n     * When dealing with outline (tree) we need to make sure when we select some root item it\n     * will automatically also select all its children\n     *\n     */\n    onHandleOutlineRowToggleToChildren(currentItem: any, isSelected: boolean): void;\n\n\n    /**\n     *\n     * Just like for onHandleOutlineRowToggleToChildren the same behavior needs to be applied for\n     * towards up.\n     *\n     *\n     */\n    oHandleOutlineRowToggleToParent(currentItem: any, isSelected: boolean): void;\n\n\n    /**\n     *\n     * Called by D&D row directive to update this TD that row reordering needs to happen. We\n     * receive an INDEX of row we are dragging and new drop position, plus information if it\n     * needs to be dropped before new row position or after.\n     *\n     */\n    onDnDRowDrop(origPos: number, newPos: number, dropPos: DropPosition): void;\n\n\n    /**\n     *\n     * When detail row is combined with outline control we need make sure that we maintain the\n     * correct state for items that are eligible for detail row\n     *\n     * In this specific case the detail row does not have its own expander but utilizing the\n     * outlineControl\n     */\n    onOutlineExpandChange(event: any): void;\n\n\n    /**\n     * Support for single column sorting\n     *\n     *\n     */\n    sortSingle(): void;\n\n    /**\n     * When data changes, either they are lazily fetched or @Input LIST is updated we need\n     * resort out data based on current state and update internal list dataToRender so new\n     * data can re-rendered + triggers event valueChange\n     *\n     */\n    handleDataChange(): void;\n\n    updateDataToRender(datasource?: any): void;\n\n\n    /**\n     * Select or unselect all rows. Used by header checkbox\n     *\n     */\n    toggleAllColumns(event: any): void;\n\n    /**\n     * More like utility methods to translate string<-->number value for sorting\n     *\n     * Currently used only by DTColumn. We might want to move this its own component for\n     * headerSort and ordering\n     *\n     */\n    sortOrderingForString(direction: string): number;\n\n    sortOrderingForNumber(direction: number): string;\n\n    visibleColumns(): DTColumn2Component[];\n\n    hasFrozenColumns(): boolean;\n\n    /**\n     * Placeholder functionality for the single/multiselect functionality where we need to track if\n     * we support selection plus how many column it occupies and if the selection controls are\n     * visible or hidden.\n     */\n    hasInvisibleSelectionColumn(): boolean;\n\n\n    /**\n     *\n     * Placeholder to identify if they are non-value column\n     *\n     */\n    hasLeadingSelectColumn(): boolean;\n\n\n    /**\n     * To compare the data if we use deep object equality and this is used within this class as\n     * well as from the DTColumn to conditionally add class which select the cell\n     *\n     * We might want to change to check only a key of the object some unique identifier.\n     */\n    isHeaderSelected(item: DTColumn2Component): boolean;\n\n    /**\n     *\n     * Check if the specific cell is selected. We need two points to identify if cell is selected\n     * the actual Item that could represent whole row and Column\n     *\n     */\n    isBodyCellSelected(column: DTColumn2Component, item: any): boolean;\n\n    /**\n     *  Check if the given item is among the selected ones\n     *\n     */\n    isRowSelected(item: any): boolean;\n\n    /**\n     *\n     * When [children] binding is present then it means we need to render it as a tree\n     *\n     */\n    isOutline(): boolean;\n\n\n    /**\n     *\n     * Defaults the checkbox to either selected and not selected depended on internal state\n     *\n     */\n    isToggleAllColumnSelected(): boolean;\n\n    isToggleAllColumnDisabled(): boolean;\n\n\n    /**\n     *\n     * Uses are field path utility class to retrieve data from object\n     *\n     */\n    getValue(data: any, field: string): any;\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    assert,\n    Entity,\n    isBlank,\n    isEntity,\n    isPresent,\n    isString,\n    ListWrapper,\n    MapWrapper\n} from '@aribaui/core';\nimport {Observable} from 'rxjs';\nimport {DataSource, DSInitParams} from '../../core/data/data-source';\nimport {DataProvider} from '../../core/data/datatype-registry.service';\nimport {DataFinder, DataFinders, QueryType} from '../../core/data/data-finders';\nimport {DataProviders} from '../../core/data/data-providers';\nimport {DTColumn2Component} from './column/dt-column.component';\nimport {AWDataTable, DropPosition} from './aw-datatable';\n\n\n/**\n * Concrete DataSource implementation for Datatable which defines state and column definition that\n * can programmatically modify rendered columns (if provided) and method for inserting and\n * and deleting records;\n *\n * All operations dealing with data use Observable<T> and instant() method to retrieve current\n * state is not implemented.\n *\n *\n */\nexport class DT2DataSource extends DataSource\n{\n    static readonly MaxLimit = 100;\n\n    /**\n     * Matching dataProviders and finders\n     */\n    dataProvider: DataProvider<any>;\n    dataFinder: DataFinder;\n\n    /**\n     * Keep track of current datatable state\n     */\n    state: Datatable2State;\n    initialized = false;\n    debugTime: number;\n    /**\n     * Defines object being rendered\n     */\n    private entity: EntityDef2;\n\n    constructor(public dataProviders?: DataProviders, public finders?: DataFinders)\n    {\n        super(dataProviders, finders);\n\n        this.state = Datatable2State.create();\n\n        this.debugTime = new Date().getTime();\n    }\n\n\n    init(...args: any[]): void\n    {\n        if (isBlank(args) || args.length !== 1 && !isDTInitParams(args[0])) {\n            throw new Error('You need to initialize DS with (DSChooserInitParams)');\n        }\n        let init: DTDSInitParams = args[0];\n\n        // use existing or find best match for dataProvider\n        this.dataProvider = isPresent(init.dataProvider) ? init.dataProvider\n            : this.dataProviders.find(init.obj);\n\n        // use existing or find best match for dataFinder\n        this.dataFinder = isPresent(init.dataFinder) ? init.dataFinder\n            : this.finders.find(this.dataProvider, init.queryType);\n\n        assert(isPresent(this.dataProvider) && isPresent(this.dataFinder),\n            'DataSource incorrectly initialized. (DataProvider, DataFinder) missing. ');\n\n        this.dataFinder.lookupKey = init.lookupKey;\n        if (isBlank(init.state)) {\n            this.state = new Datatable2State();\n        } else {\n            this.state = init.state;\n        }\n\n        this.initialized = true;\n    }\n\n\n    /**\n     * Triggers async fetch data request and result is given back using dataProvider.dataChanges\n     *\n     */\n    fetch(withParams?: Datatable2State): void\n    {\n        let params = null;\n        if (isPresent(withParams)) {\n            params = new Map().set('offset', withParams.offset)\n                .set('limit', withParams.limit)\n                .set('orderby', withParams.sortKey)\n                .set('selector', withParams.sortOrder);\n        }\n\n        this.dataProvider.fetch(params).subscribe((result: any[]) =>\n        {\n            if (withParams.offset > 0) {\n                let incrData = [...this.dataProvider.dataChanges.getValue(), ...result];\n                this.dataProvider.dataChanges.next(incrData);\n            } else {\n                this.dataProvider.dataChanges.next(result);\n            }\n        });\n    }\n\n\n    /**\n     * Component uses this method to open up continuous stream to listen for any changes which\n     * need to be reflected on the UI.\n     *\n     * Dont forget to unsubscribe when component is destroyed.\n     */\n    open<T>(): Observable<T[]>\n    {\n        return this.dataProvider.dataChanges.asObservable();\n    }\n\n    close(): void\n    {\n        this.dataProvider = null;\n        this.dataFinder = null;\n    }\n\n\n    /**\n     * If CRUD is enabled we delegate calls to DataProvider that is responsible to tell the\n     * dataProvider.dataChanges that are new data. If not enabled we have default implementation\n     * which works with local array\n     *\n     */\n    insert(object: any): void\n    {\n        if (this.dataProvider.canCRUD()) {\n            this.dataProvider.insert(object);\n\n        } else {\n            this.dataProvider.offScreenData.push(object);\n            this.dataProvider.dataChanges.next(this.dataProvider.offScreenData);\n        }\n    }\n\n\n    /**\n     * Please see {@link insert} method\n     *\n     */\n    remove(object: any): void\n    {\n        if (this.dataProvider.canCRUD()) {\n            this.dataProvider.remove(object);\n\n        } else {\n            ListWrapper.removeIfExist(this.dataProvider.offScreenData, object);\n            this.dataProvider.dataChanges.next(this.dataProvider.offScreenData);\n        }\n    }\n\n    /**\n     *\n     * Provides access to DataFinder which can accept either plain string or Map.\n     *\n     * To be able to provide correct input we need to ask DataFinder if it supports FullText like\n     * type query or Predicate. In case of Predicate we build the Map with different key/value\n     * pairs\n     *\n     *\n     */\n    find(pattern?: any): void\n    {\n        if (isBlank(pattern) || pattern.length === 0) {\n            // if we received empty string return orginal list\n            this.fetch(this.state);\n            return;\n        }\n\n        let searchParam: any = pattern;\n        if (this.dataFinder.accepts(this.dataProvider, QueryType.Predicate)) {\n            searchParam = new Map().set('query', pattern).set('limit', DT2DataSource.MaxLimit);\n\n            if (isPresent(this.state.sortKey)) {\n                searchParam.set('orderby', this.state.sortKey);\n            }\n\n            if (isPresent(this.state.sortKey)) {\n                searchParam.set('selector', this.state.sortOrder);\n            }\n        } else {\n            assert(isString(pattern), 'Cannot pass non-string value to FullText Finder');\n        }\n\n        this.dataFinder.match<any>(searchParam).subscribe((result: any[]) =>\n        {\n            this.dataProvider.dataChanges.next(result);\n        });\n    }\n\n\n    /**\n     *\n     * Data source delegates the responsibility to the given data provider which needs to implement\n     * specific sorting mechanism\n     *\n     * Todo: Extend to sort by multiple columns\n     *\n     */\n    sort(key: string, sortOrder: number): void\n    {\n        if (isBlank(this.dataProvider.data()) || this.dataProvider.data().length === 0) {\n            return;\n        }\n        this.state.sortKey = key;\n        this.state.sortOrder = sortOrder;\n        this.fetch(this.state);\n    }\n\n    /**\n     *\n     * Persist db state\n     *\n     */\n    updateState(offset: number, sortField: string, sOrder: number): void\n    {\n        this.state.offset = offset;\n        this.state.sortKey = sortField;\n        this.state.sortOrder = sOrder;\n    }\n\n\n    /**\n     *\n     * reshuffles current array based on new row D&D result.\n     *\n     * Since there is a difference if we move item from bottom or from the top and then accordingly\n     * highlighting a space between rows. We need to reflect this in here as well.\n     *\n     * UseCase 1:\n     *\n     * 1. You can grab item with index 0 and move it down so that you can see a dropping line\n     * between row with index 2 - 3\n     *\n     * 2. In this case splice() starts from position 2 and insert all elements after 2\n     *      splice(start: number, deleteCount: number, ...items: T[]): T[];\n     *\n     * 3. no need to update newPos\n     *\n     * UseCase 2:\n     *\n     * 1. You can grab item with index 0 and move all the way down of the DT and now move the\n     * row toward TOP and space between rows with index 2 - 3 is highlighted again.\n     *\n     * 2. Here is the difference, before we highlighted row #2 with line at the bottom, now\n     * it seems the same but its highlighted row #3 with line at the TOP.\n     *\n     * * This is the reason whey we need to do newPos -= 1 or newPos += 1; depending our direction\n     * where where the line between rows is created.\n     *\n     *\n     * We don't need any complicated calculation trying to find out if we are on one half of the row\n     * or second half and based on this try to apply certain style. This would not give so much\n     * space if we want drop row into the row. And the calculation with coordinates woudl be too\n     * complicated.\n     *\n     * We simply remember the direction we are moving and based on this we apply style to\n     * to create a line at the TOP if we are going upwards or bottom otherwise.\n     *\n     *\n     */\n    reorderRows(origPos: number, newPos: number, dropPos: DropPosition): void\n    {\n        let array = this.dataProvider.data().slice();\n\n        // take something from top and drag&drop under\n        if (newPos > origPos && dropPos === DropPosition.Before && newPos < array.length) {\n            newPos -= 1;\n\n            // take something from bottom and drag&drop above\n        } else if (newPos < origPos && dropPos === DropPosition.After && newPos >= 0) {\n            newPos += 1;\n        }\n\n        array.splice(newPos, 0, ...array.splice(origPos, 1)[0]);\n        this.dataProvider.dataChanges.next(array);\n    }\n\n}\n\n/**\n * Entity definition to be used to initialize programmatically columns\n */\nexport interface EntityDef2\n{\n    propertyKeys: string[];\n\n    defaultFormatter: (key: any) => string;\n\n    displayStringForKey: (key: string) => string;\n\n    defaultAlignmentForKey: (key: string) => string;\n}\n\n/**\n * Keeps current datatable state the state which drivers the way while fetching the data as well\n * encapsulate set of properties that needs to be persistet in order to recover a state after e.g.\n * browser refresh\n *\n *\n * todo: Create methods to convert this state from and to JSON for easier serialization\n */\nexport class Datatable2State\n{\n    public static readonly Ascending = 1;\n    public static readonly Descending = -1;\n\n    /**\n     * Properties for paging and fetching\n     */\n    offset: number = 0;\n    limit: number = 0;\n\n    /**\n     * Identifies default value that is used to render N number of rows in non-fullscreen\n     * mode\n     *\n     */\n    displayLimit: number = 0;\n\n    /**\n     * Current sorting field\n     */\n    sortKey: string;\n\n    /**\n     * Sorting order of the sort field. DataTable support sorting for multiple column but we\n     * dont persist it now. Maybe in the future\n     */\n    sortOrder: number = Datatable2State.Ascending;\n\n    /**\n     * If we are using global filter for current datatable then save it here\n     */\n    currentSearchQuery: string = '';\n\n    /**\n     * Current if any preselected filter\n     */\n    currentFilter: any;\n\n    /**\n     * Represent current selection depending on selection mode.\n     *\n     * Current selection used both for row selection and cell selection. Row selection is used when\n     * SingleSelect and MultiSelect once we implement this.\n     *\n     */\n    selection: any;\n\n\n    /**\n     * When header selection is enabled it captures currently selected column\n     */\n    headerSelection: DTColumn2Component;\n\n\n    /**\n     *\n     *  Holds current state of the outline tree if used\n     *\n     */\n    outlineState?: Map<any, boolean>;\n\n    /**\n     *\n     *  Holds current state of the detail rows if used\n     *\n     */\n    detailRowExpandState?: Map<any, boolean>;\n\n\n    constructor()\n    {\n        this.outlineState = new Map<any, boolean>();\n        this.detailRowExpandState = new Map<any, boolean>();\n    }\n\n    static create(offset: number = 0, limit: number = 15, displayLimit: number = 5,\n                  sortField: string = '', sOrder: number = 0, searchQuery?: string, filter?: any,\n                  outlineState: Map<any, boolean> = new Map<any, boolean>(),\n                  detailRowState: Map<any, boolean> = new Map<any, boolean>()): Datatable2State\n    {\n        let s = new Datatable2State();\n        s.offset = offset;\n        s.limit = limit;\n        s.displayLimit = displayLimit;\n        s.sortKey = sortField;\n        s.sortOrder = sOrder;\n        s.currentSearchQuery = searchQuery;\n        s.currentFilter = filter;\n        s.outlineState = outlineState;\n        s.detailRowExpandState = detailRowState;\n\n        return s;\n    }\n\n    static fromJSON(data: string): Datatable2State\n    {\n        let state: DTStateSerializableHelper = JSON.parse(data);\n        let ds = new Datatable2State();\n        ds.offset = state.offset;\n        ds.limit = state.limit;\n        ds.displayLimit = state.displayLimit;\n        ds.sortKey = state.sortKey;\n        ds.sortOrder = state.sortOrder;\n        ds.currentSearchQuery = state.currentSearchQuery;\n        ds.outlineState = MapWrapper.createFromAnyMap<boolean>(state.outlineState);\n        ds.detailRowExpandState = MapWrapper.createFromAnyMap<boolean>(state.detailRowExpandState);\n\n        return ds;\n    }\n\n\n    static toJSON(data: Datatable2State): string\n    {\n        let toConvert: DTStateSerializableHelper = {\n            offset: data.offset,\n            limit: data.limit,\n            displayLimit: data.displayLimit,\n            sortKey: data.sortKey,\n            sortOrder: data.sortOrder,\n            currentSearchQuery: data.currentSearchQuery,\n            outlineState: MapWrapper.toAnyMap(data.outlineState),\n            detailRowExpandState: MapWrapper.toAnyMap(data.detailRowExpandState)\n\n        };\n        return JSON.stringify(toConvert);\n    }\n\n}\n\n\n/**\n * This needs to go to DTDataSource to keep and manage the state of the detail row. The idea is\n * simple we have a map holding item reference as a key and boolean value indicating if the\n * detail row is visible\n *\n * Todo: move this out to DS\n */\nexport class DetailRowExpansionState\n{\n\n    expansionStates: Map<any, boolean>;\n\n\n    constructor(private dt: AWDataTable)\n    {\n    }\n\n    get detailExpansionEnabled(): boolean\n    {\n        return isPresent(this.expansionStates);\n    }\n\n    set detailExpansionEnabled(value: boolean)\n    {\n\n        if (value) {\n            this.expansionStates = new Map<any, boolean>();\n        } else {\n            this.expansionStates = null;\n        }\n    }\n\n    toggle(item: any): void\n    {\n        let key = this.itemToKey(item);\n        if (!this.isExpanded(item)) {\n            this.expansionStates.set(key, true);\n        } else {\n            this.expansionStates.delete(key);\n        }\n\n        this.dt.dataSource.state.detailRowExpandState = this.expansionStates;\n    }\n\n    isExpanded(item: any): boolean\n    {\n        let key = this.itemToKey(item);\n        // handle special case where we collapse parent of parent while detail row is expanded\n        if (this.dt.isOutline() && !this.dt.outlineState.isExpanded(key)) {\n            this.expansionStates.delete(key);\n            return false;\n        }\n\n        let isOutlineExpanded = this.dt.isOutline() ? this.dt.outlineState.isExpanded(key) : true;\n        return isPresent(key) && this.expansionStates.has(key);\n    }\n\n    private itemToKey(item: any): string\n    {\n        return isEntity(item) ? (<Entity>item).identity() : item;\n    }\n}\n\nexport interface DTStateSerializableHelper\n{\n    offset: number;\n    limit: number;\n    displayLimit: number;\n    sortKey: string;\n    sortOrder: number;\n    currentSearchQuery: string;\n    currentFilter?: any;\n    outlineState: any;\n    detailRowExpandState: any;\n\n}\n\nexport function isDTInitParams(init: DTDSInitParams): init is DTDSInitParams\n{\n    return isPresent(init.obj) || isPresent(init.queryType) || isPresent(init.entity);\n}\n\n/**\n * To make initialization easier we have this common format.\n */\nexport interface DTDSInitParams extends DSInitParams\n{\n\n    /**\n     * Object definition for the data\n     */\n    entity?: EntityDef2;\n\n    state?: Datatable2State;\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, ViewEncapsulation} from '@angular/core';\nimport {Environment} from '@aribaui/core';\nimport {DomHandler} from 'primeng/primeng';\nimport {DTColumn2Component} from '../dt-column.component';\n\n\n/**\n *\n * Column implementation for the Multiselection where we show checkbox control\n *\n *\n */\n@Component({\n    selector: 'aw-dt-multi-select-column',\n    templateUrl: 'dt-multi-select-column.component.html',\n    styleUrls: ['dt-multi-select-column.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [DomHandler]\n\n})\nexport class DTMultiSelectColumnComponent extends DTColumn2Component\n{\n\n    constructor(public env: Environment, public domHandler: DomHandler)\n    {\n        super(env, domHandler);\n\n        // default width of the selection control\n        this.width = '45px';\n    }\n\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, ViewEncapsulation} from '@angular/core';\nimport {Environment} from '@aribaui/core';\nimport {DomHandler} from 'primeng/primeng';\nimport {DTColumn2Component} from '../dt-column.component';\n\n\n/**\n *\n * Column implementation for the SingleSelect where we show checkbox control\n *\n *\n */\n@Component({\n    selector: 'aw-dt-single-select-column',\n    templateUrl: 'dt-single-select-column.component.html',\n    styleUrls: ['dt-single-select-column.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [DomHandler]\n\n})\nexport class DTSingleSelectColumnComponent extends DTColumn2Component\n{\n\n    constructor(public env: Environment, public domHandler: DomHandler)\n    {\n        super(env, domHandler);\n\n        // default width of the selection control\n        this.width = '45px';\n    }\n\n\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n *  @original-license\n *  The MIT License (MIT)\n *  Copyright (c) 2016-2017 PrimeTek\n *\n *  Credit: Derived and extended from Prime-ng datable where we needed more modular solution.\n *  We reused the core structure and layout but had to refactor both code and template to match our\n *  needs. More in the description\n *\n *\n */\nimport {\n    AfterContentInit,\n    AfterViewChecked,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Injector,\n    Input,\n    NgZone,\n    Output,\n    QueryList,\n    SimpleChanges,\n    TemplateRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport {ObjectUtils} from 'primeng/components/utils/objectutils';\nimport {Subscription} from 'rxjs';\nimport {isOutlineNode, OutlineState} from '../outline/index';\nimport {BaseComponent} from '../../core/base.component';\nimport {\n    assert,\n    BooleanWrapper,\n    Environment,\n    equals,\n    FieldPath,\n    isBlank,\n    isPresent,\n    ListWrapper\n} from '@aribaui/core';\nimport {AWDataTable, DropPosition} from './aw-datatable';\nimport {DTColumn2Component} from './column/dt-column.component';\nimport {DTHeaderComponent2} from './header/header.component';\nimport {DTDetailRowComponent} from './column/detail-row/dt-detail-row.component';\nimport {\n    DTDetailRowExpanderComponent\n} from './column/detail-row-expander/dt-detail-row-expander.component';\nimport {DATA_SOURCE} from '../../core/data/data-source';\nimport {DataProviders} from '../../core/data/data-providers';\nimport {DataFinders, QueryType} from '../../core/data/data-finders';\nimport {Datatable2State, DetailRowExpansionState, DT2DataSource} from './datatable2-data-source';\nimport {\n    DTMultiSelectColumnComponent\n} from './column/multi-select/dt-multi-select-column.component';\nimport {\n    DTSingleSelectColumnComponent\n} from './column/single-select/dt-single-select-column.component';\nimport {ModelFormat} from '../outline/outline-for.component';\n\n\nexport type SelectionMode = 'multi' | 'single' | 'cell' | 'none';\n\n/**\n * DT component that implements the data grid that shows tabular data. Even the basic\n * structure is based on PrimeNG datatable its completely refactored into smaller pieces that\n * allows more extensibility and trying to stay as close as possible to existing AWL implementation\n *\n * There are 3 main pieces:\n *\n *  Table Wrapper - focuses on the outer structure. Container with basic datable layout plus\n *  contains any additional panels that datatable needs such as our new concept how editing will\n *  work - sliding panel from the bottom\n *\n *  Datatable Column - Instead of rendering everything inside DT I split the part that renders\n *  column into separate component. This way component column has its own renderer template which\n *  can render both header and data cells.\n *  Later on DTColumn is then extended to support other additional column types\n *  SingleSelectionColumn, MultiSelectionColumn, both responsible for rendering selection controls.\n *\n * To support pivotal layout this can be extended for other additional columns that implements their\n * own rendering templates\n *\n * Datatable - The main component that is only focus on header and body rendering and basaed on the\n * column type it will render the correct template\n * column type it will render the correct template\n *\n *\n *\n *\n *\n */\n@Component({\n    selector: 'aw-datatable2',\n    templateUrl: 'datatable2.component.html',\n    styleUrls: ['datatable2.component.scss'],\n    providers: [\n        ObjectUtils,\n        OutlineState,\n        {provide: DATA_SOURCE, useClass: DT2DataSource, deps: [DataProviders, DataFinders]},\n    ],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n\n})\nexport class Datatable2Component extends BaseComponent implements AWDataTable, AfterViewChecked,\n    AfterViewInit, AfterContentInit\n{\n\n    /**\n     *  List of items to show in the datatable.\n     *\n     *  todo: implement the same Datasource and lazy loading just like I did it for datatable\n     */\n    @Input()\n    list: any[];\n\n    /**\n     * Name of the entity for which DataProvider will be loaded. You can either pass list of items\n     * or use this destinationClass. Not both\n     */\n    @Input()\n    destinationClass: string;\n\n\n    /**\n     * Used by TableWrapper to add user defined clas into the table tag\n     *\n     */\n    @Input()\n    tableStyleClass: string;\n\n    /**\n     * See headerTemplate for more details\n     */\n    @Input()\n    bodyClassFn: (column: DTColumn2Component, item: any) => string;\n\n\n    /**\n     * See AWDataTable\n     */\n    @Input()\n    isRowSelectable: (item: any) => boolean;\n\n\n    /**\n     *  Hides or shows table heading where we have filters and tools menus\n     */\n    @Input()\n    showTableHeader: boolean = true;\n\n\n    /**\n     * See AWDataTable\n     *\n     */\n    @Input()\n    pivotalLayout: boolean = false;\n\n    /**\n     * See AWDataTable\n     *\n     */\n    @Input()\n    context: any;\n\n    /**\n     * See AWDataTable\n     */\n    @Input()\n    initialSortOrder: string = 'descending';\n\n    /**\n     * See AWDataTable\n     */\n    @Input()\n    initialSortKey: string;\n\n\n    /**\n     * When DT is loaded in the page and we are not in the full screen (full page mode), this\n     * is hte number of lines that DT will show\n     *\n     * todo: come up with better name\n     */\n    @Input()\n    displayRowSize: number = 10;\n\n\n    /**\n     * Used for paging on lazy loading using infinite scroller to set initial fetch limit size\n     *\n     * todo: come up with better name !!!\n     *\n     */\n    @Input()\n    pageSize: number = 15;\n\n\n    /**\n     * See AWDataTable\n     */\n    @Input()\n    dataSource: DT2DataSource;\n\n    /**\n     * Default message when there are no data .\n     *\n     * todo: Use i18n value and create resource file\n     */\n    @Input()\n    emptyMessage: string = 'No records found';\n\n\n    /**\n     * Developer can provide custom trackBy function that will be used to iterate over the\n     * records\n     */\n    @Input()\n    rowTrackBy: (index: number, item: any) => any;\n\n    /**\n     * When true adds custom hovering class to the tbody\n     */\n    @Input()\n    rowHover: boolean;\n\n    /**\n     * Do we show loading indicator\n     *\n     * Todo: rename to showLoading\n     */\n    @Input()\n    loading: boolean;\n\n\n    /**\n     *\n     * See AWDataTable\n     *\n     */\n    @Input()\n    selectionMode: SelectionMode = 'none';\n\n    /**\n     *\n     * Can provide custom icon. These icons are not animated divs, we used css\n     * transformation to rotate them.\n     *\n     */\n    @Input()\n    loadingIcon: string = 'icon-synchronize';\n\n\n    /**\n     * Additional indent can be added when rendering detail row\n     */\n    @Input()\n    indentDetailRow: boolean = false;\n\n    /**\n     * See AWDataTable\n     *\n     */\n    @Input()\n    indentationPerLevel: number = 25;\n\n    /**\n     *\n     *  SubHeader is used to show summary columns, which in our UX is shown at the top just under\n     *  the regular table header\n     *\n     */\n    @Input()\n    showSubHeader: boolean = false;\n\n    /**\n     * See OutlineFor - only used in the tree mode\n     *\n     * Not used when [outlineFormat]=\"'truee'\"\n     */\n    @Input()\n    children: (value: any) => any[];\n\n\n    /**\n     * We might have this conditional as this can be dynamic based on value, so the same\n     * as children\n     *\n     * See OutlineFor - only used in the tree mode\n     */\n    @Input()\n    showExpansionControl: boolean;\n\n    /**\n     * See OutlineFor - only used in the tree mode\n     */\n    @Input()\n    expandAll: boolean = false;\n\n\n    /**\n     *\n     * See OutlineFor  - format - only used in the tree mode\n     */\n    @Input()\n    outlineFormat: ModelFormat = 'free';\n\n    /**\n     * See AWDataTable\n     */\n    @Input()\n    pushRootSectionOnNewLine: boolean = true;\n\n\n    /**\n     * Render or hide expansion control for row detail columns. Expansion control makes sense for\n     * simple table, when using this inside outline (tree table), its driven by outline control\n     */\n    @Input()\n    showRowDetailExpansionControl: boolean = true;\n\n    /**\n     * See AWDataTable\n     *\n     */\n    @Input()\n    showSelectionColumn: boolean = true;\n\n\n    /**\n     * See AWDataTable\n     *\n     */\n    @Input()\n    showSelectAll: boolean = true;\n\n\n    /**\n     * Show or hide global search term input field in the header\n     */\n    @Input()\n    showGlobalSearch: boolean = true;\n\n\n    /**\n     * In case frozen column are using we can specify on global level total width of the table the\n     * overflowing content or width for each column.\n     */\n    @Input()\n    scrollWidth: any;\n\n\n    /**\n     * Enables or disables row reordering\n     *\n     */\n    @Input()\n    dndRowEnabled: boolean = false;\n\n    /**\n     *\n     * Fires event that sorting is enabled for column and we trigger sorting\n     *\n     */\n    @Output()\n    onSort: EventEmitter<any> = new EventEmitter();\n\n\n    /**\n     * Based on selection mode it triggers even\n     *\n     */\n    @Output()\n    onRowClick: EventEmitter<any> = new EventEmitter();\n\n    /**\n     *\n     * When multi or single selection mode is enabled it will trigger event when checkbox or\n     * radio buttons is selected\n     *\n     * todo: implement SingleSelectionDTColumn, MultiSelectionDTColumn with their renderers\n     */\n    @Output()\n    onRowSelectionChange: EventEmitter<any> = new EventEmitter();\n\n\n    /**\n     * When cell body selection changes we fire event\n     *\n     */\n    @Output()\n    onCellChange: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * When cell header selection changes we fire event\n     *\n     */\n    @Output()\n    onHeaderSelection: EventEmitter<any> = new EventEmitter();\n\n\n    @ContentChild(DTHeaderComponent2)\n    header: DTHeaderComponent2;\n\n\n    /**\n     * Defines custom template that can be implemented by application to show when there are\n     * no data in the datable\n     */\n    @ContentChild('noDataTempl')\n    emptyMessageTemplate: TemplateRef<any>;\n\n    /**\n     * See AWDataTable\n     *\n     */\n    @ContentChild('dtHeader')\n    headerTemplate: TemplateRef<any>;\n\n    /**\n     * See AWDataTable\n     */\n    @ContentChild('dtSubHeader')\n    subHeaderTemplate: TemplateRef<any>;\n\n    /**\n     * See AWDataTable\n     */\n    @ContentChild('dtBody')\n    bodyTemplate: TemplateRef<any>;\n\n\n    /**\n     * See AWDataTable\n     */\n    @ContentChild('headerFilter')\n    headerFilterTemplate: TemplateRef<any>;\n\n\n    /**\n     * Collects used DTColumn inside datatable and then they are used inside the template to\n     * iterate over and use its rendererTemplate.\n     *\n     * When we will be defining new columns its important that it can also match all the\n     * inherited ones. so we need to make sure we define a provider those those columns to point\n     * to the DTColumnComponent\n     *\n     * e.g.:\n     *\n     * {provide: DTColumnComponent, useExisting: forwardRef(() => DetailRowColumn)}\n     *\n     */\n    @ContentChildren(DTColumn2Component)\n    colsQuery: QueryList<DTColumn2Component>;\n\n\n    /**\n     * See AWDataTable\n     */\n    @ContentChild(DTDetailRowComponent)\n    rowDetailColumn: DTDetailRowComponent;\n\n\n    /**\n     *\n     * Triggers when items in the list are updated\n     *\n     */\n    @Output()\n    valueChange: EventEmitter<any[]> = new EventEmitter<any[]>();\n\n\n    @HostBinding('class')\n    classList: string = 'w-datatable ';\n\n\n    /**\n     * For internal use\n     */\n\n    /**\n     * Current dataset that is being rendered. Set from the [list] binding or by lazy load from\n     * datasource\n     */\n    public dataToRender: any[];\n\n    /**\n     * We convert QueryList<DTColumn2Component> to this array for easier manipulation\n     */\n    public columns: DTColumn2Component[];\n\n\n    /**\n     * This is secondary list of columns which is used in case we have have enabled\n     * frozen columns. Columns that are marked as frozen needs to be placed into separate array\n     * to be rendered way than regular columns which are stored in the columns array.\n     */\n    public frozenColumns: DTColumn2Component[];\n\n\n    /**\n     *  Indicates that columns were initialed Also used when we hide and show column to trigger\n     *  change.\n     *\n     */\n    public columnsChanged: boolean = false;\n\n    /**\n     *\n     * See AWDataTable\n     */\n    public sortColumn: DTColumn2Component;\n\n\n    /**\n     * Reference to colsQuery and its changes so we can later on release the subscription\n     */\n    columnsSubscription: Subscription;\n    initialized: boolean;\n\n\n    /**\n     * See AWDataTable\n     */\n    detailRowExpansionState: DetailRowExpansionState;\n\n\n    /**\n     * See AWDataTable\n     */\n    numberOfColsBeforeData: number = 0;\n\n\n    /**\n     * See AWDataTable\n     */\n    startOfFirstDataColumn: number = 0;\n\n\n    /**\n     * Section for programmatically instantiated columns that are added to the list if additional\n     * span or logic is needed.\n     *\n     * To programmatically insert a new column into columns array like expando column for detail\n     * row, or SingleSelect, MultiSelect column when selection is enabled we need to use\n     * ComponentFactoryResolver to instantiate a new component.\n     *\n     */\n    private rowDetailExpandColumn: DTDetailRowExpanderComponent;\n    private multiSelectColumn: DTMultiSelectColumnComponent;\n    private singleSelectColumn: DTSingleSelectColumnComponent;\n\n\n    /**\n     *\n     * In case of outline table we are inject OutlineState which is provided in the DT component\n     * definition. This is used by nested outlineFor component it set itself as reference and\n     * initialize the state so it can be used later on inside OutlineControl\n     *\n     *\n     * Each Datatable is pre-defaulted with its own version of DataSource so all the observers\n     * inside are unique for this component\n     *\n     */\n    constructor(public env: Environment, public el: ElementRef,\n                @Inject(DATA_SOURCE) private _defaultDS: DT2DataSource,\n                public changeDetector: ChangeDetectorRef,\n                public factoryResolver: ComponentFactoryResolver,\n                public outlineState: OutlineState,\n                public zone: NgZone,\n                private injector: Injector)\n    {\n        super(env);\n\n        this.dataSource = this._defaultDS;\n    }\n\n    /**\n     * Pushes a state out to application. Can be use as two way bindings\n     *\n     * [(state)]=dtState(s)\n     *\n     */\n    @Input()\n    get state(): any\n    {\n        return this.dataSource.state;\n    }\n\n    set state(val: any)\n    {\n        this.dataSource.state = val;\n    }\n\n    ngOnInit()\n    {\n\n        super.ngOnInit();\n        if (isPresent(this.list) && isPresent(this.destinationClass)) {\n            throw new Error('You cannot use both bindings [list] and [destinationClass]!');\n        }\n        this.detailRowExpansionState = new DetailRowExpansionState(this);\n\n        // init default columns\n        this.rowDetailExpandColumn = this.factoryResolver\n            .resolveComponentFactory(DTDetailRowExpanderComponent).create(this.injector).instance;\n\n\n        this.multiSelectColumn = this.factoryResolver\n            .resolveComponentFactory(DTMultiSelectColumnComponent).create(this.injector).instance;\n\n        this.singleSelectColumn = this.factoryResolver\n            .resolveComponentFactory(DTSingleSelectColumnComponent).create(this.injector).instance;\n\n        /**\n         * If the data are not deferred and we get list directly then it creates DS. If\n         * ngOnChanges is called first we properly init DS and clean this.list\n         *\n         */\n        if (isPresent(this.destinationClass) || isPresent(this.list)) {\n            this.initDatasource();\n\n        } else if (this.dataSource.initialized) {\n            this.initDatasource(false);\n        }\n\n        // since we work with references let's pass created map inside our state\n        this.outlineState.expansionStates = this.state.outlineState;\n    }\n\n    /**\n     * When data arrives later maybe due to REST API latency, initialize DS only when we have a\n     * data, otherwise if data changed thru the bindings just trigger dataChange event\n     *\n     */\n    ngOnChanges(changes: SimpleChanges): void\n    {\n        super.ngOnChanges(changes);\n\n        if (changes['list'] && isPresent(changes['list'].currentValue)\n            && !this.dataSource.initialized)\n        {\n\n            this.initDatasource();\n\n        } else if (this.dataSource.initialized) {\n            this.dataSource.dataProvider.dataChanges.next(this.list);\n        }\n\n    }\n\n    ngAfterContentInit()\n    {\n\n        // make sure we init a state when detail column is present\n        // todo: move this initialization to datasource\n        this.detailRowExpansionState.detailExpansionEnabled = isPresent(this.rowDetailColumn);\n\n        this.initColumns();\n        this.columnsSubscription = this.colsQuery.changes.subscribe(_ =>\n        {\n            this.initColumns();\n            this.changeDetector.markForCheck();\n        });\n    }\n\n    ngAfterViewInit()\n    {\n        // assign it programatically as we want to have a context for the filter\n        if (isPresent(this.rowDetailColumn) && isPresent(this.outlineState.outlineFor)) {\n            this.outlineState.outlineFor.filterOut = this.skipOutlineItem.bind(this);\n        }\n\n        if (isPresent(this.outlineState.outlineFor)) {\n            // this.outlineState.outlineFor.changeDetector.detach();\n            // this.outlineState.outlineFor.changeDetector.detectChanges();\n        }\n\n        this.initialized = true;\n    }\n\n    ngAfterViewChecked()\n    {\n        if (this.columnsChanged && this.el.nativeElement.offsetParent) {\n            this.columnsChanged = false;\n        }\n\n        if (this.hasFrozenColumns()) {\n            this.frozenColumns.forEach((col: DTColumn2Component, index: number) =>\n                col.postInitialize(index));\n        } else {\n            this.columns.forEach((col: DTColumn2Component, index: number) =>\n                col.postInitialize(index));\n        }\n    }\n\n    /**\n     * Key entry method that initialized our columns. Later on when we will support selection and\n     * multiselection we will programmatically instantiate SingleSelection, MultiSelection column\n     * components and add them to the list so they can be rendered.\n     *\n     * so the idea here is:\n     *\n     * When DT component initialize and we are in editing mode and we support Single/Multi selection\n     * we will use ComponentFactoryResolver to create component and add it as first item to the list\n     * and then it will be rendered just like anythign else.\n     *\n     */\n    initColumns(): void\n    {\n        this.columns = [];\n        this.frozenColumns = [];\n\n        if (this.detailRowExpansionState.detailExpansionEnabled) {\n            this.initDetailColumnExpansion();\n        }\n        if (this.hasLeadingSelectColumn() && this.selectionMode === 'multi') {\n            this.multiSelectColumn.initialize(this);\n            this.columns.push(this.multiSelectColumn);\n        } else if (this.hasLeadingSelectColumn() && this.selectionMode === 'single') {\n            this.singleSelectColumn.initialize(this);\n            this.columns.push(this.singleSelectColumn);\n        }\n\n        /**\n         * Add expansion column when detail row is enabled\n         */\n        if (this.detailRowExpansionState.detailExpansionEnabled && !this.isOutline()) {\n            this.rowDetailExpandColumn.initialize(this);\n            this.columns.push(this.rowDetailExpandColumn);\n        }\n\n        this.colsQuery\n            .filter((col1: DTColumn2Component) => !col1.frozen)\n            .forEach((col: DTColumn2Component) =>\n            {\n                col.initialize(this);\n                this.columns.push(col);\n            });\n\n        this.initFrozenColumns();\n        this.initColumnInfo();\n        this.columnsChanged = true;\n    }\n\n    /**\n     * Check if current column is programmatically created\n     *\n     */\n    isInternalColumn(col: DTColumn2Component): boolean\n    {\n        return col instanceof DTSingleSelectColumnComponent ||\n            col instanceof DTMultiSelectColumnComponent ||\n            col instanceof DTDetailRowExpanderComponent;\n\n    }\n\n    /**\n     * Create new Datasource based on passed values. It tries to initialize DS for first time\n     * inside the ngInit but in case Data arrives later maybe due to some REST API calls this\n     * can be triggered also from ngOnChanges.\n     *\n     */\n    initDatasource(initialize: boolean = true): void\n    {\n        if (isBlank(this.state)) {\n            this.state = Datatable2State.create(0, this.pageSize, this.displayRowSize,\n                this.initialSortKey, this.sortOrderingForString(this.initialSortOrder));\n        } else {\n            this.state.limit = this.state.displayLimit = this.displayRowSize;\n            if (isPresent(this.initialSortKey)) {\n                this.state.sortKey = this.initialSortKey;\n                this.state.sortOrder = this.sortOrderingForString(this.initialSortOrder);\n            }\n        }\n\n        if (initialize) {\n\n            let qType = (this.isOutline() && this.outlineFormat === 'tree') ?\n                QueryType.FullTextOutline : QueryType.FullText;\n\n            this.dataSource.init({\n                obj: isPresent(this.destinationClass) ? this.destinationClass : this.list,\n                queryType: qType,\n                state: this.state,\n                multiselect: false\n            });\n        }\n        this.dataSource.fetch(this.state);\n\n        // reset list to make sure it comes from DataProvider, we use list  to initialize\n        this.list = null;\n\n        // This is the ENTRY point for the DATA CHANGES. All addition, edits, deletion ends up\n        // here. We dont work directly with LIST. Any change is reactive and here is listener\n        this.dataSource.open().subscribe((data: any[]) =>\n        {\n            this.updateList(data);\n        });\n    }\n\n    /**\n     * When detailRow column is present we initialize a state holding information which item is\n     * expanded.\n     *\n     * todo: This is temporary here and once we suport lazy loading move this to datasource.\n     *\n     * For example for outline tree table we need to connect a state from outline with a state in\n     * here as we are using outline control to expand and collapse items\n     */\n    initDetailColumnExpansion(): void\n    {\n        if (isPresent(this.rowDetailColumn)) {\n            this.rowDetailColumn.initialize(this);\n        }\n        this.detailRowExpansionState.detailExpansionEnabled = isPresent(this.rowDetailColumn) &&\n            BooleanWrapper.isTrue(this.showRowDetailExpansionControl);\n    }\n\n    /**\n     * This method is executed after we initialize all the columns in order to calculate correct\n     * numbers used for indentation while rendering selection columns as well as detail row columns.\n     *\n     * Here we need to be aware how many columns to span\n     *\n     */\n    initColumnInfo(): void\n    {\n        this.numberOfColsBeforeData = 0;\n\n        this.columns.forEach((col: DTColumn2Component) =>\n        {\n            if (!col.isValueColumn()) {\n                this.numberOfColsBeforeData++;\n            }\n        });\n\n        if (this.indentDetailRow) {\n            this.numberOfColsBeforeData++;\n        }\n\n        this.startOfFirstDataColumn = this.columns.length - this.numberOfColsBeforeData;\n    }\n\n    /**\n     * See AWDataTable\n     *\n     */\n    onCellSelectionChange(cell: any, column: DTColumn2Component, item: any): void\n    {\n        if (this.selectionMode !== 'cell') {\n            return;\n        }\n        let lookupKey = {\n            col: column.key || column.label,\n            item: item\n        };\n        if (isPresent(this.state.selection) && this.state.selection.length > 0) {\n\n            let foundIndex = ListWrapper.findIndexComplex(this.state.selection, lookupKey);\n            let isSelected = foundIndex !== -1;\n\n            if (isSelected) {\n                this.state.selection = this.state.selection\n                    .filter((val: any, index: number) => index !== foundIndex);\n            } else {\n                this.state.selection = [...this.state.selection, lookupKey];\n            }\n        } else {\n            this.state.selection = [lookupKey];\n        }\n        this.onCellChange.emit(this.state.selection);\n    }\n\n    /**\n     * See AWDataTable\n     *\n     */\n    onHeaderSelectionChange(cell: any, column: DTColumn2Component): void\n    {\n        if (isPresent(this.state.headerSelection)) {\n            if (this.isHeaderSelected(column)) {\n                this.state.headerSelection = null;\n            } else {\n                this.state.headerSelection = column;\n            }\n        } else {\n            this.state.headerSelection = column;\n        }\n        this.onHeaderSelection.emit(this.state.headerSelection);\n    }\n\n    onHandleRowClicked(event: any, item: any): void\n    {\n        // special alt key modifier. When used with rows it indicates there is a D&D enabled\n        if (event.altKey) {\n            return;\n        }\n\n        if (this.selectionMode === 'multi') {\n            this.onRowToggle(event, item);\n\n        } else if (this.selectionMode === 'single') {\n            this.onRowSelect(event, item);\n        }\n    }\n\n    /**\n     * See AWDataTable\n     *\n     */\n    onRowToggle(event: any, item: any): void\n    {\n        let rowSelected = true;\n        if (isPresent(this.state.selection) && this.state.selection.length > 0) {\n            let foundIndex = ListWrapper.findIndexComplex(this.state.selection, item);\n            let isSelected = foundIndex !== -1;\n\n            if (isSelected) {\n                this.state.selection = this.state.selection\n                    .filter((val: any, index: number) => index !== foundIndex);\n\n                rowSelected = false;\n            } else {\n                this.state.selection = [...this.state.selection, item];\n            }\n\n            // for the outline go up and down the sync with treeitems\n            if (this.isOutline()) {\n                this.onHandleOutlineRowToggleToChildren(item, isSelected);\n                this.oHandleOutlineRowToggleToParent(item, isSelected);\n            }\n        } else {\n            this.state.selection = [item];\n\n            if (this.isOutline()) {\n                this.onHandleOutlineRowToggleToChildren(item, false);\n                this.oHandleOutlineRowToggleToParent(item, false);\n            }\n        }\n\n        this.onRowSelectionChange.emit({\n            isSelected: rowSelected,\n            item: this.state.selection\n        });\n\n        event.stopPropagation();\n    }\n\n    /**\n     * See AWDataTable\n     *\n     */\n    onRowSelect(event: any, item: any): void\n    {\n        this.state.selection = item;\n        event.stopPropagation();\n\n        this.onRowSelectionChange.emit(item);\n    }\n\n    /**\n     * See AWDataTable\n     *\n     */\n    onHandleOutlineRowToggleToChildren(currentItem: any, isSelected: boolean): void\n    {\n        let childrenForNode = this.children.apply(this.context, [currentItem]) || [];\n\n        if (childrenForNode.length > 0) {\n            // If is selected currently then toggle to other state\n            if (!isSelected) {\n                // when checking all from root, deselect children and add all\n                this.onHandleOutlineRowToggleToChildren(currentItem, true);\n                this.state.selection = [...this.state.selection, ...childrenForNode];\n\n            } else {\n                // remove each child\n                for (let child of childrenForNode) {\n                    let foundIndex = ListWrapper.findIndexComplex(this.state.selection, child);\n                    this.state.selection = this.state.selection\n                        .filter((val: any, index: number) => index !== foundIndex);\n                }\n            }\n\n            // apply the same for children of children\n            for (let child of childrenForNode) {\n                this.onHandleOutlineRowToggleToChildren(child, isSelected);\n            }\n        }\n    }\n\n    /**\n     * See AWDataTable\n     *\n     */\n    oHandleOutlineRowToggleToParent(currentItem: any, isSelected: boolean): void\n    {\n        let parent = currentItem.$$parentItem;\n        if (isPresent(parent)) {\n            let childrenForNode = this.children.apply(this.context, [parent]) || [];\n\n            let allSelected = true;\n            for (let child of childrenForNode) {\n                allSelected = ListWrapper.findIndexComplex(this.state.selection, child) !== -1\n                    && allSelected;\n            }\n\n            if (!isSelected) {\n                if (allSelected) {\n                    this.state.selection.push(parent);\n                }\n\n            } else {\n                if (!allSelected) {\n                    let parentIndex = ListWrapper.findIndexComplex(this.state.selection,\n                        parent);\n                    this.state.selection = this.state.selection\n                        .filter((val: any, index: number) => index !== parentIndex);\n                }\n            }\n            this.oHandleOutlineRowToggleToParent(currentItem.$$parentItem, isSelected);\n        }\n    }\n\n    /**\n     * See AWDataTable\n     *\n     */\n    onDnDRowDrop(origPos: number, newPos: number, dropPos: DropPosition): void\n    {\n        if (isPresent(this.dataSource)) {\n            // console.log('Dropping row #: ', origPos + ' ' + dropPos + ' row #: ' + newPos);\n            this.dataSource.reorderRows(origPos, newPos, dropPos);\n        }\n    }\n\n    /**\n     * See AWDataTable\n     *\n     */\n    onOutlineExpandChange(event: any): void\n    {\n        let item = event.item;\n\n        // We dont really need to store a state form outline locally as we are using the same object\n        // reference\n        // this.state.outlineState = this.outlineState.expansionStates;\n\n        if (this.canUseForDetailRow(item)) {\n            this.detailRowExpansionState.toggle(item);\n        }\n    }\n\n    /**\n     * See AWDataTable\n     *\n     *\n     */\n    sortSingle(): void\n    {\n        if (isPresent(this.list) && isPresent(this.sortColumn)) {\n\n            assert(isPresent(this.sortColumn.key), 'Invalid column to sort');\n            this.dataSource.sort(this.sortColumn.key, this.sortColumn.sortOrder);\n\n            this.onSort.emit({\n                field: this.sortColumn.key,\n                order: this.sortColumn.sortOrder\n            });\n        }\n    }\n\n    /**\n     * See AWDataTable\n     *\n     */\n    handleDataChange(): void\n    {\n        if (this.state.sortKey || this.sortColumn) {\n            if (!this.sortColumn && this.columns) {\n                this.sortColumn = this.columns.find(\n                    col => col.key === this.state.sortKey);\n            }\n        }\n\n        this.updateDataToRender();\n        this.valueChange.emit(this.list);\n    }\n\n    updateDataToRender(datasource?: any)\n    {\n        this.dataToRender = datasource || this.list;\n\n        if (isBlank(this.children) && isPresent(this.dataToRender)\n            && this.dataToRender.length > 0 && isOutlineNode(this.dataToRender[0]))\n        {\n            this.outlineFormat = 'tree';\n        }\n\n        // this.changeDetector.markForCheck();\n        this.changeDetector.detectChanges();\n    }\n\n    reset()\n    {\n        this.sortColumn = null;\n        this.updateDataToRender();\n    }\n\n    /**\n     * See AWDataTable\n     */\n    isHeaderSelected(item: DTColumn2Component): boolean\n    {\n        if (isBlank(this.state.headerSelection)) {\n            return false;\n        }\n\n        let colMatched = item.key || item.label;\n        let currentCol = this.state.headerSelection.key || this.state.headerSelection.label;\n        return colMatched === currentCol;\n    }\n\n    /**\n     *\n     * See AWDataTable\n     *\n     */\n    isBodyCellSelected(column: DTColumn2Component, item: any): boolean\n    {\n        let lookupKey = {\n            col: column.key || column.label,\n            item: item\n        };\n        return isPresent(this.state.selection) &&\n            ListWrapper.findIndexComplex(this.state.selection, lookupKey) !== -1;\n    }\n\n    /**\n     *  See AWDataTable\n     *\n     */\n    isRowSelected(item: any): boolean\n    {\n        if (this.hasLeadingSelectColumn() && isPresent(this.state.selection)) {\n\n            if (this.selectionMode === 'multi') {\n                return ListWrapper.findIndexComplex(this.state.selection, item) !== -1;\n\n            } else if (this.selectionMode === 'single') {\n                return equals(this.state.selection, item);\n            }\n        }\n        return false;\n    }\n\n    /**\n     *\n     * Do we have data to render Used inside template to tell if we should use the NoData template\n     *\n     */\n    isEmpty()\n    {\n        return isBlank(this.dataToRender) || (this.dataToRender.length === 0);\n    }\n\n    hasFrozenColumns(): boolean\n    {\n        return isPresent(this.frozenColumns) && this.frozenColumns.length > 0;\n    }\n\n    /**\n     * See AWDataTable\n     */\n    hasInvisibleSelectionColumn(): boolean\n    {\n        return this.hasLeadingSelectColumn() && !this.showSelectionColumn;\n    }\n\n    /**\n     *\n     * See AWDataTable\n     *\n     */\n    hasLeadingSelectColumn(): boolean\n    {\n        return this.selectionMode !== 'none' && this.selectionMode !== 'cell';\n    }\n\n    visibleColumns(): DTColumn2Component[]\n    {\n        return this.columns ? this.columns.filter(c => c.isVisible) : [];\n    }\n\n    /**\n     * See AWDataTable\n     *\n     */\n    sortOrderingForString(direction: string): number\n    {\n        if (isBlank(direction) || direction === 'ascending') {\n            return 1;\n        }\n\n        if (isBlank(direction) || direction === 'descending') {\n            return -1;\n        }\n        // todo: log bad key\n        return 1;\n    }\n\n    sortOrderingForNumber(direction: number): string\n    {\n        if (isBlank(direction) || direction === 1) {\n            return 'ascending';\n        }\n\n        if (isBlank(direction) || direction === -1) {\n            return 'descending';\n        }\n        // todo: log bad key\n        return 'ascending';\n    }\n\n    /**\n     * See AWDataTable\n     *\n     */\n    toggleAllColumns(event: any): void\n    {\n        let currentItems = this.dataToRender || [];\n        let selectedObject = this.state.selection || [];\n        if (selectedObject.length >= currentItems.length) {\n            this.state.selection = [];\n        } else {\n            this.state.selection = [];\n            this.state.selection = [...currentItems];\n        }\n    }\n\n    /**\n     *\n     * See AWDataTable\n     *\n     */\n    isToggleAllColumnSelected(): boolean\n    {\n        let currentItems = this.dataToRender || [];\n        let selectedObject = this.state.selection || [];\n\n        return currentItems.length > 0 && selectedObject.length >= currentItems.length;\n    }\n\n    isToggleAllColumnDisabled(): boolean\n    {\n        let currentItems = this.dataToRender || [];\n\n        return currentItems.length === 0;\n    }\n\n    /**\n     *\n     * Used by template to decide if we need to render DetailRow template. We need to have\n     * DetailRow ContentChild and using DetailRow component [isVisibleFn] function binding we\n     * check if the item that is about to be rendered is eligible for detail row\n     *\n     */\n    showDetailColumn(item: any): boolean\n    {\n        if (this.canUseForDetailRow(item) && this.detailRowExpansionState.isExpanded(item)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     *\n     * See AWDataTable\n     *\n     */\n    isOutline(): boolean\n    {\n        return isPresent(this.children) || this.outlineFormat === 'tree';\n    }\n\n    /**\n     *\n     * When dealing with detail column (detail row) and outline all together we need have a\n     * mechanism to tell to the outline \"don't render the next level of items\" and use detail row.\n     * So certain item type needs to be skipped.\n     *\n     * The way we skip those item is we use isVisibleFn condition of the detail row and look ahead\n     * if we should skip next level.\n     *\n     */\n    skipOutlineItem(item: any): boolean\n    {\n        return this.canUseForDetailRow(item);\n    }\n\n    /**\n     *\n     * See AWDaTable\n     *\n     */\n    getValue(data: any, field: string): any\n    {\n        return FieldPath.getFieldValue(data, field);\n    }\n\n    ngOnDestroy()\n    {\n        super.ngOnDestroy();\n        if (this.columnsSubscription) {\n            this.columnsSubscription.unsubscribe();\n        }\n    }\n\n    /**\n     * Makes sure that we also include programmatic column if present. Move them to the correct\n     * array\n     *\n     */\n    private initFrozenColumns(): void\n    {\n        this.colsQuery\n            .filter((col1: DTColumn2Component) => col1.frozen)\n            .forEach((col: DTColumn2Component) =>\n            {\n                col.initialize(this);\n                this.frozenColumns.push(col);\n\n            });\n\n        if (this.frozenColumns.length > 0) {\n            // find last index of column that is internal / programmatic\n\n            let lastInx = this.columns.slice()\n                .reverse()\n                .findIndex((col: DTColumn2Component) => this.isInternalColumn(col));\n\n            if (lastInx !== -1) {\n                let idx = this.columns.length - 1 - lastInx;\n                let internalCols = this.columns.splice(0, idx + 1);\n                this.frozenColumns = [...internalCols, ...this.frozenColumns];\n\n            }\n\n            let hasValidCols = this.columns\n                .findIndex((col: DTColumn2Component) => isBlank(col.width)) === -1;\n\n            assert(hasValidCols || isPresent(this.scrollWidth),\n                'When using [frozen] binding you need specify [width] for each ' +\n                'column or [scrollWidth] on datatable!');\n\n\n            assert(isBlank(this.rowDetailColumn),\n                'You cannot combine aw-dt-detail-column with frozen columns!');\n\n        }\n    }\n\n    /**\n     * Updates current immutable list and trigger change detection. Need to wrap it with\n     * setTimeout as the change can easily come after view checked and this would result some errors\n     *\n     */\n    private updateList(newList: any[]): void\n    {\n        setTimeout(() =>\n        {\n            this.list = newList;\n            this.handleDataChange();\n        });\n    }\n\n    private canUseForDetailRow(item: any): boolean\n    {\n        return isPresent(this.rowDetailColumn) &&\n            (<DTDetailRowComponent>this.rowDetailColumn).showDetailRow(item);\n    }\n}\n\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    AfterViewChecked,\n    AfterViewInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    forwardRef,\n    Inject,\n    Input,\n    PLATFORM_ID,\n    Renderer2,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport {assert, Environment, isPresent} from '@aribaui/core';\nimport {Datatable2Component} from '../datatable2.component';\nimport {BaseComponent} from '../../../core/base.component';\nimport {of, Subject, Subscription} from 'rxjs';\nimport {debounceTime, distinctUntilChanged, switchMap} from 'rxjs/operators';\nimport {isPlatformBrowser} from '@angular/common';\nimport {InfiniteScrollComponent} from '../../../core/infite-scroll/infite-scroll.component';\nimport {DomUtilsService} from '../../../core/dom-utils.service';\nimport {DTColumn2Component} from '../column/dt-column.component';\n\n\n/**\n * Please see datatable for more detail description. But the main goal of this wrapper to remove\n * all the common surrounding parts around the datatable and make sure DT can focus only actual\n * header and body structure\n *\n * It is expected that wrapper also provides some code for the sliding up panel containing\n * buttons and other actions that will be used during editing\n *\n *\n * Todo: Extract the expand logic out into some directive or component or just a class\n *\n */\n@Component({\n    selector: 'aw-dt-wrapper',\n    templateUrl: 'table-wrapper.component.html',\n    styleUrls: ['table-wrapper.component.scss'],\n    encapsulation: ViewEncapsulation.None\n\n})\nexport class DTWrapper extends BaseComponent implements AfterViewInit, AfterViewChecked\n{\n\n    /**\n     * Color that is used by full screen div overlay to create expanding effect which needs to have\n     * little tent;\n     *\n     */\n    @Input()\n    expandColorFrom: string = '#f3f3f3';\n\n\n    /**\n     * Color that is used to set after we are in the full screen so our overlay div hide everything\n     * on the page\n     *\n     */\n    @Input()\n    expandColorTo: string = '#FFFFFF';\n\n\n    /**\n     *\n     * Table heading area offers developer to completely override the top bar where we have filters\n     * and others actions.\n     *\n     */\n    @ContentChild('headingArea')\n    heading: TemplateRef<any>;\n\n\n    /**\n     * Renders table headers and wraps them within thead tag\n     */\n    @ContentChild('headerRows')\n    headerRows: TemplateRef<any>;\n\n\n    /**\n     * Renders table body\n     */\n    @ContentChild('bodyRows')\n    bodyRows: TemplateRef<any>;\n\n\n    /**\n     * The same as heading template. We need to remove this dependency on primeNG so far it is using\n     * p-footer\n     */\n    @ContentChild('footerArea')\n    footer: TemplateRef<any>;\n\n\n    /**\n     * Div used to make the full screen expansion effect\n     */\n    @ViewChild('dtFullScreenOverlay')\n    dtFullScreenOverlay: ElementRef;\n\n\n    /**\n     * Reference to infite scroll. We are using this to trigger loading finish event so we can\n     * hide loading animation\n     */\n    @ViewChild('infiniteScroll')\n    infiniteScroll: InfiniteScrollComponent;\n\n\n    /**\n     * In order to debounce the typing we need to use subject\n     *\n     */\n    searchTerms = new Subject<string>();\n\n\n    /**\n     *  Specifies if we are in viewing/editing mode that can browse whole dataset lazily\n     *\n     */\n    isFullScreenMode = false;\n\n    /**\n     * Tells if we can support full screen mode - only available for the browser\n     *\n     */\n    supportFullScreen: boolean = true;\n    querySubscription: Subscription;\n    loadingSub: Subscription;\n    /**\n     *  Saves original bounding rect coordinates before we expand the DT to full screen\n     *\n     */\n    private dtBoundingClientRect: any;\n    /**\n     * Remembers original scroll position before we switch to full screen mode\n     */\n    private originalScrollPosition: number;\n\n    constructor(public env: Environment,\n                private render: Renderer2,\n                private thisElement: ElementRef,\n                private domUtils: DomUtilsService,\n                @Inject(PLATFORM_ID) private platformId: Object,\n                @Inject(forwardRef(() => Datatable2Component))\n                public dt: Datatable2Component)\n    {\n        super(env);\n    }\n\n\n    ngOnInit(): void\n    {\n        super.ngOnInit();\n\n        this.querySubscription = this.searchTerms.pipe(\n            // wait 300ms after each keystroke before considering the term\n            debounceTime(300),\n\n            // ignore new term if same as previous term\n            distinctUntilChanged(),\n\n            switchMap((term: string) => of(term))\n        ).subscribe((term: any) =>\n        {\n            if (isPresent(term)) {\n                this.dt.dataSource.find(term);\n            }\n        });\n\n        this.loadingSub = this.dt.valueChange\n            .subscribe((data: any) => this.loadingFinished());\n    }\n\n\n    /**\n     * Iterates over all columns marked as frozen and retrieve a width so we can update\n     * parent div\n     *\n     */\n    calculateFrozenWidth(): number\n    {\n        if (!this.dt.hasFrozenColumns()) {\n            return null;\n        }\n\n        let fWidth = 0;\n        this.dt.frozenColumns.forEach((col: DTColumn2Component) =>\n        {\n            if (col.maxWidthPx > 0) {\n                fWidth += col.widestCell;\n            } else {\n                fWidth += parseInt(col.width);\n            }\n\n        });\n        return fWidth;\n    }\n\n\n    /**\n     * When having two separate tables we need to make sure that rows of the tables are aligned.\n     *\n     * Therefore this method takes first column from each table read the height of the rows and set\n     * the max height to both rows.\n     *\n     *\n     */\n    alignTablesHeights(frozenView: any, unFrozenView: any): void\n    {\n        assert(isPresent(frozenView) && isPresent(frozenView),\n            'Cant align table views as one of the view is undefined');\n\n        let frozenRows: any[] = frozenView.querySelectorAll('table tr');\n        let unFrozenRows: any[] = unFrozenView.querySelectorAll('table tr');\n\n        assert(frozenRows.length === unFrozenRows.length,\n            'Frozen Column: Two tables does not much!');\n\n        Array.from(frozenRows).forEach((frozen: any, index: number) =>\n        {\n            let h = Math.max(frozen.offsetHeight, unFrozenRows[index].offsetHeight);\n            frozen.style.height = h + 'px';\n            unFrozenRows[index].style.height = h + 'px';\n        });\n    }\n\n    ngAfterViewInit(): void\n    {\n        this.initFullScreen();\n    }\n\n\n    ngAfterViewChecked(): void\n    {\n\n        if (this.dt.hasFrozenColumns()) {\n            let frozenView = this.thisElement.nativeElement.querySelector('.dt-body-frozen');\n            let unFrozenView = this.thisElement.nativeElement.querySelector('.dt-body-unfrozen');\n\n            let frozenWidth = this.calculateFrozenWidth();\n\n            frozenView.style.width = frozenWidth + 'px';\n            if (isPresent(unFrozenView)) {\n                // include border and create indent effect by having 1px white space\n                unFrozenView.style.left = (frozenWidth + 2) + 'px';\n                unFrozenView.style.width = unFrozenView.parentElement.offsetWidth\n                    - frozenView.offsetWidth + 'px';\n\n                this.alignTablesHeights(frozenView, unFrozenView);\n            }\n        }\n    }\n\n    ngOnDestroy(): void\n    {\n        super.ngOnDestroy();\n\n        if (isPresent(this.querySubscription)) {\n            this.querySubscription.unsubscribe();\n        }\n\n        if (isPresent(this.loadingSub)) {\n            this.loadingSub.unsubscribe();\n        }\n    }\n\n\n    /**\n     * FULL SCREEN MODE methods\n     */\n\n    /**\n     *\n     * When fullscreen functionality is enabled this method switches between norml and full screen\n     * mode\n     *\n     */\n    toggleFullScreen(event: any): void\n    {\n        if (this.isFullScreenMode) {\n            this.closeFullScreen(event);\n        } else {\n            this.openFullScreen(event);\n        }\n    }\n\n    /**\n     * To push this component to full screen mode or maybe full page mode we need run following:\n     *\n     *  - Execute expand transformation, where we have additional overlay div that we slowly expand\n     *  and this creates impression the DT is expanding\n     *\n     *  - apply full-screen class on top host element  - in this case its DataTable to switch\n     *  to absolute positioning\n     *\n     *  - make sure we are scrolled all the way up\n     *\n     *  - hide all the elements on the page so their dimension don't interfere with this table.\n     *\n     *\n     */\n    openFullScreen(event: any): void\n    {\n        this.isFullScreenMode = true;\n\n        this.runExpandEffect();\n        this.originalScrollPosition = window.pageYOffset;\n        window.scroll(0, 0);\n        this.toggleFullScreenOnDT(true);\n\n\n        // mark my element in the path that needs to stay\n        let parentNode = this.thisElement.nativeElement.parentNode;\n        while (isPresent(parentNode) && parentNode.tagName !== 'BODY') {\n            parentNode.classList.add('u-full-screen-element');\n            parentNode = parentNode.parentNode;\n        }\n        this.hideNonFullScreenElement(document.body);\n\n        this.dt.state.limit = Math.round(this.calculateLimit());\n        this.dt.dataSource.fetch(this.dt.state);\n\n        // once loaded set back correct page size we use when loading data\n        this.dt.state.limit = this.dt.pageSize;\n    }\n\n    /**\n     *\n     * The same like above method (openFullScreen) but in reverse order.\n     *\n     */\n    closeFullScreen(event: any): void\n    {\n        this.isFullScreenMode = false;\n\n        this.showNonFullScreenElement();\n        this.runCollapseEffect();\n        this.toggleFullScreenOnDT(false);\n\n        this.dt.dataSource.state.limit = this.dt.dataSource.state.displayLimit;\n        this.dt.dataSource.state.offset = 0;\n        this.dt.dataSource.fetch(this.dt.dataSource.state);\n\n        setTimeout(() =>\n        {\n            window.scroll(0, this.originalScrollPosition);\n        }, 300);\n    }\n\n    /**\n     * Applies set of set of css properties to make the DT main component on the page expand to\n     * full page mode and back\n     *\n     * We want to make it with little delay to let other animation finish\n     */\n    toggleFullScreenOnDT(fullScreen: boolean): void\n    {\n        this.dt.el.nativeElement.style.opacity = 0;\n        setTimeout(() =>\n        {\n            if (fullScreen) {\n                this.dt.classList += 'dt-full-screen';\n                this.dt.el.nativeElement.style.opacity = 1;\n\n            } else {\n                this.dt.classList = this.dt.classList.replace('dt-full-screen',\n                    '');\n                this.dt.el.nativeElement.style.opacity = 1;\n            }\n        }, 200);\n\n    }\n\n    /**\n     * Listen for infinite scroll event and request new data from data source\n     *\n     */\n    onLazyLoad(event: any): void\n    {\n        if (event.isLoad) {\n            this.dt.state.offset = event.offset;\n            this.dt.dataSource.fetch(this.dt.state);\n        } else {\n            let dataProvider = this.dt.dataSource.dataProvider;\n            let data = dataProvider.dataChanges.getValue();\n            dataProvider.dataChanges.next(data.slice(0, event.offset));\n        }\n    }\n\n    /**\n     * Creates animation effect to make it feel like the element (in this case DT) is expanding\n     * from the middle to the full page mode.\n     *\n     * We take the dimension of the table then it is scaled slowly to the full page\n     */\n    private runExpandEffect()\n    {\n        this.dtBoundingClientRect = this.thisElement.nativeElement.getBoundingClientRect();\n\n        this.updateElement();\n        this.dtFullScreenOverlay.nativeElement.style.backgroundColor = this.expandColorFrom;\n        this.dtFullScreenOverlay.nativeElement.style.opacity = 1;\n        this.applyTransformation(true);\n\n        setTimeout(() =>\n        {\n            this.dtFullScreenOverlay.nativeElement.style.backgroundColor = this.expandColorTo;\n        }, 300);\n    }\n\n    /**\n     * Applies the transformation and scale the helper div (overlay) down to make it look like\n     * it collapses\n     */\n    private runCollapseEffect()\n    {\n        this.updateElement();\n        this.applyTransformation(false);\n\n\n        setTimeout(() =>\n        {\n            this.updateElement();\n            this.dtFullScreenOverlay.nativeElement.style.opacity = 0;\n\n        }, 200);\n\n        setTimeout(() =>\n        {\n            this.updateElement(this.dtBoundingClientRect.left, this.dtBoundingClientRect.top, 0,\n                0);\n        }, 400);\n    }\n\n    /**\n     * DFS  - to go thru all the element under BODY and remove them from the page.\n     *\n     */\n    private hideNonFullScreenElement(parentElement: any): void\n    {\n        if (this.thisElement.nativeElement.parentNode === parentElement) {\n            return;\n        }\n\n        for (let i = 0; i < parentElement.children.length; i++) {\n            let element = parentElement.children[i];\n            if (this.needTraverseDown(element)) {\n                this.hideNonFullScreenElement(element);\n\n            } else if (!element.classList.contains('dt-full-screen')) {\n                element.classList.add('u-fs-element-out');\n            }\n        }\n    }\n\n    /**\n     * Put all the element that were previously removed by hideNonFullScreenElement() back\n     */\n    private showNonFullScreenElement(): void\n    {\n        Array.from(document.querySelectorAll('.u-fs-element-out'))\n            .forEach((elem: any) => elem.classList.remove('u-fs-element-out'));\n    }\n\n    /**\n     * @Internal\n     *\n     */\n    private needTraverseDown(element: any): boolean\n    {\n        return isPresent(element) && element.tagName !== 'SCRIPT' &&\n            element.classList.contains('u-full-screen-element') &&\n            !element.classList.contains('dt-full-screen');\n\n    }\n\n    /**\n     * When we enter full screen /page mode when need to calculate how many rows to load initially\n     *\n     */\n    private calculateLimit(): number\n    {\n        let browserH = this.domUtils.browserDimentions().height;\n        let rowH = this.dt.el.nativeElement.querySelector('tbody tr:first-child').offsetHeight;\n\n        return (isPresent(rowH) && rowH > 0) ? (browserH / rowH) + 20 : 50;\n    }\n\n    /**\n     * @Internal\n     *\n     */\n    private updateElement(l: number = this.dtBoundingClientRect.left,\n                          t: number = this.dtBoundingClientRect.top,\n                          w: number = this.dtBoundingClientRect.width,\n                          h: number = this.dtBoundingClientRect.height): void\n    {\n        this.dtFullScreenOverlay.nativeElement.style.left = l + 'px';\n        this.dtFullScreenOverlay.nativeElement.style.top = t + 'px';\n        this.dtFullScreenOverlay.nativeElement.style.width = w + 'px';\n        this.dtFullScreenOverlay.nativeElement.style.height = h + 'px';\n    }\n\n    /**\n     * @Internal\n     *\n     */\n    private applyTransformation(expand: boolean): void\n    {\n        let x, y, tx, ty;\n        if (expand) {\n            x = window.innerWidth / this.dtBoundingClientRect.width;\n            y = window.innerHeight / this.dtBoundingClientRect.height;\n            tx = (window.innerWidth / 2 - this.dtBoundingClientRect.width / 2\n                - this.dtBoundingClientRect.left) / x;\n            ty = (window.innerHeight / 2 - this.dtBoundingClientRect.height / 2\n                - this.dtBoundingClientRect.top) / y;\n\n        } else {\n            x = 1;\n            y = 1;\n            tx = this.dtBoundingClientRect.left;\n            ty = this.dtBoundingClientRect.top;\n        }\n\n        this.dtFullScreenOverlay.nativeElement.style.transform =\n            'scaleX(' + x + ') scaleY(' + y + ') translate3d(' + (tx) + 'px, ' + (ty) + 'px, 0px)';\n    }\n\n\n    /**\n     * INFINITE SCROLLING METHODS\n     */\n\n    private initFullScreen(): void\n    {\n        if (!isPlatformBrowser(this.platformId)) {\n            this.supportFullScreen = false;\n            return;\n        }\n\n        this.render.appendChild(document.body, this.dtFullScreenOverlay.nativeElement);\n    }\n\n    /**\n     * When loading is finished mark loading icon is done so we can hide it. I am using little\n     * delay to make the animation visible\n     */\n    private loadingFinished(): void\n    {\n        if (isPresent(this.infiniteScroll)) {\n            setTimeout(() => this.infiniteScroll.complete(), 200);\n\n        }\n    }\n}\n","import {AfterViewInit, Directive, ElementRef, Input, OnInit, Renderer2} from '@angular/core';\nimport {DTColumn2Component} from '../column/dt-column.component';\nimport {isPresent} from '@aribaui/core';\n\n/**\n *\n * This directive is responsible for checking and setting the widest content width onto\n * Column component as the widestCell property.\n *\n * We use this directive inside dt-column.component to store a current width for each td,th\n *\n *\n */\n@Directive({\n    selector: '[dtMaxWidth]'\n})\nexport class SetCellMaxWidthDirective implements OnInit, AfterViewInit\n{\n\n    @Input()\n    dtMaxWidth: number;\n\n    constructor(private element: ElementRef,\n                private render: Renderer2,\n                private td: DTColumn2Component)\n    {\n    }\n\n\n    ngOnInit(): void\n    {\n\n    }\n\n    ngAfterViewInit(): void\n    {\n        // console.log('Cell Max Width: ' + this.dtMaxWidth, this.dtMaxWidth > 0);\n        if (isPresent(this.dtMaxWidth) && this.dtMaxWidth > 0) {\n            let inlineData = this.element.nativeElement.querySelector('.dt-col-cell-data');\n            if (isPresent(inlineData)) {\n                inlineData.style.whiteSpace = 'nowrap';\n                inlineData.style.display = 'inline-block';\n                let cellWidth = inlineData.offsetWidth; // td\n                inlineData.style.whiteSpace = 'normal';\n                inlineData.style.display = 'inline';\n\n                if (!this.isInThresHold(cellWidth)) {\n                    return;\n                }\n\n                cellWidth += this.tdPadding();\n                if (cellWidth > this.td.widthPx) {\n                    if (cellWidth < this.dtMaxWidth) {\n                        this.td.widestCell = cellWidth > this.td.widestCell ? cellWidth :\n                            this.td.widestCell;\n\n                    } else if (cellWidth >= this.dtMaxWidth) {\n                        this.td.widestCell = (this.dtMaxWidth > this.td.widestCell)\n                            ? this.dtMaxWidth : this.td.widestCell;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     *\n     * Is the new width the same as the one already set on the column? If yes then probably\n     * new content does not differ that much. We still keep certain threshold as the new content\n     * width might differ 1 or 2 pixes depending how set the css.\n     *\n     * To make sure we resize column only if necessary because it could be original size\n     * is 400px but the new one is 401px since somewhere add some extra border we have this\n     * safe threshold\n     *\n     */\n    isInThresHold(newWidth: number): boolean\n    {\n        if (this.td.widestCell > 0) {\n            return Math.abs(this.td.widestCell - newWidth) > 3 && newWidth > this.td.widestCell;\n        }\n        return true;\n    }\n\n\n    private tdPadding(): number\n    {\n        let computedStyle = getComputedStyle(this.element.nativeElement);\n        let cell = parseInt(computedStyle.paddingLeft) || 0;\n        cell += parseInt(computedStyle.paddingRight) || 0;\n        cell += parseInt(computedStyle.borderRightWidth) || 0;\n        cell += parseInt(computedStyle.borderLeftWidth) || 0;\n\n        // plus give it some little space around the text so it nots px to px inner width of the td\n        // cuz it could wrap\n        cell += 5;\n\n        return cell;\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\n\nimport {\n    Directive, ElementRef, forwardRef, Inject, Input, NgZone, OnDestroy,\n    OnInit\n} from '@angular/core';\nimport {Datatable2Component} from '../datatable2.component';\nimport {DomUtilsService} from '../../../core/dom-utils.service';\nimport {isPresent} from '@aribaui/core';\nimport {DragDirection, DragEvents, DropPosition} from '../aw-datatable';\n\n\n/**\n * Directive used inside DT in order to support table rows re-ordering. This manages all the\n * D&D necessary logic for this functionality.\n *\n * [dtDraggableRow] is used inside the `rowTemplate` like this:\n *\n *\n * ```html\n *\n * <ng-template #rowTemplate let-rowData let-even='event\" let-odd=\"odd\" let-rowIndex=\"rowIndex\"\n *              let-nestingLevel=\"nestingLevel\" let-colsToRender=\"colsToRender\">\n *\n *     <tr #rowElement dtDraggableRow [dndRowIndex]=\"rowIndex\"\n *          class=\"dt-body-row\"\n *\n *\n *\n * ```\n *\n * which enabled or disables based on the used DT binding [dndRowEnabled]. By default its disabled.\n *\n *\n *\n */\n@Directive({\n    selector: '[dtDraggableRow]'\n})\nexport class DTDraggableRowDirective implements OnInit, OnDestroy\n{\n\n    /**\n     *\n     * Tells the directive if we enable middle row zone to create an effect that we are dropping\n     * into the row. Used for outline DT mainly.\n     *\n     */\n    @Input()\n    dropIntoEnabled: boolean = false;\n\n    /**\n     * Current TR index number\n     *\n     */\n    @Input()\n    dndRowIndex: number = 0;\n\n    /**\n     * Holds information about our dragging direction UP and DOWN in order to assign correct style\n     * that highlights the row at the top or bottom\n     *\n     */\n    private dragDir: DragDirection = DragDirection.None;\n\n    /**\n     * Indicates that we dragged our row and stopped in the middle of the other row\n     *\n     */\n    private inMiddle: boolean = false;\n\n    /**\n     *\n     * Current drag Y coordinates which is used together with the dragDir when assinging dragging\n     * direction.\n     *\n     */\n    private dragY: number = 0;\n\n    /**\n     * listeners handlers here - the return from .bind(this).\n     */\n    private eventHandlers: { [name: string]: any };\n\n    constructor(private element: ElementRef,\n                @Inject(forwardRef(() => Datatable2Component))\n                private dt: Datatable2Component,\n                private domUtils: DomUtilsService,\n                private ngZone: NgZone)\n    {\n    }\n\n\n    ngOnInit(): void\n    {\n        if (this.dt.dndRowEnabled) {\n            this.setupEventListeners();\n        }\n    }\n\n\n    ngOnDestroy(): void\n    {\n        if (this.dt.dndRowEnabled) {\n            this.releaseEventListeners();\n        }\n    }\n\n    /**\n     * Setups listeners and returns handle to them so we can later on unsubscribe.\n     */\n    private setupEventListeners(): void\n    {\n        this.ngZone.runOutsideAngular(() =>\n        {\n            this.eventHandlers = {};\n            this.eventHandlers['mousedown'] = this.onMouseDownEvent.bind(this);\n            this.element.nativeElement.addEventListener('mousedown',\n                this.eventHandlers['mousedown']);\n\n            this.eventHandlers['dragstart'] = this.onDragStartEvent.bind(this);\n            this.element.nativeElement.addEventListener('dragstart',\n                this.eventHandlers['dragstart']);\n\n            this.eventHandlers['dragover'] = this.onDragOverEvent.bind(this);\n            this.element.nativeElement.addEventListener('dragover',\n                this.eventHandlers['dragover']);\n\n            this.eventHandlers['dragleave'] = this.onDragLeaveEvent.bind(this);\n            this.element.nativeElement.addEventListener('dragleave',\n                this.eventHandlers['dragleave']);\n\n            this.eventHandlers['drop'] = this.onDropEvent.bind(this);\n            this.element.nativeElement.addEventListener('drop',\n                this.eventHandlers['drop']);\n\n            this.eventHandlers['dragend'] = this.onDragEndEvent.bind(this);\n            this.element.nativeElement.addEventListener('dragend',\n                this.eventHandlers['dragend']);\n        });\n    }\n\n    /**\n     * Removes all the created listeners inside destroy() callback\n     */\n    private releaseEventListeners(): void\n    {\n        DragEvents.forEach((name: string) =>\n        {\n            document.removeEventListener('name', this.eventHandlers[name]);\n        });\n    }\n\n\n    /**\n     *\n     * This is first event where we:\n     *\n     *  - Mark element draggable to enable D&D\n     *  - Set click position relative to the middle of the current row\n     *      This is mainly needed when we are trying to calculate something for\n     *      dropInto row (outline)\n     *\n     * event.target usually contains reference to TD element\n     */\n    private onMouseDownEvent(event: any): void\n    {\n        if (event.altKey && this.domUtils.hasParent(event.target, '.dt-row-draggable')) {\n            this.element.nativeElement.draggable = true;\n            let elToBeDragged = this.domUtils.elementDimensions(event.target);\n            this.dt.env.setValue('ddClickDeviance', (elToBeDragged.height / 2) - event.offsetY);\n\n        } else {\n            this.element.nativeElement.draggable = false;\n\n        }\n    }\n\n    /**\n     * This is second triggered event when the actual dragging starts. Here we need to disable\n     * dragged row and save information that are common to a table.\n     *\n     * Marking row disabled with the style .dt-row-dragging using setTimeout is needed as\n     * if we would go without it then D&D framework would create a copy of row in disabled state.\n     * Now we grab a row with active state and after a 200ms delay we disable the original row.\n     *\n     */\n    private onDragStartEvent(event: any): void\n    {\n        setTimeout(() =>\n        {\n            if (isPresent(event.target.classList)) {\n                event.target.classList.add('dt-row-dragging');\n            }\n        }, 200);\n\n        this.dt.env.setValue('isDragging', true);\n        this.dt.env.setValue('dndId', this.dndRowIndex);\n        event.dataTransfer.setData('text', this.dndRowIndex);\n    }\n\n    /**\n     *\n     * This events happens anytime as we drag over rows. This event triggered after certain\n     * delay. In here we calculate the mouse movement to identify if we are going UP or DOWN.\n     *\n     * This is mainly needed to mark a row with the correct line on TOP or BOTTOM to visually\n     * show a user where we are.\n     *\n     * Once we know the direction and the drop target is valid we mark the row with correct class\n     * that does the trick\n     */\n    private onDragOverEvent(event: any): void\n    {\n        event.dataTransfer.dropEffect = 'move';\n        if (this.dragY < event.pageY) {\n            this.dragDir = DragDirection.Down;\n        } else if (this.dragY > event.pageY) {\n            this.dragDir = DragDirection.Up;\n        }\n        // dont set again unless its different\n        if (this.dragY !== event.pageY) {\n            this.dragY = event.pageY;\n        }\n\n        if (this.isValidDropTarget(event)) {\n            // todo test this preventDefault() so it does not create some sideeffect\n            event.preventDefault();\n            this.markRowWithClass(event, this.domUtils.closest(event.target, 'tr'));\n        }\n    }\n\n    /**\n     * This is finishing event just before D&D is done. It takes current information and\n     * broadcast them to the DT so DT can do necessary row reordering\n     *\n     *\n     */\n    private onDropEvent(event: any): void\n    {\n        this.clearClasses(event.target.parentElement);\n        // event.preventDefault();\n\n        let origIndx = this.dt.env.getValue('dndId');\n        let dropPos: DropPosition = this.inMiddle ? DropPosition.Into : (\n            this.dragDir === DragDirection.Up ? DropPosition.Before : DropPosition.After\n        );\n        this.dt.onDnDRowDrop(origIndx, this.dndRowIndex, dropPos);\n\n        this.inMiddle = false;\n        this.dragY = 0;\n    }\n\n    /**\n     * Every time we drag over the element we apply some classes to the it. this method does the\n     * opposite which is to remove everything so we are ready for the next row\n     *\n     *\n     */\n    private onDragLeaveEvent(event: any): void\n    {\n        let tr = this.domUtils.closest(event.target, 'tr');\n        this.clearClasses(tr);\n\n        this.dt.env.deleteValue('dndOnHoldIndex');\n    }\n\n    /**\n     *\n     * This is last event within D&D flow. Mainly used to clean up all the resource that has not\n     * been clean up already inside onDropEvent.\n     *\n     */\n    private onDragEndEvent(event: any): void\n    {\n        if (isPresent(event.target.classList)) {\n            event.target.classList.remove('dt-row-dragging');\n        }\n\n        this.clearClasses(event.target);\n        this.element.nativeElement.draggable = false;\n        this.dt.env.deleteValue('isDragging');\n        this.dt.env.deleteValue('dndId');\n        this.dt.env.deleteValue('ddClickDeviance');\n    }\n\n\n    /**\n     * Assign CSS classes to the row to create an highlighting effect to capture current position\n     * for the user.\n     *\n     * Based on the Drag direction we either apply\n     * css class that creates a line on top or bottom.  Only for the dropInto functionality we\n     * need to calculate some more to identify if we are really in the middle of the row.\n     *\n     * DropInto:\n     * ---------\n     *\n     * Initially we captured a position (in mousedown) the distance to the middle of the row and\n     * this we are using here with some threshold of 2 pixes so we dont have to be exactly on pixel\n     * perfect.\n     *\n     * - let currentTrCenter = this.domUtils.elementDimensions(activeRow).height / 2;\n     *      Read center of current row\n     *\n     * - let draggedTrCenter = event.offsetY + this.dt.env.getValue('ddClickDeviance');\n     *      Read mouse coordinates relative to current row/td and add to it our deviation.\n     *\n     *\n     */\n    private markRowWithClass(event: any, activeRow: any): void\n    {\n\n        this.clearClasses(activeRow);\n\n        // Check if drag item is in the middle of other row\n        let currentTrCenter = this.domUtils.elementDimensions(activeRow).height / 2;\n        let draggedTrCenter = event.offsetY + this.dt.env.getValue('ddClickDeviance');\n\n        if (this.dropIntoEnabled) {\n            this.inMiddle = Math.abs(currentTrCenter - draggedTrCenter) < 2;\n        }\n\n        if (this.inMiddle) {\n            activeRow.classList.add(DragDirection.Middle);\n\n        } else {\n            activeRow.classList.add(this.dragDir);\n        }\n    }\n\n    /**\n     *\n     * Drop target must be only another TR and it cannot be the element itself the one we are\n     * dragging and it does not make sense to allow to drop to the same position we started from\n     *\n     */\n    private isValidDropTarget(event: any): boolean\n    {\n        let origInx = this.dt.env.getValue('dndId');\n        let siblingRow = this.dndRowIndex - origInx;\n\n        return event.target.parentElement.tagName === 'TR' && this.dndRowIndex !== origInx &&\n            !(siblingRow === 1 && this.dragDir === DragDirection.Up) &&\n            !(siblingRow === -1 && this.dragDir === DragDirection.Down);\n    }\n\n\n    /**\n     *  private\n     *\n     */\n    private clearClasses(tr: any): void\n    {\n        tr.classList.remove('dt-drag-row-top');\n        tr.classList.remove('dt-drag-row-bottom');\n        tr.classList.remove('dt-drag-row-both');\n    }\n\n    /**\n     *  private\n     *\n     */\n    private dragDirToString(): string\n    {\n        switch (this.dragDir) {\n            case DragDirection.Up:\n                return 'Up';\n            case DragDirection.Down:\n                return 'Down';\n            default:\n                return 'Not Sure';\n        }\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {AWCoreComponentModule} from '../../core/core.module';\nimport {AWOutlineForModule} from '../outline/outline-for.module';\nimport {Datatable2Component} from './datatable2.component';\nimport {DTWrapper} from './table-wrapper/table-wrapper.component';\nimport {DTColumn2Component} from './column/dt-column.component';\nimport {AWInputFieldModule} from '../input-field/input-field.module';\nimport {DTHeaderComponent2} from './header/header.component';\nimport {DTDetailRowComponent} from './column/detail-row/dt-detail-row.component';\nimport {\n    DTDetailRowExpanderComponent\n} from './column/detail-row-expander/dt-detail-row-expander.component';\nimport {\n    DTMultiSelectColumnComponent\n} from './column/multi-select/dt-multi-select-column.component';\nimport {AWCheckBoxModule} from '../checkbox/check-box.module';\nimport {\n    DTSingleSelectColumnComponent\n} from './column/single-select/dt-single-select-column.component';\nimport {AWRadioButtonModule} from '../radio-button/radio-button.module';\nimport {SetCellMaxWidthDirective} from './directives/dt-cell-directives';\nimport {DTDraggableRowDirective} from './directives/dt-draggable-row.directive';\n\n\n@NgModule({\n    declarations: [\n        Datatable2Component,\n        DTWrapper,\n        DTColumn2Component,\n        DTHeaderComponent2,\n        DTDetailRowComponent,\n        DTDetailRowExpanderComponent,\n        DTMultiSelectColumnComponent,\n        DTSingleSelectColumnComponent,\n        DTDraggableRowDirective,\n        SetCellMaxWidthDirective\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        AWCoreComponentModule,\n        AWCheckBoxModule,\n        AWOutlineForModule,\n        AWRadioButtonModule,\n        AWInputFieldModule\n    ],\n    entryComponents: [\n        DTDetailRowExpanderComponent,\n        DTMultiSelectColumnComponent,\n        DTSingleSelectColumnComponent\n    ],\n    exports: [\n        Datatable2Component,\n        DTColumn2Component,\n        AWOutlineForModule,\n        DTHeaderComponent2,\n        DTDetailRowComponent\n    ],\n    providers: []\n})\nexport class AWDatatable2Module\n{\n}\n\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component} from '@angular/core';\n\n/**\n * An confirmation header area.\n *\n * See {@link ConfirmationComponent} for more explanation.\n */\n@Component({\n    selector: 'aw-confirmation-header',\n    template: '<ng-content></ng-content>'\n})\nexport class ConfirmationHeaderComponent\n{\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component} from '@angular/core';\n\n/**\n * An confirmation header area.\n *\n * See {@link ConfirmationComponent} for more explanation.\n */\n@Component({\n    selector: 'aw-confirmation-footer',\n    template: '<ng-content></ng-content>'\n})\nexport class ConfirmationFooterComponent\n{\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, ContentChild, EventEmitter, Input, Output} from '@angular/core';\nimport {Environment, isPresent} from '@aribaui/core';\nimport {ModalContainer} from '../../core/modal-service/modal-container';\nimport {ConfirmationHeaderComponent} from './confirmation-header.component';\nimport {ConfirmationFooterComponent} from './confirmation-footer.component';\n\n/**\n * Confirmation Component is a specific version of the dialog where it supports confirm and cancel\n * functionality. It behaves like a dialog, is modal, and not closable by default.\n *\n * There are three types of popup.\n *   1.  a regular dialog box that has header, body and footer. It's the most customizable.\n *   2.  a confirmation box is similar to a dialog box but has accept and reject action buttons.\n *   3.  a overlay, which is a very basic popup with what you put inside.\n *       It doesn't have header and footer.\n *\n * There are two ways to use any popup component.\n *   1.  Either directly by using component, aw-dialog, aw-confirmation or aw-overlay\n *   2.  or the ModalService  service.open(<ConfirmationComponent>), service.close()\n *\n * Usage:\n *    1.  Using ModalService directly to display a modal popup. This usage is a quick way to show\n *        a confirmation to the user.\n *\n *          this.modalService.open<ConfirmationComponent>(ConfirmationComponent, {\n *                        title: 'Confirmation',\n *                        body: ` Are you sure ? `,\n *                        width: 300,\n *                        onConfirm: () => {\n *                              this.confirmAction();\n *                        },\n *                        onCancel: () => {\n *                              this.cancelAction();\n *                        }\n *           });\n *\n *\n *   2.   Use the component inside your template.\n *\n *          @Component({\n *                selector: 'aw-page' ,\n *                           template: `\n *                              <aw-confirmation [title]=\"'Confirmation'\"\n *                                      [(visible)]=\"display\"\n *                                     (onConfirm)=\"confirmAction()\"\n *                                    (onCancel)=\"cancelAction()\">\n *                                       <i class=\"sap-icon icon-alert\"></i>\n *                                       Are you sure you want to delete your hard drive?\n *                            </aw-confirmation>\n *\n *                                   <aw-button [size]=\"'small'\" (click)=\"open()\">\n *                                       Open Confirmation\n *                                   </aw-button>\n *                  `\n *         export class MyPageComponent implements OnInit {\n *\n *                     display: boolean = false;\n *\n *                     confirmAction: string;\n *\n *                     constructor(private modalService: ModalService) {\n *                          super();\n *                       }\n *                     ngOnInit() { }\n *\n *                     open() {\n *                        this.display = true;\n *                     }\n *\n *                     confirmAction()  {\n *                        this.confirmAction = \"confirmed\";\n *                      }\n *\n *                      close() {\n *                         this.display = false;\n *                      }\n *\n *                      cancelAction() {\n *                          this.confirmAction = \"canceled\";\n *                      }\n *\n *       }\n *\n *\n */\n@Component({\n    selector: 'aw-confirmation',\n    templateUrl: 'confirmation.component.html',\n    styleUrls: ['confirmation.component.scss']\n})\nexport class ConfirmationComponent extends ModalContainer\n{\n    /**\n     * Title for the Dialog.  if title and 'TitleTemplate' are both set, titleTemplate takes\n     * precedence.\n     */\n    @Input()\n    title: string;\n\n    /**\n     * Body section for Dialog. Caller should use either the body string, or content projection\n     * to add values to the dialog. If both are used, they will both show up.\n     */\n    @Input()\n    body: string;\n\n    /**\n     * If you are not using custom buttons you can pass a label to OK action\n     *\n     * Default value is OK\n     */\n    @Input()\n    confirmActionLabel: string;\n\n    /**\n     * If you are not using custom buttons you can pass a label to Cancel action\n     *\n     * Default value is OK\n     */\n    @Input()\n    cancelActionLabel: string;\n\n\n    /**\n     * support two way data binding on visible property.\n     */\n    @Output()\n    visibleChange: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Whether there's an x at the top right that makes the dialog closable.\n     */\n    @Input()\n    closable: boolean = false;\n\n    /**\n     * Target element to attach the dialog. \"body\" or local ng-template variable are valid.\n     */\n    @Input()\n    appendTo: any;\n\n    /**\n     * Event fired when dialog is closed.\n     */\n    @Output()\n    onClose: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Event fired when the dialog is opened.\n     */\n    @Output()\n    onOpen: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Fired when user clicked on confirm button.\n     */\n    @Output()\n    onConfirm: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Fired when user clicked on cancel button.\n     */\n    @Output()\n    onCancel: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Header component. Usually contains the title.\n     */\n    @ContentChild(ConfirmationHeaderComponent) header: ConfirmationHeaderComponent;\n\n    /**\n     * Dialog footer. Usually contains buttons\n     */\n    @ContentChild(ConfirmationFooterComponent) footer: ConfirmationFooterComponent;\n\n\n    constructor(public env: Environment)\n    {\n        super(env);\n\n        this.width = 400;\n        this.height = 'auto';\n        // Todo: internationalize.\n        this.confirmActionLabel = 'Confirm';\n        this.cancelActionLabel = 'Cancel';\n    }\n\n    /**\n     * open confirmation.\n     */\n    open()\n    {\n        this.visible = true;\n        this.onOpen.emit();\n\n        this.visibleChange.emit(true);\n    }\n\n    /**\n     * close confirmation.\n     */\n    close()\n    {\n        this.visible = false;\n        this.onClose.emit();\n\n        // Important to make sure change is set on parent binding.\n        // Otherwise, the variable and dialog open/close state can be out\n        // of sync and we wouldn't trigger change detection.\n        this.visibleChange.emit(false);\n    }\n\n    /**\n     * Does the confirmation have header content?\n     */\n    hasHeader(): boolean\n    {\n        return isPresent(this.header);\n    }\n\n    /**\n     * Does the confirmation have footer content?\n     */\n    hasFooter(): boolean\n    {\n        return isPresent(this.footer);\n    }\n\n    /**\n     * Confirm action.\n     */\n    confirm()\n    {\n        this.close();\n        this.onConfirm.emit();\n    }\n\n    /**\n     * Cancel action.\n     */\n    cancel()\n    {\n        this.close();\n        this.onCancel.emit();\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {AWCoreComponentModule} from '../../core/core.module';\nimport {ConfirmationComponent} from './confirmation.component';\nimport {ConfirmationHeaderComponent} from './confirmation-header.component';\nimport {ConfirmationFooterComponent} from './confirmation-footer.component';\nimport {ModalComponent} from '../../core/modal-service/modal/modal.component';\nimport {AWDialogModule} from '../dialog/dialog.module';\nimport {AWButtonModule} from '../button/button.module';\n\n@NgModule({\n    declarations: [\n        ConfirmationComponent,\n        ConfirmationHeaderComponent,\n        ConfirmationFooterComponent\n    ],\n    imports: [\n        CommonModule,\n        AWCoreComponentModule,\n        AWDialogModule,\n        AWButtonModule\n    ],\n    entryComponents: [\n        ModalComponent,\n        ConfirmationComponent,\n        ConfirmationHeaderComponent,\n        ConfirmationFooterComponent\n    ],\n    exports: [\n        ConfirmationComponent,\n        ConfirmationHeaderComponent,\n        ConfirmationFooterComponent\n    ],\n    providers: []\n})\nexport class AWConfirmationModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, ElementRef, Input, SimpleChanges} from '@angular/core';\nimport {Environment, isBlank, isPresent} from '@aribaui/core';\nimport {BaseComponent} from '../../core/base.component';\n\n/**\n *\n * Container panel providing scrolling functionality for its children. You can configure this\n * container to let it to scroll its content either horizontally, vertically or let the content\n * wrap.\n *\n *\n * Usage is pretty simple:\n *\n *  ### Example using horizontal scroll (default behavior):\n *\n *  ```\n *            <aw-scrollable>\n *                  <w-demo-card> Card 1</w-demo-card>\n *                  <w-demo-card> Card 2</w-demo-card>\n *                  <w-demo-card> Card 3</w-demo-card>\n *                  <w-demo-card> Card 4</w-demo-card>\n *                  <w-demo-card> Card 5</w-demo-card>\n *                  <w-demo-card> Card 6</w-demo-card>\n *                  <w-demo-card> Card 7</w-demo-card>\n *                  <w-demo-card> Card 8</w-demo-card>\n *                  <w-demo-card> Card 9</w-demo-card>\n *              </aw-scrollable>\n *\n *  ```\n *\n *  ### Example using vertical scroll:\n *\n *  ```\n *            <aw-scrollable [direction]=\"'vertical'\" [height]=\"'40vh'\">\n *                  <w-demo-card> Card 1</w-demo-card>\n *                  <w-demo-card> Card 2</w-demo-card>\n *                  <w-demo-card> Card 3</w-demo-card>\n *                  <w-demo-card> Card 4</w-demo-card>\n *                  <w-demo-card> Card 5</w-demo-card>\n *                  <w-demo-card> Card 6</w-demo-card>\n *                  <w-demo-card> Card 7</w-demo-card>\n *                  <w-demo-card> Card 8</w-demo-card>\n *                  <w-demo-card> Card 9</w-demo-card>\n *              </aw-scrollable>\n *\n * ```\n *\n *  ### Example scrolling is disabled and content wraps and centers:\n *\n *  ```\n *            <aw-scrollable [direction]=\"'none'\" [alignment]=\"'center'\">\n *                  <w-demo-card> Card 1</w-demo-card>\n *                  <w-demo-card> Card 2</w-demo-card>\n *                  <w-demo-card> Card 3</w-demo-card>\n *                  <w-demo-card> Card 4</w-demo-card>\n *                  <w-demo-card> Card 5</w-demo-card>\n *                  <w-demo-card> Card 6</w-demo-card>\n *                  <w-demo-card> Card 7</w-demo-card>\n *                  <w-demo-card> Card 8</w-demo-card>\n *                  <w-demo-card> Card 9</w-demo-card>\n *              </aw-scrollable>\n *  ```\n *\n * ### Height property:\n *\n * When using \"horizontal scrolling\" it set \"flexbox-direction\" to \"row\" where height\n * is set automatically based on its content. The height should be always 100% when using\n * this in parent container.\n *\n * If \"vertical scrolling\" is used you need to make sure that:\n *   - your parent container sets the boundaries with correctly set width and height\n *   otherwise it will use 100% of the viewport\n *   - if used as standalone you need to limit the height otherwise it will expand to 100% of\n *   the document\n *\n *\n *\n *\n */\n@Component({\n    selector: 'aw-scrollable',\n    templateUrl: 'scrollable-container.component.html',\n    styleUrls: ['scrollable-container.component.scss']\n})\nexport class ScrollableContainerComponent extends BaseComponent\n{\n\n\n    /**\n     * Defines scrolling direction of the container meaning tells which overflow axies will be\n     * disabled or enabled.\n     *\n     * Default value is \"horizontal\": Here we lock overflow-y and overflow-x set to auto.\n     *\n     * When scrolling direction is \"vertical\" please make sure you maintain correct height and\n     * width.\n     *\n     */\n    @Input()\n    direction: ScrollingDirection = 'horizontal';\n\n    /**\n     * Defines how flexbox container items should be aligned. Default behavior is LEFT\n     *\n     */\n    @Input()\n    alignment: ContainerItemsAlignment = 'left';\n\n\n    /**\n     * Internal properties for calculated class list\n     */\n\n    layoutClass: string;\n\n\n    constructor(public env: Environment, public elementRef: ElementRef)\n    {\n        super(env);\n\n        this.height = '100%';\n        this.width = '100%';\n    }\n\n    ngOnInit()\n    {\n        this.initDefault();\n    }\n\n\n    /**\n     * Make sure we re-initialize default when Input Bindings changes\n     *\n     */\n    ngOnChanges(changes: SimpleChanges): void\n    {\n        this.initDefault();\n    }\n\n\n    /**\n     * Initialize default values and Calculates layout and alignment class. The reason for using\n     * these utility classes is that we can change the behavior anytime as compared to using\n     * directly [style.xxx] bindings.\n     *\n     * ### Direction flow class:\n     *  - u-scrollable-f<direction>\n     *\n     * ### Alignment class:\n     *  - u-scrollable-a<alignment>\n     *\n     */\n    private initDefault(): void\n    {\n        this.layoutClass = 'u-scrollable-fh';\n        if (this.direction === 'vertical') {\n            this.layoutClass = 'u-scrollable-fv';\n\n        }\n        if (this.direction === 'vertical-row') {\n            this.layoutClass = 'u-scrollable-fv-row';\n\n        } else if (this.direction === 'both') {\n            this.layoutClass = 'u-scrollable-fb';\n\n        } else if (this.direction === 'none') {\n            this.layoutClass = 'u-scrollable-fn';\n        }\n\n        this.layoutClass += ' u-scrollable-a' + this.alignment.substring(0, 1);\n\n        if (isPresent(this.styleClass)) {\n            this.layoutClass += ` ${this.styleClass}`;\n        }\n\n        // make sure we default width and height to some value in case somebody passes null\n        if (isBlank(this.width)) {\n            this.width = '100%';\n        }\n\n        if (isBlank(this.height)) {\n            this.height = '100%';\n        }\n    }\n\n\n    /**\n     * Tells if the horizontal scrollbar is visible\n     *\n     */\n    hasHorizontalScroll(): boolean\n    {\n        let scrollContainer = this.elementRef.nativeElement.querySelector('.w-scrollable');\n        return scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    }\n\n\n    /**\n     * Tells if the vertical scrollbar is visible\n     *\n     */\n    hasVerticalScroll(): boolean\n    {\n        let scrollContainer = this.elementRef.nativeElement.querySelector('.w-scrollable');\n        return scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    }\n}\n\n/**\n * ScrollingDirection is a new type that drives scrolling behavior:\n *  - horizontal => overflow-x: auto, overflow-y:hidden\n *  - vertical => overflow-x: hidden, overflow-y:auto\n *  - vertical-row => overflow-x: hidden, overflow-y:auto; flow: row wrap\n *  - both => overflow-x: auto, overflow-y:auto\n *  - none => sets flow-flow to row wrap\n */\nexport type ScrollingDirection = 'horizontal' | 'vertical' | 'vertical-row' | 'both' | 'none';\n\n\n/**\n *\n * Controls the justify-content property:\n *\n * - left => flex-start\n * - right => flex-end\n * - center => center\n * - justify => space-between\n *\n */\nexport type ContainerItemsAlignment = 'left' | 'right' | 'center' | 'justify';\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ScrollableContainerComponent} from './scrollable-container.component';\n\n\n@NgModule({\n    declarations: [\n        ScrollableContainerComponent\n    ],\n    imports: [\n        CommonModule\n    ],\n    entryComponents: [\n        ScrollableContainerComponent\n    ],\n    exports: [\n        ScrollableContainerComponent\n    ],\n    providers: []\n})\nexport class AWScrollableContainerModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    Component,\n    ContentChild,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    SkipSelf,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport {Environment, equals, isBlank, isPresent} from '@aribaui/core';\nimport {NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BaseFormComponent} from '../../core/base-form.component';\nimport {Listbox, SelectItem} from 'primeng/primeng';\nimport {CheckboxComponent} from '../checkbox/checkbox.component';\n\n\nexport const LB_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ListComponent),\n    multi: true\n};\n\n/**\n *\n * The List component represent a structure which contains a list of selectable items. Items\n * selection can be configured in single-selection, multi-selection or multi-selection with visible\n * checkboxes mode.\n * In addition it can display data inside 3 zones LEFT, MIDDLE and RIGHT in order to provide\n * easy way for application developer to layout its own custom content or even change out of box\n * behavior.\n *\n *\n *  ### Examples\n *\n *  1. Render simple single selection list\n *\n *  ```html\n *\n *      <aw-list [list]=\"list\"></aw-list>\n *\n *  ```\n *  2. Render list - multi selection with custom RIGHT content to show a CheckMark when item\n *  is selected\n *\n *  ```html\n *\n *   <aw-list #awlist [list]=\"list\"\n *                       height=\"150px\"\n *                       width=\"250px\"\n *                       [selectionMode]=\"'multi'\">\n *\n *                  <ng-template #right let-item>\n *\n *                      <span class=\"sap-icon\"\n *                            [ngClass]=\"{'icon-accept': awlist.pListBox.isSelected(item),\n *                            '': !awlist.pListBox.isSelected(item)}\">\n *\n *                      </span>\n *                  </ng-template>\n *   </aw-list>\n *\n *  ```\n *\n * 3. Render list - multi selection with visible checkboxes and custom MIDDLE content to change\n *  the way item name is rendered\n *\n *\n *\n *  ```html\n *\n *   <aw-list [list]=\"list\" height=\"180px\"\n *                       width=\"200px\"\n *                       [selection]=\"selection\"\n *                       [selectionMode]=\"'multiWithCheckbox'\">\n *\n *                  <ng-template #middle let-item>\n *                      XX-{{item.value}}\n *                  </ng-template>\n *    </aw-list>\n *\n *  ```\n *\n *\n *\n */\n@Component({\n    selector: 'aw-list',\n    templateUrl: './list.component.html',\n    styleUrls: ['./list.component.scss'],\n    providers: [\n        LB_CONTROL_VALUE_ACCESSOR,\n        {provide: BaseFormComponent, useExisting: forwardRef(() => ListComponent)}\n    ]\n})\nexport class ListComponent extends BaseFormComponent\n{\n\n    /**\n     * List of option that will show in the list. Please not that this list is current used to\n     * show limited number of items. It does not have any scrolling feature and lazy loading\n     *\n     */\n    @Input()\n    list: any[];\n\n    /**\n     * Items which was selected as a default values\n     */\n    @Input()\n    selection: any;\n\n    /**\n     * Component recognizes 3 modes: single, multi, multi with visible checkboxes\n     */\n    @Input()\n    selectionMode: SelectionMode = 'single';\n\n\n    /**\n     * Formatter used to format each selection for display.\n     *\n     */\n    @Input()\n    valueTransformer: (value: any) => string;\n\n    /**\n     * Used when dealing with object to identify specific field on the object forcomparison\n     */\n    @Input()\n    field: string;\n\n\n    /**\n     * Don't render Listbox border. Used for embedding this inside other components\n     *\n     */\n    @Input()\n    borderless: boolean = false;\n\n    /**\n     * Triggered when we double click on the list Item\n     *\n     */\n    @Output()\n    action: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Event fired when user select a item\n     *\n     */\n    @Output()\n    onSelection: EventEmitter<any> = new EventEmitter();\n\n\n    /**\n     * In case we want to override default behavior or Left zone. We expose this listBox in order to\n     * have access primeNg implementation\n     */\n    @ViewChild('listbox')\n    pListBox: Listbox;\n\n\n    /**\n     * Custom templates to override default behavior. The list item is divided into 3 zones\n     *\n     *\n     *  ------------------------------------------------------\n     *  |       |                                   |        |\n     *  |   L   |             M                     |   R    |\n     *  |       |                                   |        |\n     *  |       |                                   |        |\n     *  ------------------------------------------------------\n     *\n     *\n     */\n    @ContentChild('left')\n    lZoneTempl: TemplateRef<any>;\n\n    @ContentChild('middle')\n    mZoneTempl: TemplateRef<any>;\n\n    @ContentChild('right')\n    rZoneTempl: TemplateRef<any>;\n\n    /**\n     * Internal\n     */\n    internalList: SelectItem[];\n\n    listStyle: {[name: string]: any} = {};\n\n    isMultiple: boolean = false;\n    showCheckbox: boolean = false;\n\n\n    constructor(public env: Environment,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => BaseFormComponent))\n                protected parentContainer: BaseFormComponent)\n    {\n        super(env, parentContainer);\n    }\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n\n        this.isMultiple = this.selectionMode === 'multi' ||\n            this.selectionMode === 'multiWithCheckbox';\n        this.showCheckbox = this.selectionMode === 'multiWithCheckbox';\n\n        // cannot have both either we use field to get display value or valueTransformer\n        if (isPresent(this.field) && isPresent(this.valueTransformer)) {\n            throw new Error('You can have either [field] or [valueTransformer].');\n        }\n\n        if (isPresent(this.list)) {\n            this.initList();\n        } else {\n            throw new Error('Missing [list] binding.');\n        }\n\n        // Also add overflowY to make sure it can scroll and does not expand based on its content\n        if (isPresent(this.height)) {\n            this.listStyle['height'] = this.height;\n            this.listStyle['overflow-y'] = 'auto';\n        }\n\n        if (isPresent(this.width)) {\n            this.listStyle['width'] = this.width;\n        }\n\n        if (this.borderless) {\n            this.listStyle['border-color'] = 'transparent';\n        }\n\n        if (this.isStandalone) {\n            super.registerFormControl(this.selection);\n\n            if (isBlank(this.selection)) {\n                this.selection = this.formControl.value;\n            }\n        }\n    }\n\n\n    /**\n     *\n     * Since we are using <aw-checkbox> we need to have custom handling both when clicking on the\n     * checkbox as well as item text.\n     *\n     *\n     */\n    itemClicked(event: any, item: any, checkbox: CheckboxComponent): void\n    {\n        this.pListBox.onOptionClick(event, item);\n\n        event.stopPropagation();\n        event.preventDefault();\n    }\n\n    /**\n     * Internal\n     *\n     */\n    hasRightTempl(): boolean\n    {\n        return isPresent(this.rZoneTempl);\n    }\n\n    hasLeftTempl(): boolean\n    {\n        return isPresent(this.lZoneTempl);\n    }\n\n\n    hasMiddleTempl(): boolean\n    {\n        return isPresent(this.mZoneTempl);\n    }\n\n    /**\n     *\n     * Triggered by p-listbox component when item is selected. When state is managed internally\n     * we also update FormControl model.\n     *\n     */\n    onItemSelected(event: any): void\n    {\n        if (isBlank(event.value)) {\n            return;\n        }\n\n        this.onSelection.emit(event.value);\n        if (this.isStandalone) {\n            this.formControl.setValue(event.value, {emitEvent: true});\n        }\n        this.onModelChanged(event.value);\n    }\n\n\n    /**\n     * Internal. Please see ControlValueAccessor\n     *\n     */\n    writeValue(value: any)\n    {\n        if (!equals(value, this.selection)) {\n            this.selection = value;\n            if (this.isStandalone) {\n                this.formControl.setValue(value);\n            }\n        }\n    }\n\n    /**\n     * Translates external form of the list into PrimeNG expected format where it uses\n     * SelectionItem interface\n     */\n    private initList()\n    {\n        if (isPresent(this.list)) {\n            this.internalList = this.list.map((item: any) =>\n            {\n                return {label: this.displayValue(item), value: item};\n            });\n        }\n    }\n\n\n    /**\n     *  Generates label value for the list box.\n     *\n     */\n    private displayValue(item: any): string\n    {\n        if (isBlank(item)) {\n            return '';\n        }\n\n        let val = item.toString();\n        if (isPresent(this.field)) {\n            val = item[this.field];\n\n        } else if (isPresent(this.valueTransformer)) {\n            val = this.valueTransformer(item);\n        }\n        return val;\n    }\n}\n\n/**\n * List support these three selection modes\n *\n */\nexport type SelectionMode = 'single' | 'multi' | 'multiWithCheckbox';\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ListboxModule} from 'primeng/primeng';\nimport {ListComponent} from './list.component';\nimport {AWCheckBoxModule} from '../checkbox/check-box.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\n\n\n@NgModule({\n    declarations: [\n        ListComponent\n    ],\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        FormsModule,\n        ListboxModule,\n        AWCheckBoxModule\n\n    ],\n    entryComponents: [\n        ListComponent\n    ],\n    exports: [\n        ListComponent,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    providers: []\n})\nexport class AWListModule\n{\n}\n\n\n","/**\n * @license\n * @author amanul.chowdhury\n * Copyright 2018 SAP Ariba\n *\n * WizardProgressComponent can be used as a step progress\n * in a page that has multiple steps\n * `<aw-wizard-progress\n *  [steps]=\"steps\"\n *  [currentStep]=\"currentStep\"\n *  (stepChanged)=\"onStepChanged($event)\">\n * </aw-wizard-progress>`\n */\n\nimport {Component, EventEmitter, Input, Output} from '@angular/core';\n\nexport interface Step\n{\n    complete: boolean;\n    current: boolean;\n    title?: string;\n}\n\n@Component({\n    selector: 'aw-wizard-progress',\n    templateUrl: './wizard-progress.component.html',\n    styleUrls: ['./wizard-progress.component.scss']\n})\nexport class WizardProgressComponent\n{\n    @Input()\n    steps: Array<Step>;\n\n    @Input()\n    currentStep: number = 0;\n\n    @Output()\n    stepChanged: EventEmitter<any> = new EventEmitter<any>();\n\n    totalSteps: number = 0;\n\n    constructor()\n    {\n    }\n\n    ngOnInit()\n    {\n        if (this.steps) {\n            let currentIndex = this.steps.indexOf(this.steps.filter(step => step.current)[0]);\n            this.totalSteps = this.steps.length;\n            this.setCurrentStep(~currentIndex ? currentIndex : 0);\n        }\n    }\n\n    setCurrentStep(index: number = 0)\n    {\n        this.steps[index].current = true;\n        this.currentStep = index;\n        this.stepChanged.emit({current: this.currentStep});\n    }\n\n    goToStep(index: number)\n    {\n        if (!this.steps[index].complete) {\n            return;\n        }\n\n        let currentIndex = this.steps.indexOf(this.steps.filter(step => step.current)[0]);\n        this.steps[currentIndex].current = false;\n\n        this.setCurrentStep(index);\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {WizardProgressComponent} from './wizard-progress.component';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n    declarations: [\n        WizardProgressComponent\n    ],\n    imports: [\n        CommonModule\n    ],\n    entryComponents: [\n        WizardProgressComponent\n    ],\n    exports: [\n        WizardProgressComponent\n    ],\n    providers: []\n})\nexport class WizardProgressModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, Input} from '@angular/core';\nimport {BaseComponent} from '../../core/base.component';\nimport {Environment} from '@aribaui/core';\n\n\n/**\n * Renders a Toggle Switch\n *\n * ### Example\n *\n * ```typescript\n *\n *      @Component({\n *          selector: 'myToggleSection' ,\n *          template: '<aw-toggle [model]=\"inputValue\" [labelText]=\"labelText\" >\n *              </aw-toggle>'\n *      })\n *      export class MyNoteComponent\n *      {\n *          inputValue: boolean = false;\n *          labelText: string = 'my label';\n *      }\n *\n * ```\n */\n\n@Component({\n    selector: 'aw-toggle',\n    templateUrl: './toggle-switch.component.html',\n    styleUrls: ['./toggle-switch.component.scss']\n})\n\nexport class ToggleSwitchComponent extends BaseComponent\n{\n    /**\n     * toggle model\n     */\n    @Input() model: boolean = false;\n    /**\n     * label text\n     */\n    @Input() labelText: string;\n\n    constructor(public env: Environment)\n    {\n        super(env);\n    }\n\n    /**\n     * click handler for toggle\n     */\n    changeHandler()\n    {\n        this.model = !this.model;\n    }\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {ToggleSwitchComponent} from './toggle-switch.component';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n    declarations: [\n        ToggleSwitchComponent\n    ],\n    imports: [\n        CommonModule\n    ],\n    entryComponents: [\n        ToggleSwitchComponent\n    ],\n    exports: [\n        ToggleSwitchComponent\n    ],\n    providers: []\n})\nexport class ToggleSwitchModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    AfterContentInit, AfterViewInit,\n    Component,\n    EventEmitter,\n    Input,\n    OnInit,\n    Output,\n    ViewChild\n} from '@angular/core';\nimport {ModalContainer} from '../../core/modal-service/modal-container';\nimport {OverlayPanel} from 'primeng/primeng';\nimport {Environment} from '@aribaui/core';\n\n/**\n * Overlay Component is a simple version of the dialog where there's only content.\n * Overlay will appear at the position where the action performed trigger an overlay.\n *\n * There are three types of popup.\n *   1.  a regular dialog box that has header, body and footer. It's the most customizable.\n *   2.  a confirmation box is similar to a dialog box but has accept and reject action buttons.\n *   3.  a overlay, which is a very basic popup with what you put inside.\n *       It doesn't have header and footer.\n *\n * There are two ways to use any popup component.\n *   1.  Either directly by using component, aw-dialog, aw-confirmation or aw-overlay\n *   2.  or the ModalService  service.open(<OverlayComponent>), service.close()\n *\n * Usage:\n *    1.  Using ModalService directly to display a modal popup. The usage is a little tricky\n *        because angular currently doesn't support dynamic content projection.\n *\n *          let overlay = this.modalService.open<OverlayComponent>(OverlayComponent, {});\n *\n *            // Add content. There's not support for dynamic content projection yet.\n *            // So have add content directly.\n *            // This is probably not the best way.\n *          overlay.instance.overlay.el.nativeElement.querySelector(\".ui-overlaypanel-content\")\n *               .innerHTML = `<img style='width:300px;' src=\"sales.png\" alt=\"Sales Chart\" />`;\n *\n *          // delay the opening after ng lifecycle has been initialized.\n *          setTimeout(() => { overlay.instance.open(event); }, 1);\n *\n *\n *   2.   Use the component inside your template.\n *\n *          @Component({\n *                selector: 'aw-page' ,\n *                           template: `\n *                                <aw-overlay #overlay (onOpen)=\"overlayAction='open'\"\n *                                                     (onClose)=\"overlayAction='close'\">\n *                                      <img src=\"sales.png\" alt=\"Chart\"/>\n *                                </aw-overlay>\n *\n *                                <aw-button [size]=\"'small'\" (click)=\"overlay.open($event)\">\n *                                    Open Overlay\n *                                </aw-button>\n *                  `\n *         export class MyPageComponent implements OnInit {\n *\n *                     overlayAction: string;\n *\n *                     constructor(private modalService: ModalService) {\n *                          super();\n *                       }\n *                     ngOnInit() { }\n *       }\n *\n *\n */\n@Component({\n    selector: 'aw-overlay',\n    templateUrl: 'overlay.component.html',\n    styleUrls: ['overlay.component.scss']\n})\nexport class OverlayComponent extends ModalContainer implements OnInit, AfterContentInit,\n    AfterViewInit\n{\n    /**\n     * Enables hide overlay when outside is clicked.\n     */\n    @Input()\n    dismissable: boolean = true;\n\n    /**\n     * displays the close icon 'x' at top of right corner.\n     */\n    @Input()\n    showCloseIcon: boolean = false;\n    /**\n     * Target element to attach the overlay. \"body\" or local ng-template variable are valid.\n     */\n    @Input()\n    appendTo: any;\n\n    /**\n     * Event fired when overlay is closed.\n     */\n    @Output()\n    onClose: EventEmitter<any> = new EventEmitter();\n\n\n    /**\n     * Event fired just before overlay is closed\n     */\n    @Output()\n    beforeClose: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Event fired when the overlay is opened.\n     */\n    @Output()\n    onOpen: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * The internal overlay panel.\n     */\n    @ViewChild(OverlayPanel)\n    overlay: OverlayPanel;\n\n    constructor(public env: Environment)\n    {\n        super(env);\n    }\n\n    ngOnInit()\n    {\n    }\n\n    ngAfterContentInit(): void\n    {\n        // place holder to be overridden by Modal Service\n    }\n\n    ngAfterViewInit(): void\n    {\n        // place holder to be overridden by Modal Service\n    }\n\n\n    /**\n     * Open Overlay\n     * @param event\n     */\n    open(event: any)\n    {\n        setTimeout(() =>\n        {\n            this.overlay.show(event);\n            this.onOpened(null);\n        }, 1);\n    }\n\n    /**\n     * Close Overlay\n     */\n    close()\n    {\n        this.beforeClose.emit(null);\n        this.overlay.hide();\n    }\n\n\n    /**\n     * toggle open and close.\n     * @param event\n     */\n    toggle(event: any)\n    {\n        setTimeout(() =>\n        {\n            this.overlay.toggle(event);\n        }, 0);\n    }\n\n\n    onOpened(event: any): void\n    {\n        this.onOpen.emit(event);\n    }\n\n    onClosed(event: any): void\n    {\n        this.onClose.emit(event);\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {ChangeDetectorRef, Component, ElementRef, Input, ViewChild} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {assert, Environment, isBlank, isPresent} from '@aribaui/core';\nimport {BaseComponent} from '../../core/base.component';\nimport {OverlayComponent} from '../overlay/overlay.component';\n\n\n/**\n * Defines where the Card is positioned. It can be either:\n *    - above the triggering link\n *    - under the triggering link\n *    - completely on top of it - covering it. For this case there is none as no style is applied\n */\nexport enum HCCardPosition\n{\n    top,\n    bottom,\n    none\n}\n\n/**\n * Defines where the Card is positioned by default. Meaning where primeNG code put it.\n *\n * When there is allot of space on the sides >=  (Left or Right) is used\n * (paddedLeft, paddedRight) otherwise. When there is not much space and card container\n *  is not aligned (left, right) with the trigering icon but it is shifted to fit into the screen\n */\nenum HCCardAlignment\n{\n    left,\n    paddedLeft,\n    right,\n    paddedRight,\n    default\n}\n\n/**\n * Maps position to styles that are applied to the Card container. This is just to make it easier\n * as we are working with enumerations and have already enum type.\n *\n * u-hc-arrow-b: Arrow will appear at the bottom\n * u-hc-arrow-t: Arrow will appear at the top\n *\n * u-hc-shadow-t: Border shadow will appear at the top\n * u-hc-shadow-b: Border shadow will appear at the bottom\n */\nconst PositionToStyle = {\n    top: ' w-hc-panel-arrow u-hc-arrow-b u-hc-shadow-t',\n    bottom: ' w-hc-panel-arrow u-hc-arrow-t u-hc-shadow-b',\n    none: ''\n};\n\n\n/**\n *\n * Maps aligned Card container to custom styles in order to apply correct arrow\n *\n * -ll: Stands for Large Left (large: there is plenty of space around )\n * -lr: Stands for Large right\n * -sl: Stands for Small left (Small and resized screen where we try to fit card container\n * somewhere in between)\n * -sr: Stands for Large right\n *\n */\nconst AlignmentToStyle = {\n    left: ' u-hc-arrow-ll',\n    right: ' u-hc-arrow-lr',\n    paddedLeft: ' u-hc-arrow-sl',\n    paddedRight: ' u-hc-arrow-sr',\n    default: ' u-hc-arrow-ll',\n};\n\n/**\n * The HoverCard components adds hover behavior to text, the specified content is loaded\n * on the left or right side of the element.\n *\n * Todo: extends so we can wrap any element and any element can be triggering this. Not only\n * linkTitle\n *\n *\n * ### Example:\n *\n * ```\n *\n *   <aw-hover-card [linkTitle]=\"'Frank kolar'\">\n *       <h3>My Card Title</h3>\n *       <div>\n *\n *           This is my contents\n *\n *       </div>\n *\n *\n *    </aw-hover-card>\n * ```\n *\n * By default there is [forceClose]=true which forces the user to use X close icon\n *\n *\n *\n */\n@Component({\n    selector: 'aw-hover-card',\n    templateUrl: './hover-card.component.html',\n    styleUrls: ['./hover-card.component.scss']\n})\nexport class HoverCardComponent extends BaseComponent\n{\n\n    /**\n     * Default padding representing a height of the Arrow for which we need to vertically adjust\n     * Card container\n     *\n     */\n    public static readonly ArrowPad = 10;\n\n    /**\n     * Defines safe threshold where there might not be enough space around or Card is aligned with\n     * the left or right edge of the viewport for which we need to position the Arrow closer to the\n     * side of the card\n     *\n     */\n    public static readonly SpacingLimit = 50;\n\n\n    @Input()\n    linkTitle: string;\n\n    /**\n     * Should we keep the hover card open and force user to manually close\n     *\n     */\n    @Input()\n    forceClose: boolean = true;\n\n\n    /**\n     *\n     * This current workaround until we find better solution. PrimeNG overlays operates within\n     * its relative element so if the overlay is wrapped inside some other relative container\n     * the overlay content is croped by its parent and content is not visible.\n     *\n     * They have [appendTo] binding which we need to use for this purpose\n     *\n     */\n    @Input()\n    appendContentToBody: boolean = true;\n\n    /**\n     * Reference to OverlayComponent to can access PrimeNG component as well\n     */\n    @ViewChild('overlay')\n    awOverlay: OverlayComponent;\n\n\n    /**\n     *\n     * Internal style class to use to apply additional styles when it needs to show a Arrow on the\n     * card\n     *\n     */\n    arrowClass: string = '';\n\n\n    /**\n     * Internal properties to references template elements in order to calculate positioning\n     *\n     */\n    private titleAreaRect: any;\n    trigRect: any;\n    trigIconMiddle: any;\n\n    opening: boolean = false;\n\n    appendTo: 'body';\n\n    currrentPosition: HCCardPosition = HCCardPosition.none;\n\n    overlayOnAnimationStart: (event: AnimationEvent) => void;\n\n\n    /**\n     * In cases where we need to inject dynamic content using programmatic API we use this extra\n     * element which is outside of the <ng-content> and hidden and once the <ng-content>  of\n     * the component is shown we move this dynamic content into it.\n     *\n     */\n    dynamicContent: any;\n\n\n    constructor(protected elem: ElementRef, public env: Environment,\n                private cd: ChangeDetectorRef)\n    {\n        super(env);\n    }\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n\n        assert(isPresent(this.linkTitle), 'You must provide [linkTitle] binding !');\n\n        // make sure there is open HC when we start new component\n        this.env.deleteValue('hc-open');\n\n        if (!this.appendContentToBody) {\n            this.appendTo = null;\n        }\n\n        this.overlayOnAnimationStart = this.awOverlay.overlay.onAnimationStart;\n        this.awOverlay.overlay.onAnimationStart = (event: AnimationEvent) =>\n        {\n            this.overlayOnAnimationStart.call(this.awOverlay.overlay, event);\n\n            this.cardOpened();\n            this.onAnimationStart(event);\n        };\n\n        // this span is always available\n        this.dynamicContent = this.elem.nativeElement.querySelector('.u-ngcontent');\n    }\n\n\n    onAnimationStart(event: AnimationEvent): void\n    {\n        if (this.opening) {\n            let container = this.awOverlay.overlay.container;\n            let cntRect = container.getBoundingClientRect();\n            if (this.currrentPosition !== HCCardPosition.none) {\n                this.adjustCard(container, cntRect, this.awOverlay.overlay);\n\n            } else {\n                this.arrowClass = '';\n            }\n\n            this.opening = false;\n        }\n    }\n\n\n    injectDynamicContent(): void\n    {\n        if (this.awOverlay.overlay.visible) {\n            let overlayCnt = this.elem.nativeElement\n                .querySelector('.ui-overlaypanel-content .u-ngcontent');\n\n            if (isBlank(overlayCnt) && this.dynamicContent.children.length > 0) {\n                overlayCnt = this.elem.nativeElement.querySelector('.ui-overlaypanel-content');\n                overlayCnt.prepend(this.dynamicContent);\n                this.dynamicContent.style = 'block';\n            }\n        } else {\n            this.dynamicContent.style = 'none';\n        }\n    }\n\n    /**\n     * Init elements BoundingClientRect that we use for calculation\n     *\n     */\n    initElements(): void\n    {\n        let titleElem = this.elem.nativeElement.querySelector('.w-hc-title');\n        let triggerElem = this.elem.nativeElement.querySelector('.sap-icon');\n        this.titleAreaRect = titleElem.getBoundingClientRect();\n        this.trigRect = triggerElem.getBoundingClientRect();\n        this.trigIconMiddle = this.trigRect.width / 2;\n    }\n\n\n    /**\n     *\n     * Fires when user mouse over the triggering icon and opens up overlay component. To make sure\n     * only one Card is opened at the time it uses Environment to save extra information for it\n     *\n     *\n     */\n    openCard(event: any): any\n    {\n        if (isPresent(this.awOverlay) && !this.env.hasValue('hc-open')) {\n            this.awOverlay.open(event);\n            this.cd.detectChanges();\n            this.env.setValue('hc-open', true);\n        }\n    }\n\n\n    /**\n     *\n     * Fired at the end of the opening cycle when all is initialized and the card is about to\n     * fade in.\n     *\n     * This method first simulates displaying card by setting display:block and\n     * domHandler.absolutePosition so we can read dimensions and then later on position the card\n     * accordingly.\n     *\n     */\n    cardOpened(event?: any): void\n    {\n        let container = this.awOverlay.overlay.container;\n        let target = this.awOverlay.overlay.target;\n\n        this.openForAdjustments(container);\n        this.injectDynamicContent();\n\n        // pre-run positioning so we can calculate new coordinates\n        this.awOverlay.overlay.domHandler.absolutePosition(container, target);\n        let cntRect = container.getBoundingClientRect();\n        this.currrentPosition = this.positionForCard(container, cntRect);\n\n        this.applyStyleClass(container, cntRect, this.awOverlay.overlay);\n\n        this.closeForAdjustments(container);\n        this.opening = true;\n    }\n\n\n    /**\n     *\n     * When card is closed we need to release it and delete all the references from Environment\n     *\n     *\n     */\n    cardClosed(event: any): void\n    {\n        this.env.deleteValue('hc-open');\n    }\n\n\n    /**\n     *\n      * Before overlay is closed we hide internal content other it does little shake..\n     *\n     *\n     */\n    beforeClose(event: any): void\n    {\n        this.dynamicContent.style = 'none';\n    }\n\n    /**\n     *\n     * Applies style.TOP and style.LEFT to the container in order to reposition it and add\n     * extra arrow.\n     *\n     * First based on the initial position we apply style.TOP and depending if its on the\n     * top or bottom we apply either -HoverCardComponent.ArrowPad or +HoverCardComponent.ArrowPad.\n     *\n     * Then for positioning horizontally we use two types.\n     *  - When there is allot of space the arrow is 25% from the edge\n     *\n     *    -----^------------   or       -----------^----\n     *\n     *\n     *  - When there is less or none space we have only 10% far away form the edge\n     *\n     *    --^------------   or       -----------^--\n     *\n     *  Once we pick the correct positioning (25%, 10%) we need to recalculate and shift the card\n     *  either to the left or right.\n     *\n     */\n    adjustCard(container: any, containerRect: any, modalContainer: any): void\n    {\n        let diff = (this.currrentPosition === HCCardPosition.bottom) ? 1 : -1;\n        let scrollTop = modalContainer.domHandler.getWindowScrollTop();\n        let posWithScroll = containerRect.top + scrollTop;\n        container.style.top = (posWithScroll + (HoverCardComponent.ArrowPad * diff)) + 'px';\n\n        let alignment = this.alignmentForCard(containerRect, modalContainer);\n        container.style.left = this.calcLeftForAlignment(containerRect, alignment) + 'px';\n    }\n\n\n    applyStyleClass(container: any, containerRect: any, modalContainer: any): void\n    {\n\n        if (this.currrentPosition !== HCCardPosition.none) {\n            let alignment = this.alignmentForCard(containerRect, modalContainer);\n\n            this.arrowClass = (<any>PositionToStyle)[(<any>HCCardPosition)[this.currrentPosition]];\n            this.arrowClass += (<any>AlignmentToStyle)[(<any>HCCardAlignment)[alignment]];\n\n        } else {\n            this.arrowClass = '';\n        }\n    }\n\n    /**\n     *\n     * Detects if the card is going to be shown on the top of the Link label or under. Or if\n     * its covering it.\n     *\n     */\n    positionForCard(container: any, boundingRect: any): HCCardPosition\n    {\n        // secure this in case of IE returning undefined\n        let borderWidth = getComputedStyle(container).borderWidth;\n        let cntWidth = parseFloat(borderWidth || '0');\n        let pos = HCCardPosition.none;\n\n        if (this.trigRect.bottom < boundingRect.top) {\n            pos = HCCardPosition.bottom;\n        } else if (this.trigRect.top > (boundingRect.bottom - cntWidth)) {\n            pos = HCCardPosition.top;\n        }\n\n        return pos;\n    }\n\n\n    /**\n     *\n     * Detect horizontal alignment.\n     *\n     */\n    private alignmentForCard(boundingRect: any, modalContainer: any): HCCardAlignment\n    {\n        let alignment = HCCardAlignment.left;\n        let viewPort = modalContainer.domHandler.getViewport();\n\n        if (this.trigRect.left.toFixed(0) === boundingRect.left.toFixed(0) &&\n            boundingRect.left > HoverCardComponent.SpacingLimit)\n        {\n            alignment = HCCardAlignment.left;\n\n        } else if (boundingRect.left < HoverCardComponent.SpacingLimit) {\n            alignment = HCCardAlignment.paddedLeft;\n\n        } else if ((viewPort.width - boundingRect.right) < HoverCardComponent.SpacingLimit) {\n            alignment = HCCardAlignment.paddedRight;\n\n        } else if (this.trigRect.right.toFixed(0) === boundingRect.right.toFixed(0) ||\n            (viewPort.width - boundingRect.right) > HoverCardComponent.SpacingLimit)\n        {\n            alignment = HCCardAlignment.right;\n\n        } else {\n            alignment = HCCardAlignment.default;\n        }\n        return alignment;\n    }\n\n    /**\n     *\n     * Turn on temporary display to BLOCK so we can read dimensions\n     *\n     */\n    openForAdjustments(container: any): void\n    {\n        container.style.visibility = 'hidden';\n        container.style.display = 'block';\n\n        this.initElements();\n    }\n\n\n    /**\n     *\n     * Turn off display back NONE\n     *\n     */\n    closeForAdjustments(container: any): void\n    {\n        container.style.visibility = 'visible';\n        // container.style.display = 'none';\n    }\n\n\n    /**\n     *\n     * Calculates positioning for style.LEFT. As already said they are two types of triangles that\n     * are applies for these case:\n     *\n     *\n     * a) Large left, Large right\n     *\n     *  PrimeNG aligns the card with either the right side or left side of the triggering icon\n     *\n     *\n     *  V                                                                V\n     *  ......^........................ or  .......................^......\n     *\n     *\n     *\n     *\n     *  b) Small left , small right\n     *\n     *  This is for cases where there is not enough space and PrimeNG position the card off to the\n     *  triggering icons, so even primeNg does not have space to align it with the V\n     *\n     *\n     *     V                                                      V\n     *  ....^........................ or  .......................^....\n     *\n     *\n     * c)Aligned with the edge of browser\n     *\n     * On the right side this is problem as we cannot calculate full future width of the card.\n     * but we applly for this case #b (arrow 10% )\n     *\n     *\n     *\n     */\n    private calcLeftForAlignment(boundingRect: any, alignment: HCCardAlignment): number\n    {\n        // width for which we need to shift card. 25% or 10% of the container width\n        let wLargeTriangle = boundingRect.width * 0.25;\n        let wSmallTriangle = boundingRect.width * 0.10;\n\n        switch (alignment) {\n            case HCCardAlignment.right:\n                let shiftRight = boundingRect.left + wLargeTriangle;\n                let trigRight = this.trigRect.right - this.trigIconMiddle;\n                return shiftRight - (boundingRect.right - trigRight);\n\n            case HCCardAlignment.paddedRight:\n                let shiftRightS = boundingRect.left + wSmallTriangle;\n                let trigRightS = this.trigRect.right - this.trigIconMiddle;\n                return shiftRightS - (boundingRect.right - trigRightS);\n\n\n            case HCCardAlignment.paddedLeft:\n                let shiftLeftPad = boundingRect.left - wSmallTriangle;\n                return shiftLeftPad + this.trigIconMiddle;\n\n            case HCCardAlignment.left:\n            default:\n                let shiftLeft = boundingRect.left - wLargeTriangle;\n                return shiftLeft + this.trigIconMiddle;\n        }\n    }\n}\n\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewChecked,\n    AfterViewInit,\n    Directive,\n    DoCheck,\n    ElementRef,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChange\n} from '@angular/core';\nimport {isPresent, print} from '@aribaui/core';\n\n\n/**\n * Spy lifecycle directive is used for debugging purposes to track lifecycle callback\n *\n * ###Usage\n *\n * ```\n *   <my-directive spyhooks><my-directive>\n *\n * ```\n */\n@Directive({selector: '[spyHooks]'})\nexport class SpyLifeCycleHooksDirective implements OnDestroy, OnInit, DoCheck, OnChanges,\n    AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked\n{\n\n    constructor(private elementRef: ElementRef)\n    {\n    }\n\n\n    ngOnInit()\n    {\n        this.logIt('onInit');\n    }\n\n    ngOnDestroy()\n    {\n        this.logIt('onDestroy');\n    }\n\n\n    ngOnChanges(changes: {[ propName: string]: SimpleChange})\n    {\n        this.logIt('ngOnChanges = ' + changes);\n    }\n\n    ngDoCheck()\n    {\n        this.logIt('ngDoCheck');\n    }\n\n    ngAfterContentInit()\n    {\n        this.logIt('ngAfterContentInit');\n    }\n\n    ngAfterContentChecked()\n    {\n\n        this.logIt('ngAfterContentChecked');\n    }\n\n    ngAfterViewInit()\n    {\n        this.logIt('ngAfterViewInit');\n    }\n\n    ngAfterViewChecked()\n    {\n        this.logIt('ngAfterViewChecked');\n    }\n\n    private logIt(msg: string)\n    {\n        let level = 0;\n        let me = this.elementRef.nativeElement;\n        let tagBody = me;\n\n        while ((tagBody = tagBody.parentNode) != null) {\n            level++;\n            if (tagBody.tagName === 'APP-ROOT' || level === 6) {\n                break;\n            }\n        }\n        let indent = '';\n        let indentNumber = level;\n        while (level > 0) {\n            indent += '\\t';\n            level--;\n        }\n\n\n        let params = '';\n        if (isPresent(me.attributes)) {\n            for (let i = 0; i < me.attributes.length; i++) {\n                let attr: Attr = me.attributes.item(i);\n                if (this.ignore(attr.name.toLowerCase())) {\n                    continue;\n                }\n\n\n                params += '(' + attr.name + '=' + attr.value + '),  ';\n            }\n        }\n        print(indent + me.tagName + '(' + indentNumber + '): ' + msg + ' => ' + params);\n    }\n\n    private ignore(name: string): boolean\n    {\n        return name.indexOf('_ng') > -1 ||\n            name.indexOf('ng-') > -1 ||\n            name.indexOf('spyhooks') > -1;\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {AWCoreComponentModule} from '../../core/core.module';\nimport {OverlayComponent} from './overlay.component';\nimport {OverlayPanelModule} from 'primeng/primeng';\n\n@NgModule({\n    declarations: [\n        OverlayComponent\n    ],\n    imports: [\n        CommonModule,\n        AWCoreComponentModule,\n        OverlayPanelModule\n    ],\n    entryComponents: [\n        OverlayComponent\n    ],\n    exports: [\n        OverlayComponent,\n        AWCoreComponentModule\n    ],\n    providers: []\n})\nexport class AWOverlayModule\n{\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {HoverCardComponent} from './hover-card.component';\nimport {AWOverlayModule} from '../overlay/overlay.module';\nimport {AWStringFieldModule} from '../string/string.module';\n\n\n@NgModule({\n    declarations: [\n        HoverCardComponent\n    ],\n    imports: [\n        CommonModule,\n        AWOverlayModule,\n        AWStringFieldModule\n    ],\n    entryComponents: [\n        HoverCardComponent\n    ],\n    exports: [\n        HoverCardComponent\n    ],\n    providers: []\n})\nexport class AWHoverCardModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {APP_INITIALIZER, ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {\n    AccordionModule,\n    AutoCompleteModule,\n    ButtonModule,\n    CalendarModule,\n    Checkbox,\n    CheckboxModule,\n    DataTableModule,\n    Dialog,\n    DialogModule,\n    DropdownModule,\n    EditorModule,\n    InputTextareaModule,\n    InputTextModule,\n    MenuModule,\n    OverlayPanelModule,\n    PaginatorModule,\n    PanelModule,\n    RadioButtonModule,\n    SharedModule,\n    TabMenuModule,\n    ToolbarModule,\n    TreeModule\n} from 'primeng/primeng';\nimport {AribaCoreModule} from '@aribaui/core';\nimport {SpyLifeCycleHooksDirective} from './spy-lifecycle.directive';\nimport {EmbeddedItemDirective} from './core/embedded-item';\nimport {ComponentRegistry} from './core/component-registry.service';\nimport * as components from './entry-components';\nimport {AWCoreComponentModule} from './core/core.module';\nimport {AWBasicNavigatorModule} from './widgets/basic-navigator/basic-navigator.module';\nimport {AWCheckBoxListModule} from './widgets/check-box-list/check-box-list.module';\nimport {AWCheckBoxModule} from './widgets/checkbox/check-box.module';\nimport {AWChooserModule} from './widgets/chooser/chooser.module';\nimport {AWConfirmationModule} from './widgets/confirmation/confirmation.module';\nimport {AWCurrencyModule} from './widgets/currency/currency.module';\nimport {AWDateAndTimeModule} from './widgets/date-and-time/data-and-time.module';\nimport {AWDialogModule} from './widgets/dialog/dialog.module';\nimport {AWDropdownModule} from './widgets/dropdown/dropdown.module';\nimport {AWGenericChooserModule} from './widgets/generic-chooser/generic-chooser.module';\nimport {AWHyperlinkModule} from './widgets/hyperlink/hyperlink.module';\nimport {AWInputFieldModule} from './widgets/input-field/input-field.module';\nimport {AWOutlineForModule} from './widgets/outline/outline-for.module';\nimport {AWOverlayModule} from './widgets/overlay/overlay.module';\nimport {AWPageNotificationModule} from './widgets/page-notification/page-notification.module';\nimport {AWPageWrapperModule} from './widgets/page-wrapper/page-wrapper.module';\nimport {AWRadioButtonModule} from './widgets/radio-button/radio-button.module';\nimport {AWRadioButtonListModule} from './widgets/radio-button-list/radio-button-list.module';\nimport {AWRichTextAreaModule} from './widgets/rich-text-area/rich-text-area.module';\nimport {AWHoverCardModule} from './widgets/hover-card/hover-card.module';\nimport {\n    AWScrollableContainerModule\n} from './widgets/scrollable-container/scrollable-container.module';\nimport {AWSectionModule} from './widgets/section/section.module';\nimport {AWStepperModule} from './widgets/stepper/stepper.module';\nimport {AWStringFieldModule} from './widgets/string/string.module';\nimport {AWTextAreaModule} from './widgets/text-area/text-area.module';\nimport {AWButtonModule} from './widgets/button/button.module';\nimport {AWFormTableModule} from './layouts/form-table/form-table.module';\nimport {AWListModule} from './widgets/list/list.module';\nimport {AWCardModule} from './widgets/card/card.module';\nimport {AWDatatable2Module} from './widgets/datatable2/datatable2.module';\nimport {DomUtilsService} from './core/dom-utils.service';\nimport {ModalService} from './core/modal-service/modal.service';\nimport {DataProviders} from './core/data/data-providers';\nimport {DataFinders} from './core/data/data-finders';\nimport {ErrorManagerService} from './core/error-manager.service';\nimport {AwNameStore} from './core/aw-name/aw-name.store';\nimport {DataTypeProviderRegistry} from './core/data/datatype-registry.service';\nimport {WizardProgressModule} from './widgets/wizard-progress/wizard-progress.module';\nimport {ToggleSwitchModule} from './widgets/toggle-switch/toggle-switch.module';\n\n/**\n * Component module is core module for the common layouts and widgets libraries.\n *\n * todo: There are some things that I still need to resolve - please see and notices @Duplicates\n * jsdoc I want to keep this there to remind me that I need to refactor this as of now there are\n * not much option with angular.\n *\n */\n@NgModule({\n    imports: [\n        AribaCoreModule,\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n\n        AWCoreComponentModule,\n        AWBasicNavigatorModule,\n        AWCardModule,\n        AWCheckBoxListModule,\n        AWCheckBoxModule,\n        AWChooserModule,\n        AWConfirmationModule,\n        AWCurrencyModule,\n        AWDateAndTimeModule,\n        AWDialogModule,\n        AWDropdownModule,\n        AWGenericChooserModule,\n        AWHyperlinkModule,\n        AWInputFieldModule,\n        AWOutlineForModule,\n        AWOverlayModule,\n        AWPageNotificationModule,\n        AWPageWrapperModule,\n        AWRadioButtonModule,\n        AWRadioButtonListModule,\n        AWRichTextAreaModule,\n        AWScrollableContainerModule,\n        AWSectionModule,\n        AWStepperModule,\n        AWStringFieldModule,\n        AWTextAreaModule,\n        AWFormTableModule,\n        AWButtonModule,\n        AWHoverCardModule,\n        AWListModule,\n        AWDatatable2Module,\n        WizardProgressModule,\n        ToggleSwitchModule,\n\n        // PrimeNG remove when all AW are imported\n        PanelModule,\n        ButtonModule,\n        ToolbarModule,\n        InputTextModule,\n        InputTextareaModule,\n        AutoCompleteModule,\n        DropdownModule,\n        CalendarModule,\n        CheckboxModule,\n        RadioButtonModule,\n        SharedModule,\n        DialogModule,\n        MenuModule,\n        TabMenuModule,\n        AccordionModule,\n        EditorModule,\n        DataTableModule,\n        PaginatorModule,\n        OverlayPanelModule,\n        TreeModule\n\n    ],\n    declarations: [\n        SpyLifeCycleHooksDirective,\n        // 3th party declaration\n    ],\n    bootstrap: [],\n    entryComponents: [\n\n        // PrimeNG\n        Checkbox,\n        Dialog\n    ],\n    exports: [\n        ReactiveFormsModule,\n        FormsModule,\n        SpyLifeCycleHooksDirective,\n        AWCoreComponentModule,\n        AWBasicNavigatorModule,\n        AWCardModule,\n        AWCheckBoxListModule,\n        AWCheckBoxModule,\n        AWChooserModule,\n        AWConfirmationModule,\n        AWCurrencyModule,\n        AWDateAndTimeModule,\n        AWDialogModule,\n        AWDropdownModule,\n        AWGenericChooserModule,\n        AWHyperlinkModule,\n        AWInputFieldModule,\n        AWOutlineForModule,\n        AWOverlayModule,\n        AWPageNotificationModule,\n        AWPageWrapperModule,\n        AWRadioButtonModule,\n        AWRadioButtonListModule,\n        AWRichTextAreaModule,\n        AWScrollableContainerModule,\n        AWSectionModule,\n        AWStepperModule,\n        AWStringFieldModule,\n        AWTextAreaModule,\n        AWFormTableModule,\n        EmbeddedItemDirective,\n        AWButtonModule,\n        AWHoverCardModule,\n        AWListModule,\n        AWDatatable2Module,\n        WizardProgressModule,\n        ToggleSwitchModule,\n\n        // PrimeNG\n        SharedModule,\n        PanelModule,\n        ButtonModule,\n        ToolbarModule,\n        InputTextModule,\n        InputTextareaModule,\n        AutoCompleteModule,\n        DropdownModule,\n        CalendarModule,\n        CheckboxModule,\n        RadioButtonModule,\n        DialogModule,\n        MenuModule,\n        TabMenuModule,\n        EditorModule,\n        DataTableModule,\n        PaginatorModule,\n        OverlayPanelModule\n    ]\n})\nexport class AribaComponentsModule\n{\n\n\n    static forRoot(): ModuleWithProviders\n    {\n        return {\n            ngModule: AribaComponentsModule,\n            providers: [\n                ModalService,\n                ComponentRegistry,\n                ErrorManagerService,\n                DomUtilsService,\n                DataTypeProviderRegistry,\n                DataProviders,\n                DataFinders,\n                AwNameStore,\n                {\n                    provide: APP_INITIALIZER,\n                    useFactory: registerComponents,\n                    deps: [ComponentRegistry],\n                    multi: true,\n                }\n            ]\n        };\n    }\n}\n\nexport function registerComponents(compRegistry: ComponentRegistry): Function\n{\n    return compRegistry.initialize.bind(compRegistry, components);\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {APP_INITIALIZER, ModuleWithProviders, NgModule} from '@angular/core';\nimport {ComponentRegistry} from './core/component-registry.service';\nimport * as components from './entry-components';\nimport {DomUtilsService} from './core/dom-utils.service';\nimport {ModalService} from './core/modal-service/modal.service';\nimport {DataProviders} from './core/data/data-providers';\nimport {DataFinders} from './core/data/data-finders';\nimport {ErrorManagerService} from './core/error-manager.service';\nimport {AwNameStore} from './core/aw-name/aw-name.store';\nimport {DataTypeProviderRegistry} from './core/data/datatype-registry.service';\n\n\n/**\n *\n * This module is used mainly for tests as importing a module with all the components and you\n * use only 1 or two has a big impact on the performance execution. e.g. from executing couple\n * tests under 1 sec can go up to 10sec if you import all the things that you are not using.\n *\n * I havent noticed anything similar in application its only jasmine/karma that needs to init\n * components for every test.\n *\n */\n@NgModule({\n    imports: []\n})\nexport class AribaComponentsTestProviderModule {\n\n\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: AribaComponentsTestProviderModule,\n            providers: [\n                ModalService,\n                ComponentRegistry,\n                ErrorManagerService,\n                DomUtilsService,\n                DataTypeProviderRegistry,\n                DataProviders,\n                DataFinders,\n                AwNameStore,\n                {\n                    provide: APP_INITIALIZER,\n                    useFactory: registerComponents,\n                    deps: [ComponentRegistry],\n                    multi: true,\n                }\n            ]\n        };\n    }\n}\n\nexport function registerComponents(compRegistry: ComponentRegistry): Function {\n    return compRegistry.initialize.bind(compRegistry, components);\n}\n\n\n"],"names":["tslib_1.__extends","observableOf","InputTextModule","state","tslib_1.__values","DialogModule","registerComponents"],"mappings":"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"}
