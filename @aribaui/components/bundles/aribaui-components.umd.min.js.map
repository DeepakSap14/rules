{"version":3,"sources":["ng://@aribaui/components/core/embedded-item.ts","ng://@aribaui/components/core/generic-container.component.ts","node_modules/tslib/tslib.es6.js","ng://@aribaui/components/core/base.component.ts","ng://@aribaui/components/core/base-form.component.ts","ng://@aribaui/components/widgets/string/string.component.ts","ng://@aribaui/components/core/component-registry.service.ts","ng://@aribaui/components/core/include-component.directive.ts","ng://@aribaui/components/core/error-manager.service.ts","ng://@aribaui/components/core/error-messages/error-messages.component.ts","ng://@aribaui/components/core/modal-service/modal.service.ts","ng://@aribaui/components/core/modal-service/modal/modal.component.ts","ng://@aribaui/components/core/pipes/currency-format.pipe.ts","ng://@aribaui/components/core/on-ngfor-set.directive.ts","ng://@aribaui/components/core/dom-utils.service.ts","ng://@aribaui/components/core/infite-scroll/infite-scroll.component.ts","ng://@aribaui/components/core/aw-name/aw-name.store.ts","ng://@aribaui/components/core/aw-name/aw-name.directive.ts","ng://@aribaui/components/core/core.module.ts","ng://@aribaui/components/core/modal-service/modal-container.ts","ng://@aribaui/components/core/data/datatype-registry.service.ts","ng://@aribaui/components/core/data/array-data-provider.ts","ng://@aribaui/components/core/data/data-providers.ts","ng://@aribaui/components/core/data/data-finders.ts","ng://@aribaui/components/core/data/data-source.ts","ng://@aribaui/components/layouts/five-zone-layout.component.ts","ng://@aribaui/components/layouts/form-table/form-row/form-row.component.ts","ng://@aribaui/components/layouts/form-table/form-table.component.ts","ng://@aribaui/components/layouts/form-table/form-table.module.ts","ng://@aribaui/components/widgets/input-field/input-field.component.ts","ng://@aribaui/components/widgets/string/string.module.ts","ng://@aribaui/components/widgets/input-field/input-field.module.ts","ng://@aribaui/components/widgets/basic-navigator/basic-navigator.component.ts","ng://@aribaui/components/widgets/button/button.component.ts","ng://@aribaui/components/widgets/button/button.module.ts","ng://@aribaui/components/widgets/basic-navigator/basic-navigator.module.ts","ng://@aribaui/components/widgets/card/card.component.ts","ng://@aribaui/components/widgets/card/card-title/card-title.component.ts","ng://@aribaui/components/widgets/card/card.module.ts","ng://@aribaui/components/widgets/checkbox/checkbox.component.ts","ng://@aribaui/components/widgets/checkbox/check-box.module.ts","ng://@aribaui/components/widgets/check-box-list/check-box-list.component.ts","ng://@aribaui/components/widgets/check-box-list/check-box-list.module.ts","ng://@aribaui/components/widgets/hyperlink/hyperlink.component.ts","ng://@aribaui/components/widgets/hyperlink/hyperlink.module.ts","ng://@aribaui/components/widgets/chooser/chooser-selection-state.ts","ng://@aribaui/components/widgets/chooser/chooser-state.ts","ng://@aribaui/components/widgets/chooser/chooser-data-source.ts","ng://@aribaui/components/widgets/chooser/chooser.component.ts","ng://@aribaui/components/widgets/chooser/chooser.module.ts","ng://@aribaui/components/widgets/dropdown/dropdown.component.ts","ng://@aribaui/components/widgets/dropdown/dropdown.module.ts","ng://@aribaui/components/widgets/currency/currency.component.ts","ng://@aribaui/components/widgets/currency/currency.module.ts","ng://@aribaui/components/widgets/date-and-time/date-and-time.component.ts","ng://@aribaui/components/widgets/date-and-time/data-and-time.module.ts","ng://@aribaui/components/widgets/dialog/dialog-header.component.ts","ng://@aribaui/components/widgets/dialog/dialog-footer.component.ts","ng://@aribaui/components/widgets/dialog/dialog.component.ts","ng://@aribaui/components/widgets/dialog/dialog.module.ts","ng://@aribaui/components/widgets/generic-chooser/generic-chooser.component.ts","ng://@aribaui/components/widgets/radio-button-list/radio-button-list.component.ts","ng://@aribaui/components/widgets/radio-button/radio-button.component.ts","ng://@aribaui/components/widgets/radio-button/radio-button.module.ts","ng://@aribaui/components/widgets/radio-button-list/radio-button-list.module.ts","ng://@aribaui/components/widgets/generic-chooser/generic-chooser.module.ts","ng://@aribaui/components/widgets/outline/outline-state.ts","ng://@aribaui/components/widgets/outline/outline-for.component.ts","ng://@aribaui/components/widgets/outline/outline-control/outline-control.component.ts","ng://@aribaui/components/widgets/outline/outline-for.module.ts","ng://@aribaui/components/widgets/text-area/text-area.component.ts","ng://@aribaui/components/widgets/text-area/text-area.module.ts","ng://@aribaui/components/widgets/page-notification/page-notification.component.ts","ng://@aribaui/components/widgets/page-notification/page-notification.module.ts","ng://@aribaui/components/widgets/page-wrapper/page-events.ts","ng://@aribaui/components/widgets/page-wrapper/page-lifecycle.service.ts","ng://@aribaui/components/widgets/page-wrapper/page-wrapper.ts","ng://@aribaui/components/widgets/page-wrapper/page-header/page-header.component.ts","ng://@aribaui/components/widgets/page-wrapper/page-footer/page-footer.component.ts","ng://@aribaui/components/widgets/page-wrapper/object-page-wrapper/object-page-wrapper.component.ts","ng://@aribaui/components/widgets/page-wrapper/page-actions/page-actions.component.ts","ng://@aribaui/components/widgets/page-wrapper/page-content/page-content.component.ts","ng://@aribaui/components/widgets/stepper/stepper.component.ts","ng://@aribaui/components/widgets/stepper/step/step.component.ts","ng://@aribaui/components/widgets/stepper/stepper.module.ts","ng://@aribaui/components/widgets/page-wrapper/sidenav/sidenav.component.ts","ng://@aribaui/components/widgets/page-wrapper/page-wrapper.module.ts","ng://@aribaui/components/widgets/rich-text-area/rich-text-area.component.ts","ng://@aribaui/components/widgets/rich-text-area/rich-text-area.module.ts","ng://@aribaui/components/widgets/section/section.component.ts","ng://@aribaui/components/widgets/section/section.module.ts","ng://@aribaui/components/widgets/datatable2/column/dt-column.component.ts","ng://@aribaui/components/widgets/datatable2/header/header.component.ts","ng://@aribaui/components/widgets/datatable2/column/detail-row/dt-detail-row.component.ts","ng://@aribaui/components/widgets/datatable2/column/detail-row-expander/dt-detail-row-expander.component.ts","ng://@aribaui/components/widgets/datatable2/aw-datatable.ts","ng://@aribaui/components/widgets/datatable2/datatable2-data-source.ts","ng://@aribaui/components/widgets/datatable2/column/multi-select/dt-multi-select-column.component.ts","ng://@aribaui/components/widgets/datatable2/column/single-select/dt-single-select-column.component.ts","ng://@aribaui/components/widgets/datatable2/datatable2.component.ts","ng://@aribaui/components/widgets/datatable2/table-wrapper/table-wrapper.component.ts","ng://@aribaui/components/widgets/datatable2/directives/dt-cell-directives.ts","ng://@aribaui/components/widgets/datatable2/directives/dt-draggable-row.directive.ts","ng://@aribaui/components/widgets/datatable2/datatable2.module.ts","ng://@aribaui/components/widgets/confirmation/confirmation-header.component.ts","ng://@aribaui/components/widgets/confirmation/confirmation-footer.component.ts","ng://@aribaui/components/widgets/confirmation/confirmation.component.ts","ng://@aribaui/components/widgets/confirmation/confirmation.module.ts","ng://@aribaui/components/widgets/scrollable-container/scrollable-container.component.ts","ng://@aribaui/components/widgets/scrollable-container/scrollable-container.module.ts","ng://@aribaui/components/widgets/list/list.component.ts","ng://@aribaui/components/widgets/list/list.module.ts","ng://@aribaui/components/widgets/wizard-progress/wizard-progress.component.ts","ng://@aribaui/components/widgets/wizard-progress/wizard-progress.module.ts","ng://@aribaui/components/widgets/toggle-switch/toggle-switch.component.ts","ng://@aribaui/components/widgets/toggle-switch/toggle-switch.module.ts","ng://@aribaui/components/widgets/overlay/overlay.component.ts","ng://@aribaui/components/widgets/hover-card/hover-card.component.ts","ng://@aribaui/components/spy-lifecycle.directive.ts","ng://@aribaui/components/widgets/overlay/overlay.module.ts","ng://@aribaui/components/widgets/hover-card/hover-card.module.ts","ng://@aribaui/components/ariba.component.module.ts","ng://@aribaui/components/ariba.component.provider.module.ts"],"names":["EmbeddedItemDirective","_viewContainer","this","Object","defineProperty","prototype","item","_implicitValue","ngOnChanges","changes","isPresent","_viewRef","remove","indexOf","embeddedItem","context","EmbededItem","createEmbeddedView","Directive","args","selector","ViewContainerRef","Input","$implicit","GenericContainerComponent","renderer","element","nativeElement","ngOnInit","isBlank","bindings","tagName","Error","get","DefaultTagName","childElement","firstChild","doRender","ngDoCheck","parentNode","appendChild","el","createElement","MapWrapper","iterable","forEach","v","k","_this","setStyle","Component","template","Renderer2","ElementRef","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","__spread","concat","BaseComponent","env","extBindings","Map","omitPadding","assetFolder","getValue","AppConfig","AssetFolder","ngOnDestroy","xsmall","small","medium","large","xlarge","BaseFormComponent","parentContainer","_super","noop","tslib_1.__extends","formGroup","editable","checkInitForm","currentForm","FormGroup","name","uuid","id","doRegister","fControl","controls","registerControl","FormControl","updatedValue","patchValue","onlySelf","emitEvent","registerFormControl","formControl","disabled","disable","_formGroup","canSetType","writeValue","registerOnChange","fn","onModelChanged","registerOnTouched","onModelTouched","Environment","decorators","type","Inject","SkipSelf","Optional","forwardRef","StringComponent","sanitizer","bypassSecurityTrustHtml","_value","DomSanitizer","ComponentRegistry","initialize","references","registerTypes","Promise","resolve","registerType","nameToType","has","_nameToType","set","isStringMap","keys","Injectable","IncludeComponentDirective","viewContainer","factoryResolver","cd","compRegistry","initRenderInProgress","clear","doRenderComponent","currentValue","previousValue","ngAfterViewChecked","ngAfterViewInit","createWrapperElementIfAny","createContentElementIfAny","ngAfterContentInit","placeTheComponent","applyBindings","componentReference","currentComponent","onDestroy","destroy","reference","createComponent","resolvedCompFactory","detectChanges","ngContent","ngContentElement","awContentComponent","resolveComponentFactory","component","location","content","NgContent","delete","NgContentElement","resolvedComponentRef","currType","resolveComponentType","componentFactory","compReference","metadata","resolveDirective","componentType","componentName","cRef","inputs","instance","assert","compFactory","compMeta","outputs","input","propName","output","undefined","ComponentFactoryResolver","ChangeDetectorRef","ErrorManagerService","messages","required","minlength","maxlength","customMsg","metavalid","errorMessage","validatorName","validatorValue","message","StringWrapper","contains","replace","msg","ErrorMessagesComponent","errManager","hasMessage","errorMsg","propertyName","control","errors","touched","showErrors","valid","pristine","ModalService","cfr","registerViewContainerRef","vcRef","open","parameters","cf","componentRef","OUTPUT_PARAMETERS","param","subscribe","close","ModalComponent","modalService","viewContainerRef","ViewChild","read","CurrencyFormatPipe","currencyPipe","transform","_i","currencyCode","code","Pipe","pure","CurrencyPipe","NgForSetDirective","EventEmitter","onItem","emit","Output","DomUtilsService","hasParent","closest","firstChar","charAt","classList","substr","nodeType","toLowerCase","insertIntoParentNgContent","parentNativeEl","childNativeEl","ngContentParent","foundNgContent","querySelector","browserDimentions","width","window","innerWidth","document","documentElement","clientWidth","body","height","innerHeight","clientHeight","elementDimensions","getBoundingClientRect","left","top","right","bottom","x","y","InfiniteScrollComponent","_render","_zone","domUtils","_cd","STATE_ENABLED","_thr","val","_thrPx","_thrPc","parseFloat","shouldEnable","enable","addClass","_onScroll","ev","state","STATE_LOADING","STATE_DISABLED","_lastCheck","timeStamp","scrollTop","winHeight","Math","max","_docBody","scrollHeight","offsetHeight","_content","threshold","_lastScrollTop","fireOnLazyLoad","loadOffset","fetchSize","fireOnLazyUnLoad","run","onLoad","isLoad","limit","offset","pageYOffset","complete","setTimeout","_setListeners","shouldListen","_init","_scLsn","runOutsideAngular","bind","addEventListener","removeEventListener","isLoading","NgZone","AwNameStore","store","add","collides","AwNameDirective","config","createName","addElementToStore","setAttribute","elem","console","getTagName","parts","parentID","getAncestorId","parentName","getParentName","hasAttribute","spacesToUnderscore","ext","join","separator","parent","str","AWCoreComponentModule","NgModule","declarations","imports","CommonModule","entryComponents","exports","ModalContainer","closeModal","DataTypeProviderRegistry","registryByProvider","registryNameToClass","registerProvider","target","provider","isType","getPrototypeOf","bestMatchForClass","className","registeredClassName","classProto","objectToName","bestMatchForType","DataProvider","BehaviorSubject","expectedCount","params","data","dataChanges","canCRUD","canQuery","insert","obj","query","ArrayDataProvider","values","offScreenData","dataForParams","slice","sort","fetch","observableOf","arrayToSort","key","sortOrder","data1","data2","value1","FieldPath","getFieldValue","value2","result","localeCompare","DataProviders","registry","find","isArray","isString","register","DataFinders","initFinders","forProvider","forType","finderMatch","findersByType","accepts","copy","forData","FullTextArrayDataFinder","OutlineFullTextArrayDataFinder","FullText","FullTextOutline","Predicate","FullTextAndPredicate","DataFinder","match","unimplemented","matchWithSelections","selections","_keyPath","QueryType","_provider","instantMatch","list","instantMatchWithSelections","selectionsForMatch","toLowerPattern","matches","pattern","isFunction","isJsObject","hasObjectValue","toString","objectValues","parentObj","filter","sourceToSearch","rollup","shake","nodes","hasChildrenMatch","children","visible","some","node","map","isExpanded","DATA_SOURCE","InjectionToken","DataSource","dataProviders","finders","instant","HostBinding","FormRowComponent","_size","WidgetSizeColumns","registerValidators","highlightRow","isDynVal","startsWidth","isNestedLayout","dSize","dynSize","validators","maxLength","Validators","minLength","customValidators","ListWrapper","addAll","setValidators","compose","customAsyncValidators","setAsyncValidators","composeAsync","_labelsOnTop","isLabelsOnTop","isDynValue","normalizeSize","hasTwoColumn","enumValues","providers","provide","useExisting","FormTableComponent","updateFormFields","onSubmitForm","event","onSubmit","labelsOnTop","isFormEditable","applyColumns","useFiveZone","hasAnyZones","hasOneColumn","rightZone","middleZone","leftZone","hasThreeColumn","isTwoZoneReady","isThreeZoneReady","topZone","bottomZone","adjustLayout","editabilityCheck","formFields","rows","size","ContentChild","LeftZoneComponent","MiddleZoneComponent","RightZoneComponent","TopZoneComponent","BottomZoneComponent","ContentChildren","descendants","AWFormTableModule","FormsModule","ReactiveFormsModule","InputTextModule","INPUT_CONTROL_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","InputFieldComponent","multi","decimalPipe","DecimalPipe","locale","_type","bigDecimal","vchSubscriber","valueChanges","pipe","distinctUntilChanged","displayValue","formatNumber","amount","onKeyDown","onBlur","BigDecimal","Number","setValue","precision","digits","unsubscribe","getTypes","String","$proto","clone","AWStringFieldModule","AWInputFieldModule","BasicNavigatorComponent","appConfig","okActionLabel","cancelActionLabel","brandImg","showCancelButton","onCancelAction","observers","onOKAction","hasButtonTemplate","buttonsTemplate","hasBrandTemplate","brandTemplate","ButtonComponent","buttonClass","style","button","buttonTitle","textContent","trim","clicked","$event","action","AWButtonModule","ButtonModule","AWBasicNavigatorModule","ToolbarModule","host","class","CardComponent","actionIcon","hasAction","showBottomSection","toggleSelect","selectable","selected","onSelect","preventDefault","stopPropagation","onActionClick","onAction","onHover","isEnter","hoverDiv","opacity","showBodyTemplate","bodyTemplate","useBodyTemplate","CardZoneBottomComponent","VAlignMap","top-left","top-center","top-right","center-left","center-center","center-right","bottom-left","bottom-center","bottom-right","HAlignMap","CardZoneTitleComponent","alignItems","align","justifyContent","AWCardModule","CardZoneTopComponent","CB_CONTROL_VALUE_ACCESSOR","CheckboxComponent","model","isFormType","isStandalone","isBinary","isBoolean","onChange","AWCheckBoxModule","CheckboxModule","CB_LIST_CONTROL_VALUE_ACCESSOR","CheckBoxListComponent","updateModel","updatedModel","index","emitViewToModelChange","labelValue","labelFormatter","onSelection","sourceList","findIndex","equals","newModel","AWCheckBoxListModule","HyperlinkComponent","linkClass","AWHyperlinkModule","ChooserSelectionState","setSelectionState","selection","selectedObject","selectedObjects","isSelected","ChooserState","chooserSelectionState","isMulti","selectionState","multiselect","DefaultSelectionState","updatedSelectedObjects","currentItem","addMode","isInvalid","containsComplex","toggleAllSelected","showAllRecentlySelected","recentSelectedObjects","recentSelectedDisplayed","maxCount","MaxRecentSelected","multiSelect","_selectedObject","removeIfExist","_selectedObjects","ChooserDataSource","init","isDSChooserInitParams","dataProvider","dataFinder","queryType","lookupKey","lastFullMatchPattern","origKey","showMoreSelected","asObservable","updateValue","CHOOSER_CONTROL_VALUE_ACCESSOR","ChooserComponent","elemementRef","_defaultDS","placeHolder","hideLink","dataSource","initDatasource","initInternalModel","internalChooserModel","searchInput","iconElement","selectionAppendTo","selectionViewElem","tokens","querySelectorAll","maxLen","MaxLength","inTest","autoCompleteComponent","focusInput","onDropdownClick","selectItem","markAsDirty","inputEL","displayItem","removeValue","valueTransformer","moreSelectString","moreSelected","singleValueSelected","hasMenuTemplate","menuTemplate","hasSelectionTemplate","selectionTemplate","selState","chState","chooserState","destinationClass","field","useClass","deps","AWChooserModule","AutoCompleteModule","DD_CONTROL_VALUE_ACCESSOR","DropdownComponent","internalList","MaxNumShown","label","hasEmbeddedTemplate","itemTemplate","itemExist","showFilter","onItemSelection","AWDropdownModule","DropdownModule","CURRENCY_CONTROL_VALUE_ACCESSOR","CurrencyComponent","initCurrencies","onLocaleChange","money","formatCurrency","currencySelection","_currencies","currency","Money","onFocus","isNaN","getMoneyCurrency","AWCurrencyModule","DATETIME_CONTROL_VALUE_ACCESSOR","DateAndTimeComponent","Date","hourFormat","timePlaceHolder","NgTime12","NgTime24","initTranslations","formatNameWithTime","formatPattern","showDate","formatPatternNG","showTime","timeStarts","substring","i18n","firstDayOfWeek","dayNames","dayNamesShort","dayNamesMin","monthNames","monthNamesShort","onDateChange","isDate","AWDateAndTimeModule","CalendarModule","DialogComponent","onOpen","visibleChange","onClose","hasHeader","header","hasFooter","footer","DialogHeaderComponent","DialogFooterComponent","AWDialogModule","DialogModule","GenericChooserComponent","object","view","keyPath","defaultDataProvider","projectedSize","choiceProviderParams","initType","displayKey","GCChooserState","validateRequired","noSelectionString","fieldValue","setFieldValue","gChooser","multiRel","objects","isEmpty","last","curValue","RB_LIST_CONTROL_VALUE_ACCESSOR","RadioButtonListComponent","souceItem","RAB_CONTROL_VALUE_ACCESSOR","RadioButtonComponent","onModelChange","newVal","AWRadioButtonModule","RadioButtonModule","AWRadioButtonListModule","AWGenericChooserModule","OutlineState","expansionStates","collapseAll","outlineFor","isTreeModelFormat","pushRootSectionOnNewLine","updateNodes","isExpandedAll","expandAll","_expansionPath","setExpansionState","toggleExpansion","currentPath","itemChildren","newState","removeLast","setExpansionPath","child","items","childrenForItem","itemToKey","isEntity","identity","expansionPath","isOutlineNode","OutlineForComponent","builder","showExpansionControl","externalTemplate","controlTemplate","embedded","format","currentLevel","hasChildren","doGetChildren","animationInProgress","onAnimationDone","indentation","indentationPerLevel","isVisible","filterOut","animations","trigger","overflow-y","transition","animate","AnimationBuilder","InitNestingDirective","outline","setLevel","setCurrrentItem","setParentItem","OutlineControlComponent","outlineState","parentControl","prepareControl","hasExpansionControl","selectedItem","calculateStyleClass","$$parentItem","unshift","payload","expanded","onExpandChange","select","onItemSelected","level","isRootItem","AWOutlineForModule","TEXTAREA_CONTROL_VALUE_ACCESSOR","TextAreaComponent","AWTextAreaModule","InputTextareaModule","PageNotificationComponent","notificationClass","notification","notificationIcon","PageNotification","title","description","contentTmpl","hasTemplate","AWPageNotificationModule","PageInitialized","PageDestroyed","PageLifeCycleService","Subject","onPageInit","pageTitle","pageEvents","onPageDestroy","Init","Login","List","MasterDetail","Dashboard","Modal","PageWrapper","pageType","componentRegistry","pageLifecycleService","PageType","getId","generatePageId","PageHeaderComponent","routing","backAction","goBack","hasMenuItems","menuItems","showHideMenu","sidenav","toggle","hasNotifications","notifications","toggleNotificationPanel","showNotificationPanel","RoutingService","PageMenuItem","icon","link","UserNotification","PageFooterComponent","showDefaultCopyright","copyright","ObjectPageWrapperComponent","objectType","hasObjectStates","objectStates","pageActionPosition","hasTopPageActions","hasBottomPageActions","currentState","objectStateIndex","PageActionsComponent","PageContentComponent","StepperComponent","stepColorCompleted","stepColorCurrent","stepColorRemaining","steps","connectorWidth","ceil","colors","bUseColorArray","getStepColor","currentStep","getConnectorColor","nextStep","prevStep","StepComponent","color","AWStepperModule","SidenavComponent","getSidenavClass","show","AWPageWrapperModule","RouterModule","Default","Full","TextFormat","Custom","EDITOR_CONTROL_VALUE_ACCESSOR","RichTextAreaComponent","EditorType","styleClass","AWRichTextAreaModule","EditorModule","SectionComponent","isHeaderDisplayed","disableClose","opened","aClass","onEditAction","editState","onEdit","hasDescription","accordionTab","onSectionOpen","onSectionClose","hasCustomActions","customActions","completeEditing","onEditingComplete","SectionActionsComponent","AWSectionModule","SubSectionComponent","AccordionModule","AribaCoreModule","SharedModule","DTColumn2Component","domHandler","frozen","handleHeaderClick","isHeaderSelectable","dt","onHeaderSelectionChange","sortable","targetNode","hasClass","sortColumn","sortOrdering","sortOrderingForNumber","sortKey","sortOrderingForString","sortSingle","updateDataToRender","dynamicBodyClass","dynClass","bodyClassFn","bodyStyleClass","isRowSelectable","isCellSelectable","selectionMode","getSortOrder","order","isSorted","table","initialSortKey","initialSortOrder","useGlobalBody","headerTemplate","useGlobalHeader","subHeaderTemplate","useGlobalSubHeader","maxWidthPx","widthToPx","maxWidth","minWidthPx","minWidth","widthPx","postInitialize","myIndex","colIndex","hasFrozenColumns","widestCell","isValueColumn","isDataColumn","BooleanWrapper","isTrue","indentForControl","cell","isOutline","offsetWidth","nextElementSibling","outlineNodePadding","parseInt","getComputedStyle","paddingLeft","px","encapsulation","ViewEncapsulation","None","DomHandler","DTDetailRowComponent","visibleLeadingCols","numberOfColsBeforeData","hasInvisibleSelectionColumn","showDetailRow","isVisibleFn","pivotalLayout","DTDetailRowExpanderComponent","detailRowExpansionState","DragEvents","DT2DataSource","Datatable2State","debugTime","getTime","isDTInitParams","initialized","withParams","incrData","searchParam","MaxLimit","updateState","sortField","sOrder","reorderRows","origPos","newPos","dropPos","array","DropPosition","splice","Ascending","detailRowExpandState","displayLimit","searchQuery","detailRowState","currentSearchQuery","currentFilter","fromJSON","JSON","parse","ds","createFromAnyMap","toJSON","toConvert","toAnyMap","stringify","DetailRowExpansionState","entity","DTMultiSelectColumnComponent","DTSingleSelectColumnComponent","Datatable2Component","changeDetector","zone","injector","rowDetailExpandColumn","multiSelectColumn","singleSelectColumn","detailExpansionEnabled","rowDetailColumn","initColumns","columnsSubscription","colsQuery","_","markForCheck","skipOutlineItem","columnsChanged","offsetParent","frozenColumns","col","columns","initDetailColumnExpansion","hasLeadingSelectColumn","col1","initFrozenColumns","initColumnInfo","isInternalColumn","pageSize","displayRowSize","qType","outlineFormat","updateList","showRowDetailExpansionControl","indentDetailRow","startOfFirstDataColumn","onCellSelectionChange","column","foundIndex_1","findIndexComplex","onCellChange","headerSelection","isHeaderSelected","onHeaderSelection","onHandleRowClicked","altKey","onRowToggle","onRowSelect","rowSelected","foundIndex_2","onHandleOutlineRowToggleToChildren","oHandleOutlineRowToggleToParent","onRowSelectionChange","childrenForNode","foundIndex","this_1","childrenForNode_1","tslib_1.__values","childrenForNode_1_1","childrenForNode_2","childrenForNode_2_1","allSelected","childrenForNode_3","childrenForNode_3_1","parentIndex_1","onDnDRowDrop","onOutlineExpandChange","canUseForDetailRow","onSort","handleDataChange","valueChange","datasource","dataToRender","reset","isBodyCellSelected","isRowSelected","showSelectionColumn","visibleColumns","c","direction","toggleAllColumns","currentItems","isToggleAllColumnSelected","isToggleAllColumnDisabled","showDetailColumn","lastInx","reverse","idx","internalCols","hasValidCols","scrollWidth","newList","ObjectUtils","changeDetection","ChangeDetectionStrategy","OnPush","Injector","DTHeaderComponent2","DTWrapper","render","thisElement","platformId","querySubscription","searchTerms","debounceTime","switchMap","term","of","loadingSub","loadingFinished","calculateFrozenWidth","fWidth","alignTablesHeights","frozenView","unFrozenView","frozenRows","unFrozenRows","from","h","initFullScreen","frozenWidth","parentElement","toggleFullScreen","isFullScreenMode","closeFullScreen","openFullScreen","runExpandEffect","originalScrollPosition","scroll","toggleFullScreenOnDT","hideNonFullScreenElement","round","calculateLimit","showNonFullScreenElement","runCollapseEffect","fullScreen","onLazyLoad","dtBoundingClientRect","updateElement","dtFullScreenOverlay","backgroundColor","expandColorFrom","applyTransformation","expandColorTo","needTraverseDown","browserH","rowH","l","w","expand","tx","ty","isPlatformBrowser","supportFullScreen","infiniteScroll","PLATFORM_ID","SetCellMaxWidthDirective","td","dtMaxWidth","inlineData","whiteSpace","display","cellWidth","isInThresHold","tdPadding","newWidth","abs","computedStyle","paddingRight","borderRightWidth","borderLeftWidth","DTDraggableRowDirective","ngZone","DragDirection","dndRowEnabled","setupEventListeners","releaseEventListeners","eventHandlers","onMouseDownEvent","onDragStartEvent","onDragOverEvent","onDragLeaveEvent","onDropEvent","onDragEndEvent","draggable","elToBeDragged","offsetY","dndRowIndex","dataTransfer","setData","dropEffect","dragY","pageY","dragDir","isValidDropTarget","markRowWithClass","clearClasses","origIndx","inMiddle","tr","deleteValue","activeRow","currentTrCenter","draggedTrCenter","dropIntoEnabled","origInx","siblingRow","dragDirToString","AWDatatable2Module","ConfirmationComponent","confirmActionLabel","confirm","onConfirm","cancel","onCancel","ConfirmationHeaderComponent","ConfirmationFooterComponent","AWConfirmationModule","ScrollableContainerComponent","elementRef","initDefault","layoutClass","alignment","hasHorizontalScroll","scrollContainer","hasVerticalScroll","AWScrollableContainerModule","LB_CONTROL_VALUE_ACCESSOR","ListComponent","isMultiple","showCheckbox","initList","listStyle","borderless","itemClicked","checkbox","pListBox","onOptionClick","hasRightTempl","rZoneTempl","hasLeftTempl","lZoneTempl","hasMiddleTempl","mZoneTempl","AWListModule","ListboxModule","WizardProgressComponent","currentIndex","step","current","totalSteps","setCurrentStep","stepChanged","goToStep","WizardProgressModule","ToggleSwitchComponent","changeHandler","ToggleSwitchModule","OverlayComponent","overlay","onOpened","beforeClose","hide","onClosed","OverlayPanel","none","paddedLeft","paddedRight","default","PositionToStyle","AlignmentToStyle","HoverCardComponent","HCCardPosition","linkTitle","appendContentToBody","appendTo","overlayOnAnimationStart","awOverlay","onAnimationStart","cardOpened","dynamicContent","opening","container","cntRect","currrentPosition","adjustCard","arrowClass","injectDynamicContent","overlayCnt","prepend","initElements","titleElem","triggerElem","titleAreaRect","trigRect","trigIconMiddle","openCard","hasValue","openForAdjustments","absolutePosition","positionForCard","applyStyleClass","closeForAdjustments","cardClosed","containerRect","modalContainer","diff","getWindowScrollTop","posWithScroll","ArrowPad","alignmentForCard","calcLeftForAlignment","boundingRect","borderWidth","cntWidth","pos","HCCardAlignment","viewPort","getViewport","toFixed","SpacingLimit","visibility","wLargeTriangle","wSmallTriangle","shiftRight","trigRight","shiftRightS","trigRightS","SpyLifeCycleHooksDirective","logIt","ngAfterContentChecked","me","tagBody","indent","indentNumber","attributes","attr","ignore","print","AWOverlayModule","OverlayPanelModule","AWHoverCardModule","AribaComponentsModule","forRoot","ngModule","APP_INITIALIZER","useFactory","registerComponents","PanelModule","MenuModule","TabMenuModule","DataTableModule","PaginatorModule","TreeModule","bootstrap","Checkbox","Dialog","components","AribaComponentsTestProviderModule","registerComponents$1"],"mappings":"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A,aACA+lC,GACAl5B,IAEJ5M,gBAAiB,CACb0hC,IAEJzhC,QAAS,CACLyhC,IAEJj5B,UAAW,SAtBf,sCC8NWw9B,EAAAC,QAAP,WAEI,MAAO,CACHC,SAAUF,EACVx9B,UAAW,CACP5R,EACAjG,EACAuE,EACAyD,EACAwH,EACA4C,EACAM,EACAnF,EACA,CACIuK,QAAS09B,EAAAA,gBACTC,WAAYC,GACZ3uB,KAAM,CAAC/mB,GACPua,OAAO,0BA5J1BvL,EAAAA,SAAQtX,KAAA,CAAC,CACNwX,QAAS,CACL2pB,EAAAA,gBACA1pB,EAAAA,aACA8K,EAAAA,YACAC,EAAAA,oBAEAnL,EACA4O,GACAuC,GACAyB,GACAf,GACAoG,GACAwmB,GACA7kB,GACAyB,GACAY,GACApD,GACAoF,GACAlL,GACA7F,GACAoV,GACA6jB,GACA/iB,GACA0E,GACAhK,GACAE,GACAwK,GACA0W,GACAvV,GACAjC,GACAza,GACAwV,GACAxX,GACAyD,GACA23B,GACAjG,GACApC,GACA8C,GACAG,GAGA2F,EAAAA,YACAj4B,EAAAA,aACAE,EAAAA,cACAzD,EAAAA,gBACAsX,EAAAA,oBACAxK,EAAAA,mBACAY,EAAAA,eACAwC,EAAAA,eACAxJ,EAAAA,eACAiM,EAAAA,kBACAgM,EAAAA,aACA7N,EAAAA,aACA2qB,EAAAA,WACAC,EAAAA,cACAjd,EAAAA,gBACApB,EAAAA,aACAse,EAAAA,gBACAC,EAAAA,gBACAZ,EAAAA,mBACAa,EAAAA,YAGJ/mC,aAAc,CACVslC,IAGJ0B,UAAW,GACX7mC,gBAAiB,CAGb8mC,EAAAA,SACAC,EAAAA,QAEJ9mC,QAAS,CACL6K,EAAAA,oBACAD,EAAAA,YACAs6B,GACAxlC,EACA4O,GACAuC,GACAyB,GACAf,GACAoG,GACAwmB,GACA7kB,GACAyB,GACAY,GACApD,GACAoF,GACAlL,GACA7F,GACAoV,GACA6jB,GACA/iB,GACA0E,GACAhK,GACAE,GACAwK,GACA0W,GACAvV,GACAjC,GACAza,GACAwV,GACAxX,GACAzjB,EACAknB,GACA23B,GACAjG,GACApC,GACA8C,GACAG,GAGAlX,EAAAA,aACA6c,EAAAA,YACAj4B,EAAAA,aACAE,EAAAA,cACAzD,EAAAA,gBACAsX,EAAAA,oBACAxK,EAAAA,mBACAY,EAAAA,eACAwC,EAAAA,eACAxJ,EAAAA,eACAiM,EAAAA,kBACA7B,EAAAA,aACA2qB,EAAAA,WACAC,EAAAA,cACAre,EAAAA,aACAse,EAAAA,gBACAC,EAAAA,gBACAZ,EAAAA,6BA+BR,SAAAO,GAAmCx0C,GAE/B,OAAOA,EAAajB,WAAWiN,KAAKhM,EAAck1C,2CC5N3CC,EAAAf,QAAP,WACI,MAAO,CACHC,SAAUc,EACVx+B,UAAW,CACP5R,EACAjG,EACAuE,EACAyD,EACAwH,EACA4C,EACAM,EACAnF,EACA,CACIuK,QAAS09B,EAAAA,gBACTC,WAAYC,GACZ3uB,KAAM,CAAC/mB,GACPua,OAAO,0BAtB1BvL,EAAAA,SAAQtX,KAAA,CAAC,CACNwX,QAAS,YA4Bb,SAAAonC,GAAmCp1C,GAC/B,OAAOA,EAAajB,WAAWiN,KAAKhM,EAAck1C","sourcesContent":["/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    Directive,\n    EmbeddedViewRef,\n    Input,\n    OnChanges,\n    SimpleChanges,\n    TemplateRef,\n    ViewContainerRef\n} from '@angular/core';\nimport {isPresent} from '@aribaui/core';\n\n\n/**\n * When we have a custom component like dropdown, radiobuttonlist and\n * many more we want to provide a custom content to it like so:\n *\n * ```\n *  <aw-dropdown [list]=\"listOfUsers\" let somehowGetItemOut>\n *      {{item.userName}}\n *\n *   <aw-dropdown\n *\n * ```\n * Who else would know how to render list of objects..\n *\n * But its not possible in current form. if I do not provide Angular some as they call it this\n * syntactic sugar *,\n *\n *\n * ```\n *  <aw-dropdown *mySugerDirective=.....>\n *      {{item.userName}}\n *\n *   <aw-dropdown\n * ```\n *\n *\n * then angular will not know  inside is a template and I wont be able to get hold of TemplateRef\n * inside the component\n *\n * So the only way I found (expecting I do not want to change anything in terms of bindings and the\n * signature I use it. I have to use it like this:\n *\n * ```\n *  <aw-dropdown [list]=\"listOfUsers\" let somehowGetItemOut>\n *      <ng-template let-item> {{item.userName}}</ng-template>\n *\n *   <aw-dropdown\n *\n * ```\n *\n *  This way it could work. Since I am inside ngFor I want to render the item into the correct\n * viewContainer of ngFor's current item.\n *\n *  This way I can also expose item outside using Angular's special local variable called:\n * $implicit.\n *\n * This gets even more complex if we try to pass this template 2 levels down, like in case of\n * RadioButtonList. But later on I might want to refactor this into custom NG FOR\n *\n * @deprecated in favor of ngTemplateOutlet (will be removed in the next version)\n *\n */\n@Directive({selector: '[embeddedItem]'})\nexport class EmbeddedItemDirective implements OnChanges\n{\n    /**\n     * Template we want to render N-Times\n     */\n    @Input()\n    embeddedItem: TemplateRef<any>;\n\n    @Input()\n    set item(item: any)\n    {\n        this._implicitValue = item;\n    }\n\n    private _implicitValue: any;\n    private _viewRef: EmbeddedViewRef<any>;\n\n\n    constructor(private _viewContainer: ViewContainerRef)\n    {\n    }\n\n    /**\n     *\n     */\n    ngOnChanges(changes: SimpleChanges): void\n    {\n        if (isPresent(this._viewRef)) {\n            this._viewContainer.remove(this._viewContainer.indexOf(this._viewRef));\n        }\n\n        if (isPresent(this.embeddedItem)) {\n            let context = new EmbededItem(this._implicitValue);\n            this._viewRef = this._viewContainer.createEmbeddedView(this.embeddedItem, context);\n        }\n    }\n}\n\n\n/**\n * Wrapper class around Angular's EmbeddedViewRef.context()\n *\n */\nexport class EmbededItem\n{\n    constructor(public $implicit: any)\n    {\n    }\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, DoCheck, ElementRef, Input, OnInit, Renderer2} from '@angular/core';\nimport {isBlank, isPresent, MapWrapper} from '@aribaui/core';\n\n/**\n * GenericContainerComponent is used by include-component.directive to dynamically create an\n * HTMLElement and use this element to wrap a child component. This is very useful when we want to\n * modify a child by wrapping it with a border, a background, or bold its text.\n *\n * The wrapper element is dynamically created. It's element is specified by the tagName property in\n * the bindings @Input.\n *\n *  ### Example.  Directly in html\n *\n *   app.html\n *      <aw-generic-container tagName=\"tagName\" bindings=\"bindings\">\n *          <my-component ..bindings..></my-component>\n *      </aw-generic-container>\n *\n *   app.component.ts\n *\n *       tagName = (bBold) ? 'h1' : 'span';\n *       bindings = {  style: 'background-color: red' }\n *\n */\n@Component({\n    selector: 'aw-generic-container',\n    template: '<ng-content></ng-content>',\n    styles: []\n})\nexport class GenericContainerComponent implements OnInit, DoCheck\n{\n\n    /**\n     * Default tagName if none is specified inside bindings.\n     *\n     */\n    static readonly DefaultTagName = 'div';\n\n    /**\n     * Bindings to be added as attributes to the tagName element.\n     */\n    @Input()\n    bindings: Map<string, any>;\n\n    /**\n     * Element to be created that wraps it's content.\n     */\n    @Input()\n    tagName: string;\n\n    /**\n     * Native root element. Points to <aw-generic-container>\n     */\n    private nativeElement: Node;\n\n    private childElement: Node;\n\n\n    /**\n     * param renderer - Renderer is used to create 'tagName' element.\n     */\n    constructor(private renderer: Renderer2, private element: ElementRef)\n    {\n        this.nativeElement = element.nativeElement;\n    }\n\n    /**\n     * During the initialization, verify that at least one input has been set.\n     */\n    ngOnInit()\n    {\n        // If there's no input, this component wouldn't know what to do and throw exception.\n        if (isBlank(this.bindings) && isBlank(this.tagName)) {\n            throw new Error('GenericContainerComponent input bindings or tagName ' +\n                'have not been set.');\n        }\n\n        // If the tagName is blank, the get it from bindings.\n        if (isBlank(this.tagName)) {\n            this.tagName = this.bindings.get('tagName');\n            if (isBlank(this.tagName)) {\n                this.tagName = GenericContainerComponent.DefaultTagName;\n            }\n        }\n\n        // Save first added\n        this.childElement = this.nativeElement.firstChild;\n        this.doRender();\n    }\n\n    ngDoCheck(): void\n    {\n\n        if (isPresent(this.childElement) &&\n            this.childElement.parentNode !== this.nativeElement.firstChild) {\n\n            this.nativeElement.firstChild.appendChild(this.childElement);\n        }\n    }\n\n\n    /**\n     * After content has been initialized. Create the tagName element. Apply all the bindings on to\n     * the element as attribute. Finally, move the child element, <ng-content>, to inside the\n     * wrapper component.\n     */\n    private doRender()\n    {\n        const el = this.renderer.createElement(this.tagName);\n        if (isPresent(this.nativeElement)) {\n            this.renderer.appendChild(this.nativeElement, el);\n        }\n\n        // Loop through all the bindings and add them to the element.\n        MapWrapper.iterable(this.bindings).forEach((v, k) =>\n        {\n            this.renderer.setStyle(el, k, v);\n        });\n\n        // Attach the component to this divElement.\n        el.appendChild(this.childElement);\n    }\n\n\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {DoCheck, Input, OnChanges, OnDestroy, OnInit, SimpleChanges} from '@angular/core';\nimport {AppConfig, Environment} from '@aribaui/core';\n\n\n/**\n *  Base component shares common functionality among all the components (layouts, widgets).\n *\n */\nexport abstract class BaseComponent implements OnInit, OnChanges, DoCheck, OnDestroy\n{\n\n    /**\n     * Adds disabled flag to the component\n     *\n     */\n    @Input()\n    disabled: boolean = false;\n\n\n    /**\n     * Weather this component is visible\n     * Default is false;\n     */\n    @Input()\n    visible: boolean = false;\n\n    /**\n     * Tell  the component if we are in editing mode.\n     *\n     */\n    @Input()\n    editable?: boolean = true;\n\n    /**\n     * Every component have option to set a custom with\n     *\n     */\n    @Input()\n    width: any;\n\n    /**\n     * Every component have option to set a custom with\n     */\n    @Input()\n    height: any;\n\n    /**\n     * optional css class which can be utilized by component\n     */\n    @Input()\n    styleClass: any;\n\n    /**\n     * Removes padding from the component. Usually used when we are nesting other component with\n     * its own grid.\n     */\n    @Input()\n    omitPadding = false;\n\n    /**\n     * Class extension support register here any dynamic field that does not existing on the\n     * class/component\n     */\n    extBindings: Map<string, any>;\n\n\n    /**\n     * Prefix for the correct asset path\n     */\n    assetFolder: string = 'assets';\n\n    constructor(public env?: Environment)\n    {\n        this.extBindings = new Map<string, any>();\n        this.omitPadding = false;\n    }\n\n\n    ngOnInit(): void\n    {\n        this.assetFolder = this.env.getValue(AppConfig.AssetFolder);\n    }\n\n\n    ngOnChanges(changes: SimpleChanges): void\n    {\n    }\n\n\n    ngDoCheck(): void\n    {\n    }\n\n\n    ngOnDestroy(): void\n    {\n    }\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Environment, isBlank, isPresent, noop, uuid} from '@aribaui/core';\nimport {forwardRef, Inject, Input, Optional, PipeTransform, SkipSelf} from '@angular/core';\nimport {ControlValueAccessor, FormControl, FormGroup} from '@angular/forms';\nimport {BaseComponent} from '../core/base.component';\n\n/**\n * x-small = > 12%  = > col-1\n * small = > `\n * medium = > 50%   = > col-6\n * large = > 75%    = > col-9\n * large = > 100%   = > col-12\n *\n */\nexport type WidgetSize = 'x-small' | 'small' | 'medium' | 'large' | 'x-large';\n\nexport enum WidgetSizeColumns\n{\n    xsmall = 1,\n    small = 3,\n    medium = 6,\n    large = 9,\n    xlarge = 12\n}\n\n\n/**\n *  BaseFormComponnet extends BaseComponent for add specific form behavior\n *\n */\nexport abstract class BaseFormComponent extends BaseComponent implements ControlValueAccessor\n{\n    /*\n     *  Supported layout constants. It is expected there will be more options as we currently\n     *  support only these two there will be other variations of it. e.g. for stacked it will not\n     *  be 1 columns like it is now but multiple columns\n     *\n     */\n    static readonly LayoutStacked = 'stacked';\n    static readonly LayoutInline = 'inline';\n\n\n    /**\n     * Component name attribute. Can be used to lookup component in form.\n     */\n    @Input()\n    name: string;\n\n\n    /**\n     * Component Id. Can be used to lookup component in form.\n     */\n    @Input()\n    id: string;\n\n\n    /**\n     *\n     * Is current element visible\n     */\n    @Input()\n    hidden: boolean = false;\n\n    /**\n     * You can pass in formGroup which will be used with in the form\n     *\n     * @Input() - see getter\n     */\n    private _formGroup: FormGroup;\n\n\n    /**\n     * Renders required flex around the component\n     *\n     */\n    @Input()\n    required: boolean = false;\n\n\n    /**\n     *  a text displayed when value is empty or NULL\n     */\n    @Input()\n    placeHolder: String = '';\n\n    /**\n     * Identify if this control is used directly or if its part of some other control\n     * e.g. GenericChooser and managed by this control.\n     * Meaning State is mananged outside of this component\n     *\n     */\n    @Input()\n    isStandalone: boolean = true;\n\n\n    /**\n     * Form Control for the component. Its either inherited since it was precreated in parent\n     * component or its created based on passed 'name' and registered with the 'formGroup'\n     *\n     * When  initialize FormControl we do setValue with onlySelf:true flag and we do not emit any\n     * event outside\n     *\n     */\n    formControl: FormControl;\n\n\n    /**\n     * Formatter that can be assign to the component in order to format its input\n     */\n    formatter: PipeTransform;\n\n\n    protected onModelChanged: (_: any) => void = noop;\n    protected onModelTouched: (_: any) => void = noop;\n\n\n    /**\n     * Some of the BaseFormComponent can wrap other component and in these cases we want to\n     * inherit some of the behavior from parent\n     *\n     * @Inject(Environment) public env: Environment : is tem a workaround as without inject\n     * on this specific component it complains that Environment is unresolved symbol\n     *\n     */\n    constructor (@Inject(Environment) public env: Environment,\n                 @SkipSelf() @Optional() @Inject(forwardRef(() => BaseFormComponent))\n                 protected parentContainer: BaseFormComponent)\n    {\n        super(env);\n    }\n\n\n    ngOnInit (): void\n    {\n        super.ngOnInit();\n\n        if (isPresent(this.parentContainer)) {\n            this.formGroup = this.parentContainer.formGroup;\n            this.editable = this.parentContainer.editable;\n        }\n\n        this.checkInitForm();\n    }\n\n\n    /**\n     * Make sure that we have available formGroup and Name and ID\n     *\n     */\n    protected checkInitForm ()\n    {\n\n        if (isBlank(this.env.currentForm)) {\n            this.env.currentForm = new FormGroup({});\n        }\n\n        /**\n         * Todo: Right now I just need to initialize name , but ideally it needs to be generated\n         * number basedon some semantics app.page.component if there are more component on the page\n         * then app.page.componentNumber. Simple solution is to is to get Elementref and query it.\n         */\n        if (isBlank(this.name)) {\n            this.name = uuid();\n        }\n\n        if (isBlank(this.id)) {\n            this.id = uuid();\n        }\n\n    }\n\n    protected doRegister (name: string, value: any): FormControl\n    {\n\n        let fControl: FormControl;\n\n        if (isBlank(this.formGroup.controls[name])) {\n            this.formGroup.registerControl(name, new FormControl(value));\n            fControl = <FormControl> this.formGroup.controls[name];\n\n        } else {\n            fControl = <FormControl> this.formGroup.controls[name];\n            let updatedValue: any = isPresent(fControl.value) ? fControl.value : value;\n            fControl.patchValue(updatedValue, {onlySelf: true, emitEvent: false});\n        }\n        return fControl;\n    }\n\n\n    /**\n     * When we are dealing with Forms this is a helper method to register control\n     *\n     *\n     * @param value default value to be pre-set\n     */\n    registerFormControl (value: any)\n    {\n        this.formControl = this.doRegister(this.name, value);\n\n        if (this.disabled) {\n            this.formControl.disable();\n        }\n    }\n\n\n    @Input() get formGroup (): FormGroup\n    {\n        return isPresent(this._formGroup) ? this._formGroup : this.env.currentForm;\n    }\n\n    set formGroup (value: FormGroup)\n    {\n        this._formGroup = value;\n    }\n\n    /**\n     * Indicates if we can pass field type as a binding to the components. e.g. InputField need\n     * such type to correctly render input type=text, number\n     *\n     * todo: is this needed? can we maybe pass this to the formRow?\n     */\n    canSetType (): boolean\n    {\n        return false;\n    }\n\n\n    writeValue (value: any)\n    {\n\n    }\n\n    registerOnChange (fn: any)\n    {\n        this.onModelChanged = fn;\n    }\n\n    registerOnTouched (fn: any)\n    {\n        this.onModelTouched = fn;\n    }\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, forwardRef, Inject, Input, Optional, SkipSelf} from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser';\nimport {BaseFormComponent} from '../../core/base-form.component';\nimport {Environment} from '@aribaui/core';\n\n\n/**\n * Simple component rendering values in the read only mode. Just needed some component used\n * to render Strings in read only mode\n *\n *\n *  ### Example\n *\n * Using it inside form container along with label\n *\n *\n *  ```\n *          @Component({\n *              selector: 'userInfo' ,\n *              template: `\n *                      <aw-form-table [editable]=\"false\" >\n *                          <aw-form-row [name]=\"fieldName\"  [label]=\"label\">\n *                                 <aw-string [value]=\"inputValue\" ></aw-string>\n *                           </aw-form-row>\n *                      </aw-form-table>\n *\n *                  `\n *          })\n *          export class UserProfileComponent\n *          {\n *              inputValue: string = 'Some text';\n *              inputType: string = 'string';\n *              fieldName: string = 'firstName';\n *              label: string = 'My Name';\n *              required: boolean = true;\n *              editing: boolean = true;\n *              labelsOnTop: boolean = false;\n *\n *          }\n *\n *  ```\n *\n * You can also pass html tags.\n *\n */\n@Component({\n    selector: 'aw-string',\n    template: `\n        <span class=\"w-string-field\" [innerHTML]=\"value\"></span>\n    `,\n    styleUrls: ['string.component.scss']\n})\nexport class StringComponent extends BaseFormComponent\n{\n    /**\n     *  Value to be interpolated\n     *\n     */\n    private _value: string = '';\n\n\n    constructor(public env: Environment, private sanitizer: DomSanitizer,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => BaseFormComponent))\n                protected parentContainer: BaseFormComponent)\n    {\n        super(env, parentContainer);\n\n    }\n\n\n    @Input()\n    set value(value: any)\n    {\n        this._value = value;\n    }\n\n    get value(): any\n    {\n        return this.sanitizer.bypassSecurityTrustHtml(this._value);\n    }\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Injectable} from '@angular/core';\nimport {Environment, isStringMap} from '@aribaui/core';\n\n\n/**\n * A class holding a references to components. The methods are self-explanatory.\n *\n */\n@Injectable()\nexport class ComponentRegistry\n{\n    private _nameToType: Map<string, any> = new Map<string, any>();\n\n    constructor(private env: Environment)\n    {\n    }\n\n\n    initialize(references: any): Promise<any>\n    {\n        this.registerTypes(references);\n        let promise: Promise<any> = new Promise((resolve: any) =>\n        {\n            resolve(true);\n        });\n        return promise;\n\n    }\n\n\n    registerType(name: string, type: any): void\n    {\n        if (!this.nameToType.has(name)) {\n            this._nameToType.set(name, type);\n        }\n    }\n\n\n    registerTypes(references: any): void\n    {\n        if (!isStringMap(references)) {\n            return;\n        }\n\n        Object.keys(references).forEach((name: string) =>\n        {\n            this.registerType(name, references[name]);\n        });\n    }\n\n\n    get nameToType(): Map<string, any>\n    {\n        return this._nameToType;\n    }\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    AfterContentInit,\n    AfterViewChecked,\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Directive,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChanges,\n    ViewContainerRef\n} from '@angular/core';\nimport {assert, isBlank, isPresent, MapWrapper} from '@aribaui/core';\nimport {StringComponent} from '../widgets/string/string.component';\nimport {ComponentReference} from './component-reference';\nimport {ComponentRegistry} from './component-registry.service';\n\n/**\n * this is specific import to we can use components as components[typename] and  get back a\n * type.\n * I could not find any better dynamic way up to now\n */\n/**\n *  `IncludeComponent` directive dynamically instantiate and insert a components into the screen\n * based on the name. It can accepts bindings as well which will be automatically bound and applied\n * to the component\n *\n *  ### usage:\n *\n *  Instead of inserting component in the way:\n *\n *  ```\n *    <textfield value=\"some value\">\n *\n *  ```\n *\n *  you can do so dynamically like this:\n *\n * ```\n *  <aw-include-component 'TextfieldComponent' [bindings]=bindings ></aw-include-component>\n * ```\n *\n * This is the main building block to dynamically generated UI.\n *\n *\n * Todo: Currently the way Angular API work and we use it to create programatically components\n * is too complext we need to create everything 3 different calls to place a component to the\n * container. What I want is is to create some kind of representation of ContainerElement and this\n * can be also parent for our BaseComponent with method add and remove content. Then we could have\n * some AWContent.\n *\n * e.g.: to replace applyContentElementIfAny where we have several calls to create and add\n * component to the view.\n *\n * ```ts\n *  let containerElement = AWConcreteTemplate(viewContainer, factoryResolver)\n *  containerElement.add('Clck Me')\n * ```\n *\n * To assemble different components together - not only adding string content\n *\n * ```ts\n *  let content = new AWContent(ButtonComponent, bindingsMap)\n *  content.add('Click Me');\n *  containerElement.add(content)\n *\n * ```\n *\n * add more component hierarchy:\n *\n * ```ts\n *  let content = new AWContent(HoverCardComponnets, bindingsMap)\n *  content.add(createLayout();\n *  containerElement.add(content)\n *\n * ```\n *\n *\n *\n *\n */\n@Directive({\n    selector: 'aw-include-component'\n})\nexport class IncludeComponentDirective implements OnDestroy, OnInit, AfterViewChecked,\n    OnChanges, AfterViewInit, AfterContentInit\n{\n\n    static readonly NgContent = 'ngcontent';\n    static readonly NgContentElement = 'ngcontentElement';\n\n    /**\n     * Full component name e.g.: DropdownComponent which is going to be inserted. We need to take\n     * this name and translate it into actual TYPE. In order to do this we use a trick where we\n     * access an IMPORTED components.\n     *\n     * ```\n     * import * as components from '../components';\n     * ```\n     *\n     * Then you can retrieve a type by just components[<String Literal >] => Component TYPE\n     *\n     */\n    @Input()\n    protected name: string;\n\n    /**\n     * Provides bindings which will be passed into the component when instantiated\n     */\n    @Input()\n    protected bindings: Map<string, any>;\n\n    /**\n     * Current created component reference using ComponentFactoryResolver. We use this to access\n     * the actual component instance and Element Reference\n     */\n    protected currentComponent: ComponentRef<any>;\n\n    /**\n     * I use this flag to identify that component is rendering for first time or its updated during\n     * change detection\n     *\n     */\n    protected initRenderInProgress = false;\n\n    /**\n     * Not sure if we need this, but want to keep it here or maybe move it to some service so we\n     * can cache created components and maybe reuse them.\n     *\n     */\n    protected componentReferences: Map<string, ComponentReference> =\n        new Map<string, ComponentReference>();\n\n\n    /**\n     * Need to cache the resolved component reference so we dont call ComponentFactoryResolver\n     * everything we want to refresh a screen\n     */\n    resolvedComponentRef: ComponentReference;\n\n\n    constructor(public viewContainer: ViewContainerRef,\n                public factoryResolver: ComponentFactoryResolver,\n                public cd: ChangeDetectorRef,\n                public compRegistry: ComponentRegistry)\n    {\n\n        this.bindings = new Map<string, any>();\n    }\n\n    ngOnInit(): void\n    {\n\n        this.initRenderInProgress = true;\n        // todo: check if this the right lifecycle callback, this is called only once and you want\n        // to probably listen for changes, and change dection decide there is some change and we\n        // need to re-draw the view\n        this.viewContainer.clear();\n        this.doRenderComponent();\n    }\n\n\n    ngOnChanges(changes: SimpleChanges): void\n    {\n        if (isPresent(changes['name']) &&\n            (changes['name'].currentValue !== changes['name'].previousValue)) {\n            this.viewContainer.clear();\n            this.doRenderComponent();\n        }\n    }\n\n\n    ngAfterViewChecked(): void\n    {\n        this.initRenderInProgress = false;\n    }\n\n\n    ngAfterViewInit(): void\n    {\n        // check to see if we need to render and reposition DOM element both for wrapper and\n        // content\n        this.createWrapperElementIfAny();\n        this.createContentElementIfAny();\n    }\n\n\n    ngAfterContentInit(): void\n    {\n    }\n\n    /**\n     * Handles a case where we need to resolve additional component and wrap the current one.\n     * Just like reateContentElementIfAny() this method needs to be executed after all\n     * is created and initialized (inside the ngAfterViewInit() )\n     *\n     */\n    protected createWrapperElementIfAny(): void\n    {\n    }\n\n    /**\n     * Renders a component into actual View Container. The process goes as this.\n     *  1. We retrieve component Type based on the component name, which creates componentRef\n     *  2. Place the component onto the screen\n     *  3. Read component metadata, mainly INPUTs and apply bindings for each of them\n     *  4. Manually spin change detection to update the screen. Mainly for case where I need to\n     * redraw a screen\n     */\n    protected doRenderComponent(): void\n    {\n        this.placeTheComponent();\n        // this.currentComponent.changeDetectorRef.detach();\n\n        this.applyBindings(this.componentReference(), this.currentComponent, this.bindings);\n        // this.currentComponent.changeDetectorRef.detectChanges();\n\n        // Still not sure about this what all I should release here.\n        this.currentComponent.onDestroy(() =>\n        {\n            // this.bindings.clear();\n            // this.bindings = undefined;\n            //\n            // this.componentReferences.clear();\n            // this.componentReferences = undefined;\n\n            this.destroy();\n        });\n    }\n\n\n    /**\n     * Place actual component onto the screen using ViewContainerRef\n     *\n     */\n    protected placeTheComponent(): void\n    {\n        let reference = this.componentReference();\n        this.currentComponent = this.viewContainer.createComponent(reference.resolvedCompFactory);\n    }\n\n\n    /**\n     * When inserting Component that needs to have a content like e.g. hyperlink or button\n     *\n     * ```\n     *   <button> MY NG CONTENT </button>\n     *\n     * ```\n     *  this method applies and insert a child content into the main component. This method insert\n     * a simple string. We are not wrapping existing component with another component here.\n     *\n     * @return need to run detect changes ? default is false\n     */\n    protected createContentElementIfAny(): boolean\n    {\n\n        let detectChanges = false;\n        let ngContent = this.ngContent();\n        let ngContentElement = this.ngContentElement();\n        if (isPresent(ngContent)) {\n            let awContentComponent = this.factoryResolver.resolveComponentFactory(StringComponent);\n            let component = this.viewContainer.createComponent(awContentComponent, 0);\n\n            (<StringComponent>component.instance).value = ngContent;\n            let awContentContainer = this.currentComponent.location.nativeElement.firstChild;\n            awContentContainer.appendChild(component.location.nativeElement);\n\n            detectChanges = true;\n        } else if (isPresent(ngContentElement)) {\n            // console.log('content Element: ', ngContentElement);\n        }\n\n        return detectChanges;\n    }\n\n\n    /**\n     *\n     * Retrieve a NG Content from binding list and remove it so it its not prepagated down when\n     * applying other bindings.\n     *\n     */\n    protected ngContent(): string\n    {\n        let content: any;\n        if (isPresent(content = this.bindings.get(IncludeComponentDirective.NgContent))) {\n            this.bindings.delete(IncludeComponentDirective.NgContent);\n        }\n        return content;\n    }\n\n\n    protected ngContentElement(): string\n    {\n        let content: any;\n        if (isPresent(content = this.bindings.get(IncludeComponentDirective.NgContentElement))) {\n            this.bindings.delete(IncludeComponentDirective.NgContentElement);\n        }\n        return content;\n    }\n\n    /**\n     * We need to convert a component name to actual a type and then use ComponentFactoryResolver\n     * to instantiate a a component and save its information into our component references. The\n     * reason why we have this component reference is we need to store Angular's component metadata\n     * so we can iterate thru all the inputs and bind them to the context.\n     *\n     * returns {ComponentReference} a reference representing a compoent currently being rendered\n     */\n    protected componentReference(): ComponentReference\n    {\n        if (isPresent(this.resolvedComponentRef)) {\n            return this.resolvedComponentRef;\n        }\n        let currType = this.resolveComponentType();\n        let componentFactory: ComponentFactory<any> = this.factoryResolver\n            .resolveComponentFactory(currType);\n\n        let componentMeta: Component = this.resolveDirective(componentFactory);\n        let compReference: ComponentReference = {\n            metadata: componentMeta,\n            resolvedCompFactory: componentFactory,\n            componentType: currType,\n            componentName: this.name\n        };\n\n        this.resolvedComponentRef = compReference;\n        return compReference;\n    }\n\n    /**\n     * Iterates thru ComponentMetadata @Inputs() and check if we have available binding inside the\n     * 'this.bindings'\n     */\n    protected applyBindings(cRef: ComponentReference,\n                            component: ComponentRef<any>,\n                            bindings: Map<string, any>): void\n    {\n        let inputs: string[] = cRef.metadata.inputs;\n\n        if (isBlank(inputs) || inputs.length === 0) {\n            return;\n        }\n        // should we do any type conversion?\n        MapWrapper.iterable(bindings).forEach((v, k) =>\n        {\n\n            if (isPresent(component.instance[k])) {\n                component.instance[k] = v;\n            }\n        });\n    }\n\n\n    /**\n     * Resolves a component Type based on the string literal\n     *\n     * @returns component type used by `ComponentFactoryResolver`\n     *\n     * todo: rename the method so its clear that it returns component type based on string.\n     */\n    protected resolveComponentType(): any\n    {\n        let componentType = this.compRegistry.nameToType.get(this.name);\n\n        if (isBlank(componentType)) {\n            assert(false, this.name + ' component does not exists. Create Dummy Component instead' +\n                ' of throwing this error');\n            return;\n        }\n        return componentType;\n    }\n\n\n    protected resolveDirective(compFactory: ComponentFactory<any>): Component\n    {\n        let compMeta: Component = {\n            inputs: [],\n            outputs: []\n        };\n\n        if (isPresent(compFactory.inputs) && compFactory.inputs.length > 0) {\n\n            compFactory.inputs.forEach((input: {propName: string, templateName: string}) =>\n            {\n                compMeta.inputs.push(input.propName);\n            });\n        }\n\n        if (isPresent(compFactory.outputs) && compFactory.outputs.length > 0) {\n\n            compFactory.outputs.forEach((output: {propName: string, templateName: string}) =>\n            {\n                compMeta.outputs.push(output.propName);\n            });\n        }\n        return compMeta;\n    }\n\n\n    ngOnDestroy(): void\n    {\n        if (isPresent(this.currentComponent)) {\n            this.currentComponent.destroy();\n            this.currentComponent = undefined;\n        }\n\n        if (isPresent(this.viewContainer)) {\n            this.viewContainer.clear();\n        }\n\n    }\n\n    private destroy(): void\n    {\n        if (isPresent(this.currentComponent)) {\n            this.currentComponent = null;\n            this.resolvedComponentRef = null;\n        }\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Injectable} from '@angular/core';\nimport {StringWrapper} from '@aribaui/core';\n\n/**\n * Error Manager is a service used by Forms components to map error codes into meaningful messages.\n * Currently it does not have much but once we plug in localization it will make more sense\n *\n *\n * todo: Once ng-translate is implemented replace this with ng-translate functionality so we can\n * externalize these messages into locale files.\n *\n */\n@Injectable()\nexport class ErrorManagerService\n{\n    messages: {[key: string]: any};\n\n    constructor()\n    {\n        this.messages = {\n            'required': 'Required field',\n            'minlength': 'Field does not meet minimum length',\n            'maxlength': 'Field does not meet maximum length',\n            'customMsg': '%s',\n            'metavalid': '%s'\n        };\n    }\n\n\n    errorMessage(validatorName: string, validatorValue?: any)\n    {\n        let message = this.messages[validatorName];\n        if (StringWrapper.contains(message, '%s')) {\n            // todo: use ng-translate with proper message formatting\n\n            return StringWrapper.replace(message, '%s', validatorValue.msg);\n        }\n        return message;\n    }\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, Input, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {isPresent} from '@aribaui/core';\nimport {ErrorManagerService} from '../../core/error-manager.service';\n\n/**\n * ErrorMessagesComponent is used by form's component like FormRow to print its validation errors.\n * Its  based on ModelDriven (Reactive forms) and it reads errors from FormControl\n *\n *\n *\n */\n@Component({\n    selector: 'a-error-messages',\n    template: `\n            <div class=\"ui-g\">\n                    <small *ngIf=\"hasMessage()\"\n                        class=\"ui-g-12 ui-message ui-messages-error ui-corner-all\">\n                        {{ errorMsg }}\n                    </small>\n            </div>\n    `,\n    styleUrls: ['error-messages.component.scss']\n})\nexport class ErrorMessagesComponent implements OnInit\n{\n\n    /**\n     * Current form FormControll to check for Errors\n     */\n    @Input()\n    control: FormControl;\n\n\n    constructor(private errManager: ErrorManagerService)\n    {\n    }\n\n    ngOnInit()\n    {\n\n    }\n\n\n    hasMessage(): boolean\n    {\n        let msg = this.errorMsg;\n        return isPresent(msg);\n    }\n\n    /**\n     * Retrieve a messages if any registered by added validators\n     *\n     */\n    get errorMsg(): string\n    {\n        for (let propertyName in this.control.errors) {\n            if (this.control.errors.hasOwnProperty(propertyName) && this.control.touched) {\n                return this.errManager.errorMessage(propertyName,\n                    this.control.errors[propertyName]);\n            }\n        }\n    }\n\n    /**\n     *\n     * Show errors? We currently shows errors if the control is not valid, it was touched by user.\n     * Most of the type on blur event  and at last its not pristine anymore (its dirty)\n     *\n     */\n    showErrors(): boolean\n    {\n        return !this.control.valid && !this.control.pristine && this.control.touched;\n    }\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Injectable,\n    Type,\n    ViewContainerRef\n} from '@angular/core';\n\n/**\n * Modal service is used to to create modal dialogs. It creates modal dialogs dynamically.\n * The service also keeps track of the created modal dialog and can close it by calling the\n * service's close()\n *\n * Modal service requires a ViewContainer to insert newly created modals. This is taken care\n * by the ModalComponent.\n *\n * Usage:\n *     Add   <aw-modal></aw-modal>  into your application main html. It needs to be on every\n *     page where a modal dialog will appear.\n *\n *    1.  Popup a dialog without creating your own component.\n *        Use the existing DialogComponent in widgets.\n *\n *             this.modalService.open<DialogComponent>(DialogComponent, {\n *                     title: 'My Popup Title',\n *                     body: 'My Popup Body'\n *              });\n *\n *\n *   2.   Creating your own Dialog Component to popup.\n *\n *         let componentRef = this.modalService.open<MyDialogComponent>(MyDialogComponent,\n * {inputs});\n *\n *          @Component({\n *                selector: 'aw-mydialog' ,\n *                           template: `\n *                                         <aw-dialog (onClose)=\"closePopup()\">\n *                                              <ng-template #titleTemplate>\n *                                                 <span><i class=\"fa fa-envira\" ></i>This is my\n *     Title </span>\n *                                              </ng-template>\n *                                              <ng-template #bodyTemplate>\n *                                                 <span><i class=\"fa fa-envira\" ></i>This is my\n *     Body </span>\n *                                              </ng-template>\n *                                        </aw-dialog>\n *                                     `\n *         })\n *         export class MyDialogComponent extends DialogComponent implements OnInit {\n *                     constructor(private modalService: ModalService) {\n *                          super();\n *                       }\n *                     ngOnInit() { }\n *\n *                     closePopup() {\n *                            this.modalService.close();\n *                      }\n *         }\n */\n@Injectable()\nexport class ModalService\n{\n    /**\n     * This is a static list of output parameter from Dialog, Confirmation components\n     * that needs to be handled.\n     *\n     */\n    private static OUTPUT_PARAMETERS: string[] = ['onClose', 'onConfirm', 'onCancel'];\n\n\n    /**\n     * Container for the newly created modal. This is passed in through the\n     * registerViewContainerRef().\n     */\n    private vcRef: ViewContainerRef;\n\n    /**\n     * Storing the created modal instance.\n     */\n    private instance: any;\n\n    /**\n     * DI ComponentFactoryResolver to be used to create modal component.\n     *\n     * @param cfr\n     */\n    constructor(private cfr: ComponentFactoryResolver)\n    {\n    }\n\n    /**\n     *  PlaceHolder for modal to be inserted.\n     *\n     * @param vcRef\n     */\n    registerViewContainerRef(vcRef: ViewContainerRef): void\n    {\n        this.vcRef = vcRef;\n    }\n\n    /**\n     * Opens the modal dialog by dynamically creating the component and adding it to vcRef.\n     *\n     */\n    open<T>(component: Type<T>, parameters?: any): ComponentRef<T>\n    {\n        const cf: ComponentFactory<T> = this.cfr.resolveComponentFactory(component);\n        let componentRef: ComponentRef<T> = this.vcRef.createComponent(cf);\n\n        // Auto set visiblity to true. So that the Dialog will display\n        parameters = (parameters) ? parameters : {};\n        parameters['visible'] = true;\n\n        // Handle output parameters.\n        ModalService.OUTPUT_PARAMETERS.forEach((param) =>\n        {\n            if (parameters[param]) {\n                (<any>componentRef.instance)[param].subscribe(parameters[param]);\n                delete parameters[param];\n            }\n        });\n\n        Object.assign(componentRef.instance, parameters);\n\n        // had to cast it in order to avoid any index Error\n        // Attach a destroy method to the newly created component.\n        (<any>componentRef.instance)['destroy'] = () =>\n        {\n            componentRef.destroy();\n        };\n        // Save the instance, so it can be destroyed later.\n        this.instance = componentRef;\n\n        return componentRef;\n    }\n\n    /**\n     * Calling close() will remove the modal from view.\n     */\n    close()\n    {\n        if (this.instance) {\n            this.instance.destroy();\n            this.instance = null;\n        }\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, OnInit, ViewChild, ViewContainerRef} from '@angular/core';\nimport {ModalService} from '../modal.service';\n\n\n/**\n * Place holder for all modal dialogs. This component works with the modalService by providing\n * a place holder for it to inject Dialog component into.\n */\n@Component({\n    selector: 'aw-modal',\n    templateUrl: 'modal.component.html',\n    styleUrls: ['modal.component.scss']\n})\nexport class ModalComponent implements OnInit\n{\n\n    @ViewChild('modal', {read: ViewContainerRef})\n    viewContainerRef: ViewContainerRef;\n\n    constructor(private modalService: ModalService)\n    {\n    }\n\n    ngOnInit()\n    {\n        this.modalService.registerViewContainerRef(this.viewContainerRef);\n    }\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {CurrencyPipe} from '@angular/common';\nimport {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * This currency formatter will ignore null and empty string for value.\n * Issue : https://github.com/angular/angular/issues/8694  DI fails when extends other classes\n */\n@Pipe({\n    name: 'currencyFormat',\n    pure: false\n})\nexport class CurrencyFormatPipe implements PipeTransform\n{\n\n    constructor(private currencyPipe: CurrencyPipe)\n    {\n    }\n\n    transform(value: string, ...args: any[]): any\n    {\n\n        // Default values\n        let currencyCode = 'USD', symbolDisplay = true, digits = '1.0-2';\n\n        if (!value || value.length === 0) {\n            return value;\n        }\n\n        if (args && args.length > 0) {\n            let code = args[0];\n            if (code && code.length > 0) {\n                currencyCode = code;\n            }\n        }\n\n        return this.currencyPipe.transform(value, currencyCode, symbolDisplay, digits);\n    }\n}\n\n","/**\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\nimport {Directive, EventEmitter, Output} from '@angular/core';\n\n\n/**\n * Simple utility directive that is used by NG For cycle in situation where we need to call a\n * or execute some logic after each iteration\n */\n@Directive({\n    selector: '[ngForSet]'\n})\nexport class NgForSetDirective\n{\n\n    @Output()\n    onItem: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor()\n    {\n    }\n\n    ngOnInit()\n    {\n        this.onItem.emit('--');\n    }\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Injectable} from '@angular/core';\nimport {isPresent} from '@aribaui/core';\n\n\n/**\n * Simple convenient service to work with the dom. All the future logic related to DOM manipulation\n * or traversal should be put into this service\n *\n */\n@Injectable()\nexport class DomUtilsService\n{\n\n    constructor ()\n    {\n    }\n\n    /**\n     * goes all the way up to the body and checks if there is a element identified by a 'selector'\n     *\n     */\n    hasParent (nativeElement: any, selector: string): boolean\n    {\n        return isPresent(this.closest(nativeElement, selector));\n    }\n\n\n    /**\n     *  Travels all the way up to the BODY and retrieve element identified by 'selector' or NULL if\n     * not found\n     *\n     */\n    closest (nativeElement: any, selector: string): any\n    {\n        let firstChar = selector.charAt(0);\n\n        let parentNode = nativeElement;\n\n\n        while (isPresent((parentNode = parentNode.parentNode))) {\n            if (firstChar === '.' && parentNode.classList.contains(selector.substr(1))) {\n                return parentNode;\n            }\n\n            if (firstChar === '#' && parentNode.id === selector.substr(1)) {\n                return parentNode;\n            }\n\n            // If selector is a tag\n            if (parentNode.nodeType === 1 && parentNode.tagName.toLowerCase() === selector) {\n                return parentNode;\n            }\n\n            if (parentNode.nodeType === 1 && parentNode.tagName === 'BODY') {\n                return null;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * When angular component is rendered along with NGContent it has its own _ngContent_INDEX\n     * which always corresponds with _nghost_INDEX, this works fine if we have actual component\n     * that is already rendered. If we are creating component programatically there is no way to\n     * identify where the actual ng-content is placed within the component\n     *\n     * e.g. Consider following example:\n     *\n     *\n     * Button Component Template:\n     *\n     * ```\n     *  <span class=mybuttonTitle><ng-content></ng-content></span>\n     * ```\n     *\n     * When you use button component as <aw-button>ClickMe</aw-button>  then its rendered as\n     *\n     * ```\n     * <aw-button _nghost_123>\n     *  <span _ngcontent_123 class=mybuttonTitle>ClickMe</span>\n     * </aw-button>\n     * ```\n     *\n     * But with programmatic API you instantiate Button and since it created without a Content it\n     * looks like this;\n     *\n     *  ```\n     * <aw-button _nghost_123>\n     *  <span class=mybuttonTitle></span>\n     * </aw-button>\n     * ```\n     *\n     * Where do you place you child (content component)? Therefore utility css class was created\n     * to wrap <ng-content> to get around this limitation.\n     *\n     *  ```\n     *   <span class=\"u-ngcontent\">\n     *      <ng-content></ng-content>\n     *   </span>\n     *  ````\n     *\n     *\n     *\n     *\n     */\n    insertIntoParentNgContent (parentNativeEl: any, childNativeEl: any): void\n    {\n        // default behavior is to insert it as child to parentNativeEl\n        let ngContentParent = parentNativeEl;\n\n        let foundNgContent = parentNativeEl.querySelector('.u-ngcontent');\n        if (isPresent(foundNgContent)) {\n            // we don't cover a case where there could be multiple ngcontents\n            ngContentParent = foundNgContent;\n        }\n        ngContentParent.appendChild(childNativeEl);\n\n    }\n\n\n    /**\n     *\n     * Retrieves current browser window width and height\n     *\n     */\n    browserDimentions (): any\n    {\n        return {\n            width: (window.innerWidth || document.documentElement.clientWidth\n                || document.body.clientWidth),\n            height: (window.innerHeight || document.documentElement.clientHeight\n                || document.body.clientHeight)\n        };\n    }\n\n\n    /**\n     *\n     * Retrieves elemements dimensions\n     *\n     */\n    elementDimensions (element: any): any\n    {\n        if (isPresent(element.getBoundingClientRect)) {\n            return element.getBoundingClientRect();\n        }\n        return {left: 0, top: 0, right: 0, bottom: 0, x: 0, y: 0, width: 0, height: 0};\n    }\n}\n\n","/**\n *\n * Under @original-license\n *\n * Copyright 2015-present Drifty Co.\n * http://drifty.com/\n *\n *  MIT License\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n *\n * Credit to drifty for this excellent component. We have a strong needs for good infinite\n * scrolling component so this is derived work based on this drifty component as we can not really\n * bring in whole framework and their component/API. It would be too heavy\n *\n * Component is updated with native DOM API. plus simplified by removing things\n * that are not necessary for our usecase. Updated directive prefix to match our guidelines\n *\n *\n *\n */\n\n\nimport {\n    AfterContentInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgZone, OnInit,\n    Output,\n    Renderer2,\n    ViewChild\n} from '@angular/core';\nimport {isPresent} from '@aribaui/core';\nimport {DomUtilsService} from '../../core/dom-utils.service';\n\n/**\n * The Infinite Scroll allows you to perform an action when the user\n * scrolls a specified distance from the bottom or top of the page.\n *\n * The expression assigned to the `infinite` event is called when\n * the user scrolls to the specified distance. When this expression\n * has finished its tasks, it should call the `complete()` method\n * on the infinite scroll instance.\n *\n * ## Usage\n *\n * ```html\n *\n *  <div  *ngFor=\"let item of items\">{{item}} </div>\n *   <aw-infinite-scroll (onLoad)=\"doInfinite($event)\">\n *  </aw-infinite-scroll>\n *\n * ```\n *\n *\n * You can also set a threshold to change the distance when the lazy load kicks\n * in.\n * ## Usage\n *\n * ```html\n *\n *  <div  *ngFor=\"let item of items\">{{item}} </div>\n *   <aw-infinite-scroll (onLoad)=\"doInfinite($event)\"  [distance]=\"'15%'\">\n *  </aw-infinite-scroll>\n *\n * ```\n */\n@Component({\n    selector: 'aw-infinite-scroll',\n    templateUrl: 'infite-scroll.component.html',\n    styleUrls: ['infite-scroll.component.scss'],\n})\nexport class InfiniteScrollComponent implements OnInit, AfterContentInit\n{\n    _lastCheck: number = 0;\n    _lastScrollTop: number = 0;\n    _scLsn: any;\n    _thr: string = '10%';\n    _thrPx: number = 0;\n    _thrPc: number = 0.10;\n    _init: boolean = false;\n\n    _content: any;\n    _docBody: any;\n\n    /**\n     * @internal\n     */\n    state: string = STATE_ENABLED;\n\n    /**\n     * @input {string} The threshold distance from the bottom\n     * of the content to call the `onLoad` output event when scrolled.\n     * The threshold value can be either a percent, or\n     * in pixels. For example, use the value of `10%` for the `infinite`\n     * output event to get called when the user has scrolled 10%\n     * from the bottom of the page. Use the value `100px` when the\n     * scroll is within 100 pixels from the bottom of the page.\n     * Default is `15%`.\n     */\n    @Input()\n    get distance (): string\n    {\n        return this._thr;\n    }\n\n    set distance (val: string)\n    {\n        this._thr = val;\n        if (val.indexOf('%') > -1) {\n            this._thrPx = 0;\n            this._thrPc = (parseFloat(val) / 100);\n\n        } else {\n            this._thrPx = parseFloat(val);\n            this._thrPc = 0;\n        }\n    }\n\n    /**\n     * @input {boolean} If true, Whether or not the infinite scroll should be\n     * enabled or not. Setting to `false` will remove scroll event listeners\n     * and hide the display.\n     */\n    @Input()\n    set enabled (shouldEnable: boolean)\n    {\n        this.enable(shouldEnable);\n    }\n\n\n    /**\n     * @output {event} Emitted when the scroll reaches\n     * the threshold distance. From within your infinite handler,\n     * you must call the infinite scroll's `complete()` method when\n     * your async operation has completed.\n     */\n    @Output()\n    onLoad: EventEmitter<any> = new EventEmitter<any>();\n\n\n    @ViewChild('loadinPanel')\n    loadPanel: ElementRef;\n\n\n    /**\n     *\n     * Lazy load current numbers. tell the app starting point and what is the size of loaded\n     * list\n     *\n     */\n    @Input()\n    fetchSize: number = 0;\n\n    loadOffset: number = 0;\n\n\n    constructor (private _render: Renderer2, private _zone: NgZone,\n                 private domUtils: DomUtilsService,\n                 private _cd: ChangeDetectorRef)\n    {\n\n\n    }\n\n\n    ngOnInit (): void\n    {\n        this._render.addClass(document.body, 'has-infinite-scroll');\n\n    }\n\n    _onScroll (ev: any): void\n    {\n        if (this.state === STATE_LOADING || this.state === STATE_DISABLED) {\n            return;\n        }\n\n        // must throttle the class by 100ms\n        if (this._lastCheck + 100 > ev.timeStamp) {\n            // no need to check less than every XXms\n            return;\n        }\n\n        this._lastCheck = ev.timeStamp;\n        let scrollTop = this.scrollTop();\n\n        let winHeight = this.domUtils.browserDimentions().height;\n        const height = Math.max(this._docBody.scrollHeight, this._docBody.offsetHeight,\n            winHeight, this._content.scrollHeight, this._content.offsetHeight);\n\n        if (!height) {\n            // if there is no height of this element then do nothing\n            return;\n        }\n        const threshold = this._thrPc ? (height * this._thrPc) : this._thrPx;\n        let distanceFromInfinite = this._content.scrollHeight - winHeight - scrollTop - threshold;\n\n        // console.log('Document height (' + height + ') , Distance from bottom '\n        // + distanceFromInfinite + ',  => threshold = ' +\n        //     this.distance + ' (' + threshold + ')');\n\n        if (distanceFromInfinite < 0 && this._lastScrollTop < scrollTop) {\n            this.fireOnLazyLoad();\n\n        } else if (this._lastScrollTop > scrollTop && scrollTop < winHeight\n            && this.loadOffset !== this.fetchSize) {\n            this.fireOnLazyUnLoad();\n        }\n        this._lastScrollTop = scrollTop;\n        return;\n    }\n\n    /**\n     * Todo: refactor to one method\n     */\n    private fireOnLazyLoad ()\n    {\n        this._zone.run(() =>\n        {\n            if (this.state !== STATE_LOADING && this.state !== STATE_DISABLED) {\n                this.state = STATE_LOADING;\n\n                this.onLoad.emit({\n                    isLoad: true,\n                    limit: this.fetchSize,\n                    offset: this.loadOffset\n                });\n                // start on the next record\n                this.loadOffset += this.fetchSize;\n            }\n        });\n    }\n\n\n    private fireOnLazyUnLoad ()\n    {\n        this._zone.run(() =>\n        {\n            if (this.state !== STATE_LOADING && this.state !== STATE_DISABLED) {\n                this.state = STATE_LOADING;\n\n                // start on the next record\n                this.loadOffset = this.fetchSize;\n\n                this.onLoad.emit({\n                    isLoad: false,\n                    limit: this.fetchSize,\n                    offset: this.loadOffset\n                });\n            }\n        });\n    }\n\n\n    private scrollTop (): number\n    {\n        return (window.pageYOffset || this._content.scrollTop);\n    }\n\n    /**\n     * Call `complete()` within the `infinite` output event handler when\n     * your async operation has completed. For example, the `loading`\n     * state is while the app is performing an asynchronous operation,\n     * such as receiving more data from an AJAX request to add more items\n     * to a data list. Once the data has been received and UI updated, you\n     * then call this method to signify that the loading has completed.\n     * This method will change the infinite scroll's state from `loading`\n     * to `enabled`.\n     */\n    complete ()\n    {\n        if (this.state !== STATE_LOADING) {\n            return;\n        }\n\n        setTimeout(() =>\n        {\n            this.state = STATE_ENABLED;\n\n            // need to trigger extra detect changes to rerender loading icon\n            this._cd.detectChanges();\n        }, 100);\n    }\n\n\n    /**\n     * Call `enable(false)` to disable the infinite scroll from actively\n     * trying to receive new data while scrolling. This method is useful\n     * when it is known that there is no more data that can be added, and\n     * the infinite scroll is no longer needed.\n     * @param shouldEnable  If the infinite scroll should be\n     * enabled or not. Setting to `false` will remove scroll event listeners\n     * and hide the display.\n     */\n    enable (shouldEnable: boolean)\n    {\n        this.state = (shouldEnable ? STATE_ENABLED : STATE_DISABLED);\n        this._setListeners(shouldEnable);\n    }\n\n    /**\n     * Subscribes to native windows scroll event\n     */\n    _setListeners (shouldListen: boolean)\n    {\n        if (this._init) {\n            if (shouldListen) {\n                if (!this._scLsn) {\n                    this._zone.runOutsideAngular(() =>\n                    {\n                        this._scLsn = this._onScroll.bind(this);\n                        window.addEventListener('scroll', this._scLsn);\n                    });\n                }\n            } else {\n\n                if (isPresent(this._scLsn)) {\n                    window.removeEventListener('scroll', this._scLsn);\n                    this._scLsn = null;\n                }\n            }\n        }\n    }\n\n\n    isLoading (): boolean\n    {\n        return this.state === STATE_LOADING;\n    }\n\n    ngAfterContentInit ()\n    {\n        this._init = true;\n        this._docBody = document.body;\n        this._content = document.documentElement;\n\n        this._setListeners(this.state !== STATE_DISABLED);\n\n        if (this.loadOffset === 0) {\n            this.fireOnLazyLoad();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy ()\n    {\n        this._setListeners(false);\n    }\n\n}\n\n\nconst STATE_ENABLED = 'enabled';\nconst STATE_DISABLED = 'disabled';\nconst STATE_LOADING = 'loading';\n","import {Injectable} from '@angular/core';\n\n@Injectable()\nexport class AwNameStore {\n\n    private store: Map<string, any>;\n\n    constructor() {\n        this.store = new Map();\n    }\n\n    add(name: string, el: any) {\n        if (this.collides(name)) {\n            throw new Error('Name is not unique!');\n        }\n        return this.store.set(name, el);\n    }\n\n    remove(name: string) {\n        return this.store.delete(name);\n    }\n\n    collides(name: string): boolean {\n        return this.store.has(name);\n    }\n\n    clear() {\n        this.store.clear();\n    }\n\n}\n","import {\n    ElementRef,\n    Input,\n    OnInit,\n    Directive,\n    OnDestroy\n} from '@angular/core';\nimport {\n    AppConfig\n} from '@aribaui/core';\n\nimport {\n    AwNameStore\n} from './aw-name.store';\n\n/**\n * The 'awName' directive attaches a identifier to decorated element to aid selectors for testing\n * purposes. The 'awName' directive tries to generate a unique identifier based on contextual data\n * and inherant immutable element attributes.\n *\n * **Generating the Base Name**\n *\n * The 'awName' directive generates a base name from element tag name and attributes which are\n * static by nature.\n *\n *     Example:\n *         <button name=\"order\" awName>\n *\n *     Result:\n *         <button name=\"order\" awname=\"button_order\">\n *\n * If the element has an 'id', that value takes precedent and is used instead of a generated\n * name.\n *\n *     Example:\n *         <button name=\"order\" id=\"myOrderButton\" awName>\n *\n *     Result:\n *         <button name=\"order\" id=\"myOrderButton\" awname=\"button_myOrderButton\">\n *\n *\n * **Repeated Elements and the 'ext' Parameter**\n *\n * There are many cases where elements are generated dynamically in the code as lists or tables.\n * In such cases, it may not be easy to distinguish individual elements by standard HTML\n * attributes, so the 'awName' directive allows custom extentions to the base name to be provided\n * using the 'ext' attribute.\n *\n *    Example:\n *        fruits = ['apple', 'banana', 'orange'];\n *\n *        <ul>\n *            <li *ngFor=\"let fruit of fruits\" awName ext=\"{{fruit}}\">{{fruit}}</li>\n *        </ul>\n *\n *   Result:\n *       <ul>\n *           <li awname=\"li_apple\">apple</li>\n *           <li awname=\"li_banana\">banana</li>\n *           <li awname=\"li_orane\">orange</li>\n *       </ul>\n *\n * **Adding Context Through Ancestor Inspection**\n *\n * In order to provide context to the element naming, the 'awName' directive loops through the\n * parent ancestry and searches for any unique element 'id' to prepend to the base name.\n *\n *     Example:\n *         <form id=\"applicant\">\n *            <input type=\"text\" name=\"firstName\" awName>\n *            <input type=\"text\" name=\"lastName\" awName>\n *         </form>\n *         <form id=\"spouse\">\n *            <input type=\"text\" name=\"firstName\" awName>\n *            <input type=\"text\" name=\"lastName\" awName>\n *         </form>\n *\n *     Result:\n *         <form id=\"applicant\">\n *            <input type=\"text\" name=\"firstName\" awname=\"applicant_input_firstName\">\n *            <input type=\"text\" name=\"lastName\" awname=\"applicant_input_lastName\">\n *         </form>\n *         <form id=\"spouse\">\n *            <input type=\"text\" name=\"firstName\" awname=\"spouse_input_firstName\">\n *            <input type=\"text\" name=\"lastName\" awname=\"spouse_input_lastname\">\n *         </form>\n *\n * **Uniqueness Check**\n *\n * 'awName' keeps track of the names it creates by adding them to a map store. Whenever it\n * creates a new name during the `ngOnInit` phase it checks it against the existing map,\n * and will throw an error if it encounters a duplicate. Moreover during the element destruction\n * phase, `ngOnDestroy`, 'awName' removes the generated name from the store.\n *\n *\n * **In Production**\n *\n * Using 'awName' adds a small bit of rendering overhead for each element it is used on. In\n * a production environment, 'awName' serves no functionality to the end user, but may have\n * a performance impact on the application. As such, 'awName' takes into account the\n * `AppConfig` settings and disables name generation when `AppConfig.isProductionMode()`\n * is `true`.\n *\n * In your application, you can turn on production mode by setting `devmode.enabled` to\n * `false` when configuring `AribaCoreModule`:\n *\n *     AribaCoreModule.forRoot({\n *         'devmode.enabled': false\n *     })\n *\n */\n@Directive({\n    selector: '[awName]',\n})\nexport class AwNameDirective implements OnInit, OnDestroy {\n\n    @Input() ext: string;\n\n    private name: string;\n\n    private separator: string = '_';\n\n    constructor(\n        private el: ElementRef,\n        private store: AwNameStore,\n        private config: AppConfig\n    ) {}\n\n    ngOnInit() {\n            this.name = this.createName(this.el);\n            this.addElementToStore(this.name, this.el);\n            this.el.nativeElement.setAttribute('awname', this.name);\n        }\n\n    ngOnDestroy() {\n        this.store.remove(this.name);\n    }\n\n    /**\n     * Add element name/id and reference to map store. If name/id already\n     * exists in store then it throws an error.\n     *\n     */\n    addElementToStore(name: string, elem: ElementRef) {\n        try {\n            this.store.add(name, elem);\n        } catch (e) {\n            console.error(e.message + `. \"${name}\" is already in use.`, elem.nativeElement);\n            return;\n        }\n    }\n\n    /**\n     * Generate name/id for element.\n     *\n     * param elem Reference to element\n     * @return String Name/ID\n     */\n    createName(elem: ElementRef) {\n\n        const tagName = this.getTagName(elem);\n\n        // Initialize array of string parts\n        const parts = [];\n\n        // Find ancestor tag id, if there is one\n        const parentID = this.getAncestorId(elem);\n        if (parentID) {\n            parts.push(parentID);\n        }\n\n        // Check the tag type\n        if (tagName === 'option') {\n            const parentName = this.getParentName(elem);\n            if (parentName) {\n                parts.push(parentName);\n            }\n        }\n\n        // Get tagname\n        parts.push(tagName);\n\n        // Choose id property if it exists\n        if (elem.nativeElement.id) {\n            parts.push(elem.nativeElement.id);\n\n        // Otherwise build extension from tag properties\n        } else {\n            // check for a name attribute\n            if (elem.nativeElement.hasAttribute('name')) {\n                parts.push(elem.nativeElement.name);\n            }\n\n            // check for value attribute if 'option' tag\n            if (tagName === 'option') {\n                if (elem.nativeElement.hasAttribute('value')) {\n                    parts.push(this.spacesToUnderscore(elem.nativeElement.value));\n                }\n            }\n        }\n        // Add custom extension if it exists\n        if (this.ext) {\n            parts.push(this.spacesToUnderscore(this.ext));\n        }\n\n        return parts.join(this.separator);\n    }\n\n    /**\n     * Get tag name from element reference.\n     * @param elem Reference to element\n     */\n    getTagName(elem: ElementRef) {\n        return elem.nativeElement.tagName.toLowerCase();\n    }\n\n    /**\n     * Traverse element ancestry and return first id attribute\n     * encountered.\n     * @param elem Reference to element\n     */\n    getAncestorId(elem: ElementRef) {\n        let parent = elem.nativeElement.parentNode;\n        let id = '';\n        while (parent && !id) {\n            if (parent.id) {\n                id = parent.id;\n            }\n            parent = parent.parentNode;\n        }\n        return id;\n    }\n\n    /**\n     * Get name attribute from parent if name attribute exists.\n     * @param elem Reference to element\n     */\n    getParentName(elem: ElementRef) {\n        const parent = elem.nativeElement.parentNode;\n        return (parent.name && !parent.id) ? parent.name : null;\n    }\n\n    spacesToUnderscore(str: string) {\n        return str.replace(/\\s+/g, '_');\n    }\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {EmbeddedItemDirective} from './embedded-item';\nimport {GenericContainerComponent} from './generic-container.component';\nimport {IncludeComponentDirective} from './include-component.directive';\nimport {ErrorMessagesComponent} from './error-messages/error-messages.component';\nimport {ModalComponent} from './modal-service/modal/modal.component';\nimport {CurrencyFormatPipe} from './pipes/currency-format.pipe';\nimport {NgForSetDirective} from './on-ngfor-set.directive';\nimport {InfiniteScrollComponent} from './infite-scroll/infite-scroll.component';\nimport {AwNameDirective} from './aw-name/aw-name.directive';\n\n\n@NgModule({\n    declarations: [\n        EmbeddedItemDirective,\n        IncludeComponentDirective,\n        GenericContainerComponent,\n        ErrorMessagesComponent,\n        ModalComponent,\n        CurrencyFormatPipe,\n        NgForSetDirective,\n        InfiniteScrollComponent,\n        AwNameDirective\n    ],\n    imports: [\n        CommonModule\n    ],\n    entryComponents: [\n        GenericContainerComponent,\n        ModalComponent\n    ],\n    exports: [\n        EmbeddedItemDirective,\n        IncludeComponentDirective,\n        GenericContainerComponent,\n        ErrorMessagesComponent,\n        ModalComponent,\n        CurrencyFormatPipe,\n        NgForSetDirective,\n        InfiniteScrollComponent,\n        AwNameDirective\n    ]\n})\nexport class AWCoreComponentModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Environment, noop} from '@aribaui/core';\nimport {BaseComponent} from '../base.component';\n\n/**\n * Parent class for all modal dialogs. Provides defaults functionality for all modals.\n */\nexport class ModalContainer extends BaseComponent\n{\n\n    /**\n     * Override function.\n     */\n    destroy: () => void = noop;\n\n\n    constructor(public env: Environment)\n    {\n        super(env);\n    }\n\n\n    /**\n     * function that closes the dialog by calling destroy on the component reference.\n     * Method inherited by all its children.\n     */\n    closeModal(): void\n    {\n        this.destroy();\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Injectable, Type} from '@angular/core';\nimport {isBlank, isPresent, isStringMap, isType, objectToName} from '@aribaui/core';\nimport {BehaviorSubject, Observable} from 'rxjs';\n\n\n/**\n * DataTypeProviderRegistry aggregates different DataProviders per type.\n */\n@Injectable()\nexport class DataTypeProviderRegistry\n{\n\n    /**\n     * Maps class name to DataProvider implementation\n     */\n    private registryByProvider: Map<string, DataProvider<any>>;\n\n\n    /**\n     * Maps a class Name  to actual type\n     */\n    private registryNameToClass: Map<string, any>;\n\n\n    constructor()\n    {\n        this.registryByProvider = new Map<string, DataProvider<any>>();\n        this.registryNameToClass = new Map<string, any>();\n    }\n\n    /**\n     * For every single registered DataProvider implementation we also need store its prototype\n     * in order to be able to support some kind of inheritance. You can register a provider for\n     * a parent class if needed\n     *\n     */\n    registerProvider<T>(target: any, provider: DataProvider<T>): void\n    {\n        if (isBlank(target) || (!isStringMap(target) && !isType(target))) {\n            throw new Error(' Cannot register non-object');\n        }\n\n        let name = isType(target) ? target.prototype.constructor.name : target.constructor.name;\n        this.registryByProvider.set(name, provider);\n\n        let prototype = Object.getPrototypeOf(target);\n        this.registryNameToClass.set(name, prototype);\n    }\n\n\n    /**\n     * Search for best matching provider. If not found then use object prototype to get hold of its\n     * parent and see if there is a provider registered on this level\n     *\n     */\n    bestMatchForClass<T>(className: string): DataProvider<T>\n    {\n        let registeredClassName = className;\n        let classProto = this.registryNameToClass.get(className);\n\n        while (isPresent(registeredClassName)) {\n            let provider: DataProvider<T> = this.registryByProvider.get(registeredClassName);\n\n            if (isPresent(provider)) {\n                provider.type = className;\n                return provider;\n            }\n\n            // Go up to parent\n            if (isPresent(classProto)) {\n                classProto = Object.getPrototypeOf(classProto);\n                let parentName = objectToName(classProto);\n                registeredClassName =\n                    (isPresent(parentName) && parentName !== registeredClassName) ? parentName\n                        : null;\n            } else {\n                return null;\n            }\n        }\n        return null;\n    }\n\n\n    /**\n     * The same as bestMatchForClass() with the difference to pass a type. If you want to\n     * support object inheritance you need this.\n     *\n     *\n     */\n    bestMatchForType<T>(type: Type<T>): DataProvider<T>\n    {\n        let name: string = objectToName(type);\n\n        this.registryNameToClass.set(name, type);\n        return this.bestMatchForClass<T>(name);\n    }\n}\n\n\n/**\n * Provider is a data driver that can access data and retrieve them. It knows how to get 1\n * or more records, maybe do paging and some other things.\n *\n */\nexport abstract class DataProvider<T>\n{\n    /**\n     * Defines current type for this DataProvider\n     */\n    type: any;\n\n    /**\n     * Notifies all the listeners in case of data are available or if they changed due to some user\n     * interaction  (search, adding or removing).\n     *\n     */\n    dataChanges: BehaviorSubject<T[]> = new BehaviorSubject<T[]>([]);\n\n\n    /**\n     * Internal data source populated by fetch or search. JS application can hold large amount of\n     * records without going back to the REST server. This can be used to cache search result on\n     * the client site.\n     *\n     */\n    offScreenData: any[];\n\n\n    /**\n     *  Return size of the source\n     *\n     */\n    expectedCount(params?: Map<string, any>): number\n    {\n        return -1;\n    }\n\n    /**\n     *\n     * For use cases where we need to retrieve data based on some criteria e.g.\n     *\n     *  - max number of records\n     *  - support paging with offset and limit\n     *\n     * @deprecated by fetch\n     */\n    abstract dataForParams(params: Map<string, any>): Array<T>;\n\n\n    /**\n     *\n     * Fetches data from underlying dataProvider.\n     *\n     * Replacement for dataforParams\n     *\n     */\n    abstract fetch(params: Map<string, any>): Observable<T[]>;\n\n    /**\n     *\n     * Returns non-async current state of data\n     */\n    data(): Array<T>\n    {\n        return this.dataChanges.getValue();\n    }\n\n\n    /**\n     * Tells if this DataProvider supports INSERT, REMOVE\n     *\n     */\n    canCRUD(): boolean\n    {\n        return false;\n    }\n\n\n    /**\n     * Tells if this DataProvider supports query capability\n     *\n     */\n    canQuery(): boolean\n    {\n        return false;\n    }\n\n    /**\n     * Implement to support insertion. After record is inserted emit event for dataChanges to\n     * inform all subscribers\n     *\n     */\n    insert(obj: any): void\n    {\n    }\n\n\n    /**\n     * Implement to support record removal. After record is removed emit event for dataChanges to\n     * inform all subscribers.\n     *\n     */\n    remove(obj: any): void\n    {\n\n    }\n\n    /**\n     * Implement to provide access to low level searcg API.\n     *\n     */\n    query(params: Map<string, string>): void\n    {\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {DataProvider} from './datatype-registry.service';\nimport {FieldPath, isBlank, isPresent} from '@aribaui/core';\nimport {Observable, of as observableOf} from 'rxjs';\n\n\n/**\n * Default implementation for Arrays.\n */\nexport class ArrayDataProvider<T> extends DataProvider<T>\n{\n\n    constructor(protected  values: Array<T>)\n    {\n        super();\n        this.type = Array;\n\n        this.offScreenData = this.values;\n        this.dataChanges.next(this.values);\n    }\n\n    expectedCount(params?: Map<string, any>): number\n    {\n        return this.offScreenData.length;\n    }\n\n    dataForParams(params?: Map<string, any>): Array<T>\n    {\n        if (isBlank(params)) {\n            return this.offScreenData;\n        }\n        let data = this.offScreenData;\n\n        if (isPresent(params) && params.has('offset') && params.has('limit')) {\n            let offset = params.get('offset');\n            let limit = params.get('limit');\n\n            if (data.length > (offset + limit)) {\n                data = data.slice(offset, offset + limit);\n            } else {\n                data = data.slice(offset, data.length);\n            }\n        }\n\n        if (params.has('orderby') && params.has('selector')) {\n            this.sort(data, params.get('orderby'), params.get('selector'));\n        }\n        return data;\n    }\n\n\n    fetch(params: Map<string, any>): Observable<T[]>\n    {\n        return observableOf(this.dataForParams(params));\n    }\n\n\n    /**\n     * Provides default implementation for sorting current dataset by one column / key\n     *\n     * for sortOrdering please see Datatable and its sortOrderingForNumber()\n     *\n     *      1  = ascending\n     *      -1 = descending\n     */\n    private sort(arrayToSort: any[], key: string, sortOrder: number): void\n    {\n        arrayToSort.sort((data1: any, data2: any) =>\n        {\n            let value1 = FieldPath.getFieldValue(data1, key);\n            let value2 = FieldPath.getFieldValue(data2, key);\n            let result = null;\n\n            if (value1 == null && value2 != null) {\n                result = -1;\n            } else if (value1 != null && value2 == null) {\n                result = 1;\n            } else if (value1 == null && value2 == null) {\n                result = 0;\n            } else if (typeof value1 === 'string' && typeof value2 === 'string') {\n                result = value1.localeCompare(value2);\n            } else {\n                result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\n            }\n\n            return (sortOrder * result);\n        });\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport {DataProvider, DataTypeProviderRegistry} from './datatype-registry.service';\nimport {Injectable} from '@angular/core';\nimport {isArray, isString} from '@aribaui/core';\nimport {ArrayDataProvider} from './array-data-provider';\n\n\n/**\n * Provides top level accessor class in order to make {@link DataProvider} retrieval process easier.\n * Using {@link DataTypeProviderRegistry} we either retrieve registered instance of concrete\n * provider or instantiate our implicit provider for native types such as Array.\n *\n *\n */\n@Injectable()\nexport class DataProviders\n{\n\n\n    constructor(private registry: DataTypeProviderRegistry)\n    {\n    }\n\n    /**\n     * Finds the best matching  DataProvider or create new one in case of Array\n     * More room to register and instantiate some other implicit Providers\n     */\n    find(target: any): DataProvider<any>\n    {\n        if (isArray(target)) {\n            return new ArrayDataProvider(target);\n        } else if (isString(target)) {\n            return this.registry.bestMatchForClass(target);\n        }\n\n        return this.registry.bestMatchForType(target);\n    }\n\n\n    /**\n     * Registers new provider within DataTypeProviderRegistry\n     *\n     */\n    register<T>(target: any, provider: DataProvider<T>): void\n    {\n        this.registry.registerProvider(target, provider);\n    }\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport {DataProvider} from './datatype-registry.service';\nimport {Injectable, Type} from '@angular/core';\nimport {\n    assert,\n    FieldPath,\n    isArray,\n    isBlank,\n    isFunction,\n    isJsObject,\n    isPresent,\n    objectToName,\n    objectValues,\n    unimplemented\n} from '@aribaui/core';\nimport {Observable, of as observableOf} from 'rxjs';\nimport {ArrayDataProvider} from './array-data-provider';\nimport {OutlineNode} from '../../widgets/outline/outline-for.component';\n\n\n/**\n *\n * Provides a registry of different data Finders used mostly by DataSources. All Finders are\n * registered by this class as we don't have any needs right now to expose this to developer.\n *\n */\n@Injectable()\nexport class DataFinders\n{\n\n    private findersByType: Map<DataFinder, Type<DataFinder>> = new Map();\n\n    constructor()\n    {\n        this.initFinders();\n    }\n\n    /**\n     * Finds the best matching DataFinder based on the object type and queryType.\n     */\n    find(forProvider: DataProvider<any>, forType: QueryType): DataFinder\n    {\n\n        let finderMatch: Type<DataFinder>;\n        this.findersByType.forEach((v: Type<DataFinder>, k: DataFinder) =>\n        {\n            if (k.accepts(forProvider, forType)) {\n                finderMatch = v;\n                return true;\n            }\n        });\n\n        if (isPresent(finderMatch)) {\n            let copy = new finderMatch();\n            copy.forData(forProvider);\n            return copy;\n\n        }\n        return null;\n    }\n\n    /**\n     * Registers new finder\n     *\n     */\n    register<T>(prototype: DataFinder, type: Type<DataFinder>): void\n    {\n        this.findersByType.set(prototype, type);\n    }\n\n    private initFinders()\n    {\n        // create a prototype for each\n        this.findersByType.set(new FullTextArrayDataFinder(), FullTextArrayDataFinder);\n        this.findersByType.set(new OutlineFullTextArrayDataFinder(),\n            OutlineFullTextArrayDataFinder);\n\n    }\n}\n\n/**\n * We have different options how to query data. FullText uses a string where predicate is\n * using key:value pair to built a query\n */\nexport enum QueryType\n{\n    FullText,\n    FullTextOutline,\n    Predicate,\n    FullTextAndPredicate\n}\n\n\n/**\n * This class provides matching capability for given DataProvider.\n */\nexport abstract class DataFinder\n{\n\n\n    /**\n     *\n     * Lookup key to apply when running match. Ideally your DS should be able to set lookupKey\n     * either globally for given dataProvider or locally every time you run search. This is in\n     * case you have many choosers for the same type and you want them to have different lookup\n     * key.\n     *\n     *\n     *\n     */\n    abstract set lookupKey(key: string);\n\n    /**\n     * In order to find concrete DataFinder we need to know the target type and the query type\n     *\n     */\n    accepts(forData: DataProvider<any>, forType: QueryType): boolean\n    {\n        return false;\n    }\n\n    /**\n     *\n     * Sets a DataProvider for DataFinder\n     *\n     */\n    abstract forData(provider: DataProvider<any>): DataFinder;\n\n    /**\n     *\n     * Matching methods which are either async or sync\n     *\n     */\n    abstract instantMatch<T>(query: any, max: number): T[];\n\n    abstract instantMatchWithSelections<T>(selectionsForMatch: any[], query: any,\n                                           max: number): T[];\n\n\n    /**\n     *\n     * Query can be a simple string literal or a map having different key value pair as a\n     * filter\n     *\n     */\n    match<T>(query: any, max: number = -1): Observable<T[]>\n    {\n        return unimplemented();\n    }\n\n    matchWithSelections<T>(selections: any[], query: any, max: number): Observable<T[]>\n    {\n        return unimplemented();\n    }\n}\n\n\n/**\n * Simple FullText implementation based on infix string matching which works on top of\n * ArrayDataProvider.\n *\n */\nexport class FullTextArrayDataFinder extends DataFinder\n{\n    /**\n     *  If list value is object set keyPath to get the object value\n     */\n    _keyPath: FieldPath;\n\n    /**\n     * Current DataProvider used to access data\n     */\n    protected _provider: DataProvider<any>;\n\n    set lookupKey(key: string)\n    {\n        this._keyPath = isPresent(key) ? new FieldPath(key) : null;\n    }\n\n    accepts(forData: DataProvider<any>, forType: QueryType): boolean\n    {\n        return forData instanceof ArrayDataProvider && forType === QueryType.FullText;\n    }\n\n    forData(provider: DataProvider<any>): FullTextArrayDataFinder\n    {\n        this._provider = provider;\n        return this;\n    }\n\n    instantMatch<T>(query: any, max: number): T[]\n    {\n        assert(isPresent(this._provider), 'Missing DataProvider');\n\n        let list = this._provider.dataForParams(new Map().set('limit', max));\n        return this.instantMatchWithSelections<T>(list, query, max);\n    }\n\n    instantMatchWithSelections<T>(selectionsForMatch: any[], query: string, max: number): Array<T>\n    {\n        assert(isPresent(this._provider), 'Missing DataProvider');\n\n        if (isBlank(query)) {\n            return selectionsForMatch;\n        }\n        let result: any[] = [];\n        let toLowerPattern = query.toLowerCase();\n\n        for (let i = 0; i < selectionsForMatch.length; i++) {\n            let item = selectionsForMatch[i];\n            if (this.matches(item, toLowerPattern)) {\n                result.push(item);\n                if (result.length >= max) {\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     *\n     * Warning: If you dont supply search Key and you want fulltext search and you use this\n     * default implementation be aware that it can  perform poorly as it is naive implementaion\n     * that does not do deep compare.\n     *\n     */\n    matches<T>(item: any, pattern: string): boolean\n    {\n        let val = (isPresent(this._keyPath)) ? this._keyPath.getFieldValue(item) : item;\n        if (isFunction(val)) {\n            val = val.call(item);\n        } else if (isJsObject(item)) {\n            return this.hasObjectValue(item, pattern);\n\n        } else {\n            return isBlank(pattern) ||\n                isPresent(val) && val.toString().toLowerCase().indexOf(pattern) > -1;\n        }\n    }\n\n\n    match<T>(query: any, max: number): Observable<T[]>\n    {\n        return observableOf(this.instantMatch(query, max));\n    }\n\n    matchWithSelections<T>(selections: any[], query: any, max: number): Observable<T[]>\n    {\n        return observableOf(this.instantMatchWithSelections(selections, query, max));\n    }\n\n    protected hasObjectValue(obj: any, pattern: string): boolean\n    {\n        let values = objectValues(obj);\n        let parentObj = objectToName(obj);\n        let length2 = values.filter((value: any) =>\n        {\n            if (isBlank(value) || isArray(value)) {\n                return false;\n\n            } else if (!isJsObject(value) && !isFunction(value)) {\n                return value.toString().toLowerCase().indexOf(pattern) !== -1;\n\n            } else if (isJsObject(value) && objectToName(value) !== parentObj) {\n                return this.hasObjectValue(value, pattern);\n            }\n\n            return false;\n        }).length;\n        return length2 > 0;\n    }\n}\n\n\n/**\n * Extends basic Infix implementation to work on top of OutlineNodes. It first checks all the\n * children on lowest level and moving up to the root and marking nodes that can be removed.\n *\n *  For simple data structure which operates on local array this should be good enough we this\n *  can never match with real DB full text search.\n *\n */\nexport class OutlineFullTextArrayDataFinder extends FullTextArrayDataFinder\n{\n\n    accepts(forData: DataProvider<any>, forType: QueryType): boolean\n    {\n        return forData instanceof ArrayDataProvider && forType === QueryType.FullTextOutline;\n    }\n\n\n    instantMatchWithSelections<T>(selectionsForMatch: any[], query: string, max: number): Array<T>\n    {\n        assert(isPresent(this._provider), 'Missing DataProvider');\n\n        if (isBlank(query)) {\n            return selectionsForMatch;\n        }\n        let toLowerPattern = query.toLowerCase();\n\n        let sourceToSearch = selectionsForMatch.slice();\n        this.rollup(sourceToSearch, toLowerPattern);\n        return this.shake(sourceToSearch);\n    }\n\n\n    /**\n     *\n     * Going thru the tree from bottom up and mark all that matches query\n     *\n     */\n    rollup(nodes: OutlineNode[], query: string): boolean\n    {\n        nodes.forEach((item: OutlineNode) =>\n        {\n            // start from bottom up and capture how many occurrences is found for future use\n            let hasChildrenMatch = false;\n            if (isPresent(item.children) && item.children.length > 0) {\n                hasChildrenMatch = this.rollup(item.children, query);\n            }\n            item.visible = hasChildrenMatch || this.matches(item, query);\n        });\n\n        return nodes.some((item: OutlineNode) => item.visible);\n    }\n\n    /**\n     * Filter out all the nodes that are marked as visible = false and make sure and\n     * don't modify original list\n     *\n     */\n    shake(nodes: OutlineNode[]): any[]\n    {\n        return nodes\n            .filter(node => node.visible)\n            .map(node => ({\n                ...node,\n                isExpanded: node.visible,\n                children: node.children && this.shake(node.children)\n            }));\n    }\n\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport {DataProviders} from './data-providers';\nimport {DataFinders} from './data-finders';\nimport {Observable} from 'rxjs';\nimport {InjectionToken} from '@angular/core';\nimport {unimplemented} from '@aribaui/core';\nimport {DataFinder, QueryType} from '../../core/data/data-finders';\nimport {DataProvider} from '../../core/data/datatype-registry.service';\n\n\nexport const DATA_SOURCE = new InjectionToken<DataSource>('DATA_SOURCE');\n\n/**\n * DataSource describes basic functionality for handling stream of data specific to component\n *\n * It is expected that DataSource will be defined as component provider using\n *\n * @Components ({\n *      ...\n *      providers:[\n *\n *          provide: DATA_SOURCE, useClass: ChooserDataSourcePlainArrayExample,\n                        deps: [DataProviders, DataFinders]\n *      ]\n *\n * })\n *\n *\n * so all the dependencies (DataProviders, DataFinders) are properly injected.\n *\n * DataProvider uses open() method to broadcast changes to all the subscribers in reactive way.\n * Or you can use instant() method to retrieve current state of this DataSource (sync)\n *\n */\nexport abstract class DataSource\n{\n    static readonly MaxLength = 10;\n    static readonly MaxRecentSelected = 5;\n\n    /**\n     *\n     * Each DataSource have injected DataProviders and DataFinders to retrieve concrete\n     * implementation\n     *\n     */\n    constructor(protected dataProviders?: DataProviders, protected finders?: DataFinders)\n    {\n    }\n\n\n    /**\n     * Allows to initialize data source and pass some additional values\n     *\n     *\n     */\n    abstract init(...args: any[]): void;\n\n    /**\n     * DataProviders works with stream of data and this opens up the channel in order to\n     * listen and react for any changes that could happen inside DataProvider\n     */\n    abstract open<T>(): Observable<T[]>;\n\n\n    /**\n     * Release subscription to DataProvider\n     */\n    abstract close(): void;\n\n\n    /**\n     * Returns a data instantly from the internal state of DataProvider\n     */\n    instant<T>(): T[]\n    {\n\n        return unimplemented();\n    }\n\n}\n\n\n/**\n * To make initialization easier we have this common format.\n */\nexport interface DSInitParams\n{\n    /**\n     * List of values or the object type name we want to render\n     */\n    obj?: any;\n\n    /**\n     * Which find we want to load FullText or Predicate\n     */\n    queryType: QueryType;\n\n    /**\n     * Can specify lookup Key to narrow down the search to specific field. If lookup key is\n     * null, items are assumed to be strings\n     */\n    lookupKey?: string;\n\n    /**\n     * Tells if the Chooser is single or multi select\n     */\n    multiselect: boolean;\n\n    /**\n     * Option to pass custom DataProvider instead letting DataProviders to find match\n     */\n    dataProvider?: DataProvider<any>;\n\n    /**\n     * Option to pass custom DataFinder instead letting DataFinders to find match\n     */\n    dataFinder?: DataFinder;\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, HostBinding} from '@angular/core';\n\n/**\n * We are using these components as a better way selectors.\n *\n */\n\n\n/**\n * Common class used used for Five Zone layout. Used for the ng-content selector\n */\n@Component({\n    selector: 'aw-top',\n    template: '<ng-content></ng-content>'\n})\nexport class TopZoneComponent\n{\n    @HostBinding('class') classList: string = 'ui-g-12 ui-g-nopad ';\n}\n\n/**\n * Common class used used for Five Zone layout. Used for the ng-content selector\n */\n@Component({\n    selector: 'aw-left',\n    template: '<ng-content></ng-content>'\n})\nexport class LeftZoneComponent\n{\n    @HostBinding('class') classList: string = 'ui-g-12 ui-g-nopad';\n}\n\n/**\n * Common class used used for Five Zone layout. Used for the ng-content selector\n */\n@Component({\n    selector: 'aw-middle',\n    template: '<ng-content></ng-content>'\n})\nexport class MiddleZoneComponent\n{\n    @HostBinding('class') classList: string = 'ui-g-12 ui-md-6 ui-lg-4 ui-g-nopad';\n}\n\n\n/**\n * Common class used used for Five Zone layout. Used for the ng-content selector\n */\n@Component({\n    selector: 'aw-right',\n    template: '<ng-content></ng-content>'\n})\nexport class RightZoneComponent\n{\n    @HostBinding('class') classList: string = 'ui-g-12 ui-g-nopad';\n\n}\n\n/**\n * Common class used used for Five Zone layout. Used for the ng-content selector\n */\n@Component({\n    selector: 'aw-bottom',\n    template: '<ng-content></ng-content>'\n})\nexport class BottomZoneComponent\n{\n    @HostBinding('class') classList: string = 'ui-g-12 ui-g-nopad';\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, forwardRef, HostBinding, Inject, Input, Optional, SkipSelf} from '@angular/core';\nimport {AsyncValidatorFn, ValidatorFn, Validators} from '@angular/forms';\nimport {Environment, isBlank, isPresent, ListWrapper, StringWrapper} from '@aribaui/core';\nimport {FormTableComponent} from '../form-table.component';\nimport {BaseFormComponent, WidgetSizeColumns} from '../../../core/base-form.component';\n\n/**\n * Used by FormTable to layout fields into Rows. Each FormTable row is reasonable for not only to\n * include actual component such is DropDown or InputField but mainly provides a enough context for\n * the component to specify the size, how it should layout, whether we need to show required flag,\n * to show/hide labels in case if we have no label layout and much more.\n *\n * FormRow component also registers angular validator for the current row/field. As already\n * mentioned We treat our widgets with minimal responsibility as possible to present and retrive\n * information to/from user and let somebody else to figure out where it appear and how.\n *\n * todo: Move under FormTable\n */\n@Component({\n    selector: 'aw-form-row',\n    templateUrl: 'form-row.component.html',\n    styleUrls: ['form-row.component.scss'],\n    providers: [\n        {provide: BaseFormComponent, useExisting: forwardRef(() => FormRowComponent)}\n    ]\n})\nexport class FormRowComponent extends BaseFormComponent\n{\n\n    /**\n     * Hides the label\n     *\n     */\n    @Input()\n    noLabelLayout: boolean = false;\n\n    /**\n     * Renders row with highlighted background\n     *\n     */\n    @Input()\n    highlightRow: boolean = false;\n\n    /**\n     *\n     *  Field label that should appear above or next to the control\n     *\n     */\n    @Input()\n    label: string = '';\n\n    /**\n     *  For inputs type fields provides default angular validators, maximal length of the field\n     */\n    @Input()\n    maxLength: number;\n\n    /**\n     *  For inputs type fields provides default angular validators, minimal length of the field\n     */\n    @Input()\n    minLength: number;\n\n\n    /**\n     *  For inputs type fields provides default angular formatters. How the input fields should be\n     * formatted\n     */\n    @Input()\n    pattern: string;\n\n\n    /**\n     * Defines custom async validators which will be attached to the Control\n     */\n    @Input()\n    customAsyncValidators: AsyncValidatorFn[];\n\n    /**\n     * Defines custom  validators which will be attached to the Control\n     */\n    @Input()\n    customValidators: ValidatorFn[];\n\n    /**\n     * Tells the form row that we are rendering another nested form in this row. so we need\n     * to go 100%\n     */\n    @Input()\n    isNestedLayout: boolean = false;\n\n    /**\n     * What is the current size of the field. Current we support 4 different sizes: x-small, small,\n     * medium, large, x-large\n     */\n    private _size: string;\n\n    /**\n     *\n     * For single column layout without zones we need to apply grid directly to the FormRow tag\n     * so we don't need to introduce extra div level\n     *\n     */\n    @HostBinding('class') classList: string = '';\n\n\n    private _labelsOnTop: boolean;\n\n    constructor(public env: Environment,\n                // Event this creates CI depends. Need to have a reference to parent\n                // I need to refactor more parent to not use this child and refactor layouting\n                @SkipSelf() @Optional() @Inject(forwardRef(() => FormTableComponent))\n                protected parentContainer: FormTableComponent)\n    {\n        super(env, parentContainer);\n\n        this._size = 'ui-g-12 ui-md-' + WidgetSizeColumns.medium;\n    }\n\n\n    /**\n     * Right now we just initialize this once and use the values we do not expect now to react to\n     * changes\n     */\n    ngOnInit()\n    {\n        super.ngOnInit();\n        super.registerFormControl(null);\n\n        this.registerValidators();\n\n        this.omitPadding = this.parentContainer.omitPadding;\n        this.classList += isPresent(this.parentContainer) ? ' ui-g-12 ' : '';\n        this.classList = this.highlightRow ? this.classList + ' highlight-row ' : this.classList;\n\n        this.classList = this.omitPadding ? this.classList + ' ui-g-nopad ' : this.classList;\n    }\n\n\n    /**\n     * Just a size getter\n     *\n     */\n    get size(): string\n    {\n        return this._size;\n    }\n\n    /**\n     *  A size setter we translate custom sizes into actual bootstrap grid system. We use medium\n     * right now. but we should extend this for other screen sizes\n     *\n     *  todo: provide mapping and add other grid classes for other sizes xs, sm, lg, xl\n     *\n     *  Also check if this is dynamic size that should vary based on the how many number of columns\n     * we have. e.g. Date widgets is by default small, but in 2, 3 columns layout this small is too\n     * small.\n     */\n\n\n\n    @Input()\n    set size(value: string)\n    {\n\n        let isDynVal = false;\n\n        if (StringWrapper.startsWidth(value, 'd-')) {\n            isDynVal = true;\n            value = value.substr(2, value.length - 1);\n        }\n\n        if (isPresent(value) && !this.isNestedLayout) {\n            this._size = value;\n            let dSize = this.dynSize(value, isDynVal);\n            this._size = 'ui-g-12 ui-md-' + dSize;\n        } else if (this.isNestedLayout) {\n            this._size = 'ui-g-12 ui-md-12';\n        }\n    }\n\n\n    ngDoCheck(): void\n    {\n        super.ngDoCheck();\n\n        if (isPresent(this.parentContainer) && this.editable !== this.parentContainer.editable) {\n            this.editable = this.parentContainer.editable;\n        }\n    }\n\n    /**\n     * Push out of box angular validator as well as custom one to current FormControl\n     */\n    private registerValidators()\n    {\n        let validators: ValidatorFn[] = [];\n\n        if (isPresent(this.maxLength)) {\n            validators.push(Validators.maxLength(this.maxLength));\n        }\n\n        if (isPresent(this.minLength)) {\n            validators.push(Validators.minLength(this.minLength));\n        }\n\n        if (isPresent(this.required) && this.required) {\n            validators.push(Validators.required);\n        }\n\n        if (isPresent(this.pattern)) {\n            validators.push(Validators.pattern(this.pattern));\n        }\n        if (isPresent(this.customValidators)) {\n            ListWrapper.addAll(validators, this.customValidators);\n        }\n\n        if (validators.length === 1) {\n            this.formControl.setValidators(validators[0]);\n        } else if (validators.length > 1) {\n            this.formControl.setValidators(Validators.compose(validators));\n        }\n\n        if (isPresent(this.customAsyncValidators) && this.customAsyncValidators.length === 1) {\n            this.formControl.setAsyncValidators(this.customAsyncValidators[0]);\n        } else if (isPresent(this.customAsyncValidators) && this.customAsyncValidators.length > 1) {\n            this.formControl.setAsyncValidators(\n                Validators.composeAsync(this.customAsyncValidators));\n        }\n    }\n\n\n    /**\n     *\n     * Do we have labels on TOP, try to read this from Parent\n     *\n     */\n    get labelsOnTop(): boolean\n    {\n        if (isBlank(this._labelsOnTop) && isPresent(this.parentContainer)) {\n            return (<FormTableComponent>this.parentContainer).isLabelsOnTop();\n        }\n        return false;\n    }\n\n\n    /**\n     *\n     * Can refactor all into 1 line but its hard to debug so this is just for read\n     *\n     */\n    private dynSize(value: string, isDynValue: boolean): string\n    {\n        let normalizeSize = value.toLowerCase().replace('-', '');\n\n        if (isPresent(this.parentContainer) &&\n            (<FormTableComponent>this.parentContainer).hasTwoColumn && isDynValue)\n        {\n\n            let enumValues: string[] = Object.keys(WidgetSizeColumns);\n            normalizeSize = enumValues[enumValues.indexOf(normalizeSize) + 1];\n        }\n        return (<any>WidgetSizeColumns)[normalizeSize];\n\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    ContentChildren,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    SimpleChanges\n} from '@angular/core';\nimport {Environment, isPresent} from '@aribaui/core';\nimport {\n    BottomZoneComponent,\n    LeftZoneComponent,\n    MiddleZoneComponent,\n    RightZoneComponent,\n    TopZoneComponent\n} from '../five-zone-layout.component';\nimport {FormRowComponent} from './form-row/form-row.component';\nimport {BaseFormComponent} from '../../core/base-form.component';\n\n\n/**\n * FormTable is a specific layout component for rendering Labels and its controls in two columns\n * and 5 different zones.\n *\n * We support LEFT, MIDDLE, RIGHT, TOP, BOTTOM zone where we can place our component or widgets.\n * This\n * component is used as primary layout to wrap all the common use cases. E.g. When we lay out\n * fields in the form I do not want controls to be aware of error validation, size, labels, and\n * some other things. Control such INPUT is just responsible for retrieve user value but not how it\n * appear on the page.\n *\n * This way we can be flexible how we treat widgets for different kinds of situation depending\n * where they appear\n\n * FormTable just like the rest of the components are using Model driven approach how to work with\n * data, mean we are using FormGroup, FormControl etc. FormGroup can be passed into the FormTable,\n * otherwise its automatically created when the FormTable is instantiated.\n *\n * FormGroup is saved insode Environment where we are using this to pass this around the pages and\n * components.\n *\n * ### Example\n *\n * Simple Layout fields and its control\n *\n *\n * ```typescript\n *  @Component({\n *      selector: 'wrapper-comp' ,\n *      template: `\n *  \t\t\t<aw-form-table [formGroup]=\"formGroup\" (onSubmit)=>\n *  \t\t\t\t<aw-form-row [label]=\"'name'\" [name]=\"'name'\">\n *  \t\t\t\t\t<aw-input-field [type]=\"'string'\"></aw-input-field>\n *  \t\t\t\t</aw-form-row>\n *\n *  \t\t\t\t<aw-form-row [label]=\"'Preferred Colors'\" [name]=\"'myColors'\">\n *  \t\t\t\t\t<aw-checkbox-list [list]=\"checkBoxListValues\"\n *  \t\t\t\t\t                 [selections]=\"selectedValues\"\n *  \t\t\t\t\t                 [layout]=\"'inline'\"\n *  \t\t\t\t\t                 (onSelection)=\"onCBClick($event)\">\n *  \t\t\t\t\t</aw-checkbox-list>\n *  \t\t\t\t</aw-form-row>\n *  \t\t\t\t<aw-form-row [label]=\"'Gender'\" [name]=\"'gender'\">\n *\n *  \t\t\t\t\t<aw-radiobutton-list [list]=\"rbValues\" [selection]=\"rbSelection\">\n *\n *  \t\t\t\t\t</aw-radiobutton-list>\n *\n *  \t\t\t\t</aw-form-row>\n *  \t\t\t\t<aw-form-row [label]=\"'My birthdate'\" [name]=\"'birthDate'\" [size]=\"'small'\">\n *\n *  \t\t\t\t\t<aw-date-time [value]=\"date\" [editable]=\"editable\" [showTime]=\"showTime\">\n *  \t\t\t\t\t</aw-date-time>\n *  \t\t\t\t</aw-form-row>\n *  \t\t\t</aw-form-table>\n *    `\n *  })\n *  export class ShowUserInfoComponent\n *  {\n *       checkBoxListValues: string[] = ['blue' , 'red' , 'yellow' , 'orange' , 'white' , 'silver'\n *     , 'black' , 'Green'\n *     , 'Gray' , 'Navy' ,\n *          'Olive' , 'Aqua' , 'Purple'];\n *      selectedValues: string[] = ['blue' , 'Olive' , 'Aqua' , 'Purple'];\n *      rbValues: string[] = ['male' , 'female' , 'other'];\n *      rbSelection: string = 'male';\n *      editable: boolean = true;\n *      showTime: boolean = true;\n *\n *      formGroup: FormGroup = new FormGroup({});\n *\n *\n *      onCBClick (event): void\n *      {\n *          console.log('onCBClick = ' + event);\n *      }\n *\n *      onSubmit (model: any): void\n *      {\n *         console.log(model)\n *\n *         // will print { name:null, myColors:['blue' , 'Olive' , 'Aqua' , 'Purple'], gender:\n *     male}\n *      }\n *\n *  }\n *\n *  ```\n *\n *  Or you can use zone to layout these fields into two columns:\n *\n *  Current zones are implement with <ng-content SELECT> which is just a selector to searches for\n *     specific pattern. In our case instead of creating extra wrapper custom component use simple\n *     CSS class\n *\n *\n *  ```\n *            <aw-form-table #metaFormTable [editable]=\"editing\"\n *                          [useFiveZone]=\"isFiveZoneLayout\"\n *                          (onSubmit)=\"onSaveAction($event)\">\n *\n *                <aw-left  *ngIf=\"canShowZone('zLeft')\">\n *\n *                        <aw-form-row [label]=\"'name'\" [name]=\"'name'\">\n *                            <aw-input-field [type]=\"'string'\"></aw-input-field>\n *                        </aw-form-row>\n *\n *                        <aw-form-row [label]=\"'Preferred Colors'\" [name]=\"'myColors'\">\n *                            <aw-checkbox-list [list]=\"checkBoxListValues\"\n *                                             [selections]=\"selectedValues\"\n *                                             [layout]=\"'inline'\"\n *                                             (onSelection)=\"onCBClick($event)\">\n *                            </aw-checkbox-list>\n *                        </aw-form-row>\n *                </aw-left>\n *\n *\n *                <aw-right  *ngIf=\"canShowZone('zRight')\">\n *                        <aw-form-row [label]=\"'Gender'\" [name]=\"'gender'\">\n *                                <aw-radiobutton-list [list]=\"rbValues\" [selection]=\"rbSelection\">\n *                                </aw-radiobutton-list>\n *                        </aw-form-row>\n *\n *                        <aw-form-row [label]=\"'My birthdate'\" [name]=\"'birthDate'\"\n *     [size]=\"'small'\">\n *                            <aw-date-time [value]=\"date\" [editable]=\"editable\"\n *     [showTime]=\"showTime\">\n *                            </aw-date-time>\n *                        </aw-form-row>\n *                </<aw-right>\n *            </aw-form-table>\n *\n *  ```\n *\n *  todo: remove my css selectors for zones and replace it with real component even just a tag\n *  todo: would work file\n *\n */\n@Component({\n    selector: 'aw-form-table',\n    templateUrl: 'form-table.component.html',\n    styleUrls: ['form-table.component.scss'],\n    providers: [\n        {provide: BaseFormComponent, useExisting: forwardRef(() => FormTableComponent)}\n    ]\n})\nexport class FormTableComponent extends BaseFormComponent implements AfterContentInit\n{\n\n    /**\n     * Used for the form layout to see if we need to render labels stacked  or side by side next to\n     * the control\n     *\n     */\n    @Input()\n    labelsOnTop?: boolean = false;\n\n\n    /**\n     *\n     * Is this a 4 zone layout\n     *\n     */\n    @Input()\n    useFiveZone?: boolean = false;\n\n    /**\n     * For certain usecase we dont want to set automatically this to all children\n     */\n    @Input()\n    editabilityCheck: boolean = true;\n\n    /**\n     *  Triggers when the <form> is submitted. onSubmit we emit the whole formController objects\n     *\n     *\n     */\n    @Output()\n    onSubmit: EventEmitter<any> = new EventEmitter();\n\n\n    /**\n     * These properties represent individual zones and we use them to adjust our column grid\n     * layout\n     */\n    @ContentChild(LeftZoneComponent) leftZone: LeftZoneComponent;\n\n    @ContentChild(MiddleZoneComponent) middleZone: MiddleZoneComponent;\n\n    @ContentChild(RightZoneComponent) rightZone: RightZoneComponent;\n\n    @ContentChild(TopZoneComponent) topZone: TopZoneComponent;\n\n    @ContentChild(BottomZoneComponent) bottomZone: BottomZoneComponent;\n\n\n    @ContentChildren(BaseFormComponent, {descendants: true})\n    formFields: QueryList<BaseFormComponent>;\n\n    @ContentChildren(forwardRef(() => FormRowComponent), {descendants: true})\n    rows: QueryList<FormRowComponent>;\n\n\n    /**\n     * Cache calculated properties when init this component\n     *\n     */\n    hasOneColumn: boolean = false;\n    hasTwoColumn: boolean = false;\n    hasThreeColumn: boolean = false;\n\n\n    constructor(public env: Environment)\n    {\n        super(env, null);\n    }\n\n\n    ngOnChanges(changes: SimpleChanges): void\n    {\n        super.ngOnChanges(changes);\n\n        if (isPresent(changes['editable']) &&\n            changes['editable'].previousValue !== changes['editable'].currentValue) {\n\n            this.updateFormFields();\n        }\n    }\n\n\n    onSubmitForm(event: any)\n    {\n        this.onSubmit.emit(event);\n    }\n\n    /**\n     *\n     * Are labels on top\n     *\n     */\n    isLabelsOnTop(): boolean\n    {\n        return this.labelsOnTop;\n    }\n\n\n    /**\n     *\n     * Used by child component to inherit editability\n     *\n     */\n    isFormEditable(): boolean\n    {\n        return this.editable;\n    }\n\n\n    applyColumns(): void\n    {\n        if (!this.useFiveZone && this.hasAnyZones()) {\n            throw new Error('Zones detected in the FormTable but useFiveZone option is false');\n        }\n\n        this.hasOneColumn = !isPresent(this.rightZone) && !isPresent(this.middleZone);\n        this.hasTwoColumn = isPresent(this.leftZone) && isPresent(this.rightZone) &&\n            !isPresent(this.middleZone);\n\n        this.hasThreeColumn = isPresent(this.leftZone) && isPresent(this.rightZone) &&\n            isPresent(this.middleZone);\n\n        if (this.hasTwoColumn && !this.isTwoZoneReady()) {\n            this.leftZone.classList += ' ui-md-6 ui-lg-6';\n            this.rightZone.classList += ' ui-md-6 ui-lg-6';\n        }\n\n        if (this.hasThreeColumn && !this.isThreeZoneReady()) {\n            this.leftZone.classList += ' ui-md-6 ui-lg-4';\n            this.rightZone.classList += ' ui-md-6 ui-lg-4';\n        }\n    }\n\n\n    private hasAnyZones()\n    {\n        return isPresent(this.leftZone) || isPresent(this.rightZone) || isPresent(this.middleZone)\n            || isPresent(this.topZone) || isPresent(this.bottomZone);\n    }\n\n    /**\n     * Helper method to check if we already initialized the classList.\n     * the\n     *\n     * TODO: Probably string array would be easier\n     */\n    isTwoZoneReady(): boolean\n    {\n        return this.leftZone.classList.indexOf('ui-lg-6') > 0 &&\n            this.leftZone.classList.indexOf('ui-lg-6') > 0;\n    }\n\n\n    /**\n     * Helper method to check if we already initialized the classList.\n     * the\n     *\n     * TODO: Probably string array would be easier\n     */\n    isThreeZoneReady(): boolean\n    {\n        return this.leftZone.classList.indexOf('ui-lg-4') > 0 &&\n            this.leftZone.classList.indexOf('ui-lg-4') > 0;\n    }\n\n    ngAfterContentInit(): void\n    {\n        // problem since Angular 4.2, ngAfterContentInit\n        // without this I get error that value was changed after view was checked\n        // todo: refactor  - mainly our zones left, right middle\n        setTimeout(() =>\n        {\n            this.applyColumns();\n            this.updateFormFields();\n            this.adjustLayout();\n        });\n    }\n\n\n    private updateFormFields(): void\n    {\n        if (this.editabilityCheck && isPresent(this.formFields) && this.formFields.length > 0) {\n            this.formFields.forEach((item: BaseFormComponent) =>\n            {\n                item.editable = this.editable;\n                // item.formGroup = this.formGroup;\n            });\n        }\n    }\n\n\n    /**\n     * Based on if we are 2 or 3 or 1 column layout we need to adjust widgets width within the\n     * form row.\n     */\n    private adjustLayout(): void\n    {\n        if (isPresent(this.rows) && this.rows.length > 0) {\n            if (this.hasThreeColumn) {\n                this.rows.forEach((item: FormRowComponent) => item.size = 'large');\n            }\n\n        }\n    }\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {InputTextModule} from 'primeng/components/inputtext/inputtext';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {FormTableComponent} from './form-table.component';\nimport {FormRowComponent} from './form-row/form-row.component';\nimport {\n    BottomZoneComponent,\n    LeftZoneComponent,\n    MiddleZoneComponent,\n    RightZoneComponent,\n    TopZoneComponent\n} from '../five-zone-layout.component';\nimport {AWCoreComponentModule} from '../../core/core.module';\n\n\n@NgModule({\n    declarations: [\n        FormTableComponent,\n        FormRowComponent,\n        TopZoneComponent,\n        LeftZoneComponent,\n        RightZoneComponent,\n        MiddleZoneComponent,\n        BottomZoneComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        InputTextModule,\n        AWCoreComponentModule\n    ],\n    entryComponents: [\n        FormTableComponent,\n        FormRowComponent,\n        TopZoneComponent,\n        LeftZoneComponent,\n        RightZoneComponent,\n        MiddleZoneComponent,\n        BottomZoneComponent\n    ],\n    exports: [\n        FormTableComponent,\n        FormRowComponent,\n        TopZoneComponent,\n        LeftZoneComponent,\n        RightZoneComponent,\n        MiddleZoneComponent,\n        BottomZoneComponent\n    ]\n})\nexport class AWFormTableModule\n{\n}\n\n\n","import {distinctUntilChanged} from 'rxjs/operators';\nimport {Component, forwardRef, Inject, Input, Optional, SkipSelf} from '@angular/core';\nimport {NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Environment, isPresent, Value} from '@aribaui/core';\nimport {BaseFormComponent} from '../../core/base-form.component';\nimport {FormRowComponent} from '../../layouts/form-table/form-row/form-row.component';\nimport {Subscription} from 'rxjs';\nimport {DecimalPipe} from '@angular/common';\n\n\n/**\n * This component represent a Input field and it can  accept different types of values such as\n * text, number.\n *\n *\n *\n * ### Example\n *\n * ```typescript\n *  @Component({\n *      selector: 'wrapper-comp' ,\n *      template: '<aw-input-field [value]=\"inputValue\" [type]=\"inputType\"></aw-input-field>'\n *  })\n *  export class TestInputComponent\n *  {\n *      inputValue: string = 'Some text';\n *\n *      // by default input type is text, you can pass string, String, or text\n *      inputType: string = 'string';\n *  }\n *\n * ```\n *\n *\n *\n * ### Example wher input field is initialized with ngModel\n *\n * ```typescript\n *  @Component({\n *      selector: 'wrapper-comp' ,\n *      template: '<aw-input-field [value]=\"inputValue\" [(ngModel)]=\"inputType\"></aw-input-field>'\n *  })\n *  export class TestInputComponent\n *  {\n *      inputValue: string = 'Some text';\n *\n *      // by default input type is text, you can pass string, String, or text\n *      inputType: string = 'string';\n *  }\n *\n * ```\n *\n *  Note: if you are using this outside of FormTable please provide your own FormGroup\n *\n */\n\n\n\nexport const INPUT_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => InputFieldComponent),\n    multi: true\n};\n\n\n@Component({\n    selector: 'aw-input-field',\n    templateUrl: 'input-field.component.html',\n    styleUrls: ['input-field.component.scss'],\n\n    providers: [\n        INPUT_CONTROL_VALUE_ACCESSOR,\n\n        {provide: BaseFormComponent, useExisting: forwardRef(() => InputFieldComponent)}\n    ]\n})\nexport class InputFieldComponent extends BaseFormComponent\n{\n\n    /**\n     *\n     * A value used to save and read  when rendering and updating a component\n     *\n     */\n    @Input()\n    value: any = '';\n\n    /**\n     *\n     * The number of decimal places used to format the number object.\n     *\n     */\n    @Input()\n    precision: number;\n\n    /**\n     * BigDecimal object that encapsulates value and locale.\n     * If this object is set, values will be taken from this object\n     */\n    @Input()\n    bigDecimal: BigDecimal;\n\n    /**\n     * Provide custom icon that is placed into the input field.\n     *\n     * Todo: add extra binding that will allow developer to tell position, left right\n     */\n    @Input()\n    icon: string;\n    /**\n     * The decimal pipe is used to format our number object.\n     */\n    decimalPipe: DecimalPipe;\n    /**\n     * The formatted decimal value. Uses angular decimalPipe to format based on locale.\n     */\n    displayValue: string = '';\n    /**\n     * Just to clean up subscriber when component is destroyed\n     */\n    private vchSubscriber: Subscription;\n\n    constructor(public env: Environment,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => FormRowComponent))\n                protected parentContainer: BaseFormComponent)\n    {\n        super(env, parentContainer);\n        this.decimalPipe = new DecimalPipe(env.locale);\n    }\n\n    /**\n     * Input field type. Currently we support either Number or text\n     */\n    private _type: string = 'string';\n\n    get type(): string\n    {\n        return this._type;\n    }\n\n    /**\n     *\n     * generated setter to check for value and normalizing into expected either number or text\n     *\n     */\n    @Input()\n    set type(value: string)\n    {\n        if (value.toLowerCase() === 'string' || value.toLowerCase() === 'text') {\n            this._type = 'text';\n        } else if (value.toLowerCase() === 'number') {\n            this._type = 'number';\n        }\n    }\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n        super.registerFormControl(this.bigDecimal);\n\n        this.vchSubscriber = this.formControl.valueChanges\n            .pipe(distinctUntilChanged())\n            .subscribe(val =>\n            {\n                this.value = val;\n                this.onModelChanged(this.value);\n            });\n\n        if (this.bigDecimal) {\n            this.displayValue = this.formatNumber(this.bigDecimal.amount);\n        } else {\n            this.displayValue = this.value;\n        }\n    }\n\n    canSetType(): boolean\n    {\n        return true;\n    }\n\n    onKeyDown(el: any): void\n    {\n        if (this._type === 'number') {\n            this.displayValue = el.value;\n            this.onModelChanged(this.displayValue);\n        }\n    }\n\n    onBlur(el: any): void\n    {\n        if (this._type === 'number') {\n            this.bigDecimal = new BigDecimal(Number(el.value));\n            this.displayValue = this.formatNumber(this.bigDecimal.amount);\n            this.onModelChanged(this.displayValue);\n        }\n    }\n\n    writeValue(value: any)\n    {\n        if (value !== this.displayValue) {\n            this.value = value;\n            this.displayValue = '';\n            if (this.value) {\n                this.displayValue = this.value;\n            }\n            this.formControl.setValue(value, {onlySelf: true});\n        }\n    }\n\n    /**\n     * Format the number object according to its precision.\n     *\n     */\n    formatNumber(value: any)\n    {\n        if (!value) {\n            return '';\n        }\n\n        // If precision is present, use it for format the bigDecimal value for display.\n        if (isPresent(this.precision) &&\n            this._type === 'number')\n        {\n            // The default precision is 2. For example, 10.23.\n            let digits = '1.0-2';\n            digits = '1.0-' + this.precision;\n            return this.decimalPipe.transform(value, digits);\n        }\n        return value;\n    }\n\n    ngOnDestroy(): void\n    {\n        super.ngOnDestroy();\n\n        if (isPresent(this.vchSubscriber)) {\n            this.vchSubscriber.unsubscribe();\n        }\n    }\n}\n\n/**\n * BigDecimal object is represented as a value, locale, and currencyCode\n */\nexport class BigDecimal implements Value\n{\n    uniqueName: string;\n\n    constructor(public readonly amount: number = 0,\n                public readonly locale: string = 'en_US')\n    {\n    }\n\n\n    getTypes(): any\n    {\n        return {\n            amount: Number,\n            locale: String\n        };\n    }\n\n    className(): string\n    {\n        return 'BigDecimal';\n    }\n\n    $proto(): BigDecimal\n    {\n        return new BigDecimal(1, 'en_US');\n    }\n\n    toString(): string\n    {\n        return this.amount + ', locale: ' + this.locale;\n    }\n\n\n    clone(data: { amount?: number, locale?: string } = {}): BigDecimal\n    {\n        return new BigDecimal(\n            isPresent(data.amount) ? data.amount : this.amount,\n            isPresent(data.locale) ? data.locale : this.locale);\n    }\n\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {StringComponent} from './string.component';\n\n@NgModule({\n    declarations: [\n        StringComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule\n    ],\n    entryComponents: [\n        StringComponent\n    ],\n    exports: [\n        StringComponent\n    ],\n    providers: []\n})\nexport class AWStringFieldModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {InputTextModule} from 'primeng/components/inputtext/inputtext';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {InputFieldComponent} from '../input-field/input-field.component';\nimport {AWStringFieldModule} from '../string/string.module';\n\n@NgModule({\n    declarations: [\n        InputFieldComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        InputTextModule,\n        AWStringFieldModule\n    ],\n    entryComponents: [\n        InputFieldComponent\n    ],\n    exports: [\n        InputFieldComponent,\n        AWStringFieldModule,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    providers: []\n})\nexport class AWInputFieldModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, ContentChild, EventEmitter, Input, Output, TemplateRef} from '@angular/core';\nimport {BaseComponent} from '../../core/base.component';\nimport {AppConfig, Environment, isBlank, isPresent} from '@aribaui/core';\n\n\n/**\n *\n * basic navigation bar provide a main action buttons for its content (page level buttons).\n * This is not the Top level application navigation. This component provides by default action OK,\n * CANCEL and you are free to modify how the OK or CANCEL will be call as well as subscribe to the\n * event. Or you can provide your own buttons template which will be used instead of this default\n * one.\n *\n *\n *\n *\n *\n * ### Example 1:\n *\n * In order to use navigation bar in its basic usage you can do following:\n * this will render buttons on the top as well as on the bottom around the content.\n *\n *\n *  ```html\n *\n *      <aw-basic-navigator [brandImg]=\"'img/aribalogobal.png'\">\n *\n *            <div class=\"container\">\n *                <form>\n *                    User name: <input type=text value=\"peter.pan\">\n *                </<form>>\n *            </div>\n *      </aw-basic-navigator>\n *\n *\n * ```\n *\n *  if you do not want button on the top or bottom you can say thi using binding showTop or\n * showBottom.\n *\n *\n * ### Example 2:\n *  In this example we are providing custom buttons as well as brank section\n *\n *\n *  ```html\n *\n *\n *      <aw-basic-navigator [brandImg]=\"'img/aribalogobal.png'\">\n *            <ng-template #buttons>\n *                <ul class=\"nav navbar-nav float-md-right collapse navbar-toggleable-xs\">\n *                    <li class=\"nav-item \">\n *                        <button class=\"btn btn-secondary\" type=\"button\"\n * (click)=\"onSaveAction($evemt)\">Cancel</button>\n *                    </li>\n *                    <li class=\"nav-item active\">\n *                        <button class=\"btn btn-primary\" type=\"button\"\n * (click)=\"onCancelAction($event)\"> Save\n *                        </button>\n *                    </li>\n *                </ul>\n *            </ng-template>\n *\n *            <ng-template #brand>\n *                <span class=\"brand-title\">Ariba</span>\n *            </ng-template>\n *\n *\n *            <div class=\"container\">\n *                <form>\n *                    User name: <input type=text value=\"peter.pan\">\n *                </<form>>\n *            </div>\n *      </aw-basic-navigator>\n *\n *\n * ```\n\n *\n */\n@Component({\n    selector: 'aw-basic-navigator',\n    templateUrl: 'basic-navigator.component.html',\n    styleUrls: ['basic-navigator.component.scss']\n})\nexport class BasicNavigatorComponent extends BaseComponent\n{\n\n    /**\n     * Indicates that buttons will be rendered on the top\n     *\n     * Default value is TRUE\n     *\n     */\n    @Input()\n    showTop: boolean = true;\n\n\n    /**\n     * Indicates that buttons will be rendered on the bottom\n     *\n     * Default value is TRUE\n     *\n     */\n    @Input()\n    showBottom: boolean = true;\n\n    /**\n     * Indicates that brand section that is on the left side and only in the top bar is visible\n     *\n     * Default value is TRUE\n     *\n     */\n    @Input()\n    showBrand: boolean = true;\n\n    /**\n     * Relative path to a image. Images are saved inside assets folder.\n     *\n     */\n    @Input()\n    brandImg: string;\n\n    /**\n     * If you are not using custom buttons you can pass a label to OK action\n     *\n     * Default value is OK\n     */\n    @Input()\n    okActionLabel: string;\n\n    /**\n     * If you are not using custom buttons you can pass a label to Cancel action\n     *\n     * Default value is OK\n     */\n    @Input()\n    cancelActionLabel: string;\n\n\n    /**\n     * Context is an object which is rendered inside nav-bar content. Sometimes there are situation\n     * that you want to render some information from the object inside navigation bar. So you are\n     * free to pass a context object and then access it inside your template\n     *\n     * ```HTML\n     *            <ng-template #brand let-item>\n     *                <span class=\"brand-title\">{{item.firstName}}</span>\n     *            </ng-template>\n     *\n     * ```\n     */\n    @Input()\n    context: any;\n\n\n    @Input()\n    showCancelButton: boolean;\n\n    /**\n     *\n     * EventEmitter that is triggered when you click on default OK Action\n     *\n     */\n    @Output()\n    onOKAction: EventEmitter<any> = new EventEmitter<any>();\n\n    /**\n     *\n     * EventEmitter that is triggered when you click on default CANCEL Action\n     *\n     */\n    @Output()\n    onCancelAction: EventEmitter<any> = new EventEmitter<any>();\n\n\n    /**\n     * Queries a buttons template if any\n     */\n    @ContentChild('buttons')\n    buttonsTemplate: TemplateRef<any>;\n\n    /**\n     * Queries a brand template if any\n     */\n    @ContentChild('brand')\n    brandTemplate: TemplateRef<any>;\n\n\n\n    constructor(env: Environment, appConfig: AppConfig)\n    {\n        super(env);\n\n        // todo: load this from resource file using ngTranslate service\n        this.okActionLabel = 'OK';\n        this.cancelActionLabel = 'Cancel';\n        this.brandImg = 'images/aribalogobal.png';\n    }\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n        if (isBlank(this.showCancelButton)) {\n            this.showCancelButton = this.editable || (this.onCancelAction.observers.length > 0\n                && this.onOKAction.observers.length > 0);\n        }\n    }\n\n\n    /**\n     * Returns if buttonsTemplate is available\n     *\n     */\n    hasButtonTemplate(): boolean\n    {\n        return isPresent(this.buttonsTemplate);\n    }\n\n    /**\n     * Returns if brandTemplate is available\n     *\n     */\n    hasBrandTemplate(): boolean\n    {\n        return isPresent(this.brandTemplate);\n    }\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {AfterViewInit, Component, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {Environment, isBlank, isPresent} from '@aribaui/core';\nimport {BaseComponent} from '../../core/base.component';\n\n/**\n * Button component that implements consistent styling, behavior. Button can be rendered either as\n * a button or as a link. It could be standalone or be part of a form.\n *\n *  ### Example\n *  ```\n *\n *  @Component({\n *    selector: 'registration' ,\n *    template: `\n *\n *   <aw-form-table >\n *       <aw-form-row [label]=\"'Amount'\" [name]=\"'amount'\" [size]=\"'small'\">\n *\n *           <aw-button [type]=\"'submit'\" [name]=\"'button'\"\n *                     (action)=\"onClicked($event)\" [value]=\"command\"\n *                     [style]=\"'warning'\" >Button</aw-button>\n *       </aw-form-row>\n *   </aw-form-table>\n *\n *    `\n *    })\n *    export class MyComponent\n *    {\n *        command:boolean;\n *\n *        constructor ()\n *        {\n *        }\n *\n *        onClicked(value:string) {\n *           if (value) {\n *              // submit form.\n *           }\n *        }\n *    }\n */\n@Component({\n    selector: 'aw-button',\n    templateUrl: 'button.component.html',\n    styleUrls: ['button.component.scss']\n})\nexport class ButtonComponent extends BaseComponent implements AfterViewInit\n{\n\n    /**\n     * Button types  [ button | submit | reset ]\n     *\n     */\n    @Input()\n    type: string = 'button';\n\n    /**\n     * Name for this button. Can be used to lookup component in form.\n     */\n    @Input()\n    name: string;\n\n\n    /**\n     * styling for this button. See ButtonStyle for all supported styles.\n     */\n    @Input()\n    style: ButtonStyle = 'primary';\n\n\n    /**\n     * sizing for this button. [large, normal, small].\n     */\n    @Input()\n    size: ButtonSize = 'normal';\n\n    /**\n     * Specify the target of the button. [_blank | _self | _parent | _top | framename ]\n     */\n    @Input()\n    target: string;\n\n    /**\n     * Value to be send to server when clicked.\n     */\n    @Input()\n    value: string;\n\n    /**\n     * Event fired when user select a item\n     */\n    @Output()\n    action: EventEmitter<any> = new EventEmitter();\n\n\n    /**\n     * PrimeNg button simply does not support content so we need to get around it\n     */\n    label: string;\n\n    /**\n     * Internal CSS class that styles this button based on input 'style' and 'size'\n     */\n    buttonClass: string;\n\n    constructor(protected element: ElementRef, public env: Environment)\n    {\n        super(env);\n\n        // Default button class is secondary.\n        this.buttonClass = 'ui-button-secondary';\n\n        // Default disabled\n        this.disabled = false;\n    }\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n        // How to style this button.\n        if (isPresent(this.style)) {\n            if (this.style === 'primary') {\n                // Default .ui-button and .ui-button-primary get the same style.\n                // .ui-button-primary is necessary because button style can be overridden\n                // when included inside other widgets. So specify primary\n                this.buttonClass = 'ui-button-primary';\n            } else {\n                this.buttonClass = 'ui-button-' + this.style;\n            }\n        }\n\n        // Determine the button class based on input size.\n        if (this.size) {\n\n            switch (this.size) {\n                case 'large' :\n                    this.buttonClass += ' btn-lg';\n                    break;\n                case 'normal' :\n                    this.buttonClass += ' btn-mid';\n                    break;\n                case 'small' :\n                    this.buttonClass += ' btn-sm';\n                    break;\n            }\n        }\n    }\n\n\n    /**\n     * This is little hacky hackity hack as currently primeng button directive does not work with\n     * ngcontent projection but it has a label bindings, which is not the way developers work with\n     * button. you want to\n     *\n     * <button> MY CONTENT</button instead of <button label='MyContent'></button>\n     *\n     *\n     * @Todo: Change this until the time keep a test that check that they are still using ui-button\n     *     that we are expecting and replacing\n     */\n    ngAfterViewInit(): void\n    {\n        if (isPresent(this.element)) {\n            let button = this.element.nativeElement.querySelector('button');\n            let buttonTitle = button.children[0];\n            button.children[0].textContent = this.element.nativeElement.textContent.trim()\n                .replace('ui-button', '').replace('ui-btn', '');\n\n            button.classList.remove('ui-button-text-empty');\n            button.textContent = '';\n            button.appendChild(buttonTitle);\n        }\n    }\n\n    /**\n     *  Action clicked. Call parent action.\n     */\n    clicked($event: any)\n    {\n        this.action.emit(isBlank(this.value) ? $event : this.value);\n    }\n}\n\n\n/**\n * Supported Button Style\n */\nexport type ButtonStyle = 'info' | 'primary' | 'secondary' | 'warning' | 'success' | 'danger' |\n    'link';\n\n/**\n * Supported Button Size\n */\nexport type ButtonSize = 'large' | 'normal' | 'small';\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ButtonComponent} from './button.component';\nimport {ButtonModule} from 'primeng/primeng';\n\n\n@NgModule({\n    declarations: [\n        ButtonComponent\n    ],\n    imports: [\n        CommonModule,\n        ButtonModule,\n\n    ],\n    entryComponents: [\n        ButtonComponent\n    ],\n    exports: [\n        ButtonComponent\n    ],\n    providers: []\n})\nexport class AWButtonModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {BasicNavigatorComponent} from './basic-navigator.component';\nimport {ToolbarModule} from 'primeng/primeng';\nimport {AWButtonModule} from '../button/button.module';\nimport {AWCoreComponentModule} from '../../core/core.module';\n\n\n@NgModule({\n    declarations: [\n        BasicNavigatorComponent\n    ],\n    imports: [\n        CommonModule,\n        ToolbarModule,\n        AWButtonModule,\n        AWCoreComponentModule\n\n    ],\n    exports: [\n        BasicNavigatorComponent\n    ],\n    providers: []\n})\nexport class AWBasicNavigatorModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport {\n    Component,\n    ContentChild,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport {BaseComponent} from '../../core/base.component';\nimport {Environment, isBlank, isPresent} from '@aribaui/core';\n\n\n@Directive({\n    selector: `aw-card-top`,\n    host: {\n        'class': 'w-card-ztop'\n    }\n})\nexport class CardZoneTopComponent\n{\n}\n\n@Directive({\n    selector: `aw-card-bottom`,\n    host: {\n        'class': 'w-card-zbottom'\n    }\n})\nexport class CardZoneBottomComponent\n{\n}\n\n/**\n *\n * Card component is a container rendering its content inside 3 different zones.\n *\n *  ------------------------------------------\n *  |   TITLE                       | ACTION |\n *  |-----------------------------------------\n *  |                                        |\n *  |   TOP                                  |\n *  |                                        |\n *  ------------------------------------------\n *  |                                        |\n *  |   BOTTOM                               |\n *  |                                        |\n *  |                                        |\n *  ------------------------------------------\n *\n *\n *  There are 3 zones  + 1 placeholder for the actionIcon\n *\n *  Cards can be selectable which means when you click on it there will be rendered a border with\n *  a check mark inside Action zone (this is default behavior).\n *  You can use [selectable] binding to disable this, in such case card will have just a border\n *  without any check mark.\n *\n *  Cards can also contain custom Action which is rendered inside ACTION zone and on the\n *  application level you can listen for (click) events as well as you can provide your own action\n *  icon\n *\n *  Besides ACTION, TITLE, TOP and BOTTOM content zones cards support hover overlay effect and\n *  when its activated there is a overlay displayed on top of the card with Icon in the middle.\n *  Please note when [hasHover] is TRUE all the actions and selectability are disabled as there is\n *  only one action which click on the hover overlay.\n *\n *\n * ###example 1:\n *  Basic hover card which by default support selectable mode\n *\n * ```\n *          <aw-card #card1 [hasAction]=\"false\" [width]=\"'202px'\" [height]=\"'154px'\">\n *\n *                 <aw-card-title [align]=\"'bottom-left'\">\n *                     <span class=\"a-supplier-tag\">\n *                         Preferred\n *                     </span>\n *                 </aw-card-title>\n *\n *                 <aw-card-top>\n *                     <div class=\"supplierName\">\n *                         Haight Pumps\n *                     </div>\n *                     <div class=\"supplierLocation\">\n *                         Palo Alto, CA, USA\n *                     </div>\n *                 </aw-card-top>\n *\n *                 <aw-card-bottom class=\"w-card-zbottom\">\n *                     some text about the supplier and his parents<br/>\n *                     and some contacts\n *                 </aw-card-bottom>\n *\n *             </aw-card>\n *\n * ```\n *\n *  ###example 2:\n *   Hover card with custom action. when unselected action will appear and user can click on it.\n *\n * ```\n *          <aw-card #card1 [selectable]=\"true\" [actionIcon]=\"'icon-question-mark'\"\n *                     (onAction)=\"onAction(3, $event)\">\n *\n *                 <aw-card-title [align]=\"'bottom-left'\">\n *                     <span class=\"a-supplier-tag\">\n *                         Preferred\n *                     </span>\n *                 </aw-card-title>\n *\n *                 <aw-card-top>\n *                     <div class=\"supplierName\">\n *                         Haight Pumps\n *                     </div>\n *                     <div class=\"supplierLocation\">\n *                         Palo Alto, CA, USA\n *                     </div>\n *                 </aw-card-top>\n *\n *                 <aw-card-bottom class=\"w-card-zbottom\">\n *                     some text about the supplier and his parents<br/>\n *                     and some contacts\n *                 </aw-card-bottom>\n *\n *             </aw-card>\n *\n * ```\n *\n *\n *\n */\n@Component({\n    selector: 'aw-card',\n    templateUrl: './card.component.html',\n    styleUrls: ['./card.component.scss']\n})\nexport class CardComponent extends BaseComponent\n{\n    /**\n     * Tells if we should explicitly hide the action\n     *\n     */\n    @Input()\n    hasAction: boolean = false;\n\n    /**\n     *\n     * Is selectable mode supported? Saying Yes, card will have by default check-mark in the\n     * ACTION zone when selected\n     *\n     */\n    @Input()\n    selectable: boolean = true;\n\n    /**\n     * Option to pass custom \"Card Selected\" Icon\n     *\n     */\n    @Input()\n    selectedIcon: string = 'icon-accept';\n\n    /**\n     * There is no default value for action icon, when application want to add action to the card\n     * it must also provide a icon\n     *\n     */\n    @Input()\n    actionIcon: string;\n\n    /*\n     * Enable and disables hover effect on top of the card\n     */\n    @Input()\n    hasHover: boolean = false;\n\n    /**\n     *\n     * Default icon name for the hover overlay. This icons shows up in the middle over the card\n     * vertically and horizontally centered\n     *\n     */\n    @Input()\n    hoverIcon: string = 'icon-add';\n\n\n    /**\n     *  Selection state\n     *\n     */\n    @Input()\n    selected: boolean = true;\n\n\n    /**\n     * Fired when the card is selected.\n     *\n     */\n    @Output()\n    onSelect: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Fired when action icon is clicked.\n     *\n     */\n    @Output()\n    onAction: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Fired when the user clicks on the hover overlay.\n     *\n     */\n    @Output()\n    onHoverAction: EventEmitter<any> = new EventEmitter();\n\n\n    /**\n     * This query is used to save the content reference to bottom section if any\n     */\n    @ContentChild(CardZoneBottomComponent)\n    bottom: CardZoneBottomComponent;\n\n\n    /**\n     * Provides custom template for the body which is under application developer control.\n     */\n    @ContentChild('body')\n    bodyTemplate: TemplateRef<any>;\n\n\n    @ViewChild('hoverDiv')\n    hoverDiv: ElementRef;\n\n    /**\n     * Usually when template is provided we want to use it and replace internal one but in this\n     * case it will be always conditional and application developer can switch between default\n     * template with zones and custom one provided by developer.\n     *\n     */\n    useBodyTemplate: boolean = false;\n\n\n    constructor(public env: Environment)\n    {\n        super(env);\n\n        // sets default value\n        this.width = '202px';\n        this.height = '154px';\n    }\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n\n        // If application wants to use action it must provide actionIcon\n        if (isBlank(this.actionIcon) && this.hasAction) {\n            throw new Error('You need to provide action icon');\n        }\n\n    }\n\n    public showBottomSection()\n    {\n        return isPresent(this.bottom);\n    }\n\n\n    /**\n     * fires select and unselect event.\n     */\n    toggleSelect(event: any)\n    {\n        if (!this.selectable) {\n            event.preventDefault();\n            event.stopPropagation();\n\n        } else {\n            this.selected = !this.selected;\n            this.onSelect.emit(this.selected);\n        }\n    }\n\n    /**\n     *\n     * Only fired when action is rendered and user clicks on custom actionIcon\n     *\n     */\n    onActionClick(event: any)\n    {\n        if (this.hasAction && (!this.selected || !this.selectable)) {\n            this.onAction.emit(this.selected);\n        }\n    }\n\n    /**\n     * Triggered  when hover effect is on + user click on the card\n     *\n     */\n    onHover(isEnter: boolean): void\n    {\n        if (isPresent(this.hoverDiv)) {\n            this.hoverDiv.nativeElement.style.opacity = isEnter ? 0.5 : 0;\n        }\n    }\n\n    /**\n     *\n     * Used to decide if we should render implicit card template with our zones or\n     * user provided template\n     *\n     */\n    showBodyTemplate(): boolean\n    {\n        return isPresent(this.bodyTemplate)  && this.useBodyTemplate;\n    }\n\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {BaseComponent} from '../../../core/base.component';\nimport {Environment} from '@aribaui/core';\n\n\n/**\n * Maps our internal alignment value to real css values\n *\n */\nconst VAlignMap = {\n    'top-left': 'flex-start',\n    'top-center': 'flex-start',\n    'top-right': 'flex-start',\n    'center-left': 'center',\n    'center-center': 'center',\n    'center-right': 'center',\n    'bottom-left': 'flex-end',\n    'bottom-center': 'flex-end',\n    'bottom-right': 'flex-end'\n};\n\n\nconst HAlignMap = {\n    'top-left': 'flex-start',\n    'top-center': 'center',\n    'top-right': 'flex-end',\n    'center-left': 'flex-start',\n    'center-center': 'center',\n    'center-right': 'flex-end',\n    'bottom-left': 'flex-start',\n    'bottom-center': 'center',\n    'bottom-right': 'flex-end'\n};\n\n\n/**\n * Title zone provides a content placeholder for the Title Area. This zone is adding ability\n * to align its content into 9 different position.\n *\n * You can use this Title zone within <aw-card> as:\n *\n *\n * ```html\n *\n *  <aw-card  [width]=\"'202px'\" [height]=\"'154px'\" [hasHover]=\"true\"\n *                       [selectable]=\"false\" [hasAction]=\"false\"\n *                  (onHoverAction)=\"onAction(7, $event)\" >\n *\n *                  <aw-card-title [align]=\"'bottom-left'\">\n *                      <span class=\"a-supplier-tag\">\n *                          Preferred\n *                      </span>\n *                  </aw-card-title>\n *\n *   </aw-card>\n *\n * ```\n * Default alignment is top-left\n *\n *\n *\n *\n */\n@Directive({\n    selector: `aw-card-title`,\n    host: {\n        'class': 'w-card-title'\n    }\n})\nexport class CardZoneTitleComponent extends BaseComponent\n{\n    /**\n     * Special property which is used to apply flex properties for aligning content vertically\n     * as well as horizontally\n     *\n     */\n    @Input()\n    align: CardTitleAlignment = 'top-left';\n\n\n    constructor(public env: Environment, public elem: ElementRef)\n    {\n        super(env);\n\n    }\n\n\n    ngOnInit(): void\n    {\n        super.ngOnInit();\n\n        this.elem.nativeElement.style.alignItems = VAlignMap[this.align];\n        this.elem.nativeElement.style.justifyContent = HAlignMap[this.align];\n    }\n}\n\n\n/**\n * Make sure we dont accept any unsupported values. These values maps to the HAlignMap and\n * VAlignMap in order to get real css value for the flex alignment\n */\nexport type CardTitleAlignment = 'top-left' | 'top-center' | 'top-right' | 'center-left' |\n    'center-center'  | 'center-right' | 'bottom-left' | 'bottom-center' | 'bottom-right';\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CardComponent, CardZoneBottomComponent, CardZoneTopComponent} from './card.component';\nimport {CardZoneTitleComponent} from './card-title/card-title.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        CardComponent,\n        CardZoneTitleComponent,\n        CardZoneTopComponent,\n        CardZoneBottomComponent\n    ],\n    entryComponents: [\n        CardComponent\n    ],\n    exports: [\n        CardComponent,\n        CardZoneTitleComponent,\n        CardZoneTopComponent,\n        CardZoneBottomComponent\n    ],\n    providers: []\n})\nexport class AWCardModule\n{\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    Component,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    SimpleChanges,\n    SkipSelf\n} from '@angular/core';\nimport {FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Environment, isBoolean, isPresent} from '@aribaui/core';\nimport {BaseFormComponent} from '../../core/base-form.component';\n\n\n/**\n *  CheckboxType describes what type of checkbox is this:\n *\n * - Form type: that is writing and reading a value from/to model both using FormGroup as well\n *              as ngModel\n * - Action type:  only fires action and does not write value to model.\n *\n *\n */\nexport type CheckboxType = 'form' | 'action';\n\n/**\n *\n * Implements standard HTML checkbox on top of PrimeNG. There are 2 types of\n * {@link CheckboxComponent}: form and action checkbox as described above.\n *\n *\n * Usage: Basic example having red checkbox checked\n *\n * ```HTML\n *        <aw-checkbox [name]=\"'color'\" [value]=\"'red'\" [label]=\"'Red'\"\n *                                        [(ngModel)]=\"model\">\n *        </aw-checkbox>\n *        <aw-checkbox [name]=\"'color'\" [value]=\"'blue'\" [label]=\"'Blue'\"\n *                                        [(ngModel)]=\"model\">\n *       </aw-checkbox>\n *\n * ```\n *\n * ```ts\n *\n *\n *   class CBBasicWithNgModelComponent\n *   {\n *\n *       model: string[] = ['red'];\n *\n *       constructor()\n *       {\n *       }\n *   }\n *\n * ```\n *\n * For more examples please see a playground or unit test.\n *\n */\nexport const CB_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CheckboxComponent),\n    multi: true\n};\n\n\n@Component({\n    selector: 'aw-checkbox',\n    templateUrl: 'checkbox.component.html',\n    styleUrls: ['checkbox.component.scss'],\n\n    providers: [\n        CB_CONTROL_VALUE_ACCESSOR,\n        {provide: BaseFormComponent, useExisting: forwardRef(() => CheckboxComponent)}\n    ]\n})\nexport class CheckboxComponent extends BaseFormComponent\n{\n\n    /**\n     *\n     * A value associated with this checkbox\n     *\n     */\n    @Input()\n    value: any = '';\n\n\n    /**\n     * Type of checkbox. Form based updates model and Action based only fires click events\n     *\n     */\n    @Input()\n    type: CheckboxType = 'form';\n\n\n    /**\n     * Label to be used when rendering a checkbox\n     */\n    @Input()\n    label: string;\n\n\n    /**\n     * Trigger click event.\n     *\n     */\n    @Output()\n    action: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * PrimeNG has this type called binary which works only with Boolean meaning it does not add or\n     * remove values.\n     *\n     * In our case Checktype = Action is always binary or when this.value is boolean\n     *\n     */\n    isBinary: boolean = false;\n\n    /**\n     * Internal model for checkbox\n     */\n    model: any;\n\n\n    constructor(public env: Environment,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => BaseFormComponent))\n                protected parentContainer: BaseFormComponent)\n    {\n        super(env, parentContainer);\n    }\n\n    ngOnInit()\n    {\n        this.model = this.value;\n        this.type = this.action.observers.length > 0 ? 'action' : this.type;\n\n        if (this.isFormType()) {\n            super.ngOnInit();\n\n            if (this.isStandalone) {\n                super.registerFormControl(this.value);\n                this.model = this.formControl.value;\n                this.onModelChanged(this.model);\n            } else {\n                // get control from parent\n                this.formControl = <FormControl> this.formGroup.controls[this.name];\n            }\n        }\n        // When value is boolean we are dealing with PrimeNg Binary checkbox\n        // which only sets TRUE/FALSE and does not add or remove values\n        this.isBinary = isBoolean(this.value);\n\n    }\n\n\n    ngOnChanges(changes: SimpleChanges): void\n    {\n        super.ngOnChanges(changes);\n\n        if (isPresent(changes['value']) &&\n            (changes['value'].currentValue !== changes['value'].previousValue)) {\n            this.model = changes['value'].currentValue;\n        }\n\n\n    }\n\n    /**\n     * Called when Checkbox is clicked and it either fire action or updates the model.\n     *\n     */\n    onChange(event: any): void\n    {\n        if (this.isFormType()) {\n            this.onModelChanged(this.model);\n            if (this.isStandalone) {\n                this.formControl.setValue(this.model);\n            }\n        } else {\n            this.action.emit(event);\n        }\n    }\n\n\n    /**\n     *\n     * Tell if we are using Form Checkbox. This is used remove some of the bindings that are not\n     * applicable for certain type.\n     *\n     */\n    isFormType(): boolean\n    {\n        return this.type === 'form';\n    }\n\n    /**\n     * Internal. Please see ControlValueAccessor\n     *\n     */\n    writeValue(value: any)\n    {\n        if (value !== this.model && this.isFormType()) {\n            this.model = value;\n\n            if (this.isStandalone) {\n                this.onModelChanged(this.model);\n                this.formControl.setValue(this.model);\n            }\n        }\n    }\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CheckboxComponent} from './checkbox.component';\nimport {CheckboxModule} from 'primeng/primeng';\n\n\n@NgModule({\n    declarations: [\n        CheckboxComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CheckboxModule\n    ],\n\n    entryComponents: [\n        CheckboxComponent\n    ],\n    exports: [\n        CheckboxComponent,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    providers: []\n})\nexport class AWCheckBoxModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    AfterContentInit,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    SkipSelf\n} from '@angular/core';\nimport {Environment, equals, isBlank, isPresent} from '@aribaui/core';\nimport {NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BaseFormComponent} from '../../core/base-form.component';\nimport {FormRowComponent} from '../../layouts/form-table/form-row/form-row.component';\n\n\n/**\n *  Checkbox list is a wrapper class around 'Checkbox' component to simply assembly of multi choice\n * component\n *\n * In Addition it adds ability to work with complex object. PrimeNG checkboxes work only with\n * primitive values.\n *\n * @see {@link check-box/check-box.component.ts}\n *\n *\n * ### Example\n *\n *\n *    @Component({\n *       selector: 'showCheckBoxList' ,\n *       template: `\n *           <aw-checkbox-list [list]=\"checkBoxListValues\" [selections]=\"selectedValues\"\n *\n *            [name]=\"'myColors'\" [formGroup]=\"formGroup\" (onSelection)=\"onCBClick\">\n *           </aw-checkbox-list>\n *       `\n *\n *       })\n *        class MyShowCLComponent\n *        {\n *            checkBoxListValues: string[] = ['blue' , 'red' , 'yellow' , 'orange' , 'white' ,\n *     'silver' , 'black' ,\n *            'Green' , 'Gray' , 'Navy' , 'Olive' , 'Aqua' , 'Purple'];\n *\n *            selectedValues: string[] = ['blue' , 'Olive' , 'Aqua' , 'Purple'];\n *\n *\n *            formGroup: FormGroup = new FormGroup({});\n *\n *\n *            onCBClick (event): void\n *            {\n *                console.log('onCBClick = ' + event);\n *            }\n *\n *        }\n **\n */\n\n\n\n\nexport const CB_LIST_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CheckBoxListComponent),\n    multi: true\n};\n\n\n@Component({\n    selector: 'aw-checkbox-list',\n    templateUrl: 'check-box-list.component.html',\n    styleUrls: ['check-box-list.component.scss'],\n\n    providers: [\n        CB_LIST_CONTROL_VALUE_ACCESSOR,\n        {provide: BaseFormComponent, useExisting: forwardRef(() => CheckBoxListComponent)}\n    ]\n})\nexport class CheckBoxListComponent extends BaseFormComponent implements AfterContentInit\n{\n    /**\n     * List of values used to render checkboxes. Even we have here type as ANY we internally\n     * support only string at the moment\n     */\n    @Input()\n    list: any[];\n\n\n    /**\n     *  Selections are default CHECKED values passed. e.g. When rendering field favorite colors:\n     * blue, red, yellow you will pass in here blue, red, then checkboxes with value blue, red wil\n     * be rendered as check and yellow unchecked\n     */\n    @Input()\n    selections: any[];\n\n    /**\n     * Fires event when checkbox is selected/clicked. Emits current clicked checkboxed. not the\n     * actuall internal model value in this case array of choices\n     *\n     */\n    @Output()\n    onSelection: EventEmitter<any> = new EventEmitter<any>();\n\n    /**\n     * special expression to format label\n     */\n    @Input()\n    labelFormatter: (value: any) => string;\n\n\n    /**\n     * Internal model\n     */\n    model: any = [];\n\n    constructor(public env: Environment,\n                private cd: ChangeDetectorRef,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => FormRowComponent))\n                protected parentContainer: BaseFormComponent)\n    {\n        super(env, parentContainer);\n    }\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n\n        if (isBlank(this.selections)) {\n            this.selections = [];\n        }\n\n        this.registerFormControl(this.selections);\n\n        this.updateModel(this.selections);\n        this.onModelChanged(this.selections);\n    }\n\n\n    ngAfterContentInit(): void\n    {\n        let updatedModel: any[] = [];\n\n        this.model.forEach((index: number) => updatedModel.push(this.list[index]));\n        this.formControl.setValue(updatedModel, {\n            emitEvent: true,\n            emitViewToModelChange: false\n        });\n        this.cd.detectChanges();\n\n    }\n\n\n    /**\n     * Label is extracted into this method so in the future we can play more how we want to display\n     * the value. Since I want to support formatters for each components we might have a chance to\n     * decide how label will look like.\n     *\n     */\n    labelValue(item: any): string\n    {\n        if (isPresent(this.labelFormatter)) {\n            return this.labelFormatter(item);\n        }\n        return item.toString();\n    }\n\n\n    /**\n     * In this version of checkboxes we still expect only primitive types. Keep this functionality\n     * in extra method so we can work with it even now we just return the same value back\n     */\n    value(item: any): any\n    {\n        return item;\n    }\n\n    /**\n     * Delegate event outside of this component and convert indexed model to original objects\n     *\n     */\n    onChange(event: any): void\n    {\n        let updatedModel: any[] = [];\n\n        this.model.forEach((index: number) =>\n        {\n            updatedModel.push(this.list[index]);\n        });\n\n        this.onSelection.emit(updatedModel);\n        this.onModelChanged(updatedModel);\n        this.formControl.setValue(updatedModel, {\n            emitEvent: true,\n            emitViewToModelChange: false\n        });\n    }\n\n\n    /**\n     * Since we might be dealing with complex object store only INDEXes number in the model.\n     *\n     */\n    updateModel(sourceList: any[]): void\n    {\n        sourceList.forEach((item: any) =>\n        {\n            let index = this.list.findIndex((elem: any) =>\n            {\n                return equals(item, elem);\n            });\n            this.model.push(index);\n        });\n    }\n\n\n    /**\n     * Internal. Please see ControlValueAccessor\n     *\n     */\n    writeValue(value: any)\n    {\n        if (isPresent(this.model) && isPresent(value)) {\n            let newModel = value;\n            this.updateModel(newModel);\n\n            // this.cd.markForCheck();\n        }\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CheckBoxListComponent} from '../check-box-list/check-box-list.component';\nimport {AWCheckBoxModule} from '../checkbox/check-box.module';\n\n\n@NgModule({\n    declarations: [\n        CheckBoxListComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        AWCheckBoxModule\n    ],\n\n\n    exports: [\n        CheckBoxListComponent\n    ],\n    providers: []\n})\nexport class AWCheckBoxListModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {BaseComponent} from '../../core/base.component';\nimport {Environment} from '@aribaui/core';\n\n/**\n * Hyperlink component that implements consistent styling, behavior. Hyperlink supports all of the\n * native link functionality. In addition, it supports navigation to components through the action\n * binding.\n *\n *\n * for more info please see class Doc of the:\n *  @see {@link button/button.component.ts}\n *\n *  ### Example\n *  ```\n *\n *  @Component({\n *    selector: 'registration' ,\n *    template: `\n *\n *           <aw-hyperlink  [type]=\"'text/html'\" [name]=\"'link'\"\n *                        (action)=\"onClicked($event)\" [value]=\"customerId\"\n *                        [size]=\"'large'\" >my link</aw-hyperlink>\n *\n *    `\n *    })\n *    export class MyComponent\n *    {\n *        command:boolean;\n *\n *        constructor ()\n *        {\n *        }\n *\n *        onClicked(customerId:string) {\n *           if (customerId) {\n *              // display customer details component.\n *           }\n *        }\n *    }\n */\n@Component({\n    selector: 'aw-hyperlink',\n    templateUrl: 'hyperlink.component.html',\n    styleUrls: ['hyperlink.component.scss']\n})\nexport class HyperlinkComponent extends BaseComponent\n{\n\n    /**\n     *    Specifies the media type of the linked document. Mime type\n     *    ex: [text/html | text/csv | image/png | audio/3gpp | ....]\n     */\n    @Input()\n    type: string;\n\n    /**\n     * url for this hyperlink. Can be used to navigate to a component.\n     */\n    @Input()\n    href: string;\n\n    /**\n     * rel for this hyperlink. Specify the relationship of the current document and linked document\n     */\n    @Input()\n    rel: string;\n\n\n    /**\n     * sizing for this link. [large, normal, small].\n     */\n    @Input()\n    size: LinkSize = 'normal';\n\n    /**\n     * Specify the target of the hyperlink. [_blank | _self | _parent | _top | framename ]\n     */\n    @Input()\n    target: string;\n\n    /**\n     * Value to be send to server when clicked.\n     */\n    @Input()\n    value: string;\n\n    /**\n     * Event fired when user select a item\n     */\n    @Output()\n    action: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Internal CSS class that styles this hyperlink based on input 'size'\n     */\n    linkClass: string = 'link';\n\n    constructor(public env: Environment)\n    {\n        super(env);\n\n    }\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n\n        // Determine the link class based on input size.\n        if (this.size) {\n            switch (this.size) {\n                case 'large' :\n                    this.linkClass += ' link-lg';\n                    break;\n                case 'normal' :\n                    this.linkClass += ' link-mid';\n                    break;\n                case 'small' :\n                    this.linkClass += ' link-sm';\n                    break;\n            }\n        }\n\n        // If I have an action tag, and no href. We add default styling and behavior.\n        if (this.action.observers.length > 0) {\n            this.linkClass += ' link-bh';\n        }\n\n    }\n\n    /**\n     *  Action clicked. Call parent action.\n     */\n    clicked(event: any)\n    {\n        this.action.emit({\n            event: event,\n            value: this.value\n        });\n    }\n}\n\n/**\n * Supported Link Size\n */\nexport type LinkSize = 'large' | 'normal' | 'small';\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {HyperlinkComponent} from './hyperlink.component';\n\n\n@NgModule({\n    declarations: [\n        HyperlinkComponent\n    ],\n    imports: [\n        CommonModule\n    ],\n    entryComponents: [\n        HyperlinkComponent\n    ],\n    exports: [\n        HyperlinkComponent\n    ],\n    providers: []\n})\nexport class AWHyperlinkModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {unimplemented} from '@aribaui/core';\n\n\n/**\n * Selection State for the chooser in order to be able to comunicate with the parent object using a\n * chooser. If I would have to manage only single values with no addional methods i would user\n * emitters to do the job, but in this case we need this interface (abstract class) between a\n * chooser and actual object.\n *\n *\n */\nexport abstract class ChooserSelectionState\n{\n    /**\n     *\n     * Set selection state is usually triggered by selecting and unselecting a item (in case of\n     * multiselect) and it should update its list of objects with either settings/adding item or\n     * removing it.\n     *\n     *\n     */\n    setSelectionState(selection: any, selected: boolean): void\n    {\n    }\n\n    /**\n     * The most recent selection . Null if last action was a deselection. Usually used by Chooser\n     * or ChooserState to get cuurent value.\n     *\n     */\n    selectedObject(): any\n    {\n        return unimplemented();\n    }\n\n\n    /**\n     * The most recent selections.\n     *\n     */\n    selectedObjects(): Array<any>\n    {\n        return unimplemented();\n    }\n\n\n    /**\n     *\n     * Check if the item selection items is in the selectedObjects\n     */\n    isSelected(selection: any): boolean\n    {\n        return unimplemented();\n    }\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {isBlank, isPresent, ListWrapper} from '@aribaui/core';\nimport {ChooserSelectionState} from './chooser-selection-state';\nimport {DataSource} from '../../core/data/data-source';\n\n/**\n * ChooserState manages complete lifecycle for the Chooser Component. It keeps track of current\n * selection as well as it can broadcast any updates.\n *\n *\n */\nexport class ChooserState\n{\n\n    /**\n     *  Callback to the parent object to store current selection\n     */\n    selectionState: ChooserSelectionState;\n\n    /**\n     * todo: We do not needed this !!\n     */\n    currentItem: any;\n\n\n    /**\n     * Matching pattern. User latest input to the chooser input field\n     */\n    pattern: string;\n\n\n    /**\n     * Last successfull pattern that retrieved some data\n     */\n    lastFullMatchPattern: string;\n\n\n    /**\n     * Current matched items using ChooserSelectionState\n     */\n    matches: Array<any>;\n\n\n    /**\n     * Is this multiselect chooser\n     */\n    multiselect: boolean;\n\n\n    /**\n     *\n     * Implementation can set lookup key to narrow the search. If we are dealing with object\n     * you should set this.\n     *\n     */\n    lookupKey: string;\n\n\n    /**\n     * previous display value is set when the display value is rendered on the chooser. we cache\n     * the UI value to compare with the inbound value later instead of the value from underlying\n     * object because business logic level code could have changed the underlying object's value\n     *\n     * todo: do I still need this?\n     */\n    prevDisplayValue: string;\n\n\n    /**\n     * Indicates if there are any validation like entered value does not much with the source list.\n     *\n     */\n    isInvalid: boolean = false;\n\n    /**\n     *\n     * indicates that we started to some editing e.g. starting to type in something into the\n     * filter, or removing already selected items\n     */\n    addMode: boolean = false;\n\n\n    recentSelectedDisplayed: number = 0;\n\n\n    /**\n     * When this option is active we do not show all selected items, but max number that is\n     * defined. User is able to toggle to expand the view to see all selections and hide them as\n     * well\n     */\n    showAllRecentlySelected: boolean = false;\n\n\n    constructor(chooserSelectionState?: ChooserSelectionState, isMulti: boolean = true)\n    {\n\n        this.selectionState = chooserSelectionState;\n        this.multiselect = isMulti;\n\n        if (isBlank(this.selectionState)) {\n            this.selectionState = new DefaultSelectionState(this.multiselect);\n        }\n    }\n\n\n    /**\n     *\n     * It will select and persist an item using ChooserSelectionState provider.\n     *\n     */\n    updatedSelectedObjects(item: any): void\n    {\n        if (isBlank(item)) {\n            item = this.currentItem;\n        }\n\n        if (!this.multiselect) {\n            this.setSelectionState(item, true);\n        } else {\n            let selectedObject = this.selectedObject();\n            let selectedObjects = this.selectedObjects();\n\n\n            if (this.addMode) {\n                if (this.isInvalid) {\n                    if (isPresent(selectedObject)) {\n                        this.setSelectionState(selectedObject, false);\n                    }\n\n                }\n                this.setSelectionState(item, !ListWrapper.containsComplex(selectedObjects, item));\n            } else {\n                if (isPresent(selectedObject)) {\n                    this.setSelectionState(selectedObject, false);\n                }\n                this.setSelectionState(item, true);\n            }\n        }\n    }\n\n\n    /**\n     * When user selection is large we use this method to check if we need to show all selected\n     * items or only MaxRecentSelected\n     */\n    toggleAllSelected(): void\n    {\n        this.showAllRecentlySelected = !this.showAllRecentlySelected;\n    }\n\n\n    /**\n     *\n     * Renders user's selection under the input field\n     *\n     */\n    get recentSelectedObjects(): Array <any>\n    {\n\n        if (!this.multiselect) {\n            return [];\n        }\n\n        let recentSelectedObjects: any[] = [];\n        this.recentSelectedDisplayed = 0;\n        let selectedObjects = this.selectedObjects();\n        let size = selectedObjects.length;\n        let maxCount = DataSource.MaxRecentSelected;\n        if (size > DataSource.MaxRecentSelected && !this.showAllRecentlySelected) {\n            maxCount -= 1;\n        }\n        if (this.showAllRecentlySelected) {\n            maxCount = size;\n        }\n\n        for (let i = size - 1; i >= 0 && (this.recentSelectedDisplayed < maxCount); i--) {\n            let selection = selectedObjects[i];\n            recentSelectedObjects.push(selection);\n            this.recentSelectedDisplayed++;\n        }\n\n        return recentSelectedObjects;\n    }\n\n    selectedObject(): any\n    {\n        return this.selectionState.selectedObject();\n    }\n\n\n    selectedObjects(): Array<any>\n    {\n        return this.selectionState.selectedObjects();\n    }\n\n    setSelectionState(selection: any, selected: boolean): void\n    {\n        if (isPresent(selection)\n        ) {\n            this.selectionState.setSelectionState(selection, selected);\n        }\n    }\n\n}\n\n\n/**\n * Dummy implementation ChooserSelectionState\n */\nexport class DefaultSelectionState extends ChooserSelectionState\n{\n    private _selectedObject: any;\n    private _selectedObjects: any;\n\n\n    constructor(private multiSelect: boolean)\n    {\n        super();\n    }\n\n    setSelectionState(selection: any, selected: boolean): void\n    {\n        if (selected) {\n            this._selectedObject = selection;\n            if (this.multiSelect && !ListWrapper.containsComplex(this.selectedObjects(),\n                    selection)) {\n                this.selectedObjects().push(selection);\n            }\n        } else {\n            if (this.multiSelect) {\n                ListWrapper.removeIfExist(this.selectedObjects(), selection);\n            }\n        }\n    }\n\n    selectedObject(): any\n    {\n        return this._selectedObject;\n    }\n\n    selectedObjects(): Array<any>\n    {\n        if (isBlank(this._selectedObjects)) {\n            this._selectedObjects = [];\n        }\n        return this._selectedObjects;\n    }\n\n    isSelected(selection: any): boolean\n    {\n        return super.isSelected(selection);\n    }\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport {DataSource, DSInitParams} from '../../core/data/data-source';\nimport {DataFinder, DataFinders} from '../../core/data/data-finders';\nimport {DataProviders} from '../../core/data/data-providers';\nimport {Observable} from 'rxjs';\nimport {DataProvider} from '../../core/data/datatype-registry.service';\nimport {ChooserState} from './chooser-state';\nimport {assert, isArray, isBlank, isPresent, ListWrapper} from '@aribaui/core';\n\n/**\n * Concrete DataSource implementation for the Chooser component. There are two ways how to use it:\n *\n * 1) You can use default DataSource injected inside component constructor and just call\n * initialize to configure it with correct DataProvider and DataFinder:\n *\n *\n * ```\n *   this.dataSource.init({\n *               obj: this.list,\n *               queryType: QueryType.FullText,\n *               state: null,\n *               multiselect: this.multiselect\n *           });\n *\n * ```\n *\n * and then you can use it to simply retrieve data or run queries.\n *\n * 2) You will instantiate your own DataSource and pass it into the component using [dataSource]\n * binding\n *\n * ```\n *\n *   this.ds = new ChooserDataSource(this.data, this.finders);\n *   this.ds.init({\n *               obj: this.list,\n *               queryType: QueryType.FullText,\n *               state: null,\n *               multiselect: this.multiselect\n *           });\n *\n * ```\n *\n *\n */\nexport class ChooserDataSource extends DataSource\n{\n\n    /**\n     * Matching dataProviders and finders\n     */\n    private dataProvider: DataProvider<any>;\n    private dataFinder: DataFinder;\n\n\n    /**\n     * Special object to keep current state of this chooser\n     */\n    state: ChooserState;\n\n\n    constructor(public dataProviders: DataProviders, public finders: DataFinders)\n    {\n        super(dataProviders, finders);\n    }\n\n\n    /**\n     * To initialize this DataSource with current DataFinder and Provider as well as state we use\n     * an interface DSChooserInitParams to have all init values typed checked\n     *\n     *\n     */\n    init(...args: any[]): void\n    {\n        if (isBlank(args) || args.length !== 1 && !isDSChooserInitParams(args[0])) {\n            throw new Error('You need to initialize DS with (DSChooserInitParams)');\n        }\n        let init: DSChooserInitParams = args[0];\n\n        this.dataProvider = isPresent(init.dataProvider) ? init.dataProvider\n            : this.dataProviders.find(init.obj);\n\n        this.dataFinder = isPresent(init.dataFinder) ? init.dataFinder\n            : this.finders.find(this.dataProvider, init.queryType);\n\n        assert(isPresent(this.dataProvider) && isPresent(this.dataFinder),\n            'DataSource incorrectly initialized. (DataProvider, DataFinder) missing. ');\n\n        if (isPresent(init.state)) {\n            this.state = init.state;\n        } else {\n            this.state = new ChooserState(null, init.multiselect);\n        }\n\n        this.dataFinder.lookupKey = init.lookupKey;\n        this.state.lookupKey = init.lookupKey;\n    }\n\n\n    find(pattern: string, max: number): void\n    {\n        this.state.pattern = pattern;\n        this.state.lastFullMatchPattern = pattern;\n\n        if (pattern.length === 0) {\n            return;\n        }\n        if (pattern === '*') { // query everything\n            pattern = '';\n        }\n\n\n        // make sure we dataFinder has expected lookup key\n        let origKey = this.dataFinder.lookupKey;\n        this.dataFinder.lookupKey = this.state.lookupKey;\n        this.dataFinder.forData(this.dataProvider).match<any>(pattern, max)\n            .subscribe((result: any[]) =>\n            {\n                this.state.matches = result;\n\n                if (this.state.multiselect) {\n                    for (let i = 0; i < this.state.selectedObjects().length; i++) {\n                        let item = this.state.selectedObjects()[i];\n                        ListWrapper.removeIfExist(this.state.matches, item);\n                    }\n                }\n\n                this.dataFinder.lookupKey = origKey;\n            });\n    }\n\n    /**\n     *\n     * When multiselect this method checks if we need to show SHOW MORE label under the selected\n     * items. We do not want show e.g. 50 selection under the chooser that would take up whole\n     * page.\n     *\n     */\n    showMoreSelected(): boolean\n    {\n        return this.state.selectedObjects().length >= DataSource.MaxRecentSelected;\n    }\n\n    open<T>(): Observable<T[]>\n    {\n        return this.dataProvider.dataChanges.asObservable();\n    }\n\n    close(): void\n    {\n        this.dataProvider = null;\n        this.dataFinder = null;\n        this.state = null;\n    }\n\n    instant<T>(): T[]\n    {\n        return this.dataProvider.data();\n    }\n\n    updateValue(value: any): void\n    {\n        this.state.addMode = true;\n        if (isArray(value)) {\n            let items: any[] = value;\n            items.forEach((item) => this.state.updatedSelectedObjects(item));\n        } else {\n            this.state.updatedSelectedObjects(value);\n        }\n        this.state.addMode = false;\n\n    }\n\n\n    get lookupKey(): string\n    {\n        return this.dataFinder.lookupKey;\n    }\n}\n\n/* is \"init\" type of DSChooserInitParams interface ? */\nexport function isDSChooserInitParams(init: DSChooserInitParams): init is DSChooserInitParams\n{\n    return isPresent(init.obj) || isPresent(init.queryType);\n}\n\n/**\n * To make initialization easier we have this common format.\n */\nexport interface DSChooserInitParams extends DSInitParams\n{\n    /**\n     * Chooser state keeping information what is currently selected , result of the last match\n     */\n    state?: ChooserState;\n}\n\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    AfterViewChecked,\n    AfterViewInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    SkipSelf,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport {FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {AutoComplete} from 'primeng/primeng';\nimport {assert, Environment, isBlank, isPresent} from '@aribaui/core';\nimport {BaseFormComponent} from '../../core/base-form.component';\nimport {DATA_SOURCE} from '../../core/data/data-source';\nimport {ChooserDataSource} from './chooser-data-source';\nimport {DataProviders} from '../../core/data/data-providers';\nimport {DataFinders, QueryType} from '../../core/data/data-finders';\nimport {ChooserState, DefaultSelectionState} from './chooser-state';\n\n\n/**\n * Typeahead chooser that supports both single and multi-select. Not like Dropdown, this chooser\n * requires little bit different setup. It requires at minimum @Input dataSource or\n * destinationClass\n *\n *\n * By default chooser is multi-select. If you want single select then you must provide multi-select\n * with @Input.\n *\n * ### Example\n *\n * In simple scenario you can use Chooser like so:\n *\n *\n * ```\n *  @Component({\n *      selector: 'chooser-app' ,\n *      template: `<aw-chooser  [formGroup]=\"formGroup\" name=\"color\"'\n *                      [dataSource]=\"ds\"></aw-chooser>`\n *  })\n *  export class MyChooserApp\n *  {\n *\n *      ds: ChooserDataSource;\n *\n *     constructor(private data: DataProviders, private finders: DataFinders){\n *          this.ds = new ChooserDataSource(this.data, this.finders);\n *\n *       this.ds.init({\n *           obj: ['blue', 'red', 'yellow'], queryType: QueryType.FullText, state: null,\n *            multiselect: true\n *       });\n *\n *     }\n *  }\n *\n * ````\n *  Above example will use provided dataSource and render multi-select chooser. With default\n *  implementation  selected values will appear as a tags under the input box\n *\n *\n *\n * * ### Example\n *\n *  In this example we provide custom template to change the way how chooser's MenuItem are\n *     rendered as well as template for the selection item looks like\n *\n * ```\n *  @Component({\n *      selector: 'chooser-app' ,\n *      template: `<aw-chooser  name=\"commodity\"' [dataSource]=\"ds\">\n *\n *          <ng-template #menuItem let-item>\n *             \t<span>\n *             \t\t<i class=\"fa fa-envira \" ></i>\n *             \t\t{{item}}\n *             \t</span>\n *\n *          </ng-template>\n *\n *          <ng-template #selectionItem let-item>\n *             \t<span class=\"tag tag-circle\">\n *             \t\titem: {{item }}\n *             \t\t<i class=\"fa fa-close\" (click)=\"chooser.removeValue(item)\"></i>\n *             \t</span>\n *\n *\n *          </ng-template>\n *\n *\n *          </aw-chooser>\n *      `\n *      style: [`\n *              .tag-circle {\n *              \tborder-radius: 6rem;\n *              \theight: 7rem;\n *              \tcolor: #e8eef1;\n *              \tbackground-color: rgba(53, 56, 58, 0.67);\n *              \tline-height: 6rem;\n *              }\n *      `]\n *  })\n *\n * ````\n *\n *  In above example we change how the chooser's menu item look like as well as we define custom\n *     template for selection item to turn all selection to circles with text in the middle.\n *\n *\n *\n */\n\nexport const CHOOSER_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ChooserComponent),\n    multi: true\n};\n\n\n@Component({\n    selector: 'aw-chooser',\n    templateUrl: 'chooser.component.html',\n    styleUrls: ['chooser.component.scss'],\n    providers: [\n        CHOOSER_CONTROL_VALUE_ACCESSOR,\n        {provide: BaseFormComponent, useExisting: forwardRef(() => ChooserComponent)},\n        {provide: DATA_SOURCE, useClass: ChooserDataSource, deps: [DataProviders, DataFinders]}\n    ]\n\n\n})\nexport class ChooserComponent extends BaseFormComponent implements AfterViewChecked,\n    AfterViewInit {\n\n    /**\n     * Max number of items return at single Match so we do not return 1000 items at single time.\n     *\n     */\n    @Input()\n    maxLength: number = 10;\n\n\n    /**\n     * Max number of items return at single Match so we do not return 1000 items at single time.\n     *\n     */\n    @Input()\n    minLenForSearch: number = 1;\n\n\n    /**\n     * Formatter used to format each selection and selected object for display.\n     *\n     */\n    @Input()\n    valueTransformer: (value: any) => string;\n\n    /**\n     * Is this multiselect\n     *\n     */\n    @Input()\n    multiselect: boolean = true;\n\n\n    /**\n     * By default ChooserDataSource will be created but there is a option to set\n     * custom one on application level\n     */\n    @Input()\n    dataSource: ChooserDataSource;\n\n\n    /**\n     * In case we want to change the place where selection is rendered use this appendTo property\n     * and it will use DOM operation appendChild() to move selectionView under different parent\n     */\n    @Input()\n    selectionAppendTo: ElementRef;\n\n\n    @Input()\n    delay: number = 300;\n\n\n    /**\n     * Target type to render. Data will be read from the registered DataProvider\n     */\n    @Input()\n    destinationClass: string;\n\n\n    @Input()\n    field: string;\n\n\n    /**\n     * Event fired when user select a item\n     */\n    @Output()\n    onSelection: EventEmitter<any> = new EventEmitter();\n\n\n    /**\n     * internal model to listen for Input value changes\n     */\n    internalChooserModel: any;\n\n\n    /**\n     * Embedded template defined by user. If user does not provide any template then when rendering\n     * an item we assume we are dealing with primitive types and call on each item toString(), if\n     * we are dealing with object, then we expect user to provide a template and tell the chooser\n     * how items shoulds be handled or at least valueTransformer so we know how to convert this\n     * value.\n     *\n     * Each object can provide its own toString implementation.\n     *\n     */\n    @ContentChild('menuItem')\n    menuTemplate: TemplateRef<any>;\n\n\n    @ContentChild('selectionItem')\n    selectionTemplate: TemplateRef<any>;\n\n    @ViewChild('autoCompplete')\n    autoCompleteComponent: AutoComplete;\n\n    @ViewChild('selectionView')\n    selectionViewElem: ElementRef;\n\n\n    /**\n     * When the selection is > max selection, then show hide link.\n     */\n    private hideLink: string;\n\n    constructor(public env: Environment, private elemementRef: ElementRef,\n                @Inject(DATA_SOURCE) private _defaultDS: ChooserDataSource,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => BaseFormComponent))\n                protected parentContainer: BaseFormComponent) {\n        super(env, parentContainer);\n\n        if (isBlank(this.placeHolder)) {\n            // this.placeHolder = i18n.instant('Widgets.chooser.placeHolder');\n            this.placeHolder = 'Search';\n        }\n        // this.hideLink = i18n.instant('Widgets.chooser.hideSelection');\n        this.hideLink = 'Hide';\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n\n        if (isBlank(this.dataSource)) {\n\n            this.dataSource = this._defaultDS;\n            this.initDatasource();\n        }\n\n        if (isPresent(this.formControl) && isPresent(this.formControl.value)) {\n            this.dataSource.updateValue(this.formControl.value);\n        }\n\n        this.initInternalModel();\n\n\n        if (this.isStandalone) {\n            super.registerFormControl(this.internalChooserModel);\n        } else {\n            if (isPresent(this.name)) {\n                this.formControl = <FormControl> this.formGroup.controls[this.name];\n            }\n        }\n    }\n\n    /**\n     * Add Search icon in case of multiselect.\n     * todo: Once PrimeNG will provide a template to override default behavior remove it\n     *\n     */\n    ngAfterViewInit() {\n        if (!this.dataSource.state.multiselect) {\n            return;\n        }\n\n        let searchInput = this.elemementRef.nativeElement.querySelector(\n            '.ui-autocomplete-input-token');\n\n        if (isPresent(searchInput)) {\n            let iconElement = document.createElement('span');\n            iconElement.className = 'search-icon-right fa fa-fw fa-search';\n            searchInput.appendChild(iconElement);\n        }\n\n        if (isPresent(this.selectionAppendTo) && isPresent(this.selectionViewElem)) {\n            let parentElem = this.selectionAppendTo instanceof ElementRef ?\n                this.selectionAppendTo.nativeElement : this.selectionAppendTo;\n\n            parentElem.appendChild(this.selectionViewElem.nativeElement);\n        }\n    }\n\n    /**\n     * Need to change current behavior since we want to show selection under the chooser. K\n     *\n     */\n    ngAfterViewChecked(): void {\n        if (!this.dataSource.state.multiselect) {\n            return;\n        }\n\n        let tokens = this.elemementRef.nativeElement.querySelectorAll(\n            '.ui-autocomplete .ui-autocomplete-token');\n        if (isPresent(tokens) && tokens.length > 0) {\n            tokens.forEach((item: any) => {\n                item.remove();\n            });\n        }\n    }\n\n    /**\n     *\n     * When value is entered into search box, we ask our DataSource to match this pattern\n     * against data repository. It will retrieve all possible matches limited by MaxLen and this\n     * is again filtered so it does not include already selected items.\n     *\n     *  the matched resulted is saved in the: this.dataSource.state.matches\n     */\n    match(pattern: string): void {\n        let maxLen = this.maxLength ? this.maxLength : ChooserDataSource.MaxLength;\n        this.dataSource.find(pattern, maxLen);\n\n\n        // fix: for tests: In version 4 we need to explicitly focus input otherwise autocomplete\n        // doesn't give us any popup panel\n        if (this.env.inTest && isPresent(this.autoCompleteComponent)) {\n            this.autoCompleteComponent.focusInput();\n        }\n    }\n\n\n    /**\n     *\n     * Invoked by Dropdown button in case of single select and here we want to invoke match\n     * to retrieve all suggestions without any filter\n     *\n     */\n    onDropdownClick(event: any): void {\n        this.match('*');\n        setTimeout(() => {\n            this.match('*');\n        }, 100);\n    }\n\n    /**\n     *\n     * Chooser state is updated  with user selection. Please see writeValue. When do not need\n     * call anything additional as internalChooserModel and this.chooserState.selectedObjects()\n     * shares the same references so its important that we first save reference to\n     * this.chooserState.selectedObjects() and then back to internalChooserModel\n     *\n     */\n    selectItem(item: any): void {\n        this.onSelection.emit(this.internalChooserModel);\n        this.formControl.setValue(this.internalChooserModel, {emitEvent: true});\n        this.formControl.markAsDirty({onlySelf: true});\n\n        this.dataSource.state.addMode = true;\n\n        this.onModelChanged(this.internalChooserModel);\n        this.dataSource.state.updatedSelectedObjects(item);\n\n        this.dataSource.state.addMode = true;\n\n        if (!this.dataSource.state.multiselect) {\n            this.autoCompleteComponent.inputEL.nativeElement.value =\n                this.displayItem(this.internalChooserModel);\n        }\n    }\n\n\n    /**\n     *\n     * Unselect item\n     *\n     */\n    removeValue(item: any): void {\n        this.dataSource.state.addMode = true;\n        this.dataSource.state.updatedSelectedObjects(item);\n        this.dataSource.state.addMode = false;\n\n        this.internalChooserModel = this.dataSource.state.selectedObjects();\n\n        this.onSelection.emit(this.internalChooserModel);\n        this.formControl.setValue(this.internalChooserModel, {emitEvent: true});\n        this.formControl.markAsDirty({onlySelf: true});\n\n        this.onModelChanged(this.internalChooserModel);\n\n\n        if (isPresent(this.autoCompleteComponent)) {\n            this.autoCompleteComponent.focusInput();\n        }\n\n    }\n\n    /**\n     *\n     * Convert a object if any into the string representation\n     *\n     * todo: implement better way how to work with objects\n     *\n     */\n    displayItem(item: any) {\n        if (isBlank(item)) {\n            return null;\n        }\n        this.dataSource.state.currentItem = item;\n\n        if (isPresent(this.valueTransformer)) {\n            return this.valueTransformer(item);\n\n        } else if (isPresent(this.dataSource.lookupKey)) {\n            return item[this.dataSource.lookupKey];\n\n        } else {\n            return item.toString();\n        }\n    }\n\n    /**\n     *\n     * Returns a label that is shown under the selected item when user selection is >\n     * MaxRecentSelected\n     *\n     */\n    moreSelectString(): string {\n        let moreSelected = this.dataSource.state.selectedObjects().length -\n            this.dataSource.state.recentSelectedDisplayed;\n        if (moreSelected < 2 && !this.dataSource.state.showAllRecentlySelected) {\n            return '';\n        }\n\n        if (this.dataSource.state.showAllRecentlySelected) {\n            return this.hideLink;\n        }\n        return `${moreSelected} more selected...`;\n    }\n\n\n    /**\n     * In case of multiselect = false check if we want to show a selected value inside the input\n     * field\n     *\n     */\n    singleValueSelected(): boolean {\n        return !this.dataSource.state && isPresent(this.dataSource.state.currentItem)\n            && !this.dataSource.state.addMode;\n    }\n\n    hasMenuTemplate(): boolean {\n        return isPresent(this.menuTemplate);\n    }\n\n\n    hasSelectionTemplate(): boolean {\n        return isPresent(this.selectionTemplate);\n    }\n\n\n    /**\n     * Internal. Please see ControlValueAccessor\n     * As we are using DataSource internally for [(ngModel)] case we need to deffer DataSource\n     * initialization once we have a value and we only accept []\n     *\n     *\n     * ? Should we do some deeper comparision?\n     */\n    writeValue(value: any) {\n        if (isBlank(value)) {\n            return;\n        }\n\n        if (isPresent(this.dataSource)) {\n            this.dataSource.updateValue(value);\n        } else {\n            let selState: DefaultSelectionState = new DefaultSelectionState(this.multiselect);\n            let chState: ChooserState = new ChooserState(selState, this.multiselect);\n            this.initDatasource(chState);\n\n            this.dataSource.updateValue(value);\n        }\n\n        this.initInternalModel();\n    }\n\n    initDatasource(chooserState?: ChooserState): void {\n        assert(isPresent(this.destinationClass),\n            'You need to provide destinationClass or custom DataSource');\n\n        this.dataSource.init({\n            obj: this.destinationClass,\n            queryType: QueryType.FullText,\n            lookupKey: this.field,\n            state: chooserState,\n            multiselect: this.multiselect\n        });\n    }\n\n    /**\n     *\n     * Used by ngOnInit and Write value to read state from ChooserState and set it to internal\n     * ngModel property\n     *\n     */\n    private initInternalModel(): void {\n        if (this.dataSource.state.multiselect) {\n            this.internalChooserModel = this.dataSource.state.selectedObjects();\n        } else {\n            this.internalChooserModel = this.dataSource.state.selectedObject();\n        }\n        if (isPresent(this.formControl)) {\n            this.formControl.setValue(this.internalChooserModel);\n        }\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {ChooserComponent} from './chooser.component';\nimport {AutoCompleteModule} from 'primeng/primeng';\nimport {AWHyperlinkModule} from '../hyperlink/hyperlink.module';\nimport {AWCoreComponentModule} from '../../core/core.module';\n\n\n@NgModule({\n    declarations: [\n        ChooserComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        AutoCompleteModule,\n        AWHyperlinkModule,\n        AWCoreComponentModule\n\n    ],\n    entryComponents: [\n        ChooserComponent\n    ],\n    exports: [\n        ChooserComponent,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    providers: []\n})\nexport class AWChooserModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    Component,\n    ContentChild,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    SkipSelf,\n    TemplateRef\n} from '@angular/core';\nimport {FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {SelectItem} from 'primeng/primeng';\nimport {Environment, equals, isPresent} from '@aribaui/core';\nimport {BaseFormComponent} from '../../core/base-form.component';\n\n\n/**\n * A popup like component rendering list of values as. Based on PrimeNG component and one of the\n * main reason why we need to wrap this is to extend its capabilities to accept almost any\n * data type without using Primens's specific SelectItem type.\n *\n *\n * ### Example\n *\n * ```\n *  @Component({\n *      selector: 'showDropDown' ,\n *      template: '<aw-dropdown [list]=\"testItemSmall\"\n *     (onSelection)=\"onSelection($event)\"></aw-dropdown>'\n *  })\n *  export class MyDropComponent\n *  {\n *      testItemSmall: string[] = ['view' , 'edit'];\n *\n *      // when you switch list binding to refert to large item fiilter automatically is shown and\n *     max 10 items are\n *      // visible\n *      testItemLarge: string[] = ['view' , 'edit' , 'frank' , 'kolar' , 'The Sun' , 'Dog' ,\n *     'Computer' , 'A Desk' ,\n *      'My Car' , 'Pencil' , 'This Page' , 'Yesterday' , 'Monday' , 'Tuesday' , 'BMW R1200 GS' ,\n *     'Czech Republic' ,\n *      'Last Item'];\n *\n *\n *      itemSelected: string = 'view';\n *      itemSelectedLg: string = 'Monday';\n *\n *      noselString: string = '(no selection)';\n *\n *\n *      onSelection (event): void\n *      {\n *          this.itemSelected = event;\n *\n *      }\n *  }\n *\n *  ```\n *\n */\n\n\nexport const DD_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => DropdownComponent),\n    multi: true\n};\n\n\n@Component({\n    selector: 'aw-dropdown',\n    templateUrl: 'dropdown.component.html',\n    styleUrls: ['dropdown.component.scss'],\n    providers: [\n        DD_CONTROL_VALUE_ACCESSOR,\n        {provide: BaseFormComponent, useExisting: forwardRef(() => DropdownComponent)}\n    ]\n\n})\nexport class DropdownComponent extends BaseFormComponent\n{\n\n    static readonly MaxNumShown = 10;\n\n    /**\n     * Ordered list of items rendered as a popup menu\n     */\n    @Input()\n    list: any[];\n\n    /**\n     * Items which was selected as a default value or by used in the popup menu.\n     */\n    @Input()\n    selection: any;\n\n    /**\n     * String rendered as first value in the popup which let the user to make 'no selection' from\n     * available list of values. When this option is active and use make this selection we save a\n     * NULL value\n     */\n    @Input()\n    noSelectionString: string;\n\n    /**\n     * Event fired when user select a item\n     */\n    @Output()\n    onSelection: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * This is the internal list that hides PrimeNG specifics where we need to deal with special\n     * type: SelectItem. Our expectation is that you need to be able to pass regular string values\n     * or full object and not trying to wrap it into extra layer.\n     *\n     */\n    internalList: SelectItem[];\n\n\n    /**\n     * Embedded template defined by user. If user does not provide any template and while rendering\n     * item we assume we are dealing with primitive types and call on each item toString(), if we\n     * are dealing with object, then we expect user to provide a template and tell the dropdown of\n     * each item should be handled\n     *\n     */\n    @ContentChild('itemTemplate')\n    itemTemplate: TemplateRef<any>;\n\n\n    /**\n     * Internal model used for embedded version.\n     */\n    model: SelectItem;\n\n\n    constructor(public env: Environment,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => BaseFormComponent))\n                protected parentContainer: BaseFormComponent)\n    {\n        super(env, parentContainer);\n    }\n\n    /**\n     * Todo: Put back the scrolling option once we decide so. Currently the requirements are\n     * show only 10 items max, no scrolling. Functionality commented out can show scrollbar with\n     * search filter.\n     */\n    ngOnInit()\n    {\n\n        if (this.isStandalone) {\n            super.ngOnInit();\n            super.registerFormControl(this.selection);\n\n        } else {\n            if (isPresent(this.name)) {\n                this.formControl = <FormControl> this.formGroup.controls[this.name];\n            }\n        }\n\n\n        // transform a value to PrimeNg Format, we are not really be using a label field only a\n        // value.\n        this.internalList = [];\n        // if (isPresent(this.noSelectionString)) {\n        //     this.internalList.push({\n        //         label: this.noSelectionString,\n        //         value: null\n        //     });\n        //\n        //     if (isBlank(this.selection)) {\n        //         this.selection = this.noSelectionString;\n        //     }\n        // }\n\n        if (isPresent(this.list) && this.list.length >= DropdownComponent.MaxNumShown) {\n\n            this.internalList = this.list.slice(0, DropdownComponent.MaxNumShown).map((item: any) =>\n            {\n                return {label: item.toString(), value: item};\n            });\n        } else if (isPresent(this.list)) {\n            this.internalList = this.list.slice(0).map((item: any) =>\n            {\n                return {label: item.toString(), value: item};\n            });\n        }\n    }\n\n\n    hasEmbeddedTemplate(): boolean\n    {\n        return isPresent(this.itemTemplate);\n    }\n\n    /**\n     * Check to prevent Empty item to be rendered\n     *\n     * todo: Report this on PrimeNg\n     *\n     */\n    itemExist(item: any)\n    {\n        return isPresent(item);\n    }\n\n\n    /**\n     * When dropdown list is more then defined constant MaxNumShown (10) automatically show filter\n     * input field\n     */\n    showFilter()\n    {\n        return false;\n        // return isPresent(this.list) && this.list.length > DropdownComponent.MaxNumShown;\n    }\n\n    /**\n     *\n     * Updates internal models of current selections and triggers onSelection event\n     *\n     */\n    onItemSelection(value: any)\n    {\n        this.selection = value.value;\n        this.onSelection.emit(value.value);\n\n        if (this.isStandalone) {\n            this.formControl.setValue(this.selection);\n            this.formControl.markAsDirty({onlySelf: true});\n        }\n\n        this.onModelChanged(value.value);\n    }\n\n    displayItem(item: any)\n    {\n        return isPresent(item) ? item.label : 'No Selection';\n    }\n\n    /**\n     * Internal. Please see ControlValueAccessor\n     *\n     */\n    writeValue(value: any)\n    {\n        if (!equals(value, this.selection)) {\n\n            this.selection = value;\n            this.formControl.setValue(value);\n        }\n\n    }\n\n}\n\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {DropdownComponent} from './dropdown.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {DropdownModule} from 'primeng/primeng';\nimport {AWCoreComponentModule} from '../../core/core.module';\n\n\n@NgModule({\n    declarations: [\n        DropdownComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        DropdownModule,\n        AWCoreComponentModule\n    ],\n    entryComponents: [\n        DropdownComponent\n    ],\n    exports: [\n        DropdownComponent,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    providers: []\n})\nexport class AWDropdownModule\n{\n}\n\n\n","import {Component, forwardRef, Inject, Input, Optional, SkipSelf} from '@angular/core';\nimport {CurrencyPipe} from '@angular/common';\nimport {NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Environment, equals, isBlank, isPresent, Value} from '@aribaui/core';\nimport {BaseFormComponent} from '../../core/base-form.component';\nimport {FormRowComponent} from '../../layouts/form-table/form-row/form-row.component';\n\n/**\n * Lightweight and configurable Currency component based on the ng bootstrap directive. This\n * component combines an input and currency code dropdown.\n *\n *\n * for more info please see class Doc of the:\n *  @see {@link currency/currency.component.ts}\n *\n *  ### Example\n *  ```\n *\n *  @Component({\n *    selector: 'amount' ,\n *    template: `\n *\n *      <aw-currency [money]=\"price\" [currencies]=\"currencies\" [name]=\"'currency'\">\n *      </aw-currency>\n *\n *    `\n *    })\n *    export class MyComponent\n *    {\n *        amount: number = 1000;\n *        currencies: string[] = ['USD', 'CNY', 'AUD', 'EUR', 'GBP'];\n *        currencyCode: string = this.currencies[0];\n *\n *        constructor ()\n *        {\n *        }\n *    }\n */\n\nexport const CURRENCY_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CurrencyComponent),\n    multi: true\n};\n\n\n@Component({\n    selector: 'aw-currency',\n    templateUrl: 'currency.component.html',\n    styleUrls: ['currency.component.scss'],\n    providers: [\n        CURRENCY_CONTROL_VALUE_ACCESSOR,\n        {provide: BaseFormComponent, useExisting: forwardRef(() => CurrencyComponent)}\n    ]\n\n})\nexport class CurrencyComponent extends BaseFormComponent\n{\n    /**\n     * Money object that encapsulates value, locale, currency code.\n     * If this object is set, values will be taken from this object\n     */\n    @Input()\n    money: Money;\n\n    /**\n     * Disable user to change Money's currency code and still\n     * allow user to edit Money's amount.\n     */\n    @Input()\n    readonlyCurrencyCode: boolean = false;\n\n    /**\n     * The currency that's selected for this currency field.\n     */\n    @Input()\n    currencySelection: string;\n\n    /**\n     *\n     * The number of decimal places used to format the money object.\n     *\n     */\n    @Input()\n    precision: number;\n\n    /**\n     * List of currencies that this currency widget support. The format for each entry should be\n     * [currency-code - description]\n     */\n    _currencies: any[];\n\n\n    /**\n     * The formatted currency value. Uses angular currencyPipe to format based on country code.\n     */\n    displayValue: string;\n\n    /**\n     * The currency pipe is used to format our money object.\n     */\n    currencyPipe: CurrencyPipe;\n\n    constructor(public env: Environment,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => FormRowComponent))\n                protected parentContainer: BaseFormComponent)\n    {\n        super(env, parentContainer);\n\n        // Initialize currencies.\n        this.initCurrencies();\n\n        this.currencyPipe = new CurrencyPipe(env.locale);\n\n        env.onLocaleChange.subscribe((locale: string) => {\n            this.currencyPipe = new CurrencyPipe(locale);\n\n            if (isPresent(this.money)) {\n                this.displayValue = this.formatCurrency(\n                    this.money.amount);\n            }\n        });\n    }\n\n    ngOnInit()\n    {\n\n        super.ngOnInit();\n        super.registerFormControl(this.money);\n\n        this.initCurrencies();\n\n        if (isBlank(this.currencySelection)) {\n            this.currencySelection = this._currencies[0];\n        }\n\n        // ready the money field if it exists. and override the existing values.\n        if (this.money) {\n            this.currencySelection = this.money.currency;\n        } else {\n            this.money = new Money(null, this.currencySelection);\n        }\n\n        this.displayValue = this.formatCurrency(this.money.amount);\n    }\n\n\n    private initCurrencies()\n    {\n        if (!this._currencies || this._currencies.length === 0) {\n            this._currencies = ['USD', 'CNY', 'AUD', 'EUR', 'GBP'];\n        }\n    }\n\n\n    /**\n     * Display the real value when the user clicks in the currency widget. Then he can modify the\n     * value without seeing the formatting.\n     *\n     * @param el\n     */\n    onFocus(el: any): void\n    {\n        if (isPresent(this.money) && isPresent(this.money.amount)) {\n            this.displayValue = this.money.amount.toString();\n        }\n    }\n\n    /**\n     * display the formatted currency value when the user navigates away.\n     * @param el\n     */\n    onBlur(el: any): void\n    {\n        this.money = this.money.clone({amount: Number(el.value)});\n        this.displayValue = this.formatCurrency(this.money.amount);\n\n        this.onModelChanged(this.money);\n    }\n\n    onSelection(currency: any): void\n    {\n        this.currencySelection = currency;\n        this.displayValue = this.formatCurrency(this.money.amount);\n\n    }\n\n\n    /**\n     * Function will check to see if currency is a valid number before formatting.\n     * @param val\n     */\n    private formatCurrency(val: any): any\n    {\n        if (!val || val.length === 0) {\n            return val;\n        }\n\n        if (isNaN(val)) {\n            return val;\n        }\n\n        let code = 'USD';\n        if (this.currencySelection) {\n            code = this.currencySelection;\n        }\n\n        this.money = this.money.clone({currency: this.currencySelection});\n\n        // By default, the precision is 2. For example, 10.23 USD.\n        let digits = '1.0-2';\n        // If precision is present, use it for format the money value for display.\n        if (isPresent(this.precision)) {\n            digits = '1.0-' + this.precision;\n        }\n        return this.currencyPipe.transform(val, code, 'symbol', digits);\n    }\n\n    getMoneyCurrency(): string {\n        if (isPresent(this.displayValue) && this.displayValue.length > 0) {\n            return this.currencySelection;\n        }\n        return '';\n    }\n\n    @Input()\n    get currencies(): any[]\n    {\n        return this._currencies;\n    }\n\n    set currencies(value: any[])\n    {\n        if (isPresent(value)) {\n            this._currencies = value;\n        }\n    }\n\n    /**\n     * Internal. Please see ControlValueAccessor\n     *\n     */\n    writeValue(value: any)\n    {\n        if ((value instanceof Money) && !equals(value, this.money)) {\n            this.money = value;\n            if (isPresent(this.money.currency)) {\n                this.currencySelection = this.money.currency;\n            }\n            this.displayValue = this.formatCurrency(this.money.amount);\n            this.formControl.setValue(this.money);\n        }\n    }\n}\n\n/**\n * Money object is represented as a value, locale, and currencyCode\n */\nexport class Money implements Value\n{\n    uniqueName: string;\n\n    constructor(public readonly amount: number = 0, public readonly currency: string = 'USD',\n                public readonly locale: string = 'en_US')\n    {\n    }\n\n\n    getTypes(): any\n    {\n        return {\n            amount: Number,\n            currency: String,\n            locale: String\n        };\n    }\n\n    className(): string\n    {\n        return 'Money';\n    }\n\n    $proto(): Money\n    {\n        return new Money(1, '23', '33');\n    }\n\n    toString(): string\n    {\n        return this.amount + ', locale: ' + this.locale + ', code:  ' + this.currency;\n    }\n\n\n    clone(data: { amount?: number, currency?: string, locale?: string } = {}): Money\n    {\n        return new Money(\n            isPresent(data.amount) ? data.amount : this.amount,\n            isPresent(data.currency) ? data.currency : this.currency,\n            isPresent(data.locale) ? data.locale : this.locale\n        );\n    }\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule, CurrencyPipe} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {DropdownModule, InputTextModule} from 'primeng/primeng';\nimport {CurrencyComponent} from './currency.component';\nimport {AWStringFieldModule} from '../string/string.module';\nimport {AWDropdownModule} from '../dropdown/dropdown.module';\nimport {AWCoreComponentModule} from '../../core/core.module';\n\n@NgModule({\n    declarations: [\n        CurrencyComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        InputTextModule,\n        DropdownModule,\n        AWDropdownModule,\n        AWStringFieldModule,\n        AWCoreComponentModule\n    ],\n    entryComponents: [\n        CurrencyComponent\n    ],\n    exports: [\n        CurrencyComponent,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    providers: [CurrencyPipe]\n})\nexport class AWCurrencyModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    Component,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    SkipSelf\n} from '@angular/core';\nimport {distinctUntilChanged} from 'rxjs/operators';\nimport {Environment, isBlank, isDate} from '@aribaui/core';\nimport {NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BaseFormComponent} from '../../core/base-form.component';\nimport {FormRowComponent} from '../../layouts/form-table/form-row/form-row.component';\n\n\n/**\n * Lightweight and configurable Date and Time component based on the primeng. This\n * component combines both date picker as well as time picker\n *\n *\n *  ### Example\n *  ```\n *\n *  @Component({\n *    selector: 'myTimer' ,\n *    template: `\n *    <aw-date-time [value]=\"date\" [editable]=\"editable\"  [name]=\"'dueDate'\">\n *    </aw-date-time>\n *\n *    `\n *    })\n *    export class MyTimmerComponet\n *    {\n *\n *        date: Date = new Date();\n *\n *\n *        constructor ()\n *        {\n *            this.date.setFullYear(2016 , 10 , 3);\n *            this.date.setHours(10 , 10 , 10);\n *        }\n *    }\n *\n * ```\n *\n * By default you will see date field and time field is hidden to show both you just do following:\n *\n *  ```\n *\n *  @Component({\n *    selector: 'myTimer' ,\n *    template: `\n *\n *    <aw-date-time [value]=\"date\"  [showTime]=\"showTime\" [editable]=\"editable\"  [name]=\"'bbdd'\">\n *    </aw-date-time>\n *\n *    `\n *    })\n *    export class MyTimmerComponet\n *    {\n *        date: Date = new Date();\n *        showTime = true;\n *\n *        constructor ()\n *        {\n *            this.date.setFullYear(2016 , 10 , 3);\n *            this.date.setHours(10 , 10 , 10);\n *        }\n *    }\n *\n * ```\n *\n *\n *\n */\n\n\nexport const DATETIME_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => DateAndTimeComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'aw-date-time',\n    templateUrl: 'date-and-time.component.html',\n    styleUrls: ['date-and-time.component.scss'],\n    providers: [\n        DATETIME_CONTROL_VALUE_ACCESSOR,\n        {provide: BaseFormComponent, useExisting: forwardRef(() => DateAndTimeComponent)}\n    ]\n\n})\nexport class DateAndTimeComponent extends BaseFormComponent {\n\n    static readonly NgTime12: string = 'hh:mm a';\n    static readonly NgTime24: string = 'HH.mm a';\n\n\n    /**\n     * Default value used to set the date and time picker\n     */\n    @Input()\n    value: Date;\n\n    /**\n     * Default date format pattern used if none is passed\n     *\n     */\n    @Input()\n    formatPattern: string = 'mm/dd/yy';\n\n\n    /**\n     * Special workaround as formatters in the primeNG and angular are different so until its\n     * fixed we need to keep this extra pattern.\n     */\n    @Input()\n    formatPatternNG: string = 'MM/dd/yy';\n\n\n    /**\n     * Shows and hides navigation bar with year and months selections\n     */\n    @Input()\n    showNavigation: boolean = false;\n\n\n    /**\n     * Year range displayed for the drop down.\n     */\n    @Input()\n    yearRange: string;\n\n    /**\n     * Shows and hides navigation bar with year and months selections\n     */\n    @Input()\n    showIcon: boolean = true;\n\n    /**\n     * Whether to show timepicker\n     */\n    @Input()\n    showTime: boolean = false;\n\n\n    /**\n     * Whether to show DatePicker. Even we can hide it. it should be for most of the case always\n     * true\n     */\n    @Input()\n    showDate: boolean = true;\n\n\n    /**\n     *\n     * Tells the date picker what format it should use when presenting time. When hourFormat is 12,\n     * it shows the AM, PM\n     *\n     */\n    @Input()\n    hourFormat: string = '24';\n\n    /**\n     * Triggers event when specific date is clicked inside DatePicker\n     *\n     */\n    @Output()\n    onChange: EventEmitter<Date> = new EventEmitter<Date>();\n\n    /**\n     * Set the date to highlight on first opening if the field is blank.\n     *\n     */\n    defaultDate: Date = new Date();\n\n    /**\n     * In case of Datetime we need to make sure the DateAndTime formatName is not propagated\n     * to Date field.\n     */\n    formatNameWithTime: string;\n\n\n    i18n: any;\n    timePlaceHolder: string = 'hh:ss';\n\n\n    constructor(public env: Environment,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => FormRowComponent))\n                protected parentContainer: BaseFormComponent) {\n        super(env, parentContainer);\n    }\n\n    ngOnInit() {\n\n        super.ngOnInit();\n        super.registerFormControl(this.value);\n\n        // default to dateTime pattern which is defined in resource files\n        if (this.hourFormat !== '12' && this.hourFormat !== '24') {\n            this.hourFormat = '24';\n        }\n\n        this.timePlaceHolder = (this.hourFormat === '12') ?\n            ` ${DateAndTimeComponent.NgTime12}` : ` ${DateAndTimeComponent.NgTime24}`;\n\n        this.formControl.valueChanges.pipe(distinctUntilChanged()).subscribe((val: Date) => {\n            this.value = val;\n            this.onModelChanged(this.value);\n        });\n\n        this.initTranslations();\n\n        this.env.onLocaleChange.subscribe((locale: string) => {\n            this.initTranslations();\n\n        });\n\n    }\n\n\n    /**\n     * Need to refactor this as this really get complicated trying to cover usecase with time\n     * and date and every format we have. We should probably have separate patterns for\n     * dates only and date + time\n     */\n    private initTranslations() {\n\n        this.formatNameWithTime = this.formatPattern;\n        if (!this.showDate) {\n            this.formatPatternNG = this.formatPattern += (this.hourFormat === '12') ?\n                ` ${DateAndTimeComponent.NgTime12}` : ` ${DateAndTimeComponent.NgTime24}`;\n\n        }\n\n        if (this.showTime) {\n            let timeStarts = this.formatPattern.indexOf('h');\n            if (timeStarts !== -1) {\n                this.formatNameWithTime = this.formatPattern.substring(0, timeStarts);\n            }\n            this.formatPatternNG += (this.hourFormat === '12') ?\n                ` ${DateAndTimeComponent.NgTime12}` : ` ${DateAndTimeComponent.NgTime24}`;\n        }\n\n\n        this.i18n = {\n            firstDayOfWeek: 0,\n            dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday',\n                'Saturday'],\n            dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            dayNamesMin: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n            monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',\n                'September', 'October', 'November', 'December'],\n            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct',\n                'Nov', 'Dec']\n        };\n\n    }\n\n\n    /**\n     * Fired when dates changes. Here we update  this.value - > date and also update value inside\n     * formController\n     *\n     */\n    onDateChange(event: any): void {\n\n        if (isBlank(event)) {\n            // throw some error ?\n            return;\n        }\n\n        this.value = isDate(event) ? event : new Date(event);\n\n        this.formControl.setValue(this.value, {onlySelf: false, emitEvent: true});\n        this.onModelChanged(this.value);\n        this.onChange.emit(this.value);\n    }\n\n    /**\n     * Internal. Please see ControlValueAccessor\n     *\n     */\n    writeValue(value: any) {\n        if (value !== this.value) {\n            this.value = value;\n            this.formControl.setValue(value);\n        }\n\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CalendarModule} from 'primeng/primeng';\nimport {DateAndTimeComponent} from './date-and-time.component';\nimport {AWStringFieldModule} from '../string/string.module';\n\n@NgModule({\n    declarations: [\n        DateAndTimeComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CalendarModule,\n        AWStringFieldModule\n    ],\n    entryComponents: [\n        DateAndTimeComponent\n    ],\n    exports: [\n        DateAndTimeComponent,\n        ReactiveFormsModule,\n        FormsModule\n    ]\n})\nexport class AWDateAndTimeModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component} from '@angular/core';\n\n/**\n * An dialog header area.\n *\n * See {@link DialogComponent} for more explanation.\n */\n@Component({\n    selector: 'aw-dialog-header',\n    template: '<ng-content></ng-content>'\n})\nexport class DialogHeaderComponent\n{\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component} from '@angular/core';\n\n/**\n * An dialog header area.\n *\n * See {@link DialogComponent} for more explanation.\n */\n@Component({\n    selector: 'aw-dialog-footer',\n    template: '<ng-content></ng-content>'\n})\nexport class DialogFooterComponent\n{\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, ContentChild, EventEmitter, Input, Output} from '@angular/core';\nimport {Environment, isPresent} from '@aribaui/core';\nimport {ModalContainer} from '../../core/modal-service/modal-container';\nimport {DialogHeaderComponent} from './dialog-header.component';\nimport {DialogFooterComponent} from './dialog-footer.component';\n\n/**\n * Dialog Component that provides the look and feel for a modal dialog. This component has three\n * sections: header, body, and footer. It can be used by itself or extended.\n *\n * There are three types of popup.\n *   1.  a regular dialog box that has header, body and footer. It's the most customizable.\n *   2.  a confirmation box is similar to a dialog box but has accept and reject action buttons.\n *   3.  a overlay, which is a very basic popup with what you put inside.\n *       It doesn't have header and footer.\n *\n * There are two ways to use any popup component.\n *   1.  Either directly by using component, aw-dialog, aw-confirmation or aw-overlay\n *   2.  or the ModalService  service.open(<DialogComponent>), service.close()\n *\n * Usage:\n *    1.  Using Dialog directly to display a modal popup. This usage is a quick way to show a\n * message to the user.\n *\n *             this.modalService.open<DialogComponent>( DialogComponent, {\n *                     title: 'My Popup Title',\n *                     body: 'My Popup Body'\n *              });\n *\n *\n *   2.   Use the component inside your template.\n *\n *          @Component({\n *                selector: 'aw-page' ,\n *                           template: `\n *                              <aw-dialog [(visible)]=\"display\" [modal]=\"true\"\n *                                        (onOpen)=\"openAction()\" (onClose)=\"closeAction()\">\n *\n *                                    <aw-dialog-header>Dialog Header</aw-dialog-header>\n *\n *                                     Dialog Body: Creating a dialog using the dialog component\n *\n *                                    <aw-dialog-footer>\n *                                      <aw-button [size]=\"'small'\" [style]=\"'primary'\"\n *                                                 (click)=\"close()\">OK</aw-button>\n *                                    </aw-dialog-footer>\n *                              </aw-dialog>\n *\n *                          <aw-button [size]=\"'small'\" (click)=\"open()\">Open Dialog</aw-button>\n *                  `\n *         export class MyPageComponent implements OnInit {\n *\n *                     display: boolean = false;\n *\n *                     dialogAction: string;\n *\n *                     constructor(private modalService: ModalService) {\n *                          super();\n *                       }\n *                     ngOnInit() { }\n *\n *                     open() {\n *                        this.display = true;\n *                     }\n *\n *                     openAction()  {\n *                        this.dialogAction = \"open\";\n *                      }\n *       }\n *\n *\n */\n@Component({\n    selector: 'aw-dialog',\n    templateUrl: 'dialog.component.html',\n    styleUrls: ['dialog.component.scss']\n})\nexport class DialogComponent extends ModalContainer\n{\n    /**\n     * Title for the Dialog.  if title and 'TitleTemplate' are both set, titleTemplate takes\n     * precedence.\n     */\n    @Input()\n    title: string;\n\n    /**\n     * Body section for Dialog. Caller should use either the body string, or content projection\n     * to add values to the dialog. If both are used, they will both show up.\n     */\n    @Input()\n    body: string;\n    /**\n     * support two way data binding on visible property.\n     */\n    @Output()\n    visibleChange: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * whether this dialog blocks the rest of the page or not when displayed.\n     */\n    @Input()\n    modal: boolean = true;\n\n    /**\n     * Whether there's an x at the top right that makes the dialog closable.\n     */\n    @Input()\n    closable: boolean = true;\n\n    /**\n     * Target element to attach the dialog. \"body\" or local ng-template variable are valid.\n     */\n    @Input()\n    appendTo: any;\n\n    /**\n     * Event fired when dialog is closed.\n     */\n    @Output()\n    onClose: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Event fired when the dialog is opened.\n     */\n    @Output()\n    onOpen: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Header component. Usually contains the title.\n     */\n    @ContentChild(DialogHeaderComponent) header: DialogHeaderComponent;\n\n    /**\n     * Dialog footer. Usually contains buttons\n     */\n    @ContentChild(DialogFooterComponent) footer: DialogFooterComponent;\n\n\n    constructor(public env: Environment)\n    {\n        super(env);\n\n        this.width = 300;\n        this.height = 'auto';\n    }\n\n    /**\n     * Open this dialog.\n     */\n    open()\n    {\n        this.visible = true;\n        this.onOpen.emit();\n\n        // visible is a 2-way binding variable.\n        this.visibleChange.emit(true);\n    }\n\n    /**\n     * close the dialog\n     */\n    close()\n    {\n        this.visible = false;\n        this.onClose.emit();\n\n        // Important to make sure change is set on parent binding.\n        // Otherwise, the variable and dialog open/close state can be out\n        // of sync and we wouldn't trigger change detection.\n        this.visibleChange.emit(false);\n    }\n\n    /**\n     * Does this dialog have header.\n     *\n     */\n    hasHeader(): boolean\n    {\n        return isPresent(this.header);\n    }\n\n    /**\n     * Does this dialog have footer.\n     *\n     */\n    hasFooter(): boolean\n    {\n        return isPresent(this.footer);\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {AWCoreComponentModule} from '../../core/core.module';\nimport {DialogComponent} from './dialog.component';\nimport {DialogHeaderComponent} from './dialog-header.component';\nimport {DialogFooterComponent} from './dialog-footer.component';\nimport {ModalComponent} from '../../core/modal-service/modal/modal.component';\nimport {DialogModule} from 'primeng/dialog';\n\n@NgModule({\n    declarations: [\n        DialogComponent,\n        DialogHeaderComponent,\n        DialogFooterComponent\n    ],\n    imports: [\n        CommonModule,\n        AWCoreComponentModule,\n        DialogModule\n    ],\n    entryComponents: [\n        ModalComponent,\n        DialogComponent,\n        DialogHeaderComponent,\n        DialogFooterComponent\n    ],\n    exports: [\n        DialogComponent,\n        DialogHeaderComponent,\n        DialogFooterComponent,\n        AWCoreComponentModule\n    ],\n    providers: []\n})\nexport class AWDialogModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    Component,\n    forwardRef,\n    Inject,\n    Input,\n    Optional,\n    SkipSelf,\n    ViewContainerRef\n} from '@angular/core';\nimport {\n    Environment,\n    equals,\n    FieldPath,\n    isArray,\n    isBlank,\n    isFunction,\n    isPresent,\n    ListWrapper\n} from '@aribaui/core';\nimport {ChooserSelectionState} from '../chooser/chooser-selection-state';\nimport {ChooserState} from '../chooser/chooser-state';\nimport {BaseFormComponent} from '../../core/base-form.component';\nimport {ChooserDataSource} from '../chooser/chooser-data-source';\nimport {DATA_SOURCE} from '../../core/data/data-source';\nimport {DataFinders, QueryType} from '../../core/data/data-finders';\nimport {DataProviders} from '../../core/data/data-providers';\n\n\n/**\n * Convenient wrapper class around controls such as radiobuttons, dropdown, checkboxes,\n * Chooser. The type of the chooser may be determined dynamically based on the number of items in\n * the data source list, or can be specified explicitly via the \"type\" binding.\n *\n *\n *\n */\n@Component({\n    selector: 'aw-generic-chooser',\n    templateUrl: 'generic-chooser.component.html',\n    styleUrls: ['generic-chooser.component.scss'],\n    providers: [\n        {provide: BaseFormComponent, useExisting: forwardRef(() => GenericChooserComponent)},\n        {provide: DATA_SOURCE, useClass: ChooserDataSource, deps: [DataProviders, DataFinders]}\n    ]\n\n})\nexport class GenericChooserComponent extends BaseFormComponent\n{\n\n    /**\n     * Ordered list of items assignable to the key of the object\n     */\n    @Input()\n    list: any[];\n\n    /**\n     * The object this control is being assigned to.\n     */\n    @Input()\n    object: any;\n\n\n    /**\n     * The key field path this control is being assigned to.\n     */\n    @Input()\n    key: string;\n\n\n    /**\n     * Can be used in place of LIST binding to retrieve a list based on the ChoiceSource\n     *\n     */\n    @Input()\n    destinationClass: string;\n\n\n    /**\n     * Used when retrieving choiceSource by destination class and this are extra params that can be\n     * used to narrow the matching or to pass parameters into ChoiceSource provider\n     */\n    @Input()\n    choiceProviderParams: Map<string, any>;\n\n\n    /**\n     *  Is this a List property, or a to-one.\n     */\n    @Input()\n    multiselect: boolean = false;\n\n    /**\n     *  The style of chooser to use (Radio, Checkbox, Dropdown, Chooser)\n     *  Defaults based on cardinality of the list and whether it's multiSelect.\n     */\n    @Input()\n    type: string;\n\n    /**\n     * Support custom key. in order to make this work we need to introduce custom <templates> for\n     * all this chooser types\n     */\n    @Input()\n    displayKey: string;\n\n    // /**\n    //  *  Should we attempt a match as they type (against the full list)\n    //  */\n    // @Input()\n    // allowFullMatchOnInput: boolean;\n\n    /**\n     * String rendered as first value in the dropdown which let the user to make 'no selection'\n     * from available list of values. When this option is active and use make this selection we\n     * save a NULL value\n     */\n    @Input()\n    noSelectionString: string;\n\n\n    /**\n     * Generic Chooser works directly with object and its references and we need to create this\n     * keypath to be able to set/get value from target or parent object\n     */\n    keyPath: FieldPath;\n\n\n    constructor(public env: Environment, private _viewContainer: ViewContainerRef,\n                @Inject(DATA_SOURCE) public dataSource: ChooserDataSource,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => BaseFormComponent))\n                protected parentContainer: BaseFormComponent)\n    {\n        super(env, parentContainer);\n    }\n\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n\n        if (isBlank(this.object)) {\n            this.object = (<any>this._viewContainer.injector).view.context;\n        }\n        this.keyPath = new FieldPath(this.key);\n        let defaultDataProvider = null;\n\n        if (isPresent(this.list)) {\n            defaultDataProvider = this.dataSource.dataProviders.find(this.list);\n        } else {\n            defaultDataProvider = this.dataSource.dataProviders.find(this.destinationClass);\n        }\n\n        let projectedSize = defaultDataProvider.expectedCount(this.choiceProviderParams);\n        this.initType(projectedSize);\n\n        if (this.type === 'Chooser') {\n\n            this.dataSource.init({\n                dataProvider: defaultDataProvider,\n                queryType: QueryType.FullText,\n                lookupKey: this.displayKey,\n                state: new ChooserState(new GCChooserState(this), this.multiselect),\n                multiselect: this.multiselect\n            });\n        } else {\n\n            // do we need to read this value in async?\n            this.list = defaultDataProvider.data();\n        }\n        super.registerFormControl(this.selection);\n        this.validateRequired();\n\n        if (isBlank(this.selection)) {\n            // this.noSelectionString = this.i18n.instant('Widgets.gchooser.noSelString');\n            this.noSelectionString = 'Select a Item';\n        }\n    }\n\n    /**\n     *\n     * When @Input type is not passed we try to guess and select the best type for current data\n     *\n     */\n    private initType(projectedSize: number)\n    {\n        if (isBlank(this.type)) {\n            if (this.multiselect) {\n                this.type = (projectedSize <= 0 || projectedSize > 8) ? 'Chooser' : 'Checkbox';\n            } else {\n                this.type = (projectedSize <= 0 || projectedSize > 20) ? 'Chooser'\n                    : (projectedSize < 6) ? 'Radio' :\n                        'Dropdown';\n            }\n        }\n    }\n\n    /**\n     * There are certain properties which are required by this component. As already mentioned\n     * above GenericChooser works with references and thefore two key properties are object and key\n     * so we can access an object\n     *\n     *\n     */\n    private validateRequired()\n    {\n        if (isBlank(this.object)) {\n            throw Error('Cannot continue without a object');\n        }\n\n        if (isBlank(this.key)) {\n            throw Error('Cannot continue without a key binding');\n        }\n        if (isBlank(this.list) && isBlank(this.destinationClass)) {\n            throw Error('Cannot continue without having either list of values or destinationClass');\n        }\n\n        if (isPresent(\n                this.type) &&\n            (this.type !== 'Radio' && this.type !== 'Checkbox' && this.type !== 'Dropdown' &&\n                this.type !== 'Chooser')) {\n            throw Error('Cannot instantiate GenericChooser  - invalid type');\n        }\n\n        if (isBlank(this.displayKey)) {\n            this.displayKey = 'toString';\n        }\n    }\n\n    /**\n     *\n     * Used when displaying value both from primitive type as well complex object. If you want to\n     * control how item is displayed you can provide display key, which is can be a  method or\n     * property of the object you are displaying.\n     *\n     * Todo: think about formatters as well\n     *\n     */\n    displayValue(item: any): string\n    {\n        if (isBlank(this.displayKey)) {\n            return item;\n        }\n        let fieldValue = FieldPath.getFieldValue(item, this.displayKey);\n        if (isFunction(fieldValue)) {\n            return fieldValue.call(item);\n        }\n        return fieldValue;\n    }\n\n\n    /**\n     *  Retrieve a current value from the parent/target object\n     *\n     */\n    get selection(): any\n    {\n        return this.keyPath.getFieldValue(this.object);\n    }\n\n    /**\n     *  set value back to the object\n     *\n     */\n    set selection(value: any)\n    {\n        this.keyPath.setFieldValue(this.object, value);\n    }\n\n\n    onSelection(value: any): void\n    {\n        this.selection = value;\n\n        this.formControl.setValue(this.selection);\n        this.formControl.markAsDirty();\n\n    }\n}\n\n/**\n * GenericChooser implementation of the ChooserSelectionState which is used when Type = Chooser.\n *\n */\nexport class GCChooserState extends ChooserSelectionState\n{\n\n    constructor(private gChooser: GenericChooserComponent)\n    {\n        super();\n    }\n\n    setSelectionState(selection: any, selected: boolean): void\n    {\n        if (selected === this.isSelected(selection)) {\n            return;\n        }\n\n        if (this.gChooser.multiselect) {\n\n            // Check if we can implement smarter and more generic way how we use it in java\n            // RelationshipField.addTo(_object, _keyPath, selection);\n\n            let multiRel: Array<any> = this.gChooser.keyPath.getFieldValue(this.gChooser.object);\n            if (isBlank(multiRel)) {\n                multiRel = [];\n\n            } else if (isPresent(multiRel) && !isArray(multiRel)) {\n                throw new Error('I can not store multiselect value into non-array object');\n            }\n\n            if (selected) {\n                multiRel.push(selection);\n                this.gChooser.selection = multiRel;\n\n            } else {\n                ListWrapper.removeIfExist(multiRel, selection);\n            }\n\n        } else {\n            if (!selection) {\n                selection = null;\n            }\n            this.gChooser.selection = selection;\n\n        }\n    }\n\n    selectedObject(): any\n    {\n        if (this.gChooser.multiselect) {\n            let objects = this.selectedObjects();\n            return (isBlank(objects) || ListWrapper.isEmpty(objects)) ? null : ListWrapper.last(\n                objects);\n        }\n        return this.gChooser.selection;\n    }\n\n    selectedObjects(): Array<any>\n    {\n        let selection = this.gChooser.selection;\n        if (this.gChooser.multiselect && isBlank(selection)) {\n            selection = [];\n        }\n        return (this.gChooser.multiselect && isArray(selection)) ? selection : [selection];\n    }\n\n    isSelected(selection: any): boolean\n    {\n        if (this.gChooser.multiselect) {\n            return ListWrapper.containsComplex(this.selectedObjects(), selection);\n        }\n        let curValue = this.selectedObject();\n        return equals(curValue, selection);\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport {\n    AfterContentInit,\n    Component,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    SkipSelf\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Environment, isPresent} from '@aribaui/core';\nimport {BaseFormComponent} from '../../core/base-form.component';\nimport {FormRowComponent} from '../../layouts/form-table/form-row/form-row.component';\n\n\n/**\n * Wrapper class for RadioButton component providing convenient way to to render RadioButton Groups\n *\n *\n * ### Example\n *\n *\n * ```\n *      @Component({\n *          selector: 'gender-selector' ,\n *          template: `\n *              <aw-radiobutton-list [list]=\"rbListValues\" [layout]=\"layout\"\n *     [selection]=\"selectedValue\" [name]=\"'name'\">\n *               </aw-radiobutton-list>\n *      `\n *      })\n *      export class GenderSelectorComponent\n *      {\n *          rbListValues: string[] = ['male' , 'female' , 'other'];\n *          selectedValue: string = 'other';\n *          layout: string = 'stacked';\n *\n *\n *          formGroup: FormGroup = new FormGroup({});\n *\n *\n *          onCBClick (event): void\n *          {\n *              console.log('onCBClick = ' + event);\n *          }\n *\n *      }\n *\n * ```\n */\n\n\nexport const RB_LIST_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioButtonListComponent),\n    multi: true\n};\n\n\n@Component({\n    selector: 'aw-radiobutton-list',\n    templateUrl: 'radio-button-list.component.html',\n    styleUrls: ['radio-button-list.component.scss'],\n    providers: [\n        RB_LIST_CONTROL_VALUE_ACCESSOR,\n        {provide: BaseFormComponent, useExisting: forwardRef(() => RadioButtonListComponent)}\n    ]\n\n})\nexport class RadioButtonListComponent extends BaseFormComponent implements AfterContentInit\n{\n\n    /**\n     * LIst of values used to render the radio button group\n     */\n    @Input()\n    list: any[];\n\n\n    /**\n     * Identifies which radio buttons is selected when rendered\n     */\n    @Input()\n    selection: any;\n\n\n    /**\n     * special expression to format label\n     */\n    @Input()\n    labelFormatter: (value: any) => string;\n\n\n    /**\n     *\n     * Fires an event when radio button is selected\n     *\n     */\n    @Output()\n    onSelection: EventEmitter<any> = new EventEmitter<any>();\n\n\n    /**\n     * internal model to listen for radio value changes\n     *\n     */\n    model: any;\n\n    constructor(public env: Environment,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => FormRowComponent))\n                protected parentContainer: BaseFormComponent)\n    {\n        super(env, parentContainer);\n    }\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n\n        if (isPresent(this.selection)) {\n            this.model = 0;\n        }\n\n        this.updateModel(this.selection);\n        this.onModelChanged(this.selection);\n        this.registerFormControl(this.selection);\n    }\n\n\n    /**\n     * Label is extracted into a method so in the future we can play how we want to display the\n     * value. Since I want to support formatters for each components we might have a chance to\n     * decide how the label will look like.\n     *\n     */\n    labelValue(item: any): string\n    {\n        if (isPresent(this.labelFormatter)) {\n            return this.labelFormatter(item);\n        }\n        return item.toString();\n    }\n\n\n    /**\n     * In this version of checkboxes we still expect only primitive types. Keep this functionality\n     * in extra method so we can work with it even now we just return the same value back\n     *\n     *\n     */\n    value(item: any): any\n    {\n        return item;\n    }\n\n\n    /**\n     *\n     * On NGModel change retrieve actual record based on the INDEX and propagate it to both\n     * ngModel as well as FormGroup.\n     *\n     */\n    onChange(event: any)\n    {\n        let updatedModel: any = this.list[this.model];\n\n        this.onSelection.emit(updatedModel);\n        this.onModelChanged(updatedModel);\n        this.formControl.setValue(updatedModel, {\n            emitEvent: true,\n            emitViewToModelChange: false\n        });\n    }\n\n\n    /**\n     * Since we might be dealing with complex object store only INDEX number in the model.\n     *\n     */\n    updateModel(souceItem: any): void\n    {\n        let index = this.list.findIndex((elem: any) =>\n        {\n            return souceItem === elem;\n        });\n        this.model = index === -1 ? 0 : index;\n    }\n\n    ngAfterContentInit(): void\n    {\n        let updatedModel: any = this.list[this.model];\n        this.formControl.setValue(updatedModel, {\n            emitEvent: true,\n            emitViewToModelChange: false\n        });\n        // this.cd.detectChanges();\n\n    }\n\n    /**\n     * Internal. Please see ControlValueAccessor\n     *\n     */\n    writeValue(value: any)\n    {\n        if (value !== this.value) {\n            let newModel = value;\n            this.updateModel(newModel);\n        }\n\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport {\n    Component,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    SkipSelf\n} from '@angular/core';\nimport {FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Environment} from '@aribaui/core';\nimport {BaseFormComponent} from '../../core/base-form.component';\nimport {FormRowComponent} from '../../layouts/form-table/form-row/form-row.component';\n\n\n/**\n *\n * Implements standard HTML radio button on top of PrimeNG with ariba styling\n *\n * ### Example\n *\n * 1. Basic usage using ngModel pre-selected first radio\n *\n *  ```ts\n *\n *      @Component({\n *          selector: 'demo-comp',\n *          template: `\n *              <aw-radiobutton [name]=\"'color'\" [value]=\"'red'\" [label]=\"'Red'\"\n *                             [(ngModel)]=\"model\">\n *             </aw-radiobutton>\n *              <aw-radiobutton [name]=\"'color'\" [value]=\"'blue'\" [label]=\"'Blue'\"\n *                      [(ngModel)]=\"model\">\n *              </aw-radiobutton>\n *      `\n *      })*\n *      class BasicWithNgModelComponent\n *      {\n *          model: string[] = ['red'];\n *\n *          constructor()\n *          {\n *          }\n *      }\n *\n *  ```\n *\n *\n * 2. Basic usage with formGroup\n *\n *\n * ```ts\n *       @Component({\n *           selector: 'demo-comp',\n *           template: `\n *          <div [formGroup]=\"env.currentForm\">\n *               <aw-radiobutton [name]=\"'color2'\" [value]=\"'red'\" [label]=\"'Red'\"\n *               (onChange)=\"onChange($event)\">\n *               </aw-radiobutton>\n *               <aw-radiobutton [name]=\"'color2'\" [value]=\"'blue'\" [label]=\"'Blue'\"\n *               (onChange)=\"onChange($event)\">\n *               </aw-radiobutton>\n *\n *       </div>\n *       `\n *       })\n *       class BasicWithFormGroupComponent implements OnInit\n *       {\n *           model: string = 'blue';\n *\n *           constructor(public env: Environment)\n *           {\n *           }\n *\n *           ngOnInit(): void\n *           {\n *               this.env.currentForm = new FormGroup({});\n *               this.env.currentForm.registerControl('color2', new FormControl(this.model));\n *           }\n *\n *\n *           onChange(event: any): void\n *           {\n *               this.modelSet = event;\n *           }\n *\n *       }\n *  ````\n *\n *\n *\n *\n */\nexport const RAB_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioButtonComponent),\n    multi: true\n};\n\n\n@Component({\n    selector: 'aw-radiobutton',\n    templateUrl: 'radio-button.component.html',\n    styleUrls: ['radio-button.component.scss'],\n\n    providers: [\n        RAB_CONTROL_VALUE_ACCESSOR,\n        {provide: BaseFormComponent, useExisting: forwardRef(() => RadioButtonComponent)}\n    ]\n})\nexport class RadioButtonComponent extends BaseFormComponent\n{\n\n    /**\n     *\n     * A value associated with this radio\n     *\n     */\n    @Input()\n    value: any = '';\n\n\n    /**\n     * Label to be used when rendering a radio\n     */\n    @Input()\n    label: string;\n\n\n    /**\n     * Trigger click event with currrent selected value\n     *\n     */\n    @Output()\n    onChange: EventEmitter<any> = new EventEmitter();\n\n\n    /**\n     * Internal model to comunicate with primeNg Radio\n     */\n    model: any;\n\n\n    constructor (public env: Environment,\n                 @SkipSelf() @Optional() @Inject(forwardRef(() => FormRowComponent))\n                 protected parentContainer: BaseFormComponent)\n    {\n        super(env, parentContainer);\n    }\n\n    ngOnInit ()\n    {\n        super.ngOnInit();\n        if (this.isStandalone) {\n            super.registerFormControl(this.value);\n            this.model = this.formControl.value;\n            this.onModelChanged(this.model);\n\n        } else {\n            this.formControl = <FormControl> this.formGroup.controls[this.name];\n        }\n    }\n\n    /**\n     * Called when radio is clicked. Not using PrimeNG click event as it is fired before\n     * the model is changed. Therefore need to listen on (ngModelChange)\n     *\n     */\n    onModelChange (newVal: any): void\n    {\n        this.onModelChanged(this.model);\n        if (this.isStandalone) {\n            this.formControl.setValue(this.model, {emitEvent: true});\n        }\n        this.onChange.emit(this.model);\n    }\n\n    /**\n     * Internal. Please see ControlValueAccessor\n     *\n     */\n    writeValue (value: any)\n    {\n        if (value !== this.model) {\n            this.model = value;\n            if (this.isStandalone) {\n                this.formControl.setValue(this.model, {emitEvent: true});\n            }\n\n            this.onModelChanged(this.model);\n        }\n    }\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {RadioButtonComponent} from './radio-button.component';\nimport {RadioButtonModule} from 'primeng/primeng';\n\n\n@NgModule({\n    declarations: [\n        RadioButtonComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RadioButtonModule\n    ],\n    entryComponents: [\n        RadioButtonComponent\n    ],\n    exports: [\n        RadioButtonComponent,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    providers: []\n})\nexport class AWRadioButtonModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {RadioButtonListComponent} from './radio-button-list.component';\nimport {AWRadioButtonModule} from '../radio-button/radio-button.module';\n\n\n@NgModule({\n    declarations: [\n        RadioButtonListComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        AWRadioButtonModule\n    ],\n    entryComponents: [\n        RadioButtonListComponent\n    ],\n    exports: [\n        RadioButtonListComponent,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    providers: []\n})\nexport class AWRadioButtonListModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {AWCoreComponentModule} from '../../core/core.module';\nimport {GenericChooserComponent} from './generic-chooser.component';\nimport {AWCheckBoxListModule} from '../check-box-list/check-box-list.module';\nimport {AWChooserModule} from '../chooser/chooser.module';\nimport {AWRadioButtonListModule} from '../radio-button-list/radio-button-list.module';\nimport {AWDropdownModule} from '../dropdown/dropdown.module';\n\n\n@NgModule({\n    declarations: [\n        GenericChooserComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        AWCoreComponentModule,\n        AWDropdownModule,\n        AWCheckBoxListModule,\n        AWChooserModule,\n        AWRadioButtonListModule\n    ],\n    entryComponents: [\n        GenericChooserComponent\n    ],\n    exports: [\n        ReactiveFormsModule,\n        FormsModule,\n        GenericChooserComponent\n    ]\n})\nexport class AWGenericChooserModule\n{\n}\n\n\n","import {Entity, isBlank, isEntity, isPresent, ListWrapper} from '@aribaui/core';\nimport {Injectable} from '@angular/core';\nimport {OutlineForComponent, OutlineNode} from './outline-for.component';\n\n/**\n * OutlineState is the key gluing part for the OutlineFor and OutlineController components. It\n * holds all important information for the current outline tree and manages expansion states in form\n * of so called expansionPath and expansionStates\n *\n * We need to have a way how to work with generic data structure in order not to hold UI specific\n * information on the domain object model just like we had it before, where we had an interface\n * called OutlineNode, with fields (expanded, selected, etc.. )\n *\n *\n * `expansionPath`: Holds an array of currently selected and expanded nodes. This is filled by\n * OutlineController.\n *\n *\n * If we are dealing with Entity or anything that has identity then we have easier situation as we\n * can ask for ID and it is more efficient for serialization\n */\n@Injectable()\nexport class OutlineState\n{\n    /**\n     * Array of currently selected and expanded nodes\n     *\n     */\n    private _expansionPath: any[];\n\n    /**\n     * When `allowSelection` is enabled on OutlineControl it saved currently selected item to be\n     * able later on apply some styling and broadcast this selection outside of the component.\n     */\n    selectedItem: any;\n\n    /**\n     *\n     * Maps object reference to boolean values, where TRUE means EXPANDED, FALSE collapsed\n     *\n     */\n    expansionStates: Map<any, boolean>;\n\n\n    /**\n     *\n     * When outline is rendered for first time or re-rendered and we set default value for the\n     * expansionStates. This way we can pretty easily execute CollapseAll, ExpandAll\n     *\n     */\n    isExpandedAll: boolean = false; // collapsed\n\n    /**\n     *\n     * Holds current level during tree node rendering so we can apply correct indentation\n     *\n     */\n    currentLevel: number = -1;\n\n    /**\n     * Used during a toggle action to record current selection path.\n     *\n     */\n    currentPath: any[];\n\n\n    /**\n     * Globally shared property\n     */\n    outlineFor: OutlineForComponent;\n\n\n    constructor ()\n    {\n        this.expansionStates = new Map();\n    }\n\n    /**\n     * For the collapseAll and expandAll we are using simple mechanism where we clean up all\n     * selection and then set the global expand state, this whey isExpand method returns the same\n     * state for all items\n     */\n    collapseAll (): void\n    {\n        if (isPresent(this.outlineFor) &&\n            this.outlineFor.isTreeModelFormat()) {\n\n            // for this case we collapse all but root nodes\n            if (this.outlineFor.pushRootSectionOnNewLine) {\n\n                this.outlineFor.list.forEach((item: OutlineNode) =>\n                {\n                    this.updateNodes(item.children || [], false);\n                });\n            } else {\n                this.updateNodes(this.outlineFor.list || [], false);\n            }\n\n        } else {\n            this.expansionStates.clear();\n        }\n        this.isExpandedAll = false;\n    }\n\n    expandAll (): void\n    {\n        if (isPresent(this.outlineFor) &&\n            this.outlineFor.isTreeModelFormat()) {\n            this.updateNodes(this.outlineFor.list, true);\n\n        } else {\n            this.expansionStates.clear();\n        }\n        this.isExpandedAll = true;\n    }\n\n\n    get expansionPath (): any[]\n    {\n        if (isBlank(this._expansionPath)) {\n            this._expansionPath = [];\n        }\n        return this._expansionPath;\n    }\n\n\n    set expansionPath (value: any[])\n    {\n        this._expansionPath = value;\n\n        if (isBlank(this._expansionPath)) {\n            return;\n        }\n        this._expansionPath.forEach((item: any) =>\n        {\n            this.setExpansionState(item, true);\n        });\n    }\n\n\n    toggleExpansion (currentPath: any[], children?: any[]): void\n    {\n\n        if (isBlank(currentPath)) {\n            return;\n        }\n        let item = ListWrapper.last(currentPath);\n        let itemChildren = children || [];\n        let newState = !this.isExpanded(item);\n        this.setExpansionState(item, newState);\n\n        if (!newState) {\n            ListWrapper.removeLast(currentPath);\n            this.updateNodes(itemChildren, newState);\n        }\n\n        this.setExpansionPath(currentPath);\n    }\n\n    updateNodes (nodes: any[], newState: boolean): void\n    {\n        nodes.forEach((child: any) =>\n        {\n            let items = this.outlineFor.childrenForItem(child);\n            if (isPresent(items) && items.length > 0) {\n                this.updateNodes(items, newState);\n            }\n            this.setExpansionState(child, newState);\n        });\n    }\n\n    setExpansionState (item: any, isExpanded: boolean): void\n    {\n        // Even for tree mode format save the state so we can use it later on in case object\n        // references gets meesed up\n        if (this.outlineFor &&\n            this.outlineFor.isTreeModelFormat()) {\n            (<OutlineNode>item).isExpanded = isExpanded;\n        } else {\n            let key = this.itemToKey(item);\n            if (isExpanded === this.isExpandedAll) {\n                this.expansionStates.delete(key);\n            } else {\n                this.expansionStates.set(key, (isExpanded) ? true : false);\n            }\n        }\n    }\n\n    /**\n     * To improve state persisting lets check if we are dealing with an Object that has Identity\n     * so we can extract an ID otherwise use object to compare by reference\n     *\n     *\n     */\n    private itemToKey (item: any): string\n    {\n        return isEntity(item) ? (<Entity>item).identity() : item;\n    }\n\n\n    setExpansionPath (items: any[]): void\n    {\n        this.expansionPath = items;\n\n        items.forEach((node: any) =>\n        {\n            this.setExpansionState(node, true);\n        });\n    }\n\n    isExpanded (item: any): boolean\n    {\n        if (isPresent(this.outlineFor) &&\n            this.outlineFor.isTreeModelFormat()) {\n            return (<OutlineNode>item).isExpanded;\n        } else {\n            let key = this.itemToKey(item);\n            if (!this.expansionStates.has(key)) {\n                return this.isExpandedAll;\n            }\n            return this.expansionStates.get(key);\n        }\n    }\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    Component,\n    ContentChild,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnInit,\n    Output,\n    TemplateRef,\n    ViewChild,\n    ViewContainerRef\n} from '@angular/core';\nimport {animate, AnimationBuilder, state, style, transition, trigger} from '@angular/animations';\nimport {assert, Environment, Identity, isBlank, isPresent, ListWrapper} from '@aribaui/core';\nimport {BaseComponent} from '../../core/base.component';\nimport {OutlineState} from './outline-state';\n\n\n/**\n * This interface represent concrete tree structure for the outline tree mode\n */\nexport interface OutlineNode extends Identity\n{\n    /**\n     * Reference to parent node.\n     */\n    parent: OutlineNode;\n\n    /**\n     * Node's children. Even its a field it can be implemented lazily using getter where a target\n     * object does not implement this as a public field but a getter with control over the\n     * retrieved list\n     */\n    children: OutlineNode[];\n\n    /**\n     * Different states for outline Node\n     *\n     * isExpanded: boolean;= moving out as this is managed by expansionstate.\n     */\n    isExpanded: boolean;\n    isSelected: boolean;\n    isMatch?: boolean;\n    readonly?: boolean;\n    type?: string;\n    draggable?: boolean;\n    droppable?: boolean;\n    visible?: boolean;\n\n}\n\n\n/**\n *\n * Checks type for OutlineNode\n *\n */\nexport function isOutlineNode(node: any): node is OutlineNode\n{\n    return isPresent(node) && isPresent((<OutlineNode>node))\n        && isPresent((<OutlineNode>node).parent)\n        && isPresent((<OutlineNode>node).children);\n}\n\n\n/**\n * Currently outline supports only two modes free, where application is responsible to retrieve\n * children for each node and tree with above OutlineNode structure\n */\nexport type ModelFormat = 'free' | 'tree';\n\n\n/**\n *\n * OutlineForComponent is like ngFor, but for hierarchical (outline/tree) structures -- i.e. in\n * those cases where an item may have children.\n *\n *\n * It uses outline `<aw-outline-control>` to provide expanding functionality, indentation\n * and other things.\n *\n *\n * This component has minimal styling to make sure it can be changed easily.\n *\n * ### Example rendering tree section, where based on the type we format the out plus\n * for the main root section we always render little popup menu.\n *\n * ```\n *\n *   <aw-outline-for [list]=\"list\" [hasChildren]=\"hasChildren\">\n *\n *       <ng-template #outline let-item>\n *\n *           <div class=\"my-section\">\n *               <div class=\"outline\">\n *                   <aw-outline-control>\n *                       <ng-container [ngSwitch]=\"item.type\">\n *                           <ng-template [ngSwitchCase]=\"'text'\">\n *                               <div class=\"as-paragraf\">\n *                                   {{item?.content}}\n *                               </div>\n *                           </ng-template>\n *\n *\n *                           <ng-template ngSwitchDefault>\n *                               {{item?.content}}\n *                           </ng-template>\n *\n *\n *                       </ng-container>\n *\n *\n *                   </aw-outline-control>\n *               </div>\n *\n *               <div class=\"filters\" *ngIf=\"item.type === 'section'\" >\n *\n *                   <aw-hover-card [linkTitle]=\"'Filter Items'\">\n *                       <aw-list [list]=\"filterItems\" [borderless]=\"true\"></aw-list>\n *                   </aw-hover-card>\n *\n *               </div>\n *           </div>\n *     </ng-template>`\n *   </aw-outline-for>\n *\n * ```\n *\n *\n * We can use it also in embedded mode where we use the `awOutlineFor` directive\n *\n * ## Example\n *\n *\n * ````\n *  <table  class=\"tree-table\" >\n *      <thead>\n *          <tr>\n *              <th>Name</th>\n *              <th>Type</th>\n *          </tr>\n *      </thead>\n *      <tbody #ooo2 awOutlineFor [list]=\"list\"\n *             [hasChildren]=\"hasChildren\"\n *             class=\"outline-table\"\n *      >\n *          <ng-template #outline let-item>\n *              <tr>\n *                  <td class=\"item-name outline-animation\">\n *                      <div><aw-outline-control>\n *                          {{item?.content}}\n *                      </aw-outline-control></div>\n *                  </td>\n *                  <td class=\"item-type outline-animation\">\n *                      <div>{{item.type}}</div>\n *                  </td>\n *              </tr>\n *          </ng-template>\n *      </tbody>\n *  </table>\n *\n * ```\n *\n * I was thinking maybe for first time we don't need the same animation like expanding and\n * collapsing. Maybe we need fade-in. In such case I would probably apply @section anim only\n * on items where level > 0 (in the template I keep levels) and if level == 0 then I would\n * execute the same rendering just without [@section]\n *\n *\n * Todo: Think about how to do animation for the table case. Must also write unitest - due to\n * AribaLive aggressive schedule we are skipping them for now\n *\n */\n@Component({\n    selector: 'aw-outline-for, [awOutlineFor]',\n    templateUrl: 'outline-for.component.html',\n    styleUrls: ['outline-for.component.scss'],\n\n    animations: [\n        trigger('section', [\n            state('*', style({\n                'overflow-y': 'hidden',\n                'height': '*',\n                'opacity': '1'\n\n            })),\n            state('void', style({\n                'height': '0',\n                'opacity': '0',\n                'overflow-y': 'hidden'\n\n            })),\n            transition('* => void', animate('200ms ease-out')),\n            transition('void => *', animate('200ms ease-in'))\n        ]),\n    ]\n})\nexport class OutlineForComponent extends BaseComponent\n{\n\n    /**\n     * List of items that needs to be rendered. It does not have to in hierarchical order or we\n     * leave it up to the application to decide about the structure.\n     */\n    @Input()\n    list?: any[];\n\n\n    /**\n     * Tells the component not to render expansion control, in such case we expandAll as a\n     * default behavior\n     *\n     */\n    @Input()\n    showExpansionControl: boolean = true;\n\n    /**\n     * Custom method provided by application to retrieve list of children for current item. If\n     * children is undefined then, default 'children' field is used <currentItem>.children\n     */\n    @Input()\n    children: (value: any) => any[];\n\n    /**\n     *\n     * Option to conditionally render only items that are satisfying filter condition\n     *\n     */\n    @Input()\n    filterOut: (value: any) => boolean;\n\n\n    /**\n     * Opens all tree nodes.\n     *\n     */\n    @Input()\n    expandAll: boolean = false;\n\n\n    /**\n     *  Manages the state for the Outline component. Later on we can provide easier we how to\n     *  initialize and set selectionPaths and selectionStates from the application\n     *\n     */\n    @Input()\n    state: OutlineState;\n\n    /**\n     *\n     * Set indentation size to be used for each level\n     *\n     */\n    @Input()\n    indentationPerLevel: number = 25;\n\n\n    /**\n     * In case template is outside of the outlineFor\n     */\n    @Input()\n    externalTemplate: TemplateRef<any>;\n\n\n    /**\n     * Reference to current object using this component\n     */\n    @Input()\n    context: any;\n\n\n    @Input()\n    pushRootSectionOnNewLine: boolean = false;\n\n    /**\n     *\n     * Identifies current model mode.\n     *\n     * We recognize two modes:\n     *\n     * Free - Application needs to implement a children method to retrieve a list of children for\n     * each node and format is pretty much upt to the application\n     *\n     * Tree - this is more restrictive where we have concrete data structure\n     * interface that needs to be folled\n     *\n     * todo: instead of passing format binding try to look into the list to see what type so\n     * we dont make it mandatory\n     *\n     */\n    @Input()\n    format: ModelFormat = 'free';\n\n    /**\n     *\n     * Used when in selection mode to push current selected Item to the application\n     *\n     */\n    @Output()\n    onItemSelected: EventEmitter<any> = new EventEmitter();\n\n\n    /**\n     *\n     * This event is triggered by OutlineControl when node is expanded or collapsed\n     *\n     */\n    @Output()\n    onExpandChange: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * A template to use on application level to render individual items\n     */\n    @ContentChild('outline')\n    controlTemplate: TemplateRef<any>;\n\n\n    @ViewChild('renderedItem')\n    outlineItem: ElementRef;\n\n\n    /**\n     * Internals\n     *\n     * currentItem and parentItem are used to capture current processed item of ngFor. This is\n     * set by directive `InitNestingDirective`\n     *\n     * animationInProgress: used by animation engine to make sure we dont do any actions while\n     * animation is in the progress\n     *\n     * embedded: Indicates that we are using directive so it will not have default component\n     * wrapper\n     *\n     */\n    currentItem: any;\n    parentItem: any;\n    animationInProgress: boolean;\n    embedded: boolean = false;\n\n    /**\n     * Flag that tells us that component is fully rendered\n     *\n     */\n    viewInitialized: boolean = false;\n\n\n    constructor(public env: Environment,\n                private _viewContainer: ViewContainerRef,\n                private builder: AnimationBuilder,\n                private element: ElementRef)\n    {\n        super(env);\n\n    }\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n\n        if (isBlank(this.state)) {\n            this.state = new OutlineState();\n        }\n        if (isBlank(this.state.outlineFor)) {\n            this.state.outlineFor = this;\n        }\n\n        if (this.expandAll) {\n            this.showExpansionControl = false;\n        }\n\n        this.state.isExpandedAll = this.expandAll;\n\n        // in case we want to render content of tree outside of outlineFor\n        if (isPresent(this.externalTemplate)) {\n            this.controlTemplate = this.externalTemplate;\n        }\n\n        this.embedded = this.element.nativeElement.hasAttribute('awoutlinefor');\n\n        if (isBlank(this.context)) {\n            this.context = this;\n        }\n\n    }\n\n\n    ngDoCheck(): void\n    {\n        super.ngDoCheck();\n    }\n\n    isTreeModelFormat(): boolean\n    {\n        return this.format === 'tree';\n    }\n\n    /**\n     * Used by template and OutlineControl to identify which item is expanded and collapsed\n     *\n     */\n    isExpanded(item: any, currentLevel: number = -1): boolean\n    {\n        if (currentLevel === 0 && this.pushRootSectionOnNewLine) {\n            // always override/reset for root nodes\n            if (this.isTreeModelFormat()) {\n                (<OutlineNode>item).isExpanded = true;\n            }\n            return true;\n        }\n        return this.state.isExpanded(item);\n    }\n\n    /**\n     *\n     * Since we have currently two ways how to pass children items we need have this method to\n     * unify the way how we access it. If we pass `children` binding we use this instead, otherwise\n     * we expect current object to have `children` field\n     *\n     */\n    childrenForItem(item: any): any[]\n    {\n        if (this.isTreeModelFormat()) {\n            return (<OutlineNode>item).children || [];\n        } else {\n            return this.hasChildren(item) ? this.doGetChildren(item) : [];\n        }\n    }\n\n\n    /**\n     *\n     * Check if the current item has a children and needs to be rendered\n     *\n     */\n    hasChildren(item: any): boolean\n    {\n        if (this.isTreeModelFormat()) {\n            let children = (<OutlineNode>item).children;\n            return isPresent(children) && children.length > 0;\n\n        } else if (isBlank(this.children) && isBlank(item.children)) {\n            assert(false, 'Missing [children] method binding');\n        }\n\n        return this.doGetChildren(item).length > 0;\n\n    }\n\n    doGetChildren(item: any): any[]\n    {\n        return this.children.apply(this.context, [item]);\n    }\n\n\n    /**\n     *  Uses the `OutlineState` to toggle state of current selectionPath. The `selectionPath` is\n     *  put together inside `OutlineControl` where we iterate all the way to the root and add\n     *  each item to the `currentPath` array. This way we collect list of item representing current\n     *  current expansionPath.\n     *\n     *\n     */\n    toggleExpansion(): void\n    {\n        if (this.animationInProgress) {\n            // backup procedure in case onAnimationDone fails\n            setTimeout(() =>\n            {\n                if (this.animationInProgress) { // change only if its fails\n                    this.animationInProgress = false;\n                }\n            }, 200);\n            return;\n        }\n\n        if (!this.embedded) {\n            this.animationInProgress = true;\n        }\n\n        let currentItem = ListWrapper.last(this.state.currentPath);\n        this.state.toggleExpansion(this.state.currentPath, this.childrenForItem(currentItem));\n\n        if (this.embedded) {\n            // this.animateEmbeddedItem();\n        }\n    }\n\n\n    /**\n     * Angular anim. callback that sets back the flag to make sure we don't trigger animations\n     * when one is in progress.\n     *\n     */\n    onAnimationDone(event: Event)\n    {\n        this.animationInProgress = false;\n    }\n\n    /**\n     * Calculated indentation used to shift the nested section to the right or later on to the\n     * left when RTL is supported\n     *\n     *\n     */\n    indentation(currentLevel: number): number\n    {\n        if (this.pushRootSectionOnNewLine && currentLevel > 0) {\n            currentLevel -= 1;\n        }\n\n        return (currentLevel === 0 && this.pushRootSectionOnNewLine)\n            ? 0 : (this.indentationPerLevel * currentLevel);\n    }\n\n    /**\n     * Not all rows are visible by default, there can be a case where you dont want to render items\n     * using outline. e.g. Datatable with detail row.\n     */\n    isVisible(item: any): boolean\n    {\n        if (isPresent(this.filterOut)) {\n            return !this.filterOut(item);\n        }\n        return true;\n    }\n}\n\n/**\n *\n * Since we can not directly set `*ngTemplateOutlet` context variables to the typescript class we\n * use this directive to do the Job\n *\n */\n@Directive({\n    selector: '[initNesting]'\n})\nexport class InitNestingDirective implements OnInit\n{\n\n    @Input()\n    setLevel: number;\n\n\n    @Input()\n    setCurrrentItem: any;\n\n\n    @Input()\n    setParentItem: any;\n\n\n    constructor(private outline: OutlineForComponent)\n    {\n    }\n\n\n    ngOnInit(): void\n    {\n        if (isPresent(this.setLevel)) {\n            this.outline.state.currentLevel = this.setLevel;\n        }\n\n\n        if (isPresent(this.setCurrrentItem)) {\n            this.outline.currentItem = this.setCurrrentItem;\n\n            if (this.outline.isTreeModelFormat()) {\n                this.outline.currentItem['$$parentItem']\n                    = (<OutlineNode>this.setCurrrentItem).parent;\n            }\n        }\n\n        if (!this.outline.isTreeModelFormat() && isPresent(this.setParentItem)) {\n            this.outline.currentItem['$$parentItem'] = this.setParentItem;\n        }\n    }\n\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    Component,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    SkipSelf\n} from '@angular/core';\nimport {assert, Environment, isBlank, isPresent} from '@aribaui/core';\nimport {BaseComponent} from '../../../core/base.component';\nimport {OutlineForComponent} from '../outline-for.component';\nimport {OutlineState} from '../outline-state';\n\n\n/**\n * OutlineControlComponent renders the indentation, arrow, and text for a node in an outline.\n * It should be used either in the body of an OutlineFor component, or inside datatable\n *\n *\n * ##Usage inside body:\n *\n *  Here you can see that we need to wrap out content inside ng-template which will push us\n *  give us current item item and then we can place OutlineControlComponent to control\n *  the tree.\n *\n * ```\n *  <aw-outline-for2 #ooo [list]=\"list\" [hasChildren]=\"hasChildren\">\n *\n *      <ng-template #outline let-item>\n *          <div class=\"my-section\">\n *              <div class=\"outline\">\n *                  <aw-outline-control>\n *                      {{item?.content}}\n *                  </aw-outline-control>\n *              </div>*\n *          </div>\n *      </ng-template>\n *  </aw-outline-for2>\n *\n *\n * ```\n *\n *\n *\n *\n */\n@Component({\n    selector: 'aw-outline-control',\n    templateUrl: 'outline-control.component.html',\n    styleUrls: ['outline-control.component.scss'],\n})\nexport class OutlineControlComponent extends BaseComponent\n{\n\n    /**\n     *\n     *  If TRUE it changes the behavior of the outline node text which click is triggered\n     *  it selects the item and broadcast the `onItemSelected` event\n     *\n     */\n    @Input()\n    allowSelection: boolean = false;\n\n    @Input()\n    allowEdit: boolean = false;\n\n    /**\n     *\n     * Triggers action when outline item is expanded\n     *\n     */\n    @Output()\n    action: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Current item used for this `OutlineControl`\n     *\n     */\n    item: any;\n\n    /**\n     * Calculated indentation used to shift the nested section to the left. This is used for\n     * embedded mode e.g. tree table where we cannot indent parent\n     */\n    indentation: number;\n\n\n    isRootItem: boolean = false;\n\n    constructor(public env: Environment,\n                @Optional() @Inject(forwardRef(() => OutlineState))\n                private outlineState: OutlineState,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => OutlineControlComponent))\n                private parentControl: OutlineControlComponent,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => OutlineForComponent))\n                public outlineFor: OutlineForComponent)\n    {\n        super(env);\n\n    }\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n\n        this.prepareControl();\n    }\n\n\n    /**\n     *\n     * We dont show expansion icons when there no children\n     *\n     */\n    hasExpansionControl(): boolean\n    {\n        return this.outlineFor.hasChildren(this.item) && this.outlineFor.showExpansionControl;\n    }\n\n\n    isSelected(): boolean\n    {\n        return this.outlineFor.state.selectedItem === this.item;\n    }\n\n    calculateStyleClass(): string\n    {\n        if (!this.hasExpansionControl() ||\n            (this.outlineFor.pushRootSectionOnNewLine && isBlank(this.item.$$parentItem)))\n        {\n            return '';\n        }\n\n        if (this.outlineFor.embedded) {\n            return this.outlineFor.isExpanded(this.item) ? 'icon-slim-arrow-down'\n                : 'icon-slim-arrow-right';\n        } else {\n            return this.outlineFor.isExpanded(this.item)\n                ? 'icon-slim-arrow-right outline-icon-expanded' : 'icon-slim-arrow-right';\n        }\n    }\n\n    /**\n     * Collapses and expands current node\n     *\n     */\n    toggleExpansion(event: any): void\n    {\n        this.outlineFor.state.currentPath = [];\n        let currentPath = this.item;\n\n        while (isPresent(currentPath)) {\n            this.outlineFor.state.currentPath.unshift(currentPath);\n            currentPath = currentPath.$$parentItem;\n        }\n\n        this.outlineFor.toggleExpansion();\n        let payload = {\n            item: this.item,\n            expanded: this.outlineFor.state.isExpanded(this.item)\n        };\n        this.action.emit(payload);\n        this.outlineFor.onExpandChange.emit(payload);\n\n        event.stopPropagation();\n    }\n\n    select(): void\n    {\n        this.outlineFor.state.selectedItem = this.item;\n        this.outlineFor.onItemSelected.emit(this.item);\n    }\n\n    private prepareControl(): void\n    {\n        if (isBlank(this.outlineFor) && isPresent(this.outlineState)) {\n            this.outlineFor = this.outlineState.outlineFor;\n        }\n\n        assert(isPresent(this.outlineFor), 'Missing outlineFor component');\n        if (this.outlineFor.embedded) {\n            let level = this.outlineFor.state.currentLevel;\n            if (this.outlineFor.pushRootSectionOnNewLine && level > 0) {\n                level -= 1;\n            }\n\n            this.indentation = (this.outlineFor.indentationPerLevel * level);\n        }\n        this.item = this.outlineFor.currentItem;\n        this.isRootItem = isBlank(this.item.$$parentItem);\n    }\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {InitNestingDirective, OutlineForComponent} from './outline-for.component';\nimport {AWCoreComponentModule} from '../../core/core.module';\nimport {OutlineControlComponent} from './outline-control/outline-control.component';\n\n@NgModule({\n    declarations: [\n        OutlineForComponent,\n        OutlineControlComponent,\n        InitNestingDirective\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        AWCoreComponentModule\n    ],\n    exports: [\n        OutlineForComponent,\n        OutlineControlComponent,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    providers: []\n})\nexport class AWOutlineForModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, forwardRef, Inject, Input, Optional, SkipSelf} from '@angular/core';\nimport {NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Environment} from '@aribaui/core';\nimport {BaseFormComponent} from '../../core/base-form.component';\nimport {FormRowComponent} from '../../layouts/form-table/form-row/form-row.component';\nimport {distinctUntilChanged} from 'rxjs/operators';\n\n\n/**\n * Renders html text area component\n\n *\n * ### Example\n *\n * ```typescript\n *\n *      @Component({\n *          selector: 'myNote' ,\n *          template: '<aw-text-area [value]=\"inputValue\" [autoResize]=\"autoResize\" >\n *              </aw-text-area>'\n *      })\n *      export class MyNoteComponent\n *      {\n *          inputValue: string = 'Some really long text';\n *          autoResize: false;\n *      }\n *\n * ```\n *  Note: if you are using this outside of FormTable please provide your own FormGroup\n */\n\nexport const TEXTAREA_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TextAreaComponent),\n    multi: true\n};\n\n\n@Component({\n    selector: 'aw-text-area',\n    templateUrl: 'text-area.component.html',\n    styleUrls: ['text-area.component.scss'],\n\n    providers: [\n        TEXTAREA_CONTROL_VALUE_ACCESSOR,\n        {provide: BaseFormComponent, useExisting: forwardRef(() => TextAreaComponent)}\n    ]\n})\nexport class TextAreaComponent extends BaseFormComponent\n{\n    /**\n     *\n     * A value used to store and read user input\n     *\n     */\n    @Input()\n    value: any = '';\n\n\n    /**\n     * Spefifies visible number of lines\n     */\n    @Input()\n    rows: number = 2;\n\n\n    /**\n     * Specifies visible width\n     */\n    @Input()\n    columns: number = 20;\n\n\n    /**\n     * when this option is TRUE and user starts typing it will maximize textarea's width and height\n     */\n    @Input()\n    autoResize: boolean = true;\n\n    constructor(public env: Environment,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => FormRowComponent))\n                protected parentContainer: BaseFormComponent)\n    {\n        super(env, parentContainer);\n    }\n\n    ngOnInit()\n    {\n\n        super.ngOnInit();\n        super.registerFormControl(this.value);\n\n        this.formControl.valueChanges.pipe(\n            distinctUntilChanged()\n        ).subscribe(val =>\n        {\n            this.value = val;\n            this.onModelChanged(this.value);\n        });\n    }\n\n\n    /**\n     * Internal. Please see ControlValueAccessor\n     *\n     */\n    writeValue(value: any)\n    {\n        if (value !== this.value) {\n            this.value = value;\n            this.formControl.setValue(value, {onlySelf: true});\n        }\n\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {InputTextareaModule} from 'primeng/primeng';\nimport {TextAreaComponent} from './text-area.component';\nimport {AWStringFieldModule} from '../string/string.module';\n\n@NgModule({\n    declarations: [\n        TextAreaComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        InputTextareaModule,\n        AWStringFieldModule\n    ],\n\n    entryComponents: [\n        TextAreaComponent\n    ],\n    exports: [\n        TextAreaComponent,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    providers: []\n})\nexport class AWTextAreaModule\n{\n}\n\n\n","import {Component, ElementRef, Input, TemplateRef} from '@angular/core';\nimport {Environment, isPresent} from '@aribaui/core';\nimport {BaseComponent} from '../../core/base.component';\n\n/**\n *\n * Page-Notification component that implements a notification system for the user regarding\n * the current object he's working on. Typical notification are:\n *      Success - saved.\n *      Warning - Sourcing request requires 3 suppliers.\n *      Error   - cannot connect to server, check internet connection.\n *\n *\n *\n * Usage 1:  As part of page wrapper.\n *\n *  @Component({\n *    selector: 'MyPage' ,\n *    template: `\n *       <aw-object-page-wrapper\n *                        [title]=\"MyPage\"\n *                        [objectType]=\"MyType\"\n *                        [notification]=\"pageNotification\">\n *             page content\n *          `\n *       </aw-object-pager-wrapper>\n *    })\n *    export class MyPage\n *    {\n *\n *        pageNotification: PageNotification = new PageNotification(\"warn\",\n *                              \"Policy Warning\", \"This request requires 3 bids.\");\n *\n *        constructor ()\n *        {\n *        }\n *    }\n *\n * Usage 2: directly into the page.\n *\n *  @Component({\n *    selector: 'registration' ,\n *    template: `\n *      <aw-header></aw-header>\n *        Page Header\n *\n *        <ng-template [ngIf]=\"hasNotifications()\">\n *          <div class=\"ui-g-12 u-nopadding\">\n *            <aw-page-notification [notification]=\"notification\"></aw-page-notification>\n *          </div>\n *        </ng-template>\n *\n *      <aw-footer></aw-footer>\n *    `\n *    })\n *    export class MyPage\n *    {\n *\n *        notification: PageNotification = new PageNotification(\"warning\",\n *                              \"Policy Warning\", \"This request requires 3 bids.\");\n *\n *        constructor ()\n *        {\n *        }\n *    }\n *\n */\n@Component({\n    selector: 'aw-page-notification',\n    templateUrl: 'page-notification.component.html',\n    styleUrls: ['page-notification.component.scss']\n})\nexport class PageNotificationComponent extends BaseComponent\n{\n\n    /**\n     * Any info, Error, or Warn for this page.\n     */\n    @Input()\n    notification: PageNotification;\n\n    constructor(protected element: ElementRef, public env: Environment)\n    {\n        super(env);\n    }\n\n    notificationClass(): string\n    {\n        return `notification-${this.notification.type}`;\n    }\n\n    notificationIcon(): string\n    {\n        return `ariba-icon icon-${this.notification.type}`;\n    }\n\n}\n\n/**\n * Page Notification are messages for this page only. It displays in the center of the page\n * right under page title. Typical page notifications are 'save confirmation',\n * 'error during submit', warnings of field requirements, etc.\n */\nexport class PageNotification\n{\n    constructor(public type: PageNotificationType, public title: string,\n                public description: string, public contentTmpl?: TemplateRef<any>)\n    {\n    }\n\n    hasTemplate(): boolean\n    {\n        return isPresent(this.contentTmpl);\n    }\n\n    toString(): string\n    {\n        return this.type + ', title: ' + this.title + ', description:  ' + this.description;\n    }\n}\n\nexport type PageNotificationType = 'success' | 'info' | 'warning' | 'error';\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {PageNotificationComponent} from './page-notification.component';\n\n@NgModule({\n    declarations: [\n        PageNotificationComponent\n\n    ],\n    imports: [\n        CommonModule\n    ],\n    entryComponents: [\n        PageNotificationComponent\n    ],\n    exports: [\n        PageNotificationComponent\n    ],\n    providers: []\n})\nexport class AWPageNotificationModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\n/**\n * Represents an event triggered when a page has been initialized.\n *\n */\nexport class PageInitialized\n{\n    constructor(public title: string)\n    {\n    }\n\n    toString(): string\n    {\n        return `PageInitializied(title: ${this.title})`;\n    }\n}\n\n/**\n * Represents an event triggered when a page has been destroyed.\n *\n */\nexport class PageDestroyed\n{\n    constructor(public title: string)\n    {\n    }\n\n    toString(): string\n    {\n        return `PageDestroyed(title: ${this.title})`;\n    }\n}\n\nexport type PageEvent = PageInitialized | PageDestroyed;\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {PageDestroyed, PageEvent, PageInitialized} from './page-events';\n\n/**\n * Page LifeCycle Service monitors all page initialization and destructions.\n * The purpose of this service is to help the application monitor page lifecycle, subscribe\n * to lifecycle events and execute actions such as user analytics.\n *\n * Usage:\n *\n *    1.  Inject PageLifeCycleService into your constructor\n *\n *    constructor(pageLifecycle:PageLifeCycleService) {\n *        pageLifecycle.pageEvents.subscribe(event:Event => {\n *            if(event instanceof PageInitialized) {\n *            }\n *            // PageDestroyed\n *\n *        });\n *     }\n */\n@Injectable()\nexport class PageLifeCycleService\n{\n\n    /**\n     * Page event queue when all page lifecycle events: init, destroy are emitted.\n     * Listeners can subscribe to these events.\n     */\n    public pageEvents: Subject<PageEvent> = new Subject<PageEvent>();\n\n    /**\n     *\n     */\n    constructor()\n    {\n\n    }\n\n    /**\n     * Called when page is initialized.\n     * @param pageTitle\n     */\n    public onPageInit(pageTitle: string): void\n    {\n        this.pageEvents.next(new PageInitialized(pageTitle));\n    }\n\n    /**\n     * Call when page has been destroyed\n     * @param title\n     */\n    public onPageDestroy(pageTitle: string): void\n    {\n        this.pageEvents.next(new PageDestroyed(pageTitle));\n    }\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Environment} from '@aribaui/core';\nimport {ComponentRegistry} from '../../core/component-registry.service';\nimport {PageLifeCycleService} from './page-lifecycle.service';\nimport {BaseComponent} from '../../core/base.component';\n\n/**\n * Represents the different page types in an application.\n */\nexport enum PageType {\n    Init,         // Init Page type\n    Login,        // Login Page\n    Object,       // Object detail page\n    List,         // List Page\n    MasterDetail, // MasterDetail\n    Dashboard,    // Dashboard page\n    Modal         // Modal page, it can be configured to be a popup, or standalone page.\n}\n\n/** Placeholder now. The Error Manager handles all the errors on the page.\n *  It is initialized for every page. Page errors, warning, info goes through\n *  the error Manager and the result message is displayed on the page notification area.\n */\nexport class ErrorManager\n{\n\n}\n\n/**\n *  Page wrapper is the base class for all pages. The idea is that there are different page types\n *  in an Application. A List Page renders a list of objects, ex: customers, requests, PO.  And\n *  a object page will render one object in detail.\n *\n *  They share common attributes such as page type and page id.\n *\n *  Ariba Page have a life cycle. When page starts up, it's initialized. And when the page is\n *  destroyed, it'll be complete.\n */\nexport abstract class PageWrapper extends BaseComponent\n{\n    /**\n     * What type of page this is.\n     *\n     */\n    protected pageType: PageType = PageType.Init;\n\n    /**\n     * Page Id. Used when pages are stored in map.\n     */\n    id: string;\n\n    /**\n     * Handling all the error on a page.\n     */\n    public errorManager: ErrorManager;\n\n    /**\n     * Indicate that this page wrapper has been wrapped by another page wrapper.\n     * In this case, we wouldn't display header and footer and other page wrapper components\n     */\n    alreadyInPageWrapper: boolean;\n\n\n    constructor(public env: Environment, pageType: PageType,\n                protected componentRegistry: ComponentRegistry,\n                protected pageLifecycleService: PageLifeCycleService)\n    {\n        super(env);\n        this.pageType = pageType;\n    }\n\n    /**\n     * All subclass needs to generated a page identifier.\n     * It follows the following pattern:\n     *    type_title_id\n     *\n     *    RFQ_SourcingRequest_123\n     */\n    abstract generatePageId(): string;\n\n    /**\n     * Get the unique Id for this page.\n     *\n     */\n    public getId(): string\n    {\n        if (this.id) {\n            return this.id;\n        }\n\n        this.id = this.generatePageId();\n    }\n\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, ElementRef, Input, ViewChild} from '@angular/core';\nimport {Environment, isPresent, RoutingService} from '@aribaui/core';\nimport {SidenavComponent} from '../sidenav/sidenav.component';\nimport {BaseComponent} from '../../../core/base.component';\n\n/**\n *\n * Header component that implements consistent styling, behavior for an Ariba page.\n * Header includes a menu, user profile, and alerts.\n *\n *  @Component({\n *    selector: 'registration' ,\n *    template: `\n *                <aw-page-header [showBackAction]=\"true\" userName=\"Chad Noll\"\n *                                 [menuItems]=\"menuItems\" [notifications]=\"userNotifications\">\n *                     <div class=\"page-header-center\">\n *                           <a class=\"navbar-brand\" tabindex=\"0\" href=\"/\">\n *                               <img class=\"navbar-logo\" src=\"./images/SAP_Ariba_DB.png\"\n *                                   alt=\"Go to homepage\" data-pin-nopin=\"true\">\n *                          </a>\n *                     </div>\n *                </aw-page-header>\n *\n *    `\n *    })\n *    export class MyPage\n *    {\n *      menuItems: PageMenuItem[] = [new PageMenuItem('icon-home', 'Home', '/play/'),\n *                                  new PageMenuItem('icon-expense-report', 'Reports',\n *                                                     '/play/pageheader'),\n *                                  new PageMenuItem('icon-sales-order', 'Purchase Order',\n *                                                       '/play/pageheader'),\n *                                  new PageMenuItem('icon-account', 'Accounts',\n *                                                     '/play/pageheader')];\n *\n *     userNotifications: UserNotification[] = [\n *       new UserNotification('icon-expense-report', 'Expense report EXP453 has been approved.',\n *                             '/play/'),\n *         new UserNotification('icon-sales-order', 'Sales Order SO1234 has been created.',\n *                             '/play/'),\n *           new UserNotification('icon-account', 'Supplier account SA1234 has been updated.',\n *                               '/play/')\n *        ];\n *\n *        constructor ()\n *        {\n *        }\n *\n *    }\n */\n@Component({\n    selector: 'aw-page-header',\n    templateUrl: 'page-header.component.html',\n    styleUrls: ['page-header.component.scss']\n})\nexport class PageHeaderComponent extends BaseComponent\n{\n\n    /**\n     * list of menu entries. The page menu icon will only display when this list is not empty.\n     */\n    @Input()\n    menuItems: PageMenuItem[];\n\n    /**\n     * list of user notification\n     */\n    @Input()\n    notifications: UserNotification[];\n\n    /**\n     * Should the user notification icon be hidden. Default it to show the icon even\n     * if there's no notifications.\n     *\n     */\n    @Input()\n    hideNotification: boolean = false;\n\n    /**\n     * displays the back link that navigates user to the previous page when clicked.\n     */\n    @Input()\n    showBackAction: boolean = false;\n\n    /**\n     * Current logged in user name.\n     */\n    @Input()\n    userName: string;\n\n    /**\n     * The sidemenu\n     */\n    @ViewChild('sidemenu')\n    sidenav: SidenavComponent;\n\n    showNotificationPanel: boolean = false;\n\n\n    constructor(protected element: ElementRef, public env: Environment,\n                private routing: RoutingService)\n    {\n        super(env);\n\n    }\n\n    backAction(): void\n    {\n        this.routing.goBack();\n    }\n\n    /**\n     * Do i have any menu items.\n     *\n     */\n    hasMenuItems(): boolean\n    {\n        return (this.menuItems && this.menuItems.length > 0);\n    }\n\n    /**\n     * Toggle the side navigation menu.\n     */\n    showHideMenu(): void\n    {\n        this.sidenav.toggle();\n    }\n\n    /**\n     * Do I have any notifications.\n     *\n     */\n    hasNotifications(): boolean\n    {\n        return isPresent(this.notifications) && this.notifications.length > 0;\n    }\n\n    /**\n     * toggling wheather notification panel is displayed or not.\n     */\n    toggleNotificationPanel(): void\n    {\n        this.showNotificationPanel = !this.showNotificationPanel;\n    }\n}\n\n/**\n * PageMenuItem represents an item in the page menu structure.\n */\nexport class PageMenuItem\n{\n    /**\n     * @param icon    - Icon of this menu item.\n     * @param label   - label of this item.\n     * @param link    - link to the destination when user clicks on it.\n     */\n    constructor(public icon: string, public label: string,\n                public link: string)\n    {\n    }\n\n    toString(): string\n    {\n        return `PageMenuItem: (label, ${this.label})`;\n    }\n}\n\n/**\n * notification for the current logged in user.\n * Ex:  PR2049 has been approved.\n *      Order PO518 received.\n */\nexport class UserNotification\n{\n\n    /**\n     * @param icon   - alert notification icon\n     * @param label  - alert notification label\n     * @param link   - link\n     */\n    constructor(public icon: string, public label: string,\n                public link: string)\n    {\n\n    }\n\n    toString(): string\n    {\n        return `PageUserNotification: (label, ${this.label})`;\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {AfterContentInit, Component, ContentChild, ElementRef} from '@angular/core';\nimport {Environment, isPresent} from '@aribaui/core';\nimport {BaseComponent} from '../../../core/base.component';\n\n/**\n * Footer component that implements consistent styling, behavior.\n * This footer component self contained.\n *\n *  @Component({\n *    selector: 'registration' ,\n *    template: `\n *\n *          <aw-page-footer>\n *               <div class=\"page-footer-logo\">\n *                   <img src=\"images/ariba_logo_white_bkgd.png\">\n *               </div>\n *               <div class=\"page-footer-user-info\">\n *                   Chad Noll (cnoll) last visit {{last_visited | date:'MM/dd/yyyy h:mma' }}\n  *                   | Buyer Organization\n *               </div>\n *               <span class=\"page-footer-copyright\" #copyright>\n *                   <p>Â© 2020â2028 The Future, Inc. All rights reserved</p>\n *               </span>\n *           </aw-page-footer>\n *    `\n *    })\n *    export class MyPage\n *    {\n *        constructor ()\n *        {\n *        }\n *\n *    }\n */\n@Component({\n    selector: 'aw-page-footer',\n    templateUrl: 'page-footer.component.html',\n    styleUrls: ['page-footer.component.scss']\n})\nexport class PageFooterComponent extends BaseComponent implements AfterContentInit\n{\n\n    /**\n     * copyright content\n     */\n    @ContentChild('copyright') copyright: any;\n\n    /**\n     * show default copyright. If copyright is passed in, then show the passed in one.\n     */\n    showDefaultCopyright: boolean = true;\n\n    constructor(protected element: ElementRef, public env: Environment)\n    {\n        super(env);\n    }\n\n\n    ngOnInit(): void\n    {\n        super.ngOnInit();\n    }\n\n    ngAfterContentInit()\n    {\n        this.showDefaultCopyright = !isPresent(this.copyright);\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    Component,\n    ContentChild,\n    ElementRef,\n    Input,\n    OnDestroy,\n    SimpleChanges,\n    TemplateRef\n} from '@angular/core';\nimport {Environment, isPresent} from '@aribaui/core';\nimport {ComponentRegistry} from '../../../core/component-registry.service';\nimport {PageType, PageWrapper} from '../page-wrapper';\nimport {PageNotification} from '../../page-notification/page-notification.component';\nimport {PageLifeCycleService} from '../page-lifecycle.service';\nimport {PageHeaderComponent} from '../page-header/page-header.component';\nimport {PageFooterComponent} from '../page-footer/page-footer.component';\n\n/**\n *\n * Object Page Wrapper Component renders any object instance in detail. It has a uniform layout,\n * Header, Page title, Page notification, actions, content, and Footer.\n *\n *\n *  Usage:\n *\n *  @Component({\n *    selector: 'RFXPage' ,\n *    template: `\n *       <aw-object-page-wrapper\n *                        [title]=\"rfxEntity.headerInfo.title\"\n *                        [objectType]=\"rfxEntity.headerInfo.eventTypeString\"\n *                        [notification]=\"pageNotification\">\n *\n *\n *           <aw-page-actions>\n *               <aw-button [type]=\"'submit'\" [name]=\"'edit'\" [value]=\"edit\" [style]=\"'primary'\">\n *                   Edit\n *                </aw-button>\n *               <aw-button [type]=\"'button'\" [name]=\"'cancel'\" [value]=\"cancel\"\n *                                                         [style]=\"'secondary'\">\n *                  Cancel\n *               </aw-button>\n *           </aw-page-actions>\n *\n *           <aw-page-content>\n *             <aw-section title=\"Sourcing request info\" (onStateChanged)=\"onStateChange($event)\">\n *\n *                   <m-context [object]=\"rfxEntity.headerInfo\"\n *                              [operation]=\"this.editabilityState.headerInfoOp\"\n *                              layout=\"Inspect\"\n *                              uiGroup=\"HeaderGeneral\"\n *                   >\n *                       <m-include-component></m-include-component>\n *                   </m-context>\n *\n *             </aw-section>\n *           </aw-page-content>\n *       </aw-object-page-wrapper>\n *    `\n *    })\n *    export class RFXPage\n *    {\n *       // To keep track what section is editable and which read only\n *       editabilityState: EditabilityState;\n *\n *       // Current RFX event\n *       rfxEntity: RfxEventEntity;\n *\n *       // Notifications\n *       notification: PageNotification = new PageNotification(\"warn\",\n *                              \"Policy Warning\", \"This request requires 3 bids.\");\n *\n *        constructor ()\n *        {\n *        }\n *\n *    }\n */\n@Component({\n    selector: 'aw-object-page-wrapper',\n    templateUrl: 'object-page-wrapper.component.html',\n    styleUrls: ['object-page-wrapper.component.scss']\n})\nexport class ObjectPageWrapperComponent extends PageWrapper implements OnDestroy\n{\n\n    /**\n     * The title of this page\n     */\n    @Input()\n    title: string;\n\n    /**\n     * The type of the object being rendered - Event, Workspace, contract, etc.\n     */\n    @Input()\n    objectType: string;\n\n    /**\n     * label for the object status.\n     */\n    @Input()\n    objectStatusLabel: string;\n\n    /**\n     * This object's status. For example, draft, pending selection,\n     */\n    @Input()\n    objectStatus: string;\n\n    /**\n     * Optional. Some object has states. For example: RFxObject has Resolve, Review, Get Quote.\n     * Object states will appear on the page when they are present.\n     */\n    @Input()\n    objectStates: string[];\n\n\n    /**\n     * When Stepper is used this identifies current set state\n     */\n    @Input()\n    currentState: string;\n\n\n    /**\n     * Header is a component type to be rendered as a page Header.\n     *\n     * The 'default' value is the component/widget/HeaderComponent\n     */\n    @Input()\n    header: any;\n\n    /**\n     * Set true if page should not include any header. Need to set to true even no header\n     * object is passed in. Otherwise, a default Header component will be added.\n     */\n    @Input()\n    hideHeader: boolean = false;\n\n    /**\n     * Footer Component is the page footer.\n     * can be overriden but the default value is compoenent/widget/FooterComponent.\n     */\n    @Input()\n    footer: any;\n\n    /**\n     * Set true if page should not include any footer. Need to set to true even no footer\n     * object is passed in. Otherwise, a default Footer component will be added.\n     */\n    @Input()\n    hideFooter: boolean = false;\n\n    /**\n     * The positioning of the page actions (page buttons)\n     *   'top' :    page buttons are placed at the top of the page, below the title, to the right.\n     *   'bottom' : page buttons are placed at the bottom of the page, above the footer.\n     *   'both'   : page buttons are placed at both top and bottom.\n     *\n     */\n    @Input()\n    pageActionPosition: string = 'top';\n\n\n    /**\n     * This flag is driven by pageActionPosition. The default position is top.\n     * Value is true for both 'top' and 'both' of pageActionPosition.\n     */\n    hasTopPageActions: boolean = true;\n\n    /**\n     * This flag is driven by pageAction position.\n     * Value is true for both 'bottom' and 'both' of pageActionPosition.\n     */\n    hasBottomPageActions: boolean;\n\n\n    /**\n     * Queries a p template if any\n     */\n    @ContentChild('pageActions')\n    actionsTemplate: TemplateRef<any>;\n\n    /**\n     * Any Success, Info, Error, or Warn for this page.\n     */\n    @Input()\n    notifications: PageNotification[];\n\n\n    objectStateIndex: number = 0;\n\n    constructor(protected element: ElementRef, public env: Environment,\n                componentRegistry: ComponentRegistry, pageLifecycleService: PageLifeCycleService)\n    {\n        super(env, PageType.Object, componentRegistry, pageLifecycleService);\n\n        // Setting Default header component\n        this.header = PageHeaderComponent;\n        this.footer = PageFooterComponent;\n    }\n\n    /**\n     * Generate a unique Id for this object.\n     *\n     */\n    generatePageId(): string\n    {\n        return this.objectType + '_' + this.title + (this.id) ? ('_' + this.id) : '';\n    }\n\n    /**\n     * Does my page have page notification?\n     *\n     */\n    hasNotifications(): boolean\n    {\n        return (this.notifications && this.notifications.length > 0);\n    }\n\n    hasObjectStates(): boolean\n    {\n        return isPresent(this.objectStates);\n    }\n\n    /**\n     * Initialize my local components\n     */\n    ngOnInit()\n    {\n        super.ngOnInit();\n\n        // New Component types that are used in c-include-component\n        if (this.header) {\n            this.componentRegistry.registerType(this.header.name, this.header);\n        }\n\n        // New Component types that are used in c-include-component\n        if (this.footer) {\n            this.componentRegistry.registerType(this.footer.name, this.footer);\n        }\n\n        /** notify subscribers of the page lifecycle service  */\n        this.pageLifecycleService.onPageInit(this.title);\n\n        // Setting the page action position.\n        if (this.pageActionPosition === 'bottom') {\n            this.hasTopPageActions = false;\n            this.hasBottomPageActions = true;\n\n        } else if (this.pageActionPosition === 'both') {\n\n            this.hasTopPageActions = true;\n            this.hasBottomPageActions = true;\n        }\n\n        if (isPresent(this.objectStates) && this.objectStates.length > 1\n            && isPresent(this.currentState)) {\n\n            this.objectStateIndex = this.objectStates.indexOf(this.currentState);\n        }\n    }\n\n\n    ngOnChanges(changes: SimpleChanges): void\n    {\n        super.ngOnChanges(changes);\n\n        if (isPresent(changes['currentState']) &&\n            changes['currentState'].currentValue !== changes['currentState'].previousValue) {\n            // we dont need to check if objectStates exists\n            this.objectStateIndex = this.objectStates.indexOf(this.currentState);\n        }\n\n    }\n\n    ngOnDestroy()\n    {\n        this.pageLifecycleService.onPageDestroy(this.title);\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, ElementRef} from '@angular/core';\nimport {Environment} from '@aribaui/core';\nimport {BaseComponent} from '../../../core/base.component';\n\n/**\n * Page actions is a wrapper for all page actions, buttons, links, menus that interacts it with the\n * page. The wrapper use the ability to position it as needed.\n */\n@Component({\n    selector: 'aw-page-actions',\n    templateUrl: 'page-actions.component.html',\n    styleUrls: ['page-actions.component.scss']\n})\nexport class PageActionsComponent extends BaseComponent\n{\n\n    constructor(protected element: ElementRef, public env: Environment)\n    {\n        super(env);\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, ElementRef} from '@angular/core';\nimport {Environment} from '@aribaui/core';\nimport {BaseComponent} from '../../../core/base.component';\n\n/**\n * Page content is a wrapper for page content.\n * Currently, it's pretty bare, but as we add more interactions on the page, like a side bar,\n * the page content area will likely get affected.\n */\n@Component({\n    selector: 'aw-page-content',\n    template: '<ng-content></ng-content>',\n    styles: [':host {width: 100%; padding: 0 .5em;}']\n})\nexport class PageContentComponent extends BaseComponent\n{\n\n    constructor(protected element: ElementRef, public env: Environment)\n    {\n        super(env);\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, Input} from '@angular/core';\nimport {Environment, isPresent} from '@aribaui/core';\nimport {BaseComponent} from '../../core/base.component';\n\n\nconst STEPPER_COMPLETED_STEP_COLOR = '#58b957';\nconst STEPPER_CURRENT_STEP_COLOR = '#0076CB';\nconst STEPPER_REMAINING_STEP_COLOR = '#D7D7D7';\n\n/**\n * Stepper component displays a list of steps for user to follow. It can be used as a checklist\n * to indicate completed, current and remaining items. It could be also be used to indicate\n * the state of an document, created, submitted, approved, etc...\n *\n *\n * Usage:\n *   1.   Use the component inside your template. provide a list of steps and the current step.\n *\n *          @Component({\n *                selector: 'aw-page' ,\n *                           template: `\n *                <aw-stepper [steps]=\"steps\" [currentStep]=\"currentStep\"></aw-stepper>\n *\n *                  `\n *         export class MyPageComponent implements OnInit {\n *\n *                     steps: string[] = ['Monitor', 'Add Supplier', 'Get Quote'];\n *                     currentStep: number = 1;\n *\n *                     constructor(private modalService: ModalService) {\n *                          super();\n *                       }\n *                     ngOnInit() { }\n *       }\n *\n *   2.  Override the default colors.\n *\n *         @Component({\n *                selector: 'aw-page' ,\n *                           template: `\n *                            <aw-stepper [steps]=\"steps\" [stepColorCurrent]=\"'#ff9900'\"\n *                                        [stepColorRemaining]=\"'#CC0000'\"\n *                                        [stepColorCompleted]=\"'#97a822'\"\n *                                        [currentStep]=\"currentStep\">\n *                            </aw-stepper>\n *                  `\n */\n@Component({\n    selector: 'aw-stepper',\n    templateUrl: 'stepper.component.html',\n    styleUrls: ['stepper.component.scss']\n})\nexport class StepperComponent extends BaseComponent\n{\n    /**\n     * Required\n     * Array of steps. Order of the steps should be in array order.\n     */\n    @Input()\n    steps: string[];\n\n\n    /**\n     * specify the colors associated with steps above. The number of colors\n     * and number of steps must match.\n     * Optional:, if empty, default colors or colors from stepColor inputs will be used.\n     */\n    @Input()\n    colors: string[];\n\n    /**\n     * Local variable to indicate whether to use the colors array or not.\n     */\n    bUseColorArray: boolean = false;\n\n    /**\n     * Optional Input for caller to override the color of completed step.\n     */\n    @Input()\n    stepColorCompleted: string;\n\n    /**\n     * Optional Input for caller to override the color of current step.\n     */\n    @Input()\n    stepColorCurrent: string;\n\n    /**\n     * Optional Input for caller to override the color of remaining step.\n     */\n    @Input()\n    stepColorRemaining: string;\n\n    /**\n     * The current step that's on. If not provided default to the first step.\n     */\n    @Input()\n    currentStep: number = 0;\n\n    /**\n     * calculated the width of connectors between steps. The calculations is so\n     * that the steps are spread out evenly.\n     */\n    connectorWidth: any;\n\n    constructor(public env: Environment)\n    {\n        super(env);\n        // Initial color for the different stages of steps.\n        this.stepColorCompleted = STEPPER_COMPLETED_STEP_COLOR;\n        this.stepColorCurrent = STEPPER_CURRENT_STEP_COLOR;\n        this.stepColorRemaining = STEPPER_REMAINING_STEP_COLOR;\n    }\n\n    ngOnInit()\n    {\n        // Calculate the connector width based on how many steps\n        if (isPresent(this.steps) && this.steps.length > 1) {\n\n            // (100% - 20% (side margins)) / (NumOfSteps -1)\n            this.connectorWidth = Math.ceil(80 / (this.steps.length - 1)) + '%';\n        }\n\n        /**\n         * Use the color array if it's defined.\n         */\n        if (isPresent(this.colors)) {\n\n            this.bUseColorArray = true;\n\n            if (this.colors.length !== this.steps.length) {\n                throw new Error(`The size of the steps and colors don't match:\n                  (steps.length = ${this.steps.length}), (colors.length = ${this.colors.length}`);\n            }\n        }\n    }\n\n    /**\n     * Getting the color of the step for the current index\n     *\n     * @param index\n     */\n    getStepColor(index: number)\n    {\n        // Color Array overrides everything else.\n        if (this.bUseColorArray) {\n            return this.colors[index];\n        }\n\n        if (index < this.currentStep) {\n\n            return this.stepColorCompleted;\n\n        } else if (index === this.currentStep) {\n\n            return this.stepColorCurrent;\n\n        } else {\n\n            return this.stepColorRemaining;\n        }\n    }\n\n    /**\n     * The connector colors are driven by the step colors.\n     *\n     */\n    getConnectorColor(index: number)\n    {\n        // Color Array overrides everything else.\n        if (this.bUseColorArray) {\n            return this.colors[index];\n        }\n\n        if (index < this.currentStep) {\n\n            return this.stepColorCompleted;\n\n        } else {\n\n            return this.stepColorRemaining;\n        }\n    }\n\n    /**\n     * Next step.\n     */\n    nextStep()\n    {\n        this.currentStep++;\n    }\n\n    /**\n     * previous step.\n     */\n    prevStep()\n    {\n        this.currentStep--;\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, Input, OnInit} from '@angular/core';\nimport {Environment, isBlank} from '@aribaui/core';\n\n/**\n * Renders html step component\n *\n *  * Usage:\n *       Straight forward to use. But mostly it would be used as part of the stepper component.\n *\n *          @Component({\n *                selector: 'aw-page' ,\n *                           template: `\n *                           <aw-step [title]=\"step\" [color]=\"color\"></aw-step>\n *                           `\n */\n\n    // Default color for this step.\nconst DEFAULT_COLOR = '#58b957';\n\n@Component({\n    selector: 'aw-step',\n    templateUrl: 'step.component.html',\n    styleUrls: ['step.component.scss']\n})\nexport class StepComponent implements OnInit\n{\n    /**\n     * The color of step icon.\n     */\n    @Input()\n    color: string;\n\n    /**\n     * title appears under the step graphics.\n     */\n    @Input()\n    title: string;\n\n    constructor(public env: Environment)\n    {\n    }\n\n    ngOnInit()\n    {\n        if (isBlank(this.color)) {\n            this.color = DEFAULT_COLOR;\n        }\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {StepperComponent} from './stepper.component';\nimport {StepComponent} from './step/step.component';\nimport {AWCoreComponentModule} from '../../core/core.module';\n\n@NgModule({\n    declarations: [\n        StepComponent,\n        StepperComponent\n\n    ],\n    imports: [\n        CommonModule,\n        AWCoreComponentModule,\n    ],\n    entryComponents: [\n        StepComponent,\n        StepperComponent\n    ],\n    exports: [\n        StepComponent,\n        StepperComponent\n    ],\n    providers: []\n})\nexport class AWStepperModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, ElementRef, Input} from '@angular/core';\nimport {Environment} from '@aribaui/core';\nimport {PageMenuItem} from '../page-header/page-header.component';\nimport {BaseComponent} from '../../../core/base.component';\n\n/**\n *  This is a temporary implementation for the page header component.\n *  When the real implementation of side menu is done, PageHeaderComponent will\n *  be swaped to use it.\n *\n */\n@Component({\n    selector: 'aw-sidenav',\n    templateUrl: 'sidenav.component.html',\n    styleUrls: ['sidenav.component.scss']\n})\nexport class SidenavComponent extends BaseComponent\n{\n    /**\n     * list of menu items\n     */\n    @Input()\n    items: PageMenuItem[];\n\n    /**\n     * displays the back link that navigates user to the previous page when clicked.\n     */\n    @Input()\n    show: boolean;\n\n    constructor(protected element: ElementRef, public env: Environment)\n    {\n        super(env);\n    }\n\n    getSidenavClass(): string\n    {\n        // Only show if I have items\n        return (this.show && this.items) ? 'sidenav sidenav-active' : 'sidenav';\n    }\n\n    open(): void\n    {\n        this.show = true;\n    }\n\n    close(): void\n    {\n        this.show = false;\n    }\n\n    toggle(): void\n    {\n        this.show = !this.show;\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {PageLifeCycleService} from './page-lifecycle.service';\nimport {ObjectPageWrapperComponent} from './object-page-wrapper/object-page-wrapper.component';\nimport {PageActionsComponent} from './page-actions/page-actions.component';\nimport {PageContentComponent} from './page-content/page-content.component';\nimport {PageFooterComponent} from './page-footer/page-footer.component';\nimport {PageHeaderComponent} from './page-header/page-header.component';\nimport {AWStepperModule} from '../stepper/stepper.module';\nimport {SidenavComponent} from './sidenav/sidenav.component';\nimport {AWCoreComponentModule} from '../../core/core.module';\nimport {AWPageNotificationModule} from '../page-notification/page-notification.module';\nimport {RouterModule} from '@angular/router';\n\n@NgModule({\n    declarations: [\n        ObjectPageWrapperComponent,\n        PageActionsComponent,\n        PageContentComponent,\n        PageFooterComponent,\n        PageHeaderComponent,\n        SidenavComponent\n\n    ],\n    imports: [\n        CommonModule,\n        RouterModule,\n        AWCoreComponentModule,\n        AWStepperModule,\n        AWPageNotificationModule\n    ],\n    entryComponents: [\n        PageFooterComponent,\n        PageActionsComponent,\n        PageContentComponent,\n        PageHeaderComponent\n    ],\n    exports: [\n        ObjectPageWrapperComponent,\n        PageActionsComponent,\n        PageContentComponent,\n        PageFooterComponent,\n        PageHeaderComponent,\n        SidenavComponent\n    ],\n    providers: [PageLifeCycleService]\n})\nexport class AWPageWrapperModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, forwardRef, Inject, Input, Optional, SkipSelf} from '@angular/core';\nimport {NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Environment} from '@aribaui/core';\nimport {BaseFormComponent} from '../../core/base-form.component';\nimport {FormRowComponent} from '../../layouts/form-table/form-row/form-row.component';\nimport {distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * RichTextArea component represents a text editor which allows users to format text input.\n * The editor's toolbar is pre-configured to contain functionalities that are in our design.\n * @see {@link editor/editor.component.html}\n *\n *  ### Example\n *  ```\n *\n *  @Component({\n *    selector: 'rfx-event' ,\n *    template: `\n *\n *        <!-- Basic Usage. -->\n *        <aw-richtextarea [name]=\"'description'\" [value]=\"description\" placeHolder=\"put\n *        description\">\n *        </aw-richtextarea>\n *\n *        <!-- Editor with Full functionality -->\n *      <aw-richtextarea [name]=\"'comment'\" [type]=\"editorType\" [value]=\"value\"\n *      placeHolder=\"hold this\">\n *      </aw-richtextarea>\n *    })\n *    export class MyComponent\n *    {\n *        description: string;\n *\n *        editorType:EditorType = EditorType.Full;\n *        value:String;\n *\n *        constructor ()\n *        {\n *        }\n *    }\n */\n\n/**\n * Represents the different types of text editor. They are preconfigured with\n * functionality based on type. Use custom to add your own toolbar menu.\n */\nexport enum EditorType {\n    Default,    // Default Editor supports Minimal set of functionality\n    // [ bold | italic | underline | ordered | bullet | alignment]\n    Full,       // The full list of functionality,\n    TextFormat, // Functionalities that affects text formatting.\n    Custom     // Custom toolbar.\n}\n\n\nexport const EDITOR_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RichTextAreaComponent),\n    multi: true\n};\n\n\n@Component({\n    selector: 'aw-richtextarea',\n    templateUrl: 'rich-text-area.component.html',\n    styleUrls: ['rich-text-area.component.scss'],\n    providers: [\n        EDITOR_CONTROL_VALUE_ACCESSOR,\n        {provide: BaseFormComponent, useExisting: forwardRef(() => RichTextAreaComponent)}\n    ]\n\n})\nexport class RichTextAreaComponent extends BaseFormComponent {\n    /**\n     * The type of the editor.  See EditorType for description.\n     */\n    @Input()\n    type: EditorType;\n\n    /**\n     * A value used to save and read when rendering and updating this component\n     */\n    @Input()\n    value: any = '';\n\n    /**\n     * Expose editorType so that it can be used in this components template.\n     */\n    EditorType: any = EditorType;\n\n\n    constructor(public env: Environment,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => FormRowComponent))\n                protected parentContainer: BaseFormComponent) {\n        super(env, parentContainer);\n\n        this.type = EditorType.Default;\n        this.styleClass = 'default-editor';\n    }\n\n\n    ngOnInit() {\n        super.ngOnInit();\n        super.registerFormControl(this.value);\n\n        this.formControl.valueChanges.pipe(\n            distinctUntilChanged()\n        ).subscribe(val => {\n            this.value = val;\n            this.onModelChanged(this.value);\n        });\n    }\n\n    /**\n     * Internal. Please see ControlValueAccessor\n     */\n    writeValue(value: any) {\n        if (value !== this.value) {\n            this.value = value;\n            this.formControl.setValue(value);\n        }\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {EditorModule} from 'primeng/primeng';\nimport {AWStringFieldModule} from '../string/string.module';\nimport {RichTextAreaComponent} from '../rich-text-area/rich-text-area.component';\n\n\n@NgModule({\n    declarations: [\n        RichTextAreaComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        EditorModule,\n        AWStringFieldModule\n    ],\n    entryComponents: [\n        RichTextAreaComponent\n    ],\n    exports: [\n        RichTextAreaComponent,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    providers: []\n})\nexport class AWRichTextAreaModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    ViewChild\n} from '@angular/core';\nimport {Environment, isPresent} from '@aribaui/core';\nimport {AccordionTab} from 'primeng/primeng';\nimport {BaseComponent} from '../../core/base.component';\n\n\n/**\n * Allow developer to override default actions. Must have this declared before class when we\n * want to have this declaration inside the same file.\n */\n@Component({\n    selector: 'aw-section-actions',\n    template: `<ng-content></ng-content> `,\n})\nexport class SectionActionsComponent\n{\n\n}\n\n\n/**\n *\n * Section component that implements a section of the page. It's an outline box that\n * has the ability to expand and hide its content.\n *\n * ```ts\n *  @Component({\n *    selector: 'rfx-details' ,\n *    template: `\n *         <aw-section title=\"Sourcing request info\" (onEdit)=\"onStateChange($event)\"\n  *                          [editable]=\"true\">\n *\n *                <m-context [object]=\"rfxEntity.headerInfo\"\n *                          [operation]=\"this.editabilityState.headerInfoOp\"\n *                          layout=\"Inspect\"\n *                          uiGroup=\"HeaderGeneral\">\n *                   <m-include-component></m-include-component>\n *               </m-context>\n *           </aw-section>\n *\n *\n *           <aw-section #supplierSection title=\"Selected suppliers\" (onOpen)=\"onOpen()\"\n   *                [opened]=\"false\">\n *               <supplier-profile-card></supplier-profile-card>\n *           </aw-section>\n *\n *           <aw-section title=\"RFQ Details\"\n *                       description=\"Review and update information for suppliers to respond.\"\n *                       [disableClose]=\"true\">\n *\n *               <aw-subsection title=\"Event timeline\">\n *                   <aw-form-table [useFiveZone]=\"false\" [editable]=\"true\">\n *\n *                       <aw-form-row [label]=\"'Start Date'\" [name]=\"'startDate'\" [size]=\"'small'\"\n *                                   [highlightRow]=\"true\">\n *                           <aw-date-time\n *                               formatName=\"dateTime\"\n *                               name=\"startDate\" [value]=\"rfxEntity.created\"\n *                               [showTime]=\"true\"></aw-date-time>\n *                       </aw-form-row>\n *                   </aw-form-table>\n *               </aw-subsection>\n *          </aw-section>\n *    `\n *    })\n *    export class MyPage\n *    {\n *\n *        constructor ()\n *        {\n *        }\n *\n *    }\n *\n * ```\n *\n * Section component also supports editability modes and if enabled it will render action buttons\n * in the footer. Developer can also override default behavior and provide custom actions.\n *\n *\n * e.g:\n *\n * ```\n *      <aw-section [title]=\"title\" [editable]=\"true\"\n *                          (onCancelAction)=\"someHandler1($event)\"\n *                          (onSaveAction)=\"someHandler2($event)\" >\n *              section content\n *\n *\n *   </aw-section>\n *\n * ```\n *\n * or custom action buttons:\n *\n *\n * ```html\n *\n *       <aw-section-actions>\n *                      <aw-button >\n *                            ButtonTest1\n *                      </aw-button>\n *                      <aw-button>\n *                            ButtonTest2\n *                      </aw-button>\n *     </aw-section-actions>\n *\n * ```\n *\n *\n * There are two edit modes\n *  # Default\n *      Renders action buttons in the footers and emit actions to the application\n *\n *  # External\n *     No action buttons are shown in the footer and behavior is handled by application. Only event\n *     is emited.\n *\n *\n *  e.g:\n *\n *  ```ts\n *\n *      <aw-section title=\"User Information\" (onEdit)=\"onAddSomething($event)\"\n *                  [editable]=\"true\" [editMode]=\"'external'\" >\n *                  <div>\n *                      Content\n *                  </div>\n *      </aw-section>\n *\n *  ```\n *\n * Note: When using editing mode you have to call at the end of the editing cycle method\n * `completeEditing()` to commit editing which changes internal state of the Section.\n *\n *\n *\n */\n@Component({\n    selector: 'aw-section',\n    templateUrl: 'section.component.html',\n    styleUrls: ['section.component.scss']\n})\nexport class SectionComponent extends BaseComponent\n{\n\n    /**\n     * The title of this section\n     */\n    @Input()\n    title: string;\n\n    /**\n     * The description of this section.\n     */\n    @Input()\n    description: string;\n\n    /**\n     * Should this section be opened at the start. Default is opened.\n     */\n    @Input()\n    opened: boolean = true;\n\n    /**\n     * Whether this section can be closed or not.\n     **/\n    @Input()\n    disableClose: boolean = false;\n\n    /**\n     * Whether this section is in EditState or not.\n     *\n     * When in editing state and we show \"Cancel / Save\" button developer needs use this binding\n     * to control the state.\n     */\n    @Input()\n    editState: boolean = false;\n\n\n    /**\n     * Current Editing mode. Tells the components if its its default behavior or driven by\n     * application using this component.\n     *\n     * {@see EditMode}\n     *\n     */\n    @Input()\n    editMode: EditMode = 'default';\n\n\n    /**\n     * Developer can provide custom Edit action icon that will appear in the right top corner\n     */\n    @Input()\n    actionIcon: string = 'icon-edit';\n\n    /**\n     * Event emitted when the section is fully opened.\n     */\n    @Output()\n    onOpen: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Event emitted when the section is fully closed.\n     */\n    @Output()\n    onClose: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Edit state to broadcast state of current section\n     */\n    @Output()\n    onEdit: EventEmitter<any> = new EventEmitter();\n\n\n    /**\n     * When in editing state and default buttons are rendered on click broadcast Cancel action\n     */\n    @Output()\n    onCancelAction: EventEmitter<any> = new EventEmitter();\n\n\n    /**\n     * When in editing state and default buttons are rendered on click broadcast Save action\n     */\n    @Output()\n    onSaveAction: EventEmitter<any> = new EventEmitter();\n\n\n    @Output()\n    onEditingComplete: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Local variable on whether this section is expanded or not.\n     * Differs from 'opened'. opened is an input parameter and it doesn't track\n     * current section expanded state.\n     */\n    expanded: boolean;\n\n    /**\n     * internal accordionTab\n     */\n    @ViewChild('accordionTab')\n    private accordionTab: AccordionTab;\n\n\n    /**\n     * Save reference to developer's defined actions so if we can hide default ones\n     */\n    @ContentChild(SectionActionsComponent)\n    customActions: SectionActionsComponent;\n\n    constructor(protected element: ElementRef, public env: Environment)\n    {\n        super(env);\n        this.editable = false;\n    }\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n        // If I have not header, then I can't close the section.\n        if (!this.isHeaderDisplayed()) {\n            this.disableClose = true;\n        }\n\n        // If I can't close the section, then it should default open.\n        if (this.disableClose) {\n            this.opened = true;\n        }\n\n\n        // initialize the expanded state.\n        this.expanded = this.opened;\n    }\n\n    /**\n     * Don't display header area if I don't have title and description.\n     *\n     */\n    private isHeaderDisplayed(): boolean\n    {\n        return (isPresent(this.title) || isPresent(this.description));\n    }\n\n    /**\n     * Css Class that control the look and feel for section component.\n     */\n    aClass(): string\n    {\n        if (!this.isHeaderDisplayed()) {\n            return 'section-no-header';\n        }\n\n        return '';\n    }\n\n    /**\n     * Since we introduced buttons and editState the decision on when to exit editing mode\n     * should be on the developer using this component therefore only startEditing\n     *\n     */\n    onEditAction($event: any): void\n    {\n\n        // when in editing make sure we dont switch state as there can be some Form errors\n        // which needs to be handled by developer and only then change the editState\n        if (!this.editState) {\n            this.editState = !this.editState;\n            let state: string = (this.editState) ? 'inEdit' : 'notInEdit';\n\n            this.onEdit.emit(state);\n            this.open();\n        }\n\n        // prevent the original event from bubbling up. Because the edit icon is inside\n        // the header. If the click even is bubbled up, this event will cause the section to\n        // expand or collapse.\n        if (isPresent($event.event)) {\n            $event.event.stopPropagation();\n            $event.event.preventDefault();\n        }\n    }\n\n    hasDescription(): boolean\n    {\n        return isPresent(this.description);\n    }\n\n    /**\n     * Open this section, if it's already open, will do nothing.\n     */\n    open(event?: any): void\n    {\n\n        if (!this.expanded) {\n            this.accordionTab.toggle(event);\n        }\n    }\n\n    /**\n     * Close this section, if it's already close, will do nothing.\n     */\n    close(event: any): void\n    {\n        if (this.expanded) {\n            this.accordionTab.toggle(event);\n        }\n    }\n\n    /**\n     * Callback to be invoked when accordion is opened\n     *\n     */\n    onSectionOpen(event: any): void\n    {\n        this.expanded = true;\n        this.onOpen.emit('open');\n    }\n\n    /**\n     * Callback to be invoked when accordion is closed\n     *\n     */\n    onSectionClose(event: any): void\n    {\n        this.expanded = false;\n        this.onClose.emit('close');\n    }\n\n\n    /**\n     *\n     * Tells us if we need to render application defined custom actions\n     *\n     */\n    hasCustomActions(): boolean\n    {\n        return isPresent(this.customActions);\n    }\n\n    /**\n     * Emit the editing state back to non-editable\n     */\n    completeEditing(): void\n    {\n        this.editState = false;\n        this.onEditingComplete.emit(this.editState);\n    }\n}\n\n@Component({\n    selector: 'aw-subsection',\n    template: `\n                    <h4 class=\"subsection-title\">{{title}}</h4>\n                    <ng-content></ng-content>\n                 `,\n    styles: ['.subsection-title {color: #363636; }']\n})\nexport class SubSectionComponent\n{\n\n    /**\n     * The title of this sub section\n     */\n    @Input()\n    title: string;\n}\n\n\n/**\n * Defines editing modes for the Sections. Default means we show cancel / save buttons and hide\n * edit icons when in editing. external is driven by application\n */\nexport type EditMode = 'default' | 'external';\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {AribaCoreModule} from '@aribaui/core';\nimport {AWStringFieldModule} from '../string/string.module';\nimport {AccordionModule, SharedModule} from 'primeng/primeng';\nimport {SectionActionsComponent, SectionComponent, SubSectionComponent} from './section.component';\nimport {AWHyperlinkModule} from '../hyperlink/hyperlink.module';\nimport {AWButtonModule} from '../button/button.module';\n\n\n@NgModule({\n    declarations: [\n        SectionComponent,\n        SubSectionComponent,\n        SectionActionsComponent\n    ],\n    imports: [\n        CommonModule,\n        AccordionModule,\n        AribaCoreModule,\n        AWStringFieldModule,\n        AWHyperlinkModule,\n        AWButtonModule,\n        SharedModule\n    ],\n\n    entryComponents: [\n        SectionComponent,\n        SubSectionComponent,\n        SectionActionsComponent\n    ],\n    exports: [\n        SectionComponent,\n        SectionActionsComponent,\n        SubSectionComponent,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    providers: []\n})\nexport class AWSectionModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    Input,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport {AWDataTable} from '../aw-datatable';\nimport {Datatable2Component} from '../datatable2.component';\nimport {BooleanWrapper, Environment, isBlank, isPresent} from '@aribaui/core';\nimport {BaseComponent} from '../../../core/base.component';\nimport {DomHandler} from 'primeng/primeng';\n\n\nexport type DTHAlignment = 'left' | 'center' | 'right';\n\n\n/**\n * DTColumn represent single column including header and its body. Each column has its own\n * rendererTemplate which a entry to this component.\n *\n * Keeping this separate from the datatable where DT is not really aware what it is rendering,\n * it allows us more flexibility in terms of different type of column inheriting from this\n * one.. Such as:\n *  DTRowDetail  column\n *  DTSingleSelection column\n *  DTMultiSelection column\n *\n * This way we don't do IF/THEN/ELSE inside the datatable and trying to create different cases.\n *\n *  Then later on this will let us create additional logic for the pivotal layout. Because DT\n *  does know anything about the type of the column so whatever is added to the DT.columns it\n *  will be rendered.\n *\n *\n *  Columns can be also frozen meaning if the content overflows they dont scroll. To make the\n *  column frozen we need to use [frozen] binding and se it to TRUE plus it requires a [width]\n *  binding to be set (in px).\n *  We need this to be able to properly position the second table which is changed to absolute\n *  positioning.\n *\n *\n *\n */\n@Component({\n    selector: 'aw-dt-column2',\n    templateUrl: 'dt-column.component.html',\n    styleUrls: ['dt-column.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [DomHandler]\n\n})\nexport class DTColumn2Component extends BaseComponent implements AfterContentInit\n{\n    /**\n     * Column header label.\n     *\n     * Or you can use headerTemplate to define your own template\n     */\n    @Input()\n    label: string;\n\n    /**\n     * What field name to read from the given object\n     */\n    @Input()\n    key: string;\n\n    /**\n     *\n     * Cell alignment. It inserts regular align attribute to the table cell\n     *\n     */\n    @Input()\n    align: DTHAlignment = 'left';\n\n\n    /**\n     * Retrieves dynamic class based on data and then its added to the table cell TD\n     */\n    @Input()\n    bodyClassFn: (column: DTColumn2Component, item: any) => string;\n\n    /**\n     *\n     * If false applies dt-is-hidden style that hides the column\n     *\n     */\n    @Input()\n    isVisible: boolean = true;\n\n    /**\n     * Marks column as sortable which means sorting icon is added to the header with special\n     * sorting handling\n     */\n    @Input()\n    sortable: any;\n\n    /**\n     * Sorting direction\n     *\n     */\n    @Input()\n    sortOrdering: string = 'descending';\n\n    /**\n     * Tells the template if whether to render a label\n     *\n     */\n    @Input()\n    showColumnLabel: boolean = true;\n\n    /**\n     *\n     * See AWDataTable\n     *\n     */\n    @Input()\n    showSubHeader: boolean = false;\n\n\n    /**\n     * Default static class that is added to the TH into the header. It does not rely on data\n     *\n     */\n    @Input()\n    headerStyleClass: string;\n\n    /**\n     * Default static class that is added to the td into the body. It does not rely on data\n     *\n     */\n    @Input()\n    bodyStyleClass: string;\n\n    /**\n     *\n     * Used together with cell selectionMode to tell which column is selectable\n     *\n     */\n    @Input()\n    selectable: boolean = false;\n\n    /**\n     * Use globally defined HEADER template for current column\n     *\n     */\n    @Input()\n    useGlobalHeader: boolean = true;\n\n    /**\n     * Use globally defined SubHeader template for current column\n     *\n     */\n    @Input()\n    useGlobalSubHeader: boolean = true;\n\n    /**\n     * Use globally defined body template\n     *\n     */\n    @Input()\n    useGlobalBody: boolean = true;\n\n\n    /**\n     * Tells if the column is data column  - if it is rendering data or just a label or some\n     * control\n     *\n     * This is important when calculating a column span and we need to know which columns are or\n     * will be just for selection controls and which holds data\n     */\n    @Input()\n    isDataColumn: boolean = true;\n\n    /**\n     * Identifies column that will not scroll horizontally with other columns. Column is\n     * frozen.\n     *\n     * For such columns that are marked as frozen binding [width] is required.\n     *\n     */\n    @Input()\n    frozen: boolean = false;\n\n    /**\n     * Sets the Max Width for the TD. Even TD does not support we calculate the content width\n     * for each cell and then decide if we need to enlarge the column.\n     *\n     * @Experimantal binding that is currently working if the content of the cell is inline\n     * element where we can control whitespace wrapping in order to find out the real width\n     */\n    @Input()\n    maxWidth: string;\n\n\n    /**\n     * Sets the minWidth on the cell. Again just like maxWidth css properly is not supported on\n     * the table so there is a workaround where we create additional row that sets padding right\n     * and this will prevent the column to collapse under specified width\n     *\n     * todo: still TBD\n     */\n    @Input()\n    minWidth: string;\n\n    /**\n     * Main rendering template used by datatable to render each column.\n     */\n    @ViewChild('renderingTemplate')\n    rendererTemplate: TemplateRef<any>;\n\n    /**\n     * Custom header template. It will override provided label\n     */\n    @ContentChild('header')\n    headerTemplate: TemplateRef<any>;\n\n    /**\n     * Custom subHeader template.\n     */\n    @ContentChild('subHeader')\n    subHeaderTemplate: TemplateRef<any>;\n\n    /**\n     * Custom body template that will override read value from the [key] binding\n     */\n    @ContentChild('body')\n    bodyTemplate: TemplateRef<any>;\n\n\n    /**\n     * Internal...\n     */\n    sortOrder: number;\n    maxWidthPx: number = 0;\n    minWidthPx: number = 0;\n    widthPx: number = 0;\n    widestCell: number = 0;\n\n    /**\n     * Reference to Datatable Implementations\n     */\n    dt: AWDataTable;\n\n\n    constructor(public env: Environment,\n                public domHandler: DomHandler)\n    {\n        super(env);\n    }\n\n\n    ngOnInit(): void\n    {\n        super.ngOnInit();\n\n        if (isBlank(this.key) && isBlank(this.label)) {\n            throw new Error('Missing required binding: ' +\n                '[key] or [label] bindings must be used at minimum');\n        }\n\n        // To be able to position second DT we require [width] to be set as well\n        if (this.frozen && isBlank(this.width)) {\n            throw new Error('Missing required binding [width]: ' +\n                'when [frozen]=true then [width] binding needs to be specified.');\n        }\n    }\n\n\n    ngAfterContentInit(): void\n    {\n\n    }\n\n    ngAfterViewInit(): void\n    {\n        // need to deffer this and trigger change detection otherwise I get\n        // value was changed after it was checked error\n        // setTimeout(() =>\n        // {\n\n        // });\n    }\n\n    /**\n     *\n     * When cell selectionMode is enabled this method is triggered when we click on header.\n     * It delegates the call to the DT where it toggles currently selected value\n     *\n     */\n    handleHeaderClick(event: any, element: any): void\n    {\n        if (this.isHeaderSelectable()) {\n            this.dt.onHeaderSelectionChange(element, this);\n\n        } else if (this.sortable) {\n            this.sort(event);\n        }\n        event.preventDefault();\n    }\n\n    /**\n     *\n     * Todo: Implement our own sorting mechanism once we extract the sorting logic to its component\n     *\n     */\n    sort(event: any)\n    {\n        if (!this.sortable) {\n            return;\n        }\n        let targetNode = event.target;\n        if (this.domHandler.hasClass(targetNode, 'dt-u-sortable') ||\n            this.domHandler.hasClass(targetNode, 'dt-col-title') ||\n            this.domHandler.hasClass(targetNode, 'dt-col-sortable-icon'))\n        {\n\n            if (isPresent(this.dt.sortColumn) && this.dt.sortColumn.key === this.key) {\n                this.sortOrder = this.sortOrder * -1;\n                this.sortOrdering = this.dt.sortOrderingForNumber(this.sortOrder);\n\n            } else {\n                this.dt.sortColumn = this;\n\n            }\n            this.dt.dataSource.state.sortKey = this.key;\n            this.dt.dataSource.state.sortOrder = this.dt.sortOrderingForString(this.sortOrdering);\n\n            this.dt.sortSingle();\n        }\n        this.dt.updateDataToRender();\n    }\n\n    /**\n     * Calculated style class based on data\n     *\n     *\n     */\n    dynamicBodyClass(item: any): boolean\n    {\n        let dynClass = isPresent(this.bodyClassFn)\n            ? this.bodyClassFn.apply(this.dt.context, [this, item]) : '';\n\n        if (isPresent(this.bodyStyleClass)) {\n            dynClass += ' ' + this.bodyStyleClass;\n\n        } else if (isPresent(this.styleClass)) {\n            dynClass += ' ' + this.styleClass;\n        }\n\n        return dynClass;\n    }\n\n\n    isRowSelectable(item: any): boolean\n    {\n        if (isPresent(this.dt.isRowSelectable)) {\n            return this.dt.isRowSelectable(item);\n        }\n\n        return false;\n    }\n\n    isCellSelectable(item: any): boolean\n    {\n        return this.dt.selectionMode === 'cell' && this.isRowSelectable(item) && this.selectable;\n\n    }\n\n\n    isHeaderSelectable(): boolean\n    {\n        return this.dt.selectionMode === 'cell' && this.selectable;\n\n    }\n\n\n    getSortOrder()\n    {\n        let order = 0;\n\n        if (isPresent(this.dt.sortColumn) && this.key === this.dt.sortColumn.key) {\n            order = this.dt.sortColumn.sortOrder;\n        }\n        return order;\n    }\n\n    isSorted()\n    {\n        if (!this.sortable) {\n            return false;\n        }\n        return isPresent(this.dt.sortColumn) && this.key === this.dt.sortColumn.key;\n    }\n\n    initialize(table: AWDataTable): void\n    {\n        this.dt = table;\n\n        if (isPresent(this.dt.initialSortKey) && this.dt.initialSortKey === this.key) {\n            this.sortable = true;\n            this.sortOrder = this.dt.sortOrderingForString(this.dt.initialSortOrder);\n            this.dt.sortColumn = this;\n        }\n\n        if (isBlank(this.bodyTemplate) && this.useGlobalBody) {\n            this.bodyTemplate = this.dt.bodyTemplate;\n        }\n\n        if (isBlank(this.headerTemplate) && this.useGlobalHeader) {\n            this.headerTemplate = this.dt.headerTemplate;\n        }\n\n        if (isBlank(this.subHeaderTemplate) && this.useGlobalSubHeader) {\n            this.subHeaderTemplate = this.dt.subHeaderTemplate;\n        }\n\n        if (isBlank(this.bodyClassFn)) {\n            this.bodyClassFn = this.dt.bodyClassFn;\n        }\n\n        this.maxWidthPx = this.widthToPx(this.maxWidth);\n        this.minWidthPx = this.widthToPx(this.minWidth);\n        this.widthPx = this.widthToPx(this.width);\n    }\n\n    /**\n     * This method is called at the end of the view init cycle from the dt.ngAfterViewChecked.\n     *\n     * In case we use MaxWidth directive we set new width once for all columsn\n     */\n    postInitialize(myIndex: number): void\n    {\n        const colIndex = myIndex + 1;\n        let table;\n\n        if (this.dt.hasFrozenColumns()) {\n            table = (<Datatable2Component>this.dt).el\n                .nativeElement.querySelector('.dt-body-frozen table');\n        } else {\n            table = (<Datatable2Component>this.dt).el.nativeElement.querySelector('table');\n        }\n\n\n        if (this.widestCell > 0) {\n            let all = table.querySelectorAll('tr th:nth-child(' + colIndex + '), ' +\n                'tr td:nth-child(' + colIndex + ')').forEach((node: any) =>\n            {\n                node.style.width = this.widestCell + 'px';\n            });\n        }\n    }\n\n\n    /**\n     * You either use this binding directly and say its datacolumn or when there is a [key]\n     * biding we know it refers to some field.\n     *\n     */\n    isValueColumn(): boolean\n    {\n        return (isPresent(this.isDataColumn) && BooleanWrapper.isTrue(this.isDataColumn)) ||\n            isPresent(this.key);\n    }\n\n    /**\n     * When we are in outline mode  we need to also indend each selection control accordingly.\n     *\n     * indent - 1 > only offset with\n     * indent\n     */\n    indentForControl(cell: any, level: number): any\n    {\n        if (this.dt.isOutline() && level > 0 && cell.offsetWidth > 0\n            && isPresent(cell.nextElementSibling))\n        {\n\n            let outlineNodePadding =\n                parseInt(getComputedStyle(cell.nextElementSibling).paddingLeft) || 0;\n\n            // 1st level is pushed as root\n            if (this.dt.pushRootSectionOnNewLine) {\n                return (level === 1) ? null : (this.dt.indentationPerLevel * level)\n                    - outlineNodePadding;\n            } else {\n                return (this.dt.indentationPerLevel * level) + outlineNodePadding;\n            }\n        }\n        return null;\n    }\n\n\n    /**\n     *\n     * Internal\n     */\n    private widthToPx(width: string): number\n    {\n        let px;\n        if (isPresent(width)) {\n            if (width.indexOf('%') > 0) {\n                const nonPc = parseFloat(width) / 100;\n                px = nonPc * (<Datatable2Component>this.dt).el.nativeElement.offsetWidth;\n            } else {\n                px = parseFloat(width);\n            }\n        }\n\n        return px;\n    }\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component} from '@angular/core';\n\n/**\n * An datatable header area.\n *\n * See {@link DataTableComponent} for more explanation.\n */\n@Component({\n    selector: 'aw-dt-header2',\n    template: '<ng-content></ng-content>'\n})\nexport class DTHeaderComponent2\n{\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, Input, ViewEncapsulation} from '@angular/core';\nimport {Environment, isPresent} from '@aribaui/core';\nimport {DomHandler} from 'primeng/primeng';\nimport {DTColumn2Component} from '../dt-column.component';\nimport {AWDataTable} from '../../aw-datatable';\n\n\n/**\n *\n * Custom column implementation to render detail row spaning its column across whole table width.\n *\n *\n */\n@Component({\n    selector: 'aw-dt-detail-column',\n    templateUrl: 'dt-detail-row.component.html',\n    styleUrls: ['dt-detail-row.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [DomHandler]\n\n})\nexport class DTDetailRowComponent extends DTColumn2Component\n{\n\n    /**\n     * Defines current visibility for current data row using method reference\n     *\n     */\n    @Input()\n    isVisibleFn: (column: DTColumn2Component, item: any) => boolean;\n\n\n    /**\n     *\n     * tells if we need to render a line between item row and its detail\n     *\n     */\n    @Input()\n    showRowLine: boolean = true;\n\n\n    constructor(public env: Environment, public domHandler: DomHandler)\n    {\n        super(env, domHandler);\n    }\n\n\n    ngOnInit(): void\n    {\n        // just to get around the check in parent class\n        this.key = '';\n        super.ngOnInit();\n    }\n\n\n    /**\n     * Check if we need to keep some leading TDs\n     *\n     */\n    visibleLeadingCols(): number\n    {\n        return this.dt.numberOfColsBeforeData - (this.dt.hasInvisibleSelectionColumn() ? 1 : 0);\n    }\n\n\n    /**\n     *\n     * Check if we can show detail row/column using either [isVisible] or [isVisibleFn] bindings.\n     * Here can hook on application level custom method to decide if current item has detail row\n     * or not\n     *\n     * Or we can use isVisible=true to tell all row have detail row\n     *\n     */\n    showDetailRow(item: any): boolean\n    {\n        let isVisible = this.isVisible;\n        if (isPresent(this.isVisibleFn)) {\n            isVisible = this.isVisibleFn.apply(this.dt.context, [this, item]);\n        }\n        return isVisible;\n    }\n\n\n    initialize(table: AWDataTable): void\n    {\n        super.initialize(table);\n\n        this.isVisible = !this.dt.isOutline() || !this.dt.pivotalLayout;\n    }\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, ViewEncapsulation} from '@angular/core';\nimport {Environment} from '@aribaui/core';\nimport {DomHandler} from 'primeng/primeng';\nimport {DTColumn2Component} from '../dt-column.component';\n\n\n/**\n *\n *\n *\n *\n */\n@Component({\n    selector: 'aw-dt-detail-column-expand',\n    templateUrl: 'dt-detail-row-expander.component.html',\n    styleUrls: ['dt-detail-row-expander.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [DomHandler]\n\n})\nexport class DTDetailRowExpanderComponent extends DTColumn2Component\n{\n\n    constructor(public env: Environment, public domHandler: DomHandler)\n    {\n        super(env, domHandler);\n\n        // we dont want to show the row/column unless application says so\n        this.isVisible = false;\n\n        // default width of the selection control\n        this.width = '45px';\n    }\n\n\n    ngOnInit(): void\n    {\n        // just to get around the check in parent class\n        this.key = '';\n\n        super.ngOnInit();\n    }\n\n    toggleExpansion(event: any, item: any): void\n    {\n        this.dt.detailRowExpansionState.toggle(item);\n        event.stopPropagation();\n    }\n\n    calculateStyleClass(item: any): string\n    {\n        return this.dt.detailRowExpansionState.isExpanded(item) ?\n            'icon-slim-arrow-down' : 'icon-slim-arrow-right';\n    }\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\n\n\nimport {TemplateRef} from '@angular/core';\nimport {SelectionMode} from './datatable2.component';\nimport {DTColumn2Component} from './column/dt-column.component';\n\nimport {DetailRowExpansionState, DT2DataSource} from './datatable2-data-source';\nimport {OutlineState} from '../outline';\nimport {DTDetailRowComponent} from './column/detail-row/dt-detail-row.component';\n\n\nexport const DragEvents: string[] = ['mousedown', 'dragstart', 'dragover', 'dragenter', 'dragleave',\n    'drop', 'dragend'];\n\nexport enum DragDirection\n{\n    None = 'none',\n    Up = 'dt-drag-row-top',\n    Down = 'dt-drag-row-bottom',\n    Middle = 'dt-drag-row-both'\n}\n\n\nexport enum DropPosition\n{\n    Before = 'before',\n    After = 'after',\n    Into = 'into'\n}\n\n\n/**\n * Abstract type that is sharable among dependant DT object such as Columns, DataSources,\n * Directives to be able to communicate back to the datatable mainly to avoid circular dependency\n */\nexport interface AWDataTable\n{\n\n    /**\n     * Allows you to pass your own datasource to override default one. Also when dataSource is\n     * used the destinationClass or list are ignored\n     */\n    dataSource: DT2DataSource;\n\n    /**\n     * Manages outline states for Datatables using outline control\n     */\n    outlineState: OutlineState;\n\n\n    /**\n     * In case we have detail row remember its expansion state\n     */\n    detailRowExpansionState: DetailRowExpansionState;\n\n    /**\n     * What column is used as first for sorting\n     */\n    initialSortKey: string;\n\n    /**\n     * Allow to change sorting direction\n     */\n    initialSortOrder: string;\n\n    /**\n     *\n     * Tells DT if we support cell selection or row based selection which is regular DT.\n     *\n     */\n    selectionMode: SelectionMode;\n\n    /**\n     * In case of single or multiselection show controls\n     *\n     */\n    showSelectionColumn: boolean;\n\n    /**\n     * Tells if we want to render one selection control in the header to select all the\n     * rows. Applicable for multiselection\n     *\n     */\n    showSelectAll: boolean;\n\n    /**\n     * Identify if row or cell is selectable based on data\n     */\n    isRowSelectable: (item: any) => boolean;\n\n\n    /**\n     * Each DTColumn have have its own template to provide content for header, subheader and\n     * body but if those template are identical there would be too much duplicate code to replicate\n     * for each column the same. Therefore we have these global templates that you can declare\n     * on DT level (not under columns) and content of these template will be used for each column\n     *\n     * You can mix them as well. You can have global templates as well as template on the Column\n     * level which would override the global one\n     *\n     */\n    headerTemplate: TemplateRef<any>;\n\n    /**\n     * See headerTemplate for more details\n     */\n    subHeaderTemplate: TemplateRef<any>;\n\n    /**\n     * See headerTemplate for more details\n     */\n    bodyTemplate: TemplateRef<any>;\n    /**\n     * See headerTemplate for more details\n     */\n    headerFilterTemplate: TemplateRef<any>;\n\n    /**\n     *\n     * Render a subHeader template if present\n     *\n     */\n    showSubHeader: boolean;\n\n    /**\n     * This is global style function that can be bound to table and read by each column.\n     * The same you can see on the DTColumn\n     */\n    bodyClassFn: (column: DTColumn2Component, item: any) => string;\n\n\n    /**\n     * Context is important when we execute any function that is passed in as input. We need to\n     * give option to be executed within the context (this) of the code using this component.\n     *\n     */\n    context: any;\n\n    // Outline needed properties\n\n    /**\n     * Pushes outlineFor section on the new line and 2nd level child make it root for this\n     * section\n     */\n    pushRootSectionOnNewLine: boolean;\n\n    /**\n     * You can change default indentation for the outline nodes\n     *\n     */\n    indentationPerLevel: number;\n\n    /**\n     * When active applies special styles to the DT. Later on once pivot is implemented this will\n     * also add additional behavior to the DT\n     *\n     */\n    pivotalLayout: boolean;\n\n\n    /**\n     * When sorting is enabled this is current active column being sorted.\n     *\n     *  - we dont support multiple column sorting\n     */\n    sortColumn: DTColumn2Component;\n\n    /**\n     * Reference to aw-dt-detail-column if present detail row is rendered for specified\n     * items\n     */\n    rowDetailColumn: DTDetailRowComponent;\n\n    /**\n     * Used for spaning calculation or for the detail row to identify correct number of columns\n     * to span, when they are some non-data column (expansion control, single/multi selection)\n     */\n    numberOfColsBeforeData: number;\n\n\n    /**\n     *  what is the index of first data columns\n     */\n    startOfFirstDataColumn: number;\n\n\n    /**\n     * Triggered when in cell selection mode\n     *\n     */\n    onCellSelectionChange(cell: any, column: DTColumn2Component, item: any): void;\n\n\n    /**\n     * Triggered by column whe header is selected. Current we assume the only one header can be\n     * selected at the time.\n     *\n     */\n    onHeaderSelectionChange(cell: any, column: DTColumn2Component): void;\n\n\n    onHandleRowClicked(event: any, item: any): void;\n\n    /**\n     *\n     * Handles row selection logic where if the item is found inside the selected items, then\n     * its removed otherwise its added.\n     *\n     * Todo: Sync & refactor this with dt.onCellSelectionChange - pretty similar code\n     *\n     * We want to have rowToggle as well as we will have rowSelect or somethign similar to\n     * identify we are dealing with multiselect and single selection\n     */\n    onRowToggle(event: any, item: any): void;\n\n\n    /**\n     *\n     * Handles row single selection\n     *\n     */\n    onRowSelect(event: any, item: any): void;\n\n    /**\n     * When dealing with outline (tree) we need to make sure when we select some root item it\n     * will automatically also select all its children\n     *\n     */\n    onHandleOutlineRowToggleToChildren(currentItem: any, isSelected: boolean): void;\n\n\n    /**\n     *\n     * Just like for onHandleOutlineRowToggleToChildren the same behavior needs to be applied for\n     * towards up.\n     *\n     *\n     */\n    oHandleOutlineRowToggleToParent(currentItem: any, isSelected: boolean): void;\n\n\n    /**\n     *\n     * Called by D&D row directive to update this TD that row reordering needs to happen. We\n     * receive an INDEX of row we are dragging and new drop position, plus information if it\n     * needs to be dropped before new row position or after.\n     *\n     */\n    onDnDRowDrop(origPos: number, newPos: number, dropPos: DropPosition): void;\n\n\n    /**\n     *\n     * When detail row is combined with outline control we need make sure that we maintain the\n     * correct state for items that are eligible for detail row\n     *\n     * In this specific case the detail row does not have its own expander but utilizing the\n     * outlineControl\n     */\n    onOutlineExpandChange(event: any): void;\n\n\n    /**\n     * Support for single column sorting\n     *\n     *\n     */\n    sortSingle(): void;\n\n    /**\n     * When data changes, either they are lazily fetched or @Input LIST is updated we need\n     * resort out data based on current state and update internal list dataToRender so new\n     * data can re-rendered + triggers event valueChange\n     *\n     */\n    handleDataChange(): void;\n\n    updateDataToRender(datasource?: any): void;\n\n\n    /**\n     * Select or unselect all rows. Used by header checkbox\n     *\n     */\n    toggleAllColumns(event: any): void;\n\n    /**\n     * More like utility methods to translate string<-->number value for sorting\n     *\n     * Currently used only by DTColumn. We might want to move this its own component for\n     * headerSort and ordering\n     *\n     */\n    sortOrderingForString(direction: string): number;\n\n    sortOrderingForNumber(direction: number): string;\n\n    visibleColumns(): DTColumn2Component[];\n\n    hasFrozenColumns(): boolean;\n\n    /**\n     * Placeholder functionality for the single/multiselect functionality where we need to track if\n     * we support selection plus how many column it occupies and if the selection controls are\n     * visible or hidden.\n     */\n    hasInvisibleSelectionColumn(): boolean;\n\n\n    /**\n     *\n     * Placeholder to identify if they are non-value column\n     *\n     */\n    hasLeadingSelectColumn(): boolean;\n\n\n    /**\n     * To compare the data if we use deep object equality and this is used within this class as\n     * well as from the DTColumn to conditionally add class which select the cell\n     *\n     * We might want to change to check only a key of the object some unique identifier.\n     */\n    isHeaderSelected(item: DTColumn2Component): boolean;\n\n    /**\n     *\n     * Check if the specific cell is selected. We need two points to identify if cell is selected\n     * the actual Item that could represent whole row and Column\n     *\n     */\n    isBodyCellSelected(column: DTColumn2Component, item: any): boolean;\n\n    /**\n     *  Check if the given item is among the selected ones\n     *\n     */\n    isRowSelected(item: any): boolean;\n\n    /**\n     *\n     * When [children] binding is present then it means we need to render it as a tree\n     *\n     */\n    isOutline(): boolean;\n\n\n    /**\n     *\n     * Defaults the checkbox to either selected and not selected depended on internal state\n     *\n     */\n    isToggleAllColumnSelected(): boolean;\n\n    isToggleAllColumnDisabled(): boolean;\n\n\n    /**\n     *\n     * Uses are field path utility class to retrieve data from object\n     *\n     */\n    getValue(data: any, field: string): any;\n\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    assert,\n    Entity,\n    isBlank,\n    isEntity,\n    isPresent,\n    isString,\n    ListWrapper,\n    MapWrapper\n} from '@aribaui/core';\nimport {Observable} from 'rxjs';\nimport {DataSource, DSInitParams} from '../../core/data/data-source';\nimport {DataProvider} from '../../core/data/datatype-registry.service';\nimport {DataFinder, DataFinders, QueryType} from '../../core/data/data-finders';\nimport {DataProviders} from '../../core/data/data-providers';\nimport {DTColumn2Component} from './column/dt-column.component';\nimport {AWDataTable, DropPosition} from './aw-datatable';\n\n\n/**\n * Concrete DataSource implementation for Datatable which defines state and column definition that\n * can programmatically modify rendered columns (if provided) and method for inserting and\n * and deleting records;\n *\n * All operations dealing with data use Observable<T> and instant() method to retrieve current\n * state is not implemented.\n *\n *\n */\nexport class DT2DataSource extends DataSource\n{\n    static readonly MaxLimit = 100;\n\n    /**\n     * Matching dataProviders and finders\n     */\n    dataProvider: DataProvider<any>;\n    dataFinder: DataFinder;\n\n    /**\n     * Keep track of current datatable state\n     */\n    state: Datatable2State;\n    initialized = false;\n    debugTime: number;\n    /**\n     * Defines object being rendered\n     */\n    private entity: EntityDef2;\n\n    constructor(public dataProviders?: DataProviders, public finders?: DataFinders)\n    {\n        super(dataProviders, finders);\n\n        this.state = Datatable2State.create();\n\n        this.debugTime = new Date().getTime();\n    }\n\n\n    init(...args: any[]): void\n    {\n        if (isBlank(args) || args.length !== 1 && !isDTInitParams(args[0])) {\n            throw new Error('You need to initialize DS with (DSChooserInitParams)');\n        }\n        let init: DTDSInitParams = args[0];\n\n        // use existing or find best match for dataProvider\n        this.dataProvider = isPresent(init.dataProvider) ? init.dataProvider\n            : this.dataProviders.find(init.obj);\n\n        // use existing or find best match for dataFinder\n        this.dataFinder = isPresent(init.dataFinder) ? init.dataFinder\n            : this.finders.find(this.dataProvider, init.queryType);\n\n        assert(isPresent(this.dataProvider) && isPresent(this.dataFinder),\n            'DataSource incorrectly initialized. (DataProvider, DataFinder) missing. ');\n\n        this.dataFinder.lookupKey = init.lookupKey;\n        if (isBlank(init.state)) {\n            this.state = new Datatable2State();\n        } else {\n            this.state = init.state;\n        }\n\n        this.initialized = true;\n    }\n\n\n    /**\n     * Triggers async fetch data request and result is given back using dataProvider.dataChanges\n     *\n     */\n    fetch(withParams?: Datatable2State): void\n    {\n        let params = null;\n        if (isPresent(withParams)) {\n            params = new Map().set('offset', withParams.offset)\n                .set('limit', withParams.limit)\n                .set('orderby', withParams.sortKey)\n                .set('selector', withParams.sortOrder);\n        }\n\n        this.dataProvider.fetch(params).subscribe((result: any[]) =>\n        {\n            if (withParams.offset > 0) {\n                let incrData = [...this.dataProvider.dataChanges.getValue(), ...result];\n                this.dataProvider.dataChanges.next(incrData);\n            } else {\n                this.dataProvider.dataChanges.next(result);\n            }\n        });\n    }\n\n\n    /**\n     * Component uses this method to open up continuous stream to listen for any changes which\n     * need to be reflected on the UI.\n     *\n     * Dont forget to unsubscribe when component is destroyed.\n     */\n    open<T>(): Observable<T[]>\n    {\n        return this.dataProvider.dataChanges.asObservable();\n    }\n\n    close(): void\n    {\n        this.dataProvider = null;\n        this.dataFinder = null;\n    }\n\n\n    /**\n     * If CRUD is enabled we delegate calls to DataProvider that is responsible to tell the\n     * dataProvider.dataChanges that are new data. If not enabled we have default implementation\n     * which works with local array\n     *\n     */\n    insert(object: any): void\n    {\n        if (this.dataProvider.canCRUD()) {\n            this.dataProvider.insert(object);\n\n        } else {\n            this.dataProvider.offScreenData.push(object);\n            this.dataProvider.dataChanges.next(this.dataProvider.offScreenData);\n        }\n    }\n\n\n    /**\n     * Please see {@link insert} method\n     *\n     */\n    remove(object: any): void\n    {\n        if (this.dataProvider.canCRUD()) {\n            this.dataProvider.remove(object);\n\n        } else {\n            ListWrapper.removeIfExist(this.dataProvider.offScreenData, object);\n            this.dataProvider.dataChanges.next(this.dataProvider.offScreenData);\n        }\n    }\n\n    /**\n     *\n     * Provides access to DataFinder which can accept either plain string or Map.\n     *\n     * To be able to provide correct input we need to ask DataFinder if it supports FullText like\n     * type query or Predicate. In case of Predicate we build the Map with different key/value\n     * pairs\n     *\n     *\n     */\n    find(pattern?: any): void\n    {\n        if (isBlank(pattern) || pattern.length === 0) {\n            // if we received empty string return orginal list\n            this.fetch(this.state);\n            return;\n        }\n\n        let searchParam: any = pattern;\n        if (this.dataFinder.accepts(this.dataProvider, QueryType.Predicate)) {\n            searchParam = new Map().set('query', pattern).set('limit', DT2DataSource.MaxLimit);\n\n            if (isPresent(this.state.sortKey)) {\n                searchParam.set('orderby', this.state.sortKey);\n            }\n\n            if (isPresent(this.state.sortKey)) {\n                searchParam.set('selector', this.state.sortOrder);\n            }\n        } else {\n            assert(isString(pattern), 'Cannot pass non-string value to FullText Finder');\n        }\n\n        this.dataFinder.match<any>(searchParam).subscribe((result: any[]) =>\n        {\n            this.dataProvider.dataChanges.next(result);\n        });\n    }\n\n\n    /**\n     *\n     * Data source delegates the responsibility to the given data provider which needs to implement\n     * specific sorting mechanism\n     *\n     * Todo: Extend to sort by multiple columns\n     *\n     */\n    sort(key: string, sortOrder: number): void\n    {\n        if (isBlank(this.dataProvider.data()) || this.dataProvider.data().length === 0) {\n            return;\n        }\n        this.state.sortKey = key;\n        this.state.sortOrder = sortOrder;\n        this.fetch(this.state);\n    }\n\n    /**\n     *\n     * Persist db state\n     *\n     */\n    updateState(offset: number, sortField: string, sOrder: number): void\n    {\n        this.state.offset = offset;\n        this.state.sortKey = sortField;\n        this.state.sortOrder = sOrder;\n    }\n\n\n    /**\n     *\n     * reshuffles current array based on new row D&D result.\n     *\n     * Since there is a difference if we move item from bottom or from the top and then accordingly\n     * highlighting a space between rows. We need to reflect this in here as well.\n     *\n     * UseCase 1:\n     *\n     * 1. You can grab item with index 0 and move it down so that you can see a dropping line\n     * between row with index 2 - 3\n     *\n     * 2. In this case splice() starts from position 2 and insert all elements after 2\n     *      splice(start: number, deleteCount: number, ...items: T[]): T[];\n     *\n     * 3. no need to update newPos\n     *\n     * UseCase 2:\n     *\n     * 1. You can grab item with index 0 and move all the way down of the DT and now move the\n     * row toward TOP and space between rows with index 2 - 3 is highlighted again.\n     *\n     * 2. Here is the difference, before we highlighted row #2 with line at the bottom, now\n     * it seems the same but its highlighted row #3 with line at the TOP.\n     *\n     * * This is the reason whey we need to do newPos -= 1 or newPos += 1; depending our direction\n     * where where the line between rows is created.\n     *\n     *\n     * We don't need any complicated calculation trying to find out if we are on one half of the row\n     * or second half and based on this try to apply certain style. This would not give so much\n     * space if we want drop row into the row. And the calculation with coordinates woudl be too\n     * complicated.\n     *\n     * We simply remember the direction we are moving and based on this we apply style to\n     * to create a line at the TOP if we are going upwards or bottom otherwise.\n     *\n     *\n     */\n    reorderRows(origPos: number, newPos: number, dropPos: DropPosition): void\n    {\n        let array = this.dataProvider.data().slice();\n\n        // take something from top and drag&drop under\n        if (newPos > origPos && dropPos === DropPosition.Before && newPos < array.length) {\n            newPos -= 1;\n\n            // take something from bottom and drag&drop above\n        } else if (newPos < origPos && dropPos === DropPosition.After && newPos >= 0) {\n            newPos += 1;\n        }\n\n        array.splice(newPos, 0, ...array.splice(origPos, 1)[0]);\n        this.dataProvider.dataChanges.next(array);\n    }\n\n}\n\n/**\n * Entity definition to be used to initialize programmatically columns\n */\nexport interface EntityDef2\n{\n    propertyKeys: string[];\n\n    defaultFormatter: (key: any) => string;\n\n    displayStringForKey: (key: string) => string;\n\n    defaultAlignmentForKey: (key: string) => string;\n}\n\n/**\n * Keeps current datatable state the state which drivers the way while fetching the data as well\n * encapsulate set of properties that needs to be persistet in order to recover a state after e.g.\n * browser refresh\n *\n *\n * todo: Create methods to convert this state from and to JSON for easier serialization\n */\nexport class Datatable2State\n{\n    public static readonly Ascending = 1;\n    public static readonly Descending = -1;\n\n    /**\n     * Properties for paging and fetching\n     */\n    offset: number = 0;\n    limit: number = 0;\n\n    /**\n     * Identifies default value that is used to render N number of rows in non-fullscreen\n     * mode\n     *\n     */\n    displayLimit: number = 0;\n\n    /**\n     * Current sorting field\n     */\n    sortKey: string;\n\n    /**\n     * Sorting order of the sort field. DataTable support sorting for multiple column but we\n     * dont persist it now. Maybe in the future\n     */\n    sortOrder: number = Datatable2State.Ascending;\n\n    /**\n     * If we are using global filter for current datatable then save it here\n     */\n    currentSearchQuery: string = '';\n\n    /**\n     * Current if any preselected filter\n     */\n    currentFilter: any;\n\n    /**\n     * Represent current selection depending on selection mode.\n     *\n     * Current selection used both for row selection and cell selection. Row selection is used when\n     * SingleSelect and MultiSelect once we implement this.\n     *\n     */\n    selection: any;\n\n\n    /**\n     * When header selection is enabled it captures currently selected column\n     */\n    headerSelection: DTColumn2Component;\n\n\n    /**\n     *\n     *  Holds current state of the outline tree if used\n     *\n     */\n    outlineState?: Map<any, boolean>;\n\n    /**\n     *\n     *  Holds current state of the detail rows if used\n     *\n     */\n    detailRowExpandState?: Map<any, boolean>;\n\n\n    constructor()\n    {\n        this.outlineState = new Map<any, boolean>();\n        this.detailRowExpandState = new Map<any, boolean>();\n    }\n\n    static create(offset: number = 0, limit: number = 15, displayLimit: number = 5,\n                  sortField: string = '', sOrder: number = 0, searchQuery?: string, filter?: any,\n                  outlineState: Map<any, boolean> = new Map<any, boolean>(),\n                  detailRowState: Map<any, boolean> = new Map<any, boolean>()): Datatable2State\n    {\n        let s = new Datatable2State();\n        s.offset = offset;\n        s.limit = limit;\n        s.displayLimit = displayLimit;\n        s.sortKey = sortField;\n        s.sortOrder = sOrder;\n        s.currentSearchQuery = searchQuery;\n        s.currentFilter = filter;\n        s.outlineState = outlineState;\n        s.detailRowExpandState = detailRowState;\n\n        return s;\n    }\n\n    static fromJSON(data: string): Datatable2State\n    {\n        let state: DTStateSerializableHelper = JSON.parse(data);\n        let ds = new Datatable2State();\n        ds.offset = state.offset;\n        ds.limit = state.limit;\n        ds.displayLimit = state.displayLimit;\n        ds.sortKey = state.sortKey;\n        ds.sortOrder = state.sortOrder;\n        ds.currentSearchQuery = state.currentSearchQuery;\n        ds.outlineState = MapWrapper.createFromAnyMap<boolean>(state.outlineState);\n        ds.detailRowExpandState = MapWrapper.createFromAnyMap<boolean>(state.detailRowExpandState);\n\n        return ds;\n    }\n\n\n    static toJSON(data: Datatable2State): string\n    {\n        let toConvert: DTStateSerializableHelper = {\n            offset: data.offset,\n            limit: data.limit,\n            displayLimit: data.displayLimit,\n            sortKey: data.sortKey,\n            sortOrder: data.sortOrder,\n            currentSearchQuery: data.currentSearchQuery,\n            outlineState: MapWrapper.toAnyMap(data.outlineState),\n            detailRowExpandState: MapWrapper.toAnyMap(data.detailRowExpandState)\n\n        };\n        return JSON.stringify(toConvert);\n    }\n\n}\n\n\n/**\n * This needs to go to DTDataSource to keep and manage the state of the detail row. The idea is\n * simple we have a map holding item reference as a key and boolean value indicating if the\n * detail row is visible\n *\n * Todo: move this out to DS\n */\nexport class DetailRowExpansionState\n{\n\n    expansionStates: Map<any, boolean>;\n\n\n    constructor(private dt: AWDataTable)\n    {\n    }\n\n    get detailExpansionEnabled(): boolean\n    {\n        return isPresent(this.expansionStates);\n    }\n\n    set detailExpansionEnabled(value: boolean)\n    {\n\n        if (value) {\n            this.expansionStates = new Map<any, boolean>();\n        } else {\n            this.expansionStates = null;\n        }\n    }\n\n    toggle(item: any): void\n    {\n        let key = this.itemToKey(item);\n        if (!this.isExpanded(item)) {\n            this.expansionStates.set(key, true);\n        } else {\n            this.expansionStates.delete(key);\n        }\n\n        this.dt.dataSource.state.detailRowExpandState = this.expansionStates;\n    }\n\n    isExpanded(item: any): boolean\n    {\n        let key = this.itemToKey(item);\n        // handle special case where we collapse parent of parent while detail row is expanded\n        if (this.dt.isOutline() && !this.dt.outlineState.isExpanded(key)) {\n            this.expansionStates.delete(key);\n            return false;\n        }\n\n        let isOutlineExpanded = this.dt.isOutline() ? this.dt.outlineState.isExpanded(key) : true;\n        return isPresent(key) && this.expansionStates.has(key);\n    }\n\n    private itemToKey(item: any): string\n    {\n        return isEntity(item) ? (<Entity>item).identity() : item;\n    }\n}\n\nexport interface DTStateSerializableHelper\n{\n    offset: number;\n    limit: number;\n    displayLimit: number;\n    sortKey: string;\n    sortOrder: number;\n    currentSearchQuery: string;\n    currentFilter?: any;\n    outlineState: any;\n    detailRowExpandState: any;\n\n}\n\nexport function isDTInitParams(init: DTDSInitParams): init is DTDSInitParams\n{\n    return isPresent(init.obj) || isPresent(init.queryType) || isPresent(init.entity);\n}\n\n/**\n * To make initialization easier we have this common format.\n */\nexport interface DTDSInitParams extends DSInitParams\n{\n\n    /**\n     * Object definition for the data\n     */\n    entity?: EntityDef2;\n\n    state?: Datatable2State;\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, ViewEncapsulation} from '@angular/core';\nimport {Environment} from '@aribaui/core';\nimport {DomHandler} from 'primeng/primeng';\nimport {DTColumn2Component} from '../dt-column.component';\n\n\n/**\n *\n * Column implementation for the Multiselection where we show checkbox control\n *\n *\n */\n@Component({\n    selector: 'aw-dt-multi-select-column',\n    templateUrl: 'dt-multi-select-column.component.html',\n    styleUrls: ['dt-multi-select-column.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [DomHandler]\n\n})\nexport class DTMultiSelectColumnComponent extends DTColumn2Component\n{\n\n    constructor(public env: Environment, public domHandler: DomHandler)\n    {\n        super(env, domHandler);\n\n        // default width of the selection control\n        this.width = '45px';\n    }\n\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, ViewEncapsulation} from '@angular/core';\nimport {Environment} from '@aribaui/core';\nimport {DomHandler} from 'primeng/primeng';\nimport {DTColumn2Component} from '../dt-column.component';\n\n\n/**\n *\n * Column implementation for the SingleSelect where we show checkbox control\n *\n *\n */\n@Component({\n    selector: 'aw-dt-single-select-column',\n    templateUrl: 'dt-single-select-column.component.html',\n    styleUrls: ['dt-single-select-column.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [DomHandler]\n\n})\nexport class DTSingleSelectColumnComponent extends DTColumn2Component\n{\n\n    constructor(public env: Environment, public domHandler: DomHandler)\n    {\n        super(env, domHandler);\n\n        // default width of the selection control\n        this.width = '45px';\n    }\n\n\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n *  @original-license\n *  The MIT License (MIT)\n *  Copyright (c) 2016-2017 PrimeTek\n *\n *  Credit: Derived and extended from Prime-ng datable where we needed more modular solution.\n *  We reused the core structure and layout but had to refactor both code and template to match our\n *  needs. More in the description\n *\n *\n */\nimport {\n    AfterContentInit,\n    AfterViewChecked,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Injector,\n    Input,\n    NgZone,\n    Output,\n    QueryList,\n    SimpleChanges,\n    TemplateRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport {ObjectUtils} from 'primeng/components/utils/objectutils';\nimport {Subscription} from 'rxjs';\nimport {isOutlineNode, OutlineState} from '../outline/index';\nimport {BaseComponent} from '../../core/base.component';\nimport {\n    assert,\n    BooleanWrapper,\n    Environment,\n    equals,\n    FieldPath,\n    isBlank,\n    isPresent,\n    ListWrapper\n} from '@aribaui/core';\nimport {AWDataTable, DropPosition} from './aw-datatable';\nimport {DTColumn2Component} from './column/dt-column.component';\nimport {DTHeaderComponent2} from './header/header.component';\nimport {DTDetailRowComponent} from './column/detail-row/dt-detail-row.component';\nimport {\n    DTDetailRowExpanderComponent\n} from './column/detail-row-expander/dt-detail-row-expander.component';\nimport {DATA_SOURCE} from '../../core/data/data-source';\nimport {DataProviders} from '../../core/data/data-providers';\nimport {DataFinders, QueryType} from '../../core/data/data-finders';\nimport {Datatable2State, DetailRowExpansionState, DT2DataSource} from './datatable2-data-source';\nimport {\n    DTMultiSelectColumnComponent\n} from './column/multi-select/dt-multi-select-column.component';\nimport {\n    DTSingleSelectColumnComponent\n} from './column/single-select/dt-single-select-column.component';\nimport {ModelFormat} from '../outline/outline-for.component';\n\n\nexport type SelectionMode = 'multi' | 'single' | 'cell' | 'none';\n\n/**\n * DT component that implements the data grid that shows tabular data. Even the basic\n * structure is based on PrimeNG datatable its completely refactored into smaller pieces that\n * allows more extensibility and trying to stay as close as possible to existing AWL implementation\n *\n * There are 3 main pieces:\n *\n *  Table Wrapper - focuses on the outer structure. Container with basic datable layout plus\n *  contains any additional panels that datatable needs such as our new concept how editing will\n *  work - sliding panel from the bottom\n *\n *  Datatable Column - Instead of rendering everything inside DT I split the part that renders\n *  column into separate component. This way component column has its own renderer template which\n *  can render both header and data cells.\n *  Later on DTColumn is then extended to support other additional column types\n *  SingleSelectionColumn, MultiSelectionColumn, both responsible for rendering selection controls.\n *\n * To support pivotal layout this can be extended for other additional columns that implements their\n * own rendering templates\n *\n * Datatable - The main component that is only focus on header and body rendering and basaed on the\n * column type it will render the correct template\n * column type it will render the correct template\n *\n *\n *\n *\n *\n */\n@Component({\n    selector: 'aw-datatable2',\n    templateUrl: 'datatable2.component.html',\n    styleUrls: ['datatable2.component.scss'],\n    providers: [\n        ObjectUtils,\n        OutlineState,\n        {provide: DATA_SOURCE, useClass: DT2DataSource, deps: [DataProviders, DataFinders]},\n    ],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n\n})\nexport class Datatable2Component extends BaseComponent implements AWDataTable, AfterViewChecked,\n    AfterViewInit, AfterContentInit\n{\n\n    /**\n     *  List of items to show in the datatable.\n     *\n     *  todo: implement the same Datasource and lazy loading just like I did it for datatable\n     */\n    @Input()\n    list: any[];\n\n    /**\n     * Name of the entity for which DataProvider will be loaded. You can either pass list of items\n     * or use this destinationClass. Not both\n     */\n    @Input()\n    destinationClass: string;\n\n\n    /**\n     * Used by TableWrapper to add user defined clas into the table tag\n     *\n     */\n    @Input()\n    tableStyleClass: string;\n\n    /**\n     * See headerTemplate for more details\n     */\n    @Input()\n    bodyClassFn: (column: DTColumn2Component, item: any) => string;\n\n\n    /**\n     * See AWDataTable\n     */\n    @Input()\n    isRowSelectable: (item: any) => boolean;\n\n\n    /**\n     *  Hides or shows table heading where we have filters and tools menus\n     */\n    @Input()\n    showTableHeader: boolean = true;\n\n\n    /**\n     * See AWDataTable\n     *\n     */\n    @Input()\n    pivotalLayout: boolean = false;\n\n    /**\n     * See AWDataTable\n     *\n     */\n    @Input()\n    context: any;\n\n    /**\n     * See AWDataTable\n     */\n    @Input()\n    initialSortOrder: string = 'descending';\n\n    /**\n     * See AWDataTable\n     */\n    @Input()\n    initialSortKey: string;\n\n\n    /**\n     * When DT is loaded in the page and we are not in the full screen (full page mode), this\n     * is hte number of lines that DT will show\n     *\n     * todo: come up with better name\n     */\n    @Input()\n    displayRowSize: number = 10;\n\n\n    /**\n     * Used for paging on lazy loading using infinite scroller to set initial fetch limit size\n     *\n     * todo: come up with better name !!!\n     *\n     */\n    @Input()\n    pageSize: number = 15;\n\n\n    /**\n     * See AWDataTable\n     */\n    @Input()\n    dataSource: DT2DataSource;\n\n    /**\n     * Default message when there are no data .\n     *\n     * todo: Use i18n value and create resource file\n     */\n    @Input()\n    emptyMessage: string = 'No records found';\n\n\n    /**\n     * Developer can provide custom trackBy function that will be used to iterate over the\n     * records\n     */\n    @Input()\n    rowTrackBy: (index: number, item: any) => any;\n\n    /**\n     * When true adds custom hovering class to the tbody\n     */\n    @Input()\n    rowHover: boolean;\n\n    /**\n     * Do we show loading indicator\n     *\n     * Todo: rename to showLoading\n     */\n    @Input()\n    loading: boolean;\n\n\n    /**\n     *\n     * See AWDataTable\n     *\n     */\n    @Input()\n    selectionMode: SelectionMode = 'none';\n\n    /**\n     *\n     * Can provide custom icon. These icons are not animated divs, we used css\n     * transformation to rotate them.\n     *\n     */\n    @Input()\n    loadingIcon: string = 'icon-synchronize';\n\n\n    /**\n     * Additional indent can be added when rendering detail row\n     */\n    @Input()\n    indentDetailRow: boolean = false;\n\n    /**\n     * See AWDataTable\n     *\n     */\n    @Input()\n    indentationPerLevel: number = 25;\n\n    /**\n     *\n     *  SubHeader is used to show summary columns, which in our UX is shown at the top just under\n     *  the regular table header\n     *\n     */\n    @Input()\n    showSubHeader: boolean = false;\n\n    /**\n     * See OutlineFor - only used in the tree mode\n     *\n     * Not used when [outlineFormat]=\"'truee'\"\n     */\n    @Input()\n    children: (value: any) => any[];\n\n\n    /**\n     * We might have this conditional as this can be dynamic based on value, so the same\n     * as children\n     *\n     * See OutlineFor - only used in the tree mode\n     */\n    @Input()\n    showExpansionControl: boolean;\n\n    /**\n     * See OutlineFor - only used in the tree mode\n     */\n    @Input()\n    expandAll: boolean = false;\n\n\n    /**\n     *\n     * See OutlineFor  - format - only used in the tree mode\n     */\n    @Input()\n    outlineFormat: ModelFormat = 'free';\n\n    /**\n     * See AWDataTable\n     */\n    @Input()\n    pushRootSectionOnNewLine: boolean = true;\n\n\n    /**\n     * Render or hide expansion control for row detail columns. Expansion control makes sense for\n     * simple table, when using this inside outline (tree table), its driven by outline control\n     */\n    @Input()\n    showRowDetailExpansionControl: boolean = true;\n\n    /**\n     * See AWDataTable\n     *\n     */\n    @Input()\n    showSelectionColumn: boolean = true;\n\n\n    /**\n     * See AWDataTable\n     *\n     */\n    @Input()\n    showSelectAll: boolean = true;\n\n\n    /**\n     * Show or hide global search term input field in the header\n     */\n    @Input()\n    showGlobalSearch: boolean = true;\n\n\n    /**\n     * In case frozen column are using we can specify on global level total width of the table the\n     * overflowing content or width for each column.\n     */\n    @Input()\n    scrollWidth: any;\n\n\n    /**\n     * Enables or disables row reordering\n     *\n     */\n    @Input()\n    dndRowEnabled: boolean = false;\n\n    /**\n     *\n     * Fires event that sorting is enabled for column and we trigger sorting\n     *\n     */\n    @Output()\n    onSort: EventEmitter<any> = new EventEmitter();\n\n\n    /**\n     * Based on selection mode it triggers even\n     *\n     */\n    @Output()\n    onRowClick: EventEmitter<any> = new EventEmitter();\n\n    /**\n     *\n     * When multi or single selection mode is enabled it will trigger event when checkbox or\n     * radio buttons is selected\n     *\n     * todo: implement SingleSelectionDTColumn, MultiSelectionDTColumn with their renderers\n     */\n    @Output()\n    onRowSelectionChange: EventEmitter<any> = new EventEmitter();\n\n\n    /**\n     * When cell body selection changes we fire event\n     *\n     */\n    @Output()\n    onCellChange: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * When cell header selection changes we fire event\n     *\n     */\n    @Output()\n    onHeaderSelection: EventEmitter<any> = new EventEmitter();\n\n\n    @ContentChild(DTHeaderComponent2)\n    header: DTHeaderComponent2;\n\n\n    /**\n     * Defines custom template that can be implemented by application to show when there are\n     * no data in the datable\n     */\n    @ContentChild('noDataTempl')\n    emptyMessageTemplate: TemplateRef<any>;\n\n    /**\n     * See AWDataTable\n     *\n     */\n    @ContentChild('dtHeader')\n    headerTemplate: TemplateRef<any>;\n\n    /**\n     * See AWDataTable\n     */\n    @ContentChild('dtSubHeader')\n    subHeaderTemplate: TemplateRef<any>;\n\n    /**\n     * See AWDataTable\n     */\n    @ContentChild('dtBody')\n    bodyTemplate: TemplateRef<any>;\n\n\n    /**\n     * See AWDataTable\n     */\n    @ContentChild('headerFilter')\n    headerFilterTemplate: TemplateRef<any>;\n\n\n    /**\n     * Collects used DTColumn inside datatable and then they are used inside the template to\n     * iterate over and use its rendererTemplate.\n     *\n     * When we will be defining new columns its important that it can also match all the\n     * inherited ones. so we need to make sure we define a provider those those columns to point\n     * to the DTColumnComponent\n     *\n     * e.g.:\n     *\n     * {provide: DTColumnComponent, useExisting: forwardRef(() => DetailRowColumn)}\n     *\n     */\n    @ContentChildren(DTColumn2Component)\n    colsQuery: QueryList<DTColumn2Component>;\n\n\n    /**\n     * See AWDataTable\n     */\n    @ContentChild(DTDetailRowComponent)\n    rowDetailColumn: DTDetailRowComponent;\n\n\n    /**\n     *\n     * Triggers when items in the list are updated\n     *\n     */\n    @Output()\n    valueChange: EventEmitter<any[]> = new EventEmitter<any[]>();\n\n\n    @HostBinding('class')\n    classList: string = 'w-datatable ';\n\n\n    /**\n     * For internal use\n     */\n\n    /**\n     * Current dataset that is being rendered. Set from the [list] binding or by lazy load from\n     * datasource\n     */\n    public dataToRender: any[];\n\n    /**\n     * We convert QueryList<DTColumn2Component> to this array for easier manipulation\n     */\n    public columns: DTColumn2Component[];\n\n\n    /**\n     * This is secondary list of columns which is used in case we have have enabled\n     * frozen columns. Columns that are marked as frozen needs to be placed into separate array\n     * to be rendered way than regular columns which are stored in the columns array.\n     */\n    public frozenColumns: DTColumn2Component[];\n\n\n    /**\n     *  Indicates that columns were initialed Also used when we hide and show column to trigger\n     *  change.\n     *\n     */\n    public columnsChanged: boolean = false;\n\n    /**\n     *\n     * See AWDataTable\n     */\n    public sortColumn: DTColumn2Component;\n\n\n    /**\n     * Reference to colsQuery and its changes so we can later on release the subscription\n     */\n    columnsSubscription: Subscription;\n    initialized: boolean;\n\n\n    /**\n     * See AWDataTable\n     */\n    detailRowExpansionState: DetailRowExpansionState;\n\n\n    /**\n     * See AWDataTable\n     */\n    numberOfColsBeforeData: number = 0;\n\n\n    /**\n     * See AWDataTable\n     */\n    startOfFirstDataColumn: number = 0;\n\n\n    /**\n     * Section for programmatically instantiated columns that are added to the list if additional\n     * span or logic is needed.\n     *\n     * To programmatically insert a new column into columns array like expando column for detail\n     * row, or SingleSelect, MultiSelect column when selection is enabled we need to use\n     * ComponentFactoryResolver to instantiate a new component.\n     *\n     */\n    private rowDetailExpandColumn: DTDetailRowExpanderComponent;\n    private multiSelectColumn: DTMultiSelectColumnComponent;\n    private singleSelectColumn: DTSingleSelectColumnComponent;\n\n\n    /**\n     *\n     * In case of outline table we are inject OutlineState which is provided in the DT component\n     * definition. This is used by nested outlineFor component it set itself as reference and\n     * initialize the state so it can be used later on inside OutlineControl\n     *\n     *\n     * Each Datatable is pre-defaulted with its own version of DataSource so all the observers\n     * inside are unique for this component\n     *\n     */\n    constructor(public env: Environment, public el: ElementRef,\n                @Inject(DATA_SOURCE) private _defaultDS: DT2DataSource,\n                public changeDetector: ChangeDetectorRef,\n                public factoryResolver: ComponentFactoryResolver,\n                public outlineState: OutlineState,\n                public zone: NgZone,\n                private injector: Injector)\n    {\n        super(env);\n\n        this.dataSource = this._defaultDS;\n    }\n\n    /**\n     * Pushes a state out to application. Can be use as two way bindings\n     *\n     * [(state)]=dtState(s)\n     *\n     */\n    @Input()\n    get state(): any\n    {\n        return this.dataSource.state;\n    }\n\n    set state(val: any)\n    {\n        this.dataSource.state = val;\n    }\n\n    ngOnInit()\n    {\n\n        super.ngOnInit();\n        if (isPresent(this.list) && isPresent(this.destinationClass)) {\n            throw new Error('You cannot use both bindings [list] and [destinationClass]!');\n        }\n        this.detailRowExpansionState = new DetailRowExpansionState(this);\n\n        // init default columns\n        this.rowDetailExpandColumn = this.factoryResolver\n            .resolveComponentFactory(DTDetailRowExpanderComponent).create(this.injector).instance;\n\n\n        this.multiSelectColumn = this.factoryResolver\n            .resolveComponentFactory(DTMultiSelectColumnComponent).create(this.injector).instance;\n\n        this.singleSelectColumn = this.factoryResolver\n            .resolveComponentFactory(DTSingleSelectColumnComponent).create(this.injector).instance;\n\n        /**\n         * If the data are not deferred and we get list directly then it creates DS. If\n         * ngOnChanges is called first we properly init DS and clean this.list\n         *\n         */\n        if (isPresent(this.destinationClass) || isPresent(this.list)) {\n            this.initDatasource();\n\n        } else if (this.dataSource.initialized) {\n            this.initDatasource(false);\n        }\n\n        // since we work with references let's pass created map inside our state\n        this.outlineState.expansionStates = this.state.outlineState;\n    }\n\n    /**\n     * When data arrives later maybe due to REST API latency, initialize DS only when we have a\n     * data, otherwise if data changed thru the bindings just trigger dataChange event\n     *\n     */\n    ngOnChanges(changes: SimpleChanges): void\n    {\n        super.ngOnChanges(changes);\n\n        if (changes['list'] && isPresent(changes['list'].currentValue)\n            && !this.dataSource.initialized)\n        {\n\n            this.initDatasource();\n\n        } else if (this.dataSource.initialized) {\n            this.dataSource.dataProvider.dataChanges.next(this.list);\n        }\n\n    }\n\n    ngAfterContentInit()\n    {\n\n        // make sure we init a state when detail column is present\n        // todo: move this initialization to datasource\n        this.detailRowExpansionState.detailExpansionEnabled = isPresent(this.rowDetailColumn);\n\n        this.initColumns();\n        this.columnsSubscription = this.colsQuery.changes.subscribe(_ =>\n        {\n            this.initColumns();\n            this.changeDetector.markForCheck();\n        });\n    }\n\n    ngAfterViewInit()\n    {\n        // assign it programatically as we want to have a context for the filter\n        if (isPresent(this.rowDetailColumn) && isPresent(this.outlineState.outlineFor)) {\n            this.outlineState.outlineFor.filterOut = this.skipOutlineItem.bind(this);\n        }\n\n        if (isPresent(this.outlineState.outlineFor)) {\n            // this.outlineState.outlineFor.changeDetector.detach();\n            // this.outlineState.outlineFor.changeDetector.detectChanges();\n        }\n\n        this.initialized = true;\n    }\n\n    ngAfterViewChecked()\n    {\n        if (this.columnsChanged && this.el.nativeElement.offsetParent) {\n            this.columnsChanged = false;\n        }\n\n        if (this.hasFrozenColumns()) {\n            this.frozenColumns.forEach((col: DTColumn2Component, index: number) =>\n                col.postInitialize(index));\n        } else {\n            this.columns.forEach((col: DTColumn2Component, index: number) =>\n                col.postInitialize(index));\n        }\n    }\n\n    /**\n     * Key entry method that initialized our columns. Later on when we will support selection and\n     * multiselection we will programmatically instantiate SingleSelection, MultiSelection column\n     * components and add them to the list so they can be rendered.\n     *\n     * so the idea here is:\n     *\n     * When DT component initialize and we are in editing mode and we support Single/Multi selection\n     * we will use ComponentFactoryResolver to create component and add it as first item to the list\n     * and then it will be rendered just like anythign else.\n     *\n     */\n    initColumns(): void\n    {\n        this.columns = [];\n        this.frozenColumns = [];\n\n        if (this.detailRowExpansionState.detailExpansionEnabled) {\n            this.initDetailColumnExpansion();\n        }\n        if (this.hasLeadingSelectColumn() && this.selectionMode === 'multi') {\n            this.multiSelectColumn.initialize(this);\n            this.columns.push(this.multiSelectColumn);\n        } else if (this.hasLeadingSelectColumn() && this.selectionMode === 'single') {\n            this.singleSelectColumn.initialize(this);\n            this.columns.push(this.singleSelectColumn);\n        }\n\n        /**\n         * Add expansion column when detail row is enabled\n         */\n        if (this.detailRowExpansionState.detailExpansionEnabled && !this.isOutline()) {\n            this.rowDetailExpandColumn.initialize(this);\n            this.columns.push(this.rowDetailExpandColumn);\n        }\n\n        this.colsQuery\n            .filter((col1: DTColumn2Component) => !col1.frozen)\n            .forEach((col: DTColumn2Component) =>\n            {\n                col.initialize(this);\n                this.columns.push(col);\n            });\n\n        this.initFrozenColumns();\n        this.initColumnInfo();\n        this.columnsChanged = true;\n    }\n\n    /**\n     * Check if current column is programmatically created\n     *\n     */\n    isInternalColumn(col: DTColumn2Component): boolean\n    {\n        return col instanceof DTSingleSelectColumnComponent ||\n            col instanceof DTMultiSelectColumnComponent ||\n            col instanceof DTDetailRowExpanderComponent;\n\n    }\n\n    /**\n     * Create new Datasource based on passed values. It tries to initialize DS for first time\n     * inside the ngInit but in case Data arrives later maybe due to some REST API calls this\n     * can be triggered also from ngOnChanges.\n     *\n     */\n    initDatasource(initialize: boolean = true): void\n    {\n        if (isBlank(this.state)) {\n            this.state = Datatable2State.create(0, this.pageSize, this.displayRowSize,\n                this.initialSortKey, this.sortOrderingForString(this.initialSortOrder));\n        } else {\n            this.state.limit = this.state.displayLimit = this.displayRowSize;\n            if (isPresent(this.initialSortKey)) {\n                this.state.sortKey = this.initialSortKey;\n                this.state.sortOrder = this.sortOrderingForString(this.initialSortOrder);\n            }\n        }\n\n        if (initialize) {\n\n            let qType = (this.isOutline() && this.outlineFormat === 'tree') ?\n                QueryType.FullTextOutline : QueryType.FullText;\n\n            this.dataSource.init({\n                obj: isPresent(this.destinationClass) ? this.destinationClass : this.list,\n                queryType: qType,\n                state: this.state,\n                multiselect: false\n            });\n        }\n        this.dataSource.fetch(this.state);\n\n        // reset list to make sure it comes from DataProvider, we use list  to initialize\n        this.list = null;\n\n        // This is the ENTRY point for the DATA CHANGES. All addition, edits, deletion ends up\n        // here. We dont work directly with LIST. Any change is reactive and here is listener\n        this.dataSource.open().subscribe((data: any[]) =>\n        {\n            this.updateList(data);\n        });\n    }\n\n    /**\n     * When detailRow column is present we initialize a state holding information which item is\n     * expanded.\n     *\n     * todo: This is temporary here and once we suport lazy loading move this to datasource.\n     *\n     * For example for outline tree table we need to connect a state from outline with a state in\n     * here as we are using outline control to expand and collapse items\n     */\n    initDetailColumnExpansion(): void\n    {\n        if (isPresent(this.rowDetailColumn)) {\n            this.rowDetailColumn.initialize(this);\n        }\n        this.detailRowExpansionState.detailExpansionEnabled = isPresent(this.rowDetailColumn) &&\n            BooleanWrapper.isTrue(this.showRowDetailExpansionControl);\n    }\n\n    /**\n     * This method is executed after we initialize all the columns in order to calculate correct\n     * numbers used for indentation while rendering selection columns as well as detail row columns.\n     *\n     * Here we need to be aware how many columns to span\n     *\n     */\n    initColumnInfo(): void\n    {\n        this.numberOfColsBeforeData = 0;\n\n        this.columns.forEach((col: DTColumn2Component) =>\n        {\n            if (!col.isValueColumn()) {\n                this.numberOfColsBeforeData++;\n            }\n        });\n\n        if (this.indentDetailRow) {\n            this.numberOfColsBeforeData++;\n        }\n\n        this.startOfFirstDataColumn = this.columns.length - this.numberOfColsBeforeData;\n    }\n\n    /**\n     * See AWDataTable\n     *\n     */\n    onCellSelectionChange(cell: any, column: DTColumn2Component, item: any): void\n    {\n        if (this.selectionMode !== 'cell') {\n            return;\n        }\n        let lookupKey = {\n            col: column.key || column.label,\n            item: item\n        };\n        if (isPresent(this.state.selection) && this.state.selection.length > 0) {\n\n            let foundIndex = ListWrapper.findIndexComplex(this.state.selection, lookupKey);\n            let isSelected = foundIndex !== -1;\n\n            if (isSelected) {\n                this.state.selection = this.state.selection\n                    .filter((val: any, index: number) => index !== foundIndex);\n            } else {\n                this.state.selection = [...this.state.selection, lookupKey];\n            }\n        } else {\n            this.state.selection = [lookupKey];\n        }\n        this.onCellChange.emit(this.state.selection);\n    }\n\n    /**\n     * See AWDataTable\n     *\n     */\n    onHeaderSelectionChange(cell: any, column: DTColumn2Component): void\n    {\n        if (isPresent(this.state.headerSelection)) {\n            if (this.isHeaderSelected(column)) {\n                this.state.headerSelection = null;\n            } else {\n                this.state.headerSelection = column;\n            }\n        } else {\n            this.state.headerSelection = column;\n        }\n        this.onHeaderSelection.emit(this.state.headerSelection);\n    }\n\n    onHandleRowClicked(event: any, item: any): void\n    {\n        // special alt key modifier. When used with rows it indicates there is a D&D enabled\n        if (event.altKey) {\n            return;\n        }\n\n        if (this.selectionMode === 'multi') {\n            this.onRowToggle(event, item);\n\n        } else if (this.selectionMode === 'single') {\n            this.onRowSelect(event, item);\n        }\n    }\n\n    /**\n     * See AWDataTable\n     *\n     */\n    onRowToggle(event: any, item: any): void\n    {\n        let rowSelected = true;\n        if (isPresent(this.state.selection) && this.state.selection.length > 0) {\n            let foundIndex = ListWrapper.findIndexComplex(this.state.selection, item);\n            let isSelected = foundIndex !== -1;\n\n            if (isSelected) {\n                this.state.selection = this.state.selection\n                    .filter((val: any, index: number) => index !== foundIndex);\n\n                rowSelected = false;\n            } else {\n                this.state.selection = [...this.state.selection, item];\n            }\n\n            // for the outline go up and down the sync with treeitems\n            if (this.isOutline()) {\n                this.onHandleOutlineRowToggleToChildren(item, isSelected);\n                this.oHandleOutlineRowToggleToParent(item, isSelected);\n            }\n        } else {\n            this.state.selection = [item];\n\n            if (this.isOutline()) {\n                this.onHandleOutlineRowToggleToChildren(item, false);\n                this.oHandleOutlineRowToggleToParent(item, false);\n            }\n        }\n\n        this.onRowSelectionChange.emit({\n            isSelected: rowSelected,\n            item: this.state.selection\n        });\n\n        event.stopPropagation();\n    }\n\n    /**\n     * See AWDataTable\n     *\n     */\n    onRowSelect(event: any, item: any): void\n    {\n        this.state.selection = item;\n        event.stopPropagation();\n\n        this.onRowSelectionChange.emit(item);\n    }\n\n    /**\n     * See AWDataTable\n     *\n     */\n    onHandleOutlineRowToggleToChildren(currentItem: any, isSelected: boolean): void\n    {\n        let childrenForNode = this.children.apply(this.context, [currentItem]) || [];\n\n        if (childrenForNode.length > 0) {\n            // If is selected currently then toggle to other state\n            if (!isSelected) {\n                // when checking all from root, deselect children and add all\n                this.onHandleOutlineRowToggleToChildren(currentItem, true);\n                this.state.selection = [...this.state.selection, ...childrenForNode];\n\n            } else {\n                // remove each child\n                for (let child of childrenForNode) {\n                    let foundIndex = ListWrapper.findIndexComplex(this.state.selection, child);\n                    this.state.selection = this.state.selection\n                        .filter((val: any, index: number) => index !== foundIndex);\n                }\n            }\n\n            // apply the same for children of children\n            for (let child of childrenForNode) {\n                this.onHandleOutlineRowToggleToChildren(child, isSelected);\n            }\n        }\n    }\n\n    /**\n     * See AWDataTable\n     *\n     */\n    oHandleOutlineRowToggleToParent(currentItem: any, isSelected: boolean): void\n    {\n        let parent = currentItem.$$parentItem;\n        if (isPresent(parent)) {\n            let childrenForNode = this.children.apply(this.context, [parent]) || [];\n\n            let allSelected = true;\n            for (let child of childrenForNode) {\n                allSelected = ListWrapper.findIndexComplex(this.state.selection, child) !== -1\n                    && allSelected;\n            }\n\n            if (!isSelected) {\n                if (allSelected) {\n                    this.state.selection.push(parent);\n                }\n\n            } else {\n                if (!allSelected) {\n                    let parentIndex = ListWrapper.findIndexComplex(this.state.selection,\n                        parent);\n                    this.state.selection = this.state.selection\n                        .filter((val: any, index: number) => index !== parentIndex);\n                }\n            }\n            this.oHandleOutlineRowToggleToParent(currentItem.$$parentItem, isSelected);\n        }\n    }\n\n    /**\n     * See AWDataTable\n     *\n     */\n    onDnDRowDrop(origPos: number, newPos: number, dropPos: DropPosition): void\n    {\n        if (isPresent(this.dataSource)) {\n            // console.log('Dropping row #: ', origPos + ' ' + dropPos + ' row #: ' + newPos);\n            this.dataSource.reorderRows(origPos, newPos, dropPos);\n        }\n    }\n\n    /**\n     * See AWDataTable\n     *\n     */\n    onOutlineExpandChange(event: any): void\n    {\n        let item = event.item;\n\n        // We dont really need to store a state form outline locally as we are using the same object\n        // reference\n        // this.state.outlineState = this.outlineState.expansionStates;\n\n        if (this.canUseForDetailRow(item)) {\n            this.detailRowExpansionState.toggle(item);\n        }\n    }\n\n    /**\n     * See AWDataTable\n     *\n     *\n     */\n    sortSingle(): void\n    {\n        if (isPresent(this.list) && isPresent(this.sortColumn)) {\n\n            assert(isPresent(this.sortColumn.key), 'Invalid column to sort');\n            this.dataSource.sort(this.sortColumn.key, this.sortColumn.sortOrder);\n\n            this.onSort.emit({\n                field: this.sortColumn.key,\n                order: this.sortColumn.sortOrder\n            });\n        }\n    }\n\n    /**\n     * See AWDataTable\n     *\n     */\n    handleDataChange(): void\n    {\n        if (this.state.sortKey || this.sortColumn) {\n            if (!this.sortColumn && this.columns) {\n                this.sortColumn = this.columns.find(\n                    col => col.key === this.state.sortKey);\n            }\n        }\n\n        this.updateDataToRender();\n        this.valueChange.emit(this.list);\n    }\n\n    updateDataToRender(datasource?: any)\n    {\n        this.dataToRender = datasource || this.list;\n\n        if (isBlank(this.children) && isPresent(this.dataToRender)\n            && this.dataToRender.length > 0 && isOutlineNode(this.dataToRender[0]))\n        {\n            this.outlineFormat = 'tree';\n        }\n\n        // this.changeDetector.markForCheck();\n        this.changeDetector.detectChanges();\n    }\n\n    reset()\n    {\n        this.sortColumn = null;\n        this.updateDataToRender();\n    }\n\n    /**\n     * See AWDataTable\n     */\n    isHeaderSelected(item: DTColumn2Component): boolean\n    {\n        if (isBlank(this.state.headerSelection)) {\n            return false;\n        }\n\n        let colMatched = item.key || item.label;\n        let currentCol = this.state.headerSelection.key || this.state.headerSelection.label;\n        return colMatched === currentCol;\n    }\n\n    /**\n     *\n     * See AWDataTable\n     *\n     */\n    isBodyCellSelected(column: DTColumn2Component, item: any): boolean\n    {\n        let lookupKey = {\n            col: column.key || column.label,\n            item: item\n        };\n        return isPresent(this.state.selection) &&\n            ListWrapper.findIndexComplex(this.state.selection, lookupKey) !== -1;\n    }\n\n    /**\n     *  See AWDataTable\n     *\n     */\n    isRowSelected(item: any): boolean\n    {\n        if (this.hasLeadingSelectColumn() && isPresent(this.state.selection)) {\n\n            if (this.selectionMode === 'multi') {\n                return ListWrapper.findIndexComplex(this.state.selection, item) !== -1;\n\n            } else if (this.selectionMode === 'single') {\n                return equals(this.state.selection, item);\n            }\n        }\n        return false;\n    }\n\n    /**\n     *\n     * Do we have data to render Used inside template to tell if we should use the NoData template\n     *\n     */\n    isEmpty()\n    {\n        return isBlank(this.dataToRender) || (this.dataToRender.length === 0);\n    }\n\n    hasFrozenColumns(): boolean\n    {\n        return isPresent(this.frozenColumns) && this.frozenColumns.length > 0;\n    }\n\n    /**\n     * See AWDataTable\n     */\n    hasInvisibleSelectionColumn(): boolean\n    {\n        return this.hasLeadingSelectColumn() && !this.showSelectionColumn;\n    }\n\n    /**\n     *\n     * See AWDataTable\n     *\n     */\n    hasLeadingSelectColumn(): boolean\n    {\n        return this.selectionMode !== 'none' && this.selectionMode !== 'cell';\n    }\n\n    visibleColumns(): DTColumn2Component[]\n    {\n        return this.columns ? this.columns.filter(c => c.isVisible) : [];\n    }\n\n    /**\n     * See AWDataTable\n     *\n     */\n    sortOrderingForString(direction: string): number\n    {\n        if (isBlank(direction) || direction === 'ascending') {\n            return 1;\n        }\n\n        if (isBlank(direction) || direction === 'descending') {\n            return -1;\n        }\n        // todo: log bad key\n        return 1;\n    }\n\n    sortOrderingForNumber(direction: number): string\n    {\n        if (isBlank(direction) || direction === 1) {\n            return 'ascending';\n        }\n\n        if (isBlank(direction) || direction === -1) {\n            return 'descending';\n        }\n        // todo: log bad key\n        return 'ascending';\n    }\n\n    /**\n     * See AWDataTable\n     *\n     */\n    toggleAllColumns(event: any): void\n    {\n        let currentItems = this.dataToRender || [];\n        let selectedObject = this.state.selection || [];\n        if (selectedObject.length >= currentItems.length) {\n            this.state.selection = [];\n        } else {\n            this.state.selection = [];\n            this.state.selection = [...currentItems];\n        }\n    }\n\n    /**\n     *\n     * See AWDataTable\n     *\n     */\n    isToggleAllColumnSelected(): boolean\n    {\n        let currentItems = this.dataToRender || [];\n        let selectedObject = this.state.selection || [];\n\n        return currentItems.length > 0 && selectedObject.length >= currentItems.length;\n    }\n\n    isToggleAllColumnDisabled(): boolean\n    {\n        let currentItems = this.dataToRender || [];\n\n        return currentItems.length === 0;\n    }\n\n    /**\n     *\n     * Used by template to decide if we need to render DetailRow template. We need to have\n     * DetailRow ContentChild and using DetailRow component [isVisibleFn] function binding we\n     * check if the item that is about to be rendered is eligible for detail row\n     *\n     */\n    showDetailColumn(item: any): boolean\n    {\n        if (this.canUseForDetailRow(item) && this.detailRowExpansionState.isExpanded(item)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     *\n     * See AWDataTable\n     *\n     */\n    isOutline(): boolean\n    {\n        return isPresent(this.children) || this.outlineFormat === 'tree';\n    }\n\n    /**\n     *\n     * When dealing with detail column (detail row) and outline all together we need have a\n     * mechanism to tell to the outline \"don't render the next level of items\" and use detail row.\n     * So certain item type needs to be skipped.\n     *\n     * The way we skip those item is we use isVisibleFn condition of the detail row and look ahead\n     * if we should skip next level.\n     *\n     */\n    skipOutlineItem(item: any): boolean\n    {\n        return this.canUseForDetailRow(item);\n    }\n\n    /**\n     *\n     * See AWDaTable\n     *\n     */\n    getValue(data: any, field: string): any\n    {\n        return FieldPath.getFieldValue(data, field);\n    }\n\n    ngOnDestroy()\n    {\n        super.ngOnDestroy();\n        if (this.columnsSubscription) {\n            this.columnsSubscription.unsubscribe();\n        }\n    }\n\n    /**\n     * Makes sure that we also include programmatic column if present. Move them to the correct\n     * array\n     *\n     */\n    private initFrozenColumns(): void\n    {\n        this.colsQuery\n            .filter((col1: DTColumn2Component) => col1.frozen)\n            .forEach((col: DTColumn2Component) =>\n            {\n                col.initialize(this);\n                this.frozenColumns.push(col);\n\n            });\n\n        if (this.frozenColumns.length > 0) {\n            // find last index of column that is internal / programmatic\n\n            let lastInx = this.columns.slice()\n                .reverse()\n                .findIndex((col: DTColumn2Component) => this.isInternalColumn(col));\n\n            if (lastInx !== -1) {\n                let idx = this.columns.length - 1 - lastInx;\n                let internalCols = this.columns.splice(0, idx + 1);\n                this.frozenColumns = [...internalCols, ...this.frozenColumns];\n\n            }\n\n            let hasValidCols = this.columns\n                .findIndex((col: DTColumn2Component) => isBlank(col.width)) === -1;\n\n            assert(hasValidCols || isPresent(this.scrollWidth),\n                'When using [frozen] binding you need specify [width] for each ' +\n                'column or [scrollWidth] on datatable!');\n\n\n            assert(isBlank(this.rowDetailColumn),\n                'You cannot combine aw-dt-detail-column with frozen columns!');\n\n        }\n    }\n\n    /**\n     * Updates current immutable list and trigger change detection. Need to wrap it with\n     * setTimeout as the change can easily come after view checked and this would result some errors\n     *\n     */\n    private updateList(newList: any[]): void\n    {\n        setTimeout(() =>\n        {\n            this.list = newList;\n            this.handleDataChange();\n        });\n    }\n\n    private canUseForDetailRow(item: any): boolean\n    {\n        return isPresent(this.rowDetailColumn) &&\n            (<DTDetailRowComponent>this.rowDetailColumn).showDetailRow(item);\n    }\n}\n\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    AfterViewChecked,\n    AfterViewInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    forwardRef,\n    Inject,\n    Input,\n    PLATFORM_ID,\n    Renderer2,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport {assert, Environment, isPresent} from '@aribaui/core';\nimport {Datatable2Component} from '../datatable2.component';\nimport {BaseComponent} from '../../../core/base.component';\nimport {of, Subject, Subscription} from 'rxjs';\nimport {debounceTime, distinctUntilChanged, switchMap} from 'rxjs/operators';\nimport {isPlatformBrowser} from '@angular/common';\nimport {InfiniteScrollComponent} from '../../../core/infite-scroll/infite-scroll.component';\nimport {DomUtilsService} from '../../../core/dom-utils.service';\nimport {DTColumn2Component} from '../column/dt-column.component';\n\n\n/**\n * Please see datatable for more detail description. But the main goal of this wrapper to remove\n * all the common surrounding parts around the datatable and make sure DT can focus only actual\n * header and body structure\n *\n * It is expected that wrapper also provides some code for the sliding up panel containing\n * buttons and other actions that will be used during editing\n *\n *\n * Todo: Extract the expand logic out into some directive or component or just a class\n *\n */\n@Component({\n    selector: 'aw-dt-wrapper',\n    templateUrl: 'table-wrapper.component.html',\n    styleUrls: ['table-wrapper.component.scss'],\n    encapsulation: ViewEncapsulation.None\n\n})\nexport class DTWrapper extends BaseComponent implements AfterViewInit, AfterViewChecked\n{\n\n    /**\n     * Color that is used by full screen div overlay to create expanding effect which needs to have\n     * little tent;\n     *\n     */\n    @Input()\n    expandColorFrom: string = '#f3f3f3';\n\n\n    /**\n     * Color that is used to set after we are in the full screen so our overlay div hide everything\n     * on the page\n     *\n     */\n    @Input()\n    expandColorTo: string = '#FFFFFF';\n\n\n    /**\n     *\n     * Table heading area offers developer to completely override the top bar where we have filters\n     * and others actions.\n     *\n     */\n    @ContentChild('headingArea')\n    heading: TemplateRef<any>;\n\n\n    /**\n     * Renders table headers and wraps them within thead tag\n     */\n    @ContentChild('headerRows')\n    headerRows: TemplateRef<any>;\n\n\n    /**\n     * Renders table body\n     */\n    @ContentChild('bodyRows')\n    bodyRows: TemplateRef<any>;\n\n\n    /**\n     * The same as heading template. We need to remove this dependency on primeNG so far it is using\n     * p-footer\n     */\n    @ContentChild('footerArea')\n    footer: TemplateRef<any>;\n\n\n    /**\n     * Div used to make the full screen expansion effect\n     */\n    @ViewChild('dtFullScreenOverlay')\n    dtFullScreenOverlay: ElementRef;\n\n\n    /**\n     * Reference to infite scroll. We are using this to trigger loading finish event so we can\n     * hide loading animation\n     */\n    @ViewChild('infiniteScroll')\n    infiniteScroll: InfiniteScrollComponent;\n\n\n    /**\n     * In order to debounce the typing we need to use subject\n     *\n     */\n    searchTerms = new Subject<string>();\n\n\n    /**\n     *  Specifies if we are in viewing/editing mode that can browse whole dataset lazily\n     *\n     */\n    isFullScreenMode = false;\n\n    /**\n     * Tells if we can support full screen mode - only available for the browser\n     *\n     */\n    supportFullScreen: boolean = true;\n    querySubscription: Subscription;\n    loadingSub: Subscription;\n    /**\n     *  Saves original bounding rect coordinates before we expand the DT to full screen\n     *\n     */\n    private dtBoundingClientRect: any;\n    /**\n     * Remembers original scroll position before we switch to full screen mode\n     */\n    private originalScrollPosition: number;\n\n    constructor(public env: Environment,\n                private render: Renderer2,\n                private thisElement: ElementRef,\n                private domUtils: DomUtilsService,\n                @Inject(PLATFORM_ID) private platformId: Object,\n                @Inject(forwardRef(() => Datatable2Component))\n                public dt: Datatable2Component)\n    {\n        super(env);\n    }\n\n\n    ngOnInit(): void\n    {\n        super.ngOnInit();\n\n        this.querySubscription = this.searchTerms.pipe(\n            // wait 300ms after each keystroke before considering the term\n            debounceTime(300),\n\n            // ignore new term if same as previous term\n            distinctUntilChanged(),\n\n            switchMap((term: string) => of(term))\n        ).subscribe((term: any) =>\n        {\n            if (isPresent(term)) {\n                this.dt.dataSource.find(term);\n            }\n        });\n\n        this.loadingSub = this.dt.valueChange\n            .subscribe((data: any) => this.loadingFinished());\n    }\n\n\n    /**\n     * Iterates over all columns marked as frozen and retrieve a width so we can update\n     * parent div\n     *\n     */\n    calculateFrozenWidth(): number\n    {\n        if (!this.dt.hasFrozenColumns()) {\n            return null;\n        }\n\n        let fWidth = 0;\n        this.dt.frozenColumns.forEach((col: DTColumn2Component) =>\n        {\n            if (col.maxWidthPx > 0) {\n                fWidth += col.widestCell;\n            } else {\n                fWidth += parseInt(col.width);\n            }\n\n        });\n        return fWidth;\n    }\n\n\n    /**\n     * When having two separate tables we need to make sure that rows of the tables are aligned.\n     *\n     * Therefore this method takes first column from each table read the height of the rows and set\n     * the max height to both rows.\n     *\n     *\n     */\n    alignTablesHeights(frozenView: any, unFrozenView: any): void\n    {\n        assert(isPresent(frozenView) && isPresent(frozenView),\n            'Cant align table views as one of the view is undefined');\n\n        let frozenRows: any[] = frozenView.querySelectorAll('table tr');\n        let unFrozenRows: any[] = unFrozenView.querySelectorAll('table tr');\n\n        assert(frozenRows.length === unFrozenRows.length,\n            'Frozen Column: Two tables does not much!');\n\n        Array.from(frozenRows).forEach((frozen: any, index: number) =>\n        {\n            let h = Math.max(frozen.offsetHeight, unFrozenRows[index].offsetHeight);\n            frozen.style.height = h + 'px';\n            unFrozenRows[index].style.height = h + 'px';\n        });\n    }\n\n    ngAfterViewInit(): void\n    {\n        this.initFullScreen();\n    }\n\n\n    ngAfterViewChecked(): void\n    {\n\n        if (this.dt.hasFrozenColumns()) {\n            let frozenView = this.thisElement.nativeElement.querySelector('.dt-body-frozen');\n            let unFrozenView = this.thisElement.nativeElement.querySelector('.dt-body-unfrozen');\n\n            let frozenWidth = this.calculateFrozenWidth();\n\n            frozenView.style.width = frozenWidth + 'px';\n            if (isPresent(unFrozenView)) {\n                // include border and create indent effect by having 1px white space\n                unFrozenView.style.left = (frozenWidth + 2) + 'px';\n                unFrozenView.style.width = unFrozenView.parentElement.offsetWidth\n                    - frozenView.offsetWidth + 'px';\n\n                this.alignTablesHeights(frozenView, unFrozenView);\n            }\n        }\n    }\n\n    ngOnDestroy(): void\n    {\n        super.ngOnDestroy();\n\n        if (isPresent(this.querySubscription)) {\n            this.querySubscription.unsubscribe();\n        }\n\n        if (isPresent(this.loadingSub)) {\n            this.loadingSub.unsubscribe();\n        }\n    }\n\n\n    /**\n     * FULL SCREEN MODE methods\n     */\n\n    /**\n     *\n     * When fullscreen functionality is enabled this method switches between norml and full screen\n     * mode\n     *\n     */\n    toggleFullScreen(event: any): void\n    {\n        if (this.isFullScreenMode) {\n            this.closeFullScreen(event);\n        } else {\n            this.openFullScreen(event);\n        }\n    }\n\n    /**\n     * To push this component to full screen mode or maybe full page mode we need run following:\n     *\n     *  - Execute expand transformation, where we have additional overlay div that we slowly expand\n     *  and this creates impression the DT is expanding\n     *\n     *  - apply full-screen class on top host element  - in this case its DataTable to switch\n     *  to absolute positioning\n     *\n     *  - make sure we are scrolled all the way up\n     *\n     *  - hide all the elements on the page so their dimension don't interfere with this table.\n     *\n     *\n     */\n    openFullScreen(event: any): void\n    {\n        this.isFullScreenMode = true;\n\n        this.runExpandEffect();\n        this.originalScrollPosition = window.pageYOffset;\n        window.scroll(0, 0);\n        this.toggleFullScreenOnDT(true);\n\n\n        // mark my element in the path that needs to stay\n        let parentNode = this.thisElement.nativeElement.parentNode;\n        while (isPresent(parentNode) && parentNode.tagName !== 'BODY') {\n            parentNode.classList.add('u-full-screen-element');\n            parentNode = parentNode.parentNode;\n        }\n        this.hideNonFullScreenElement(document.body);\n\n        this.dt.state.limit = Math.round(this.calculateLimit());\n        this.dt.dataSource.fetch(this.dt.state);\n\n        // once loaded set back correct page size we use when loading data\n        this.dt.state.limit = this.dt.pageSize;\n    }\n\n    /**\n     *\n     * The same like above method (openFullScreen) but in reverse order.\n     *\n     */\n    closeFullScreen(event: any): void\n    {\n        this.isFullScreenMode = false;\n\n        this.showNonFullScreenElement();\n        this.runCollapseEffect();\n        this.toggleFullScreenOnDT(false);\n\n        this.dt.dataSource.state.limit = this.dt.dataSource.state.displayLimit;\n        this.dt.dataSource.state.offset = 0;\n        this.dt.dataSource.fetch(this.dt.dataSource.state);\n\n        setTimeout(() =>\n        {\n            window.scroll(0, this.originalScrollPosition);\n        }, 300);\n    }\n\n    /**\n     * Applies set of set of css properties to make the DT main component on the page expand to\n     * full page mode and back\n     *\n     * We want to make it with little delay to let other animation finish\n     */\n    toggleFullScreenOnDT(fullScreen: boolean): void\n    {\n        this.dt.el.nativeElement.style.opacity = 0;\n        setTimeout(() =>\n        {\n            if (fullScreen) {\n                this.dt.classList += 'dt-full-screen';\n                this.dt.el.nativeElement.style.opacity = 1;\n\n            } else {\n                this.dt.classList = this.dt.classList.replace('dt-full-screen',\n                    '');\n                this.dt.el.nativeElement.style.opacity = 1;\n            }\n        }, 200);\n\n    }\n\n    /**\n     * Listen for infinite scroll event and request new data from data source\n     *\n     */\n    onLazyLoad(event: any): void\n    {\n        if (event.isLoad) {\n            this.dt.state.offset = event.offset;\n            this.dt.dataSource.fetch(this.dt.state);\n        } else {\n            let dataProvider = this.dt.dataSource.dataProvider;\n            let data = dataProvider.dataChanges.getValue();\n            dataProvider.dataChanges.next(data.slice(0, event.offset));\n        }\n    }\n\n    /**\n     * Creates animation effect to make it feel like the element (in this case DT) is expanding\n     * from the middle to the full page mode.\n     *\n     * We take the dimension of the table then it is scaled slowly to the full page\n     */\n    private runExpandEffect()\n    {\n        this.dtBoundingClientRect = this.thisElement.nativeElement.getBoundingClientRect();\n\n        this.updateElement();\n        this.dtFullScreenOverlay.nativeElement.style.backgroundColor = this.expandColorFrom;\n        this.dtFullScreenOverlay.nativeElement.style.opacity = 1;\n        this.applyTransformation(true);\n\n        setTimeout(() =>\n        {\n            this.dtFullScreenOverlay.nativeElement.style.backgroundColor = this.expandColorTo;\n        }, 300);\n    }\n\n    /**\n     * Applies the transformation and scale the helper div (overlay) down to make it look like\n     * it collapses\n     */\n    private runCollapseEffect()\n    {\n        this.updateElement();\n        this.applyTransformation(false);\n\n\n        setTimeout(() =>\n        {\n            this.updateElement();\n            this.dtFullScreenOverlay.nativeElement.style.opacity = 0;\n\n        }, 200);\n\n        setTimeout(() =>\n        {\n            this.updateElement(this.dtBoundingClientRect.left, this.dtBoundingClientRect.top, 0,\n                0);\n        }, 400);\n    }\n\n    /**\n     * DFS  - to go thru all the element under BODY and remove them from the page.\n     *\n     */\n    private hideNonFullScreenElement(parentElement: any): void\n    {\n        if (this.thisElement.nativeElement.parentNode === parentElement) {\n            return;\n        }\n\n        for (let i = 0; i < parentElement.children.length; i++) {\n            let element = parentElement.children[i];\n            if (this.needTraverseDown(element)) {\n                this.hideNonFullScreenElement(element);\n\n            } else if (!element.classList.contains('dt-full-screen')) {\n                element.classList.add('u-fs-element-out');\n            }\n        }\n    }\n\n    /**\n     * Put all the element that were previously removed by hideNonFullScreenElement() back\n     */\n    private showNonFullScreenElement(): void\n    {\n        Array.from(document.querySelectorAll('.u-fs-element-out'))\n            .forEach((elem: any) => elem.classList.remove('u-fs-element-out'));\n    }\n\n    /**\n     * @Internal\n     *\n     */\n    private needTraverseDown(element: any): boolean\n    {\n        return isPresent(element) && element.tagName !== 'SCRIPT' &&\n            element.classList.contains('u-full-screen-element') &&\n            !element.classList.contains('dt-full-screen');\n\n    }\n\n    /**\n     * When we enter full screen /page mode when need to calculate how many rows to load initially\n     *\n     */\n    private calculateLimit(): number\n    {\n        let browserH = this.domUtils.browserDimentions().height;\n        let rowH = this.dt.el.nativeElement.querySelector('tbody tr:first-child').offsetHeight;\n\n        return (isPresent(rowH) && rowH > 0) ? (browserH / rowH) + 20 : 50;\n    }\n\n    /**\n     * @Internal\n     *\n     */\n    private updateElement(l: number = this.dtBoundingClientRect.left,\n                          t: number = this.dtBoundingClientRect.top,\n                          w: number = this.dtBoundingClientRect.width,\n                          h: number = this.dtBoundingClientRect.height): void\n    {\n        this.dtFullScreenOverlay.nativeElement.style.left = l + 'px';\n        this.dtFullScreenOverlay.nativeElement.style.top = t + 'px';\n        this.dtFullScreenOverlay.nativeElement.style.width = w + 'px';\n        this.dtFullScreenOverlay.nativeElement.style.height = h + 'px';\n    }\n\n    /**\n     * @Internal\n     *\n     */\n    private applyTransformation(expand: boolean): void\n    {\n        let x, y, tx, ty;\n        if (expand) {\n            x = window.innerWidth / this.dtBoundingClientRect.width;\n            y = window.innerHeight / this.dtBoundingClientRect.height;\n            tx = (window.innerWidth / 2 - this.dtBoundingClientRect.width / 2\n                - this.dtBoundingClientRect.left) / x;\n            ty = (window.innerHeight / 2 - this.dtBoundingClientRect.height / 2\n                - this.dtBoundingClientRect.top) / y;\n\n        } else {\n            x = 1;\n            y = 1;\n            tx = this.dtBoundingClientRect.left;\n            ty = this.dtBoundingClientRect.top;\n        }\n\n        this.dtFullScreenOverlay.nativeElement.style.transform =\n            'scaleX(' + x + ') scaleY(' + y + ') translate3d(' + (tx) + 'px, ' + (ty) + 'px, 0px)';\n    }\n\n\n    /**\n     * INFINITE SCROLLING METHODS\n     */\n\n    private initFullScreen(): void\n    {\n        if (!isPlatformBrowser(this.platformId)) {\n            this.supportFullScreen = false;\n            return;\n        }\n\n        this.render.appendChild(document.body, this.dtFullScreenOverlay.nativeElement);\n    }\n\n    /**\n     * When loading is finished mark loading icon is done so we can hide it. I am using little\n     * delay to make the animation visible\n     */\n    private loadingFinished(): void\n    {\n        if (isPresent(this.infiniteScroll)) {\n            setTimeout(() => this.infiniteScroll.complete(), 200);\n\n        }\n    }\n}\n","import {AfterViewInit, Directive, ElementRef, Input, OnInit, Renderer2} from '@angular/core';\nimport {DTColumn2Component} from '../column/dt-column.component';\nimport {isPresent} from '@aribaui/core';\n\n/**\n *\n * This directive is responsible for checking and setting the widest content width onto\n * Column component as the widestCell property.\n *\n * We use this directive inside dt-column.component to store a current width for each td,th\n *\n *\n */\n@Directive({\n    selector: '[dtMaxWidth]'\n})\nexport class SetCellMaxWidthDirective implements OnInit, AfterViewInit\n{\n\n    @Input()\n    dtMaxWidth: number;\n\n    constructor(private element: ElementRef,\n                private render: Renderer2,\n                private td: DTColumn2Component)\n    {\n    }\n\n\n    ngOnInit(): void\n    {\n\n    }\n\n    ngAfterViewInit(): void\n    {\n        // console.log('Cell Max Width: ' + this.dtMaxWidth, this.dtMaxWidth > 0);\n        if (isPresent(this.dtMaxWidth) && this.dtMaxWidth > 0) {\n            let inlineData = this.element.nativeElement.querySelector('.dt-col-cell-data');\n            if (isPresent(inlineData)) {\n                inlineData.style.whiteSpace = 'nowrap';\n                inlineData.style.display = 'inline-block';\n                let cellWidth = inlineData.offsetWidth; // td\n                inlineData.style.whiteSpace = 'normal';\n                inlineData.style.display = 'inline';\n\n                if (!this.isInThresHold(cellWidth)) {\n                    return;\n                }\n\n                cellWidth += this.tdPadding();\n                if (cellWidth > this.td.widthPx) {\n                    if (cellWidth < this.dtMaxWidth) {\n                        this.td.widestCell = cellWidth > this.td.widestCell ? cellWidth :\n                            this.td.widestCell;\n\n                    } else if (cellWidth >= this.dtMaxWidth) {\n                        this.td.widestCell = (this.dtMaxWidth > this.td.widestCell)\n                            ? this.dtMaxWidth : this.td.widestCell;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     *\n     * Is the new width the same as the one already set on the column? If yes then probably\n     * new content does not differ that much. We still keep certain threshold as the new content\n     * width might differ 1 or 2 pixes depending how set the css.\n     *\n     * To make sure we resize column only if necessary because it could be original size\n     * is 400px but the new one is 401px since somewhere add some extra border we have this\n     * safe threshold\n     *\n     */\n    isInThresHold(newWidth: number): boolean\n    {\n        if (this.td.widestCell > 0) {\n            return Math.abs(this.td.widestCell - newWidth) > 3 && newWidth > this.td.widestCell;\n        }\n        return true;\n    }\n\n\n    private tdPadding(): number\n    {\n        let computedStyle = getComputedStyle(this.element.nativeElement);\n        let cell = parseInt(computedStyle.paddingLeft) || 0;\n        cell += parseInt(computedStyle.paddingRight) || 0;\n        cell += parseInt(computedStyle.borderRightWidth) || 0;\n        cell += parseInt(computedStyle.borderLeftWidth) || 0;\n\n        // plus give it some little space around the text so it nots px to px inner width of the td\n        // cuz it could wrap\n        cell += 5;\n\n        return cell;\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\n\nimport {\n    Directive, ElementRef, forwardRef, Inject, Input, NgZone, OnDestroy,\n    OnInit\n} from '@angular/core';\nimport {Datatable2Component} from '../datatable2.component';\nimport {DomUtilsService} from '../../../core/dom-utils.service';\nimport {isPresent} from '@aribaui/core';\nimport {DragDirection, DragEvents, DropPosition} from '../aw-datatable';\n\n\n/**\n * Directive used inside DT in order to support table rows re-ordering. This manages all the\n * D&D necessary logic for this functionality.\n *\n * [dtDraggableRow] is used inside the `rowTemplate` like this:\n *\n *\n * ```html\n *\n * <ng-template #rowTemplate let-rowData let-even='event\" let-odd=\"odd\" let-rowIndex=\"rowIndex\"\n *              let-nestingLevel=\"nestingLevel\" let-colsToRender=\"colsToRender\">\n *\n *     <tr #rowElement dtDraggableRow [dndRowIndex]=\"rowIndex\"\n *          class=\"dt-body-row\"\n *\n *\n *\n * ```\n *\n * which enabled or disables based on the used DT binding [dndRowEnabled]. By default its disabled.\n *\n *\n *\n */\n@Directive({\n    selector: '[dtDraggableRow]'\n})\nexport class DTDraggableRowDirective implements OnInit, OnDestroy\n{\n\n    /**\n     *\n     * Tells the directive if we enable middle row zone to create an effect that we are dropping\n     * into the row. Used for outline DT mainly.\n     *\n     */\n    @Input()\n    dropIntoEnabled: boolean = false;\n\n    /**\n     * Current TR index number\n     *\n     */\n    @Input()\n    dndRowIndex: number = 0;\n\n    /**\n     * Holds information about our dragging direction UP and DOWN in order to assign correct style\n     * that highlights the row at the top or bottom\n     *\n     */\n    private dragDir: DragDirection = DragDirection.None;\n\n    /**\n     * Indicates that we dragged our row and stopped in the middle of the other row\n     *\n     */\n    private inMiddle: boolean = false;\n\n    /**\n     *\n     * Current drag Y coordinates which is used together with the dragDir when assinging dragging\n     * direction.\n     *\n     */\n    private dragY: number = 0;\n\n    /**\n     * listeners handlers here - the return from .bind(this).\n     */\n    private eventHandlers: { [name: string]: any };\n\n    constructor(private element: ElementRef,\n                @Inject(forwardRef(() => Datatable2Component))\n                private dt: Datatable2Component,\n                private domUtils: DomUtilsService,\n                private ngZone: NgZone)\n    {\n    }\n\n\n    ngOnInit(): void\n    {\n        if (this.dt.dndRowEnabled) {\n            this.setupEventListeners();\n        }\n    }\n\n\n    ngOnDestroy(): void\n    {\n        if (this.dt.dndRowEnabled) {\n            this.releaseEventListeners();\n        }\n    }\n\n    /**\n     * Setups listeners and returns handle to them so we can later on unsubscribe.\n     */\n    private setupEventListeners(): void\n    {\n        this.ngZone.runOutsideAngular(() =>\n        {\n            this.eventHandlers = {};\n            this.eventHandlers['mousedown'] = this.onMouseDownEvent.bind(this);\n            this.element.nativeElement.addEventListener('mousedown',\n                this.eventHandlers['mousedown']);\n\n            this.eventHandlers['dragstart'] = this.onDragStartEvent.bind(this);\n            this.element.nativeElement.addEventListener('dragstart',\n                this.eventHandlers['dragstart']);\n\n            this.eventHandlers['dragover'] = this.onDragOverEvent.bind(this);\n            this.element.nativeElement.addEventListener('dragover',\n                this.eventHandlers['dragover']);\n\n            this.eventHandlers['dragleave'] = this.onDragLeaveEvent.bind(this);\n            this.element.nativeElement.addEventListener('dragleave',\n                this.eventHandlers['dragleave']);\n\n            this.eventHandlers['drop'] = this.onDropEvent.bind(this);\n            this.element.nativeElement.addEventListener('drop',\n                this.eventHandlers['drop']);\n\n            this.eventHandlers['dragend'] = this.onDragEndEvent.bind(this);\n            this.element.nativeElement.addEventListener('dragend',\n                this.eventHandlers['dragend']);\n        });\n    }\n\n    /**\n     * Removes all the created listeners inside destroy() callback\n     */\n    private releaseEventListeners(): void\n    {\n        DragEvents.forEach((name: string) =>\n        {\n            document.removeEventListener('name', this.eventHandlers[name]);\n        });\n    }\n\n\n    /**\n     *\n     * This is first event where we:\n     *\n     *  - Mark element draggable to enable D&D\n     *  - Set click position relative to the middle of the current row\n     *      This is mainly needed when we are trying to calculate something for\n     *      dropInto row (outline)\n     *\n     * event.target usually contains reference to TD element\n     */\n    private onMouseDownEvent(event: any): void\n    {\n        if (event.altKey && this.domUtils.hasParent(event.target, '.dt-row-draggable')) {\n            this.element.nativeElement.draggable = true;\n            let elToBeDragged = this.domUtils.elementDimensions(event.target);\n            this.dt.env.setValue('ddClickDeviance', (elToBeDragged.height / 2) - event.offsetY);\n\n        } else {\n            this.element.nativeElement.draggable = false;\n\n        }\n    }\n\n    /**\n     * This is second triggered event when the actual dragging starts. Here we need to disable\n     * dragged row and save information that are common to a table.\n     *\n     * Marking row disabled with the style .dt-row-dragging using setTimeout is needed as\n     * if we would go without it then D&D framework would create a copy of row in disabled state.\n     * Now we grab a row with active state and after a 200ms delay we disable the original row.\n     *\n     */\n    private onDragStartEvent(event: any): void\n    {\n        setTimeout(() =>\n        {\n            if (isPresent(event.target.classList)) {\n                event.target.classList.add('dt-row-dragging');\n            }\n        }, 200);\n\n        this.dt.env.setValue('isDragging', true);\n        this.dt.env.setValue('dndId', this.dndRowIndex);\n        event.dataTransfer.setData('text', this.dndRowIndex);\n    }\n\n    /**\n     *\n     * This events happens anytime as we drag over rows. This event triggered after certain\n     * delay. In here we calculate the mouse movement to identify if we are going UP or DOWN.\n     *\n     * This is mainly needed to mark a row with the correct line on TOP or BOTTOM to visually\n     * show a user where we are.\n     *\n     * Once we know the direction and the drop target is valid we mark the row with correct class\n     * that does the trick\n     */\n    private onDragOverEvent(event: any): void\n    {\n        event.dataTransfer.dropEffect = 'move';\n        if (this.dragY < event.pageY) {\n            this.dragDir = DragDirection.Down;\n        } else if (this.dragY > event.pageY) {\n            this.dragDir = DragDirection.Up;\n        }\n        // dont set again unless its different\n        if (this.dragY !== event.pageY) {\n            this.dragY = event.pageY;\n        }\n\n        if (this.isValidDropTarget(event)) {\n            // todo test this preventDefault() so it does not create some sideeffect\n            event.preventDefault();\n            this.markRowWithClass(event, this.domUtils.closest(event.target, 'tr'));\n        }\n    }\n\n    /**\n     * This is finishing event just before D&D is done. It takes current information and\n     * broadcast them to the DT so DT can do necessary row reordering\n     *\n     *\n     */\n    private onDropEvent(event: any): void\n    {\n        this.clearClasses(event.target.parentElement);\n        // event.preventDefault();\n\n        let origIndx = this.dt.env.getValue('dndId');\n        let dropPos: DropPosition = this.inMiddle ? DropPosition.Into : (\n            this.dragDir === DragDirection.Up ? DropPosition.Before : DropPosition.After\n        );\n        this.dt.onDnDRowDrop(origIndx, this.dndRowIndex, dropPos);\n\n        this.inMiddle = false;\n        this.dragY = 0;\n    }\n\n    /**\n     * Every time we drag over the element we apply some classes to the it. this method does the\n     * opposite which is to remove everything so we are ready for the next row\n     *\n     *\n     */\n    private onDragLeaveEvent(event: any): void\n    {\n        let tr = this.domUtils.closest(event.target, 'tr');\n        this.clearClasses(tr);\n\n        this.dt.env.deleteValue('dndOnHoldIndex');\n    }\n\n    /**\n     *\n     * This is last event within D&D flow. Mainly used to clean up all the resource that has not\n     * been clean up already inside onDropEvent.\n     *\n     */\n    private onDragEndEvent(event: any): void\n    {\n        if (isPresent(event.target.classList)) {\n            event.target.classList.remove('dt-row-dragging');\n        }\n\n        this.clearClasses(event.target);\n        this.element.nativeElement.draggable = false;\n        this.dt.env.deleteValue('isDragging');\n        this.dt.env.deleteValue('dndId');\n        this.dt.env.deleteValue('ddClickDeviance');\n    }\n\n\n    /**\n     * Assign CSS classes to the row to create an highlighting effect to capture current position\n     * for the user.\n     *\n     * Based on the Drag direction we either apply\n     * css class that creates a line on top or bottom.  Only for the dropInto functionality we\n     * need to calculate some more to identify if we are really in the middle of the row.\n     *\n     * DropInto:\n     * ---------\n     *\n     * Initially we captured a position (in mousedown) the distance to the middle of the row and\n     * this we are using here with some threshold of 2 pixes so we dont have to be exactly on pixel\n     * perfect.\n     *\n     * - let currentTrCenter = this.domUtils.elementDimensions(activeRow).height / 2;\n     *      Read center of current row\n     *\n     * - let draggedTrCenter = event.offsetY + this.dt.env.getValue('ddClickDeviance');\n     *      Read mouse coordinates relative to current row/td and add to it our deviation.\n     *\n     *\n     */\n    private markRowWithClass(event: any, activeRow: any): void\n    {\n\n        this.clearClasses(activeRow);\n\n        // Check if drag item is in the middle of other row\n        let currentTrCenter = this.domUtils.elementDimensions(activeRow).height / 2;\n        let draggedTrCenter = event.offsetY + this.dt.env.getValue('ddClickDeviance');\n\n        if (this.dropIntoEnabled) {\n            this.inMiddle = Math.abs(currentTrCenter - draggedTrCenter) < 2;\n        }\n\n        if (this.inMiddle) {\n            activeRow.classList.add(DragDirection.Middle);\n\n        } else {\n            activeRow.classList.add(this.dragDir);\n        }\n    }\n\n    /**\n     *\n     * Drop target must be only another TR and it cannot be the element itself the one we are\n     * dragging and it does not make sense to allow to drop to the same position we started from\n     *\n     */\n    private isValidDropTarget(event: any): boolean\n    {\n        let origInx = this.dt.env.getValue('dndId');\n        let siblingRow = this.dndRowIndex - origInx;\n\n        return event.target.parentElement.tagName === 'TR' && this.dndRowIndex !== origInx &&\n            !(siblingRow === 1 && this.dragDir === DragDirection.Up) &&\n            !(siblingRow === -1 && this.dragDir === DragDirection.Down);\n    }\n\n\n    /**\n     *  private\n     *\n     */\n    private clearClasses(tr: any): void\n    {\n        tr.classList.remove('dt-drag-row-top');\n        tr.classList.remove('dt-drag-row-bottom');\n        tr.classList.remove('dt-drag-row-both');\n    }\n\n    /**\n     *  private\n     *\n     */\n    private dragDirToString(): string\n    {\n        switch (this.dragDir) {\n            case DragDirection.Up:\n                return 'Up';\n            case DragDirection.Down:\n                return 'Down';\n            default:\n                return 'Not Sure';\n        }\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {AWCoreComponentModule} from '../../core/core.module';\nimport {AWOutlineForModule} from '../outline/outline-for.module';\nimport {Datatable2Component} from './datatable2.component';\nimport {DTWrapper} from './table-wrapper/table-wrapper.component';\nimport {DTColumn2Component} from './column/dt-column.component';\nimport {AWInputFieldModule} from '../input-field/input-field.module';\nimport {DTHeaderComponent2} from './header/header.component';\nimport {DTDetailRowComponent} from './column/detail-row/dt-detail-row.component';\nimport {\n    DTDetailRowExpanderComponent\n} from './column/detail-row-expander/dt-detail-row-expander.component';\nimport {\n    DTMultiSelectColumnComponent\n} from './column/multi-select/dt-multi-select-column.component';\nimport {AWCheckBoxModule} from '../checkbox/check-box.module';\nimport {\n    DTSingleSelectColumnComponent\n} from './column/single-select/dt-single-select-column.component';\nimport {AWRadioButtonModule} from '../radio-button/radio-button.module';\nimport {SetCellMaxWidthDirective} from './directives/dt-cell-directives';\nimport {DTDraggableRowDirective} from './directives/dt-draggable-row.directive';\n\n\n@NgModule({\n    declarations: [\n        Datatable2Component,\n        DTWrapper,\n        DTColumn2Component,\n        DTHeaderComponent2,\n        DTDetailRowComponent,\n        DTDetailRowExpanderComponent,\n        DTMultiSelectColumnComponent,\n        DTSingleSelectColumnComponent,\n        DTDraggableRowDirective,\n        SetCellMaxWidthDirective\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        AWCoreComponentModule,\n        AWCheckBoxModule,\n        AWOutlineForModule,\n        AWRadioButtonModule,\n        AWInputFieldModule\n    ],\n    entryComponents: [\n        DTDetailRowExpanderComponent,\n        DTMultiSelectColumnComponent,\n        DTSingleSelectColumnComponent\n    ],\n    exports: [\n        Datatable2Component,\n        DTColumn2Component,\n        AWOutlineForModule,\n        DTHeaderComponent2,\n        DTDetailRowComponent\n    ],\n    providers: []\n})\nexport class AWDatatable2Module\n{\n}\n\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component} from '@angular/core';\n\n/**\n * An confirmation header area.\n *\n * See {@link ConfirmationComponent} for more explanation.\n */\n@Component({\n    selector: 'aw-confirmation-header',\n    template: '<ng-content></ng-content>'\n})\nexport class ConfirmationHeaderComponent\n{\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component} from '@angular/core';\n\n/**\n * An confirmation header area.\n *\n * See {@link ConfirmationComponent} for more explanation.\n */\n@Component({\n    selector: 'aw-confirmation-footer',\n    template: '<ng-content></ng-content>'\n})\nexport class ConfirmationFooterComponent\n{\n}\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, ContentChild, EventEmitter, Input, Output} from '@angular/core';\nimport {Environment, isPresent} from '@aribaui/core';\nimport {ModalContainer} from '../../core/modal-service/modal-container';\nimport {ConfirmationHeaderComponent} from './confirmation-header.component';\nimport {ConfirmationFooterComponent} from './confirmation-footer.component';\n\n/**\n * Confirmation Component is a specific version of the dialog where it supports confirm and cancel\n * functionality. It behaves like a dialog, is modal, and not closable by default.\n *\n * There are three types of popup.\n *   1.  a regular dialog box that has header, body and footer. It's the most customizable.\n *   2.  a confirmation box is similar to a dialog box but has accept and reject action buttons.\n *   3.  a overlay, which is a very basic popup with what you put inside.\n *       It doesn't have header and footer.\n *\n * There are two ways to use any popup component.\n *   1.  Either directly by using component, aw-dialog, aw-confirmation or aw-overlay\n *   2.  or the ModalService  service.open(<ConfirmationComponent>), service.close()\n *\n * Usage:\n *    1.  Using ModalService directly to display a modal popup. This usage is a quick way to show\n *        a confirmation to the user.\n *\n *          this.modalService.open<ConfirmationComponent>(ConfirmationComponent, {\n *                        title: 'Confirmation',\n *                        body: ` Are you sure ? `,\n *                        width: 300,\n *                        onConfirm: () => {\n *                              this.confirmAction();\n *                        },\n *                        onCancel: () => {\n *                              this.cancelAction();\n *                        }\n *           });\n *\n *\n *   2.   Use the component inside your template.\n *\n *          @Component({\n *                selector: 'aw-page' ,\n *                           template: `\n *                              <aw-confirmation [title]=\"'Confirmation'\"\n *                                      [(visible)]=\"display\"\n *                                     (onConfirm)=\"confirmAction()\"\n *                                    (onCancel)=\"cancelAction()\">\n *                                       <i class=\"sap-icon icon-alert\"></i>\n *                                       Are you sure you want to delete your hard drive?\n *                            </aw-confirmation>\n *\n *                                   <aw-button [size]=\"'small'\" (click)=\"open()\">\n *                                       Open Confirmation\n *                                   </aw-button>\n *                  `\n *         export class MyPageComponent implements OnInit {\n *\n *                     display: boolean = false;\n *\n *                     confirmAction: string;\n *\n *                     constructor(private modalService: ModalService) {\n *                          super();\n *                       }\n *                     ngOnInit() { }\n *\n *                     open() {\n *                        this.display = true;\n *                     }\n *\n *                     confirmAction()  {\n *                        this.confirmAction = \"confirmed\";\n *                      }\n *\n *                      close() {\n *                         this.display = false;\n *                      }\n *\n *                      cancelAction() {\n *                          this.confirmAction = \"canceled\";\n *                      }\n *\n *       }\n *\n *\n */\n@Component({\n    selector: 'aw-confirmation',\n    templateUrl: 'confirmation.component.html',\n    styleUrls: ['confirmation.component.scss']\n})\nexport class ConfirmationComponent extends ModalContainer\n{\n    /**\n     * Title for the Dialog.  if title and 'TitleTemplate' are both set, titleTemplate takes\n     * precedence.\n     */\n    @Input()\n    title: string;\n\n    /**\n     * Body section for Dialog. Caller should use either the body string, or content projection\n     * to add values to the dialog. If both are used, they will both show up.\n     */\n    @Input()\n    body: string;\n\n    /**\n     * If you are not using custom buttons you can pass a label to OK action\n     *\n     * Default value is OK\n     */\n    @Input()\n    confirmActionLabel: string;\n\n    /**\n     * If you are not using custom buttons you can pass a label to Cancel action\n     *\n     * Default value is OK\n     */\n    @Input()\n    cancelActionLabel: string;\n\n\n    /**\n     * support two way data binding on visible property.\n     */\n    @Output()\n    visibleChange: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Whether there's an x at the top right that makes the dialog closable.\n     */\n    @Input()\n    closable: boolean = false;\n\n    /**\n     * Target element to attach the dialog. \"body\" or local ng-template variable are valid.\n     */\n    @Input()\n    appendTo: any;\n\n    /**\n     * Event fired when dialog is closed.\n     */\n    @Output()\n    onClose: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Event fired when the dialog is opened.\n     */\n    @Output()\n    onOpen: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Fired when user clicked on confirm button.\n     */\n    @Output()\n    onConfirm: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Fired when user clicked on cancel button.\n     */\n    @Output()\n    onCancel: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Header component. Usually contains the title.\n     */\n    @ContentChild(ConfirmationHeaderComponent) header: ConfirmationHeaderComponent;\n\n    /**\n     * Dialog footer. Usually contains buttons\n     */\n    @ContentChild(ConfirmationFooterComponent) footer: ConfirmationFooterComponent;\n\n\n    constructor(public env: Environment)\n    {\n        super(env);\n\n        this.width = 400;\n        this.height = 'auto';\n        // Todo: internationalize.\n        this.confirmActionLabel = 'Confirm';\n        this.cancelActionLabel = 'Cancel';\n    }\n\n    /**\n     * open confirmation.\n     */\n    open()\n    {\n        this.visible = true;\n        this.onOpen.emit();\n\n        this.visibleChange.emit(true);\n    }\n\n    /**\n     * close confirmation.\n     */\n    close()\n    {\n        this.visible = false;\n        this.onClose.emit();\n\n        // Important to make sure change is set on parent binding.\n        // Otherwise, the variable and dialog open/close state can be out\n        // of sync and we wouldn't trigger change detection.\n        this.visibleChange.emit(false);\n    }\n\n    /**\n     * Does the confirmation have header content?\n     */\n    hasHeader(): boolean\n    {\n        return isPresent(this.header);\n    }\n\n    /**\n     * Does the confirmation have footer content?\n     */\n    hasFooter(): boolean\n    {\n        return isPresent(this.footer);\n    }\n\n    /**\n     * Confirm action.\n     */\n    confirm()\n    {\n        this.close();\n        this.onConfirm.emit();\n    }\n\n    /**\n     * Cancel action.\n     */\n    cancel()\n    {\n        this.close();\n        this.onCancel.emit();\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {AWCoreComponentModule} from '../../core/core.module';\nimport {ConfirmationComponent} from './confirmation.component';\nimport {ConfirmationHeaderComponent} from './confirmation-header.component';\nimport {ConfirmationFooterComponent} from './confirmation-footer.component';\nimport {ModalComponent} from '../../core/modal-service/modal/modal.component';\nimport {AWDialogModule} from '../dialog/dialog.module';\nimport {AWButtonModule} from '../button/button.module';\n\n@NgModule({\n    declarations: [\n        ConfirmationComponent,\n        ConfirmationHeaderComponent,\n        ConfirmationFooterComponent\n    ],\n    imports: [\n        CommonModule,\n        AWCoreComponentModule,\n        AWDialogModule,\n        AWButtonModule\n    ],\n    entryComponents: [\n        ModalComponent,\n        ConfirmationComponent,\n        ConfirmationHeaderComponent,\n        ConfirmationFooterComponent\n    ],\n    exports: [\n        ConfirmationComponent,\n        ConfirmationHeaderComponent,\n        ConfirmationFooterComponent\n    ],\n    providers: []\n})\nexport class AWConfirmationModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, ElementRef, Input, SimpleChanges} from '@angular/core';\nimport {Environment, isBlank, isPresent} from '@aribaui/core';\nimport {BaseComponent} from '../../core/base.component';\n\n/**\n *\n * Container panel providing scrolling functionality for its children. You can configure this\n * container to let it to scroll its content either horizontally, vertically or let the content\n * wrap.\n *\n *\n * Usage is pretty simple:\n *\n *  ### Example using horizontal scroll (default behavior):\n *\n *  ```\n *            <aw-scrollable>\n *                  <w-demo-card> Card 1</w-demo-card>\n *                  <w-demo-card> Card 2</w-demo-card>\n *                  <w-demo-card> Card 3</w-demo-card>\n *                  <w-demo-card> Card 4</w-demo-card>\n *                  <w-demo-card> Card 5</w-demo-card>\n *                  <w-demo-card> Card 6</w-demo-card>\n *                  <w-demo-card> Card 7</w-demo-card>\n *                  <w-demo-card> Card 8</w-demo-card>\n *                  <w-demo-card> Card 9</w-demo-card>\n *              </aw-scrollable>\n *\n *  ```\n *\n *  ### Example using vertical scroll:\n *\n *  ```\n *            <aw-scrollable [direction]=\"'vertical'\" [height]=\"'40vh'\">\n *                  <w-demo-card> Card 1</w-demo-card>\n *                  <w-demo-card> Card 2</w-demo-card>\n *                  <w-demo-card> Card 3</w-demo-card>\n *                  <w-demo-card> Card 4</w-demo-card>\n *                  <w-demo-card> Card 5</w-demo-card>\n *                  <w-demo-card> Card 6</w-demo-card>\n *                  <w-demo-card> Card 7</w-demo-card>\n *                  <w-demo-card> Card 8</w-demo-card>\n *                  <w-demo-card> Card 9</w-demo-card>\n *              </aw-scrollable>\n *\n * ```\n *\n *  ### Example scrolling is disabled and content wraps and centers:\n *\n *  ```\n *            <aw-scrollable [direction]=\"'none'\" [alignment]=\"'center'\">\n *                  <w-demo-card> Card 1</w-demo-card>\n *                  <w-demo-card> Card 2</w-demo-card>\n *                  <w-demo-card> Card 3</w-demo-card>\n *                  <w-demo-card> Card 4</w-demo-card>\n *                  <w-demo-card> Card 5</w-demo-card>\n *                  <w-demo-card> Card 6</w-demo-card>\n *                  <w-demo-card> Card 7</w-demo-card>\n *                  <w-demo-card> Card 8</w-demo-card>\n *                  <w-demo-card> Card 9</w-demo-card>\n *              </aw-scrollable>\n *  ```\n *\n * ### Height property:\n *\n * When using \"horizontal scrolling\" it set \"flexbox-direction\" to \"row\" where height\n * is set automatically based on its content. The height should be always 100% when using\n * this in parent container.\n *\n * If \"vertical scrolling\" is used you need to make sure that:\n *   - your parent container sets the boundaries with correctly set width and height\n *   otherwise it will use 100% of the viewport\n *   - if used as standalone you need to limit the height otherwise it will expand to 100% of\n *   the document\n *\n *\n *\n *\n */\n@Component({\n    selector: 'aw-scrollable',\n    templateUrl: 'scrollable-container.component.html',\n    styleUrls: ['scrollable-container.component.scss']\n})\nexport class ScrollableContainerComponent extends BaseComponent\n{\n\n\n    /**\n     * Defines scrolling direction of the container meaning tells which overflow axies will be\n     * disabled or enabled.\n     *\n     * Default value is \"horizontal\": Here we lock overflow-y and overflow-x set to auto.\n     *\n     * When scrolling direction is \"vertical\" please make sure you maintain correct height and\n     * width.\n     *\n     */\n    @Input()\n    direction: ScrollingDirection = 'horizontal';\n\n    /**\n     * Defines how flexbox container items should be aligned. Default behavior is LEFT\n     *\n     */\n    @Input()\n    alignment: ContainerItemsAlignment = 'left';\n\n\n    /**\n     * Internal properties for calculated class list\n     */\n\n    layoutClass: string;\n\n\n    constructor(public env: Environment, public elementRef: ElementRef)\n    {\n        super(env);\n\n        this.height = '100%';\n        this.width = '100%';\n    }\n\n    ngOnInit()\n    {\n        this.initDefault();\n    }\n\n\n    /**\n     * Make sure we re-initialize default when Input Bindings changes\n     *\n     */\n    ngOnChanges(changes: SimpleChanges): void\n    {\n        this.initDefault();\n    }\n\n\n    /**\n     * Initialize default values and Calculates layout and alignment class. The reason for using\n     * these utility classes is that we can change the behavior anytime as compared to using\n     * directly [style.xxx] bindings.\n     *\n     * ### Direction flow class:\n     *  - u-scrollable-f<direction>\n     *\n     * ### Alignment class:\n     *  - u-scrollable-a<alignment>\n     *\n     */\n    private initDefault(): void\n    {\n        this.layoutClass = 'u-scrollable-fh';\n        if (this.direction === 'vertical') {\n            this.layoutClass = 'u-scrollable-fv';\n\n        }\n        if (this.direction === 'vertical-row') {\n            this.layoutClass = 'u-scrollable-fv-row';\n\n        } else if (this.direction === 'both') {\n            this.layoutClass = 'u-scrollable-fb';\n\n        } else if (this.direction === 'none') {\n            this.layoutClass = 'u-scrollable-fn';\n        }\n\n        this.layoutClass += ' u-scrollable-a' + this.alignment.substring(0, 1);\n\n        if (isPresent(this.styleClass)) {\n            this.layoutClass += ` ${this.styleClass}`;\n        }\n\n        // make sure we default width and height to some value in case somebody passes null\n        if (isBlank(this.width)) {\n            this.width = '100%';\n        }\n\n        if (isBlank(this.height)) {\n            this.height = '100%';\n        }\n    }\n\n\n    /**\n     * Tells if the horizontal scrollbar is visible\n     *\n     */\n    hasHorizontalScroll(): boolean\n    {\n        let scrollContainer = this.elementRef.nativeElement.querySelector('.w-scrollable');\n        return scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    }\n\n\n    /**\n     * Tells if the vertical scrollbar is visible\n     *\n     */\n    hasVerticalScroll(): boolean\n    {\n        let scrollContainer = this.elementRef.nativeElement.querySelector('.w-scrollable');\n        return scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    }\n}\n\n/**\n * ScrollingDirection is a new type that drives scrolling behavior:\n *  - horizontal => overflow-x: auto, overflow-y:hidden\n *  - vertical => overflow-x: hidden, overflow-y:auto\n *  - vertical-row => overflow-x: hidden, overflow-y:auto; flow: row wrap\n *  - both => overflow-x: auto, overflow-y:auto\n *  - none => sets flow-flow to row wrap\n */\nexport type ScrollingDirection = 'horizontal' | 'vertical' | 'vertical-row' | 'both' | 'none';\n\n\n/**\n *\n * Controls the justify-content property:\n *\n * - left => flex-start\n * - right => flex-end\n * - center => center\n * - justify => space-between\n *\n */\nexport type ContainerItemsAlignment = 'left' | 'right' | 'center' | 'justify';\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ScrollableContainerComponent} from './scrollable-container.component';\n\n\n@NgModule({\n    declarations: [\n        ScrollableContainerComponent\n    ],\n    imports: [\n        CommonModule\n    ],\n    entryComponents: [\n        ScrollableContainerComponent\n    ],\n    exports: [\n        ScrollableContainerComponent\n    ],\n    providers: []\n})\nexport class AWScrollableContainerModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    Component,\n    ContentChild,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    SkipSelf,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport {Environment, equals, isBlank, isPresent} from '@aribaui/core';\nimport {NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BaseFormComponent} from '../../core/base-form.component';\nimport {Listbox, SelectItem} from 'primeng/primeng';\nimport {CheckboxComponent} from '../checkbox/checkbox.component';\n\n\nexport const LB_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ListComponent),\n    multi: true\n};\n\n/**\n *\n * The List component represent a structure which contains a list of selectable items. Items\n * selection can be configured in single-selection, multi-selection or multi-selection with visible\n * checkboxes mode.\n * In addition it can display data inside 3 zones LEFT, MIDDLE and RIGHT in order to provide\n * easy way for application developer to layout its own custom content or even change out of box\n * behavior.\n *\n *\n *  ### Examples\n *\n *  1. Render simple single selection list\n *\n *  ```html\n *\n *      <aw-list [list]=\"list\"></aw-list>\n *\n *  ```\n *  2. Render list - multi selection with custom RIGHT content to show a CheckMark when item\n *  is selected\n *\n *  ```html\n *\n *   <aw-list #awlist [list]=\"list\"\n *                       height=\"150px\"\n *                       width=\"250px\"\n *                       [selectionMode]=\"'multi'\">\n *\n *                  <ng-template #right let-item>\n *\n *                      <span class=\"sap-icon\"\n *                            [ngClass]=\"{'icon-accept': awlist.pListBox.isSelected(item),\n *                            '': !awlist.pListBox.isSelected(item)}\">\n *\n *                      </span>\n *                  </ng-template>\n *   </aw-list>\n *\n *  ```\n *\n * 3. Render list - multi selection with visible checkboxes and custom MIDDLE content to change\n *  the way item name is rendered\n *\n *\n *\n *  ```html\n *\n *   <aw-list [list]=\"list\" height=\"180px\"\n *                       width=\"200px\"\n *                       [selection]=\"selection\"\n *                       [selectionMode]=\"'multiWithCheckbox'\">\n *\n *                  <ng-template #middle let-item>\n *                      XX-{{item.value}}\n *                  </ng-template>\n *    </aw-list>\n *\n *  ```\n *\n *\n *\n */\n@Component({\n    selector: 'aw-list',\n    templateUrl: './list.component.html',\n    styleUrls: ['./list.component.scss'],\n    providers: [\n        LB_CONTROL_VALUE_ACCESSOR,\n        {provide: BaseFormComponent, useExisting: forwardRef(() => ListComponent)}\n    ]\n})\nexport class ListComponent extends BaseFormComponent\n{\n\n    /**\n     * List of option that will show in the list. Please not that this list is current used to\n     * show limited number of items. It does not have any scrolling feature and lazy loading\n     *\n     */\n    @Input()\n    list: any[];\n\n    /**\n     * Items which was selected as a default values\n     */\n    @Input()\n    selection: any;\n\n    /**\n     * Component recognizes 3 modes: single, multi, multi with visible checkboxes\n     */\n    @Input()\n    selectionMode: SelectionMode = 'single';\n\n\n    /**\n     * Formatter used to format each selection for display.\n     *\n     */\n    @Input()\n    valueTransformer: (value: any) => string;\n\n    /**\n     * Used when dealing with object to identify specific field on the object forcomparison\n     */\n    @Input()\n    field: string;\n\n\n    /**\n     * Don't render Listbox border. Used for embedding this inside other components\n     *\n     */\n    @Input()\n    borderless: boolean = false;\n\n    /**\n     * Triggered when we double click on the list Item\n     *\n     */\n    @Output()\n    action: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Event fired when user select a item\n     *\n     */\n    @Output()\n    onSelection: EventEmitter<any> = new EventEmitter();\n\n\n    /**\n     * In case we want to override default behavior or Left zone. We expose this listBox in order to\n     * have access primeNg implementation\n     */\n    @ViewChild('listbox')\n    pListBox: Listbox;\n\n\n    /**\n     * Custom templates to override default behavior. The list item is divided into 3 zones\n     *\n     *\n     *  ------------------------------------------------------\n     *  |       |                                   |        |\n     *  |   L   |             M                     |   R    |\n     *  |       |                                   |        |\n     *  |       |                                   |        |\n     *  ------------------------------------------------------\n     *\n     *\n     */\n    @ContentChild('left')\n    lZoneTempl: TemplateRef<any>;\n\n    @ContentChild('middle')\n    mZoneTempl: TemplateRef<any>;\n\n    @ContentChild('right')\n    rZoneTempl: TemplateRef<any>;\n\n    /**\n     * Internal\n     */\n    internalList: SelectItem[];\n\n    listStyle: {[name: string]: any} = {};\n\n    isMultiple: boolean = false;\n    showCheckbox: boolean = false;\n\n\n    constructor(public env: Environment,\n                @SkipSelf() @Optional() @Inject(forwardRef(() => BaseFormComponent))\n                protected parentContainer: BaseFormComponent)\n    {\n        super(env, parentContainer);\n    }\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n\n        this.isMultiple = this.selectionMode === 'multi' ||\n            this.selectionMode === 'multiWithCheckbox';\n        this.showCheckbox = this.selectionMode === 'multiWithCheckbox';\n\n        // cannot have both either we use field to get display value or valueTransformer\n        if (isPresent(this.field) && isPresent(this.valueTransformer)) {\n            throw new Error('You can have either [field] or [valueTransformer].');\n        }\n\n        if (isPresent(this.list)) {\n            this.initList();\n        } else {\n            throw new Error('Missing [list] binding.');\n        }\n\n        // Also add overflowY to make sure it can scroll and does not expand based on its content\n        if (isPresent(this.height)) {\n            this.listStyle['height'] = this.height;\n            this.listStyle['overflow-y'] = 'auto';\n        }\n\n        if (isPresent(this.width)) {\n            this.listStyle['width'] = this.width;\n        }\n\n        if (this.borderless) {\n            this.listStyle['border-color'] = 'transparent';\n        }\n\n        if (this.isStandalone) {\n            super.registerFormControl(this.selection);\n\n            if (isBlank(this.selection)) {\n                this.selection = this.formControl.value;\n            }\n        }\n    }\n\n\n    /**\n     *\n     * Since we are using <aw-checkbox> we need to have custom handling both when clicking on the\n     * checkbox as well as item text.\n     *\n     *\n     */\n    itemClicked(event: any, item: any, checkbox: CheckboxComponent): void\n    {\n        this.pListBox.onOptionClick(event, item);\n\n        event.stopPropagation();\n        event.preventDefault();\n    }\n\n    /**\n     * Internal\n     *\n     */\n    hasRightTempl(): boolean\n    {\n        return isPresent(this.rZoneTempl);\n    }\n\n    hasLeftTempl(): boolean\n    {\n        return isPresent(this.lZoneTempl);\n    }\n\n\n    hasMiddleTempl(): boolean\n    {\n        return isPresent(this.mZoneTempl);\n    }\n\n    /**\n     *\n     * Triggered by p-listbox component when item is selected. When state is managed internally\n     * we also update FormControl model.\n     *\n     */\n    onItemSelected(event: any): void\n    {\n        if (isBlank(event.value)) {\n            return;\n        }\n\n        this.onSelection.emit(event.value);\n        if (this.isStandalone) {\n            this.formControl.setValue(event.value, {emitEvent: true});\n        }\n        this.onModelChanged(event.value);\n    }\n\n\n    /**\n     * Internal. Please see ControlValueAccessor\n     *\n     */\n    writeValue(value: any)\n    {\n        if (!equals(value, this.selection)) {\n            this.selection = value;\n            if (this.isStandalone) {\n                this.formControl.setValue(value);\n            }\n        }\n    }\n\n    /**\n     * Translates external form of the list into PrimeNG expected format where it uses\n     * SelectionItem interface\n     */\n    private initList()\n    {\n        if (isPresent(this.list)) {\n            this.internalList = this.list.map((item: any) =>\n            {\n                return {label: this.displayValue(item), value: item};\n            });\n        }\n    }\n\n\n    /**\n     *  Generates label value for the list box.\n     *\n     */\n    private displayValue(item: any): string\n    {\n        if (isBlank(item)) {\n            return '';\n        }\n\n        let val = item.toString();\n        if (isPresent(this.field)) {\n            val = item[this.field];\n\n        } else if (isPresent(this.valueTransformer)) {\n            val = this.valueTransformer(item);\n        }\n        return val;\n    }\n}\n\n/**\n * List support these three selection modes\n *\n */\nexport type SelectionMode = 'single' | 'multi' | 'multiWithCheckbox';\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ListboxModule} from 'primeng/primeng';\nimport {ListComponent} from './list.component';\nimport {AWCheckBoxModule} from '../checkbox/check-box.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\n\n\n@NgModule({\n    declarations: [\n        ListComponent\n    ],\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        FormsModule,\n        ListboxModule,\n        AWCheckBoxModule\n\n    ],\n    entryComponents: [\n        ListComponent\n    ],\n    exports: [\n        ListComponent,\n        ReactiveFormsModule,\n        FormsModule\n    ],\n    providers: []\n})\nexport class AWListModule\n{\n}\n\n\n","/**\n * @license\n * @author amanul.chowdhury\n * Copyright 2018 SAP Ariba\n *\n * WizardProgressComponent can be used as a step progress\n * in a page that has multiple steps\n * `<aw-wizard-progress\n *  [steps]=\"steps\"\n *  [currentStep]=\"currentStep\"\n *  (stepChanged)=\"onStepChanged($event)\">\n * </aw-wizard-progress>`\n */\n\nimport {Component, EventEmitter, Input, Output} from '@angular/core';\n\nexport interface Step\n{\n    complete: boolean;\n    current: boolean;\n    title?: string;\n}\n\n@Component({\n    selector: 'aw-wizard-progress',\n    templateUrl: './wizard-progress.component.html',\n    styleUrls: ['./wizard-progress.component.scss']\n})\nexport class WizardProgressComponent\n{\n    @Input()\n    steps: Array<Step>;\n\n    @Input()\n    currentStep: number = 0;\n\n    @Output()\n    stepChanged: EventEmitter<any> = new EventEmitter<any>();\n\n    totalSteps: number = 0;\n\n    constructor()\n    {\n    }\n\n    ngOnInit()\n    {\n        if (this.steps) {\n            let currentIndex = this.steps.indexOf(this.steps.filter(step => step.current)[0]);\n            this.totalSteps = this.steps.length;\n            this.setCurrentStep(~currentIndex ? currentIndex : 0);\n        }\n    }\n\n    setCurrentStep(index: number = 0)\n    {\n        this.steps[index].current = true;\n        this.currentStep = index;\n        this.stepChanged.emit({current: this.currentStep});\n    }\n\n    goToStep(index: number)\n    {\n        if (!this.steps[index].complete) {\n            return;\n        }\n\n        let currentIndex = this.steps.indexOf(this.steps.filter(step => step.current)[0]);\n        this.steps[currentIndex].current = false;\n\n        this.setCurrentStep(index);\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {WizardProgressComponent} from './wizard-progress.component';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n    declarations: [\n        WizardProgressComponent\n    ],\n    imports: [\n        CommonModule\n    ],\n    entryComponents: [\n        WizardProgressComponent\n    ],\n    exports: [\n        WizardProgressComponent\n    ],\n    providers: []\n})\nexport class WizardProgressModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {Component, Input} from '@angular/core';\nimport {BaseComponent} from '../../core/base.component';\nimport {Environment} from '@aribaui/core';\n\n\n/**\n * Renders a Toggle Switch\n *\n * ### Example\n *\n * ```typescript\n *\n *      @Component({\n *          selector: 'myToggleSection' ,\n *          template: '<aw-toggle [model]=\"inputValue\" [labelText]=\"labelText\" >\n *              </aw-toggle>'\n *      })\n *      export class MyNoteComponent\n *      {\n *          inputValue: boolean = false;\n *          labelText: string = 'my label';\n *      }\n *\n * ```\n */\n\n@Component({\n    selector: 'aw-toggle',\n    templateUrl: './toggle-switch.component.html',\n    styleUrls: ['./toggle-switch.component.scss']\n})\n\nexport class ToggleSwitchComponent extends BaseComponent\n{\n    /**\n     * toggle model\n     */\n    @Input() model: boolean = false;\n    /**\n     * label text\n     */\n    @Input() labelText: string;\n\n    constructor(public env: Environment)\n    {\n        super(env);\n    }\n\n    /**\n     * click handler for toggle\n     */\n    changeHandler()\n    {\n        this.model = !this.model;\n    }\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {ToggleSwitchComponent} from './toggle-switch.component';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n    declarations: [\n        ToggleSwitchComponent\n    ],\n    imports: [\n        CommonModule\n    ],\n    entryComponents: [\n        ToggleSwitchComponent\n    ],\n    exports: [\n        ToggleSwitchComponent\n    ],\n    providers: []\n})\nexport class ToggleSwitchModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    AfterContentInit, AfterViewInit,\n    Component,\n    EventEmitter,\n    Input,\n    OnInit,\n    Output,\n    ViewChild\n} from '@angular/core';\nimport {ModalContainer} from '../../core/modal-service/modal-container';\nimport {OverlayPanel} from 'primeng/primeng';\nimport {Environment} from '@aribaui/core';\n\n/**\n * Overlay Component is a simple version of the dialog where there's only content.\n * Overlay will appear at the position where the action performed trigger an overlay.\n *\n * There are three types of popup.\n *   1.  a regular dialog box that has header, body and footer. It's the most customizable.\n *   2.  a confirmation box is similar to a dialog box but has accept and reject action buttons.\n *   3.  a overlay, which is a very basic popup with what you put inside.\n *       It doesn't have header and footer.\n *\n * There are two ways to use any popup component.\n *   1.  Either directly by using component, aw-dialog, aw-confirmation or aw-overlay\n *   2.  or the ModalService  service.open(<OverlayComponent>), service.close()\n *\n * Usage:\n *    1.  Using ModalService directly to display a modal popup. The usage is a little tricky\n *        because angular currently doesn't support dynamic content projection.\n *\n *          let overlay = this.modalService.open<OverlayComponent>(OverlayComponent, {});\n *\n *            // Add content. There's not support for dynamic content projection yet.\n *            // So have add content directly.\n *            // This is probably not the best way.\n *          overlay.instance.overlay.el.nativeElement.querySelector(\".ui-overlaypanel-content\")\n *               .innerHTML = `<img style='width:300px;' src=\"sales.png\" alt=\"Sales Chart\" />`;\n *\n *          // delay the opening after ng lifecycle has been initialized.\n *          setTimeout(() => { overlay.instance.open(event); }, 1);\n *\n *\n *   2.   Use the component inside your template.\n *\n *          @Component({\n *                selector: 'aw-page' ,\n *                           template: `\n *                                <aw-overlay #overlay (onOpen)=\"overlayAction='open'\"\n *                                                     (onClose)=\"overlayAction='close'\">\n *                                      <img src=\"sales.png\" alt=\"Chart\"/>\n *                                </aw-overlay>\n *\n *                                <aw-button [size]=\"'small'\" (click)=\"overlay.open($event)\">\n *                                    Open Overlay\n *                                </aw-button>\n *                  `\n *         export class MyPageComponent implements OnInit {\n *\n *                     overlayAction: string;\n *\n *                     constructor(private modalService: ModalService) {\n *                          super();\n *                       }\n *                     ngOnInit() { }\n *       }\n *\n *\n */\n@Component({\n    selector: 'aw-overlay',\n    templateUrl: 'overlay.component.html',\n    styleUrls: ['overlay.component.scss']\n})\nexport class OverlayComponent extends ModalContainer implements OnInit, AfterContentInit,\n    AfterViewInit\n{\n    /**\n     * Enables hide overlay when outside is clicked.\n     */\n    @Input()\n    dismissable: boolean = true;\n\n    /**\n     * displays the close icon 'x' at top of right corner.\n     */\n    @Input()\n    showCloseIcon: boolean = false;\n    /**\n     * Target element to attach the overlay. \"body\" or local ng-template variable are valid.\n     */\n    @Input()\n    appendTo: any;\n\n    /**\n     * Event fired when overlay is closed.\n     */\n    @Output()\n    onClose: EventEmitter<any> = new EventEmitter();\n\n\n    /**\n     * Event fired just before overlay is closed\n     */\n    @Output()\n    beforeClose: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * Event fired when the overlay is opened.\n     */\n    @Output()\n    onOpen: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * The internal overlay panel.\n     */\n    @ViewChild(OverlayPanel)\n    overlay: OverlayPanel;\n\n    constructor(public env: Environment)\n    {\n        super(env);\n    }\n\n    ngOnInit()\n    {\n    }\n\n    ngAfterContentInit(): void\n    {\n        // place holder to be overridden by Modal Service\n    }\n\n    ngAfterViewInit(): void\n    {\n        // place holder to be overridden by Modal Service\n    }\n\n\n    /**\n     * Open Overlay\n     * @param event\n     */\n    open(event: any)\n    {\n        setTimeout(() =>\n        {\n            this.overlay.show(event);\n            this.onOpened(null);\n        }, 1);\n    }\n\n    /**\n     * Close Overlay\n     */\n    close()\n    {\n        this.beforeClose.emit(null);\n        this.overlay.hide();\n    }\n\n\n    /**\n     * toggle open and close.\n     * @param event\n     */\n    toggle(event: any)\n    {\n        setTimeout(() =>\n        {\n            this.overlay.toggle(event);\n        }, 0);\n    }\n\n\n    onOpened(event: any): void\n    {\n        this.onOpen.emit(event);\n    }\n\n    onClosed(event: any): void\n    {\n        this.onClose.emit(event);\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {ChangeDetectorRef, Component, ElementRef, Input, ViewChild} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {assert, Environment, isBlank, isPresent} from '@aribaui/core';\nimport {BaseComponent} from '../../core/base.component';\nimport {OverlayComponent} from '../overlay/overlay.component';\n\n\n/**\n * Defines where the Card is positioned. It can be either:\n *    - above the triggering link\n *    - under the triggering link\n *    - completely on top of it - covering it. For this case there is none as no style is applied\n */\nexport enum HCCardPosition\n{\n    top,\n    bottom,\n    none\n}\n\n/**\n * Defines where the Card is positioned by default. Meaning where primeNG code put it.\n *\n * When there is allot of space on the sides >=  (Left or Right) is used\n * (paddedLeft, paddedRight) otherwise. When there is not much space and card container\n *  is not aligned (left, right) with the trigering icon but it is shifted to fit into the screen\n */\nenum HCCardAlignment\n{\n    left,\n    paddedLeft,\n    right,\n    paddedRight,\n    default\n}\n\n/**\n * Maps position to styles that are applied to the Card container. This is just to make it easier\n * as we are working with enumerations and have already enum type.\n *\n * u-hc-arrow-b: Arrow will appear at the bottom\n * u-hc-arrow-t: Arrow will appear at the top\n *\n * u-hc-shadow-t: Border shadow will appear at the top\n * u-hc-shadow-b: Border shadow will appear at the bottom\n */\nconst PositionToStyle = {\n    top: ' w-hc-panel-arrow u-hc-arrow-b u-hc-shadow-t',\n    bottom: ' w-hc-panel-arrow u-hc-arrow-t u-hc-shadow-b',\n    none: ''\n};\n\n\n/**\n *\n * Maps aligned Card container to custom styles in order to apply correct arrow\n *\n * -ll: Stands for Large Left (large: there is plenty of space around )\n * -lr: Stands for Large right\n * -sl: Stands for Small left (Small and resized screen where we try to fit card container\n * somewhere in between)\n * -sr: Stands for Large right\n *\n */\nconst AlignmentToStyle = {\n    left: ' u-hc-arrow-ll',\n    right: ' u-hc-arrow-lr',\n    paddedLeft: ' u-hc-arrow-sl',\n    paddedRight: ' u-hc-arrow-sr',\n    default: ' u-hc-arrow-ll',\n};\n\n/**\n * The HoverCard components adds hover behavior to text, the specified content is loaded\n * on the left or right side of the element.\n *\n * Todo: extends so we can wrap any element and any element can be triggering this. Not only\n * linkTitle\n *\n *\n * ### Example:\n *\n * ```\n *\n *   <aw-hover-card [linkTitle]=\"'Frank kolar'\">\n *       <h3>My Card Title</h3>\n *       <div>\n *\n *           This is my contents\n *\n *       </div>\n *\n *\n *    </aw-hover-card>\n * ```\n *\n * By default there is [forceClose]=true which forces the user to use X close icon\n *\n *\n *\n */\n@Component({\n    selector: 'aw-hover-card',\n    templateUrl: './hover-card.component.html',\n    styleUrls: ['./hover-card.component.scss']\n})\nexport class HoverCardComponent extends BaseComponent\n{\n\n    /**\n     * Default padding representing a height of the Arrow for which we need to vertically adjust\n     * Card container\n     *\n     */\n    public static readonly ArrowPad = 10;\n\n    /**\n     * Defines safe threshold where there might not be enough space around or Card is aligned with\n     * the left or right edge of the viewport for which we need to position the Arrow closer to the\n     * side of the card\n     *\n     */\n    public static readonly SpacingLimit = 50;\n\n\n    @Input()\n    linkTitle: string;\n\n    /**\n     * Should we keep the hover card open and force user to manually close\n     *\n     */\n    @Input()\n    forceClose: boolean = true;\n\n\n    /**\n     *\n     * This current workaround until we find better solution. PrimeNG overlays operates within\n     * its relative element so if the overlay is wrapped inside some other relative container\n     * the overlay content is croped by its parent and content is not visible.\n     *\n     * They have [appendTo] binding which we need to use for this purpose\n     *\n     */\n    @Input()\n    appendContentToBody: boolean = true;\n\n    /**\n     * Reference to OverlayComponent to can access PrimeNG component as well\n     */\n    @ViewChild('overlay')\n    awOverlay: OverlayComponent;\n\n\n    /**\n     *\n     * Internal style class to use to apply additional styles when it needs to show a Arrow on the\n     * card\n     *\n     */\n    arrowClass: string = '';\n\n\n    /**\n     * Internal properties to references template elements in order to calculate positioning\n     *\n     */\n    private titleAreaRect: any;\n    trigRect: any;\n    trigIconMiddle: any;\n\n    opening: boolean = false;\n\n    appendTo: 'body';\n\n    currrentPosition: HCCardPosition = HCCardPosition.none;\n\n    overlayOnAnimationStart: (event: AnimationEvent) => void;\n\n\n    /**\n     * In cases where we need to inject dynamic content using programmatic API we use this extra\n     * element which is outside of the <ng-content> and hidden and once the <ng-content>  of\n     * the component is shown we move this dynamic content into it.\n     *\n     */\n    dynamicContent: any;\n\n\n    constructor(protected elem: ElementRef, public env: Environment,\n                private cd: ChangeDetectorRef)\n    {\n        super(env);\n    }\n\n    ngOnInit()\n    {\n        super.ngOnInit();\n\n        assert(isPresent(this.linkTitle), 'You must provide [linkTitle] binding !');\n\n        // make sure there is open HC when we start new component\n        this.env.deleteValue('hc-open');\n\n        if (!this.appendContentToBody) {\n            this.appendTo = null;\n        }\n\n        this.overlayOnAnimationStart = this.awOverlay.overlay.onAnimationStart;\n        this.awOverlay.overlay.onAnimationStart = (event: AnimationEvent) =>\n        {\n            this.overlayOnAnimationStart.call(this.awOverlay.overlay, event);\n\n            this.cardOpened();\n            this.onAnimationStart(event);\n        };\n\n        // this span is always available\n        this.dynamicContent = this.elem.nativeElement.querySelector('.u-ngcontent');\n    }\n\n\n    onAnimationStart(event: AnimationEvent): void\n    {\n        if (this.opening) {\n            let container = this.awOverlay.overlay.container;\n            let cntRect = container.getBoundingClientRect();\n            if (this.currrentPosition !== HCCardPosition.none) {\n                this.adjustCard(container, cntRect, this.awOverlay.overlay);\n\n            } else {\n                this.arrowClass = '';\n            }\n\n            this.opening = false;\n        }\n    }\n\n\n    injectDynamicContent(): void\n    {\n        if (this.awOverlay.overlay.visible) {\n            let overlayCnt = this.elem.nativeElement\n                .querySelector('.ui-overlaypanel-content .u-ngcontent');\n\n            if (isBlank(overlayCnt) && this.dynamicContent.children.length > 0) {\n                overlayCnt = this.elem.nativeElement.querySelector('.ui-overlaypanel-content');\n                overlayCnt.prepend(this.dynamicContent);\n                this.dynamicContent.style = 'block';\n            }\n        } else {\n            this.dynamicContent.style = 'none';\n        }\n    }\n\n    /**\n     * Init elements BoundingClientRect that we use for calculation\n     *\n     */\n    initElements(): void\n    {\n        let titleElem = this.elem.nativeElement.querySelector('.w-hc-title');\n        let triggerElem = this.elem.nativeElement.querySelector('.sap-icon');\n        this.titleAreaRect = titleElem.getBoundingClientRect();\n        this.trigRect = triggerElem.getBoundingClientRect();\n        this.trigIconMiddle = this.trigRect.width / 2;\n    }\n\n\n    /**\n     *\n     * Fires when user mouse over the triggering icon and opens up overlay component. To make sure\n     * only one Card is opened at the time it uses Environment to save extra information for it\n     *\n     *\n     */\n    openCard(event: any): any\n    {\n        if (isPresent(this.awOverlay) && !this.env.hasValue('hc-open')) {\n            this.awOverlay.open(event);\n            this.cd.detectChanges();\n            this.env.setValue('hc-open', true);\n        }\n    }\n\n\n    /**\n     *\n     * Fired at the end of the opening cycle when all is initialized and the card is about to\n     * fade in.\n     *\n     * This method first simulates displaying card by setting display:block and\n     * domHandler.absolutePosition so we can read dimensions and then later on position the card\n     * accordingly.\n     *\n     */\n    cardOpened(event?: any): void\n    {\n        let container = this.awOverlay.overlay.container;\n        let target = this.awOverlay.overlay.target;\n\n        this.openForAdjustments(container);\n        this.injectDynamicContent();\n\n        // pre-run positioning so we can calculate new coordinates\n        this.awOverlay.overlay.domHandler.absolutePosition(container, target);\n        let cntRect = container.getBoundingClientRect();\n        this.currrentPosition = this.positionForCard(container, cntRect);\n\n        this.applyStyleClass(container, cntRect, this.awOverlay.overlay);\n\n        this.closeForAdjustments(container);\n        this.opening = true;\n    }\n\n\n    /**\n     *\n     * When card is closed we need to release it and delete all the references from Environment\n     *\n     *\n     */\n    cardClosed(event: any): void\n    {\n        this.env.deleteValue('hc-open');\n    }\n\n\n    /**\n     *\n      * Before overlay is closed we hide internal content other it does little shake..\n     *\n     *\n     */\n    beforeClose(event: any): void\n    {\n        this.dynamicContent.style = 'none';\n    }\n\n    /**\n     *\n     * Applies style.TOP and style.LEFT to the container in order to reposition it and add\n     * extra arrow.\n     *\n     * First based on the initial position we apply style.TOP and depending if its on the\n     * top or bottom we apply either -HoverCardComponent.ArrowPad or +HoverCardComponent.ArrowPad.\n     *\n     * Then for positioning horizontally we use two types.\n     *  - When there is allot of space the arrow is 25% from the edge\n     *\n     *    -----^------------   or       -----------^----\n     *\n     *\n     *  - When there is less or none space we have only 10% far away form the edge\n     *\n     *    --^------------   or       -----------^--\n     *\n     *  Once we pick the correct positioning (25%, 10%) we need to recalculate and shift the card\n     *  either to the left or right.\n     *\n     */\n    adjustCard(container: any, containerRect: any, modalContainer: any): void\n    {\n        let diff = (this.currrentPosition === HCCardPosition.bottom) ? 1 : -1;\n        let scrollTop = modalContainer.domHandler.getWindowScrollTop();\n        let posWithScroll = containerRect.top + scrollTop;\n        container.style.top = (posWithScroll + (HoverCardComponent.ArrowPad * diff)) + 'px';\n\n        let alignment = this.alignmentForCard(containerRect, modalContainer);\n        container.style.left = this.calcLeftForAlignment(containerRect, alignment) + 'px';\n    }\n\n\n    applyStyleClass(container: any, containerRect: any, modalContainer: any): void\n    {\n\n        if (this.currrentPosition !== HCCardPosition.none) {\n            let alignment = this.alignmentForCard(containerRect, modalContainer);\n\n            this.arrowClass = (<any>PositionToStyle)[(<any>HCCardPosition)[this.currrentPosition]];\n            this.arrowClass += (<any>AlignmentToStyle)[(<any>HCCardAlignment)[alignment]];\n\n        } else {\n            this.arrowClass = '';\n        }\n    }\n\n    /**\n     *\n     * Detects if the card is going to be shown on the top of the Link label or under. Or if\n     * its covering it.\n     *\n     */\n    positionForCard(container: any, boundingRect: any): HCCardPosition\n    {\n        // secure this in case of IE returning undefined\n        let borderWidth = getComputedStyle(container).borderWidth;\n        let cntWidth = parseFloat(borderWidth || '0');\n        let pos = HCCardPosition.none;\n\n        if (this.trigRect.bottom < boundingRect.top) {\n            pos = HCCardPosition.bottom;\n        } else if (this.trigRect.top > (boundingRect.bottom - cntWidth)) {\n            pos = HCCardPosition.top;\n        }\n\n        return pos;\n    }\n\n\n    /**\n     *\n     * Detect horizontal alignment.\n     *\n     */\n    private alignmentForCard(boundingRect: any, modalContainer: any): HCCardAlignment\n    {\n        let alignment = HCCardAlignment.left;\n        let viewPort = modalContainer.domHandler.getViewport();\n\n        if (this.trigRect.left.toFixed(0) === boundingRect.left.toFixed(0) &&\n            boundingRect.left > HoverCardComponent.SpacingLimit)\n        {\n            alignment = HCCardAlignment.left;\n\n        } else if (boundingRect.left < HoverCardComponent.SpacingLimit) {\n            alignment = HCCardAlignment.paddedLeft;\n\n        } else if ((viewPort.width - boundingRect.right) < HoverCardComponent.SpacingLimit) {\n            alignment = HCCardAlignment.paddedRight;\n\n        } else if (this.trigRect.right.toFixed(0) === boundingRect.right.toFixed(0) ||\n            (viewPort.width - boundingRect.right) > HoverCardComponent.SpacingLimit)\n        {\n            alignment = HCCardAlignment.right;\n\n        } else {\n            alignment = HCCardAlignment.default;\n        }\n        return alignment;\n    }\n\n    /**\n     *\n     * Turn on temporary display to BLOCK so we can read dimensions\n     *\n     */\n    openForAdjustments(container: any): void\n    {\n        container.style.visibility = 'hidden';\n        container.style.display = 'block';\n\n        this.initElements();\n    }\n\n\n    /**\n     *\n     * Turn off display back NONE\n     *\n     */\n    closeForAdjustments(container: any): void\n    {\n        container.style.visibility = 'visible';\n        // container.style.display = 'none';\n    }\n\n\n    /**\n     *\n     * Calculates positioning for style.LEFT. As already said they are two types of triangles that\n     * are applies for these case:\n     *\n     *\n     * a) Large left, Large right\n     *\n     *  PrimeNG aligns the card with either the right side or left side of the triggering icon\n     *\n     *\n     *  V                                                                V\n     *  ......^........................ or  .......................^......\n     *\n     *\n     *\n     *\n     *  b) Small left , small right\n     *\n     *  This is for cases where there is not enough space and PrimeNG position the card off to the\n     *  triggering icons, so even primeNg does not have space to align it with the V\n     *\n     *\n     *     V                                                      V\n     *  ....^........................ or  .......................^....\n     *\n     *\n     * c)Aligned with the edge of browser\n     *\n     * On the right side this is problem as we cannot calculate full future width of the card.\n     * but we applly for this case #b (arrow 10% )\n     *\n     *\n     *\n     */\n    private calcLeftForAlignment(boundingRect: any, alignment: HCCardAlignment): number\n    {\n        // width for which we need to shift card. 25% or 10% of the container width\n        let wLargeTriangle = boundingRect.width * 0.25;\n        let wSmallTriangle = boundingRect.width * 0.10;\n\n        switch (alignment) {\n            case HCCardAlignment.right:\n                let shiftRight = boundingRect.left + wLargeTriangle;\n                let trigRight = this.trigRect.right - this.trigIconMiddle;\n                return shiftRight - (boundingRect.right - trigRight);\n\n            case HCCardAlignment.paddedRight:\n                let shiftRightS = boundingRect.left + wSmallTriangle;\n                let trigRightS = this.trigRect.right - this.trigIconMiddle;\n                return shiftRightS - (boundingRect.right - trigRightS);\n\n\n            case HCCardAlignment.paddedLeft:\n                let shiftLeftPad = boundingRect.left - wSmallTriangle;\n                return shiftLeftPad + this.trigIconMiddle;\n\n            case HCCardAlignment.left:\n            default:\n                let shiftLeft = boundingRect.left - wLargeTriangle;\n                return shiftLeft + this.trigIconMiddle;\n        }\n    }\n}\n\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewChecked,\n    AfterViewInit,\n    Directive,\n    DoCheck,\n    ElementRef,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChange\n} from '@angular/core';\nimport {isPresent, print} from '@aribaui/core';\n\n\n/**\n * Spy lifecycle directive is used for debugging purposes to track lifecycle callback\n *\n * ###Usage\n *\n * ```\n *   <my-directive spyhooks><my-directive>\n *\n * ```\n */\n@Directive({selector: '[spyHooks]'})\nexport class SpyLifeCycleHooksDirective implements OnDestroy, OnInit, DoCheck, OnChanges,\n    AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked\n{\n\n    constructor(private elementRef: ElementRef)\n    {\n    }\n\n\n    ngOnInit()\n    {\n        this.logIt('onInit');\n    }\n\n    ngOnDestroy()\n    {\n        this.logIt('onDestroy');\n    }\n\n\n    ngOnChanges(changes: {[ propName: string]: SimpleChange})\n    {\n        this.logIt('ngOnChanges = ' + changes);\n    }\n\n    ngDoCheck()\n    {\n        this.logIt('ngDoCheck');\n    }\n\n    ngAfterContentInit()\n    {\n        this.logIt('ngAfterContentInit');\n    }\n\n    ngAfterContentChecked()\n    {\n\n        this.logIt('ngAfterContentChecked');\n    }\n\n    ngAfterViewInit()\n    {\n        this.logIt('ngAfterViewInit');\n    }\n\n    ngAfterViewChecked()\n    {\n        this.logIt('ngAfterViewChecked');\n    }\n\n    private logIt(msg: string)\n    {\n        let level = 0;\n        let me = this.elementRef.nativeElement;\n        let tagBody = me;\n\n        while ((tagBody = tagBody.parentNode) != null) {\n            level++;\n            if (tagBody.tagName === 'APP-ROOT' || level === 6) {\n                break;\n            }\n        }\n        let indent = '';\n        let indentNumber = level;\n        while (level > 0) {\n            indent += '\\t';\n            level--;\n        }\n\n\n        let params = '';\n        if (isPresent(me.attributes)) {\n            for (let i = 0; i < me.attributes.length; i++) {\n                let attr: Attr = me.attributes.item(i);\n                if (this.ignore(attr.name.toLowerCase())) {\n                    continue;\n                }\n\n\n                params += '(' + attr.name + '=' + attr.value + '),  ';\n            }\n        }\n        print(indent + me.tagName + '(' + indentNumber + '): ' + msg + ' => ' + params);\n    }\n\n    private ignore(name: string): boolean\n    {\n        return name.indexOf('_ng') > -1 ||\n            name.indexOf('ng-') > -1 ||\n            name.indexOf('spyhooks') > -1;\n    }\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {AWCoreComponentModule} from '../../core/core.module';\nimport {OverlayComponent} from './overlay.component';\nimport {OverlayPanelModule} from 'primeng/primeng';\n\n@NgModule({\n    declarations: [\n        OverlayComponent\n    ],\n    imports: [\n        CommonModule,\n        AWCoreComponentModule,\n        OverlayPanelModule\n    ],\n    entryComponents: [\n        OverlayComponent\n    ],\n    exports: [\n        OverlayComponent,\n        AWCoreComponentModule\n    ],\n    providers: []\n})\nexport class AWOverlayModule\n{\n}\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {HoverCardComponent} from './hover-card.component';\nimport {AWOverlayModule} from '../overlay/overlay.module';\nimport {AWStringFieldModule} from '../string/string.module';\n\n\n@NgModule({\n    declarations: [\n        HoverCardComponent\n    ],\n    imports: [\n        CommonModule,\n        AWOverlayModule,\n        AWStringFieldModule\n    ],\n    entryComponents: [\n        HoverCardComponent\n    ],\n    exports: [\n        HoverCardComponent\n    ],\n    providers: []\n})\nexport class AWHoverCardModule\n{\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {APP_INITIALIZER, ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {\n    AccordionModule,\n    AutoCompleteModule,\n    ButtonModule,\n    CalendarModule,\n    Checkbox,\n    CheckboxModule,\n    DataTableModule,\n    Dialog,\n    DialogModule,\n    DropdownModule,\n    EditorModule,\n    InputTextareaModule,\n    InputTextModule,\n    MenuModule,\n    OverlayPanelModule,\n    PaginatorModule,\n    PanelModule,\n    RadioButtonModule,\n    SharedModule,\n    TabMenuModule,\n    ToolbarModule,\n    TreeModule\n} from 'primeng/primeng';\nimport {AribaCoreModule} from '@aribaui/core';\nimport {SpyLifeCycleHooksDirective} from './spy-lifecycle.directive';\nimport {EmbeddedItemDirective} from './core/embedded-item';\nimport {ComponentRegistry} from './core/component-registry.service';\nimport * as components from './entry-components';\nimport {AWCoreComponentModule} from './core/core.module';\nimport {AWBasicNavigatorModule} from './widgets/basic-navigator/basic-navigator.module';\nimport {AWCheckBoxListModule} from './widgets/check-box-list/check-box-list.module';\nimport {AWCheckBoxModule} from './widgets/checkbox/check-box.module';\nimport {AWChooserModule} from './widgets/chooser/chooser.module';\nimport {AWConfirmationModule} from './widgets/confirmation/confirmation.module';\nimport {AWCurrencyModule} from './widgets/currency/currency.module';\nimport {AWDateAndTimeModule} from './widgets/date-and-time/data-and-time.module';\nimport {AWDialogModule} from './widgets/dialog/dialog.module';\nimport {AWDropdownModule} from './widgets/dropdown/dropdown.module';\nimport {AWGenericChooserModule} from './widgets/generic-chooser/generic-chooser.module';\nimport {AWHyperlinkModule} from './widgets/hyperlink/hyperlink.module';\nimport {AWInputFieldModule} from './widgets/input-field/input-field.module';\nimport {AWOutlineForModule} from './widgets/outline/outline-for.module';\nimport {AWOverlayModule} from './widgets/overlay/overlay.module';\nimport {AWPageNotificationModule} from './widgets/page-notification/page-notification.module';\nimport {AWPageWrapperModule} from './widgets/page-wrapper/page-wrapper.module';\nimport {AWRadioButtonModule} from './widgets/radio-button/radio-button.module';\nimport {AWRadioButtonListModule} from './widgets/radio-button-list/radio-button-list.module';\nimport {AWRichTextAreaModule} from './widgets/rich-text-area/rich-text-area.module';\nimport {AWHoverCardModule} from './widgets/hover-card/hover-card.module';\nimport {\n    AWScrollableContainerModule\n} from './widgets/scrollable-container/scrollable-container.module';\nimport {AWSectionModule} from './widgets/section/section.module';\nimport {AWStepperModule} from './widgets/stepper/stepper.module';\nimport {AWStringFieldModule} from './widgets/string/string.module';\nimport {AWTextAreaModule} from './widgets/text-area/text-area.module';\nimport {AWButtonModule} from './widgets/button/button.module';\nimport {AWFormTableModule} from './layouts/form-table/form-table.module';\nimport {AWListModule} from './widgets/list/list.module';\nimport {AWCardModule} from './widgets/card/card.module';\nimport {AWDatatable2Module} from './widgets/datatable2/datatable2.module';\nimport {DomUtilsService} from './core/dom-utils.service';\nimport {ModalService} from './core/modal-service/modal.service';\nimport {DataProviders} from './core/data/data-providers';\nimport {DataFinders} from './core/data/data-finders';\nimport {ErrorManagerService} from './core/error-manager.service';\nimport {AwNameStore} from './core/aw-name/aw-name.store';\nimport {DataTypeProviderRegistry} from './core/data/datatype-registry.service';\nimport {WizardProgressModule} from './widgets/wizard-progress/wizard-progress.module';\nimport {ToggleSwitchModule} from './widgets/toggle-switch/toggle-switch.module';\n\n/**\n * Component module is core module for the common layouts and widgets libraries.\n *\n * todo: There are some things that I still need to resolve - please see and notices @Duplicates\n * jsdoc I want to keep this there to remind me that I need to refactor this as of now there are\n * not much option with angular.\n *\n */\n@NgModule({\n    imports: [\n        AribaCoreModule,\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n\n        AWCoreComponentModule,\n        AWBasicNavigatorModule,\n        AWCardModule,\n        AWCheckBoxListModule,\n        AWCheckBoxModule,\n        AWChooserModule,\n        AWConfirmationModule,\n        AWCurrencyModule,\n        AWDateAndTimeModule,\n        AWDialogModule,\n        AWDropdownModule,\n        AWGenericChooserModule,\n        AWHyperlinkModule,\n        AWInputFieldModule,\n        AWOutlineForModule,\n        AWOverlayModule,\n        AWPageNotificationModule,\n        AWPageWrapperModule,\n        AWRadioButtonModule,\n        AWRadioButtonListModule,\n        AWRichTextAreaModule,\n        AWScrollableContainerModule,\n        AWSectionModule,\n        AWStepperModule,\n        AWStringFieldModule,\n        AWTextAreaModule,\n        AWFormTableModule,\n        AWButtonModule,\n        AWHoverCardModule,\n        AWListModule,\n        AWDatatable2Module,\n        WizardProgressModule,\n        ToggleSwitchModule,\n\n        // PrimeNG remove when all AW are imported\n        PanelModule,\n        ButtonModule,\n        ToolbarModule,\n        InputTextModule,\n        InputTextareaModule,\n        AutoCompleteModule,\n        DropdownModule,\n        CalendarModule,\n        CheckboxModule,\n        RadioButtonModule,\n        SharedModule,\n        DialogModule,\n        MenuModule,\n        TabMenuModule,\n        AccordionModule,\n        EditorModule,\n        DataTableModule,\n        PaginatorModule,\n        OverlayPanelModule,\n        TreeModule\n\n    ],\n    declarations: [\n        SpyLifeCycleHooksDirective,\n        // 3th party declaration\n    ],\n    bootstrap: [],\n    entryComponents: [\n\n        // PrimeNG\n        Checkbox,\n        Dialog\n    ],\n    exports: [\n        ReactiveFormsModule,\n        FormsModule,\n        SpyLifeCycleHooksDirective,\n        AWCoreComponentModule,\n        AWBasicNavigatorModule,\n        AWCardModule,\n        AWCheckBoxListModule,\n        AWCheckBoxModule,\n        AWChooserModule,\n        AWConfirmationModule,\n        AWCurrencyModule,\n        AWDateAndTimeModule,\n        AWDialogModule,\n        AWDropdownModule,\n        AWGenericChooserModule,\n        AWHyperlinkModule,\n        AWInputFieldModule,\n        AWOutlineForModule,\n        AWOverlayModule,\n        AWPageNotificationModule,\n        AWPageWrapperModule,\n        AWRadioButtonModule,\n        AWRadioButtonListModule,\n        AWRichTextAreaModule,\n        AWScrollableContainerModule,\n        AWSectionModule,\n        AWStepperModule,\n        AWStringFieldModule,\n        AWTextAreaModule,\n        AWFormTableModule,\n        EmbeddedItemDirective,\n        AWButtonModule,\n        AWHoverCardModule,\n        AWListModule,\n        AWDatatable2Module,\n        WizardProgressModule,\n        ToggleSwitchModule,\n\n        // PrimeNG\n        SharedModule,\n        PanelModule,\n        ButtonModule,\n        ToolbarModule,\n        InputTextModule,\n        InputTextareaModule,\n        AutoCompleteModule,\n        DropdownModule,\n        CalendarModule,\n        CheckboxModule,\n        RadioButtonModule,\n        DialogModule,\n        MenuModule,\n        TabMenuModule,\n        EditorModule,\n        DataTableModule,\n        PaginatorModule,\n        OverlayPanelModule\n    ]\n})\nexport class AribaComponentsModule\n{\n\n\n    static forRoot(): ModuleWithProviders\n    {\n        return {\n            ngModule: AribaComponentsModule,\n            providers: [\n                ModalService,\n                ComponentRegistry,\n                ErrorManagerService,\n                DomUtilsService,\n                DataTypeProviderRegistry,\n                DataProviders,\n                DataFinders,\n                AwNameStore,\n                {\n                    provide: APP_INITIALIZER,\n                    useFactory: registerComponents,\n                    deps: [ComponentRegistry],\n                    multi: true,\n                }\n            ]\n        };\n    }\n}\n\nexport function registerComponents(compRegistry: ComponentRegistry): Function\n{\n    return compRegistry.initialize.bind(compRegistry, components);\n}\n\n\n","/**\n *\n * @license\n * Copyright 2017 SAP Ariba\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *\n */\nimport {APP_INITIALIZER, ModuleWithProviders, NgModule} from '@angular/core';\nimport {ComponentRegistry} from './core/component-registry.service';\nimport * as components from './entry-components';\nimport {DomUtilsService} from './core/dom-utils.service';\nimport {ModalService} from './core/modal-service/modal.service';\nimport {DataProviders} from './core/data/data-providers';\nimport {DataFinders} from './core/data/data-finders';\nimport {ErrorManagerService} from './core/error-manager.service';\nimport {AwNameStore} from './core/aw-name/aw-name.store';\nimport {DataTypeProviderRegistry} from './core/data/datatype-registry.service';\n\n\n/**\n *\n * This module is used mainly for tests as importing a module with all the components and you\n * use only 1 or two has a big impact on the performance execution. e.g. from executing couple\n * tests under 1 sec can go up to 10sec if you import all the things that you are not using.\n *\n * I havent noticed anything similar in application its only jasmine/karma that needs to init\n * components for every test.\n *\n */\n@NgModule({\n    imports: []\n})\nexport class AribaComponentsTestProviderModule {\n\n\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: AribaComponentsTestProviderModule,\n            providers: [\n                ModalService,\n                ComponentRegistry,\n                ErrorManagerService,\n                DomUtilsService,\n                DataTypeProviderRegistry,\n                DataProviders,\n                DataFinders,\n                AwNameStore,\n                {\n                    provide: APP_INITIALIZER,\n                    useFactory: registerComponents,\n                    deps: [ComponentRegistry],\n                    multi: true,\n                }\n            ]\n        };\n    }\n}\n\nexport function registerComponents(compRegistry: ComponentRegistry): Function {\n    return compRegistry.initialize.bind(compRegistry, components);\n}\n\n\n"]}