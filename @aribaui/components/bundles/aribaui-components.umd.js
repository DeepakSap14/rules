(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@aribaui/core'), require('@angular/forms'), require('@angular/platform-browser'), require('@angular/common'), require('rxjs'), require('primeng/components/inputtext/inputtext'), require('rxjs/operators'), require('primeng/primeng'), require('@angular/animations'), require('@angular/router'), require('primeng/components/utils/objectutils')) :
    typeof define === 'function' && define.amd ? define('@aribaui/components', ['exports', '@angular/core', '@aribaui/core', '@angular/forms', '@angular/platform-browser', '@angular/common', 'rxjs', 'primeng/components/inputtext/inputtext', 'rxjs/operators', 'primeng/primeng', '@angular/animations', '@angular/router', 'primeng/components/utils/objectutils'], factory) :
    (factory((global.aribaui = global.aribaui || {}, global.aribaui.components = {}),global.ng.core,null,global.ng.forms,global.ng.platformBrowser,global.ng.common,global.rxjs,null,global.rxjs.operators,null,global.ng.animations,global.ng.router,null));
}(this, (function (exports,core,core$1,forms,platformBrowser,common,rxjs,inputtext,operators,primeng,animations,router,objectutils) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * When we have a custom component like dropdown, radiobuttonlist and
     * many more we want to provide a custom content to it like so:
     *
     * ```
     *  <aw-dropdown [list]="listOfUsers" let somehowGetItemOut>
     *      {{item.userName}}
     *
     *   <aw-dropdown
     *
     * ```
     * Who else would know how to render list of objects..
     *
     * But its not possible in current form. if I do not provide Angular some as they call it this
     * syntactic sugar *,
     *
     *
     * ```
     *  <aw-dropdown *mySugerDirective=.....>
     *      {{item.userName}}
     *
     *   <aw-dropdown
     * ```
     *
     *
     * then angular will not know  inside is a template and I wont be able to get hold of TemplateRef
     * inside the component
     *
     * So the only way I found (expecting I do not want to change anything in terms of bindings and the
     * signature I use it. I have to use it like this:
     *
     * ```
     *  <aw-dropdown [list]="listOfUsers" let somehowGetItemOut>
     *      <ng-template let-item> {{item.userName}}</ng-template>
     *
     *   <aw-dropdown
     *
     * ```
     *
     *  This way it could work. Since I am inside ngFor I want to render the item into the correct
     * viewContainer of ngFor's current item.
     *
     *  This way I can also expose item outside using Angular's special local variable called:
     * $implicit.
     *
     * This gets even more complex if we try to pass this template 2 levels down, like in case of
     * RadioButtonList. But later on I might want to refactor this into custom NG FOR
     *
     * @deprecated in favor of ngTemplateOutlet (will be removed in the next version)
     *
     */
    var EmbeddedItemDirective = (function () {
        function EmbeddedItemDirective(_viewContainer) {
            this._viewContainer = _viewContainer;
        }
        Object.defineProperty(EmbeddedItemDirective.prototype, "item", {
            set: /**
             * @param {?} item
             * @return {?}
             */ function (item) {
                this._implicitValue = item;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         */
        /**
         *
         * @param {?} changes
         * @return {?}
         */
        EmbeddedItemDirective.prototype.ngOnChanges = /**
         *
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (core$1.isPresent(this._viewRef)) {
                    this._viewContainer.remove(this._viewContainer.indexOf(this._viewRef));
                }
                if (core$1.isPresent(this.embeddedItem)) {
                    var /** @type {?} */ context = new EmbededItem(this._implicitValue);
                    this._viewRef = this._viewContainer.createEmbeddedView(this.embeddedItem, context);
                }
            };
        EmbeddedItemDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[embeddedItem]' },] },
        ];
        /** @nocollapse */
        EmbeddedItemDirective.ctorParameters = function () {
            return [
                { type: core.ViewContainerRef }
            ];
        };
        EmbeddedItemDirective.propDecorators = {
            embeddedItem: [{ type: core.Input }],
            item: [{ type: core.Input }]
        };
        return EmbeddedItemDirective;
    }());
    /**
     * Wrapper class around Angular's EmbeddedViewRef.context()
     *
     */
    var /**
     * Wrapper class around Angular's EmbeddedViewRef.context()
     *
     */ EmbededItem = (function () {
        function EmbededItem($implicit) {
            this.$implicit = $implicit;
        }
        return EmbededItem;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * GenericContainerComponent is used by include-component.directive to dynamically create an
     * HTMLElement and use this element to wrap a child component. This is very useful when we want to
     * modify a child by wrapping it with a border, a background, or bold its text.
     *
     * The wrapper element is dynamically created. It's element is specified by the tagName property in
     * the bindings \@Input.
     *
     *  ### Example.  Directly in html
     *
     *   app.html
     *      <aw-generic-container tagName="tagName" bindings="bindings">
     *          <my-component ..bindings..></my-component>
     *      </aw-generic-container>
     *
     *   app.component.ts
     *
     *       tagName = (bBold) ? 'h1' : 'span';
     *       bindings = {  style: 'background-color: red' }
     *
     */
    var GenericContainerComponent = (function () {
        /**
         * param renderer - Renderer is used to create 'tagName' element.
         */
        function GenericContainerComponent(renderer, element) {
            this.renderer = renderer;
            this.element = element;
            this.nativeElement = element.nativeElement;
        }
        /**
         * During the initialization, verify that at least one input has been set.
         */
        /**
         * During the initialization, verify that at least one input has been set.
         * @return {?}
         */
        GenericContainerComponent.prototype.ngOnInit = /**
         * During the initialization, verify that at least one input has been set.
         * @return {?}
         */
            function () {
                // If there's no input, this component wouldn't know what to do and throw exception.
                if (core$1.isBlank(this.bindings) && core$1.isBlank(this.tagName)) {
                    throw new Error('GenericContainerComponent input bindings or tagName ' +
                        'have not been set.');
                }
                // If the tagName is blank, the get it from bindings.
                if (core$1.isBlank(this.tagName)) {
                    this.tagName = this.bindings.get('tagName');
                    if (core$1.isBlank(this.tagName)) {
                        this.tagName = GenericContainerComponent.DefaultTagName;
                    }
                }
                // Save first added
                this.childElement = this.nativeElement.firstChild;
                this.doRender();
            };
        /**
         * @return {?}
         */
        GenericContainerComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
                if (core$1.isPresent(this.childElement) &&
                    this.childElement.parentNode !== this.nativeElement.firstChild) {
                    this.nativeElement.firstChild.appendChild(this.childElement);
                }
            };
        /**
         * After content has been initialized. Create the tagName element. Apply all the bindings on to
         * the element as attribute. Finally, move the child element, <ng-content>, to inside the
         * wrapper component.
         * @return {?}
         */
        GenericContainerComponent.prototype.doRender = /**
         * After content has been initialized. Create the tagName element. Apply all the bindings on to
         * the element as attribute. Finally, move the child element, <ng-content>, to inside the
         * wrapper component.
         * @return {?}
         */
            function () {
                var _this = this;
                var /** @type {?} */ el = this.renderer.createElement(this.tagName);
                if (core$1.isPresent(this.nativeElement)) {
                    this.renderer.appendChild(this.nativeElement, el);
                }
                // Loop through all the bindings and add them to the element.
                core$1.MapWrapper.iterable(this.bindings).forEach(function (v, k) {
                    _this.renderer.setStyle(el, k, v);
                });
                // Attach the component to this divElement.
                el.appendChild(this.childElement);
            };
        /**
         * Default tagName if none is specified inside bindings.
         *
         */
        GenericContainerComponent.DefaultTagName = 'div';
        GenericContainerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-generic-container',
                        template: '<ng-content></ng-content>',
                        styles: []
                    },] },
        ];
        /** @nocollapse */
        GenericContainerComponent.ctorParameters = function () {
            return [
                { type: core.Renderer2 },
                { type: core.ElementRef }
            ];
        };
        GenericContainerComponent.propDecorators = {
            bindings: [{ type: core.Input }],
            tagName: [{ type: core.Input }]
        };
        return GenericContainerComponent;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     *  Base component shares common functionality among all the components (layouts, widgets).
     *
     * @abstract
     */
    var BaseComponent = (function () {
        function BaseComponent(env) {
            this.env = env;
            /**
             * Adds disabled flag to the component
             *
             */
            this.disabled = false;
            /**
             * Weather this component is visible
             * Default is false;
             */
            this.visible = false;
            /**
             * Tell  the component if we are in editing mode.
             *
             */
            this.editable = true;
            /**
             * Removes padding from the component. Usually used when we are nesting other component with
             * its own grid.
             */
            this.omitPadding = false;
            /**
             * Prefix for the correct asset path
             */
            this.assetFolder = 'assets';
            this.extBindings = new Map();
            this.omitPadding = false;
        }
        /**
         * @return {?}
         */
        BaseComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.assetFolder = this.env.getValue(core$1.AppConfig.AssetFolder);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        BaseComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
            };
        /**
         * @return {?}
         */
        BaseComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        BaseComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
            };
        BaseComponent.propDecorators = {
            disabled: [{ type: core.Input }],
            visible: [{ type: core.Input }],
            editable: [{ type: core.Input }],
            width: [{ type: core.Input }],
            height: [{ type: core.Input }],
            styleClass: [{ type: core.Input }],
            omitPadding: [{ type: core.Input }]
        };
        return BaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @enum {number} */
    var WidgetSizeColumns = {
        xsmall: 1,
        small: 3,
        medium: 6,
        large: 9,
        xlarge: 12,
    };
    WidgetSizeColumns[WidgetSizeColumns.xsmall] = "xsmall";
    WidgetSizeColumns[WidgetSizeColumns.small] = "small";
    WidgetSizeColumns[WidgetSizeColumns.medium] = "medium";
    WidgetSizeColumns[WidgetSizeColumns.large] = "large";
    WidgetSizeColumns[WidgetSizeColumns.xlarge] = "xlarge";
    /**
     *  BaseFormComponnet extends BaseComponent for add specific form behavior
     *
     * @abstract
     */
    var BaseFormComponent = (function (_super) {
        __extends(BaseFormComponent, _super);
        /**
         * Some of the BaseFormComponent can wrap other component and in these cases we want to
         * inherit some of the behavior from parent
         *
         * @Inject(Environment) public env: Environment : is tem a workaround as without inject
         * on this specific component it complains that Environment is unresolved symbol
         *
         */
        function BaseFormComponent(env, parentContainer) {
            var _this = _super.call(this, env) || this;
            _this.env = env;
            _this.parentContainer = parentContainer;
            /**
             *
             * Is current element visible
             */
            _this.hidden = false;
            /**
             * Renders required flex around the component
             *
             */
            _this.required = false;
            /**
             *  a text displayed when value is empty or NULL
             */
            _this.placeHolder = '';
            /**
             * Identify if this control is used directly or if its part of some other control
             * e.g. GenericChooser and managed by this control.
             * Meaning State is mananged outside of this component
             *
             */
            _this.isStandalone = true;
            _this.onModelChanged = core$1.noop;
            _this.onModelTouched = core$1.noop;
            return _this;
        }
        /**
         * @return {?}
         */
        BaseFormComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                if (core$1.isPresent(this.parentContainer)) {
                    this.formGroup = this.parentContainer.formGroup;
                    this.editable = this.parentContainer.editable;
                }
                this.checkInitForm();
            };
        /**
         * Make sure that we have available formGroup and Name and ID
         *
         */
        /**
         * Make sure that we have available formGroup and Name and ID
         *
         * @return {?}
         */
        BaseFormComponent.prototype.checkInitForm = /**
         * Make sure that we have available formGroup and Name and ID
         *
         * @return {?}
         */
            function () {
                if (core$1.isBlank(this.env.currentForm)) {
                    this.env.currentForm = new forms.FormGroup({});
                }
                /**
                         * Todo: Right now I just need to initialize name , but ideally it needs to be generated
                         * number basedon some semantics app.page.component if there are more component on the page
                         * then app.page.componentNumber. Simple solution is to is to get Elementref and query it.
                         */
                if (core$1.isBlank(this.name)) {
                    this.name = core$1.uuid();
                }
                if (core$1.isBlank(this.id)) {
                    this.id = core$1.uuid();
                }
            };
        /**
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
        BaseFormComponent.prototype.doRegister = /**
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
            function (name, value) {
                var /** @type {?} */ fControl;
                if (core$1.isBlank(this.formGroup.controls[name])) {
                    this.formGroup.registerControl(name, new forms.FormControl(value));
                    fControl = /** @type {?} */ (this.formGroup.controls[name]);
                }
                else {
                    fControl = /** @type {?} */ (this.formGroup.controls[name]);
                    var /** @type {?} */ updatedValue = core$1.isPresent(fControl.value) ? fControl.value : value;
                    fControl.patchValue(updatedValue, { onlySelf: true, emitEvent: false });
                }
                return fControl;
            };
        /**
         * When we are dealing with Forms this is a helper method to register control
         *
         *
         * @param value default value to be pre-set
         */
        /**
         * When we are dealing with Forms this is a helper method to register control
         *
         *
         * @param {?} value default value to be pre-set
         * @return {?}
         */
        BaseFormComponent.prototype.registerFormControl = /**
         * When we are dealing with Forms this is a helper method to register control
         *
         *
         * @param {?} value default value to be pre-set
         * @return {?}
         */
            function (value) {
                this.formControl = this.doRegister(this.name, value);
                if (this.disabled) {
                    this.formControl.disable();
                }
            };
        Object.defineProperty(BaseFormComponent.prototype, "formGroup", {
            get: /**
             * @return {?}
             */ function () {
                return core$1.isPresent(this._formGroup) ? this._formGroup : this.env.currentForm;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._formGroup = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Indicates if we can pass field type as a binding to the components. e.g. InputField need
         * such type to correctly render input type=text, number
         *
         * todo: is this needed? can we maybe pass this to the formRow?
         */
        /**
         * Indicates if we can pass field type as a binding to the components. e.g. InputField need
         * such type to correctly render input type=text, number
         *
         * todo: is this needed? can we maybe pass this to the formRow?
         * @return {?}
         */
        BaseFormComponent.prototype.canSetType = /**
         * Indicates if we can pass field type as a binding to the components. e.g. InputField need
         * such type to correctly render input type=text, number
         *
         * todo: is this needed? can we maybe pass this to the formRow?
         * @return {?}
         */
            function () {
                return false;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        BaseFormComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        BaseFormComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onModelChanged = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        BaseFormComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onModelTouched = fn;
            };
        /*
             *  Supported layout constants. It is expected there will be more options as we currently
             *  support only these two there will be other variations of it. e.g. for stacked it will not
             *  be 1 columns like it is now but multiple columns
             *
             */
        BaseFormComponent.LayoutStacked = 'stacked';
        BaseFormComponent.LayoutInline = 'inline';
        /** @nocollapse */
        BaseFormComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment, decorators: [{ type: core.Inject, args: [core$1.Environment,] }] },
                { type: BaseFormComponent, decorators: [{ type: core.SkipSelf }, { type: core.Optional }, { type: core.Inject, args: [core.forwardRef(function () { return BaseFormComponent; }),] }] }
            ];
        };
        BaseFormComponent.propDecorators = {
            name: [{ type: core.Input }],
            id: [{ type: core.Input }],
            hidden: [{ type: core.Input }],
            required: [{ type: core.Input }],
            placeHolder: [{ type: core.Input }],
            isStandalone: [{ type: core.Input }],
            formGroup: [{ type: core.Input }]
        };
        return BaseFormComponent;
    }(BaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Simple component rendering values in the read only mode. Just needed some component used
     * to render Strings in read only mode
     *
     *
     *  ### Example
     *
     * Using it inside form container along with label
     *
     *
     *  ```
     * \@Component({
     *              selector: 'userInfo' ,
     *              template: `
     *                      <aw-form-table [editable]="false" >
     *                          <aw-form-row [name]="fieldName"  [label]="label">
     *                                 <aw-string [value]="inputValue" ></aw-string>
     *                           </aw-form-row>
     *                      </aw-form-table>
     *
     *                  `
     *          })
     *          export class UserProfileComponent
     *          {
     *              inputValue: string = 'Some text';
     *              inputType: string = 'string';
     *              fieldName: string = 'firstName';
     *              label: string = 'My Name';
     *              required: boolean = true;
     *              editing: boolean = true;
     *              labelsOnTop: boolean = false;
     *
     *          }
     *
     *  ```
     *
     * You can also pass html tags.
     *
     */
    var StringComponent = (function (_super) {
        __extends(StringComponent, _super);
        function StringComponent(env, sanitizer, parentContainer) {
            var _this = _super.call(this, env, parentContainer) || this;
            _this.env = env;
            _this.sanitizer = sanitizer;
            _this.parentContainer = parentContainer;
            /**
             *  Value to be interpolated
             *
             */
            _this._value = '';
            return _this;
        }
        Object.defineProperty(StringComponent.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                return this.sanitizer.bypassSecurityTrustHtml(this._value);
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._value = value;
            },
            enumerable: true,
            configurable: true
        });
        StringComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-string',
                        template: "\n        <span class=\"w-string-field\" [innerHTML]=\"value\"></span>\n    ",
                        styles: [".w-string-field{display:inline-block}"]
                    },] },
        ];
        /** @nocollapse */
        StringComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: platformBrowser.DomSanitizer },
                { type: BaseFormComponent, decorators: [{ type: core.SkipSelf }, { type: core.Optional }, { type: core.Inject, args: [core.forwardRef(function () { return BaseFormComponent; }),] }] }
            ];
        };
        StringComponent.propDecorators = {
            value: [{ type: core.Input }]
        };
        return StringComponent;
    }(BaseFormComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * A class holding a references to components. The methods are self-explanatory.
     *
     */
    var ComponentRegistry = (function () {
        function ComponentRegistry(env) {
            this.env = env;
            this._nameToType = new Map();
        }
        /**
         * @param {?} references
         * @return {?}
         */
        ComponentRegistry.prototype.initialize = /**
         * @param {?} references
         * @return {?}
         */
            function (references) {
                this.registerTypes(references);
                var /** @type {?} */ promise = new Promise(function (resolve) {
                    resolve(true);
                });
                return promise;
            };
        /**
         * @param {?} name
         * @param {?} type
         * @return {?}
         */
        ComponentRegistry.prototype.registerType = /**
         * @param {?} name
         * @param {?} type
         * @return {?}
         */
            function (name, type) {
                if (!this.nameToType.has(name)) {
                    this._nameToType.set(name, type);
                }
            };
        /**
         * @param {?} references
         * @return {?}
         */
        ComponentRegistry.prototype.registerTypes = /**
         * @param {?} references
         * @return {?}
         */
            function (references) {
                var _this = this;
                if (!core$1.isStringMap(references)) {
                    return;
                }
                Object.keys(references).forEach(function (name) {
                    _this.registerType(name, references[name]);
                });
            };
        Object.defineProperty(ComponentRegistry.prototype, "nameToType", {
            get: /**
             * @return {?}
             */ function () {
                return this._nameToType;
            },
            enumerable: true,
            configurable: true
        });
        ComponentRegistry.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        ComponentRegistry.ctorParameters = function () {
            return [
                { type: core$1.Environment }
            ];
        };
        return ComponentRegistry;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     *  `IncludeComponent` directive dynamically instantiate and insert a components into the screen
     * based on the name. It can accepts bindings as well which will be automatically bound and applied
     * to the component
     *
     *  ### usage:
     *
     *  Instead of inserting component in the way:
     *
     *  ```
     *    <textfield value="some value">
     *
     *  ```
     *
     *  you can do so dynamically like this:
     *
     * ```
     *  <aw-include-component 'TextfieldComponent' [bindings]=bindings ></aw-include-component>
     * ```
     *
     * This is the main building block to dynamically generated UI.
     *
     *
     * Todo: Currently the way Angular API work and we use it to create programatically components
     * is too complext we need to create everything 3 different calls to place a component to the
     * container. What I want is is to create some kind of representation of ContainerElement and this
     * can be also parent for our BaseComponent with method add and remove content. Then we could have
     * some AWContent.
     *
     * e.g.: to replace applyContentElementIfAny where we have several calls to create and add
     * component to the view.
     *
     * ```ts
     *  let containerElement = AWConcreteTemplate(viewContainer, factoryResolver)
     *  containerElement.add('Clck Me')
     * ```
     *
     * To assemble different components together - not only adding string content
     *
     * ```ts
     *  let content = new AWContent(ButtonComponent, bindingsMap)
     *  content.add('Click Me');
     *  containerElement.add(content)
     *
     * ```
     *
     * add more component hierarchy:
     *
     * ```ts
     *  let content = new AWContent(HoverCardComponnets, bindingsMap)
     *  content.add(createLayout();
     *  containerElement.add(content)
     *
     * ```
     *
     *
     *
     *
     */
    var IncludeComponentDirective = (function () {
        function IncludeComponentDirective(viewContainer, factoryResolver, cd, compRegistry) {
            this.viewContainer = viewContainer;
            this.factoryResolver = factoryResolver;
            this.cd = cd;
            this.compRegistry = compRegistry;
            /**
             * I use this flag to identify that component is rendering for first time or its updated during
             * change detection
             *
             */
            this.initRenderInProgress = false;
            /**
             * Not sure if we need this, but want to keep it here or maybe move it to some service so we
             * can cache created components and maybe reuse them.
             *
             */
            this.componentReferences = new Map();
            this.bindings = new Map();
        }
        /**
         * @return {?}
         */
        IncludeComponentDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.initRenderInProgress = true;
                // todo: check if this the right lifecycle callback, this is called only once and you want
                // to probably listen for changes, and change dection decide there is some change and we
                // need to re-draw the view
                this.viewContainer.clear();
                this.doRenderComponent();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        IncludeComponentDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (core$1.isPresent(changes['name']) &&
                    (changes['name'].currentValue !== changes['name'].previousValue)) {
                    this.viewContainer.clear();
                    this.doRenderComponent();
                }
            };
        /**
         * @return {?}
         */
        IncludeComponentDirective.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
            function () {
                this.initRenderInProgress = false;
            };
        /**
         * @return {?}
         */
        IncludeComponentDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                // check to see if we need to render and reposition DOM element both for wrapper and
                // content
                this.createWrapperElementIfAny();
                this.createContentElementIfAny();
            };
        /**
         * @return {?}
         */
        IncludeComponentDirective.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * Handles a case where we need to resolve additional component and wrap the current one.
         * Just like reateContentElementIfAny() this method needs to be executed after all
         * is created and initialized (inside the ngAfterViewInit() )
         *
         */
        /**
         * Handles a case where we need to resolve additional component and wrap the current one.
         * Just like reateContentElementIfAny() this method needs to be executed after all
         * is created and initialized (inside the ngAfterViewInit() )
         *
         * @return {?}
         */
        IncludeComponentDirective.prototype.createWrapperElementIfAny = /**
         * Handles a case where we need to resolve additional component and wrap the current one.
         * Just like reateContentElementIfAny() this method needs to be executed after all
         * is created and initialized (inside the ngAfterViewInit() )
         *
         * @return {?}
         */
            function () {
            };
        /**
         * Renders a component into actual View Container. The process goes as this.
         *  1. We retrieve component Type based on the component name, which creates componentRef
         *  2. Place the component onto the screen
         *  3. Read component metadata, mainly INPUTs and apply bindings for each of them
         *  4. Manually spin change detection to update the screen. Mainly for case where I need to
         * redraw a screen
         */
        /**
         * Renders a component into actual View Container. The process goes as this.
         *  1. We retrieve component Type based on the component name, which creates componentRef
         *  2. Place the component onto the screen
         *  3. Read component metadata, mainly INPUTs and apply bindings for each of them
         *  4. Manually spin change detection to update the screen. Mainly for case where I need to
         * redraw a screen
         * @return {?}
         */
        IncludeComponentDirective.prototype.doRenderComponent = /**
         * Renders a component into actual View Container. The process goes as this.
         *  1. We retrieve component Type based on the component name, which creates componentRef
         *  2. Place the component onto the screen
         *  3. Read component metadata, mainly INPUTs and apply bindings for each of them
         *  4. Manually spin change detection to update the screen. Mainly for case where I need to
         * redraw a screen
         * @return {?}
         */
            function () {
                var _this = this;
                this.placeTheComponent();
                // this.currentComponent.changeDetectorRef.detach();
                this.applyBindings(this.componentReference(), this.currentComponent, this.bindings);
                // this.currentComponent.changeDetectorRef.detectChanges();
                // Still not sure about this what all I should release here.
                this.currentComponent.onDestroy(function () {
                    // this.bindings.clear();
                    // this.bindings = undefined;
                    //
                    // this.componentReferences.clear();
                    // this.componentReferences = undefined;
                    // this.bindings.clear();
                    // this.bindings = undefined;
                    //
                    // this.componentReferences.clear();
                    // this.componentReferences = undefined;
                    _this.destroy();
                });
            };
        /**
         * Place actual component onto the screen using ViewContainerRef
         *
         */
        /**
         * Place actual component onto the screen using ViewContainerRef
         *
         * @return {?}
         */
        IncludeComponentDirective.prototype.placeTheComponent = /**
         * Place actual component onto the screen using ViewContainerRef
         *
         * @return {?}
         */
            function () {
                var /** @type {?} */ reference = this.componentReference();
                this.currentComponent = this.viewContainer.createComponent(reference.resolvedCompFactory);
            };
        /**
         * When inserting Component that needs to have a content like e.g. hyperlink or button
         *
         * ```
         *   <button> MY NG CONTENT </button>
         *
         * ```
         *  this method applies and insert a child content into the main component. This method insert
         * a simple string. We are not wrapping existing component with another component here.
         *
         * @return need to run detect changes ? default is false
         */
        /**
         * When inserting Component that needs to have a content like e.g. hyperlink or button
         *
         * ```
         *   <button> MY NG CONTENT </button>
         *
         * ```
         *  this method applies and insert a child content into the main component. This method insert
         * a simple string. We are not wrapping existing component with another component here.
         *
         * @return {?} need to run detect changes ? default is false
         */
        IncludeComponentDirective.prototype.createContentElementIfAny = /**
         * When inserting Component that needs to have a content like e.g. hyperlink or button
         *
         * ```
         *   <button> MY NG CONTENT </button>
         *
         * ```
         *  this method applies and insert a child content into the main component. This method insert
         * a simple string. We are not wrapping existing component with another component here.
         *
         * @return {?} need to run detect changes ? default is false
         */
            function () {
                var /** @type {?} */ detectChanges = false;
                var /** @type {?} */ ngContent = this.ngContent();
                var /** @type {?} */ ngContentElement = this.ngContentElement();
                if (core$1.isPresent(ngContent)) {
                    var /** @type {?} */ awContentComponent = this.factoryResolver.resolveComponentFactory(StringComponent);
                    var /** @type {?} */ component = this.viewContainer.createComponent(awContentComponent, 0);
                    ((component.instance)).value = ngContent;
                    var /** @type {?} */ awContentContainer = this.currentComponent.location.nativeElement.firstChild;
                    awContentContainer.appendChild(component.location.nativeElement);
                    detectChanges = true;
                }
                else if (core$1.isPresent(ngContentElement)) ;
                return detectChanges;
            };
        /**
         *
         * Retrieve a NG Content from binding list and remove it so it its not prepagated down when
         * applying other bindings.
         *
         */
        /**
         *
         * Retrieve a NG Content from binding list and remove it so it its not prepagated down when
         * applying other bindings.
         *
         * @return {?}
         */
        IncludeComponentDirective.prototype.ngContent = /**
         *
         * Retrieve a NG Content from binding list and remove it so it its not prepagated down when
         * applying other bindings.
         *
         * @return {?}
         */
            function () {
                var /** @type {?} */ content;
                if (core$1.isPresent(content = this.bindings.get(IncludeComponentDirective.NgContent))) {
                    this.bindings.delete(IncludeComponentDirective.NgContent);
                }
                return content;
            };
        /**
         * @return {?}
         */
        IncludeComponentDirective.prototype.ngContentElement = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ content;
                if (core$1.isPresent(content = this.bindings.get(IncludeComponentDirective.NgContentElement))) {
                    this.bindings.delete(IncludeComponentDirective.NgContentElement);
                }
                return content;
            };
        /**
         * We need to convert a component name to actual a type and then use ComponentFactoryResolver
         * to instantiate a a component and save its information into our component references. The
         * reason why we have this component reference is we need to store Angular's component metadata
         * so we can iterate thru all the inputs and bind them to the context.
         *
         * returns {ComponentReference} a reference representing a compoent currently being rendered
         */
        /**
         * We need to convert a component name to actual a type and then use ComponentFactoryResolver
         * to instantiate a a component and save its information into our component references. The
         * reason why we have this component reference is we need to store Angular's component metadata
         * so we can iterate thru all the inputs and bind them to the context.
         *
         * returns {ComponentReference} a reference representing a compoent currently being rendered
         * @return {?}
         */
        IncludeComponentDirective.prototype.componentReference = /**
         * We need to convert a component name to actual a type and then use ComponentFactoryResolver
         * to instantiate a a component and save its information into our component references. The
         * reason why we have this component reference is we need to store Angular's component metadata
         * so we can iterate thru all the inputs and bind them to the context.
         *
         * returns {ComponentReference} a reference representing a compoent currently being rendered
         * @return {?}
         */
            function () {
                if (core$1.isPresent(this.resolvedComponentRef)) {
                    return this.resolvedComponentRef;
                }
                var /** @type {?} */ currType = this.resolveComponentType();
                var /** @type {?} */ componentFactory = this.factoryResolver
                    .resolveComponentFactory(currType);
                var /** @type {?} */ componentMeta = this.resolveDirective(componentFactory);
                var /** @type {?} */ compReference = {
                    metadata: componentMeta,
                    resolvedCompFactory: componentFactory,
                    componentType: currType,
                    componentName: this.name
                };
                this.resolvedComponentRef = compReference;
                return compReference;
            };
        /**
         * Iterates thru ComponentMetadata @Inputs() and check if we have available binding inside the
         * 'this.bindings'
         */
        /**
         * Iterates thru ComponentMetadata \@Inputs() and check if we have available binding inside the
         * 'this.bindings'
         * @param {?} cRef
         * @param {?} component
         * @param {?} bindings
         * @return {?}
         */
        IncludeComponentDirective.prototype.applyBindings = /**
         * Iterates thru ComponentMetadata \@Inputs() and check if we have available binding inside the
         * 'this.bindings'
         * @param {?} cRef
         * @param {?} component
         * @param {?} bindings
         * @return {?}
         */
            function (cRef, component, bindings) {
                var /** @type {?} */ inputs = cRef.metadata.inputs;
                if (core$1.isBlank(inputs) || inputs.length === 0) {
                    return;
                }
                // should we do any type conversion?
                core$1.MapWrapper.iterable(bindings).forEach(function (v, k) {
                    if (core$1.isPresent(component.instance[k])) {
                        component.instance[k] = v;
                    }
                });
            };
        /**
         * Resolves a component Type based on the string literal
         *
         * @returns component type used by `ComponentFactoryResolver`
         *
         * todo: rename the method so its clear that it returns component type based on string.
         */
        /**
         * Resolves a component Type based on the string literal
         *
         * @return {?} component type used by `ComponentFactoryResolver`
         *
         * todo: rename the method so its clear that it returns component type based on string.
         */
        IncludeComponentDirective.prototype.resolveComponentType = /**
         * Resolves a component Type based on the string literal
         *
         * @return {?} component type used by `ComponentFactoryResolver`
         *
         * todo: rename the method so its clear that it returns component type based on string.
         */
            function () {
                var /** @type {?} */ componentType = this.compRegistry.nameToType.get(this.name);
                if (core$1.isBlank(componentType)) {
                    core$1.assert(false, this.name + ' component does not exists. Create Dummy Component instead' +
                        ' of throwing this error');
                    return;
                }
                return componentType;
            };
        /**
         * @param {?} compFactory
         * @return {?}
         */
        IncludeComponentDirective.prototype.resolveDirective = /**
         * @param {?} compFactory
         * @return {?}
         */
            function (compFactory) {
                var /** @type {?} */ compMeta = {
                    inputs: [],
                    outputs: []
                };
                if (core$1.isPresent(compFactory.inputs) && compFactory.inputs.length > 0) {
                    compFactory.inputs.forEach(function (input) {
                        compMeta.inputs.push(input.propName);
                    });
                }
                if (core$1.isPresent(compFactory.outputs) && compFactory.outputs.length > 0) {
                    compFactory.outputs.forEach(function (output) {
                        compMeta.outputs.push(output.propName);
                    });
                }
                return compMeta;
            };
        /**
         * @return {?}
         */
        IncludeComponentDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (core$1.isPresent(this.currentComponent)) {
                    this.currentComponent.destroy();
                    this.currentComponent = undefined;
                }
                if (core$1.isPresent(this.viewContainer)) {
                    this.viewContainer.clear();
                }
            };
        /**
         * @return {?}
         */
        IncludeComponentDirective.prototype.destroy = /**
         * @return {?}
         */
            function () {
                if (core$1.isPresent(this.currentComponent)) {
                    this.currentComponent = null;
                    this.resolvedComponentRef = null;
                }
            };
        IncludeComponentDirective.NgContent = 'ngcontent';
        IncludeComponentDirective.NgContentElement = 'ngcontentElement';
        IncludeComponentDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'aw-include-component'
                    },] },
        ];
        /** @nocollapse */
        IncludeComponentDirective.ctorParameters = function () {
            return [
                { type: core.ViewContainerRef },
                { type: core.ComponentFactoryResolver },
                { type: core.ChangeDetectorRef },
                { type: ComponentRegistry }
            ];
        };
        IncludeComponentDirective.propDecorators = {
            name: [{ type: core.Input }],
            bindings: [{ type: core.Input }]
        };
        return IncludeComponentDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Error Manager is a service used by Forms components to map error codes into meaningful messages.
     * Currently it does not have much but once we plug in localization it will make more sense
     *
     *
     * todo: Once ng-translate is implemented replace this with ng-translate functionality so we can
     * externalize these messages into locale files.
     *
     */
    var ErrorManagerService = (function () {
        function ErrorManagerService() {
            this.messages = {
                'required': 'Required field',
                'minlength': 'Field does not meet minimum length',
                'maxlength': 'Field does not meet maximum length',
                'customMsg': '%s',
                'metavalid': '%s'
            };
        }
        /**
         * @param {?} validatorName
         * @param {?=} validatorValue
         * @return {?}
         */
        ErrorManagerService.prototype.errorMessage = /**
         * @param {?} validatorName
         * @param {?=} validatorValue
         * @return {?}
         */
            function (validatorName, validatorValue) {
                var /** @type {?} */ message = this.messages[validatorName];
                if (core$1.StringWrapper.contains(message, '%s')) {
                    // todo: use ng-translate with proper message formatting
                    return core$1.StringWrapper.replace(message, '%s', validatorValue.msg);
                }
                return message;
            };
        ErrorManagerService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        ErrorManagerService.ctorParameters = function () { return []; };
        return ErrorManagerService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * ErrorMessagesComponent is used by form's component like FormRow to print its validation errors.
     * Its  based on ModelDriven (Reactive forms) and it reads errors from FormControl
     *
     *
     *
     */
    var ErrorMessagesComponent = (function () {
        function ErrorMessagesComponent(errManager) {
            this.errManager = errManager;
        }
        /**
         * @return {?}
         */
        ErrorMessagesComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        ErrorMessagesComponent.prototype.hasMessage = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ msg = this.errorMsg;
                return core$1.isPresent(msg);
            };
        Object.defineProperty(ErrorMessagesComponent.prototype, "errorMsg", {
            /**
             * Retrieve a messages if any registered by added validators
             *
             */
            get: /**
             * Retrieve a messages if any registered by added validators
             *
             * @return {?}
             */ function () {
                for (var /** @type {?} */ propertyName in this.control.errors) {
                    if (this.control.errors.hasOwnProperty(propertyName) && this.control.touched) {
                        return this.errManager.errorMessage(propertyName, this.control.errors[propertyName]);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Show errors? We currently shows errors if the control is not valid, it was touched by user.
         * Most of the type on blur event  and at last its not pristine anymore (its dirty)
         *
         */
        /**
         *
         * Show errors? We currently shows errors if the control is not valid, it was touched by user.
         * Most of the type on blur event  and at last its not pristine anymore (its dirty)
         *
         * @return {?}
         */
        ErrorMessagesComponent.prototype.showErrors = /**
         *
         * Show errors? We currently shows errors if the control is not valid, it was touched by user.
         * Most of the type on blur event  and at last its not pristine anymore (its dirty)
         *
         * @return {?}
         */
            function () {
                return !this.control.valid && !this.control.pristine && this.control.touched;
            };
        ErrorMessagesComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'a-error-messages',
                        template: "\n            <div class=\"ui-g\">\n                    <small *ngIf=\"hasMessage()\"\n                        class=\"ui-g-12 ui-message ui-messages-error ui-corner-all\">\n                        {{ errorMsg }}\n                    </small>\n            </div>\n    ",
                        styles: [""]
                    },] },
        ];
        /** @nocollapse */
        ErrorMessagesComponent.ctorParameters = function () {
            return [
                { type: ErrorManagerService }
            ];
        };
        ErrorMessagesComponent.propDecorators = {
            control: [{ type: core.Input }]
        };
        return ErrorMessagesComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Modal service is used to to create modal dialogs. It creates modal dialogs dynamically.
     * The service also keeps track of the created modal dialog and can close it by calling the
     * service's close()
     *
     * Modal service requires a ViewContainer to insert newly created modals. This is taken care
     * by the ModalComponent.
     *
     * Usage:
     *     Add   <aw-modal></aw-modal>  into your application main html. It needs to be on every
     *     page where a modal dialog will appear.
     *
     *    1.  Popup a dialog without creating your own component.
     *        Use the existing DialogComponent in widgets.
     *
     *             this.modalService.open<DialogComponent>(DialogComponent, {
     *                     title: 'My Popup Title',
     *                     body: 'My Popup Body'
     *              });
     *
     *
     *   2.   Creating your own Dialog Component to popup.
     *
     *         let componentRef = this.modalService.open<MyDialogComponent>(MyDialogComponent,
     * {inputs});
     *
     * \@Component({
     *                selector: 'aw-mydialog' ,
     *                           template: `
     *                                         <aw-dialog (onClose)="closePopup()">
     *                                              <ng-template #titleTemplate>
     *                                                 <span><i class="fa fa-envira" ></i>This is my
     *     Title </span>
     *                                              </ng-template>
     *                                              <ng-template #bodyTemplate>
     *                                                 <span><i class="fa fa-envira" ></i>This is my
     *     Body </span>
     *                                              </ng-template>
     *                                        </aw-dialog>
     *                                     `
     *         })
     *         export class MyDialogComponent extends DialogComponent implements OnInit {
     *                     constructor(private modalService: ModalService) {
     *                          super();
     *                       }
     *                     ngOnInit() { }
     *
     *                     closePopup() {
     *                            this.modalService.close();
     *                      }
     *         }
     */
    var ModalService = (function () {
        /**
         * DI ComponentFactoryResolver to be used to create modal component.
         *
         * @param cfr
         */
        function ModalService(cfr) {
            this.cfr = cfr;
        }
        /**
         *  PlaceHolder for modal to be inserted.
         *
         * @param vcRef
         */
        /**
         *  PlaceHolder for modal to be inserted.
         *
         * @param {?} vcRef
         * @return {?}
         */
        ModalService.prototype.registerViewContainerRef = /**
         *  PlaceHolder for modal to be inserted.
         *
         * @param {?} vcRef
         * @return {?}
         */
            function (vcRef) {
                this.vcRef = vcRef;
            };
        /**
         * Opens the modal dialog by dynamically creating the component and adding it to vcRef.
         *
         */
        /**
         * Opens the modal dialog by dynamically creating the component and adding it to vcRef.
         *
         * @template T
         * @param {?} component
         * @param {?=} parameters
         * @return {?}
         */
        ModalService.prototype.open = /**
         * Opens the modal dialog by dynamically creating the component and adding it to vcRef.
         *
         * @template T
         * @param {?} component
         * @param {?=} parameters
         * @return {?}
         */
            function (component, parameters) {
                var /** @type {?} */ cf = this.cfr.resolveComponentFactory(component);
                var /** @type {?} */ componentRef = this.vcRef.createComponent(cf);
                // Auto set visiblity to true. So that the Dialog will display
                parameters = (parameters) ? parameters : {};
                parameters['visible'] = true;
                // Handle output parameters.
                ModalService.OUTPUT_PARAMETERS.forEach(function (param) {
                    if (parameters[param]) {
                        ((componentRef.instance))[param].subscribe(parameters[param]);
                        delete parameters[param];
                    }
                });
                Object.assign(componentRef.instance, parameters);
                // had to cast it in order to avoid any index Error
                // Attach a destroy method to the newly created component.
                ((componentRef.instance))['destroy'] = function () {
                    componentRef.destroy();
                };
                // Save the instance, so it can be destroyed later.
                this.instance = componentRef;
                return componentRef;
            };
        /**
         * Calling close() will remove the modal from view.
         */
        /**
         * Calling close() will remove the modal from view.
         * @return {?}
         */
        ModalService.prototype.close = /**
         * Calling close() will remove the modal from view.
         * @return {?}
         */
            function () {
                if (this.instance) {
                    this.instance.destroy();
                    this.instance = null;
                }
            };
        /**
         * This is a static list of output parameter from Dialog, Confirmation components
         * that needs to be handled.
         *
         */
        ModalService.OUTPUT_PARAMETERS = ['onClose', 'onConfirm', 'onCancel'];
        ModalService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        ModalService.ctorParameters = function () {
            return [
                { type: core.ComponentFactoryResolver }
            ];
        };
        return ModalService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Place holder for all modal dialogs. This component works with the modalService by providing
     * a place holder for it to inject Dialog component into.
     */
    var ModalComponent = (function () {
        function ModalComponent(modalService) {
            this.modalService = modalService;
        }
        /**
         * @return {?}
         */
        ModalComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.modalService.registerViewContainerRef(this.viewContainerRef);
            };
        ModalComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-modal',
                        template: "<div #modal></div>\n",
                        styles: [""]
                    },] },
        ];
        /** @nocollapse */
        ModalComponent.ctorParameters = function () {
            return [
                { type: ModalService }
            ];
        };
        ModalComponent.propDecorators = {
            viewContainerRef: [{ type: core.ViewChild, args: ['modal', { read: core.ViewContainerRef },] }]
        };
        return ModalComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * This currency formatter will ignore null and empty string for value.
     * Issue : https://github.com/angular/angular/issues/8694  DI fails when extends other classes
     */
    var CurrencyFormatPipe = (function () {
        function CurrencyFormatPipe(currencyPipe) {
            this.currencyPipe = currencyPipe;
        }
        /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
        CurrencyFormatPipe.prototype.transform = /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
            function (value) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                // Default values
                var /** @type {?} */ currencyCode = 'USD', /** @type {?} */ symbolDisplay = true, /** @type {?} */ digits = '1.0-2';
                if (!value || value.length === 0) {
                    return value;
                }
                if (args && args.length > 0) {
                    var /** @type {?} */ code = args[0];
                    if (code && code.length > 0) {
                        currencyCode = code;
                    }
                }
                return this.currencyPipe.transform(value, currencyCode, symbolDisplay, digits);
            };
        CurrencyFormatPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'currencyFormat',
                        pure: false
                    },] },
        ];
        /** @nocollapse */
        CurrencyFormatPipe.ctorParameters = function () {
            return [
                { type: common.CurrencyPipe }
            ];
        };
        return CurrencyFormatPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Simple utility directive that is used by NG For cycle in situation where we need to call a
     * or execute some logic after each iteration
     */
    var NgForSetDirective = (function () {
        function NgForSetDirective() {
            this.onItem = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        NgForSetDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.onItem.emit('--');
            };
        NgForSetDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[ngForSet]'
                    },] },
        ];
        /** @nocollapse */
        NgForSetDirective.ctorParameters = function () { return []; };
        NgForSetDirective.propDecorators = {
            onItem: [{ type: core.Output }]
        };
        return NgForSetDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Simple convenient service to work with the dom. All the future logic related to DOM manipulation
     * or traversal should be put into this service
     *
     */
    var DomUtilsService = (function () {
        function DomUtilsService() {
        }
        /**
         * goes all the way up to the body and checks if there is a element identified by a 'selector'
         *
         */
        /**
         * goes all the way up to the body and checks if there is a element identified by a 'selector'
         *
         * @param {?} nativeElement
         * @param {?} selector
         * @return {?}
         */
        DomUtilsService.prototype.hasParent = /**
         * goes all the way up to the body and checks if there is a element identified by a 'selector'
         *
         * @param {?} nativeElement
         * @param {?} selector
         * @return {?}
         */
            function (nativeElement, selector) {
                return core$1.isPresent(this.closest(nativeElement, selector));
            };
        /**
         *  Travels all the way up to the BODY and retrieve element identified by 'selector' or NULL if
         * not found
         *
         */
        /**
         *  Travels all the way up to the BODY and retrieve element identified by 'selector' or NULL if
         * not found
         *
         * @param {?} nativeElement
         * @param {?} selector
         * @return {?}
         */
        DomUtilsService.prototype.closest = /**
         *  Travels all the way up to the BODY and retrieve element identified by 'selector' or NULL if
         * not found
         *
         * @param {?} nativeElement
         * @param {?} selector
         * @return {?}
         */
            function (nativeElement, selector) {
                var /** @type {?} */ firstChar = selector.charAt(0);
                var /** @type {?} */ parentNode = nativeElement;
                while (core$1.isPresent((parentNode = parentNode.parentNode))) {
                    if (firstChar === '.' && parentNode.classList.contains(selector.substr(1))) {
                        return parentNode;
                    }
                    if (firstChar === '#' && parentNode.id === selector.substr(1)) {
                        return parentNode;
                    }
                    // If selector is a tag
                    if (parentNode.nodeType === 1 && parentNode.tagName.toLowerCase() === selector) {
                        return parentNode;
                    }
                    if (parentNode.nodeType === 1 && parentNode.tagName === 'BODY') {
                        return null;
                    }
                }
                return null;
            };
        /**
         * When angular component is rendered along with NGContent it has its own _ngContent_INDEX
         * which always corresponds with _nghost_INDEX, this works fine if we have actual component
         * that is already rendered. If we are creating component programatically there is no way to
         * identify where the actual ng-content is placed within the component
         *
         * e.g. Consider following example:
         *
         *
         * Button Component Template:
         *
         * ```
         *  <span class=mybuttonTitle><ng-content></ng-content></span>
         * ```
         *
         * When you use button component as <aw-button>ClickMe</aw-button>  then its rendered as
         *
         * ```
         * <aw-button _nghost_123>
         *  <span _ngcontent_123 class=mybuttonTitle>ClickMe</span>
         * </aw-button>
         * ```
         *
         * But with programmatic API you instantiate Button and since it created without a Content it
         * looks like this;
         *
         *  ```
         * <aw-button _nghost_123>
         *  <span class=mybuttonTitle></span>
         * </aw-button>
         * ```
         *
         * Where do you place you child (content component)? Therefore utility css class was created
         * to wrap <ng-content> to get around this limitation.
         *
         *  ```
         *   <span class="u-ngcontent">
         *      <ng-content></ng-content>
         *   </span>
         *  ````
         *
         *
         *
         *
         */
        /**
         * When angular component is rendered along with NGContent it has its own _ngContent_INDEX
         * which always corresponds with _nghost_INDEX, this works fine if we have actual component
         * that is already rendered. If we are creating component programatically there is no way to
         * identify where the actual ng-content is placed within the component
         *
         * e.g. Consider following example:
         *
         *
         * Button Component Template:
         *
         * ```
         *  <span class=mybuttonTitle><ng-content></ng-content></span>
         * ```
         *
         * When you use button component as <aw-button>ClickMe</aw-button>  then its rendered as
         *
         * ```
         * <aw-button _nghost_123>
         *  <span _ngcontent_123 class=mybuttonTitle>ClickMe</span>
         * </aw-button>
         * ```
         *
         * But with programmatic API you instantiate Button and since it created without a Content it
         * looks like this;
         *
         *  ```
         * <aw-button _nghost_123>
         *  <span class=mybuttonTitle></span>
         * </aw-button>
         * ```
         *
         * Where do you place you child (content component)? Therefore utility css class was created
         * to wrap <ng-content> to get around this limitation.
         *
         *  ```
         *   <span class="u-ngcontent">
         *      <ng-content></ng-content>
         *   </span>
         *  ````
         *
         *
         *
         *
         * @param {?} parentNativeEl
         * @param {?} childNativeEl
         * @return {?}
         */
        DomUtilsService.prototype.insertIntoParentNgContent = /**
         * When angular component is rendered along with NGContent it has its own _ngContent_INDEX
         * which always corresponds with _nghost_INDEX, this works fine if we have actual component
         * that is already rendered. If we are creating component programatically there is no way to
         * identify where the actual ng-content is placed within the component
         *
         * e.g. Consider following example:
         *
         *
         * Button Component Template:
         *
         * ```
         *  <span class=mybuttonTitle><ng-content></ng-content></span>
         * ```
         *
         * When you use button component as <aw-button>ClickMe</aw-button>  then its rendered as
         *
         * ```
         * <aw-button _nghost_123>
         *  <span _ngcontent_123 class=mybuttonTitle>ClickMe</span>
         * </aw-button>
         * ```
         *
         * But with programmatic API you instantiate Button and since it created without a Content it
         * looks like this;
         *
         *  ```
         * <aw-button _nghost_123>
         *  <span class=mybuttonTitle></span>
         * </aw-button>
         * ```
         *
         * Where do you place you child (content component)? Therefore utility css class was created
         * to wrap <ng-content> to get around this limitation.
         *
         *  ```
         *   <span class="u-ngcontent">
         *      <ng-content></ng-content>
         *   </span>
         *  ````
         *
         *
         *
         *
         * @param {?} parentNativeEl
         * @param {?} childNativeEl
         * @return {?}
         */
            function (parentNativeEl, childNativeEl) {
                // default behavior is to insert it as child to parentNativeEl
                var /** @type {?} */ ngContentParent = parentNativeEl;
                var /** @type {?} */ foundNgContent = parentNativeEl.querySelector('.u-ngcontent');
                if (core$1.isPresent(foundNgContent)) {
                    // we don't cover a case where there could be multiple ngcontents
                    ngContentParent = foundNgContent;
                }
                ngContentParent.appendChild(childNativeEl);
            };
        /**
         *
         * Retrieves current browser window width and height
         *
         */
        /**
         *
         * Retrieves current browser window width and height
         *
         * @return {?}
         */
        DomUtilsService.prototype.browserDimentions = /**
         *
         * Retrieves current browser window width and height
         *
         * @return {?}
         */
            function () {
                return {
                    width: (window.innerWidth || document.documentElement.clientWidth
                        || document.body.clientWidth),
                    height: (window.innerHeight || document.documentElement.clientHeight
                        || document.body.clientHeight)
                };
            };
        /**
         *
         * Retrieves elemements dimensions
         *
         */
        /**
         *
         * Retrieves elemements dimensions
         *
         * @param {?} element
         * @return {?}
         */
        DomUtilsService.prototype.elementDimensions = /**
         *
         * Retrieves elemements dimensions
         *
         * @param {?} element
         * @return {?}
         */
            function (element) {
                if (core$1.isPresent(element.getBoundingClientRect)) {
                    return element.getBoundingClientRect();
                }
                return { left: 0, top: 0, right: 0, bottom: 0, x: 0, y: 0, width: 0, height: 0 };
            };
        DomUtilsService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        DomUtilsService.ctorParameters = function () { return []; };
        return DomUtilsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * The Infinite Scroll allows you to perform an action when the user
     * scrolls a specified distance from the bottom or top of the page.
     *
     * The expression assigned to the `infinite` event is called when
     * the user scrolls to the specified distance. When this expression
     * has finished its tasks, it should call the `complete()` method
     * on the infinite scroll instance.
     *
     * ## Usage
     *
     * ```html
     *
     *  <div  *ngFor="let item of items">{{item}} </div>
     *   <aw-infinite-scroll (onLoad)="doInfinite($event)">
     *  </aw-infinite-scroll>
     *
     * ```
     *
     *
     * You can also set a threshold to change the distance when the lazy load kicks
     * in.
     * ## Usage
     *
     * ```html
     *
     *  <div  *ngFor="let item of items">{{item}} </div>
     *   <aw-infinite-scroll (onLoad)="doInfinite($event)"  [distance]="'15%'">
     *  </aw-infinite-scroll>
     *
     * ```
     */
    var InfiniteScrollComponent = (function () {
        function InfiniteScrollComponent(_render, _zone, domUtils, _cd) {
            this._render = _render;
            this._zone = _zone;
            this.domUtils = domUtils;
            this._cd = _cd;
            this._lastCheck = 0;
            this._lastScrollTop = 0;
            this._thr = '10%';
            this._thrPx = 0;
            this._thrPc = 0.10;
            this._init = false;
            /**
             * \@internal
             */
            this.state = STATE_ENABLED;
            /**
             * \@output {event} Emitted when the scroll reaches
             * the threshold distance. From within your infinite handler,
             * you must call the infinite scroll's `complete()` method when
             * your async operation has completed.
             */
            this.onLoad = new core.EventEmitter();
            /**
             *
             * Lazy load current numbers. tell the app starting point and what is the size of loaded
             * list
             *
             */
            this.fetchSize = 0;
            this.loadOffset = 0;
        }
        Object.defineProperty(InfiniteScrollComponent.prototype, "distance", {
            /**
             * @input {string} The threshold distance from the bottom
             * of the content to call the `onLoad` output event when scrolled.
             * The threshold value can be either a percent, or
             * in pixels. For example, use the value of `10%` for the `infinite`
             * output event to get called when the user has scrolled 10%
             * from the bottom of the page. Use the value `100px` when the
             * scroll is within 100 pixels from the bottom of the page.
             * Default is `15%`.
             */
            get: /**
             * \@input {string} The threshold distance from the bottom
             * of the content to call the `onLoad` output event when scrolled.
             * The threshold value can be either a percent, or
             * in pixels. For example, use the value of `10%` for the `infinite`
             * output event to get called when the user has scrolled 10%
             * from the bottom of the page. Use the value `100px` when the
             * scroll is within 100 pixels from the bottom of the page.
             * Default is `15%`.
             * @return {?}
             */ function () {
                return this._thr;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._thr = val;
                if (val.indexOf('%') > -1) {
                    this._thrPx = 0;
                    this._thrPc = (parseFloat(val) / 100);
                }
                else {
                    this._thrPx = parseFloat(val);
                    this._thrPc = 0;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InfiniteScrollComponent.prototype, "enabled", {
            /**
             * @input {boolean} If true, Whether or not the infinite scroll should be
             * enabled or not. Setting to `false` will remove scroll event listeners
             * and hide the display.
             */
            set: /**
             * \@input {boolean} If true, Whether or not the infinite scroll should be
             * enabled or not. Setting to `false` will remove scroll event listeners
             * and hide the display.
             * @param {?} shouldEnable
             * @return {?}
             */ function (shouldEnable) {
                this.enable(shouldEnable);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        InfiniteScrollComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this._render.addClass(document.body, 'has-infinite-scroll');
            };
        /**
         * @param {?} ev
         * @return {?}
         */
        InfiniteScrollComponent.prototype._onScroll = /**
         * @param {?} ev
         * @return {?}
         */
            function (ev) {
                if (this.state === STATE_LOADING || this.state === STATE_DISABLED) {
                    return;
                }
                // must throttle the class by 100ms
                if (this._lastCheck + 100 > ev.timeStamp) {
                    // no need to check less than every XXms
                    return;
                }
                this._lastCheck = ev.timeStamp;
                var /** @type {?} */ scrollTop = this.scrollTop();
                var /** @type {?} */ winHeight = this.domUtils.browserDimentions().height;
                var /** @type {?} */ height = Math.max(this._docBody.scrollHeight, this._docBody.offsetHeight, winHeight, this._content.scrollHeight, this._content.offsetHeight);
                if (!height) {
                    // if there is no height of this element then do nothing
                    return;
                }
                var /** @type {?} */ threshold = this._thrPc ? (height * this._thrPc) : this._thrPx;
                var /** @type {?} */ distanceFromInfinite = this._content.scrollHeight - winHeight - scrollTop - threshold;
                // console.log('Document height (' + height + ') , Distance from bottom '
                // + distanceFromInfinite + ',  => threshold = ' +
                //     this.distance + ' (' + threshold + ')');
                if (distanceFromInfinite < 0 && this._lastScrollTop < scrollTop) {
                    this.fireOnLazyLoad();
                }
                else if (this._lastScrollTop > scrollTop && scrollTop < winHeight
                    && this.loadOffset !== this.fetchSize) {
                    this.fireOnLazyUnLoad();
                }
                this._lastScrollTop = scrollTop;
                return;
            };
        /**
         * Todo: refactor to one method
         * @return {?}
         */
        InfiniteScrollComponent.prototype.fireOnLazyLoad = /**
         * Todo: refactor to one method
         * @return {?}
         */
            function () {
                var _this = this;
                this._zone.run(function () {
                    if (_this.state !== STATE_LOADING && _this.state !== STATE_DISABLED) {
                        _this.state = STATE_LOADING;
                        _this.onLoad.emit({
                            isLoad: true,
                            limit: _this.fetchSize,
                            offset: _this.loadOffset
                        });
                        // start on the next record
                        // start on the next record
                        _this.loadOffset += _this.fetchSize;
                    }
                });
            };
        /**
         * @return {?}
         */
        InfiniteScrollComponent.prototype.fireOnLazyUnLoad = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this._zone.run(function () {
                    if (_this.state !== STATE_LOADING && _this.state !== STATE_DISABLED) {
                        _this.state = STATE_LOADING;
                        // start on the next record
                        // start on the next record
                        _this.loadOffset = _this.fetchSize;
                        _this.onLoad.emit({
                            isLoad: false,
                            limit: _this.fetchSize,
                            offset: _this.loadOffset
                        });
                    }
                });
            };
        /**
         * @return {?}
         */
        InfiniteScrollComponent.prototype.scrollTop = /**
         * @return {?}
         */
            function () {
                return (window.pageYOffset || this._content.scrollTop);
            };
        /**
         * Call `complete()` within the `infinite` output event handler when
         * your async operation has completed. For example, the `loading`
         * state is while the app is performing an asynchronous operation,
         * such as receiving more data from an AJAX request to add more items
         * to a data list. Once the data has been received and UI updated, you
         * then call this method to signify that the loading has completed.
         * This method will change the infinite scroll's state from `loading`
         * to `enabled`.
         */
        /**
         * Call `complete()` within the `infinite` output event handler when
         * your async operation has completed. For example, the `loading`
         * state is while the app is performing an asynchronous operation,
         * such as receiving more data from an AJAX request to add more items
         * to a data list. Once the data has been received and UI updated, you
         * then call this method to signify that the loading has completed.
         * This method will change the infinite scroll's state from `loading`
         * to `enabled`.
         * @return {?}
         */
        InfiniteScrollComponent.prototype.complete = /**
         * Call `complete()` within the `infinite` output event handler when
         * your async operation has completed. For example, the `loading`
         * state is while the app is performing an asynchronous operation,
         * such as receiving more data from an AJAX request to add more items
         * to a data list. Once the data has been received and UI updated, you
         * then call this method to signify that the loading has completed.
         * This method will change the infinite scroll's state from `loading`
         * to `enabled`.
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.state !== STATE_LOADING) {
                    return;
                }
                setTimeout(function () {
                    _this.state = STATE_ENABLED;
                    // need to trigger extra detect changes to rerender loading icon
                    // need to trigger extra detect changes to rerender loading icon
                    _this._cd.detectChanges();
                }, 100);
            };
        /**
         * Call `enable(false)` to disable the infinite scroll from actively
         * trying to receive new data while scrolling. This method is useful
         * when it is known that there is no more data that can be added, and
         * the infinite scroll is no longer needed.
         * @param shouldEnable  If the infinite scroll should be
         * enabled or not. Setting to `false` will remove scroll event listeners
         * and hide the display.
         */
        /**
         * Call `enable(false)` to disable the infinite scroll from actively
         * trying to receive new data while scrolling. This method is useful
         * when it is known that there is no more data that can be added, and
         * the infinite scroll is no longer needed.
         * @param {?} shouldEnable  If the infinite scroll should be
         * enabled or not. Setting to `false` will remove scroll event listeners
         * and hide the display.
         * @return {?}
         */
        InfiniteScrollComponent.prototype.enable = /**
         * Call `enable(false)` to disable the infinite scroll from actively
         * trying to receive new data while scrolling. This method is useful
         * when it is known that there is no more data that can be added, and
         * the infinite scroll is no longer needed.
         * @param {?} shouldEnable  If the infinite scroll should be
         * enabled or not. Setting to `false` will remove scroll event listeners
         * and hide the display.
         * @return {?}
         */
            function (shouldEnable) {
                this.state = (shouldEnable ? STATE_ENABLED : STATE_DISABLED);
                this._setListeners(shouldEnable);
            };
        /**
         * Subscribes to native windows scroll event
         */
        /**
         * Subscribes to native windows scroll event
         * @param {?} shouldListen
         * @return {?}
         */
        InfiniteScrollComponent.prototype._setListeners = /**
         * Subscribes to native windows scroll event
         * @param {?} shouldListen
         * @return {?}
         */
            function (shouldListen) {
                var _this = this;
                if (this._init) {
                    if (shouldListen) {
                        if (!this._scLsn) {
                            this._zone.runOutsideAngular(function () {
                                _this._scLsn = _this._onScroll.bind(_this);
                                window.addEventListener('scroll', _this._scLsn);
                            });
                        }
                    }
                    else {
                        if (core$1.isPresent(this._scLsn)) {
                            window.removeEventListener('scroll', this._scLsn);
                            this._scLsn = null;
                        }
                    }
                }
            };
        /**
         * @return {?}
         */
        InfiniteScrollComponent.prototype.isLoading = /**
         * @return {?}
         */
            function () {
                return this.state === STATE_LOADING;
            };
        /**
         * @return {?}
         */
        InfiniteScrollComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this._init = true;
                this._docBody = document.body;
                this._content = document.documentElement;
                this._setListeners(this.state !== STATE_DISABLED);
                if (this.loadOffset === 0) {
                    this.fireOnLazyLoad();
                }
            };
        /**
         * @hidden
         */
        /**
         * @hidden
         * @return {?}
         */
        InfiniteScrollComponent.prototype.ngOnDestroy = /**
         * @hidden
         * @return {?}
         */
            function () {
                this._setListeners(false);
            };
        InfiniteScrollComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-infinite-scroll',
                        template: "<div class=\"w-infinite-loader-panel\" *ngIf=\"isLoading()\">\n    <span class=\"sap-icon icon-synchronize u-spin-icon\"></span>\n</div>\n",
                        styles: [".w-infinite-loader-panel{display:flex;align-items:center;justify-content:center;background-color:#fff;width:100%;height:100px;z-index:300;bottom:100px}.w-infinite-loader-panel span{color:#4a4a4a;font-size:2em}"],
                    },] },
        ];
        /** @nocollapse */
        InfiniteScrollComponent.ctorParameters = function () {
            return [
                { type: core.Renderer2 },
                { type: core.NgZone },
                { type: DomUtilsService },
                { type: core.ChangeDetectorRef }
            ];
        };
        InfiniteScrollComponent.propDecorators = {
            distance: [{ type: core.Input }],
            enabled: [{ type: core.Input }],
            onLoad: [{ type: core.Output }],
            loadPanel: [{ type: core.ViewChild, args: ['loadinPanel',] }],
            fetchSize: [{ type: core.Input }]
        };
        return InfiniteScrollComponent;
    }());
    var /** @type {?} */ STATE_ENABLED = 'enabled';
    var /** @type {?} */ STATE_DISABLED = 'disabled';
    var /** @type {?} */ STATE_LOADING = 'loading';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AwNameStore = (function () {
        function AwNameStore() {
            this.store = new Map();
        }
        /**
         * @param {?} name
         * @param {?} el
         * @return {?}
         */
        AwNameStore.prototype.add = /**
         * @param {?} name
         * @param {?} el
         * @return {?}
         */
            function (name, el) {
                if (this.collides(name)) {
                    throw new Error('Name is not unique!');
                }
                return this.store.set(name, el);
            };
        /**
         * @param {?} name
         * @return {?}
         */
        AwNameStore.prototype.remove = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                return this.store.delete(name);
            };
        /**
         * @param {?} name
         * @return {?}
         */
        AwNameStore.prototype.collides = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                return this.store.has(name);
            };
        /**
         * @return {?}
         */
        AwNameStore.prototype.clear = /**
         * @return {?}
         */
            function () {
                this.store.clear();
            };
        AwNameStore.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        AwNameStore.ctorParameters = function () { return []; };
        return AwNameStore;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * The 'awName' directive attaches a identifier to decorated element to aid selectors for testing
     * purposes. The 'awName' directive tries to generate a unique identifier based on contextual data
     * and inherant immutable element attributes.
     *
     * **Generating the Base Name**
     *
     * The 'awName' directive generates a base name from element tag name and attributes which are
     * static by nature.
     *
     *     Example:
     *         <button name="order" awName>
     *
     *     Result:
     *         <button name="order" awname="button_order">
     *
     * If the element has an 'id', that value takes precedent and is used instead of a generated
     * name.
     *
     *     Example:
     *         <button name="order" id="myOrderButton" awName>
     *
     *     Result:
     *         <button name="order" id="myOrderButton" awname="button_myOrderButton">
     *
     *
     * **Repeated Elements and the 'ext' Parameter**
     *
     * There are many cases where elements are generated dynamically in the code as lists or tables.
     * In such cases, it may not be easy to distinguish individual elements by standard HTML
     * attributes, so the 'awName' directive allows custom extentions to the base name to be provided
     * using the 'ext' attribute.
     *
     *    Example:
     *        fruits = ['apple', 'banana', 'orange'];
     *
     *        <ul>
     *            <li *ngFor="let fruit of fruits" awName ext="{{fruit}}">{{fruit}}</li>
     *        </ul>
     *
     *   Result:
     *       <ul>
     *           <li awname="li_apple">apple</li>
     *           <li awname="li_banana">banana</li>
     *           <li awname="li_orane">orange</li>
     *       </ul>
     *
     * **Adding Context Through Ancestor Inspection**
     *
     * In order to provide context to the element naming, the 'awName' directive loops through the
     * parent ancestry and searches for any unique element 'id' to prepend to the base name.
     *
     *     Example:
     *         <form id="applicant">
     *            <input type="text" name="firstName" awName>
     *            <input type="text" name="lastName" awName>
     *         </form>
     *         <form id="spouse">
     *            <input type="text" name="firstName" awName>
     *            <input type="text" name="lastName" awName>
     *         </form>
     *
     *     Result:
     *         <form id="applicant">
     *            <input type="text" name="firstName" awname="applicant_input_firstName">
     *            <input type="text" name="lastName" awname="applicant_input_lastName">
     *         </form>
     *         <form id="spouse">
     *            <input type="text" name="firstName" awname="spouse_input_firstName">
     *            <input type="text" name="lastName" awname="spouse_input_lastname">
     *         </form>
     *
     * **Uniqueness Check**
     *
     * 'awName' keeps track of the names it creates by adding them to a map store. Whenever it
     * creates a new name during the `ngOnInit` phase it checks it against the existing map,
     * and will throw an error if it encounters a duplicate. Moreover during the element destruction
     * phase, `ngOnDestroy`, 'awName' removes the generated name from the store.
     *
     *
     * **In Production**
     *
     * Using 'awName' adds a small bit of rendering overhead for each element it is used on. In
     * a production environment, 'awName' serves no functionality to the end user, but may have
     * a performance impact on the application. As such, 'awName' takes into account the
     * `AppConfig` settings and disables name generation when `AppConfig.isProductionMode()`
     * is `true`.
     *
     * In your application, you can turn on production mode by setting `devmode.enabled` to
     * `false` when configuring `AribaCoreModule`:
     *
     *     AribaCoreModule.forRoot({
     *         'devmode.enabled': false
     *     })
     *
     */
    var AwNameDirective = (function () {
        function AwNameDirective(el, store, config) {
            this.el = el;
            this.store = store;
            this.config = config;
            this.separator = '_';
        }
        /**
         * @return {?}
         */
        AwNameDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (!this.config.isProductionMode()) {
                    this.name = this.createName(this.el);
                    this.addElementToStore(this.name, this.el);
                    this.el.nativeElement.setAttribute('awname', this.name);
                }
            };
        /**
         * @return {?}
         */
        AwNameDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.store.remove(this.name);
            };
        /**
         * Add element name/id and reference to map store. If name/id already
         * exists in store then it throws an error.
         *
         */
        /**
         * Add element name/id and reference to map store. If name/id already
         * exists in store then it throws an error.
         *
         * @param {?} name
         * @param {?} elem
         * @return {?}
         */
        AwNameDirective.prototype.addElementToStore = /**
         * Add element name/id and reference to map store. If name/id already
         * exists in store then it throws an error.
         *
         * @param {?} name
         * @param {?} elem
         * @return {?}
         */
            function (name, elem) {
                try {
                    this.store.add(name, elem);
                }
                catch (e) {
                    console.error(e.message + (". \"" + name + "\" is already in use."), elem.nativeElement);
                    return;
                }
            };
        /**
         * Generate name/id for element.
         *
         * param elem Reference to element
         * @return String Name/ID
         */
        /**
         * Generate name/id for element.
         *
         * param elem Reference to element
         * @param {?} elem
         * @return {?} String Name/ID
         */
        AwNameDirective.prototype.createName = /**
         * Generate name/id for element.
         *
         * param elem Reference to element
         * @param {?} elem
         * @return {?} String Name/ID
         */
            function (elem) {
                var /** @type {?} */ tagName = this.getTagName(elem);
                // Initialize array of string parts
                var /** @type {?} */ parts = [];
                // Find ancestor tag id, if there is one
                var /** @type {?} */ parentID = this.getAncestorId(elem);
                if (parentID) {
                    parts.push(parentID);
                }
                // Check the tag type
                if (tagName === 'option') {
                    var /** @type {?} */ parentName = this.getParentName(elem);
                    if (parentName) {
                        parts.push(parentName);
                    }
                }
                // Get tagname
                parts.push(tagName);
                // Choose id property if it exists
                if (elem.nativeElement.id) {
                    parts.push(elem.nativeElement.id);
                    // Otherwise build extension from tag properties
                }
                else {
                    // check for a name attribute
                    if (elem.nativeElement.hasAttribute('name')) {
                        parts.push(elem.nativeElement.name);
                    }
                    // check for value attribute if 'option' tag
                    if (tagName === 'option') {
                        if (elem.nativeElement.hasAttribute('value')) {
                            parts.push(this.spacesToUnderscore(elem.nativeElement.value));
                        }
                    }
                }
                // Add custom extension if it exists
                if (this.ext) {
                    parts.push(this.spacesToUnderscore(this.ext));
                }
                return parts.join(this.separator);
            };
        /**
         * Get tag name from element reference.
         * @param elem Reference to element
         */
        /**
         * Get tag name from element reference.
         * @param {?} elem Reference to element
         * @return {?}
         */
        AwNameDirective.prototype.getTagName = /**
         * Get tag name from element reference.
         * @param {?} elem Reference to element
         * @return {?}
         */
            function (elem) {
                return elem.nativeElement.tagName.toLowerCase();
            };
        /**
         * Traverse element ancestry and return first id attribute
         * encountered.
         * @param elem Reference to element
         */
        /**
         * Traverse element ancestry and return first id attribute
         * encountered.
         * @param {?} elem Reference to element
         * @return {?}
         */
        AwNameDirective.prototype.getAncestorId = /**
         * Traverse element ancestry and return first id attribute
         * encountered.
         * @param {?} elem Reference to element
         * @return {?}
         */
            function (elem) {
                var /** @type {?} */ parent = elem.nativeElement.parentNode;
                var /** @type {?} */ id = '';
                while (parent && !id) {
                    if (parent.id) {
                        id = parent.id;
                    }
                    parent = parent.parentNode;
                }
                return id;
            };
        /**
         * Get name attribute from parent if name attribute exists.
         * @param elem Reference to element
         */
        /**
         * Get name attribute from parent if name attribute exists.
         * @param {?} elem Reference to element
         * @return {?}
         */
        AwNameDirective.prototype.getParentName = /**
         * Get name attribute from parent if name attribute exists.
         * @param {?} elem Reference to element
         * @return {?}
         */
            function (elem) {
                var /** @type {?} */ parent = elem.nativeElement.parentNode;
                return (parent.name && !parent.id) ? parent.name : null;
            };
        /**
         * @param {?} str
         * @return {?}
         */
        AwNameDirective.prototype.spacesToUnderscore = /**
         * @param {?} str
         * @return {?}
         */
            function (str) {
                return str.replace(/\s+/g, '_');
            };
        AwNameDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[awName]',
                    },] },
        ];
        /** @nocollapse */
        AwNameDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: AwNameStore },
                { type: core$1.AppConfig }
            ];
        };
        AwNameDirective.propDecorators = {
            ext: [{ type: core.Input }]
        };
        return AwNameDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWCoreComponentModule = (function () {
        function AWCoreComponentModule() {
        }
        AWCoreComponentModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            EmbeddedItemDirective,
                            IncludeComponentDirective,
                            GenericContainerComponent,
                            ErrorMessagesComponent,
                            ModalComponent,
                            CurrencyFormatPipe,
                            NgForSetDirective,
                            InfiniteScrollComponent,
                            AwNameDirective
                        ],
                        imports: [
                            common.CommonModule
                        ],
                        entryComponents: [
                            GenericContainerComponent,
                            ModalComponent
                        ],
                        exports: [
                            EmbeddedItemDirective,
                            IncludeComponentDirective,
                            GenericContainerComponent,
                            ErrorMessagesComponent,
                            ModalComponent,
                            CurrencyFormatPipe,
                            NgForSetDirective,
                            InfiniteScrollComponent,
                            AwNameDirective
                        ]
                    },] },
        ];
        return AWCoreComponentModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Parent class for all modal dialogs. Provides defaults functionality for all modals.
     */
    var /**
     * Parent class for all modal dialogs. Provides defaults functionality for all modals.
     */ ModalContainer = (function (_super) {
        __extends(ModalContainer, _super);
        function ModalContainer(env) {
            var _this = _super.call(this, env) || this;
            _this.env = env;
            /**
             * Override function.
             */
            _this.destroy = core$1.noop;
            return _this;
        }
        /**
         * function that closes the dialog by calling destroy on the component reference.
         * Method inherited by all its children.
         */
        /**
         * function that closes the dialog by calling destroy on the component reference.
         * Method inherited by all its children.
         * @return {?}
         */
        ModalContainer.prototype.closeModal = /**
         * function that closes the dialog by calling destroy on the component reference.
         * Method inherited by all its children.
         * @return {?}
         */
            function () {
                this.destroy();
            };
        return ModalContainer;
    }(BaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * DataTypeProviderRegistry aggregates different DataProviders per type.
     */
    var DataTypeProviderRegistry = (function () {
        function DataTypeProviderRegistry() {
            this.registryByProvider = new Map();
            this.registryNameToClass = new Map();
        }
        /**
         * For every single registered DataProvider implementation we also need store its prototype
         * in order to be able to support some kind of inheritance. You can register a provider for
         * a parent class if needed
         *
         */
        /**
         * For every single registered DataProvider implementation we also need store its prototype
         * in order to be able to support some kind of inheritance. You can register a provider for
         * a parent class if needed
         *
         * @template T
         * @param {?} target
         * @param {?} provider
         * @return {?}
         */
        DataTypeProviderRegistry.prototype.registerProvider = /**
         * For every single registered DataProvider implementation we also need store its prototype
         * in order to be able to support some kind of inheritance. You can register a provider for
         * a parent class if needed
         *
         * @template T
         * @param {?} target
         * @param {?} provider
         * @return {?}
         */
            function (target, provider) {
                if (core$1.isBlank(target) || (!core$1.isStringMap(target) && !core$1.isType(target))) {
                    throw new Error(' Cannot register non-object');
                }
                var /** @type {?} */ name = core$1.isType(target) ? target.prototype.constructor.name : target.constructor.name;
                this.registryByProvider.set(name, provider);
                var /** @type {?} */ prototype = Object.getPrototypeOf(target);
                this.registryNameToClass.set(name, prototype);
            };
        /**
         * Search for best matching provider. If not found then use object prototype to get hold of its
         * parent and see if there is a provider registered on this level
         *
         */
        /**
         * Search for best matching provider. If not found then use object prototype to get hold of its
         * parent and see if there is a provider registered on this level
         *
         * @template T
         * @param {?} className
         * @return {?}
         */
        DataTypeProviderRegistry.prototype.bestMatchForClass = /**
         * Search for best matching provider. If not found then use object prototype to get hold of its
         * parent and see if there is a provider registered on this level
         *
         * @template T
         * @param {?} className
         * @return {?}
         */
            function (className) {
                var /** @type {?} */ registeredClassName = className;
                var /** @type {?} */ classProto = this.registryNameToClass.get(className);
                while (core$1.isPresent(registeredClassName)) {
                    var /** @type {?} */ provider = this.registryByProvider.get(registeredClassName);
                    if (core$1.isPresent(provider)) {
                        provider.type = className;
                        return provider;
                    }
                    // Go up to parent
                    if (core$1.isPresent(classProto)) {
                        classProto = Object.getPrototypeOf(classProto);
                        var /** @type {?} */ parentName = core$1.objectToName(classProto);
                        registeredClassName =
                            (core$1.isPresent(parentName) && parentName !== registeredClassName) ? parentName
                                : null;
                    }
                    else {
                        return null;
                    }
                }
                return null;
            };
        /**
         * The same as bestMatchForClass() with the difference to pass a type. If you want to
         * support object inheritance you need this.
         *
         *
         */
        /**
         * The same as bestMatchForClass() with the difference to pass a type. If you want to
         * support object inheritance you need this.
         *
         *
         * @template T
         * @param {?} type
         * @return {?}
         */
        DataTypeProviderRegistry.prototype.bestMatchForType = /**
         * The same as bestMatchForClass() with the difference to pass a type. If you want to
         * support object inheritance you need this.
         *
         *
         * @template T
         * @param {?} type
         * @return {?}
         */
            function (type) {
                var /** @type {?} */ name = core$1.objectToName(type);
                this.registryNameToClass.set(name, type);
                return this.bestMatchForClass(name);
            };
        DataTypeProviderRegistry.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        DataTypeProviderRegistry.ctorParameters = function () { return []; };
        return DataTypeProviderRegistry;
    }());
    /**
     * Provider is a data driver that can access data and retrieve them. It knows how to get 1
     * or more records, maybe do paging and some other things.
     *
     * @abstract
     * @template T
     */
    var /**
     * Provider is a data driver that can access data and retrieve them. It knows how to get 1
     * or more records, maybe do paging and some other things.
     *
     * @abstract
     * @template T
     */ DataProvider = (function () {
        function DataProvider() {
            /**
             * Notifies all the listeners in case of data are available or if they changed due to some user
             * interaction  (search, adding or removing).
             *
             */
            this.dataChanges = new rxjs.BehaviorSubject([]);
        }
        /**
         *  Return size of the source
         *
         */
        /**
         *  Return size of the source
         *
         * @param {?=} params
         * @return {?}
         */
        DataProvider.prototype.expectedCount = /**
         *  Return size of the source
         *
         * @param {?=} params
         * @return {?}
         */
            function (params) {
                return -1;
            };
        /**
         *
         * Returns non-async current state of data
         */
        /**
         *
         * Returns non-async current state of data
         * @return {?}
         */
        DataProvider.prototype.data = /**
         *
         * Returns non-async current state of data
         * @return {?}
         */
            function () {
                return this.dataChanges.getValue();
            };
        /**
         * Tells if this DataProvider supports INSERT, REMOVE
         *
         */
        /**
         * Tells if this DataProvider supports INSERT, REMOVE
         *
         * @return {?}
         */
        DataProvider.prototype.canCRUD = /**
         * Tells if this DataProvider supports INSERT, REMOVE
         *
         * @return {?}
         */
            function () {
                return false;
            };
        /**
         * Tells if this DataProvider supports query capability
         *
         */
        /**
         * Tells if this DataProvider supports query capability
         *
         * @return {?}
         */
        DataProvider.prototype.canQuery = /**
         * Tells if this DataProvider supports query capability
         *
         * @return {?}
         */
            function () {
                return false;
            };
        /**
         * Implement to support insertion. After record is inserted emit event for dataChanges to
         * inform all subscribers
         *
         */
        /**
         * Implement to support insertion. After record is inserted emit event for dataChanges to
         * inform all subscribers
         *
         * @param {?} obj
         * @return {?}
         */
        DataProvider.prototype.insert = /**
         * Implement to support insertion. After record is inserted emit event for dataChanges to
         * inform all subscribers
         *
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
            };
        /**
         * Implement to support record removal. After record is removed emit event for dataChanges to
         * inform all subscribers.
         *
         */
        /**
         * Implement to support record removal. After record is removed emit event for dataChanges to
         * inform all subscribers.
         *
         * @param {?} obj
         * @return {?}
         */
        DataProvider.prototype.remove = /**
         * Implement to support record removal. After record is removed emit event for dataChanges to
         * inform all subscribers.
         *
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
            };
        /**
         * Implement to provide access to low level searcg API.
         *
         */
        /**
         * Implement to provide access to low level searcg API.
         *
         * @param {?} params
         * @return {?}
         */
        DataProvider.prototype.query = /**
         * Implement to provide access to low level searcg API.
         *
         * @param {?} params
         * @return {?}
         */
            function (params) {
            };
        return DataProvider;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Default implementation for Arrays.
     * @template T
     */
    var /**
     * Default implementation for Arrays.
     * @template T
     */ ArrayDataProvider = (function (_super) {
        __extends(ArrayDataProvider, _super);
        function ArrayDataProvider(values) {
            var _this = _super.call(this) || this;
            _this.values = values;
            _this.type = Array;
            _this.offScreenData = _this.values;
            _this.dataChanges.next(_this.values);
            return _this;
        }
        /**
         * @param {?=} params
         * @return {?}
         */
        ArrayDataProvider.prototype.expectedCount = /**
         * @param {?=} params
         * @return {?}
         */
            function (params) {
                return this.offScreenData.length;
            };
        /**
         * @param {?=} params
         * @return {?}
         */
        ArrayDataProvider.prototype.dataForParams = /**
         * @param {?=} params
         * @return {?}
         */
            function (params) {
                if (core$1.isBlank(params)) {
                    return this.offScreenData;
                }
                var /** @type {?} */ data = this.offScreenData;
                if (core$1.isPresent(params) && params.has('offset') && params.has('limit')) {
                    var /** @type {?} */ offset = params.get('offset');
                    var /** @type {?} */ limit = params.get('limit');
                    if (data.length > (offset + limit)) {
                        data = data.slice(offset, offset + limit);
                    }
                    else {
                        data = data.slice(offset, data.length);
                    }
                }
                if (params.has('orderby') && params.has('selector')) {
                    this.sort(data, params.get('orderby'), params.get('selector'));
                }
                return data;
            };
        /**
         * @param {?} params
         * @return {?}
         */
        ArrayDataProvider.prototype.fetch = /**
         * @param {?} params
         * @return {?}
         */
            function (params) {
                return rxjs.of(this.dataForParams(params));
            };
        /**
         * Provides default implementation for sorting current dataset by one column / key
         *
         * for sortOrdering please see Datatable and its sortOrderingForNumber()
         *
         *      1  = ascending
         *      -1 = descending
         * @param {?} arrayToSort
         * @param {?} key
         * @param {?} sortOrder
         * @return {?}
         */
        ArrayDataProvider.prototype.sort = /**
         * Provides default implementation for sorting current dataset by one column / key
         *
         * for sortOrdering please see Datatable and its sortOrderingForNumber()
         *
         *      1  = ascending
         *      -1 = descending
         * @param {?} arrayToSort
         * @param {?} key
         * @param {?} sortOrder
         * @return {?}
         */
            function (arrayToSort, key, sortOrder) {
                arrayToSort.sort(function (data1, data2) {
                    var /** @type {?} */ value1 = core$1.FieldPath.getFieldValue(data1, key);
                    var /** @type {?} */ value2 = core$1.FieldPath.getFieldValue(data2, key);
                    var /** @type {?} */ result = null;
                    if (value1 == null && value2 != null) {
                        result = -1;
                    }
                    else if (value1 != null && value2 == null) {
                        result = 1;
                    }
                    else if (value1 == null && value2 == null) {
                        result = 0;
                    }
                    else if (typeof value1 === 'string' && typeof value2 === 'string') {
                        result = value1.localeCompare(value2);
                    }
                    else {
                        result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;
                    }
                    return (sortOrder * result);
                });
            };
        return ArrayDataProvider;
    }(DataProvider));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Provides top level accessor class in order to make {\@link DataProvider} retrieval process easier.
     * Using {\@link DataTypeProviderRegistry} we either retrieve registered instance of concrete
     * provider or instantiate our implicit provider for native types such as Array.
     *
     *
     */
    var DataProviders = (function () {
        function DataProviders(registry) {
            this.registry = registry;
        }
        /**
         * Finds the best matching  DataProvider or create new one in case of Array
         * More room to register and instantiate some other implicit Providers
         */
        /**
         * Finds the best matching  DataProvider or create new one in case of Array
         * More room to register and instantiate some other implicit Providers
         * @param {?} target
         * @return {?}
         */
        DataProviders.prototype.find = /**
         * Finds the best matching  DataProvider or create new one in case of Array
         * More room to register and instantiate some other implicit Providers
         * @param {?} target
         * @return {?}
         */
            function (target) {
                if (core$1.isArray(target)) {
                    return new ArrayDataProvider(target);
                }
                else if (core$1.isString(target)) {
                    return this.registry.bestMatchForClass(target);
                }
                return this.registry.bestMatchForType(target);
            };
        /**
         * Registers new provider within DataTypeProviderRegistry
         *
         */
        /**
         * Registers new provider within DataTypeProviderRegistry
         *
         * @template T
         * @param {?} target
         * @param {?} provider
         * @return {?}
         */
        DataProviders.prototype.register = /**
         * Registers new provider within DataTypeProviderRegistry
         *
         * @template T
         * @param {?} target
         * @param {?} provider
         * @return {?}
         */
            function (target, provider) {
                this.registry.registerProvider(target, provider);
            };
        DataProviders.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        DataProviders.ctorParameters = function () {
            return [
                { type: DataTypeProviderRegistry }
            ];
        };
        return DataProviders;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     *
     * Provides a registry of different data Finders used mostly by DataSources. All Finders are
     * registered by this class as we don't have any needs right now to expose this to developer.
     *
     */
    var DataFinders = (function () {
        function DataFinders() {
            this.findersByType = new Map();
            this.initFinders();
        }
        /**
         * Finds the best matching DataFinder based on the object type and queryType.
         */
        /**
         * Finds the best matching DataFinder based on the object type and queryType.
         * @param {?} forProvider
         * @param {?} forType
         * @return {?}
         */
        DataFinders.prototype.find = /**
         * Finds the best matching DataFinder based on the object type and queryType.
         * @param {?} forProvider
         * @param {?} forType
         * @return {?}
         */
            function (forProvider, forType) {
                var /** @type {?} */ finderMatch;
                this.findersByType.forEach(function (v, k) {
                    if (k.accepts(forProvider, forType)) {
                        finderMatch = v;
                        return true;
                    }
                });
                if (core$1.isPresent(finderMatch)) {
                    var /** @type {?} */ copy = new finderMatch();
                    copy.forData(forProvider);
                    return copy;
                }
                return null;
            };
        /**
         * Registers new finder
         *
         */
        /**
         * Registers new finder
         *
         * @template T
         * @param {?} prototype
         * @param {?} type
         * @return {?}
         */
        DataFinders.prototype.register = /**
         * Registers new finder
         *
         * @template T
         * @param {?} prototype
         * @param {?} type
         * @return {?}
         */
            function (prototype, type) {
                this.findersByType.set(prototype, type);
            };
        /**
         * @return {?}
         */
        DataFinders.prototype.initFinders = /**
         * @return {?}
         */
            function () {
                // create a prototype for each
                this.findersByType.set(new FullTextArrayDataFinder(), FullTextArrayDataFinder);
                this.findersByType.set(new OutlineFullTextArrayDataFinder(), OutlineFullTextArrayDataFinder);
            };
        DataFinders.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        DataFinders.ctorParameters = function () { return []; };
        return DataFinders;
    }());
    /** @enum {number} */
    var QueryType = {
        FullText: 0,
        FullTextOutline: 1,
        Predicate: 2,
        FullTextAndPredicate: 3,
    };
    QueryType[QueryType.FullText] = "FullText";
    QueryType[QueryType.FullTextOutline] = "FullTextOutline";
    QueryType[QueryType.Predicate] = "Predicate";
    QueryType[QueryType.FullTextAndPredicate] = "FullTextAndPredicate";
    /**
     * This class provides matching capability for given DataProvider.
     * @abstract
     */
    var /**
     * This class provides matching capability for given DataProvider.
     * @abstract
     */ DataFinder = (function () {
        function DataFinder() {
        }
        /**
         * In order to find concrete DataFinder we need to know the target type and the query type
         *
         */
        /**
         * In order to find concrete DataFinder we need to know the target type and the query type
         *
         * @param {?} forData
         * @param {?} forType
         * @return {?}
         */
        DataFinder.prototype.accepts = /**
         * In order to find concrete DataFinder we need to know the target type and the query type
         *
         * @param {?} forData
         * @param {?} forType
         * @return {?}
         */
            function (forData, forType) {
                return false;
            };
        /**
         *
         * Query can be a simple string literal or a map having different key value pair as a
         * filter
         *
         */
        /**
         *
         * Query can be a simple string literal or a map having different key value pair as a
         * filter
         *
         * @template T
         * @param {?} query
         * @param {?=} max
         * @return {?}
         */
        DataFinder.prototype.match = /**
         *
         * Query can be a simple string literal or a map having different key value pair as a
         * filter
         *
         * @template T
         * @param {?} query
         * @param {?=} max
         * @return {?}
         */
            function (query, max) {
                if (max === void 0) {
                    max = -1;
                }
                return core$1.unimplemented();
            };
        /**
         * @template T
         * @param {?} selections
         * @param {?} query
         * @param {?} max
         * @return {?}
         */
        DataFinder.prototype.matchWithSelections = /**
         * @template T
         * @param {?} selections
         * @param {?} query
         * @param {?} max
         * @return {?}
         */
            function (selections, query, max) {
                return core$1.unimplemented();
            };
        return DataFinder;
    }());
    /**
     * Simple FullText implementation based on infix string matching which works on top of
     * ArrayDataProvider.
     *
     */
    var /**
     * Simple FullText implementation based on infix string matching which works on top of
     * ArrayDataProvider.
     *
     */ FullTextArrayDataFinder = (function (_super) {
        __extends(FullTextArrayDataFinder, _super);
        function FullTextArrayDataFinder() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FullTextArrayDataFinder.prototype, "lookupKey", {
            set: /**
             * @param {?} key
             * @return {?}
             */ function (key) {
                this._keyPath = core$1.isPresent(key) ? new core$1.FieldPath(key) : null;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} forData
         * @param {?} forType
         * @return {?}
         */
        FullTextArrayDataFinder.prototype.accepts = /**
         * @param {?} forData
         * @param {?} forType
         * @return {?}
         */
            function (forData, forType) {
                return forData instanceof ArrayDataProvider && forType === QueryType.FullText;
            };
        /**
         * @param {?} provider
         * @return {?}
         */
        FullTextArrayDataFinder.prototype.forData = /**
         * @param {?} provider
         * @return {?}
         */
            function (provider) {
                this._provider = provider;
                return this;
            };
        /**
         * @template T
         * @param {?} query
         * @param {?} max
         * @return {?}
         */
        FullTextArrayDataFinder.prototype.instantMatch = /**
         * @template T
         * @param {?} query
         * @param {?} max
         * @return {?}
         */
            function (query, max) {
                core$1.assert(core$1.isPresent(this._provider), 'Missing DataProvider');
                var /** @type {?} */ list = this._provider.dataForParams(new Map().set('limit', max));
                return this.instantMatchWithSelections(list, query, max);
            };
        /**
         * @template T
         * @param {?} selectionsForMatch
         * @param {?} query
         * @param {?} max
         * @return {?}
         */
        FullTextArrayDataFinder.prototype.instantMatchWithSelections = /**
         * @template T
         * @param {?} selectionsForMatch
         * @param {?} query
         * @param {?} max
         * @return {?}
         */
            function (selectionsForMatch, query, max) {
                core$1.assert(core$1.isPresent(this._provider), 'Missing DataProvider');
                if (core$1.isBlank(query)) {
                    return selectionsForMatch;
                }
                var /** @type {?} */ result = [];
                var /** @type {?} */ toLowerPattern = query.toLowerCase();
                for (var /** @type {?} */ i = 0; i < selectionsForMatch.length; i++) {
                    var /** @type {?} */ item = selectionsForMatch[i];
                    if (this.matches(item, toLowerPattern)) {
                        result.push(item);
                        if (result.length >= max) {
                            break;
                        }
                    }
                }
                return result;
            };
        /**
         *
         * Warning: If you dont supply search Key and you want fulltext search and you use this
         * default implementation be aware that it can  perform poorly as it is naive implementaion
         * that does not do deep compare.
         *
         */
        /**
         *
         * Warning: If you dont supply search Key and you want fulltext search and you use this
         * default implementation be aware that it can  perform poorly as it is naive implementaion
         * that does not do deep compare.
         *
         * @template T
         * @param {?} item
         * @param {?} pattern
         * @return {?}
         */
        FullTextArrayDataFinder.prototype.matches = /**
         *
         * Warning: If you dont supply search Key and you want fulltext search and you use this
         * default implementation be aware that it can  perform poorly as it is naive implementaion
         * that does not do deep compare.
         *
         * @template T
         * @param {?} item
         * @param {?} pattern
         * @return {?}
         */
            function (item, pattern) {
                var /** @type {?} */ val = (core$1.isPresent(this._keyPath)) ? this._keyPath.getFieldValue(item) : item;
                if (core$1.isFunction(val)) {
                    val = val.call(item);
                }
                else if (core$1.isJsObject(item)) {
                    return this.hasObjectValue(item, pattern);
                }
                else {
                    return core$1.isBlank(pattern) ||
                        core$1.isPresent(val) && val.toString().toLowerCase().indexOf(pattern) > -1;
                }
            };
        /**
         * @template T
         * @param {?} query
         * @param {?} max
         * @return {?}
         */
        FullTextArrayDataFinder.prototype.match = /**
         * @template T
         * @param {?} query
         * @param {?} max
         * @return {?}
         */
            function (query, max) {
                return rxjs.of(this.instantMatch(query, max));
            };
        /**
         * @template T
         * @param {?} selections
         * @param {?} query
         * @param {?} max
         * @return {?}
         */
        FullTextArrayDataFinder.prototype.matchWithSelections = /**
         * @template T
         * @param {?} selections
         * @param {?} query
         * @param {?} max
         * @return {?}
         */
            function (selections, query, max) {
                return rxjs.of(this.instantMatchWithSelections(selections, query, max));
            };
        /**
         * @param {?} obj
         * @param {?} pattern
         * @return {?}
         */
        FullTextArrayDataFinder.prototype.hasObjectValue = /**
         * @param {?} obj
         * @param {?} pattern
         * @return {?}
         */
            function (obj, pattern) {
                var _this = this;
                var /** @type {?} */ values = core$1.objectValues(obj);
                var /** @type {?} */ parentObj = core$1.objectToName(obj);
                var /** @type {?} */ length2 = values.filter(function (value) {
                    if (core$1.isBlank(value) || core$1.isArray(value)) {
                        return false;
                    }
                    else if (!core$1.isJsObject(value) && !core$1.isFunction(value)) {
                        return value.toString().toLowerCase().indexOf(pattern) !== -1;
                    }
                    else if (core$1.isJsObject(value) && core$1.objectToName(value) !== parentObj) {
                        return _this.hasObjectValue(value, pattern);
                    }
                    return false;
                }).length;
                return length2 > 0;
            };
        return FullTextArrayDataFinder;
    }(DataFinder));
    /**
     * Extends basic Infix implementation to work on top of OutlineNodes. It first checks all the
     * children on lowest level and moving up to the root and marking nodes that can be removed.
     *
     *  For simple data structure which operates on local array this should be good enough we this
     *  can never match with real DB full text search.
     *
     */
    var /**
     * Extends basic Infix implementation to work on top of OutlineNodes. It first checks all the
     * children on lowest level and moving up to the root and marking nodes that can be removed.
     *
     *  For simple data structure which operates on local array this should be good enough we this
     *  can never match with real DB full text search.
     *
     */ OutlineFullTextArrayDataFinder = (function (_super) {
        __extends(OutlineFullTextArrayDataFinder, _super);
        function OutlineFullTextArrayDataFinder() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} forData
         * @param {?} forType
         * @return {?}
         */
        OutlineFullTextArrayDataFinder.prototype.accepts = /**
         * @param {?} forData
         * @param {?} forType
         * @return {?}
         */
            function (forData, forType) {
                return forData instanceof ArrayDataProvider && forType === QueryType.FullTextOutline;
            };
        /**
         * @template T
         * @param {?} selectionsForMatch
         * @param {?} query
         * @param {?} max
         * @return {?}
         */
        OutlineFullTextArrayDataFinder.prototype.instantMatchWithSelections = /**
         * @template T
         * @param {?} selectionsForMatch
         * @param {?} query
         * @param {?} max
         * @return {?}
         */
            function (selectionsForMatch, query, max) {
                core$1.assert(core$1.isPresent(this._provider), 'Missing DataProvider');
                if (core$1.isBlank(query)) {
                    return selectionsForMatch;
                }
                var /** @type {?} */ toLowerPattern = query.toLowerCase();
                var /** @type {?} */ sourceToSearch = selectionsForMatch.slice();
                this.rollup(sourceToSearch, toLowerPattern);
                return this.shake(sourceToSearch);
            };
        /**
         *
         * Going thru the tree from bottom up and mark all that matches query
         *
         */
        /**
         *
         * Going thru the tree from bottom up and mark all that matches query
         *
         * @param {?} nodes
         * @param {?} query
         * @return {?}
         */
        OutlineFullTextArrayDataFinder.prototype.rollup = /**
         *
         * Going thru the tree from bottom up and mark all that matches query
         *
         * @param {?} nodes
         * @param {?} query
         * @return {?}
         */
            function (nodes, query) {
                var _this = this;
                nodes.forEach(function (item) {
                    // start from bottom up and capture how many occurrences is found for future use
                    var /** @type {?} */ hasChildrenMatch = false;
                    if (core$1.isPresent(item.children) && item.children.length > 0) {
                        hasChildrenMatch = _this.rollup(item.children, query);
                    }
                    item.visible = hasChildrenMatch || _this.matches(item, query);
                });
                return nodes.some(function (item) { return item.visible; });
            };
        /**
         * Filter out all the nodes that are marked as visible = false and make sure and
         * don't modify original list
         *
         */
        /**
         * Filter out all the nodes that are marked as visible = false and make sure and
         * don't modify original list
         *
         * @param {?} nodes
         * @return {?}
         */
        OutlineFullTextArrayDataFinder.prototype.shake = /**
         * Filter out all the nodes that are marked as visible = false and make sure and
         * don't modify original list
         *
         * @param {?} nodes
         * @return {?}
         */
            function (nodes) {
                var _this = this;
                return nodes
                    .filter(function (node) { return node.visible; })
                    .map(function (node) { return (__assign({}, node, { isExpanded: node.visible, children: node.children && _this.shake(node.children) })); });
            };
        return OutlineFullTextArrayDataFinder;
    }(FullTextArrayDataFinder));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ DATA_SOURCE = new core.InjectionToken('DATA_SOURCE');
    /**
     * DataSource describes basic functionality for handling stream of data specific to component
     *
     * It is expected that DataSource will be defined as component provider using
     *
     * \@Components ({
     *      ...
     *      providers:[
     *
     *          provide: DATA_SOURCE, useClass: ChooserDataSourcePlainArrayExample,
     * deps: [DataProviders, DataFinders]
     *      ]
     *
     * })
     *
     *
     * so all the dependencies (DataProviders, DataFinders) are properly injected.
     *
     * DataProvider uses open() method to broadcast changes to all the subscribers in reactive way.
     * Or you can use instant() method to retrieve current state of this DataSource (sync)
     *
     * @abstract
     */
    var DataSource = (function () {
        /**
         *
         * Each DataSource have injected DataProviders and DataFinders to retrieve concrete
         * implementation
         *
         */
        function DataSource(dataProviders, finders) {
            this.dataProviders = dataProviders;
            this.finders = finders;
        }
        /**
         * Returns a data instantly from the internal state of DataProvider
         */
        /**
         * Returns a data instantly from the internal state of DataProvider
         * @template T
         * @return {?}
         */
        DataSource.prototype.instant = /**
         * Returns a data instantly from the internal state of DataProvider
         * @template T
         * @return {?}
         */
            function () {
                return core$1.unimplemented();
            };
        DataSource.MaxLength = 10;
        DataSource.MaxRecentSelected = 5;
        return DataSource;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Common class used used for Five Zone layout. Used for the ng-content selector
     */
    var TopZoneComponent = (function () {
        function TopZoneComponent() {
            this.classList = 'ui-g-12 ui-g-nopad ';
        }
        TopZoneComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-top',
                        template: '<ng-content></ng-content>'
                    },] },
        ];
        TopZoneComponent.propDecorators = {
            classList: [{ type: core.HostBinding, args: ['class',] }]
        };
        return TopZoneComponent;
    }());
    /**
     * Common class used used for Five Zone layout. Used for the ng-content selector
     */
    var LeftZoneComponent = (function () {
        function LeftZoneComponent() {
            this.classList = 'ui-g-12 ui-g-nopad';
        }
        LeftZoneComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-left',
                        template: '<ng-content></ng-content>'
                    },] },
        ];
        LeftZoneComponent.propDecorators = {
            classList: [{ type: core.HostBinding, args: ['class',] }]
        };
        return LeftZoneComponent;
    }());
    /**
     * Common class used used for Five Zone layout. Used for the ng-content selector
     */
    var MiddleZoneComponent = (function () {
        function MiddleZoneComponent() {
            this.classList = 'ui-g-12 ui-md-6 ui-lg-4 ui-g-nopad';
        }
        MiddleZoneComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-middle',
                        template: '<ng-content></ng-content>'
                    },] },
        ];
        MiddleZoneComponent.propDecorators = {
            classList: [{ type: core.HostBinding, args: ['class',] }]
        };
        return MiddleZoneComponent;
    }());
    /**
     * Common class used used for Five Zone layout. Used for the ng-content selector
     */
    var RightZoneComponent = (function () {
        function RightZoneComponent() {
            this.classList = 'ui-g-12 ui-g-nopad';
        }
        RightZoneComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-right',
                        template: '<ng-content></ng-content>'
                    },] },
        ];
        RightZoneComponent.propDecorators = {
            classList: [{ type: core.HostBinding, args: ['class',] }]
        };
        return RightZoneComponent;
    }());
    /**
     * Common class used used for Five Zone layout. Used for the ng-content selector
     */
    var BottomZoneComponent = (function () {
        function BottomZoneComponent() {
            this.classList = 'ui-g-12 ui-g-nopad';
        }
        BottomZoneComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-bottom',
                        template: '<ng-content></ng-content>'
                    },] },
        ];
        BottomZoneComponent.propDecorators = {
            classList: [{ type: core.HostBinding, args: ['class',] }]
        };
        return BottomZoneComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Used by FormTable to layout fields into Rows. Each FormTable row is reasonable for not only to
     * include actual component such is DropDown or InputField but mainly provides a enough context for
     * the component to specify the size, how it should layout, whether we need to show required flag,
     * to show/hide labels in case if we have no label layout and much more.
     *
     * FormRow component also registers angular validator for the current row/field. As already
     * mentioned We treat our widgets with minimal responsibility as possible to present and retrive
     * information to/from user and let somebody else to figure out where it appear and how.
     *
     * todo: Move under FormTable
     */
    var FormRowComponent = (function (_super) {
        __extends(FormRowComponent, _super);
        function FormRowComponent(env, 
        // Event this creates CI depends. Need to have a reference to parent
        // I need to refactor more parent to not use this child and refactor layouting
        parentContainer) {
            var _this = _super.call(this, env, parentContainer) || this;
            _this.env = env;
            _this.parentContainer = parentContainer;
            /**
             * Hides the label
             *
             */
            _this.noLabelLayout = false;
            /**
             * Renders row with highlighted background
             *
             */
            _this.highlightRow = false;
            /**
             *
             *  Field label that should appear above or next to the control
             *
             */
            _this.label = '';
            /**
             *
             * For single column layout without zones we need to apply grid directly to the FormRow tag
             * so we don't need to introduce extra div level
             *
             */
            _this.classList = '';
            _this._size = 'ui-g-12 ui-md-' + WidgetSizeColumns.medium;
            return _this;
        }
        /**
         * Right now we just initialize this once and use the values we do not expect now to react to
         * changes
         */
        /**
         * Right now we just initialize this once and use the values we do not expect now to react to
         * changes
         * @return {?}
         */
        FormRowComponent.prototype.ngOnInit = /**
         * Right now we just initialize this once and use the values we do not expect now to react to
         * changes
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                _super.prototype.registerFormControl.call(this, null);
                this.registerValidators();
                this.omitPadding = this.parentContainer.omitPadding;
                this.classList += core$1.isPresent(this.parentContainer) ? ' ui-g-12 ' : '';
                this.classList = this.highlightRow ? this.classList + ' highlight-row ' : this.classList;
                this.classList = this.omitPadding ? this.classList + ' ui-g-nopad ' : this.classList;
            };
        Object.defineProperty(FormRowComponent.prototype, "size", {
            /**
             * Just a size getter
             *
             */
            get: /**
             * Just a size getter
             *
             * @return {?}
             */ function () {
                return this._size;
            },
            /**
             *  A size setter we translate custom sizes into actual bootstrap grid system. We use medium
             * right now. but we should extend this for other screen sizes
             *
             *  todo: provide mapping and add other grid classes for other sizes xs, sm, lg, xl
             *
             *  Also check if this is dynamic size that should vary based on the how many number of columns
             * we have. e.g. Date widgets is by default small, but in 2, 3 columns layout this small is too
             * small.
             */
            set: /**
             *  A size setter we translate custom sizes into actual bootstrap grid system. We use medium
             * right now. but we should extend this for other screen sizes
             *
             *  todo: provide mapping and add other grid classes for other sizes xs, sm, lg, xl
             *
             *  Also check if this is dynamic size that should vary based on the how many number of columns
             * we have. e.g. Date widgets is by default small, but in 2, 3 columns layout this small is too
             * small.
             * @param {?} value
             * @return {?}
             */ function (value) {
                var /** @type {?} */ isDynVal = false;
                if (core$1.StringWrapper.startsWidth(value, 'd-')) {
                    isDynVal = true;
                    value = value.substr(2, value.length - 1);
                }
                if (core$1.isPresent(value)) {
                    this._size = value;
                    var /** @type {?} */ dSize = this.dynSize(value, isDynVal);
                    this._size = 'ui-g-12 ui-md-' + dSize;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FormRowComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngDoCheck.call(this);
                if (core$1.isPresent(this.parentContainer) && this.editable !== this.parentContainer.editable) {
                    this.editable = this.parentContainer.editable;
                }
            };
        /**
         * Push out of box angular validator as well as custom one to current FormControl
         * @return {?}
         */
        FormRowComponent.prototype.registerValidators = /**
         * Push out of box angular validator as well as custom one to current FormControl
         * @return {?}
         */
            function () {
                var /** @type {?} */ validators = [];
                if (core$1.isPresent(this.maxLength)) {
                    validators.push(forms.Validators.maxLength(this.maxLength));
                }
                if (core$1.isPresent(this.minLength)) {
                    validators.push(forms.Validators.minLength(this.minLength));
                }
                if (core$1.isPresent(this.required) && this.required) {
                    validators.push(forms.Validators.required);
                }
                if (core$1.isPresent(this.pattern)) {
                    validators.push(forms.Validators.pattern(this.pattern));
                }
                if (core$1.isPresent(this.customValidators)) {
                    core$1.ListWrapper.addAll(validators, this.customValidators);
                }
                if (validators.length === 1) {
                    this.formControl.setValidators(validators[0]);
                }
                else if (validators.length > 1) {
                    this.formControl.setValidators(forms.Validators.compose(validators));
                }
                if (core$1.isPresent(this.customAsyncValidators) && this.customAsyncValidators.length === 1) {
                    this.formControl.setAsyncValidators(this.customAsyncValidators[0]);
                }
                else if (core$1.isPresent(this.customAsyncValidators) && this.customAsyncValidators.length > 1) {
                    this.formControl.setAsyncValidators(forms.Validators.composeAsync(this.customAsyncValidators));
                }
            };
        Object.defineProperty(FormRowComponent.prototype, "labelsOnTop", {
            /**
             *
             * Do we have labels on TOP, try to read this from Parent
             *
             */
            get: /**
             *
             * Do we have labels on TOP, try to read this from Parent
             *
             * @return {?}
             */ function () {
                if (core$1.isBlank(this._labelsOnTop) && core$1.isPresent(this.parentContainer)) {
                    return ((this.parentContainer)).isLabelsOnTop();
                }
                return false;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Can refactor all into 1 line but its hard to debug so this is just for read
         *
         * @param {?} value
         * @param {?} isDynValue
         * @return {?}
         */
        FormRowComponent.prototype.dynSize = /**
         *
         * Can refactor all into 1 line but its hard to debug so this is just for read
         *
         * @param {?} value
         * @param {?} isDynValue
         * @return {?}
         */
            function (value, isDynValue) {
                var /** @type {?} */ normalizeSize = value.toLowerCase().replace('-', '');
                if (core$1.isPresent(this.parentContainer) &&
                    ((this.parentContainer)).hasTwoColumn && isDynValue) {
                    var /** @type {?} */ enumValues = Object.keys(WidgetSizeColumns);
                    normalizeSize = enumValues[enumValues.indexOf(normalizeSize) + 1];
                }
                return ((WidgetSizeColumns))[normalizeSize];
            };
        FormRowComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-form-row',
                        template: "<div *ngIf=\"!hidden\"\n     class=\"w-form-row ui-g\"\n     [class.highlight-row]=\"highlightRow\"\n     [class.required]=\"required\"\n     [class.label-on-top]=\"labelsOnTop\"\n     [class.label-on-side]=\"!labelsOnTop\"\n     [class.has-danger]=\"!formControl.valid && !formControl.pristine \"\n     [ngClass]=\"styleClass\">\n\n    <div class=\"control-label ui-g-12 ui-g-nopad\"\n         *ngIf=\"!noLabelLayout\"\n         [class.ui-md-3]=\"!labelsOnTop\">\n        <label [class.sr-only]=\"noLabelLayout\">{{label}}</label>\n    </div>\n\n    <div class=\"control-value ui-g-nopad\" [ngClass]=\"size\"\n         [class.read-only]=\"!editable\">\n        <ng-content></ng-content>\n        <a-error-messages [control]=\"formControl\"></a-error-messages>\n    </div>\n</div>\n",
                        styles: [".required label:after{content:\"*\";color:red}/deep/ .highlight-row{background-color:#f7f8fa}.w-form-row.highlight-row{background-color:#f7f8fa}.w-form-row.label-on-top{padding-bottom:13px}.w-form-row.label-on-top .control-label,.w-form-row.label-on-top .control-value{padding-top:0;padding-bottom:0}.w-form-row.label-on-top .control-label{padding-bottom:12px}.w-form-row.label-on-side .control-label,.w-form-row.label-on-side .control-value{padding-top:0;padding-bottom:0}.w-form-row.label-on-side .control-label ::ng-deep .w-string-field,.w-form-row.label-on-side .control-value ::ng-deep .w-string-field{line-height:36px}.w-form-row.label-on-side .control-label ::ng-deep .sap-icon,.w-form-row.label-on-side .control-value ::ng-deep .sap-icon{line-height:26px}.w-form-row.label-on-side .control-label label,.w-form-row.label-on-side .control-value label{line-height:36px}.w-form-row.label-on-side .control-label .fa,.w-form-row.label-on-side .control-value .fa{line-height:18px}.control-label{color:#636363}.u-validation-error{border-color:red}"],
                        providers: [
                            { provide: BaseFormComponent, useExisting: core.forwardRef(function () { return FormRowComponent; }) }
                        ]
                    },] },
        ];
        /** @nocollapse */
        FormRowComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: FormTableComponent, decorators: [{ type: core.SkipSelf }, { type: core.Optional }, { type: core.Inject, args: [core.forwardRef(function () { return FormTableComponent; }),] }] }
            ];
        };
        FormRowComponent.propDecorators = {
            noLabelLayout: [{ type: core.Input }],
            highlightRow: [{ type: core.Input }],
            label: [{ type: core.Input }],
            maxLength: [{ type: core.Input }],
            minLength: [{ type: core.Input }],
            pattern: [{ type: core.Input }],
            customAsyncValidators: [{ type: core.Input }],
            customValidators: [{ type: core.Input }],
            classList: [{ type: core.HostBinding, args: ['class',] }],
            size: [{ type: core.Input }]
        };
        return FormRowComponent;
    }(BaseFormComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * FormTable is a specific layout component for rendering Labels and its controls in two columns
     * and 5 different zones.
     *
     * We support LEFT, MIDDLE, RIGHT, TOP, BOTTOM zone where we can place our component or widgets.
     * This
     * component is used as primary layout to wrap all the common use cases. E.g. When we lay out
     * fields in the form I do not want controls to be aware of error validation, size, labels, and
     * some other things. Control such INPUT is just responsible for retrieve user value but not how it
     * appear on the page.
     *
     * This way we can be flexible how we treat widgets for different kinds of situation depending
     * where they appear
     * FormTable just like the rest of the components are using Model driven approach how to work with
     * data, mean we are using FormGroup, FormControl etc. FormGroup can be passed into the FormTable,
     * otherwise its automatically created when the FormTable is instantiated.
     *
     * FormGroup is saved insode Environment where we are using this to pass this around the pages and
     * components.
     *
     * ### Example
     *
     * Simple Layout fields and its control
     *
     *
     * ```typescript
     * \@Component({
     *      selector: 'wrapper-comp' ,
     *      template: `
     *  			<aw-form-table [formGroup]="formGroup" (onSubmit)=>
     *  				<aw-form-row [label]="'name'" [name]="'name'">
     *  					<aw-input-field [type]="'string'"></aw-input-field>
     *  				</aw-form-row>
     *
     *  				<aw-form-row [label]="'Preferred Colors'" [name]="'myColors'">
     *  					<aw-checkbox-list [list]="checkBoxListValues"
     *  					                 [selections]="selectedValues"
     *  					                 [layout]="'inline'"
     *  					                 (onSelection)="onCBClick($event)">
     *  					</aw-checkbox-list>
     *  				</aw-form-row>
     *  				<aw-form-row [label]="'Gender'" [name]="'gender'">
     *
     *  					<aw-radiobutton-list [list]="rbValues" [selection]="rbSelection">
     *
     *  					</aw-radiobutton-list>
     *
     *  				</aw-form-row>
     *  				<aw-form-row [label]="'My birthdate'" [name]="'birthDate'" [size]="'small'">
     *
     *  					<aw-date-time [value]="date" [editable]="editable" [showTime]="showTime">
     *  					</aw-date-time>
     *  				</aw-form-row>
     *  			</aw-form-table>
     *    `
     *  })
     *  export class ShowUserInfoComponent
     *  {
     *       checkBoxListValues: string[] = ['blue' , 'red' , 'yellow' , 'orange' , 'white' , 'silver'
     *     , 'black' , 'Green'
     *     , 'Gray' , 'Navy' ,
     *          'Olive' , 'Aqua' , 'Purple'];
     *      selectedValues: string[] = ['blue' , 'Olive' , 'Aqua' , 'Purple'];
     *      rbValues: string[] = ['male' , 'female' , 'other'];
     *      rbSelection: string = 'male';
     *      editable: boolean = true;
     *      showTime: boolean = true;
     *
     *      formGroup: FormGroup = new FormGroup({});
     *
     *
     *      onCBClick (event): void
     *      {
     *          console.log('onCBClick = ' + event);
     *      }
     *
     *      onSubmit (model: any): void
     *      {
     *         console.log(model)
     *
     *         // will print { name:null, myColors:['blue' , 'Olive' , 'Aqua' , 'Purple'], gender:
     *     male}
     *      }
     *
     *  }
     *
     *  ```
     *
     *  Or you can use zone to layout these fields into two columns:
     *
     *  Current zones are implement with <ng-content SELECT> which is just a selector to searches for
     *     specific pattern. In our case instead of creating extra wrapper custom component use simple
     *     CSS class
     *
     *
     *  ```
     *            <aw-form-table #metaFormTable [editable]="editing"
     *                          [useFiveZone]="isFiveZoneLayout"
     *                          (onSubmit)="onSaveAction($event)">
     *
     *                <aw-left  *ngIf="canShowZone('zLeft')">
     *
     *                        <aw-form-row [label]="'name'" [name]="'name'">
     *                            <aw-input-field [type]="'string'"></aw-input-field>
     *                        </aw-form-row>
     *
     *                        <aw-form-row [label]="'Preferred Colors'" [name]="'myColors'">
     *                            <aw-checkbox-list [list]="checkBoxListValues"
     *                                             [selections]="selectedValues"
     *                                             [layout]="'inline'"
     *                                             (onSelection)="onCBClick($event)">
     *                            </aw-checkbox-list>
     *                        </aw-form-row>
     *                </aw-left>
     *
     *
     *                <aw-right  *ngIf="canShowZone('zRight')">
     *                        <aw-form-row [label]="'Gender'" [name]="'gender'">
     *                                <aw-radiobutton-list [list]="rbValues" [selection]="rbSelection">
     *                                </aw-radiobutton-list>
     *                        </aw-form-row>
     *
     *                        <aw-form-row [label]="'My birthdate'" [name]="'birthDate'"
     *     [size]="'small'">
     *                            <aw-date-time [value]="date" [editable]="editable"
     *     [showTime]="showTime">
     *                            </aw-date-time>
     *                        </aw-form-row>
     *                </<aw-right>
     *            </aw-form-table>
     *
     *  ```
     *
     *  todo: remove my css selectors for zones and replace it with real component even just a tag
     *  todo: would work file
     *
     */
    var FormTableComponent = (function (_super) {
        __extends(FormTableComponent, _super);
        function FormTableComponent(env) {
            var _this = _super.call(this, env, null) || this;
            _this.env = env;
            /**
             * Used for the form layout to see if we need to render labels stacked  or side by side next to
             * the control
             *
             */
            _this.labelsOnTop = false;
            /**
             *
             * Is this a 4 zone layout
             *
             */
            _this.useFiveZone = false;
            /**
             * For certain usecase we dont want to set automatically this to all children
             */
            _this.editabilityCheck = true;
            /**
             *  Triggers when the <form> is submitted. onSubmit we emit the whole formController objects
             *
             *
             */
            _this.onSubmit = new core.EventEmitter();
            /**
             * Cache calculated properties when init this component
             *
             */
            _this.hasOneColumn = false;
            _this.hasTwoColumn = false;
            _this.hasThreeColumn = false;
            return _this;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        FormTableComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                _super.prototype.ngOnChanges.call(this, changes);
                if (core$1.isPresent(changes['editable']) &&
                    changes['editable'].previousValue !== changes['editable'].currentValue) {
                    this.updateFormFields();
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        FormTableComponent.prototype.onSubmitForm = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.onSubmit.emit(event);
            };
        /**
         *
         * Are labels on top
         *
         */
        /**
         *
         * Are labels on top
         *
         * @return {?}
         */
        FormTableComponent.prototype.isLabelsOnTop = /**
         *
         * Are labels on top
         *
         * @return {?}
         */
            function () {
                return this.labelsOnTop;
            };
        /**
         *
         * Used by child component to inherit editability
         *
         */
        /**
         *
         * Used by child component to inherit editability
         *
         * @return {?}
         */
        FormTableComponent.prototype.isFormEditable = /**
         *
         * Used by child component to inherit editability
         *
         * @return {?}
         */
            function () {
                return this.editable;
            };
        /**
         * @return {?}
         */
        FormTableComponent.prototype.applyColumns = /**
         * @return {?}
         */
            function () {
                if (!this.useFiveZone && this.hasAnyZones()) {
                    throw new Error('Zones detected in the FormTable but useFiveZone option is false');
                }
                this.hasOneColumn = !core$1.isPresent(this.rightZone) && !core$1.isPresent(this.middleZone);
                this.hasTwoColumn = core$1.isPresent(this.leftZone) && core$1.isPresent(this.rightZone) &&
                    !core$1.isPresent(this.middleZone);
                this.hasThreeColumn = core$1.isPresent(this.leftZone) && core$1.isPresent(this.rightZone) &&
                    core$1.isPresent(this.middleZone);
                if (this.hasTwoColumn && !this.isTwoZoneReady()) {
                    this.leftZone.classList += ' ui-md-6 ui-lg-6';
                    this.rightZone.classList += ' ui-md-6 ui-lg-6';
                }
                if (this.hasThreeColumn && !this.isThreeZoneReady()) {
                    this.leftZone.classList += ' ui-md-6 ui-lg-4';
                    this.rightZone.classList += ' ui-md-6 ui-lg-4';
                }
            };
        /**
         * @return {?}
         */
        FormTableComponent.prototype.hasAnyZones = /**
         * @return {?}
         */
            function () {
                return core$1.isPresent(this.leftZone) || core$1.isPresent(this.rightZone) || core$1.isPresent(this.middleZone)
                    || core$1.isPresent(this.topZone) || core$1.isPresent(this.bottomZone);
            };
        /**
         * Helper method to check if we already initialized the classList.
         * the
         *
         * TODO: Probably string array would be easier
         */
        /**
         * Helper method to check if we already initialized the classList.
         * the
         *
         * TODO: Probably string array would be easier
         * @return {?}
         */
        FormTableComponent.prototype.isTwoZoneReady = /**
         * Helper method to check if we already initialized the classList.
         * the
         *
         * TODO: Probably string array would be easier
         * @return {?}
         */
            function () {
                return this.leftZone.classList.indexOf('ui-lg-6') > 0 &&
                    this.leftZone.classList.indexOf('ui-lg-6') > 0;
            };
        /**
         * Helper method to check if we already initialized the classList.
         * the
         *
         * TODO: Probably string array would be easier
         */
        /**
         * Helper method to check if we already initialized the classList.
         * the
         *
         * TODO: Probably string array would be easier
         * @return {?}
         */
        FormTableComponent.prototype.isThreeZoneReady = /**
         * Helper method to check if we already initialized the classList.
         * the
         *
         * TODO: Probably string array would be easier
         * @return {?}
         */
            function () {
                return this.leftZone.classList.indexOf('ui-lg-4') > 0 &&
                    this.leftZone.classList.indexOf('ui-lg-4') > 0;
            };
        /**
         * @return {?}
         */
        FormTableComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // problem since Angular 4.2, ngAfterContentInit
                // without this I get error that value was changed after view was checked
                // todo: refactor  - mainly our zones left, right middle
                setTimeout(function () {
                    _this.applyColumns();
                    _this.updateFormFields();
                    _this.adjustLayout();
                });
            };
        /**
         * @return {?}
         */
        FormTableComponent.prototype.updateFormFields = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.editabilityCheck && core$1.isPresent(this.formFields) && this.formFields.length > 0) {
                    this.formFields.forEach(function (item) {
                        item.editable = _this.editable;
                        // item.formGroup = this.formGroup;
                    });
                }
            };
        /**
         * Based on if we are 2 or 3 or 1 column layout we need to adjust widgets width within the
         * form row.
         * @return {?}
         */
        FormTableComponent.prototype.adjustLayout = /**
         * Based on if we are 2 or 3 or 1 column layout we need to adjust widgets width within the
         * form row.
         * @return {?}
         */
            function () {
                if (core$1.isPresent(this.rows) && this.rows.length > 0) {
                    if (this.hasThreeColumn) {
                        this.rows.forEach(function (item) { return item.size = 'large'; });
                    }
                }
            };
        FormTableComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-form-table',
                        template: "<form class=\"w-form-table ui-g ui-fluid\" [formGroup]=\"formGroup\"\n      [ngClass]=\"styleClass\"\n      (ngSubmit)=\"onSubmitForm(formGroup.value)\" novalidate>\n\n    <div class=\"ui-g-12 ui-g-nopad\">\n\n        <div class=\"ui-g\">\n            <ng-content></ng-content>\n        </div>\n\n    </div>\n</form>\n\n",
                        styles: [".page-container>form{margin-top:1em}.w-form-table button{float:right}"],
                        providers: [
                            { provide: BaseFormComponent, useExisting: core.forwardRef(function () { return FormTableComponent; }) }
                        ]
                    },] },
        ];
        /** @nocollapse */
        FormTableComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment }
            ];
        };
        FormTableComponent.propDecorators = {
            labelsOnTop: [{ type: core.Input }],
            useFiveZone: [{ type: core.Input }],
            editabilityCheck: [{ type: core.Input }],
            onSubmit: [{ type: core.Output }],
            leftZone: [{ type: core.ContentChild, args: [LeftZoneComponent,] }],
            middleZone: [{ type: core.ContentChild, args: [MiddleZoneComponent,] }],
            rightZone: [{ type: core.ContentChild, args: [RightZoneComponent,] }],
            topZone: [{ type: core.ContentChild, args: [TopZoneComponent,] }],
            bottomZone: [{ type: core.ContentChild, args: [BottomZoneComponent,] }],
            formFields: [{ type: core.ContentChildren, args: [BaseFormComponent, { descendants: true },] }],
            rows: [{ type: core.ContentChildren, args: [core.forwardRef(function () { return FormRowComponent; }), { descendants: true },] }]
        };
        return FormTableComponent;
    }(BaseFormComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWFormTableModule = (function () {
        function AWFormTableModule() {
        }
        AWFormTableModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            FormTableComponent,
                            FormRowComponent,
                            TopZoneComponent,
                            LeftZoneComponent,
                            RightZoneComponent,
                            MiddleZoneComponent,
                            BottomZoneComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            inputtext.InputTextModule,
                            AWCoreComponentModule
                        ],
                        entryComponents: [
                            FormTableComponent,
                            FormRowComponent,
                            TopZoneComponent,
                            LeftZoneComponent,
                            RightZoneComponent,
                            MiddleZoneComponent,
                            BottomZoneComponent
                        ],
                        exports: [
                            FormTableComponent,
                            FormRowComponent,
                            TopZoneComponent,
                            LeftZoneComponent,
                            RightZoneComponent,
                            MiddleZoneComponent,
                            BottomZoneComponent
                        ]
                    },] },
        ];
        return AWFormTableModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * This component represent a Input field and it can  accept different types of values such as
     * text, number.
     *
     *
     *
     * ### Example
     *
     * ```typescript
     * \@Component({
     *      selector: 'wrapper-comp' ,
     *      template: '<aw-input-field [value]="inputValue" [type]="inputType"></aw-input-field>'
     *  })
     *  export class TestInputComponent
     *  {
     *      inputValue: string = 'Some text';
     *
     *      // by default input type is text, you can pass string, String, or text
     *      inputType: string = 'string';
     *  }
     *
     * ```
     *
     *
     *
     * ### Example wher input field is initialized with ngModel
     *
     * ```typescript
     * \@Component({
     *      selector: 'wrapper-comp' ,
     *      template: '<aw-input-field [value]="inputValue" [(ngModel)]="inputType"></aw-input-field>'
     *  })
     *  export class TestInputComponent
     *  {
     *      inputValue: string = 'Some text';
     *
     *      // by default input type is text, you can pass string, String, or text
     *      inputType: string = 'string';
     *  }
     *
     * ```
     *
     *  Note: if you are using this outside of FormTable please provide your own FormGroup
     *
     */
    var /** @type {?} */ INPUT_CONTROL_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return InputFieldComponent; }),
        multi: true
    };
    var InputFieldComponent = (function (_super) {
        __extends(InputFieldComponent, _super);
        function InputFieldComponent(env, parentContainer) {
            var _this = _super.call(this, env, parentContainer) || this;
            _this.env = env;
            _this.parentContainer = parentContainer;
            /**
             *
             * A value used to save and read  when rendering and updating a component
             *
             */
            _this.value = '';
            /**
             * The formatted decimal value. Uses angular decimalPipe to format based on locale.
             */
            _this.displayValue = '';
            /**
             * Input field type. Currently we support either Number or text
             */
            _this._type = 'string';
            _this.decimalPipe = new common.DecimalPipe(env.locale);
            return _this;
        }
        Object.defineProperty(InputFieldComponent.prototype, "type", {
            get: /**
             * @return {?}
             */ function () {
                return this._type;
            },
            /**
             *
             * generated setter to check for value and normalizing into expected either number or text
             *
             */
            set: /**
             *
             * generated setter to check for value and normalizing into expected either number or text
             *
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value.toLowerCase() === 'string' || value.toLowerCase() === 'text') {
                    this._type = 'text';
                }
                else if (value.toLowerCase() === 'number') {
                    this._type = 'number';
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        InputFieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                _super.prototype.ngOnInit.call(this);
                _super.prototype.registerFormControl.call(this, this.bigDecimal);
                this.vchSubscriber = this.formControl.valueChanges
                    .pipe(operators.distinctUntilChanged())
                    .subscribe(function (val) {
                    _this.value = val;
                    _this.onModelChanged(_this.value);
                });
                if (this.bigDecimal) {
                    this.displayValue = this.formatNumber(this.bigDecimal.amount);
                }
                else {
                    this.displayValue = this.value;
                }
            };
        /**
         * @return {?}
         */
        InputFieldComponent.prototype.canSetType = /**
         * @return {?}
         */
            function () {
                return true;
            };
        /**
         * @param {?} el
         * @return {?}
         */
        InputFieldComponent.prototype.onKeyDown = /**
         * @param {?} el
         * @return {?}
         */
            function (el) {
                if (this._type === 'number') {
                    this.displayValue = el.value;
                    this.onModelChanged(this.displayValue);
                }
            };
        /**
         * @param {?} el
         * @return {?}
         */
        InputFieldComponent.prototype.onBlur = /**
         * @param {?} el
         * @return {?}
         */
            function (el) {
                if (this._type === 'number') {
                    this.bigDecimal = new BigDecimal(Number(el.value));
                    this.displayValue = this.formatNumber(this.bigDecimal.amount);
                    this.onModelChanged(this.displayValue);
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        InputFieldComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value !== this.displayValue) {
                    this.value = value;
                    this.displayValue = '';
                    if (this.value) {
                        this.displayValue = this.value;
                    }
                    this.formControl.setValue(value, { onlySelf: true });
                }
            };
        /**
         * Format the number object according to its precision.
         *
         */
        /**
         * Format the number object according to its precision.
         *
         * @param {?} value
         * @return {?}
         */
        InputFieldComponent.prototype.formatNumber = /**
         * Format the number object according to its precision.
         *
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (!value) {
                    return '';
                }
                // If precision is present, use it for format the bigDecimal value for display.
                if (core$1.isPresent(this.precision) &&
                    this._type === 'number') {
                    // The default precision is 2. For example, 10.23.
                    var /** @type {?} */ digits = '1.0-2';
                    digits = '1.0-' + this.precision;
                    return this.decimalPipe.transform(value, digits);
                }
                return value;
            };
        /**
         * @return {?}
         */
        InputFieldComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnDestroy.call(this);
                if (core$1.isPresent(this.vchSubscriber)) {
                    this.vchSubscriber.unsubscribe();
                }
            };
        InputFieldComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-input-field',
                        template: "<div *ngIf=\"editable\" [formGroup]=\"formGroup\" class=\"w-input-wrapper\">\n\n    <input pInputText\n           #inputFieldValue\n           [attr.name]=\"name\"\n           [attr.type]=\"type\"\n           class=\"w-input-field\"\n           [ngClass]=\"styleClass\"\n           [class.has-icon]=\"icon\"\n           placeholder=\"{{placeHolder}}\"\n           [class.u-validation-error]=\"!(formControl.valid || (formControl.pristine))\"\n           formControlName=\"{{name}}\"\n           (keydown)=\"onKeyDown(inputFieldValue)\"\n           (blur)=\"onBlur(inputFieldValue)\"\n           [value]=\"displayValue\">\n    <span *ngIf=\"icon\" class=\"sap-icon\" [ngClass]=\"icon\"></span>\n</div>\n\n\n<ng-template [ngIf]=\"!editable\">\n    <aw-string [value]=\"displayValue\"></aw-string>\n</ng-template>\n",
                        styles: [".w-input-wrapper{position:relative}.w-input-field{padding-right:35px}.w-input-field~span{top:13px;position:absolute;right:15px}"],
                        providers: [
                            INPUT_CONTROL_VALUE_ACCESSOR,
                            { provide: BaseFormComponent, useExisting: core.forwardRef(function () { return InputFieldComponent; }) }
                        ]
                    },] },
        ];
        /** @nocollapse */
        InputFieldComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: BaseFormComponent, decorators: [{ type: core.SkipSelf }, { type: core.Optional }, { type: core.Inject, args: [core.forwardRef(function () { return FormRowComponent; }),] }] }
            ];
        };
        InputFieldComponent.propDecorators = {
            value: [{ type: core.Input }],
            precision: [{ type: core.Input }],
            bigDecimal: [{ type: core.Input }],
            icon: [{ type: core.Input }],
            type: [{ type: core.Input }]
        };
        return InputFieldComponent;
    }(BaseFormComponent));
    /**
     * BigDecimal object is represented as a value, locale, and currencyCode
     */
    var /**
     * BigDecimal object is represented as a value, locale, and currencyCode
     */ BigDecimal = (function () {
        function BigDecimal(amount, locale) {
            if (amount === void 0) {
                amount = 0;
            }
            if (locale === void 0) {
                locale = 'en_US';
            }
            this.amount = amount;
            this.locale = locale;
        }
        /**
         * @return {?}
         */
        BigDecimal.prototype.getTypes = /**
         * @return {?}
         */
            function () {
                return {
                    amount: Number,
                    locale: String
                };
            };
        /**
         * @return {?}
         */
        BigDecimal.prototype.className = /**
         * @return {?}
         */
            function () {
                return 'BigDecimal';
            };
        /**
         * @return {?}
         */
        BigDecimal.prototype.$proto = /**
         * @return {?}
         */
            function () {
                return new BigDecimal(1, 'en_US');
            };
        /**
         * @return {?}
         */
        BigDecimal.prototype.toString = /**
         * @return {?}
         */
            function () {
                return this.amount + ', locale: ' + this.locale;
            };
        /**
         * @param {?=} data
         * @return {?}
         */
        BigDecimal.prototype.clone = /**
         * @param {?=} data
         * @return {?}
         */
            function (data) {
                if (data === void 0) {
                    data = {};
                }
                return new BigDecimal(core$1.isPresent(data.amount) ? data.amount : this.amount, core$1.isPresent(data.locale) ? data.locale : this.locale);
            };
        return BigDecimal;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWStringFieldModule = (function () {
        function AWStringFieldModule() {
        }
        AWStringFieldModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            StringComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule
                        ],
                        entryComponents: [
                            StringComponent
                        ],
                        exports: [
                            StringComponent
                        ],
                        providers: []
                    },] },
        ];
        return AWStringFieldModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWInputFieldModule = (function () {
        function AWInputFieldModule() {
        }
        AWInputFieldModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            InputFieldComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            inputtext.InputTextModule,
                            AWStringFieldModule
                        ],
                        entryComponents: [
                            InputFieldComponent
                        ],
                        exports: [
                            InputFieldComponent,
                            AWStringFieldModule,
                            forms.ReactiveFormsModule,
                            forms.FormsModule
                        ],
                        providers: []
                    },] },
        ];
        return AWInputFieldModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     *
     * basic navigation bar provide a main action buttons for its content (page level buttons).
     * This is not the Top level application navigation. This component provides by default action OK,
     * CANCEL and you are free to modify how the OK or CANCEL will be call as well as subscribe to the
     * event. Or you can provide your own buttons template which will be used instead of this default
     * one.
     *
     *
     *
     *
     *
     * ### Example 1:
     *
     * In order to use navigation bar in its basic usage you can do following:
     * this will render buttons on the top as well as on the bottom around the content.
     *
     *
     *  ```html
     *
     *      <aw-basic-navigator [brandImg]="'img/aribalogobal.png'">
     *
     *            <div class="container">
     *                <form>
     *                    User name: <input type=text value="peter.pan">
     *                </<form>>
     *            </div>
     *      </aw-basic-navigator>
     *
     *
     * ```
     *
     *  if you do not want button on the top or bottom you can say thi using binding showTop or
     * showBottom.
     *
     *
     * ### Example 2:
     *  In this example we are providing custom buttons as well as brank section
     *
     *
     *  ```html
     *
     *
     *      <aw-basic-navigator [brandImg]="'img/aribalogobal.png'">
     *            <ng-template #buttons>
     *                <ul class="nav navbar-nav float-md-right collapse navbar-toggleable-xs">
     *                    <li class="nav-item ">
     *                        <button class="btn btn-secondary" type="button"
     * (click)="onSaveAction($evemt)">Cancel</button>
     *                    </li>
     *                    <li class="nav-item active">
     *                        <button class="btn btn-primary" type="button"
     * (click)="onCancelAction($event)"> Save
     *                        </button>
     *                    </li>
     *                </ul>
     *            </ng-template>
     *
     *            <ng-template #brand>
     *                <span class="brand-title">Ariba</span>
     *            </ng-template>
     *
     *
     *            <div class="container">
     *                <form>
     *                    User name: <input type=text value="peter.pan">
     *                </<form>>
     *            </div>
     *      </aw-basic-navigator>
     *
     *
     * ```
     *
     */
    var BasicNavigatorComponent = (function (_super) {
        __extends(BasicNavigatorComponent, _super);
        function BasicNavigatorComponent(env, appConfig) {
            var _this = _super.call(this, env) || this;
            /**
             * Indicates that buttons will be rendered on the top
             *
             * Default value is TRUE
             *
             */
            _this.showTop = true;
            /**
             * Indicates that buttons will be rendered on the bottom
             *
             * Default value is TRUE
             *
             */
            _this.showBottom = true;
            /**
             * Indicates that brand section that is on the left side and only in the top bar is visible
             *
             * Default value is TRUE
             *
             */
            _this.showBrand = true;
            /**
             *
             * EventEmitter that is triggered when you click on default OK Action
             *
             */
            _this.onOKAction = new core.EventEmitter();
            /**
             *
             * EventEmitter that is triggered when you click on default CANCEL Action
             *
             */
            _this.onCancelAction = new core.EventEmitter();
            // todo: load this from resource file using ngTranslate service
            // todo: load this from resource file using ngTranslate service
            _this.okActionLabel = 'OK';
            _this.cancelActionLabel = 'Cancel';
            _this.brandImg = 'images/aribalogobal.png';
            return _this;
        }
        /**
         * @return {?}
         */
        BasicNavigatorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                if (core$1.isBlank(this.showCancelButton)) {
                    this.showCancelButton = this.editable || (this.onCancelAction.observers.length > 0
                        && this.onOKAction.observers.length > 0);
                }
            };
        /**
         * Returns if buttonsTemplate is available
         *
         */
        /**
         * Returns if buttonsTemplate is available
         *
         * @return {?}
         */
        BasicNavigatorComponent.prototype.hasButtonTemplate = /**
         * Returns if buttonsTemplate is available
         *
         * @return {?}
         */
            function () {
                return core$1.isPresent(this.buttonsTemplate);
            };
        /**
         * Returns if brandTemplate is available
         *
         */
        /**
         * Returns if brandTemplate is available
         *
         * @return {?}
         */
        BasicNavigatorComponent.prototype.hasBrandTemplate = /**
         * Returns if brandTemplate is available
         *
         * @return {?}
         */
            function () {
                return core$1.isPresent(this.brandTemplate);
            };
        BasicNavigatorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-basic-navigator',
                        template: "<p-toolbar *ngIf=\"showTop\" [class]=\"'w-basic-navigator'\">\n    <div class=\"ui-toolbar-group-left\">\n\n        <a class=\"nav-brand\" href=\"#\" *ngIf=\"showBrand\">\n            <ng-template [ngIf]=\"!hasBrandTemplate()\">\n                <img src=\"{{assetFolder}}/{{brandImg}}\" height=\"30\" alt=\"\">\n                <span class=\"nav-brand-title\">Ariba</span>\n            </ng-template>\n\n            <ng-template [embeddedItem]=\"brandTemplate\" [item]=\"context\"\n                         *ngIf=\"hasBrandTemplate()\"></ng-template>\n        </a>\n\n    </div>\n\n    <div class=\"ui-toolbar-group-right\">\n        <ng-template [ngIf]=\"!hasButtonTemplate()\">\n\n            <aw-button *ngIf=\"showCancelButton\" [style]=\"'secondary'\"\n                       (action)=\"onCancelAction.emit($event)\">\n                {{cancelActionLabel}}\n            </aw-button>\n\n            <aw-button (action)=\"onOKAction.emit($event)\">\n                {{okActionLabel}}\n            </aw-button>\n\n\n        </ng-template>\n        <ng-template [embeddedItem]=\"buttonsTemplate\" [item]=\"context\"\n                     *ngIf=\"hasButtonTemplate()\"></ng-template>\n    </div>\n\n</p-toolbar>\n\n<ng-content></ng-content>\n\n<p-toolbar *ngIf=\"showBottom\">\n\n    <div class=\"ui-toolbar-group-right\">\n        <ng-template [ngIf]=\"!hasButtonTemplate()\">\n\n            <aw-button *ngIf=\"showCancelButton\" [style]=\"'secondary'\"\n                       (action)=\"onCancelAction.emit($event)\">\n                {{cancelActionLabel}}\n            </aw-button>\n\n            <aw-button (action)=\"onOKAction.emit($event)\">\n                {{okActionLabel}}\n            </aw-button>\n        </ng-template>\n        <ng-template [embeddedItem]=\"buttonsTemplate\" [item]=\"context\"\n                     *ngIf=\"hasButtonTemplate()\"></ng-template>\n    </div>\n\n</p-toolbar>\n\n\n\n",
                        styles: ["a.nav-brand{vertical-align:middle;line-height:inherit;text-decoration:none;color:#2d353c}a.nav-brand:focus,a.nav-brand:hover{text-decoration:none}a.nav-brand span{vertical-align:middle}.nav-brand img{display:inline-block;vertical-align:middle;padding:3px}"]
                    },] },
        ];
        /** @nocollapse */
        BasicNavigatorComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: core$1.AppConfig }
            ];
        };
        BasicNavigatorComponent.propDecorators = {
            showTop: [{ type: core.Input }],
            showBottom: [{ type: core.Input }],
            showBrand: [{ type: core.Input }],
            brandImg: [{ type: core.Input }],
            okActionLabel: [{ type: core.Input }],
            cancelActionLabel: [{ type: core.Input }],
            context: [{ type: core.Input }],
            showCancelButton: [{ type: core.Input }],
            onOKAction: [{ type: core.Output }],
            onCancelAction: [{ type: core.Output }],
            buttonsTemplate: [{ type: core.ContentChild, args: ['buttons',] }],
            brandTemplate: [{ type: core.ContentChild, args: ['brand',] }]
        };
        return BasicNavigatorComponent;
    }(BaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Button component that implements consistent styling, behavior. Button can be rendered either as
     * a button or as a link. It could be standalone or be part of a form.
     *
     *  ### Example
     *  ```
     *
     * \@Component({
     *    selector: 'registration' ,
     *    template: `
     *
     *   <aw-form-table >
     *       <aw-form-row [label]="'Amount'" [name]="'amount'" [size]="'small'">
     *
     *           <aw-button [type]="'submit'" [name]="'button'"
     *                     (action)="onClicked($event)" [value]="command"
     *                     [style]="'warning'" >Button</aw-button>
     *       </aw-form-row>
     *   </aw-form-table>
     *
     *    `
     *    })
     *    export class MyComponent
     *    {
     *        command:boolean;
     *
     *        constructor ()
     *        {
     *        }
     *
     *        onClicked(value:string) {
     *           if (value) {
     *              // submit form.
     *           }
     *        }
     *    }
     */
    var ButtonComponent = (function (_super) {
        __extends(ButtonComponent, _super);
        function ButtonComponent(element, env) {
            var _this = _super.call(this, env) || this;
            _this.element = element;
            _this.env = env;
            /**
             * Button types  [ button | submit | reset ]
             *
             */
            _this.type = 'button';
            /**
             * styling for this button. See ButtonStyle for all supported styles.
             */
            _this.style = 'primary';
            /**
             * sizing for this button. [large, normal, small].
             */
            _this.size = 'normal';
            /**
             * Event fired when user select a item
             */
            _this.action = new core.EventEmitter();
            // Default button class is secondary.
            // Default button class is secondary.
            _this.buttonClass = 'ui-button-secondary';
            // Default disabled
            // Default disabled
            _this.disabled = false;
            return _this;
        }
        /**
         * @return {?}
         */
        ButtonComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                // How to style this button.
                if (core$1.isPresent(this.style)) {
                    if (this.style === 'primary') {
                        // Default .ui-button and .ui-button-primary get the same style.
                        // .ui-button-primary is necessary because button style can be overridden
                        // when included inside other widgets. So specify primary
                        this.buttonClass = 'ui-button-primary';
                    }
                    else {
                        this.buttonClass = 'ui-button-' + this.style;
                    }
                }
                // Determine the button class based on input size.
                if (this.size) {
                    switch (this.size) {
                        case 'large':
                            this.buttonClass += ' btn-lg';
                            break;
                        case 'normal':
                            this.buttonClass += ' btn-mid';
                            break;
                        case 'small':
                            this.buttonClass += ' btn-sm';
                            break;
                    }
                }
            };
        /**
         * This is little hacky hackity hack as currently primeng button directive does not work with
         * ngcontent projection but it has a label bindings, which is not the way developers work with
         * button. you want to
         *
         * <button> MY CONTENT</button instead of <button label='MyContent'></button>
         *
         *
         * @Todo: Change this until the time keep a test that check that they are still using ui-button
         *     that we are expecting and replacing
         */
        /**
         * This is little hacky hackity hack as currently primeng button directive does not work with
         * ngcontent projection but it has a label bindings, which is not the way developers work with
         * button. you want to
         *
         * <button> MY CONTENT</button instead of <button label='MyContent'></button>
         *
         *
         * \@Todo: Change this until the time keep a test that check that they are still using ui-button
         *     that we are expecting and replacing
         * @return {?}
         */
        ButtonComponent.prototype.ngAfterViewInit = /**
         * This is little hacky hackity hack as currently primeng button directive does not work with
         * ngcontent projection but it has a label bindings, which is not the way developers work with
         * button. you want to
         *
         * <button> MY CONTENT</button instead of <button label='MyContent'></button>
         *
         *
         * \@Todo: Change this until the time keep a test that check that they are still using ui-button
         *     that we are expecting and replacing
         * @return {?}
         */
            function () {
                if (core$1.isPresent(this.element)) {
                    var /** @type {?} */ button = this.element.nativeElement.querySelector('button');
                    var /** @type {?} */ buttonTitle = button.children[0];
                    button.children[0].textContent = this.element.nativeElement.textContent.trim()
                        .replace('ui-button', '').replace('ui-btn', '');
                    button.classList.remove('ui-button-text-empty');
                    button.textContent = '';
                    button.appendChild(buttonTitle);
                }
            };
        /**
         *  Action clicked. Call parent action.
         */
        /**
         *  Action clicked. Call parent action.
         * @param {?} $event
         * @return {?}
         */
        ButtonComponent.prototype.clicked = /**
         *  Action clicked. Call parent action.
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.action.emit(core$1.isBlank(this.value) ? $event : this.value);
            };
        ButtonComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-button',
                        template: "<button\n    pButton\n    [attr.type]=\"type\"\n    [attr.name]=\"name\"\n    [ngClass]=\"buttonClass\"\n    [disabled]=\"disabled\"\n    [attr.value]=\"value\"\n    (click)=\"clicked($event)\">\n\n    <ng-content></ng-content>\n</button>\n",
                        styles: [".ui-button-link{color:#337ab7;font-weight:400;border-radius:0;background-color:transparent}.ui-button-link,.ui-button-link.active,.ui-button-link:active,.ui-button-link:focus,.ui-button-link:hover,.ui-button-link[disabled]{border-color:transparent}.ui-button-link:focus,.ui-button-link:hover{color:#337ab7;-webkit-text-decoration:#337ab7;text-decoration:#337ab7;background-color:transparent}.ui-button-link[disabled]:focus,.ui-button-link[disabled]:hover{color:#2399e5;text-decoration:none}.ui-button{margin-right:5px}.btn-mid{height:36px;padding:5px 10px}.btn-lg{height:42px;font-size:16px;padding:5px 12px}.btn-sm{height:30px;font-size:12px;padding:5px 10px}"]
                    },] },
        ];
        /** @nocollapse */
        ButtonComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core$1.Environment }
            ];
        };
        ButtonComponent.propDecorators = {
            type: [{ type: core.Input }],
            name: [{ type: core.Input }],
            style: [{ type: core.Input }],
            size: [{ type: core.Input }],
            target: [{ type: core.Input }],
            value: [{ type: core.Input }],
            action: [{ type: core.Output }]
        };
        return ButtonComponent;
    }(BaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWButtonModule = (function () {
        function AWButtonModule() {
        }
        AWButtonModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            ButtonComponent
                        ],
                        imports: [
                            common.CommonModule,
                            primeng.ButtonModule,
                        ],
                        entryComponents: [
                            ButtonComponent
                        ],
                        exports: [
                            ButtonComponent
                        ],
                        providers: []
                    },] },
        ];
        return AWButtonModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWBasicNavigatorModule = (function () {
        function AWBasicNavigatorModule() {
        }
        AWBasicNavigatorModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            BasicNavigatorComponent
                        ],
                        imports: [
                            common.CommonModule,
                            primeng.ToolbarModule,
                            AWButtonModule,
                            AWCoreComponentModule
                        ],
                        exports: [
                            BasicNavigatorComponent
                        ],
                        providers: []
                    },] },
        ];
        return AWBasicNavigatorModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CardZoneTopComponent = (function () {
        function CardZoneTopComponent() {
        }
        CardZoneTopComponent.decorators = [
            { type: core.Directive, args: [{
                        selector: "aw-card-top",
                        host: {
                            'class': 'w-card-ztop'
                        }
                    },] },
        ];
        return CardZoneTopComponent;
    }());
    var CardZoneBottomComponent = (function () {
        function CardZoneBottomComponent() {
        }
        CardZoneBottomComponent.decorators = [
            { type: core.Directive, args: [{
                        selector: "aw-card-bottom",
                        host: {
                            'class': 'w-card-zbottom'
                        }
                    },] },
        ];
        return CardZoneBottomComponent;
    }());
    /**
     *
     * Card component is a container rendering its content inside 3 different zones.
     *
     *  ------------------------------------------
     *  |   TITLE                       | ACTION |
     *  |-----------------------------------------
     *  |                                        |
     *  |   TOP                                  |
     *  |                                        |
     *  ------------------------------------------
     *  |                                        |
     *  |   BOTTOM                               |
     *  |                                        |
     *  |                                        |
     *  ------------------------------------------
     *
     *
     *  There are 3 zones  + 1 placeholder for the actionIcon
     *
     *  Cards can be selectable which means when you click on it there will be rendered a border with
     *  a check mark inside Action zone (this is default behavior).
     *  You can use [selectable] binding to disable this, in such case card will have just a border
     *  without any check mark.
     *
     *  Cards can also contain custom Action which is rendered inside ACTION zone and on the
     *  application level you can listen for (click) events as well as you can provide your own action
     *  icon
     *
     *  Besides ACTION, TITLE, TOP and BOTTOM content zones cards support hover overlay effect and
     *  when its activated there is a overlay displayed on top of the card with Icon in the middle.
     *  Please note when [hasHover] is TRUE all the actions and selectability are disabled as there is
     *  only one action which click on the hover overlay.
     *
     *
     * ###example 1:
     *  Basic hover card which by default support selectable mode
     *
     * ```
     *          <aw-card #card1 [hasAction]="false" [width]="'202px'" [height]="'154px'">
     *
     *                 <aw-card-title [align]="'bottom-left'">
     *                     <span class="a-supplier-tag">
     *                         Preferred
     *                     </span>
     *                 </aw-card-title>
     *
     *                 <aw-card-top>
     *                     <div class="supplierName">
     *                         Haight Pumps
     *                     </div>
     *                     <div class="supplierLocation">
     *                         Palo Alto, CA, USA
     *                     </div>
     *                 </aw-card-top>
     *
     *                 <aw-card-bottom class="w-card-zbottom">
     *                     some text about the supplier and his parents<br/>
     *                     and some contacts
     *                 </aw-card-bottom>
     *
     *             </aw-card>
     *
     * ```
     *
     *  ###example 2:
     *   Hover card with custom action. when unselected action will appear and user can click on it.
     *
     * ```
     *          <aw-card #card1 [selectable]="true" [actionIcon]="'icon-question-mark'"
     *                     (onAction)="onAction(3, $event)">
     *
     *                 <aw-card-title [align]="'bottom-left'">
     *                     <span class="a-supplier-tag">
     *                         Preferred
     *                     </span>
     *                 </aw-card-title>
     *
     *                 <aw-card-top>
     *                     <div class="supplierName">
     *                         Haight Pumps
     *                     </div>
     *                     <div class="supplierLocation">
     *                         Palo Alto, CA, USA
     *                     </div>
     *                 </aw-card-top>
     *
     *                 <aw-card-bottom class="w-card-zbottom">
     *                     some text about the supplier and his parents<br/>
     *                     and some contacts
     *                 </aw-card-bottom>
     *
     *             </aw-card>
     *
     * ```
     *
     *
     *
     */
    var CardComponent = (function (_super) {
        __extends(CardComponent, _super);
        function CardComponent(env) {
            var _this = _super.call(this, env) || this;
            _this.env = env;
            /**
             * Tells if we should explicitly hide the action
             *
             */
            _this.hasAction = false;
            /**
             *
             * Is selectable mode supported? Saying Yes, card will have by default check-mark in the
             * ACTION zone when selected
             *
             */
            _this.selectable = true;
            /**
             * Option to pass custom "Card Selected" Icon
             *
             */
            _this.selectedIcon = 'icon-accept';
            /*
                 * Enable and disables hover effect on top of the card
                 */
            _this.hasHover = false;
            /**
             *
             * Default icon name for the hover overlay. This icons shows up in the middle over the card
             * vertically and horizontally centered
             *
             */
            _this.hoverIcon = 'icon-add';
            /**
             *  Selection state
             *
             */
            _this.selected = true;
            /**
             * Fired when the card is selected.
             *
             */
            _this.onSelect = new core.EventEmitter();
            /**
             * Fired when action icon is clicked.
             *
             */
            _this.onAction = new core.EventEmitter();
            /**
             * Fired when the user clicks on the hover overlay.
             *
             */
            _this.onHoverAction = new core.EventEmitter();
            /**
             * Usually when template is provided we want to use it and replace internal one but in this
             * case it will be always conditional and application developer can switch between default
             * template with zones and custom one provided by developer.
             *
             */
            _this.useBodyTemplate = false;
            // sets default value
            // sets default value
            _this.width = '202px';
            _this.height = '154px';
            return _this;
        }
        /**
         * @return {?}
         */
        CardComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                // If application wants to use action it must provide actionIcon
                if (core$1.isBlank(this.actionIcon) && this.hasAction) {
                    throw new Error('You need to provide action icon');
                }
            };
        /**
         * @return {?}
         */
        CardComponent.prototype.showBottomSection = /**
         * @return {?}
         */
            function () {
                return core$1.isPresent(this.bottom);
            };
        /**
         * fires select and unselect event.
         */
        /**
         * fires select and unselect event.
         * @param {?} event
         * @return {?}
         */
        CardComponent.prototype.toggleSelect = /**
         * fires select and unselect event.
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (!this.selectable) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                else {
                    this.selected = !this.selected;
                    this.onSelect.emit(this.selected);
                }
            };
        /**
         *
         * Only fired when action is rendered and user clicks on custom actionIcon
         *
         */
        /**
         *
         * Only fired when action is rendered and user clicks on custom actionIcon
         *
         * @param {?} event
         * @return {?}
         */
        CardComponent.prototype.onActionClick = /**
         *
         * Only fired when action is rendered and user clicks on custom actionIcon
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.hasAction && (!this.selected || !this.selectable)) {
                    this.onAction.emit(this.selected);
                }
            };
        /**
         * Triggered  when hover effect is on + user click on the card
         *
         */
        /**
         * Triggered  when hover effect is on + user click on the card
         *
         * @param {?} isEnter
         * @return {?}
         */
        CardComponent.prototype.onHover = /**
         * Triggered  when hover effect is on + user click on the card
         *
         * @param {?} isEnter
         * @return {?}
         */
            function (isEnter) {
                if (core$1.isPresent(this.hoverDiv)) {
                    this.hoverDiv.nativeElement.style.opacity = isEnter ? 0.5 : 0;
                }
            };
        /**
         *
         * Used to decide if we should render implicit card template with our zones or
         * user provided template
         *
         */
        /**
         *
         * Used to decide if we should render implicit card template with our zones or
         * user provided template
         *
         * @return {?}
         */
        CardComponent.prototype.showBodyTemplate = /**
         *
         * Used to decide if we should render implicit card template with our zones or
         * user provided template
         *
         * @return {?}
         */
            function () {
                return core$1.isPresent(this.bodyTemplate) && this.useBodyTemplate;
            };
        CardComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-card',
                        template: "<div class=\"w-card\" [style.width]=\"width\" [style.height]=\"height\"\n     [class.u-is-hover]=\"hasHover\"\n     (mouseenter)=\"onHover(true)\"\n     (mouseleave)=\"onHover(false)\"\n     [class.u-card-selected]=\"selected\"\n     [class.u-card-unselected]=\"!selected\"\n     [ngClass]=\"styleClass\"\n>\n\n    <div class=\"card-body ui-g\"  *ngIf=\"!showBodyTemplate()\">\n        <!-- Hover element that is triggered by mouseenter, mouseleave events-->\n        <div #hoverDiv *ngIf=\"hasHover\" class=\"u-card-hover\" (click)=\"onHoverAction.emit($event)\">\n            <span [style.width]=\"'100%'\" class=\"sap-icon\" [ngClass]=\"hoverIcon\"></span>\n        </div>\n        <!-- HEADER HAVING TITLE AND ICONS/ACTIONS-->\n        <div class=\"ui-g-12 ui-g-nopad w-card-header\">\n            <div class=\"w-card-ztitle ui-g-nopad\" (click)=\"toggleSelect($event)\"\n                 [class.u-card-pointer]=\"selectable\"\n                 [ngClass]=\"{'ui-g-9': hasAction || selectable, 'ui-g-11': !hasAction && !selectable}\">\n                <ng-content select=\"aw-card-title\"></ng-content>\n            </div>\n\n            <div *ngIf=\"hasAction || selectable\" class=\"w-card-zaction ui-g-nopad ui-g-3\">\n\n                <span *ngIf=\"selected && selectable\" class=\"sap-icon selection\"\n                      [class.u-card-pointer]=\"selectable\"\n                      [class.u-card-action-bg]=\"selected\"\n                      (click)=\"toggleSelect($event)\"\n                      [ngClass]=\"selectedIcon\"></span>\n\n\n                <span *ngIf=\"hasAction && (!selected || !selectable) \"\n                      class=\"sap-icon action\"\n                      [class.u-card-pointer]=\"true\"\n                      (click)=\"onActionClick($event)\"\n                      [ngClass]=\"actionIcon\"\n                ></span>\n            </div>\n        </div>\n\n        <!--TOP CARD SECTION-->\n        <div class=\"w-card-ztop ui-g-nopad ui-g-12 \"\n             (click)=\"toggleSelect($event)\"\n             [class.u-card-pointer]=\"selectable\">\n            <ng-content select=\"aw-card-top\"></ng-content>\n        </div>\n\n        <div class=\"ui-g-12 ui-g-nopad w-card-line-divider  \" *ngIf=\"showBottomSection()\"></div>\n        <!--BOTTOM CARD SECTION-->\n        <div *ngIf=\"showBottomSection()\" class=\"ui-g-12 ui-g-nopad w-card-zbottom\"\n             [class.u-card-pointer]=\"selectable\"\n             (click)=\"toggleSelect($event)\">\n            <ng-content select=\"aw-card-bottom\"></ng-content>\n        </div>\n    </div>\n\n    <div *ngIf=\"showBodyTemplate()\" class=\"w-card-user-cnt\" >\n        <ng-container *ngTemplateOutlet=\"bodyTemplate\">\n        </ng-container>\n    </div>\n\n</div>\n",
                        styles: [".w-card{border:2px solid #0076cb;display:inline-block;overflow:hidden;color:#636363;box-sizing:border-box}.w-card-header{position:relative;height:30px;padding-left:1em}.w-card-ztitle{height:100%;padding-top:3px}.w-card-ztitle ::ng-deep .w-card-title{height:100%;width:100%;display:flex}.w-card-ztitle ::ng-deep .w-card-title>*{flex:0 1}.w-card-zaction{height:100%;display:inline-block;text-align:right}.w-card-zaction .sap-icon{width:29px;height:29px;text-align:center;display:inline-block;font-size:1.5em;line-height:1.4em}.w-card-zaction .sap-icon.selection{color:#fff}.w-card-zaction .sap-icon.action{color:#969696}.w-card-zbottom,.w-card-ztop{padding:1em}.w-card-line-divider{border-top:1px solid #d6d6d6;margin:0 14px}.w-card-user-cnt{width:100%;height:100%;position:relative;background-color:#eee}.u-card-hover{position:absolute;height:100%;width:100%;opacity:0;transition:.5s ease;background-color:#0076cb;z-index:100}.u-card-hover .sap-icon{text-align:center;display:inline-block;font-size:4em;color:#fff;position:relative;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.u-card-action-bg{background:#0076cb}.u-is-hover{position:relative}.u-card-selected{border-color:#0076cb}.u-card-unselected{border-color:#d7d7d7}.u-card-hover,.u-card-pointer{cursor:pointer}"]
                    },] },
        ];
        /** @nocollapse */
        CardComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment }
            ];
        };
        CardComponent.propDecorators = {
            hasAction: [{ type: core.Input }],
            selectable: [{ type: core.Input }],
            selectedIcon: [{ type: core.Input }],
            actionIcon: [{ type: core.Input }],
            hasHover: [{ type: core.Input }],
            hoverIcon: [{ type: core.Input }],
            selected: [{ type: core.Input }],
            onSelect: [{ type: core.Output }],
            onAction: [{ type: core.Output }],
            onHoverAction: [{ type: core.Output }],
            bottom: [{ type: core.ContentChild, args: [CardZoneBottomComponent,] }],
            bodyTemplate: [{ type: core.ContentChild, args: ['body',] }],
            hoverDiv: [{ type: core.ViewChild, args: ['hoverDiv',] }]
        };
        return CardComponent;
    }(BaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Maps our internal alignment value to real css values
     *
     */
    var /** @type {?} */ VAlignMap = {
        'top-left': 'flex-start',
        'top-center': 'flex-start',
        'top-right': 'flex-start',
        'center-left': 'center',
        'center-center': 'center',
        'center-right': 'center',
        'bottom-left': 'flex-end',
        'bottom-center': 'flex-end',
        'bottom-right': 'flex-end'
    };
    var /** @type {?} */ HAlignMap = {
        'top-left': 'flex-start',
        'top-center': 'center',
        'top-right': 'flex-end',
        'center-left': 'flex-start',
        'center-center': 'center',
        'center-right': 'flex-end',
        'bottom-left': 'flex-start',
        'bottom-center': 'center',
        'bottom-right': 'flex-end'
    };
    /**
     * Title zone provides a content placeholder for the Title Area. This zone is adding ability
     * to align its content into 9 different position.
     *
     * You can use this Title zone within <aw-card> as:
     *
     *
     * ```html
     *
     *  <aw-card  [width]="'202px'" [height]="'154px'" [hasHover]="true"
     *                       [selectable]="false" [hasAction]="false"
     *                  (onHoverAction)="onAction(7, $event)" >
     *
     *                  <aw-card-title [align]="'bottom-left'">
     *                      <span class="a-supplier-tag">
     *                          Preferred
     *                      </span>
     *                  </aw-card-title>
     *
     *   </aw-card>
     *
     * ```
     * Default alignment is top-left
     *
     *
     *
     *
     */
    var CardZoneTitleComponent = (function (_super) {
        __extends(CardZoneTitleComponent, _super);
        function CardZoneTitleComponent(env, elem) {
            var _this = _super.call(this, env) || this;
            _this.env = env;
            _this.elem = elem;
            /**
             * Special property which is used to apply flex properties for aligning content vertically
             * as well as horizontally
             *
             */
            _this.align = 'top-left';
            return _this;
        }
        /**
         * @return {?}
         */
        CardZoneTitleComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                this.elem.nativeElement.style.alignItems = VAlignMap[this.align];
                this.elem.nativeElement.style.justifyContent = HAlignMap[this.align];
            };
        CardZoneTitleComponent.decorators = [
            { type: core.Directive, args: [{
                        selector: "aw-card-title",
                        host: {
                            'class': 'w-card-title'
                        }
                    },] },
        ];
        /** @nocollapse */
        CardZoneTitleComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: core.ElementRef }
            ];
        };
        CardZoneTitleComponent.propDecorators = {
            align: [{ type: core.Input }]
        };
        return CardZoneTitleComponent;
    }(BaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWCardModule = (function () {
        function AWCardModule() {
        }
        AWCardModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            CardComponent,
                            CardZoneTitleComponent,
                            CardZoneTopComponent,
                            CardZoneBottomComponent
                        ],
                        entryComponents: [
                            CardComponent
                        ],
                        exports: [
                            CardComponent,
                            CardZoneTitleComponent,
                            CardZoneTopComponent,
                            CardZoneBottomComponent
                        ],
                        providers: []
                    },] },
        ];
        return AWCardModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     *
     * Implements standard HTML checkbox on top of PrimeNG. There are 2 types of
     * {\@link CheckboxComponent}: form and action checkbox as described above.
     *
     *
     * Usage: Basic example having red checkbox checked
     *
     * ```HTML
     *        <aw-checkbox [name]="'color'" [value]="'red'" [label]="'Red'"
     *                                        [(ngModel)]="model">
     *        </aw-checkbox>
     *        <aw-checkbox [name]="'color'" [value]="'blue'" [label]="'Blue'"
     *                                        [(ngModel)]="model">
     *       </aw-checkbox>
     *
     * ```
     *
     * ```ts
     *
     *
     *   class CBBasicWithNgModelComponent
     *   {
     *
     *       model: string[] = ['red'];
     *
     *       constructor()
     *       {
     *       }
     *   }
     *
     * ```
     *
     * For more examples please see a playground or unit test.
     *
     */
    var /** @type {?} */ CB_CONTROL_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return CheckboxComponent; }),
        multi: true
    };
    var CheckboxComponent = (function (_super) {
        __extends(CheckboxComponent, _super);
        function CheckboxComponent(env, parentContainer) {
            var _this = _super.call(this, env, parentContainer) || this;
            _this.env = env;
            _this.parentContainer = parentContainer;
            /**
             *
             * A value associated with this checkbox
             *
             */
            _this.value = '';
            /**
             * Type of checkbox. Form based updates model and Action based only fires click events
             *
             */
            _this.type = 'form';
            /**
             * Trigger click event.
             *
             */
            _this.action = new core.EventEmitter();
            /**
             * PrimeNG has this type called binary which works only with Boolean meaning it does not add or
             * remove values.
             *
             * In our case Checktype = Action is always binary or when this.value is boolean
             *
             */
            _this.isBinary = false;
            return _this;
        }
        /**
         * @return {?}
         */
        CheckboxComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.model = this.value;
                this.type = this.action.observers.length > 0 ? 'action' : this.type;
                if (this.isFormType()) {
                    _super.prototype.ngOnInit.call(this);
                    if (this.isStandalone) {
                        _super.prototype.registerFormControl.call(this, this.value);
                        this.model = this.formControl.value;
                        this.onModelChanged(this.model);
                    }
                    else {
                        // get control from parent
                        this.formControl = /** @type {?} */ (this.formGroup.controls[this.name]);
                    }
                }
                // When value is boolean we are dealing with PrimeNg Binary checkbox
                // which only sets TRUE/FALSE and does not add or remove values
                this.isBinary = core$1.isBoolean(this.value);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        CheckboxComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                _super.prototype.ngOnChanges.call(this, changes);
                if (core$1.isPresent(changes['value']) &&
                    (changes['value'].currentValue !== changes['value'].previousValue)) {
                    this.model = changes['value'].currentValue;
                }
            };
        /**
         * Called when Checkbox is clicked and it either fire action or updates the model.
         *
         */
        /**
         * Called when Checkbox is clicked and it either fire action or updates the model.
         *
         * @param {?} event
         * @return {?}
         */
        CheckboxComponent.prototype.onChange = /**
         * Called when Checkbox is clicked and it either fire action or updates the model.
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.isFormType()) {
                    this.onModelChanged(this.model);
                    if (this.isStandalone) {
                        this.formControl.setValue(this.model);
                    }
                }
                else {
                    this.action.emit(event);
                }
            };
        /**
         *
         * Tell if we are using Form Checkbox. This is used remove some of the bindings that are not
         * applicable for certain type.
         *
         */
        /**
         *
         * Tell if we are using Form Checkbox. This is used remove some of the bindings that are not
         * applicable for certain type.
         *
         * @return {?}
         */
        CheckboxComponent.prototype.isFormType = /**
         *
         * Tell if we are using Form Checkbox. This is used remove some of the bindings that are not
         * applicable for certain type.
         *
         * @return {?}
         */
            function () {
                return this.type === 'form';
            };
        /**
         * Internal. Please see ControlValueAccessor
         *
         */
        /**
         * Internal. Please see ControlValueAccessor
         *
         * @param {?} value
         * @return {?}
         */
        CheckboxComponent.prototype.writeValue = /**
         * Internal. Please see ControlValueAccessor
         *
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value !== this.model && this.isFormType()) {
                    this.model = value;
                    if (this.isStandalone) {
                        this.onModelChanged(this.model);
                        this.formControl.setValue(this.model);
                    }
                }
            };
        CheckboxComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-checkbox',
                        template: "<span class=\"w-checkbox\">\n\n    <ng-template [ngIf]=\"editable && isFormType()\">\n        <p-checkbox [name]=\"name\" [value]=\"value\" [label]=\"label\"\n                    [(ngModel)]=\"model\"\n                    [binary]=\"isBinary\"\n                    (onChange)=\"onChange($event)\"\n                    [disabled]=\"disabled\"\n                    [class.u-validation-error]=\"!(formControl.valid || (formControl.pristine))\"\n        >\n        </p-checkbox>\n    </ng-template>\n\n\n    <ng-template [ngIf]=\"!isFormType()\">\n        <p-checkbox [binary]=\"isBinary\"\n                    [label]=\"label\"\n                    [(ngModel)]=\"model\"\n                    (onChange)=\"onChange($event)\"\n                    [disabled]=\"disabled\">\n        </p-checkbox>\n\n    </ng-template>\n</span>\n",
                        styles: ["/deep/ .ui-chkbox .ui-chkbox-box{width:22px;height:22px}/deep/ .ui-chkbox .pi{font-family:\"SAP icon fonts\";color:#199de0;cursor:pointer;font-size:1.07em;line-height:1.42em}/deep/ .ui-chkbox .pi.pi-check:before{content:'\\e05b'}"],
                        providers: [
                            CB_CONTROL_VALUE_ACCESSOR,
                            { provide: BaseFormComponent, useExisting: core.forwardRef(function () { return CheckboxComponent; }) }
                        ]
                    },] },
        ];
        /** @nocollapse */
        CheckboxComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: BaseFormComponent, decorators: [{ type: core.SkipSelf }, { type: core.Optional }, { type: core.Inject, args: [core.forwardRef(function () { return BaseFormComponent; }),] }] }
            ];
        };
        CheckboxComponent.propDecorators = {
            value: [{ type: core.Input }],
            type: [{ type: core.Input }],
            label: [{ type: core.Input }],
            action: [{ type: core.Output }]
        };
        return CheckboxComponent;
    }(BaseFormComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWCheckBoxModule = (function () {
        function AWCheckBoxModule() {
        }
        AWCheckBoxModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            CheckboxComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            primeng.CheckboxModule
                        ],
                        entryComponents: [
                            CheckboxComponent
                        ],
                        exports: [
                            CheckboxComponent,
                            forms.ReactiveFormsModule,
                            forms.FormsModule
                        ],
                        providers: []
                    },] },
        ];
        return AWCheckBoxModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     *  Checkbox list is a wrapper class around 'Checkbox' component to simply assembly of multi choice
     * component
     *
     * In Addition it adds ability to work with complex object. PrimeNG checkboxes work only with
     * primitive values.
     *
     * @see {\@link check-box/check-box.component.ts}
     *
     *
     * ### Example
     *
     *
     * \@Component({
     *       selector: 'showCheckBoxList' ,
     *       template: `
     *           <aw-checkbox-list [list]="checkBoxListValues" [selections]="selectedValues"
     *
     *            [name]="'myColors'" [formGroup]="formGroup" (onSelection)="onCBClick">
     *           </aw-checkbox-list>
     *       `
     *
     *       })
     *        class MyShowCLComponent
     *        {
     *            checkBoxListValues: string[] = ['blue' , 'red' , 'yellow' , 'orange' , 'white' ,
     *     'silver' , 'black' ,
     *            'Green' , 'Gray' , 'Navy' , 'Olive' , 'Aqua' , 'Purple'];
     *
     *            selectedValues: string[] = ['blue' , 'Olive' , 'Aqua' , 'Purple'];
     *
     *
     *            formGroup: FormGroup = new FormGroup({});
     *
     *
     *            onCBClick (event): void
     *            {
     *                console.log('onCBClick = ' + event);
     *            }
     *
     *        }
     * *
     */
    var /** @type {?} */ CB_LIST_CONTROL_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return CheckBoxListComponent; }),
        multi: true
    };
    var CheckBoxListComponent = (function (_super) {
        __extends(CheckBoxListComponent, _super);
        function CheckBoxListComponent(env, cd, parentContainer) {
            var _this = _super.call(this, env, parentContainer) || this;
            _this.env = env;
            _this.cd = cd;
            _this.parentContainer = parentContainer;
            /**
             * Fires event when checkbox is selected/clicked. Emits current clicked checkboxed. not the
             * actuall internal model value in this case array of choices
             *
             */
            _this.onSelection = new core.EventEmitter();
            /**
             * Internal model
             */
            _this.model = [];
            return _this;
        }
        /**
         * @return {?}
         */
        CheckBoxListComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                if (core$1.isBlank(this.selections)) {
                    this.selections = [];
                }
                this.registerFormControl(this.selections);
                this.updateModel(this.selections);
                this.onModelChanged(this.selections);
            };
        /**
         * @return {?}
         */
        CheckBoxListComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var /** @type {?} */ updatedModel = [];
                this.model.forEach(function (index) { return updatedModel.push(_this.list[index]); });
                this.formControl.setValue(updatedModel, {
                    emitEvent: true,
                    emitViewToModelChange: false
                });
                this.cd.detectChanges();
            };
        /**
         * Label is extracted into this method so in the future we can play more how we want to display
         * the value. Since I want to support formatters for each components we might have a chance to
         * decide how label will look like.
         *
         */
        /**
         * Label is extracted into this method so in the future we can play more how we want to display
         * the value. Since I want to support formatters for each components we might have a chance to
         * decide how label will look like.
         *
         * @param {?} item
         * @return {?}
         */
        CheckBoxListComponent.prototype.labelValue = /**
         * Label is extracted into this method so in the future we can play more how we want to display
         * the value. Since I want to support formatters for each components we might have a chance to
         * decide how label will look like.
         *
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (core$1.isPresent(this.labelFormatter)) {
                    return this.labelFormatter(item);
                }
                return item.toString();
            };
        /**
         * In this version of checkboxes we still expect only primitive types. Keep this functionality
         * in extra method so we can work with it even now we just return the same value back
         */
        /**
         * In this version of checkboxes we still expect only primitive types. Keep this functionality
         * in extra method so we can work with it even now we just return the same value back
         * @param {?} item
         * @return {?}
         */
        CheckBoxListComponent.prototype.value = /**
         * In this version of checkboxes we still expect only primitive types. Keep this functionality
         * in extra method so we can work with it even now we just return the same value back
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return item;
            };
        /**
         * Delegate event outside of this component and convert indexed model to original objects
         *
         */
        /**
         * Delegate event outside of this component and convert indexed model to original objects
         *
         * @param {?} event
         * @return {?}
         */
        CheckBoxListComponent.prototype.onChange = /**
         * Delegate event outside of this component and convert indexed model to original objects
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _this = this;
                var /** @type {?} */ updatedModel = [];
                this.model.forEach(function (index) {
                    updatedModel.push(_this.list[index]);
                });
                this.onSelection.emit(updatedModel);
                this.onModelChanged(updatedModel);
                this.formControl.setValue(updatedModel, {
                    emitEvent: true,
                    emitViewToModelChange: false
                });
            };
        /**
         * Since we might be dealing with complex object store only INDEXes number in the model.
         *
         */
        /**
         * Since we might be dealing with complex object store only INDEXes number in the model.
         *
         * @param {?} sourceList
         * @return {?}
         */
        CheckBoxListComponent.prototype.updateModel = /**
         * Since we might be dealing with complex object store only INDEXes number in the model.
         *
         * @param {?} sourceList
         * @return {?}
         */
            function (sourceList) {
                var _this = this;
                sourceList.forEach(function (item) {
                    var /** @type {?} */ index = _this.list.findIndex(function (elem) {
                        return core$1.equals(item, elem);
                    });
                    _this.model.push(index);
                });
            };
        /**
         * Internal. Please see ControlValueAccessor
         *
         */
        /**
         * Internal. Please see ControlValueAccessor
         *
         * @param {?} value
         * @return {?}
         */
        CheckBoxListComponent.prototype.writeValue = /**
         * Internal. Please see ControlValueAccessor
         *
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (core$1.isPresent(this.model) && core$1.isPresent(value)) {
                    var /** @type {?} */ newModel = value;
                    this.updateModel(newModel);
                    // this.cd.markForCheck();
                }
            };
        CheckBoxListComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-checkbox-list',
                        template: "<div *ngFor=\"let item of list; let i = index\" class=\"ui-g\">\n\n    <!-- in the future we should be able to to support inline and stack-->\n    <div class=\"ui-g-12\">\n        <aw-checkbox [(ngModel)]=\"model\"\n                     (ngModelChange)=\"onChange($event)\"\n                     [editable]=\"editable\"\n                     [isStandalone]=\"false\"\n                     [name]=\"name\"\n                     [value]=\"i\"\n                     [label]=\"labelValue(item)\">\n\n        </aw-checkbox>\n    </div>\n\n</div>\n\n",
                        styles: [""],
                        providers: [
                            CB_LIST_CONTROL_VALUE_ACCESSOR,
                            { provide: BaseFormComponent, useExisting: core.forwardRef(function () { return CheckBoxListComponent; }) }
                        ]
                    },] },
        ];
        /** @nocollapse */
        CheckBoxListComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: core.ChangeDetectorRef },
                { type: BaseFormComponent, decorators: [{ type: core.SkipSelf }, { type: core.Optional }, { type: core.Inject, args: [core.forwardRef(function () { return FormRowComponent; }),] }] }
            ];
        };
        CheckBoxListComponent.propDecorators = {
            list: [{ type: core.Input }],
            selections: [{ type: core.Input }],
            onSelection: [{ type: core.Output }],
            labelFormatter: [{ type: core.Input }]
        };
        return CheckBoxListComponent;
    }(BaseFormComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWCheckBoxListModule = (function () {
        function AWCheckBoxListModule() {
        }
        AWCheckBoxListModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            CheckBoxListComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            AWCheckBoxModule
                        ],
                        exports: [
                            CheckBoxListComponent
                        ],
                        providers: []
                    },] },
        ];
        return AWCheckBoxListModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Hyperlink component that implements consistent styling, behavior. Hyperlink supports all of the
     * native link functionality. In addition, it supports navigation to components through the action
     * binding.
     *
     *
     * for more info please see class Doc of the:
     * @see {\@link button/button.component.ts}
     *
     *  ### Example
     *  ```
     *
     * \@Component({
     *    selector: 'registration' ,
     *    template: `
     *
     *           <aw-hyperlink  [type]="'text/html'" [name]="'link'"
     *                        (action)="onClicked($event)" [value]="customerId"
     *                        [size]="'large'" >my link</aw-hyperlink>
     *
     *    `
     *    })
     *    export class MyComponent
     *    {
     *        command:boolean;
     *
     *        constructor ()
     *        {
     *        }
     *
     *        onClicked(customerId:string) {
     *           if (customerId) {
     *              // display customer details component.
     *           }
     *        }
     *    }
     */
    var HyperlinkComponent = (function (_super) {
        __extends(HyperlinkComponent, _super);
        function HyperlinkComponent(env) {
            var _this = _super.call(this, env) || this;
            _this.env = env;
            /**
             * sizing for this link. [large, normal, small].
             */
            _this.size = 'normal';
            /**
             * Event fired when user select a item
             */
            _this.action = new core.EventEmitter();
            /**
             * Internal CSS class that styles this hyperlink based on input 'size'
             */
            _this.linkClass = 'link';
            return _this;
        }
        /**
         * @return {?}
         */
        HyperlinkComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                // Determine the link class based on input size.
                if (this.size) {
                    switch (this.size) {
                        case 'large':
                            this.linkClass += ' link-lg';
                            break;
                        case 'normal':
                            this.linkClass += ' link-mid';
                            break;
                        case 'small':
                            this.linkClass += ' link-sm';
                            break;
                    }
                }
                // If I have an action tag, and no href. We add default styling and behavior.
                if (this.action.observers.length > 0) {
                    this.linkClass += ' link-bh';
                }
            };
        /**
         *  Action clicked. Call parent action.
         */
        /**
         *  Action clicked. Call parent action.
         * @param {?} event
         * @return {?}
         */
        HyperlinkComponent.prototype.clicked = /**
         *  Action clicked. Call parent action.
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.action.emit({
                    event: event,
                    value: this.value
                });
            };
        HyperlinkComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-hyperlink',
                        template: "<a [attr.type]=\"type\"\n   [attr.href]=\"href\"\n   [attr.rel]=\"rel\"\n   [attr.target]=\"target\"\n   [ngClass]=\"linkClass\"\n   [class.disabled]=\"disabled\"\n   (click)=\"clicked($event)\">\n\n    <ng-content></ng-content>\n</a>\n",
                        styles: [".link{color:#0275d8;cursor:pointer}.link.link-bh{color:#0275d8}.link.link-bh:hover{text-decoration:underline;cursor:pointer}.link-sm{font-size:.875em}.link-mid{font-size:1em}.link-lg{font-size:1.25em}.link.disabled{pointer-events:none;cursor:default;color:#ddd}"]
                    },] },
        ];
        /** @nocollapse */
        HyperlinkComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment }
            ];
        };
        HyperlinkComponent.propDecorators = {
            type: [{ type: core.Input }],
            href: [{ type: core.Input }],
            rel: [{ type: core.Input }],
            size: [{ type: core.Input }],
            target: [{ type: core.Input }],
            value: [{ type: core.Input }],
            action: [{ type: core.Output }]
        };
        return HyperlinkComponent;
    }(BaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWHyperlinkModule = (function () {
        function AWHyperlinkModule() {
        }
        AWHyperlinkModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            HyperlinkComponent
                        ],
                        imports: [
                            common.CommonModule
                        ],
                        entryComponents: [
                            HyperlinkComponent
                        ],
                        exports: [
                            HyperlinkComponent
                        ],
                        providers: []
                    },] },
        ];
        return AWHyperlinkModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Selection State for the chooser in order to be able to comunicate with the parent object using a
     * chooser. If I would have to manage only single values with no addional methods i would user
     * emitters to do the job, but in this case we need this interface (abstract class) between a
     * chooser and actual object.
     *
     *
     * @abstract
     */
    var /**
     * Selection State for the chooser in order to be able to comunicate with the parent object using a
     * chooser. If I would have to manage only single values with no addional methods i would user
     * emitters to do the job, but in this case we need this interface (abstract class) between a
     * chooser and actual object.
     *
     *
     * @abstract
     */ ChooserSelectionState = (function () {
        function ChooserSelectionState() {
        }
        /**
         *
         * Set selection state is usually triggered by selecting and unselecting a item (in case of
         * multiselect) and it should update its list of objects with either settings/adding item or
         * removing it.
         *
         *
         */
        /**
         *
         * Set selection state is usually triggered by selecting and unselecting a item (in case of
         * multiselect) and it should update its list of objects with either settings/adding item or
         * removing it.
         *
         *
         * @param {?} selection
         * @param {?} selected
         * @return {?}
         */
        ChooserSelectionState.prototype.setSelectionState = /**
         *
         * Set selection state is usually triggered by selecting and unselecting a item (in case of
         * multiselect) and it should update its list of objects with either settings/adding item or
         * removing it.
         *
         *
         * @param {?} selection
         * @param {?} selected
         * @return {?}
         */
            function (selection, selected) {
            };
        /**
         * The most recent selection . Null if last action was a deselection. Usually used by Chooser
         * or ChooserState to get cuurent value.
         *
         */
        /**
         * The most recent selection . Null if last action was a deselection. Usually used by Chooser
         * or ChooserState to get cuurent value.
         *
         * @return {?}
         */
        ChooserSelectionState.prototype.selectedObject = /**
         * The most recent selection . Null if last action was a deselection. Usually used by Chooser
         * or ChooserState to get cuurent value.
         *
         * @return {?}
         */
            function () {
                return core$1.unimplemented();
            };
        /**
         * The most recent selections.
         *
         */
        /**
         * The most recent selections.
         *
         * @return {?}
         */
        ChooserSelectionState.prototype.selectedObjects = /**
         * The most recent selections.
         *
         * @return {?}
         */
            function () {
                return core$1.unimplemented();
            };
        /**
         *
         * Check if the item selection items is in the selectedObjects
         */
        /**
         *
         * Check if the item selection items is in the selectedObjects
         * @param {?} selection
         * @return {?}
         */
        ChooserSelectionState.prototype.isSelected = /**
         *
         * Check if the item selection items is in the selectedObjects
         * @param {?} selection
         * @return {?}
         */
            function (selection) {
                return core$1.unimplemented();
            };
        return ChooserSelectionState;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * ChooserState manages complete lifecycle for the Chooser Component. It keeps track of current
     * selection as well as it can broadcast any updates.
     *
     *
     */
    var /**
     * ChooserState manages complete lifecycle for the Chooser Component. It keeps track of current
     * selection as well as it can broadcast any updates.
     *
     *
     */ ChooserState = (function () {
        function ChooserState(chooserSelectionState, isMulti) {
            if (isMulti === void 0) {
                isMulti = true;
            }
            /**
             * Indicates if there are any validation like entered value does not much with the source list.
             *
             */
            this.isInvalid = false;
            /**
             *
             * indicates that we started to some editing e.g. starting to type in something into the
             * filter, or removing already selected items
             */
            this.addMode = false;
            this.recentSelectedDisplayed = 0;
            /**
             * When this option is active we do not show all selected items, but max number that is
             * defined. User is able to toggle to expand the view to see all selections and hide them as
             * well
             */
            this.showAllRecentlySelected = false;
            this.selectionState = chooserSelectionState;
            this.multiselect = isMulti;
            if (core$1.isBlank(this.selectionState)) {
                this.selectionState = new DefaultSelectionState(this.multiselect);
            }
        }
        /**
         *
         * It will select and persist an item using ChooserSelectionState provider.
         *
         */
        /**
         *
         * It will select and persist an item using ChooserSelectionState provider.
         *
         * @param {?} item
         * @return {?}
         */
        ChooserState.prototype.updatedSelectedObjects = /**
         *
         * It will select and persist an item using ChooserSelectionState provider.
         *
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (core$1.isBlank(item)) {
                    item = this.currentItem;
                }
                if (!this.multiselect) {
                    this.setSelectionState(item, true);
                }
                else {
                    var /** @type {?} */ selectedObject = this.selectedObject();
                    var /** @type {?} */ selectedObjects = this.selectedObjects();
                    if (this.addMode) {
                        if (this.isInvalid) {
                            if (core$1.isPresent(selectedObject)) {
                                this.setSelectionState(selectedObject, false);
                            }
                        }
                        this.setSelectionState(item, !core$1.ListWrapper.containsComplex(selectedObjects, item));
                    }
                    else {
                        if (core$1.isPresent(selectedObject)) {
                            this.setSelectionState(selectedObject, false);
                        }
                        this.setSelectionState(item, true);
                    }
                }
            };
        /**
         * When user selection is large we use this method to check if we need to show all selected
         * items or only MaxRecentSelected
         */
        /**
         * When user selection is large we use this method to check if we need to show all selected
         * items or only MaxRecentSelected
         * @return {?}
         */
        ChooserState.prototype.toggleAllSelected = /**
         * When user selection is large we use this method to check if we need to show all selected
         * items or only MaxRecentSelected
         * @return {?}
         */
            function () {
                this.showAllRecentlySelected = !this.showAllRecentlySelected;
            };
        Object.defineProperty(ChooserState.prototype, "recentSelectedObjects", {
            /**
             *
             * Renders user's selection under the input field
             *
             */
            get: /**
             *
             * Renders user's selection under the input field
             *
             * @return {?}
             */ function () {
                if (!this.multiselect) {
                    return [];
                }
                var /** @type {?} */ recentSelectedObjects = [];
                this.recentSelectedDisplayed = 0;
                var /** @type {?} */ selectedObjects = this.selectedObjects();
                var /** @type {?} */ size = selectedObjects.length;
                var /** @type {?} */ maxCount = DataSource.MaxRecentSelected;
                if (size > DataSource.MaxRecentSelected && !this.showAllRecentlySelected) {
                    maxCount -= 1;
                }
                if (this.showAllRecentlySelected) {
                    maxCount = size;
                }
                for (var /** @type {?} */ i = size - 1; i >= 0 && (this.recentSelectedDisplayed < maxCount); i--) {
                    var /** @type {?} */ selection = selectedObjects[i];
                    recentSelectedObjects.push(selection);
                    this.recentSelectedDisplayed++;
                }
                return recentSelectedObjects;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ChooserState.prototype.selectedObject = /**
         * @return {?}
         */
            function () {
                return this.selectionState.selectedObject();
            };
        /**
         * @return {?}
         */
        ChooserState.prototype.selectedObjects = /**
         * @return {?}
         */
            function () {
                return this.selectionState.selectedObjects();
            };
        /**
         * @param {?} selection
         * @param {?} selected
         * @return {?}
         */
        ChooserState.prototype.setSelectionState = /**
         * @param {?} selection
         * @param {?} selected
         * @return {?}
         */
            function (selection, selected) {
                if (core$1.isPresent(selection)) {
                    this.selectionState.setSelectionState(selection, selected);
                }
            };
        return ChooserState;
    }());
    /**
     * Dummy implementation ChooserSelectionState
     */
    var /**
     * Dummy implementation ChooserSelectionState
     */ DefaultSelectionState = (function (_super) {
        __extends(DefaultSelectionState, _super);
        function DefaultSelectionState(multiSelect) {
            var _this = _super.call(this) || this;
            _this.multiSelect = multiSelect;
            return _this;
        }
        /**
         * @param {?} selection
         * @param {?} selected
         * @return {?}
         */
        DefaultSelectionState.prototype.setSelectionState = /**
         * @param {?} selection
         * @param {?} selected
         * @return {?}
         */
            function (selection, selected) {
                if (selected) {
                    this._selectedObject = selection;
                    if (this.multiSelect && !core$1.ListWrapper.containsComplex(this.selectedObjects(), selection)) {
                        this.selectedObjects().push(selection);
                    }
                }
                else {
                    if (this.multiSelect) {
                        core$1.ListWrapper.removeIfExist(this.selectedObjects(), selection);
                    }
                }
            };
        /**
         * @return {?}
         */
        DefaultSelectionState.prototype.selectedObject = /**
         * @return {?}
         */
            function () {
                return this._selectedObject;
            };
        /**
         * @return {?}
         */
        DefaultSelectionState.prototype.selectedObjects = /**
         * @return {?}
         */
            function () {
                if (core$1.isBlank(this._selectedObjects)) {
                    this._selectedObjects = [];
                }
                return this._selectedObjects;
            };
        /**
         * @param {?} selection
         * @return {?}
         */
        DefaultSelectionState.prototype.isSelected = /**
         * @param {?} selection
         * @return {?}
         */
            function (selection) {
                return _super.prototype.isSelected.call(this, selection);
            };
        return DefaultSelectionState;
    }(ChooserSelectionState));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Concrete DataSource implementation for the Chooser component. There are two ways how to use it:
     *
     * 1) You can use default DataSource injected inside component constructor and just call
     * initialize to configure it with correct DataProvider and DataFinder:
     *
     *
     * ```
     *   this.dataSource.init({
     *               obj: this.list,
     *               queryType: QueryType.FullText,
     *               state: null,
     *               multiselect: this.multiselect
     *           });
     *
     * ```
     *
     * and then you can use it to simply retrieve data or run queries.
     *
     * 2) You will instantiate your own DataSource and pass it into the component using [dataSource]
     * binding
     *
     * ```
     *
     *   this.ds = new ChooserDataSource(this.data, this.finders);
     *   this.ds.init({
     *               obj: this.list,
     *               queryType: QueryType.FullText,
     *               state: null,
     *               multiselect: this.multiselect
     *           });
     *
     * ```
     *
     *
     */
    var /**
     * Concrete DataSource implementation for the Chooser component. There are two ways how to use it:
     *
     * 1) You can use default DataSource injected inside component constructor and just call
     * initialize to configure it with correct DataProvider and DataFinder:
     *
     *
     * ```
     *   this.dataSource.init({
     *               obj: this.list,
     *               queryType: QueryType.FullText,
     *               state: null,
     *               multiselect: this.multiselect
     *           });
     *
     * ```
     *
     * and then you can use it to simply retrieve data or run queries.
     *
     * 2) You will instantiate your own DataSource and pass it into the component using [dataSource]
     * binding
     *
     * ```
     *
     *   this.ds = new ChooserDataSource(this.data, this.finders);
     *   this.ds.init({
     *               obj: this.list,
     *               queryType: QueryType.FullText,
     *               state: null,
     *               multiselect: this.multiselect
     *           });
     *
     * ```
     *
     *
     */ ChooserDataSource = (function (_super) {
        __extends(ChooserDataSource, _super);
        function ChooserDataSource(dataProviders, finders) {
            var _this = _super.call(this, dataProviders, finders) || this;
            _this.dataProviders = dataProviders;
            _this.finders = finders;
            return _this;
        }
        /**
         * To initialize this DataSource with current DataFinder and Provider as well as state we use
         * an interface DSChooserInitParams to have all init values typed checked
         *
         *
         */
        /**
         * To initialize this DataSource with current DataFinder and Provider as well as state we use
         * an interface DSChooserInitParams to have all init values typed checked
         *
         *
         * @param {...?} args
         * @return {?}
         */
        ChooserDataSource.prototype.init = /**
         * To initialize this DataSource with current DataFinder and Provider as well as state we use
         * an interface DSChooserInitParams to have all init values typed checked
         *
         *
         * @param {...?} args
         * @return {?}
         */
            function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                if (core$1.isBlank(args) || args.length !== 1 && !isDSChooserInitParams(args[0])) {
                    throw new Error('You need to initialize DS with (DSChooserInitParams)');
                }
                var /** @type {?} */ init = args[0];
                this.dataProvider = core$1.isPresent(init.dataProvider) ? init.dataProvider
                    : this.dataProviders.find(init.obj);
                this.dataFinder = core$1.isPresent(init.dataFinder) ? init.dataFinder
                    : this.finders.find(this.dataProvider, init.queryType);
                core$1.assert(core$1.isPresent(this.dataProvider) && core$1.isPresent(this.dataFinder), 'DataSource incorrectly initialized. (DataProvider, DataFinder) missing. ');
                if (core$1.isPresent(init.state)) {
                    this.state = init.state;
                }
                else {
                    this.state = new ChooserState(null, init.multiselect);
                }
                this.dataFinder.lookupKey = init.lookupKey;
                this.state.lookupKey = init.lookupKey;
            };
        /**
         * @param {?} pattern
         * @param {?} max
         * @return {?}
         */
        ChooserDataSource.prototype.find = /**
         * @param {?} pattern
         * @param {?} max
         * @return {?}
         */
            function (pattern, max) {
                var _this = this;
                this.state.pattern = pattern;
                this.state.lastFullMatchPattern = pattern;
                if (pattern.length === 0) {
                    return;
                }
                if (pattern === '*') {
                    // query everything
                    pattern = '';
                }
                // make sure we dataFinder has expected lookup key
                var /** @type {?} */ origKey = this.dataFinder.lookupKey;
                this.dataFinder.lookupKey = this.state.lookupKey;
                this.dataFinder.forData(this.dataProvider).match(pattern, max)
                    .subscribe(function (result) {
                    _this.state.matches = result;
                    if (_this.state.multiselect) {
                        for (var /** @type {?} */ i = 0; i < _this.state.selectedObjects().length; i++) {
                            var /** @type {?} */ item = _this.state.selectedObjects()[i];
                            core$1.ListWrapper.removeIfExist(_this.state.matches, item);
                        }
                    }
                    _this.dataFinder.lookupKey = origKey;
                });
            };
        /**
         *
         * When multiselect this method checks if we need to show SHOW MORE label under the selected
         * items. We do not want show e.g. 50 selection under the chooser that would take up whole
         * page.
         *
         */
        /**
         *
         * When multiselect this method checks if we need to show SHOW MORE label under the selected
         * items. We do not want show e.g. 50 selection under the chooser that would take up whole
         * page.
         *
         * @return {?}
         */
        ChooserDataSource.prototype.showMoreSelected = /**
         *
         * When multiselect this method checks if we need to show SHOW MORE label under the selected
         * items. We do not want show e.g. 50 selection under the chooser that would take up whole
         * page.
         *
         * @return {?}
         */
            function () {
                return this.state.selectedObjects().length >= DataSource.MaxRecentSelected;
            };
        /**
         * @template T
         * @return {?}
         */
        ChooserDataSource.prototype.open = /**
         * @template T
         * @return {?}
         */
            function () {
                return this.dataProvider.dataChanges.asObservable();
            };
        /**
         * @return {?}
         */
        ChooserDataSource.prototype.close = /**
         * @return {?}
         */
            function () {
                this.dataProvider = null;
                this.dataFinder = null;
                this.state = null;
            };
        /**
         * @template T
         * @return {?}
         */
        ChooserDataSource.prototype.instant = /**
         * @template T
         * @return {?}
         */
            function () {
                return this.dataProvider.data();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        ChooserDataSource.prototype.updateValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                this.state.addMode = true;
                if (core$1.isArray(value)) {
                    var /** @type {?} */ items = value;
                    items.forEach(function (item) { return _this.state.updatedSelectedObjects(item); });
                }
                else {
                    this.state.updatedSelectedObjects(value);
                }
                this.state.addMode = false;
            };
        Object.defineProperty(ChooserDataSource.prototype, "lookupKey", {
            get: /**
             * @return {?}
             */ function () {
                return this.dataFinder.lookupKey;
            },
            enumerable: true,
            configurable: true
        });
        return ChooserDataSource;
    }(DataSource));
    /**
     * @param {?} init
     * @return {?}
     */
    function isDSChooserInitParams(init) {
        return core$1.isPresent(init.obj) || core$1.isPresent(init.queryType);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Typeahead chooser that supports both single and multi-select. Not like Dropdown, this chooser
     * requires little bit different setup. It requires at minimum \@Input dataSource or
     * destinationClass
     *
     *
     * By default chooser is multi-select. If you want single select then you must provide multi-select
     * with \@Input.
     *
     * ### Example
     *
     * In simple scenario you can use Chooser like so:
     *
     *
     * ```
     * \@Component({
     *      selector: 'chooser-app' ,
     *      template: `<aw-chooser  [formGroup]="formGroup" name="color"'
     *                      [dataSource]="ds"></aw-chooser>`
     *  })
     *  export class MyChooserApp
     *  {
     *
     *      ds: ChooserDataSource;
     *
     *     constructor(private data: DataProviders, private finders: DataFinders){
     *          this.ds = new ChooserDataSource(this.data, this.finders);
     *
     *       this.ds.init({
     *           obj: ['blue', 'red', 'yellow'], queryType: QueryType.FullText, state: null,
     *            multiselect: true
     *       });
     *
     *     }
     *  }
     *
     * ````
     *  Above example will use provided dataSource and render multi-select chooser. With default
     *  implementation  selected values will appear as a tags under the input box
     *
     *
     *
     * * ### Example
     *
     *  In this example we provide custom template to change the way how chooser's MenuItem are
     *     rendered as well as template for the selection item looks like
     *
     * ```
     * \@Component({
     *      selector: 'chooser-app' ,
     *      template: `<aw-chooser  name="commodity"' [dataSource]="ds">
     *
     *          <ng-template #menuItem let-item>
     *             	<span>
     *             		<i class="fa fa-envira " ></i>
     *             		{{item}}
     *             	</span>
     *
     *          </ng-template>
     *
     *          <ng-template #selectionItem let-item>
     *             	<span class="tag tag-circle">
     *             		item: {{item }}
     *             		<i class="fa fa-close" (click)="chooser.removeValue(item)"></i>
     *             	</span>
     *
     *
     *          </ng-template>
     *
     *
     *          </aw-chooser>
     *      `
     *      style: [`
     *              .tag-circle {
     *              	border-radius: 6rem;
     *              	height: 7rem;
     *              	color: #e8eef1;
     *              	background-color: rgba(53, 56, 58, 0.67);
     *              	line-height: 6rem;
     *              }
     *      `]
     *  })
     *
     * ````
     *
     *  In above example we change how the chooser's menu item look like as well as we define custom
     *     template for selection item to turn all selection to circles with text in the middle.
     *
     *
     *
     */
    var /** @type {?} */ CHOOSER_CONTROL_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return ChooserComponent; }),
        multi: true
    };
    var ChooserComponent = (function (_super) {
        __extends(ChooserComponent, _super);
        function ChooserComponent(env, elemementRef, _defaultDS, parentContainer) {
            var _this = _super.call(this, env, parentContainer) || this;
            _this.env = env;
            _this.elemementRef = elemementRef;
            _this._defaultDS = _defaultDS;
            _this.parentContainer = parentContainer;
            /**
             * Max number of items return at single Match so we do not return 1000 items at single time.
             *
             */
            _this.maxLength = 10;
            /**
             * Max number of items return at single Match so we do not return 1000 items at single time.
             *
             */
            _this.minLenForSearch = 1;
            /**
             * Is this multiselect
             *
             */
            _this.multiselect = true;
            _this.delay = 300;
            /**
             * Event fired when user select a item
             */
            _this.onSelection = new core.EventEmitter();
            if (core$1.isBlank(_this.placeHolder)) {
                // this.placeHolder = i18n.instant('Widgets.chooser.placeHolder');
                // this.placeHolder = i18n.instant('Widgets.chooser.placeHolder');
                _this.placeHolder = 'Search';
            }
            // this.hideLink = i18n.instant('Widgets.chooser.hideSelection');
            // this.hideLink = i18n.instant('Widgets.chooser.hideSelection');
            _this.hideLink = 'Hide';
            return _this;
        }
        /**
         * @return {?}
         */
        ChooserComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                if (core$1.isBlank(this.dataSource)) {
                    this.dataSource = this._defaultDS;
                    this.initDatasource();
                }
                if (core$1.isPresent(this.formControl) && core$1.isPresent(this.formControl.value)) {
                    this.dataSource.updateValue(this.formControl.value);
                }
                this.initInternalModel();
                if (this.isStandalone) {
                    _super.prototype.registerFormControl.call(this, this.internalChooserModel);
                }
                else {
                    if (core$1.isPresent(this.name)) {
                        this.formControl = /** @type {?} */ (this.formGroup.controls[this.name]);
                    }
                }
            };
        /**
         * Add Search icon in case of multiselect.
         * todo: Once PrimeNG will provide a template to override default behavior remove it
         *
         */
        /**
         * Add Search icon in case of multiselect.
         * todo: Once PrimeNG will provide a template to override default behavior remove it
         *
         * @return {?}
         */
        ChooserComponent.prototype.ngAfterViewInit = /**
         * Add Search icon in case of multiselect.
         * todo: Once PrimeNG will provide a template to override default behavior remove it
         *
         * @return {?}
         */
            function () {
                if (!this.dataSource.state.multiselect) {
                    return;
                }
                var /** @type {?} */ searchInput = this.elemementRef.nativeElement.querySelector('.ui-autocomplete-input-token');
                if (core$1.isPresent(searchInput)) {
                    var /** @type {?} */ iconElement = document.createElement('span');
                    iconElement.className = 'search-icon-right fa fa-fw fa-search';
                    searchInput.appendChild(iconElement);
                }
                if (core$1.isPresent(this.selectionAppendTo) && core$1.isPresent(this.selectionViewElem)) {
                    var /** @type {?} */ parentElem = this.selectionAppendTo instanceof core.ElementRef ?
                        this.selectionAppendTo.nativeElement : this.selectionAppendTo;
                    parentElem.appendChild(this.selectionViewElem.nativeElement);
                }
            };
        /**
         * Need to change current behavior since we want to show selection under the chooser. K
         *
         */
        /**
         * Need to change current behavior since we want to show selection under the chooser. K
         *
         * @return {?}
         */
        ChooserComponent.prototype.ngAfterViewChecked = /**
         * Need to change current behavior since we want to show selection under the chooser. K
         *
         * @return {?}
         */
            function () {
                if (!this.dataSource.state.multiselect) {
                    return;
                }
                var /** @type {?} */ tokens = this.elemementRef.nativeElement.querySelectorAll('.ui-autocomplete .ui-autocomplete-token');
                if (core$1.isPresent(tokens) && tokens.length > 0) {
                    tokens.forEach(function (item) {
                        item.remove();
                    });
                }
            };
        /**
         *
         * When value is entered into search box, we ask our DataSource to match this pattern
         * against data repository. It will retrieve all possible matches limited by MaxLen and this
         * is again filtered so it does not include already selected items.
         *
         *  the matched resulted is saved in the: this.dataSource.state.matches
         */
        /**
         *
         * When value is entered into search box, we ask our DataSource to match this pattern
         * against data repository. It will retrieve all possible matches limited by MaxLen and this
         * is again filtered so it does not include already selected items.
         *
         *  the matched resulted is saved in the: this.dataSource.state.matches
         * @param {?} pattern
         * @return {?}
         */
        ChooserComponent.prototype.match = /**
         *
         * When value is entered into search box, we ask our DataSource to match this pattern
         * against data repository. It will retrieve all possible matches limited by MaxLen and this
         * is again filtered so it does not include already selected items.
         *
         *  the matched resulted is saved in the: this.dataSource.state.matches
         * @param {?} pattern
         * @return {?}
         */
            function (pattern) {
                var /** @type {?} */ maxLen = this.maxLength ? this.maxLength : ChooserDataSource.MaxLength;
                this.dataSource.find(pattern, maxLen);
                // fix: for tests: In version 4 we need to explicitly focus input otherwise autocomplete
                // doesn't give us any popup panel
                if (this.env.inTest && core$1.isPresent(this.autoCompleteComponent)) {
                    this.autoCompleteComponent.focusInput();
                }
            };
        /**
         *
         * Invoked by Dropdown button in case of single select and here we want to invoke match
         * to retrieve all suggestions without any filter
         *
         */
        /**
         *
         * Invoked by Dropdown button in case of single select and here we want to invoke match
         * to retrieve all suggestions without any filter
         *
         * @param {?} event
         * @return {?}
         */
        ChooserComponent.prototype.onDropdownClick = /**
         *
         * Invoked by Dropdown button in case of single select and here we want to invoke match
         * to retrieve all suggestions without any filter
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _this = this;
                this.match('*');
                setTimeout(function () {
                    _this.match('*');
                }, 100);
            };
        /**
         *
         * Chooser state is updated  with user selection. Please see writeValue. When do not need
         * call anything additional as internalChooserModel and this.chooserState.selectedObjects()
         * shares the same references so its important that we first save reference to
         * this.chooserState.selectedObjects() and then back to internalChooserModel
         *
         */
        /**
         *
         * Chooser state is updated  with user selection. Please see writeValue. When do not need
         * call anything additional as internalChooserModel and this.chooserState.selectedObjects()
         * shares the same references so its important that we first save reference to
         * this.chooserState.selectedObjects() and then back to internalChooserModel
         *
         * @param {?} item
         * @return {?}
         */
        ChooserComponent.prototype.selectItem = /**
         *
         * Chooser state is updated  with user selection. Please see writeValue. When do not need
         * call anything additional as internalChooserModel and this.chooserState.selectedObjects()
         * shares the same references so its important that we first save reference to
         * this.chooserState.selectedObjects() and then back to internalChooserModel
         *
         * @param {?} item
         * @return {?}
         */
            function (item) {
                this.onSelection.emit(this.internalChooserModel);
                this.formControl.setValue(this.internalChooserModel, { emitEvent: true });
                this.formControl.markAsDirty({ onlySelf: true });
                this.dataSource.state.addMode = true;
                this.onModelChanged(this.internalChooserModel);
                this.dataSource.state.updatedSelectedObjects(item);
                this.dataSource.state.addMode = true;
                if (!this.dataSource.state.multiselect) {
                    this.autoCompleteComponent.inputEL.nativeElement.value =
                        this.displayItem(this.internalChooserModel);
                }
            };
        /**
         *
         * Unselect item
         *
         */
        /**
         *
         * Unselect item
         *
         * @param {?} item
         * @return {?}
         */
        ChooserComponent.prototype.removeValue = /**
         *
         * Unselect item
         *
         * @param {?} item
         * @return {?}
         */
            function (item) {
                this.dataSource.state.addMode = true;
                this.dataSource.state.updatedSelectedObjects(item);
                this.dataSource.state.addMode = false;
                this.internalChooserModel = this.dataSource.state.selectedObjects();
                this.onSelection.emit(this.internalChooserModel);
                this.formControl.setValue(this.internalChooserModel, { emitEvent: true });
                this.formControl.markAsDirty({ onlySelf: true });
                this.onModelChanged(this.internalChooserModel);
                if (core$1.isPresent(this.autoCompleteComponent)) {
                    this.autoCompleteComponent.focusInput();
                }
            };
        /**
         *
         * Convert a object if any into the string representation
         *
         * todo: implement better way how to work with objects
         *
         */
        /**
         *
         * Convert a object if any into the string representation
         *
         * todo: implement better way how to work with objects
         *
         * @param {?} item
         * @return {?}
         */
        ChooserComponent.prototype.displayItem = /**
         *
         * Convert a object if any into the string representation
         *
         * todo: implement better way how to work with objects
         *
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (core$1.isBlank(item)) {
                    return null;
                }
                this.dataSource.state.currentItem = item;
                if (core$1.isPresent(this.valueTransformer)) {
                    return this.valueTransformer(item);
                }
                else if (core$1.isPresent(this.dataSource.lookupKey)) {
                    return item[this.dataSource.lookupKey];
                }
                else {
                    return item.toString();
                }
            };
        /**
         *
         * Returns a label that is shown under the selected item when user selection is >
         * MaxRecentSelected
         *
         */
        /**
         *
         * Returns a label that is shown under the selected item when user selection is >
         * MaxRecentSelected
         *
         * @return {?}
         */
        ChooserComponent.prototype.moreSelectString = /**
         *
         * Returns a label that is shown under the selected item when user selection is >
         * MaxRecentSelected
         *
         * @return {?}
         */
            function () {
                var /** @type {?} */ moreSelected = this.dataSource.state.selectedObjects().length -
                    this.dataSource.state.recentSelectedDisplayed;
                if (moreSelected < 2 && !this.dataSource.state.showAllRecentlySelected) {
                    return '';
                }
                if (this.dataSource.state.showAllRecentlySelected) {
                    return this.hideLink;
                }
                return moreSelected + " more selected...";
            };
        /**
         * In case of multiselect = false check if we want to show a selected value inside the input
         * field
         *
         */
        /**
         * In case of multiselect = false check if we want to show a selected value inside the input
         * field
         *
         * @return {?}
         */
        ChooserComponent.prototype.singleValueSelected = /**
         * In case of multiselect = false check if we want to show a selected value inside the input
         * field
         *
         * @return {?}
         */
            function () {
                return !this.dataSource.state && core$1.isPresent(this.dataSource.state.currentItem)
                    && !this.dataSource.state.addMode;
            };
        /**
         * @return {?}
         */
        ChooserComponent.prototype.hasMenuTemplate = /**
         * @return {?}
         */
            function () {
                return core$1.isPresent(this.menuTemplate);
            };
        /**
         * @return {?}
         */
        ChooserComponent.prototype.hasSelectionTemplate = /**
         * @return {?}
         */
            function () {
                return core$1.isPresent(this.selectionTemplate);
            };
        /**
         * Internal. Please see ControlValueAccessor
         * As we are using DataSource internally for [(ngModel)] case we need to deffer DataSource
         * initialization once we have a value and we only accept []
         *
         *
         * ? Should we do some deeper comparision?
         */
        /**
         * Internal. Please see ControlValueAccessor
         * As we are using DataSource internally for [(ngModel)] case we need to deffer DataSource
         * initialization once we have a value and we only accept []
         *
         *
         * ? Should we do some deeper comparision?
         * @param {?} value
         * @return {?}
         */
        ChooserComponent.prototype.writeValue = /**
         * Internal. Please see ControlValueAccessor
         * As we are using DataSource internally for [(ngModel)] case we need to deffer DataSource
         * initialization once we have a value and we only accept []
         *
         *
         * ? Should we do some deeper comparision?
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (core$1.isBlank(value)) {
                    return;
                }
                if (core$1.isPresent(this.dataSource)) {
                    this.dataSource.updateValue(value);
                }
                else {
                    var /** @type {?} */ selState = new DefaultSelectionState(this.multiselect);
                    var /** @type {?} */ chState = new ChooserState(selState, this.multiselect);
                    this.initDatasource(chState);
                    this.dataSource.updateValue(value);
                }
                this.initInternalModel();
            };
        /**
         * @param {?=} chooserState
         * @return {?}
         */
        ChooserComponent.prototype.initDatasource = /**
         * @param {?=} chooserState
         * @return {?}
         */
            function (chooserState) {
                core$1.assert(core$1.isPresent(this.destinationClass), 'You need to provide destinationClass or custom DataSource');
                this.dataSource.init({
                    obj: this.destinationClass,
                    queryType: QueryType.FullText,
                    lookupKey: this.field,
                    state: chooserState,
                    multiselect: this.multiselect
                });
            };
        /**
         *
         * Used by ngOnInit and Write value to read state from ChooserState and set it to internal
         * ngModel property
         *
         * @return {?}
         */
        ChooserComponent.prototype.initInternalModel = /**
         *
         * Used by ngOnInit and Write value to read state from ChooserState and set it to internal
         * ngModel property
         *
         * @return {?}
         */
            function () {
                if (this.dataSource.state.multiselect) {
                    this.internalChooserModel = this.dataSource.state.selectedObjects();
                }
                else {
                    this.internalChooserModel = this.dataSource.state.selectedObject();
                }
                if (core$1.isPresent(this.formControl)) {
                    this.formControl.setValue(this.internalChooserModel);
                }
            };
        ChooserComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-chooser',
                        template: "<div class=\"w-chooser \">\n\n    <p-autoComplete #autoCompplete [(ngModel)]=\"internalChooserModel\"\n                    [suggestions]=\"dataSource.state.matches\"\n                    [multiple]=\"dataSource.state.multiselect\"\n                    [dropdown]=\"!dataSource.state.multiselect\"\n                    [minLength]=\"minLenForSearch\"\n                    [placeholder]=\"placeHolder\"\n                    [delay]=\"delay\"\n                    [disabled]=\"disabled\"\n                    (onDropdownClick)=\"onDropdownClick($event)\"\n                    (completeMethod)=\"match($event.query)\"\n                    (onSelect)=\"selectItem($event)\"\n                    (onUnselect)=\"removeValue($event)\">\n\n\n        <ng-template let-internalChooserModel pTemplate=\"item\">\n            <ng-template [ngIf]=\"!hasMenuTemplate()\">\n                {{ displayItem(internalChooserModel) }}\n            </ng-template>\n            <ng-template [embeddedItem]=\"menuTemplate\" [item]=\"internalChooserModel\"\n                         *ngIf=\"hasMenuTemplate()\"></ng-template>\n        </ng-template>\n    </p-autoComplete>\n\n    <!--\n        Wrap whole selection with one extra element so we can move it around\n\n         see: selectionAppendTo\n    -->\n    <span #selectionView>\n        <div class=\"w-chooser-selections\"\n             *ngIf=\"multiselect && dataSource.state.recentSelectedObjects.length > 0\">\n\n        <ng-template [ngIf]=\"!hasSelectionTemplate()\">\n\n            <!-- no selection template render it as it is from CORE-->\n            <ul class=\"ui-autocomplete-multiple-container ui-widget ui-state-default \"\n                [ngClass]=\"{'ui-state-disabled':disabled,'ui-state-focus':autoCompleteComponent.focus}\">\n\n                <li #token *ngFor=\"let item of dataSource.state.recentSelectedObjects\"\n                    class=\"ui-autocomplete-token ui-state-highlight ui-corner-all\" tabindex=\"0\"\n                    (keyup.delete)=\"removeValue(item)\"\n                    (keyup.backspace)=\"removeValue(item)\">\n\t\t\t\t\t<span class=\"ui-autocomplete-token-icon sap-icon icon-decline\"\n                          (click)=\"removeValue(item)\"></span>\n                    <span class=\"ui-autocomplete-token-label\">{{ displayItem(item) }}</span>\n                </li>\n            </ul>\n        </ng-template>\n\n            <!--Yes there is selection template let's iterate and push each item to be rendered-->\n        <ng-template ngFor [ngForOf]=\"dataSource.state.recentSelectedObjects\" let-item>\n            <ng-template [embeddedItem]=\"selectionTemplate\" [item]=\"item\"\n                         *ngIf=\"hasSelectionTemplate()\"></ng-template>\n        </ng-template>\n\n        <ng-template [ngIf]=\"dataSource.showMoreSelected()\">\n\t\t\t<span class=\"more-selected\">\n\t\t\t\t<aw-hyperlink [size]=\"'small'\" (action)=\"dataSource.state.toggleAllSelected()\">\n\t\t\t\t\t{{moreSelectString()}}\n\t\t\t\t</aw-hyperlink>\n\t\t\t</span>\n        </ng-template>\n    </div>\n    </span>\n\n\n</div>\n\n",
                        styles: ["/deep/ .ui-fluid .ui-autocomplete.ui-autocomplete-dd .ui-autocomplete-input,/deep/ .ui-fluid .ui-autocomplete.ui-autocomplete-dd .ui-autocomplete-multiple-container{width:100%}/deep/ .w-chooser .ui-autocomplete-multiple{line-height:normal}/deep/ .w-chooser .ui-autocomplete-input{width:100%}/deep/ .w-chooser .ui-autocomplete-dropdown.ui-button{right:0;position:absolute;border:0;width:30px;background:0 0}/deep/ .w-chooser .ui-autocomplete-dropdown.ui-button .pi{font-family:\"SAP icon fonts\";color:#767676;cursor:pointer;font-size:1.4em;margin-left:-.85em}/deep/ .w-chooser .ui-autocomplete-dropdown.ui-button .pi-caret-down:before{content:'\\e1ef'}/deep/ .w-chooser .ui-autocomplete-dropdown.ui-button input{padding-right:30px}/deep/ .w-chooser .ui-autocomplete-input-token{padding:0;margin:0;vertical-align:baseline;width:inherit}/deep/ .w-chooser .ui-autocomplete-input-token .fa{font-family:\"SAP icon fonts\";color:#767676;cursor:pointer;font-size:1.2em}/deep/ .w-chooser .ui-autocomplete-input-token .fa-search:before{content:'\\e00d'}/deep/ .w-chooser .ui-autocomplete-input-token input{width:inherit;padding-right:25px}/deep/ .w-chooser .ui-autocomplete-input-token span{position:absolute;right:5px;top:0;padding-top:.6em}/deep/ .w-chooser .ui-autocomplete-dropdown{height:36px}/deep/ .w-chooser .ui-autocomplete-panel .ui-autocomplete-list-item{padding:.65em 2em .65em .64em;margin:0}/deep/ body .ui-autocomplete.ui-autocomplete-multiple .ui-autocomplete-multiple-container{padding:.4em .5em .4em 1em}.w-chooser-selections{margin-top:2px}.w-chooser-selections ul{margin:0;padding:0}.w-chooser-selections .ui-autocomplete-multiple-container{border:0}.w-chooser-selections .ui-autocomplete-multiple-container .ui-autocomplete-token{font-size:.85em;letter-spacing:.1px;font-weight:400;padding:0;background:#e0f2ff;margin-right:5px;margin-bottom:5px}.w-chooser-selections .ui-autocomplete-multiple-container .ui-autocomplete-token-label{padding:4px 21px 4px 5px}.w-chooser-selections .ui-autocomplete-multiple-container .ui-autocomplete-token-icon{font-size:.78em;padding-right:.28em}.w-chooser-selections .ui-autocomplete-multiple-container .sap-icon{line-height:inherit}.w-chooser-selections .more-selected{display:inline-block}"],
                        providers: [
                            CHOOSER_CONTROL_VALUE_ACCESSOR,
                            { provide: BaseFormComponent, useExisting: core.forwardRef(function () { return ChooserComponent; }) },
                            { provide: DATA_SOURCE, useClass: ChooserDataSource, deps: [DataProviders, DataFinders] }
                        ]
                    },] },
        ];
        /** @nocollapse */
        ChooserComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: core.ElementRef },
                { type: ChooserDataSource, decorators: [{ type: core.Inject, args: [DATA_SOURCE,] }] },
                { type: BaseFormComponent, decorators: [{ type: core.SkipSelf }, { type: core.Optional }, { type: core.Inject, args: [core.forwardRef(function () { return BaseFormComponent; }),] }] }
            ];
        };
        ChooserComponent.propDecorators = {
            maxLength: [{ type: core.Input }],
            minLenForSearch: [{ type: core.Input }],
            valueTransformer: [{ type: core.Input }],
            multiselect: [{ type: core.Input }],
            dataSource: [{ type: core.Input }],
            selectionAppendTo: [{ type: core.Input }],
            delay: [{ type: core.Input }],
            destinationClass: [{ type: core.Input }],
            field: [{ type: core.Input }],
            onSelection: [{ type: core.Output }],
            menuTemplate: [{ type: core.ContentChild, args: ['menuItem',] }],
            selectionTemplate: [{ type: core.ContentChild, args: ['selectionItem',] }],
            autoCompleteComponent: [{ type: core.ViewChild, args: ['autoCompplete',] }],
            selectionViewElem: [{ type: core.ViewChild, args: ['selectionView',] }]
        };
        return ChooserComponent;
    }(BaseFormComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWChooserModule = (function () {
        function AWChooserModule() {
        }
        AWChooserModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            ChooserComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            primeng.AutoCompleteModule,
                            AWHyperlinkModule,
                            AWCoreComponentModule
                        ],
                        entryComponents: [
                            ChooserComponent
                        ],
                        exports: [
                            ChooserComponent,
                            forms.ReactiveFormsModule,
                            forms.FormsModule
                        ],
                        providers: []
                    },] },
        ];
        return AWChooserModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * A popup like component rendering list of values as. Based on PrimeNG component and one of the
     * main reason why we need to wrap this is to extend its capabilities to accept almost any
     * data type without using Primens's specific SelectItem type.
     *
     *
     * ### Example
     *
     * ```
     * \@Component({
     *      selector: 'showDropDown' ,
     *      template: '<aw-dropdown [list]="testItemSmall"
     *     (onSelection)="onSelection($event)"></aw-dropdown>'
     *  })
     *  export class MyDropComponent
     *  {
     *      testItemSmall: string[] = ['view' , 'edit'];
     *
     *      // when you switch list binding to refert to large item fiilter automatically is shown and
     *     max 10 items are
     *      // visible
     *      testItemLarge: string[] = ['view' , 'edit' , 'frank' , 'kolar' , 'The Sun' , 'Dog' ,
     *     'Computer' , 'A Desk' ,
     *      'My Car' , 'Pencil' , 'This Page' , 'Yesterday' , 'Monday' , 'Tuesday' , 'BMW R1200 GS' ,
     *     'Czech Republic' ,
     *      'Last Item'];
     *
     *
     *      itemSelected: string = 'view';
     *      itemSelectedLg: string = 'Monday';
     *
     *      noselString: string = '(no selection)';
     *
     *
     *      onSelection (event): void
     *      {
     *          this.itemSelected = event;
     *
     *      }
     *  }
     *
     *  ```
     *
     */
    var /** @type {?} */ DD_CONTROL_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return DropdownComponent; }),
        multi: true
    };
    var DropdownComponent = (function (_super) {
        __extends(DropdownComponent, _super);
        function DropdownComponent(env, parentContainer) {
            var _this = _super.call(this, env, parentContainer) || this;
            _this.env = env;
            _this.parentContainer = parentContainer;
            /**
             * Event fired when user select a item
             */
            _this.onSelection = new core.EventEmitter();
            return _this;
        }
        /**
         * Todo: Put back the scrolling option once we decide so. Currently the requirements are
         * show only 10 items max, no scrolling. Functionality commented out can show scrollbar with
         * search filter.
         */
        /**
         * Todo: Put back the scrolling option once we decide so. Currently the requirements are
         * show only 10 items max, no scrolling. Functionality commented out can show scrollbar with
         * search filter.
         * @return {?}
         */
        DropdownComponent.prototype.ngOnInit = /**
         * Todo: Put back the scrolling option once we decide so. Currently the requirements are
         * show only 10 items max, no scrolling. Functionality commented out can show scrollbar with
         * search filter.
         * @return {?}
         */
            function () {
                if (this.isStandalone) {
                    _super.prototype.ngOnInit.call(this);
                    _super.prototype.registerFormControl.call(this, this.selection);
                }
                else {
                    if (core$1.isPresent(this.name)) {
                        this.formControl = /** @type {?} */ (this.formGroup.controls[this.name]);
                    }
                }
                // transform a value to PrimeNg Format, we are not really be using a label field only a
                // value.
                this.internalList = [];
                // if (isPresent(this.noSelectionString)) {
                //     this.internalList.push({
                //         label: this.noSelectionString,
                //         value: null
                //     });
                //
                //     if (isBlank(this.selection)) {
                //         this.selection = this.noSelectionString;
                //     }
                // }
                if (core$1.isPresent(this.list) && this.list.length >= DropdownComponent.MaxNumShown) {
                    this.internalList = this.list.slice(0, DropdownComponent.MaxNumShown).map(function (item) {
                        return { label: item.toString(), value: item };
                    });
                }
                else if (core$1.isPresent(this.list)) {
                    this.internalList = this.list.slice(0).map(function (item) {
                        return { label: item.toString(), value: item };
                    });
                }
            };
        /**
         * @return {?}
         */
        DropdownComponent.prototype.hasEmbeddedTemplate = /**
         * @return {?}
         */
            function () {
                return core$1.isPresent(this.itemTemplate);
            };
        /**
         * Check to prevent Empty item to be rendered
         *
         * todo: Report this on PrimeNg
         *
         */
        /**
         * Check to prevent Empty item to be rendered
         *
         * todo: Report this on PrimeNg
         *
         * @param {?} item
         * @return {?}
         */
        DropdownComponent.prototype.itemExist = /**
         * Check to prevent Empty item to be rendered
         *
         * todo: Report this on PrimeNg
         *
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return core$1.isPresent(item);
            };
        /**
         * When dropdown list is more then defined constant MaxNumShown (10) automatically show filter
         * input field
         */
        /**
         * When dropdown list is more then defined constant MaxNumShown (10) automatically show filter
         * input field
         * @return {?}
         */
        DropdownComponent.prototype.showFilter = /**
         * When dropdown list is more then defined constant MaxNumShown (10) automatically show filter
         * input field
         * @return {?}
         */
            function () {
                return false;
                // return isPresent(this.list) && this.list.length > DropdownComponent.MaxNumShown;
            };
        /**
         *
         * Updates internal models of current selections and triggers onSelection event
         *
         */
        /**
         *
         * Updates internal models of current selections and triggers onSelection event
         *
         * @param {?} value
         * @return {?}
         */
        DropdownComponent.prototype.onItemSelection = /**
         *
         * Updates internal models of current selections and triggers onSelection event
         *
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.selection = value.value;
                this.onSelection.emit(value.value);
                if (this.isStandalone) {
                    this.formControl.setValue(this.selection);
                    this.formControl.markAsDirty({ onlySelf: true });
                }
                this.onModelChanged(value.value);
            };
        /**
         * @param {?} item
         * @return {?}
         */
        DropdownComponent.prototype.displayItem = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return core$1.isPresent(item) ? item.label : 'No Selection';
            };
        /**
         * Internal. Please see ControlValueAccessor
         *
         */
        /**
         * Internal. Please see ControlValueAccessor
         *
         * @param {?} value
         * @return {?}
         */
        DropdownComponent.prototype.writeValue = /**
         * Internal. Please see ControlValueAccessor
         *
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (!core$1.equals(value, this.selection)) {
                    this.selection = value;
                    this.formControl.setValue(value);
                }
            };
        DropdownComponent.MaxNumShown = 10;
        DropdownComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-dropdown',
                        template: "<div class=\"w-dropdown\" [formGroup]=\"formGroup\">\n\n    <ng-template [ngIf]=\"isStandalone\">\n        <p-dropdown [options]=\"internalList\"\n                    [formControlName]=\"name\"\n                    [placeholder]=\"noSelectionString\"\n                    [autoWidth]=\"false\"\n                    [filter]=\"showFilter()\"\n                    (onChange)=\"onItemSelection($event)\">\n\n            <ng-template let-item pTemplate=\"item\">\n                <ng-template [ngIf]=\"!hasEmbeddedTemplate() && itemExist(item)\">\n                    {{item.label }}\n                </ng-template>\n\n                <ng-template [embeddedItem]=\"itemTemplate\" [item]=\"item\"\n                             *ngIf=\"hasEmbeddedTemplate() && itemExist(item)\">\n\n                </ng-template>\n            </ng-template>\n\n\n        </p-dropdown>\n    </ng-template>\n</div>\n\n\n<!-- no formControl Name here. ngModel cannot have formGroup around -->\n<ng-template [ngIf]=\"!isStandalone\">\n    <div class=\"w-dropdown\">\n        <p-dropdown [options]=\"internalList\"\n                    [(ngModel)]=\"selection\"\n                    [placeholder]=\"noSelectionString\"\n                    [autoWidth]=\"false\"\n                    [filter]=\"showFilter()\"\n                    (onChange)=\"onItemSelection($event)\">\n\n            <ng-template let-item pTemplate=\"item\">\n\n                <ng-template [ngIf]=\"!hasEmbeddedTemplate() && itemExist(item)\">\n                    {{item.label }}\n                </ng-template>\n                <ng-template [embeddedItem]=\"itemTemplate\" [item]=\"item\"\n                             *ngIf=\"hasEmbeddedTemplate() && itemExist(item)\">\n                </ng-template>\n            </ng-template>\n        </p-dropdown>\n    </div>\n</ng-template>\n",
                        styles: ["/deep/ .ui-dropdown-panel .ui-dropdown-items-wrapper{max-height:none!important}/deep/ .ui-dropdown-panel .ui-dropdown-item{padding:.65em 2em .65em .64em;margin:0}/deep/ .ui-dropdown-panel .ui-dropdown-filter-container{width:100%}/deep/ .ui-dropdown-panel .ui-dropdown-filter-container .fa{top:1.2em}/deep/ .ui-dropdown-panel .ui-dropdown-list{padding:1em 0}/deep/ .w-dropdown:not(.ng-dirty) label{color:#969696}/deep/ .w-dropdown .ui-dropdown-trigger.ui-corner-right{border-left:none;color:#969696}/deep/ .w-dropdown .ui-dropdown-trigger .pi{font-family:\"SAP icon fonts\";color:#767676;cursor:pointer;font-size:1.4em;margin-left:-.85em}/deep/ .w-dropdown .ui-dropdown-trigger .pi-caret-down:before{content:'\\e1ef'}/deep/ .w-dropdown .ui-dropdown-label{padding-right:2.4em}"],
                        providers: [
                            DD_CONTROL_VALUE_ACCESSOR,
                            { provide: BaseFormComponent, useExisting: core.forwardRef(function () { return DropdownComponent; }) }
                        ]
                    },] },
        ];
        /** @nocollapse */
        DropdownComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: BaseFormComponent, decorators: [{ type: core.SkipSelf }, { type: core.Optional }, { type: core.Inject, args: [core.forwardRef(function () { return BaseFormComponent; }),] }] }
            ];
        };
        DropdownComponent.propDecorators = {
            list: [{ type: core.Input }],
            selection: [{ type: core.Input }],
            noSelectionString: [{ type: core.Input }],
            onSelection: [{ type: core.Output }],
            itemTemplate: [{ type: core.ContentChild, args: ['itemTemplate',] }]
        };
        return DropdownComponent;
    }(BaseFormComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWDropdownModule = (function () {
        function AWDropdownModule() {
        }
        AWDropdownModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            DropdownComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            primeng.DropdownModule,
                            AWCoreComponentModule
                        ],
                        entryComponents: [
                            DropdownComponent
                        ],
                        exports: [
                            DropdownComponent,
                            forms.ReactiveFormsModule,
                            forms.FormsModule
                        ],
                        providers: []
                    },] },
        ];
        return AWDropdownModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Lightweight and configurable Currency component based on the ng bootstrap directive. This
     * component combines an input and currency code dropdown.
     *
     *
     * for more info please see class Doc of the:
     * @see {\@link currency/currency.component.ts}
     *
     *  ### Example
     *  ```
     *
     * \@Component({
     *    selector: 'amount' ,
     *    template: `
     *
     *      <aw-currency [money]="price" [currencies]="currencies" [name]="'currency'">
     *      </aw-currency>
     *
     *    `
     *    })
     *    export class MyComponent
     *    {
     *        amount: number = 1000;
     *        currencies: string[] = ['USD', 'CNY', 'AUD', 'EUR', 'GBP'];
     *        currencyCode: string = this.currencies[0];
     *
     *        constructor ()
     *        {
     *        }
     *    }
     */
    var /** @type {?} */ CURRENCY_CONTROL_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return CurrencyComponent; }),
        multi: true
    };
    var CurrencyComponent = (function (_super) {
        __extends(CurrencyComponent, _super);
        function CurrencyComponent(env, parentContainer) {
            var _this = _super.call(this, env, parentContainer) || this;
            _this.env = env;
            _this.parentContainer = parentContainer;
            /**
             * Disable user to change Money's currency code and still
             * allow user to edit Money's amount.
             */
            _this.readonlyCurrencyCode = false;
            // Initialize currencies.
            // Initialize currencies.
            _this.initCurrencies();
            _this.currencyPipe = new common.CurrencyPipe(env.locale);
            env.onLocaleChange.subscribe(function (locale) {
                _this.currencyPipe = new common.CurrencyPipe(locale);
                if (core$1.isPresent(_this.money)) {
                    _this.displayValue = _this.formatCurrency(_this.money.amount);
                }
            });
            return _this;
        }
        /**
         * @return {?}
         */
        CurrencyComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                _super.prototype.registerFormControl.call(this, this.money);
                this.initCurrencies();
                if (core$1.isBlank(this.currencySelection)) {
                    this.currencySelection = this._currencies[0];
                }
                // ready the money field if it exists. and override the existing values.
                if (this.money) {
                    this.currencySelection = this.money.currency;
                }
                else {
                    this.money = new Money(null, this.currencySelection);
                }
                this.displayValue = this.formatCurrency(this.money.amount);
            };
        /**
         * @return {?}
         */
        CurrencyComponent.prototype.initCurrencies = /**
         * @return {?}
         */
            function () {
                if (!this._currencies || this._currencies.length === 0) {
                    this._currencies = ['USD', 'CNY', 'AUD', 'EUR', 'GBP'];
                }
            };
        /**
         * Display the real value when the user clicks in the currency widget. Then he can modify the
         * value without seeing the formatting.
         *
         * @param el
         */
        /**
         * Display the real value when the user clicks in the currency widget. Then he can modify the
         * value without seeing the formatting.
         *
         * @param {?} el
         * @return {?}
         */
        CurrencyComponent.prototype.onFocus = /**
         * Display the real value when the user clicks in the currency widget. Then he can modify the
         * value without seeing the formatting.
         *
         * @param {?} el
         * @return {?}
         */
            function (el) {
                if (core$1.isPresent(this.money) && core$1.isPresent(this.money.amount)) {
                    this.displayValue = this.money.amount.toString();
                }
            };
        /**
         * display the formatted currency value when the user navigates away.
         * @param el
         */
        /**
         * display the formatted currency value when the user navigates away.
         * @param {?} el
         * @return {?}
         */
        CurrencyComponent.prototype.onBlur = /**
         * display the formatted currency value when the user navigates away.
         * @param {?} el
         * @return {?}
         */
            function (el) {
                this.money = this.money.clone({ amount: Number(el.value) });
                this.displayValue = this.formatCurrency(this.money.amount);
                this.onModelChanged(this.money);
            };
        /**
         * @param {?} currency
         * @return {?}
         */
        CurrencyComponent.prototype.onSelection = /**
         * @param {?} currency
         * @return {?}
         */
            function (currency) {
                this.currencySelection = currency;
                this.displayValue = this.formatCurrency(this.money.amount);
            };
        /**
         * Function will check to see if currency is a valid number before formatting.
         * @param {?} val
         * @return {?}
         */
        CurrencyComponent.prototype.formatCurrency = /**
         * Function will check to see if currency is a valid number before formatting.
         * @param {?} val
         * @return {?}
         */
            function (val) {
                if (!val || val.length === 0) {
                    return val;
                }
                if (isNaN(val)) {
                    return val;
                }
                var /** @type {?} */ code = 'USD';
                if (this.currencySelection) {
                    code = this.currencySelection;
                }
                this.money = this.money.clone({ currency: this.currencySelection });
                // By default, the precision is 2. For example, 10.23 USD.
                var /** @type {?} */ digits = '1.0-2';
                // If precision is present, use it for format the money value for display.
                if (core$1.isPresent(this.precision)) {
                    digits = '1.0-' + this.precision;
                }
                return this.currencyPipe.transform(val, code, 'symbol', digits);
            };
        /**
         * @return {?}
         */
        CurrencyComponent.prototype.getMoneyCurrency = /**
         * @return {?}
         */
            function () {
                if (core$1.isPresent(this.displayValue) && this.displayValue.length > 0) {
                    return this.currencySelection;
                }
                return '';
            };
        Object.defineProperty(CurrencyComponent.prototype, "currencies", {
            get: /**
             * @return {?}
             */ function () {
                return this._currencies;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (core$1.isPresent(value)) {
                    this._currencies = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Internal. Please see ControlValueAccessor
         *
         */
        /**
         * Internal. Please see ControlValueAccessor
         *
         * @param {?} value
         * @return {?}
         */
        CurrencyComponent.prototype.writeValue = /**
         * Internal. Please see ControlValueAccessor
         *
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if ((value instanceof Money) && !core$1.equals(value, this.money)) {
                    this.money = value;
                    if (core$1.isPresent(this.money.currency)) {
                        this.currencySelection = this.money.currency;
                    }
                    this.displayValue = this.formatCurrency(this.money.amount);
                    this.formControl.setValue(this.money);
                }
            };
        CurrencyComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-currency',
                        template: "<ng-template [ngIf]=\"editable\">\n    <div class=\"w-currency-field ui-fluid\" [formGroup]=\"formGroup\">\n        <div class=\"ui-g \">\n            <div class=\"ui-g-8 ui-g-nopad \">\n                <input #currencyInput\n                       pInputText\n                       type=\"text\" class=\"w-text-field currency-format\"\n                       [attr.name]=\"name\"\n                       [attr.placeholder]=\"placeHolder\"\n                       [value]=\"displayValue\"\n                       (focus)=\"onFocus(currencyInput)\"\n                       (blur)=\"onBlur(currencyInput)\"\n                       [disabled]=\"disabled\">\n            </div>\n            <div class=\"ui-g-4 ui-g-nopad w-cc-field\">\n                <aw-dropdown *ngIf=\"!readonlyCurrencyCode\"\n                             [isStandalone]=\"false\" [list]=\"currencies\"\n                             [selection]=\"money.currency\"\n                             (onSelection)=\"onSelection($event)\"\n                             [disabled]=\"disabled\">\n\n                </aw-dropdown>\n                <div *ngIf=\"readonlyCurrencyCode\" class=\"w-cc-readonly-field\">{{money.currency}}</div>\n            </div>\n        </div>\n    </div>\n</ng-template>\n\n<!-- currency:'USD':true -->\n\n<ng-template [ngIf]=\"!editable\">\n    <aw-string value=\"{{displayValue}} {{ getMoneyCurrency() }}\"></aw-string>\n</ng-template>\n",
                        styles: [".w-currency-field [readonly],.w-currency-type-field [readonly]{background-color:#fff}.w-currency-field input,.w-currency-type-field input{min-width:80px}.w-currency-field i.fa,.w-currency-type-field i.fa{cursor:pointer}.w-currency-field{margin-top:0}.w-currency-field /deep/ .ui-dropdown{min-width:80px}.w-cc-field{display:flex;align-items:center}.w-cc-readonly-field{padding-left:5px;color:#969696}.no-gutter>[class*=ui-g-]{padding-right:0;padding-left:0}"],
                        providers: [
                            CURRENCY_CONTROL_VALUE_ACCESSOR,
                            { provide: BaseFormComponent, useExisting: core.forwardRef(function () { return CurrencyComponent; }) }
                        ]
                    },] },
        ];
        /** @nocollapse */
        CurrencyComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: BaseFormComponent, decorators: [{ type: core.SkipSelf }, { type: core.Optional }, { type: core.Inject, args: [core.forwardRef(function () { return FormRowComponent; }),] }] }
            ];
        };
        CurrencyComponent.propDecorators = {
            money: [{ type: core.Input }],
            readonlyCurrencyCode: [{ type: core.Input }],
            currencySelection: [{ type: core.Input }],
            precision: [{ type: core.Input }],
            currencies: [{ type: core.Input }]
        };
        return CurrencyComponent;
    }(BaseFormComponent));
    /**
     * Money object is represented as a value, locale, and currencyCode
     */
    var /**
     * Money object is represented as a value, locale, and currencyCode
     */ Money = (function () {
        function Money(amount, currency, locale) {
            if (amount === void 0) {
                amount = 0;
            }
            if (currency === void 0) {
                currency = 'USD';
            }
            if (locale === void 0) {
                locale = 'en_US';
            }
            this.amount = amount;
            this.currency = currency;
            this.locale = locale;
        }
        /**
         * @return {?}
         */
        Money.prototype.getTypes = /**
         * @return {?}
         */
            function () {
                return {
                    amount: Number,
                    currency: String,
                    locale: String
                };
            };
        /**
         * @return {?}
         */
        Money.prototype.className = /**
         * @return {?}
         */
            function () {
                return 'Money';
            };
        /**
         * @return {?}
         */
        Money.prototype.$proto = /**
         * @return {?}
         */
            function () {
                return new Money(1, '23', '33');
            };
        /**
         * @return {?}
         */
        Money.prototype.toString = /**
         * @return {?}
         */
            function () {
                return this.amount + ', locale: ' + this.locale + ', code:  ' + this.currency;
            };
        /**
         * @param {?=} data
         * @return {?}
         */
        Money.prototype.clone = /**
         * @param {?=} data
         * @return {?}
         */
            function (data) {
                if (data === void 0) {
                    data = {};
                }
                return new Money(core$1.isPresent(data.amount) ? data.amount : this.amount, core$1.isPresent(data.currency) ? data.currency : this.currency, core$1.isPresent(data.locale) ? data.locale : this.locale);
            };
        return Money;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWCurrencyModule = (function () {
        function AWCurrencyModule() {
        }
        AWCurrencyModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            CurrencyComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            primeng.InputTextModule,
                            primeng.DropdownModule,
                            AWDropdownModule,
                            AWStringFieldModule,
                            AWCoreComponentModule
                        ],
                        entryComponents: [
                            CurrencyComponent
                        ],
                        exports: [
                            CurrencyComponent,
                            forms.ReactiveFormsModule,
                            forms.FormsModule
                        ],
                        providers: [common.CurrencyPipe]
                    },] },
        ];
        return AWCurrencyModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Lightweight and configurable Date and Time component based on the primeng. This
     * component combines both date picker as well as time picker
     *
     *
     *  ### Example
     *  ```
     *
     * \@Component({
     *    selector: 'myTimer' ,
     *    template: `
     *    <aw-date-time [value]="date" [editable]="editable"  [name]="'dueDate'">
     *    </aw-date-time>
     *
     *    `
     *    })
     *    export class MyTimmerComponet
     *    {
     *
     *        date: Date = new Date();
     *
     *
     *        constructor ()
     *        {
     *            this.date.setFullYear(2016 , 10 , 3);
     *            this.date.setHours(10 , 10 , 10);
     *        }
     *    }
     *
     * ```
     *
     * By default you will see date field and time field is hidden to show both you just do following:
     *
     *  ```
     *
     * \@Component({
     *    selector: 'myTimer' ,
     *    template: `
     *
     *    <aw-date-time [value]="date"  [showTime]="showTime" [editable]="editable"  [name]="'bbdd'">
     *    </aw-date-time>
     *
     *    `
     *    })
     *    export class MyTimmerComponet
     *    {
     *        date: Date = new Date();
     *        showTime = true;
     *
     *        constructor ()
     *        {
     *            this.date.setFullYear(2016 , 10 , 3);
     *            this.date.setHours(10 , 10 , 10);
     *        }
     *    }
     *
     * ```
     *
     *
     *
     */
    var /** @type {?} */ DATETIME_CONTROL_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return DateAndTimeComponent; }),
        multi: true
    };
    var DateAndTimeComponent = (function (_super) {
        __extends(DateAndTimeComponent, _super);
        function DateAndTimeComponent(env, parentContainer) {
            var _this = _super.call(this, env, parentContainer) || this;
            _this.env = env;
            _this.parentContainer = parentContainer;
            /**
             * Default date format pattern used if none is passed
             *
             */
            _this.formatPattern = 'mm/dd/yy';
            /**
             * Special workaround as formatters in the primeNG and angular are different so until its
             * fixed we need to keep this extra pattern.
             */
            _this.formatPatternNG = 'MM/dd/yy';
            /**
             * Shows and hides navigation bar with year and months selections
             */
            _this.showNavigation = false;
            /**
             * Shows and hides navigation bar with year and months selections
             */
            _this.showIcon = true;
            /**
             * Whether to show timepicker
             */
            _this.showTime = false;
            /**
             * Whether to show DatePicker. Even we can hide it. it should be for most of the case always
             * true
             */
            _this.showDate = true;
            /**
             *
             * Tells the date picker what format it should use when presenting time. When hourFormat is 12,
             * it shows the AM, PM
             *
             */
            _this.hourFormat = '24';
            /**
             * Triggers event when specific date is clicked inside DatePicker
             *
             */
            _this.onChange = new core.EventEmitter();
            /**
             * Set the date to highlight on first opening if the field is blank.
             *
             */
            _this.defaultDate = new Date();
            _this.timePlaceHolder = 'hh:ss';
            return _this;
        }
        /**
         * @return {?}
         */
        DateAndTimeComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                _super.prototype.ngOnInit.call(this);
                _super.prototype.registerFormControl.call(this, this.value);
                // default to dateTime pattern which is defined in resource files
                if (this.hourFormat !== '12' && this.hourFormat !== '24') {
                    this.hourFormat = '24';
                }
                this.timePlaceHolder = (this.hourFormat === '12') ?
                    " " + DateAndTimeComponent.NgTime12 : " " + DateAndTimeComponent.NgTime24;
                this.formControl.valueChanges.pipe(operators.distinctUntilChanged()).subscribe(function (val) {
                    _this.value = val;
                    _this.onModelChanged(_this.value);
                });
                this.initTranslations();
                this.env.onLocaleChange.subscribe(function (locale) {
                    _this.initTranslations();
                });
            };
        /**
         * Need to refactor this as this really get complicated trying to cover usecase with time
         * and date and every format we have. We should probably have separate patterns for
         * dates only and date + time
         * @return {?}
         */
        DateAndTimeComponent.prototype.initTranslations = /**
         * Need to refactor this as this really get complicated trying to cover usecase with time
         * and date and every format we have. We should probably have separate patterns for
         * dates only and date + time
         * @return {?}
         */
            function () {
                this.formatNameWithTime = this.formatPattern;
                if (!this.showDate) {
                    this.formatPatternNG = this.formatPattern += (this.hourFormat === '12') ?
                        " " + DateAndTimeComponent.NgTime12 : " " + DateAndTimeComponent.NgTime24;
                }
                if (this.showTime) {
                    var /** @type {?} */ timeStarts = this.formatPattern.indexOf('h');
                    if (timeStarts !== -1) {
                        this.formatNameWithTime = this.formatPattern.substring(0, timeStarts);
                    }
                    this.formatPatternNG += (this.hourFormat === '12') ?
                        " " + DateAndTimeComponent.NgTime12 : " " + DateAndTimeComponent.NgTime24;
                }
                this.i18n = {
                    firstDayOfWeek: 0,
                    dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday',
                        'Saturday'],
                    dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
                    dayNamesMin: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
                    monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',
                        'September', 'October', 'November', 'December'],
                    monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct',
                        'Nov', 'Dec']
                };
            };
        /**
         * Fired when dates changes. Here we update  this.value - > date and also update value inside
         * formController
         *
         */
        /**
         * Fired when dates changes. Here we update  this.value - > date and also update value inside
         * formController
         *
         * @param {?} event
         * @return {?}
         */
        DateAndTimeComponent.prototype.onDateChange = /**
         * Fired when dates changes. Here we update  this.value - > date and also update value inside
         * formController
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (core$1.isBlank(event)) {
                    // throw some error ?
                    return;
                }
                this.value = core$1.isDate(event) ? event : new Date(event);
                this.formControl.setValue(this.value, { onlySelf: false, emitEvent: true });
                this.onModelChanged(this.value);
                this.onChange.emit(this.value);
            };
        /**
         * Internal. Please see ControlValueAccessor
         *
         */
        /**
         * Internal. Please see ControlValueAccessor
         *
         * @param {?} value
         * @return {?}
         */
        DateAndTimeComponent.prototype.writeValue = /**
         * Internal. Please see ControlValueAccessor
         *
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value !== this.value) {
                    this.value = value;
                    this.formControl.setValue(value);
                }
            };
        DateAndTimeComponent.NgTime12 = 'hh:mm a';
        DateAndTimeComponent.NgTime24 = 'HH.mm a';
        DateAndTimeComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-date-time',
                        template: "<ng-template [ngIf]=\"editable\">\n\n    <div class=\"w-datetime \" [class.has-time]=\"showTime\" [formGroup]=\"formGroup\">\n\n        <p-calendar formControlName=\"{{name}}\"\n                    [defaultDate]=\"defaultDate\"\n                    [showIcon]=\"showIcon\"\n                    dateFormat=\"{{showTime ? formatNameWithTime : formatPattern}}\"\n                    [yearNavigator]=\"showNavigation\"\n                    [monthNavigator]=\"showNavigation\"\n                    [yearRange]=\"yearRange\"\n                    placeholder=\"{{showTime ? formatNameWithTime.toUpperCase() : formatPattern.toUpperCase()}}\"\n                    (onSelect)=\"onDateChange($event)\"\n                    [timeOnly]=\"!showDate\"\n                    [readonlyInput]=\"true\"\n                    [locale]=\"i18n\">\n        </p-calendar>\n\n        <p-calendar *ngIf=\"showTime\"\n                    icon=\"icon-history\"\n                    formControlName=\"{{name}}\"\n                    [hourFormat]=\"hourFormat\"\n                    [defaultDate]=\"defaultDate\"\n                    [showIcon]=\"showIcon\"\n                    [timeOnly]=\"showTime\"\n                    [showTime]=\"showTime\"\n                    [placeholder]=\"timePlaceHolder\"\n                    (onSelect)=\"onDateChange($event)\"\n                    [locale]=\"i18n\">\n        </p-calendar>\n\n    </div>\n</ng-template>\n\n<ng-template [ngIf]=\"!editable\">\n    <aw-string value=\"{{value | date: formatPatternNG}}\"></aw-string>\n</ng-template>\n",
                        styles: ["/deep/ .w-datetime .ui-calendar button{border:0;width:0}/deep/ .w-datetime .ui-calendar.ui-calendar-w-btn .ui-inputtext{width:100%}/deep/ .ui-calendar .ui-calendar-button .ui-button-icon-left{font-family:\"SAP icon fonts\";color:#199de0;cursor:pointer;font-size:1.4em}/deep/ .ui-calendar .ui-calendar-button .ui-button-icon-left.pi-calendar:before{content:'\\e0e0'}/deep/ .ui-calendar .ui-calendar-button .ui-button-icon-left.icon-history:before{content:'\\e02d'}/deep/ .ui-datepicker{width:24.28em;line-height:25px;padding:0;border-color:#979797;box-shadow:none}/deep/ .ui-datepicker .ui-datepicker-header{padding:.92em 0;font-weight:400;color:#000;font-size:1em}/deep/ .ui-datepicker .ui-datepicker-next,/deep/ .ui-datepicker .ui-datepicker-prev{top:1em}/deep/ .ui-datepicker .ui-datepicker-prev{left:.2em}/deep/ .ui-datepicker .ui-datepicker-next{right:.2em}/deep/ .ui-datepicker table{font-size:1em;margin:0 0 1.5em}/deep/ .ui-datepicker th{font-weight:400;background-color:#ececec;color:#363636;padding:.786em 1.07em}/deep/ .ui-datepicker td{padding:.1em}/deep/ .ui-datepicker td a{text-align:center;width:2.7em;height:2.7em;line-height:2.7em;padding:0;border-radius:50%}/deep/ .ui-datepicker td a.ui-state-default{border-color:transparent}/deep/ .ui-datepicker td a.ui-state-active{background-color:#199de0;color:#fff}/deep/ .ui-datepicker .pi{font-size:1em}/deep/ .ui-datepicker .pi.pi-chevron-left:before{content:'\\e1ee'}/deep/ .ui-datepicker .pi.pi-chevron-right:before{content:'\\e1ed'}/deep/ .ui-datepicker .ui-datepicker-calendar td:not(.ui-state-disabled) a:hover{border-color:transparent;background-color:rgba(25,157,224,.7);opacity:.75;color:#363636}/deep/ .ui-datepicker-timeonly{width:100%}/deep/ .ui-timepicker{font-size:1.14em;color:#767676;font-weight:400}/deep/ .ui-timepicker .pi{font-size:1em}/deep/ .ui-timepicker .pi.pi-chevron-up:before{content:'\\e1f0'}/deep/ .ui-timepicker .pi.pi-chevron-down:before{content:'\\e1ef'}/deep/ .ui-timepicker>div{margin-left:0}/deep/ .ui-timepicker .ui-separator{width:.1em;min-width:.1em}/deep/ .ui-timepicker .ui-separator .pi{font-size:0}/deep/ .ui-datepicker-trigger{background-color:transparent}/deep/ .ui-datepicker-trigger.ui-button:enabled:hover,/deep/ .ui-datepicker-trigger.ui-button:focus{background-color:transparent}/deep/ .has-time{display:flex;flex-wrap:nowrap}/deep/ .has-time p-calendar:first-child{width:55%;margin-right:14px}/deep/ .has-time p-calendar:last-child{width:45%}/deep/ .has-time p-calendar:last-child .ui-datepicker{padding:0}/deep/ .has-time .ui-button-icon-left{line-height:18px}"],
                        providers: [
                            DATETIME_CONTROL_VALUE_ACCESSOR,
                            { provide: BaseFormComponent, useExisting: core.forwardRef(function () { return DateAndTimeComponent; }) }
                        ]
                    },] },
        ];
        /** @nocollapse */
        DateAndTimeComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: BaseFormComponent, decorators: [{ type: core.SkipSelf }, { type: core.Optional }, { type: core.Inject, args: [core.forwardRef(function () { return FormRowComponent; }),] }] }
            ];
        };
        DateAndTimeComponent.propDecorators = {
            value: [{ type: core.Input }],
            formatPattern: [{ type: core.Input }],
            formatPatternNG: [{ type: core.Input }],
            showNavigation: [{ type: core.Input }],
            yearRange: [{ type: core.Input }],
            showIcon: [{ type: core.Input }],
            showTime: [{ type: core.Input }],
            showDate: [{ type: core.Input }],
            hourFormat: [{ type: core.Input }],
            onChange: [{ type: core.Output }]
        };
        return DateAndTimeComponent;
    }(BaseFormComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWDateAndTimeModule = (function () {
        function AWDateAndTimeModule() {
        }
        AWDateAndTimeModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            DateAndTimeComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            primeng.CalendarModule,
                            AWStringFieldModule
                        ],
                        entryComponents: [
                            DateAndTimeComponent
                        ],
                        exports: [
                            DateAndTimeComponent,
                            forms.ReactiveFormsModule,
                            forms.FormsModule
                        ]
                    },] },
        ];
        return AWDateAndTimeModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * An dialog header area.
     *
     * See {\@link DialogComponent} for more explanation.
     */
    var DialogHeaderComponent = (function () {
        function DialogHeaderComponent() {
        }
        DialogHeaderComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-dialog-header',
                        template: '<ng-content></ng-content>'
                    },] },
        ];
        return DialogHeaderComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * An dialog header area.
     *
     * See {\@link DialogComponent} for more explanation.
     */
    var DialogFooterComponent = (function () {
        function DialogFooterComponent() {
        }
        DialogFooterComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-dialog-footer',
                        template: '<ng-content></ng-content>'
                    },] },
        ];
        return DialogFooterComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Dialog Component that provides the look and feel for a modal dialog. This component has three
     * sections: header, body, and footer. It can be used by itself or extended.
     *
     * There are three types of popup.
     *   1.  a regular dialog box that has header, body and footer. It's the most customizable.
     *   2.  a confirmation box is similar to a dialog box but has accept and reject action buttons.
     *   3.  a overlay, which is a very basic popup with what you put inside.
     *       It doesn't have header and footer.
     *
     * There are two ways to use any popup component.
     *   1.  Either directly by using component, aw-dialog, aw-confirmation or aw-overlay
     *   2.  or the ModalService  service.open(<DialogComponent>), service.close()
     *
     * Usage:
     *    1.  Using Dialog directly to display a modal popup. This usage is a quick way to show a
     * message to the user.
     *
     *             this.modalService.open<DialogComponent>( DialogComponent, {
     *                     title: 'My Popup Title',
     *                     body: 'My Popup Body'
     *              });
     *
     *
     *   2.   Use the component inside your template.
     *
     * \@Component({
     *                selector: 'aw-page' ,
     *                           template: `
     *                              <aw-dialog [(visible)]="display" [modal]="true"
     *                                        (onOpen)="openAction()" (onClose)="closeAction()">
     *
     *                                    <aw-dialog-header>Dialog Header</aw-dialog-header>
     *
     *                                     Dialog Body: Creating a dialog using the dialog component
     *
     *                                    <aw-dialog-footer>
     *                                      <aw-button [size]="'small'" [style]="'primary'"
     *                                                 (click)="close()">OK</aw-button>
     *                                    </aw-dialog-footer>
     *                              </aw-dialog>
     *
     *                          <aw-button [size]="'small'" (click)="open()">Open Dialog</aw-button>
     *                  `
     *         export class MyPageComponent implements OnInit {
     *
     *                     display: boolean = false;
     *
     *                     dialogAction: string;
     *
     *                     constructor(private modalService: ModalService) {
     *                          super();
     *                       }
     *                     ngOnInit() { }
     *
     *                     open() {
     *                        this.display = true;
     *                     }
     *
     *                     openAction()  {
     *                        this.dialogAction = "open";
     *                      }
     *       }
     *
     *
     */
    var DialogComponent = (function (_super) {
        __extends(DialogComponent, _super);
        function DialogComponent(env) {
            var _this = _super.call(this, env) || this;
            _this.env = env;
            /**
             * support two way data binding on visible property.
             */
            _this.visibleChange = new core.EventEmitter();
            /**
             * whether this dialog blocks the rest of the page or not when displayed.
             */
            _this.modal = true;
            /**
             * Whether there's an x at the top right that makes the dialog closable.
             */
            _this.closable = true;
            /**
             * Event fired when dialog is closed.
             */
            _this.onClose = new core.EventEmitter();
            /**
             * Event fired when the dialog is opened.
             */
            _this.onOpen = new core.EventEmitter();
            _this.width = 300;
            _this.height = 'auto';
            return _this;
        }
        /**
         * Open this dialog.
         */
        /**
         * Open this dialog.
         * @return {?}
         */
        DialogComponent.prototype.open = /**
         * Open this dialog.
         * @return {?}
         */
            function () {
                this.visible = true;
                this.onOpen.emit();
                // visible is a 2-way binding variable.
                this.visibleChange.emit(true);
            };
        /**
         * close the dialog
         */
        /**
         * close the dialog
         * @return {?}
         */
        DialogComponent.prototype.close = /**
         * close the dialog
         * @return {?}
         */
            function () {
                this.visible = false;
                this.onClose.emit();
                // Important to make sure change is set on parent binding.
                // Otherwise, the variable and dialog open/close state can be out
                // of sync and we wouldn't trigger change detection.
                this.visibleChange.emit(false);
            };
        /**
         * Does this dialog have header.
         *
         */
        /**
         * Does this dialog have header.
         *
         * @return {?}
         */
        DialogComponent.prototype.hasHeader = /**
         * Does this dialog have header.
         *
         * @return {?}
         */
            function () {
                return core$1.isPresent(this.header);
            };
        /**
         * Does this dialog have footer.
         *
         */
        /**
         * Does this dialog have footer.
         *
         * @return {?}
         */
        DialogComponent.prototype.hasFooter = /**
         * Does this dialog have footer.
         *
         * @return {?}
         */
            function () {
                return core$1.isPresent(this.footer);
            };
        DialogComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-dialog',
                        template: "<p-dialog [header]=\"title\" [(visible)]=\"visible\"\n          [modal]=\"modal\" [closable]=\"closable\" [width]=\"width\" [height]=\"height\"\n          [styleClass]=\"styleClass\" [appendTo]=\"appendTo\" (onShow)=\"open()\" (onHide)=\"close()\">\n\n    <p-header *ngIf=\"hasHeader()\">\n        <ng-content select=\"aw-dialog-header\"></ng-content>\n    </p-header>\n\n    {{body}}\n    <ng-content></ng-content>\n\n    <p-footer *ngIf=\"hasFooter()\">\n        <div class=\"dialog-footer-separator\"></div>\n        <ng-content select=\"aw-dialog-footer\"></ng-content>\n    </p-footer>\n</p-dialog>\n",
                        styles: ["::ng-deep .ui-dialog .ui-dialog-titlebar{background-color:#f2f2f2;padding:15px 20px}::ng-deep .ui-dialog .ui-dialog-titlebar .ui-dialog-titlebar-icon:hover{border-color:transparent}::ng-deep .ui-widget-header{font-weight:400;font-size:16px}::ng-deep .ui-dialog .ui-dialog-content{padding:15px 20px;line-height:1.3em}::ng-deep .ui-dialog .ui-widget-content{border:none}::ng-deep .ui-dialog.ui-widget-content{border:none;box-shadow:0 2px 10px 0 rgba(0,0,0,.3)}::ng-deep .ui-dialog .dialog-footer-separator{border-top:1px solid #d7d7d7;height:14px}::ng-deep .ui-dialog .ui-dialog-footer{padding:0 20px 15px}"]
                    },] },
        ];
        /** @nocollapse */
        DialogComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment }
            ];
        };
        DialogComponent.propDecorators = {
            title: [{ type: core.Input }],
            body: [{ type: core.Input }],
            visibleChange: [{ type: core.Output }],
            modal: [{ type: core.Input }],
            closable: [{ type: core.Input }],
            appendTo: [{ type: core.Input }],
            onClose: [{ type: core.Output }],
            onOpen: [{ type: core.Output }],
            header: [{ type: core.ContentChild, args: [DialogHeaderComponent,] }],
            footer: [{ type: core.ContentChild, args: [DialogFooterComponent,] }]
        };
        return DialogComponent;
    }(ModalContainer));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWDialogModule = (function () {
        function AWDialogModule() {
        }
        AWDialogModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            DialogComponent,
                            DialogHeaderComponent,
                            DialogFooterComponent
                        ],
                        imports: [
                            common.CommonModule,
                            AWCoreComponentModule,
                            primeng.DialogModule
                        ],
                        entryComponents: [
                            ModalComponent,
                            DialogComponent,
                            DialogHeaderComponent,
                            DialogFooterComponent
                        ],
                        exports: [
                            DialogComponent,
                            DialogHeaderComponent,
                            DialogFooterComponent,
                            AWCoreComponentModule
                        ],
                        providers: []
                    },] },
        ];
        return AWDialogModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Convenient wrapper class around controls such as radiobuttons, dropdown, checkboxes,
     * Chooser. The type of the chooser may be determined dynamically based on the number of items in
     * the data source list, or can be specified explicitly via the "type" binding.
     *
     *
     *
     */
    var GenericChooserComponent = (function (_super) {
        __extends(GenericChooserComponent, _super);
        function GenericChooserComponent(env, _viewContainer, dataSource, parentContainer) {
            var _this = _super.call(this, env, parentContainer) || this;
            _this.env = env;
            _this._viewContainer = _viewContainer;
            _this.dataSource = dataSource;
            _this.parentContainer = parentContainer;
            /**
             *  Is this a List property, or a to-one.
             */
            _this.multiselect = false;
            return _this;
        }
        /**
         * @return {?}
         */
        GenericChooserComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                if (core$1.isBlank(this.object)) {
                    this.object = ((this._viewContainer.injector)).view.context;
                }
                this.keyPath = new core$1.FieldPath(this.key);
                var /** @type {?} */ defaultDataProvider = null;
                if (core$1.isPresent(this.list)) {
                    defaultDataProvider = this.dataSource.dataProviders.find(this.list);
                }
                else {
                    defaultDataProvider = this.dataSource.dataProviders.find(this.destinationClass);
                }
                var /** @type {?} */ projectedSize = defaultDataProvider.expectedCount(this.choiceProviderParams);
                this.initType(projectedSize);
                if (this.type === 'Chooser') {
                    this.dataSource.init({
                        dataProvider: defaultDataProvider,
                        queryType: QueryType.FullText,
                        lookupKey: this.displayKey,
                        state: new ChooserState(new GCChooserState(this), this.multiselect),
                        multiselect: this.multiselect
                    });
                }
                else {
                    // do we need to read this value in async?
                    this.list = defaultDataProvider.data();
                }
                _super.prototype.registerFormControl.call(this, this.selection);
                this.validateRequired();
                if (core$1.isBlank(this.selection)) {
                    // this.noSelectionString = this.i18n.instant('Widgets.gchooser.noSelString');
                    this.noSelectionString = 'Select a Item';
                }
            };
        /**
         *
         * When \@Input type is not passed we try to guess and select the best type for current data
         *
         * @param {?} projectedSize
         * @return {?}
         */
        GenericChooserComponent.prototype.initType = /**
         *
         * When \@Input type is not passed we try to guess and select the best type for current data
         *
         * @param {?} projectedSize
         * @return {?}
         */
            function (projectedSize) {
                if (core$1.isBlank(this.type)) {
                    if (this.multiselect) {
                        this.type = (projectedSize <= 0 || projectedSize > 8) ? 'Chooser' : 'Checkbox';
                    }
                    else {
                        this.type = (projectedSize <= 0 || projectedSize > 20) ? 'Chooser'
                            : (projectedSize < 6) ? 'Radio' :
                                'Dropdown';
                    }
                }
            };
        /**
         * There are certain properties which are required by this component. As already mentioned
         * above GenericChooser works with references and thefore two key properties are object and key
         * so we can access an object
         *
         *
         * @return {?}
         */
        GenericChooserComponent.prototype.validateRequired = /**
         * There are certain properties which are required by this component. As already mentioned
         * above GenericChooser works with references and thefore two key properties are object and key
         * so we can access an object
         *
         *
         * @return {?}
         */
            function () {
                if (core$1.isBlank(this.object)) {
                    throw Error('Cannot continue without a object');
                }
                if (core$1.isBlank(this.key)) {
                    throw Error('Cannot continue without a key binding');
                }
                if (core$1.isBlank(this.list) && core$1.isBlank(this.destinationClass)) {
                    throw Error('Cannot continue without having either list of values or destinationClass');
                }
                if (core$1.isPresent(this.type) &&
                    (this.type !== 'Radio' && this.type !== 'Checkbox' && this.type !== 'Dropdown' &&
                        this.type !== 'Chooser')) {
                    throw Error('Cannot instantiate GenericChooser  - invalid type');
                }
                if (core$1.isBlank(this.displayKey)) {
                    this.displayKey = 'toString';
                }
            };
        /**
         *
         * Used when displaying value both from primitive type as well complex object. If you want to
         * control how item is displayed you can provide display key, which is can be a  method or
         * property of the object you are displaying.
         *
         * Todo: think about formatters as well
         *
         */
        /**
         *
         * Used when displaying value both from primitive type as well complex object. If you want to
         * control how item is displayed you can provide display key, which is can be a  method or
         * property of the object you are displaying.
         *
         * Todo: think about formatters as well
         *
         * @param {?} item
         * @return {?}
         */
        GenericChooserComponent.prototype.displayValue = /**
         *
         * Used when displaying value both from primitive type as well complex object. If you want to
         * control how item is displayed you can provide display key, which is can be a  method or
         * property of the object you are displaying.
         *
         * Todo: think about formatters as well
         *
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (core$1.isBlank(this.displayKey)) {
                    return item;
                }
                var /** @type {?} */ fieldValue = core$1.FieldPath.getFieldValue(item, this.displayKey);
                if (core$1.isFunction(fieldValue)) {
                    return fieldValue.call(item);
                }
                return fieldValue;
            };
        Object.defineProperty(GenericChooserComponent.prototype, "selection", {
            /**
             *  Retrieve a current value from the parent/target object
             *
             */
            get: /**
             *  Retrieve a current value from the parent/target object
             *
             * @return {?}
             */ function () {
                return this.keyPath.getFieldValue(this.object);
            },
            /**
             *  set value back to the object
             *
             */
            set: /**
             *  set value back to the object
             *
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.keyPath.setFieldValue(this.object, value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} value
         * @return {?}
         */
        GenericChooserComponent.prototype.onSelection = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.selection = value;
                this.formControl.setValue(this.selection);
                this.formControl.markAsDirty();
            };
        GenericChooserComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-generic-chooser',
                        template: "<ng-container [ngSwitch]=\"type\">\n\n    <ng-template [ngSwitchCase]=\"'Checkbox'\">\n        <aw-checkbox-list [list]=\"list\"\n                          [editable]=\"editable\"\n                          [selections]=\"selection\"\n                          [name]=\"name\"\n                          [disabled]=\"disabled\"\n                          [labelFormatter]=\"displayValue\"\n                          (onSelection)=\"onSelection($event)\">\n        </aw-checkbox-list>\n    </ng-template>\n\n\n    <ng-template [ngSwitchCase]=\"'Radio'\">\n        <aw-radiobutton-list [list]=\"list\"\n                             [selection]=\"selection\"\n                             [editable]=\"editable\"\n                             [name]=\"name\"\n                             [disabled]=\"disabled\"\n                             [labelFormatter]=\"displayValue\"\n                             (onSelection)=\"onSelection($event)\">\n        </aw-radiobutton-list>\n    </ng-template>\n\n    <ng-template [ngSwitchCase]=\"'Dropdown'\">\n        <aw-dropdown [list]=\"list\"\n                     [isStandalone]=\"false\"\n                     [editable]=\"editable\"\n                     [noSelectionString]=\"noSelectionString\"\n                     [selection]=\"selection\"\n                     [disabled]=\"disabled\"\n                     [name]=\"name\"\n                     (onSelection)=\"onSelection($event)\">\n            <ng-template #itemTemplate let-item>\n\n                <!-- todo: allow to pass a PIPE to do some additional formatting -->\n                {{ displayValue(item.value) }}\n            </ng-template>\n        </aw-dropdown>\n    </ng-template>\n\n\n    <ng-template [ngSwitchCase]=\"'Chooser'\">\n        <aw-chooser #chooser\n                    [editable]=\"editable\"\n                    [isStandalone]=\"false\"\n                    [name]=\"name\"\n                    [multiselect]=\"multiselect\"\n                    [dataSource]=\"dataSource\"\n                    [valueTransformer]=\"displayValue\"\n                    [disabled]=\"disabled\">\n\n        </aw-chooser>\n\n    </ng-template>\n\n</ng-container>\n",
                        styles: [""],
                        providers: [
                            { provide: BaseFormComponent, useExisting: core.forwardRef(function () { return GenericChooserComponent; }) },
                            { provide: DATA_SOURCE, useClass: ChooserDataSource, deps: [DataProviders, DataFinders] }
                        ]
                    },] },
        ];
        /** @nocollapse */
        GenericChooserComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: core.ViewContainerRef },
                { type: ChooserDataSource, decorators: [{ type: core.Inject, args: [DATA_SOURCE,] }] },
                { type: BaseFormComponent, decorators: [{ type: core.SkipSelf }, { type: core.Optional }, { type: core.Inject, args: [core.forwardRef(function () { return BaseFormComponent; }),] }] }
            ];
        };
        GenericChooserComponent.propDecorators = {
            list: [{ type: core.Input }],
            object: [{ type: core.Input }],
            key: [{ type: core.Input }],
            destinationClass: [{ type: core.Input }],
            choiceProviderParams: [{ type: core.Input }],
            multiselect: [{ type: core.Input }],
            type: [{ type: core.Input }],
            displayKey: [{ type: core.Input }],
            noSelectionString: [{ type: core.Input }]
        };
        return GenericChooserComponent;
    }(BaseFormComponent));
    /**
     * GenericChooser implementation of the ChooserSelectionState which is used when Type = Chooser.
     *
     */
    var /**
     * GenericChooser implementation of the ChooserSelectionState which is used when Type = Chooser.
     *
     */ GCChooserState = (function (_super) {
        __extends(GCChooserState, _super);
        function GCChooserState(gChooser) {
            var _this = _super.call(this) || this;
            _this.gChooser = gChooser;
            return _this;
        }
        /**
         * @param {?} selection
         * @param {?} selected
         * @return {?}
         */
        GCChooserState.prototype.setSelectionState = /**
         * @param {?} selection
         * @param {?} selected
         * @return {?}
         */
            function (selection, selected) {
                if (selected === this.isSelected(selection)) {
                    return;
                }
                if (this.gChooser.multiselect) {
                    // Check if we can implement smarter and more generic way how we use it in java
                    // RelationshipField.addTo(_object, _keyPath, selection);
                    var /** @type {?} */ multiRel = this.gChooser.keyPath.getFieldValue(this.gChooser.object);
                    if (core$1.isBlank(multiRel)) {
                        multiRel = [];
                    }
                    else if (core$1.isPresent(multiRel) && !core$1.isArray(multiRel)) {
                        throw new Error('I can not store multiselect value into non-array object');
                    }
                    if (selected) {
                        multiRel.push(selection);
                        this.gChooser.selection = multiRel;
                    }
                    else {
                        core$1.ListWrapper.removeIfExist(multiRel, selection);
                    }
                }
                else {
                    if (!selection) {
                        selection = null;
                    }
                    this.gChooser.selection = selection;
                }
            };
        /**
         * @return {?}
         */
        GCChooserState.prototype.selectedObject = /**
         * @return {?}
         */
            function () {
                if (this.gChooser.multiselect) {
                    var /** @type {?} */ objects = this.selectedObjects();
                    return (core$1.isBlank(objects) || core$1.ListWrapper.isEmpty(objects)) ? null : core$1.ListWrapper.last(objects);
                }
                return this.gChooser.selection;
            };
        /**
         * @return {?}
         */
        GCChooserState.prototype.selectedObjects = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ selection = this.gChooser.selection;
                if (this.gChooser.multiselect && core$1.isBlank(selection)) {
                    selection = [];
                }
                return (this.gChooser.multiselect && core$1.isArray(selection)) ? selection : [selection];
            };
        /**
         * @param {?} selection
         * @return {?}
         */
        GCChooserState.prototype.isSelected = /**
         * @param {?} selection
         * @return {?}
         */
            function (selection) {
                if (this.gChooser.multiselect) {
                    return core$1.ListWrapper.containsComplex(this.selectedObjects(), selection);
                }
                var /** @type {?} */ curValue = this.selectedObject();
                return core$1.equals(curValue, selection);
            };
        return GCChooserState;
    }(ChooserSelectionState));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Wrapper class for RadioButton component providing convenient way to to render RadioButton Groups
     *
     *
     * ### Example
     *
     *
     * ```
     * \@Component({
     *          selector: 'gender-selector' ,
     *          template: `
     *              <aw-radiobutton-list [list]="rbListValues" [layout]="layout"
     *     [selection]="selectedValue" [name]="'name'">
     *               </aw-radiobutton-list>
     *      `
     *      })
     *      export class GenderSelectorComponent
     *      {
     *          rbListValues: string[] = ['male' , 'female' , 'other'];
     *          selectedValue: string = 'other';
     *          layout: string = 'stacked';
     *
     *
     *          formGroup: FormGroup = new FormGroup({});
     *
     *
     *          onCBClick (event): void
     *          {
     *              console.log('onCBClick = ' + event);
     *          }
     *
     *      }
     *
     * ```
     */
    var /** @type {?} */ RB_LIST_CONTROL_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return RadioButtonListComponent; }),
        multi: true
    };
    var RadioButtonListComponent = (function (_super) {
        __extends(RadioButtonListComponent, _super);
        function RadioButtonListComponent(env, parentContainer) {
            var _this = _super.call(this, env, parentContainer) || this;
            _this.env = env;
            _this.parentContainer = parentContainer;
            /**
             *
             * Fires an event when radio button is selected
             *
             */
            _this.onSelection = new core.EventEmitter();
            return _this;
        }
        /**
         * @return {?}
         */
        RadioButtonListComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                if (core$1.isPresent(this.selection)) {
                    this.model = 0;
                }
                this.updateModel(this.selection);
                this.onModelChanged(this.selection);
                this.registerFormControl(this.selection);
            };
        /**
         * Label is extracted into a method so in the future we can play how we want to display the
         * value. Since I want to support formatters for each components we might have a chance to
         * decide how the label will look like.
         *
         */
        /**
         * Label is extracted into a method so in the future we can play how we want to display the
         * value. Since I want to support formatters for each components we might have a chance to
         * decide how the label will look like.
         *
         * @param {?} item
         * @return {?}
         */
        RadioButtonListComponent.prototype.labelValue = /**
         * Label is extracted into a method so in the future we can play how we want to display the
         * value. Since I want to support formatters for each components we might have a chance to
         * decide how the label will look like.
         *
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (core$1.isPresent(this.labelFormatter)) {
                    return this.labelFormatter(item);
                }
                return item.toString();
            };
        /**
         * In this version of checkboxes we still expect only primitive types. Keep this functionality
         * in extra method so we can work with it even now we just return the same value back
         *
         *
         */
        /**
         * In this version of checkboxes we still expect only primitive types. Keep this functionality
         * in extra method so we can work with it even now we just return the same value back
         *
         *
         * @param {?} item
         * @return {?}
         */
        RadioButtonListComponent.prototype.value = /**
         * In this version of checkboxes we still expect only primitive types. Keep this functionality
         * in extra method so we can work with it even now we just return the same value back
         *
         *
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return item;
            };
        /**
         *
         * On NGModel change retrieve actual record based on the INDEX and propagate it to both
         * ngModel as well as FormGroup.
         *
         */
        /**
         *
         * On NGModel change retrieve actual record based on the INDEX and propagate it to both
         * ngModel as well as FormGroup.
         *
         * @param {?} event
         * @return {?}
         */
        RadioButtonListComponent.prototype.onChange = /**
         *
         * On NGModel change retrieve actual record based on the INDEX and propagate it to both
         * ngModel as well as FormGroup.
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var /** @type {?} */ updatedModel = this.list[this.model];
                this.onSelection.emit(updatedModel);
                this.onModelChanged(updatedModel);
                this.formControl.setValue(updatedModel, {
                    emitEvent: true,
                    emitViewToModelChange: false
                });
            };
        /**
         * Since we might be dealing with complex object store only INDEX number in the model.
         *
         */
        /**
         * Since we might be dealing with complex object store only INDEX number in the model.
         *
         * @param {?} souceItem
         * @return {?}
         */
        RadioButtonListComponent.prototype.updateModel = /**
         * Since we might be dealing with complex object store only INDEX number in the model.
         *
         * @param {?} souceItem
         * @return {?}
         */
            function (souceItem) {
                var /** @type {?} */ index = this.list.findIndex(function (elem) {
                    return souceItem === elem;
                });
                this.model = index === -1 ? 0 : index;
            };
        /**
         * @return {?}
         */
        RadioButtonListComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ updatedModel = this.list[this.model];
                this.formControl.setValue(updatedModel, {
                    emitEvent: true,
                    emitViewToModelChange: false
                });
                // this.cd.detectChanges();
            };
        /**
         * Internal. Please see ControlValueAccessor
         *
         */
        /**
         * Internal. Please see ControlValueAccessor
         *
         * @param {?} value
         * @return {?}
         */
        RadioButtonListComponent.prototype.writeValue = /**
         * Internal. Please see ControlValueAccessor
         *
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value !== this.value) {
                    var /** @type {?} */ newModel = value;
                    this.updateModel(newModel);
                }
            };
        RadioButtonListComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-radiobutton-list',
                        template: "<div *ngFor=\"let item of list;  let i = index\" class=\"ui-g\">\n\n    <div class=\"ui-g-12\">\n        <aw-radiobutton\n            [(ngModel)]=\"model\"\n            (ngModelChange)=\"onChange($event)\"\n            [isStandalone]=\"false\"\n            [name]=\"name\"\n            [value]=\"i\"\n            [label]=\"labelValue(item)\">\n        </aw-radiobutton>\n    </div>\n\n</div>\n",
                        styles: [""],
                        providers: [
                            RB_LIST_CONTROL_VALUE_ACCESSOR,
                            { provide: BaseFormComponent, useExisting: core.forwardRef(function () { return RadioButtonListComponent; }) }
                        ]
                    },] },
        ];
        /** @nocollapse */
        RadioButtonListComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: BaseFormComponent, decorators: [{ type: core.SkipSelf }, { type: core.Optional }, { type: core.Inject, args: [core.forwardRef(function () { return FormRowComponent; }),] }] }
            ];
        };
        RadioButtonListComponent.propDecorators = {
            list: [{ type: core.Input }],
            selection: [{ type: core.Input }],
            labelFormatter: [{ type: core.Input }],
            onSelection: [{ type: core.Output }]
        };
        return RadioButtonListComponent;
    }(BaseFormComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     *
     * Implements standard HTML radio button on top of PrimeNG with ariba styling
     *
     * ### Example
     *
     * 1. Basic usage using ngModel pre-selected first radio
     *
     *  ```ts
     *
     * \@Component({
     *          selector: 'demo-comp',
     *          template: `
     *              <aw-radiobutton [name]="'color'" [value]="'red'" [label]="'Red'"
     *                             [(ngModel)]="model">
     *             </aw-radiobutton>
     *              <aw-radiobutton [name]="'color'" [value]="'blue'" [label]="'Blue'"
     *                      [(ngModel)]="model">
     *              </aw-radiobutton>
     *      `
     *      })*
     *      class BasicWithNgModelComponent
     *      {
     *          model: string[] = ['red'];
     *
     *          constructor()
     *          {
     *          }
     *      }
     *
     *  ```
     *
     *
     * 2. Basic usage with formGroup
     *
     *
     * ```ts
     * \@Component({
     *           selector: 'demo-comp',
     *           template: `
     *          <div [formGroup]="env.currentForm">
     *               <aw-radiobutton [name]="'color2'" [value]="'red'" [label]="'Red'"
     *               (onChange)="onChange($event)">
     *               </aw-radiobutton>
     *               <aw-radiobutton [name]="'color2'" [value]="'blue'" [label]="'Blue'"
     *               (onChange)="onChange($event)">
     *               </aw-radiobutton>
     *
     *       </div>
     *       `
     *       })
     *       class BasicWithFormGroupComponent implements OnInit
     *       {
     *           model: string = 'blue';
     *
     *           constructor(public env: Environment)
     *           {
     *           }
     *
     *           ngOnInit(): void
     *           {
     *               this.env.currentForm = new FormGroup({});
     *               this.env.currentForm.registerControl('color2', new FormControl(this.model));
     *           }
     *
     *
     *           onChange(event: any): void
     *           {
     *               this.modelSet = event;
     *           }
     *
     *       }
     *  ````
     *
     *
     *
     *
     */
    var /** @type {?} */ RAB_CONTROL_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return RadioButtonComponent; }),
        multi: true
    };
    var RadioButtonComponent = (function (_super) {
        __extends(RadioButtonComponent, _super);
        function RadioButtonComponent(env, parentContainer) {
            var _this = _super.call(this, env, parentContainer) || this;
            _this.env = env;
            _this.parentContainer = parentContainer;
            /**
             *
             * A value associated with this radio
             *
             */
            _this.value = '';
            /**
             * Trigger click event with currrent selected value
             *
             */
            _this.onChange = new core.EventEmitter();
            return _this;
        }
        /**
         * @return {?}
         */
        RadioButtonComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                if (this.isStandalone) {
                    _super.prototype.registerFormControl.call(this, this.value);
                    this.model = this.formControl.value;
                    this.onModelChanged(this.model);
                }
                else {
                    this.formControl = /** @type {?} */ (this.formGroup.controls[this.name]);
                }
            };
        /**
         * Called when radio is clicked. Not using PrimeNG click event as it is fired before
         * the model is changed. Therefore need to listen on (ngModelChange)
         *
         */
        /**
         * Called when radio is clicked. Not using PrimeNG click event as it is fired before
         * the model is changed. Therefore need to listen on (ngModelChange)
         *
         * @param {?} newVal
         * @return {?}
         */
        RadioButtonComponent.prototype.onModelChange = /**
         * Called when radio is clicked. Not using PrimeNG click event as it is fired before
         * the model is changed. Therefore need to listen on (ngModelChange)
         *
         * @param {?} newVal
         * @return {?}
         */
            function (newVal) {
                this.onModelChanged(this.model);
                if (this.isStandalone) {
                    this.formControl.setValue(this.model, { emitEvent: true });
                }
                this.onChange.emit(this.model);
            };
        /**
         * Internal. Please see ControlValueAccessor
         *
         */
        /**
         * Internal. Please see ControlValueAccessor
         *
         * @param {?} value
         * @return {?}
         */
        RadioButtonComponent.prototype.writeValue = /**
         * Internal. Please see ControlValueAccessor
         *
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value !== this.model) {
                    this.model = value;
                    if (this.isStandalone) {
                        this.formControl.setValue(this.model, { emitEvent: true });
                    }
                    this.onModelChanged(this.model);
                }
            };
        RadioButtonComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-radiobutton',
                        template: "<span class=\"w-radiobutton\">\n\n    <ng-template [ngIf]=\"editable \">\n        <p-radioButton [name]=\"name\"\n                       [value]=\"value\"\n                       [label]=\"label\"\n                       [(ngModel)]=\"model\"\n                       [disabled]=\"disabled\"\n                       (ngModelChange)=\"onModelChange($event)\"\n                       [class.u-validation-error]=\"!(formControl.valid || (formControl.pristine))\">\n        </p-radioButton>\n    </ng-template>\n</span>\n",
                        styles: ["/deep/ .w-radiobutton .ui-radiobutton-box{width:23px;height:23px;line-height:23px}/deep/ .w-radiobutton .ui-radiobutton-icon{font-size:1.5em;line-height:1em}"],
                        providers: [
                            RAB_CONTROL_VALUE_ACCESSOR,
                            { provide: BaseFormComponent, useExisting: core.forwardRef(function () { return RadioButtonComponent; }) }
                        ]
                    },] },
        ];
        /** @nocollapse */
        RadioButtonComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: BaseFormComponent, decorators: [{ type: core.SkipSelf }, { type: core.Optional }, { type: core.Inject, args: [core.forwardRef(function () { return FormRowComponent; }),] }] }
            ];
        };
        RadioButtonComponent.propDecorators = {
            value: [{ type: core.Input }],
            label: [{ type: core.Input }],
            onChange: [{ type: core.Output }]
        };
        return RadioButtonComponent;
    }(BaseFormComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWRadioButtonModule = (function () {
        function AWRadioButtonModule() {
        }
        AWRadioButtonModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            RadioButtonComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            primeng.RadioButtonModule
                        ],
                        entryComponents: [
                            RadioButtonComponent
                        ],
                        exports: [
                            RadioButtonComponent,
                            forms.ReactiveFormsModule,
                            forms.FormsModule
                        ],
                        providers: []
                    },] },
        ];
        return AWRadioButtonModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWRadioButtonListModule = (function () {
        function AWRadioButtonListModule() {
        }
        AWRadioButtonListModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            RadioButtonListComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            AWRadioButtonModule
                        ],
                        entryComponents: [
                            RadioButtonListComponent
                        ],
                        exports: [
                            RadioButtonListComponent,
                            forms.ReactiveFormsModule,
                            forms.FormsModule
                        ],
                        providers: []
                    },] },
        ];
        return AWRadioButtonListModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWGenericChooserModule = (function () {
        function AWGenericChooserModule() {
        }
        AWGenericChooserModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            GenericChooserComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            AWCoreComponentModule,
                            AWDropdownModule,
                            AWCheckBoxListModule,
                            AWChooserModule,
                            AWRadioButtonListModule
                        ],
                        entryComponents: [
                            GenericChooserComponent
                        ],
                        exports: [
                            forms.ReactiveFormsModule,
                            forms.FormsModule,
                            GenericChooserComponent
                        ]
                    },] },
        ];
        return AWGenericChooserModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * OutlineState is the key gluing part for the OutlineFor and OutlineController components. It
     * holds all important information for the current outline tree and manages expansion states in form
     * of so called expansionPath and expansionStates
     *
     * We need to have a way how to work with generic data structure in order not to hold UI specific
     * information on the domain object model just like we had it before, where we had an interface
     * called OutlineNode, with fields (expanded, selected, etc.. )
     *
     *
     * `expansionPath`: Holds an array of currently selected and expanded nodes. This is filled by
     * OutlineController.
     *
     *
     * If we are dealing with Entity or anything that has identity then we have easier situation as we
     * can ask for ID and it is more efficient for serialization
     */
    var OutlineState = (function () {
        function OutlineState() {
            /**
             *
             * When outline is rendered for first time or re-rendered and we set default value for the
             * expansionStates. This way we can pretty easily execute CollapseAll, ExpandAll
             *
             */
            this.isExpandedAll = false;
            /**
             *
             * Holds current level during tree node rendering so we can apply correct indentation
             *
             */
            this.currentLevel = -1;
            this.expansionStates = new Map();
        }
        /**
         * For the collapseAll and expandAll we are using simple mechanism where we clean up all
         * selection and then set the global expand state, this whey isExpand method returns the same
         * state for all items
         */
        /**
         * For the collapseAll and expandAll we are using simple mechanism where we clean up all
         * selection and then set the global expand state, this whey isExpand method returns the same
         * state for all items
         * @return {?}
         */
        OutlineState.prototype.collapseAll = /**
         * For the collapseAll and expandAll we are using simple mechanism where we clean up all
         * selection and then set the global expand state, this whey isExpand method returns the same
         * state for all items
         * @return {?}
         */
            function () {
                var _this = this;
                if (core$1.isPresent(this.outlineFor) &&
                    this.outlineFor.isTreeModelFormat()) {
                    // for this case we collapse all but root nodes
                    if (this.outlineFor.pushRootSectionOnNewLine) {
                        this.outlineFor.list.forEach(function (item) {
                            _this.updateNodes(item.children || [], false);
                        });
                    }
                    else {
                        this.updateNodes(this.outlineFor.list || [], false);
                    }
                }
                else {
                    this.expansionStates.clear();
                }
                this.isExpandedAll = false;
            };
        /**
         * @return {?}
         */
        OutlineState.prototype.expandAll = /**
         * @return {?}
         */
            function () {
                if (core$1.isPresent(this.outlineFor) &&
                    this.outlineFor.isTreeModelFormat()) {
                    this.updateNodes(this.outlineFor.list, true);
                }
                else {
                    this.expansionStates.clear();
                }
                this.isExpandedAll = true;
            };
        Object.defineProperty(OutlineState.prototype, "expansionPath", {
            get: /**
             * @return {?}
             */ function () {
                if (core$1.isBlank(this._expansionPath)) {
                    this._expansionPath = [];
                }
                return this._expansionPath;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                var _this = this;
                this._expansionPath = value;
                if (core$1.isBlank(this._expansionPath)) {
                    return;
                }
                this._expansionPath.forEach(function (item) {
                    _this.setExpansionState(item, true);
                });
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} currentPath
         * @param {?=} children
         * @return {?}
         */
        OutlineState.prototype.toggleExpansion = /**
         * @param {?} currentPath
         * @param {?=} children
         * @return {?}
         */
            function (currentPath, children) {
                if (core$1.isBlank(currentPath)) {
                    return;
                }
                var /** @type {?} */ item = core$1.ListWrapper.last(currentPath);
                var /** @type {?} */ itemChildren = children || [];
                var /** @type {?} */ newState = !this.isExpanded(item);
                this.setExpansionState(item, newState);
                if (!newState) {
                    core$1.ListWrapper.removeLast(currentPath);
                    this.updateNodes(itemChildren, newState);
                }
                this.setExpansionPath(currentPath);
            };
        /**
         * @param {?} nodes
         * @param {?} newState
         * @return {?}
         */
        OutlineState.prototype.updateNodes = /**
         * @param {?} nodes
         * @param {?} newState
         * @return {?}
         */
            function (nodes, newState) {
                var _this = this;
                nodes.forEach(function (child) {
                    var /** @type {?} */ items = _this.outlineFor.childrenForItem(child);
                    if (core$1.isPresent(items) && items.length > 0) {
                        _this.updateNodes(items, newState);
                    }
                    _this.setExpansionState(child, newState);
                });
            };
        /**
         * @param {?} item
         * @param {?} isExpanded
         * @return {?}
         */
        OutlineState.prototype.setExpansionState = /**
         * @param {?} item
         * @param {?} isExpanded
         * @return {?}
         */
            function (item, isExpanded) {
                // Even for tree mode format save the state so we can use it later on in case object
                // references gets meesed up
                if (this.outlineFor &&
                    this.outlineFor.isTreeModelFormat()) {
                    ((item)).isExpanded = isExpanded;
                }
                else {
                    var /** @type {?} */ key = this.itemToKey(item);
                    if (isExpanded === this.isExpandedAll) {
                        this.expansionStates.delete(key);
                    }
                    else {
                        this.expansionStates.set(key, (isExpanded) ? true : false);
                    }
                }
            };
        /**
         * To improve state persisting lets check if we are dealing with an Object that has Identity
         * so we can extract an ID otherwise use object to compare by reference
         *
         *
         * @param {?} item
         * @return {?}
         */
        OutlineState.prototype.itemToKey = /**
         * To improve state persisting lets check if we are dealing with an Object that has Identity
         * so we can extract an ID otherwise use object to compare by reference
         *
         *
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return core$1.isEntity(item) ? ((item)).identity() : item;
            };
        /**
         * @param {?} items
         * @return {?}
         */
        OutlineState.prototype.setExpansionPath = /**
         * @param {?} items
         * @return {?}
         */
            function (items) {
                var _this = this;
                this.expansionPath = items;
                items.forEach(function (node) {
                    _this.setExpansionState(node, true);
                });
            };
        /**
         * @param {?} item
         * @return {?}
         */
        OutlineState.prototype.isExpanded = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (core$1.isPresent(this.outlineFor) &&
                    this.outlineFor.isTreeModelFormat()) {
                    return ((item)).isExpanded;
                }
                else {
                    var /** @type {?} */ key = this.itemToKey(item);
                    if (!this.expansionStates.has(key)) {
                        return this.isExpandedAll;
                    }
                    return this.expansionStates.get(key);
                }
            };
        OutlineState.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        OutlineState.ctorParameters = function () { return []; };
        return OutlineState;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     *
     * Checks type for OutlineNode
     *
     * @param {?} node
     * @return {?}
     */
    function isOutlineNode(node) {
        return core$1.isPresent(node) && core$1.isPresent(((node)))
            && core$1.isPresent(((node)).parent)
            && core$1.isPresent(((node)).children);
    }
    /**
     *
     * OutlineForComponent is like ngFor, but for hierarchical (outline/tree) structures -- i.e. in
     * those cases where an item may have children.
     *
     *
     * It uses outline `<aw-outline-control>` to provide expanding functionality, indentation
     * and other things.
     *
     *
     * This component has minimal styling to make sure it can be changed easily.
     *
     * ### Example rendering tree section, where based on the type we format the out plus
     * for the main root section we always render little popup menu.
     *
     * ```
     *
     *   <aw-outline-for [list]="list" [hasChildren]="hasChildren">
     *
     *       <ng-template #outline let-item>
     *
     *           <div class="my-section">
     *               <div class="outline">
     *                   <aw-outline-control>
     *                       <ng-container [ngSwitch]="item.type">
     *                           <ng-template [ngSwitchCase]="'text'">
     *                               <div class="as-paragraf">
     *                                   {{item?.content}}
     *                               </div>
     *                           </ng-template>
     *
     *
     *                           <ng-template ngSwitchDefault>
     *                               {{item?.content}}
     *                           </ng-template>
     *
     *
     *                       </ng-container>
     *
     *
     *                   </aw-outline-control>
     *               </div>
     *
     *               <div class="filters" *ngIf="item.type === 'section'" >
     *
     *                   <aw-hover-card [linkTitle]="'Filter Items'">
     *                       <aw-list [list]="filterItems" [borderless]="true"></aw-list>
     *                   </aw-hover-card>
     *
     *               </div>
     *           </div>
     *     </ng-template>`
     *   </aw-outline-for>
     *
     * ```
     *
     *
     * We can use it also in embedded mode where we use the `awOutlineFor` directive
     *
     * ## Example
     *
     *
     * ````
     *  <table  class="tree-table" >
     *      <thead>
     *          <tr>
     *              <th>Name</th>
     *              <th>Type</th>
     *          </tr>
     *      </thead>
     *      <tbody #ooo2 awOutlineFor [list]="list"
     *             [hasChildren]="hasChildren"
     *             class="outline-table"
     *      >
     *          <ng-template #outline let-item>
     *              <tr>
     *                  <td class="item-name outline-animation">
     *                      <div><aw-outline-control>
     *                          {{item?.content}}
     *                      </aw-outline-control></div>
     *                  </td>
     *                  <td class="item-type outline-animation">
     *                      <div>{{item.type}}</div>
     *                  </td>
     *              </tr>
     *          </ng-template>
     *      </tbody>
     *  </table>
     *
     * ```
     *
     * I was thinking maybe for first time we don't need the same animation like expanding and
     * collapsing. Maybe we need fade-in. In such case I would probably apply \@section anim only
     * on items where level > 0 (in the template I keep levels) and if level == 0 then I would
     * execute the same rendering just without [\@section]
     *
     *
     * Todo: Think about how to do animation for the table case. Must also write unitest - due to
     * AribaLive aggressive schedule we are skipping them for now
     *
     */
    var OutlineForComponent = (function (_super) {
        __extends(OutlineForComponent, _super);
        function OutlineForComponent(env, _viewContainer, builder, element) {
            var _this = _super.call(this, env) || this;
            _this.env = env;
            _this._viewContainer = _viewContainer;
            _this.builder = builder;
            _this.element = element;
            /**
             * Tells the component not to render expansion control, in such case we expandAll as a
             * default behavior
             *
             */
            _this.showExpansionControl = true;
            /**
             * Opens all tree nodes.
             *
             */
            _this.expandAll = false;
            /**
             *
             * Set indentation size to be used for each level
             *
             */
            _this.indentationPerLevel = 25;
            _this.pushRootSectionOnNewLine = false;
            /**
             *
             * Identifies current model mode.
             *
             * We recognize two modes:
             *
             * Free - Application needs to implement a children method to retrieve a list of children for
             * each node and format is pretty much upt to the application
             *
             * Tree - this is more restrictive where we have concrete data structure
             * interface that needs to be folled
             *
             * todo: instead of passing format binding try to look into the list to see what type so
             * we dont make it mandatory
             *
             */
            _this.format = 'free';
            /**
             *
             * Used when in selection mode to push current selected Item to the application
             *
             */
            _this.onItemSelected = new core.EventEmitter();
            /**
             *
             * This event is triggered by OutlineControl when node is expanded or collapsed
             *
             */
            _this.onExpandChange = new core.EventEmitter();
            _this.embedded = false;
            /**
             * Flag that tells us that component is fully rendered
             *
             */
            _this.viewInitialized = false;
            return _this;
        }
        /**
         * @return {?}
         */
        OutlineForComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                if (core$1.isBlank(this.state)) {
                    this.state = new OutlineState();
                }
                if (core$1.isBlank(this.state.outlineFor)) {
                    this.state.outlineFor = this;
                }
                if (this.expandAll) {
                    this.showExpansionControl = false;
                }
                this.state.isExpandedAll = this.expandAll;
                // in case we want to render content of tree outside of outlineFor
                if (core$1.isPresent(this.externalTemplate)) {
                    this.controlTemplate = this.externalTemplate;
                }
                this.embedded = this.element.nativeElement.hasAttribute('awoutlinefor');
                if (core$1.isBlank(this.context)) {
                    this.context = this;
                }
            };
        /**
         * @return {?}
         */
        OutlineForComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngDoCheck.call(this);
            };
        /**
         * @return {?}
         */
        OutlineForComponent.prototype.isTreeModelFormat = /**
         * @return {?}
         */
            function () {
                return this.format === 'tree';
            };
        /**
         * Used by template and OutlineControl to identify which item is expanded and collapsed
         *
         */
        /**
         * Used by template and OutlineControl to identify which item is expanded and collapsed
         *
         * @param {?} item
         * @param {?=} currentLevel
         * @return {?}
         */
        OutlineForComponent.prototype.isExpanded = /**
         * Used by template and OutlineControl to identify which item is expanded and collapsed
         *
         * @param {?} item
         * @param {?=} currentLevel
         * @return {?}
         */
            function (item, currentLevel) {
                if (currentLevel === void 0) {
                    currentLevel = -1;
                }
                if (currentLevel === 0 && this.pushRootSectionOnNewLine) {
                    // always override/reset for root nodes
                    if (this.isTreeModelFormat()) {
                        ((item)).isExpanded = true;
                    }
                    return true;
                }
                return this.state.isExpanded(item);
            };
        /**
         *
         * Since we have currently two ways how to pass children items we need have this method to
         * unify the way how we access it. If we pass `children` binding we use this instead, otherwise
         * we expect current object to have `children` field
         *
         */
        /**
         *
         * Since we have currently two ways how to pass children items we need have this method to
         * unify the way how we access it. If we pass `children` binding we use this instead, otherwise
         * we expect current object to have `children` field
         *
         * @param {?} item
         * @return {?}
         */
        OutlineForComponent.prototype.childrenForItem = /**
         *
         * Since we have currently two ways how to pass children items we need have this method to
         * unify the way how we access it. If we pass `children` binding we use this instead, otherwise
         * we expect current object to have `children` field
         *
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (this.isTreeModelFormat()) {
                    return ((item)).children || [];
                }
                else {
                    return this.hasChildren(item) ? this.doGetChildren(item) : [];
                }
            };
        /**
         *
         * Check if the current item has a children and needs to be rendered
         *
         */
        /**
         *
         * Check if the current item has a children and needs to be rendered
         *
         * @param {?} item
         * @return {?}
         */
        OutlineForComponent.prototype.hasChildren = /**
         *
         * Check if the current item has a children and needs to be rendered
         *
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (this.isTreeModelFormat()) {
                    var /** @type {?} */ children = ((item)).children;
                    return core$1.isPresent(children) && children.length > 0;
                }
                else if (core$1.isBlank(this.children) && core$1.isBlank(item.children)) {
                    core$1.assert(false, 'Missing [children] method binding');
                }
                return this.doGetChildren(item).length > 0;
            };
        /**
         * @param {?} item
         * @return {?}
         */
        OutlineForComponent.prototype.doGetChildren = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return this.children.apply(this.context, [item]);
            };
        /**
         *  Uses the `OutlineState` to toggle state of current selectionPath. The `selectionPath` is
         *  put together inside `OutlineControl` where we iterate all the way to the root and add
         *  each item to the `currentPath` array. This way we collect list of item representing current
         *  current expansionPath.
         *
         *
         */
        /**
         *  Uses the `OutlineState` to toggle state of current selectionPath. The `selectionPath` is
         *  put together inside `OutlineControl` where we iterate all the way to the root and add
         *  each item to the `currentPath` array. This way we collect list of item representing current
         *  current expansionPath.
         *
         *
         * @return {?}
         */
        OutlineForComponent.prototype.toggleExpansion = /**
         *  Uses the `OutlineState` to toggle state of current selectionPath. The `selectionPath` is
         *  put together inside `OutlineControl` where we iterate all the way to the root and add
         *  each item to the `currentPath` array. This way we collect list of item representing current
         *  current expansionPath.
         *
         *
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.animationInProgress) {
                    // backup procedure in case onAnimationDone fails
                    setTimeout(function () {
                        if (_this.animationInProgress) {
                            // change only if its fails
                            _this.animationInProgress = false;
                        }
                    }, 200);
                    return;
                }
                if (!this.embedded) {
                    this.animationInProgress = true;
                }
                var /** @type {?} */ currentItem = core$1.ListWrapper.last(this.state.currentPath);
                this.state.toggleExpansion(this.state.currentPath, this.childrenForItem(currentItem));
                if (this.embedded) ;
            };
        /**
         * Angular anim. callback that sets back the flag to make sure we don't trigger animations
         * when one is in progress.
         *
         */
        /**
         * Angular anim. callback that sets back the flag to make sure we don't trigger animations
         * when one is in progress.
         *
         * @param {?} event
         * @return {?}
         */
        OutlineForComponent.prototype.onAnimationDone = /**
         * Angular anim. callback that sets back the flag to make sure we don't trigger animations
         * when one is in progress.
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.animationInProgress = false;
            };
        /**
         * Calculated indentation used to shift the nested section to the right or later on to the
         * left when RTL is supported
         *
         *
         */
        /**
         * Calculated indentation used to shift the nested section to the right or later on to the
         * left when RTL is supported
         *
         *
         * @param {?} currentLevel
         * @return {?}
         */
        OutlineForComponent.prototype.indentation = /**
         * Calculated indentation used to shift the nested section to the right or later on to the
         * left when RTL is supported
         *
         *
         * @param {?} currentLevel
         * @return {?}
         */
            function (currentLevel) {
                if (this.pushRootSectionOnNewLine && currentLevel > 0) {
                    currentLevel -= 1;
                }
                return (currentLevel === 0 && this.pushRootSectionOnNewLine)
                    ? 0 : (this.indentationPerLevel * currentLevel);
            };
        /**
         * Not all rows are visible by default, there can be a case where you dont want to render items
         * using outline. e.g. Datatable with detail row.
         */
        /**
         * Not all rows are visible by default, there can be a case where you dont want to render items
         * using outline. e.g. Datatable with detail row.
         * @param {?} item
         * @return {?}
         */
        OutlineForComponent.prototype.isVisible = /**
         * Not all rows are visible by default, there can be a case where you dont want to render items
         * using outline. e.g. Datatable with detail row.
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (core$1.isPresent(this.filterOut)) {
                    return !this.filterOut(item);
                }
                return true;
            };
        OutlineForComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-outline-for, [awOutlineFor]',
                        template: "<!--\n    Starts with the list, where nestingLevel is -1.\n    call template outlineItems to iterate and render each item\n-->\n<ng-container [ngIf]=\"list\" *ngTemplateOutlet=\"outlineItems;\n            context:{ $implicit: list, nestingLevel: 0, parentItem: null, expanded: true}\">\n</ng-container>\n\n<!--\n    Main Entry point for the recursion. this is called by the block above as well as byt the inner\n    piece that calls this template recursively again when an item has children\n-->\n<ng-template #outlineItems let-children let-nestingLevel=\"nestingLevel\"\n             let-parent=\"parentItem\" let-expanded=\"expanded\">\n\n    <ng-template ngFor let-item [ngForOf]=\"children\" let-rowIndex=\"index\">\n\n        <ng-container *ngTemplateOutlet=\"outlineItem;\n            context:{ $implicit: item, nestingLevel: nestingLevel, parentItem: parent,\n            expanded: expanded, rowIndex:rowIndex}\">\n        </ng-container>\n\n        <!--\n\n            Recursion piece:\n\n            For non embedded case when even if its not expanded we need to iterate children\n            as we want to apply animation that should go with ngIf which inside the outineItem\n            template\n\n            Dont recurse/ render items that are not visible.\n        -->\n\n        <ng-template [ngIf]=\"hasChildren(item) && (isExpanded(item, nestingLevel) || !embedded) && isVisible(item)\">\n            <ng-container *ngTemplateOutlet=\"outlineItems;\n                        context:{ $implicit: childrenForItem(item),\n                                nestingLevel: nestingLevel+1,\n                                expanded: isExpanded(item, nestingLevel),\n                                parentItem:item }\">\n            </ng-container>\n        </ng-template>\n    </ng-template>\n</ng-template>\n\n\n<!--\n    Renders actual outline node and applies animation while expanding and collapsing\n\n    [@section]=\"expanded || isExpanded(item) ? 'visible' : 'hidden'\"\n-->\n<ng-template #outlineItem let-item let-nestingLevel=\"nestingLevel\" let-parent=\"parentItem\"\n             let-rowIndex=\"rowIndex\"\n             let-expanded=\"expanded\">\n\n    <div class=\"w-outline-item\"\n         *ngIf=\"!embedded && expanded\"\n         [style.padding-left.px]=\"indentation(nestingLevel)\"\n         initNesting [setLevel]=\"nestingLevel\" [setParentItem]=\"parent\"\n         [setCurrrentItem]=\"item\"\n         [@section]\n         (@section.done)=\"onAnimationDone($event)\">\n\n        <ng-container *ngTemplateOutlet=\"controlTemplate;\n                        context:{ $implicit: item, nestingLevel: nestingLevel, rowIndex:rowIndex }\">\n        </ng-container>\n    </div>\n\n    <!--\n        When outline control is used as embedded meaning its inside e..g datatable we\n        cannot have any tags around it.\n\n        Todo: Refactor this in the way so we can do animation when table lines are\n        expanded. Since its embedded we can not have any wrapping element around, the template\n        is fully responsible\n    -->\n    <ng-template [ngIf]=\"embedded && expanded\"\n                 initNesting [setLevel]=\"nestingLevel\" [setParentItem]=\"parent\"\n                 [setCurrrentItem]=\"item\"\n    >\n        <ng-container #renderedItem *ngTemplateOutlet=\"controlTemplate;\n                        context:{ $implicit: item, nestingLevel: nestingLevel, rowIndex:rowIndex  }\">\n        </ng-container>\n    </ng-template>\n\n</ng-template>\n\n\n",
                        styles: [".is-outline-animation>div,::ng-deep .w-outline-item{overflow:hidden}"],
                        animations: [
                            animations.trigger('section', [
                                animations.state('*', animations.style({
                                    'overflow-y': 'hidden',
                                    'height': '*',
                                    'opacity': '1'
                                })),
                                animations.state('void', animations.style({
                                    'height': '0',
                                    'opacity': '0',
                                    'overflow-y': 'hidden'
                                })),
                                animations.transition('* => void', animations.animate('200ms ease-out')),
                                animations.transition('void => *', animations.animate('200ms ease-in'))
                            ]),
                        ]
                    },] },
        ];
        /** @nocollapse */
        OutlineForComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: core.ViewContainerRef },
                { type: animations.AnimationBuilder },
                { type: core.ElementRef }
            ];
        };
        OutlineForComponent.propDecorators = {
            list: [{ type: core.Input }],
            showExpansionControl: [{ type: core.Input }],
            children: [{ type: core.Input }],
            filterOut: [{ type: core.Input }],
            expandAll: [{ type: core.Input }],
            state: [{ type: core.Input }],
            indentationPerLevel: [{ type: core.Input }],
            externalTemplate: [{ type: core.Input }],
            context: [{ type: core.Input }],
            pushRootSectionOnNewLine: [{ type: core.Input }],
            format: [{ type: core.Input }],
            onItemSelected: [{ type: core.Output }],
            onExpandChange: [{ type: core.Output }],
            controlTemplate: [{ type: core.ContentChild, args: ['outline',] }],
            outlineItem: [{ type: core.ViewChild, args: ['renderedItem',] }]
        };
        return OutlineForComponent;
    }(BaseComponent));
    /**
     *
     * Since we can not directly set `*ngTemplateOutlet` context variables to the typescript class we
     * use this directive to do the Job
     *
     */
    var InitNestingDirective = (function () {
        function InitNestingDirective(outline) {
            this.outline = outline;
        }
        /**
         * @return {?}
         */
        InitNestingDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (core$1.isPresent(this.setLevel)) {
                    this.outline.state.currentLevel = this.setLevel;
                }
                if (core$1.isPresent(this.setCurrrentItem)) {
                    this.outline.currentItem = this.setCurrrentItem;
                    if (this.outline.isTreeModelFormat()) {
                        this.outline.currentItem['$$parentItem']
                            = ((this.setCurrrentItem)).parent;
                    }
                }
                if (!this.outline.isTreeModelFormat() && core$1.isPresent(this.setParentItem)) {
                    this.outline.currentItem['$$parentItem'] = this.setParentItem;
                }
            };
        InitNestingDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[initNesting]'
                    },] },
        ];
        /** @nocollapse */
        InitNestingDirective.ctorParameters = function () {
            return [
                { type: OutlineForComponent }
            ];
        };
        InitNestingDirective.propDecorators = {
            setLevel: [{ type: core.Input }],
            setCurrrentItem: [{ type: core.Input }],
            setParentItem: [{ type: core.Input }]
        };
        return InitNestingDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * OutlineControlComponent renders the indentation, arrow, and text for a node in an outline.
     * It should be used either in the body of an OutlineFor component, or inside datatable
     *
     *
     * ##Usage inside body:
     *
     *  Here you can see that we need to wrap out content inside ng-template which will push us
     *  give us current item item and then we can place OutlineControlComponent to control
     *  the tree.
     *
     * ```
     *  <aw-outline-for2 #ooo [list]="list" [hasChildren]="hasChildren">
     *
     *      <ng-template #outline let-item>
     *          <div class="my-section">
     *              <div class="outline">
     *                  <aw-outline-control>
     *                      {{item?.content}}
     *                  </aw-outline-control>
     *              </div>*
     *          </div>
     *      </ng-template>
     *  </aw-outline-for2>
     *
     *
     * ```
     *
     * We can
     *
     *
     */
    var OutlineControlComponent = (function (_super) {
        __extends(OutlineControlComponent, _super);
        function OutlineControlComponent(env, outlineState, parentControl, outlineFor) {
            var _this = _super.call(this, env) || this;
            _this.env = env;
            _this.outlineState = outlineState;
            _this.parentControl = parentControl;
            _this.outlineFor = outlineFor;
            /**
             *
             *  If TRUE it changes the behavior of the outline node text which click is triggered
             *  it selects the item and broadcast the `onItemSelected` event
             *
             */
            _this.allowSelection = false;
            _this.allowEdit = false;
            /**
             *
             * Triggers action when outline item is expanded
             *
             */
            _this.action = new core.EventEmitter();
            _this.isRootItem = false;
            return _this;
        }
        /**
         * @return {?}
         */
        OutlineControlComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                this.prepareControl();
            };
        /**
         *
         * We dont show expansion icons when there no children
         *
         */
        /**
         *
         * We dont show expansion icons when there no children
         *
         * @return {?}
         */
        OutlineControlComponent.prototype.hasExpansionControl = /**
         *
         * We dont show expansion icons when there no children
         *
         * @return {?}
         */
            function () {
                return this.outlineFor.hasChildren(this.item) && this.outlineFor.showExpansionControl;
            };
        /**
         * @return {?}
         */
        OutlineControlComponent.prototype.isSelected = /**
         * @return {?}
         */
            function () {
                return this.outlineFor.state.selectedItem === this.item;
            };
        /**
         * @return {?}
         */
        OutlineControlComponent.prototype.calculateStyleClass = /**
         * @return {?}
         */
            function () {
                if (!this.hasExpansionControl() ||
                    (this.outlineFor.pushRootSectionOnNewLine && core$1.isBlank(this.item.$$parentItem))) {
                    return '';
                }
                if (this.outlineFor.embedded) {
                    return this.outlineFor.isExpanded(this.item) ? 'icon-slim-arrow-down'
                        : 'icon-slim-arrow-right';
                }
                else {
                    return this.outlineFor.isExpanded(this.item)
                        ? 'icon-slim-arrow-right outline-icon-expanded' : 'icon-slim-arrow-right';
                }
            };
        /**
         * Collapses and expands current node
         *
         */
        /**
         * Collapses and expands current node
         *
         * @param {?} event
         * @return {?}
         */
        OutlineControlComponent.prototype.toggleExpansion = /**
         * Collapses and expands current node
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.outlineFor.state.currentPath = [];
                var /** @type {?} */ currentPath = this.item;
                while (core$1.isPresent(currentPath)) {
                    this.outlineFor.state.currentPath.unshift(currentPath);
                    currentPath = currentPath.$$parentItem;
                }
                this.outlineFor.toggleExpansion();
                var /** @type {?} */ payload = {
                    item: this.item,
                    expanded: this.outlineFor.state.isExpanded(this.item)
                };
                this.action.emit(payload);
                this.outlineFor.onExpandChange.emit(payload);
                event.stopPropagation();
            };
        /**
         * @return {?}
         */
        OutlineControlComponent.prototype.select = /**
         * @return {?}
         */
            function () {
                this.outlineFor.state.selectedItem = this.item;
                this.outlineFor.onItemSelected.emit(this.item);
            };
        /**
         * @return {?}
         */
        OutlineControlComponent.prototype.prepareControl = /**
         * @return {?}
         */
            function () {
                if (core$1.isBlank(this.outlineFor) && core$1.isPresent(this.outlineState)) {
                    this.outlineFor = this.outlineState.outlineFor;
                }
                core$1.assert(core$1.isPresent(this.outlineFor), 'Missing outlineFor component');
                if (this.outlineFor.embedded) {
                    var /** @type {?} */ level = this.outlineFor.state.currentLevel;
                    if (this.outlineFor.pushRootSectionOnNewLine && level > 0) {
                        level -= 1;
                    }
                    this.indentation = (this.outlineFor.indentationPerLevel * level);
                }
                this.item = this.outlineFor.currentItem;
                this.isRootItem = core$1.isBlank(this.item.$$parentItem);
            };
        OutlineControlComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-outline-control',
                        template: "<!--\n    Control is just the two flex box items for displaying expand/collapse icon and content\n\n    Since we animate only standalone/non-embedded case now then we need to also animate the icon\n    so we use only icon-slim-arrow-right and do tranformation on top of this to make it rotate.\n\n    If embedded case we use both icons icon-slim-arrow-right / icon-slim-arrow-down\n-->\n<div class=\"w-outline-control\"\n     [ngClass]=\"{'outline-u-unselectable-text': outlineFor.pushRootSectionOnNewLine && !item.$$parentItem}\">\n    <div class=\"outline-icon sap-icon\"\n         *ngIf=\"!outlineFor.pushRootSectionOnNewLine || !isRootItem\"\n         (click)=\"toggleExpansion($event)\"\n         [style.margin-left.px]=\"indentation\"\n         [ngClass]=\"calculateStyleClass()\">\n    </div>\n\n    <ng-container *ngIf=\"allowSelection; then withSelection else withoutSelection\">\n    </ng-container>\n</div>\n\n<!--\n We support two case for the content\n\n Selection: When you click on the content it will add extra class so you can style currently\n selected item as well as broadcast event outside so developer can hook in some custom logic\n\n If we dont support selection: Then clicking on the content is just like clicking on expandable\n icon, it toggles the state\n-->\n\n<ng-template #withSelection>\n     <span class=\"outline-content outline-content-selected\" *ngIf=\"!allowEdit && isSelected()\">\n        <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n    </span>\n    <span class=\"outline-content\" *ngIf=\"!allowEdit && !isSelected()\" (click)=\"select()\">\n        <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n    </span>\n\n</ng-template>\n\n\n<ng-template #withoutSelection>\n    <span *ngIf=\"!allowEdit\" class=\"outline-content\" (click)=\"toggleExpansion($event)\">\n        <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n    </span>\n    <span *ngIf=\"allowEdit\" class=\"outline-content\">\n        <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n    </span>\n</ng-template>\n\n\n<ng-template #ngContent>\n    <ng-content></ng-content>\n</ng-template>\n\n",
                        styles: [".w-outline-control{overflow:hidden;display:flex;flex-wrap:nowrap;cursor:pointer}.w-outline-control .outline-icon{flex:0 0 15px;color:#ababab;font-size:14px;font-weight:700;min-width:11px;align-self:center;transition:-webkit-transform 50ms ease-in;transition:transform 50ms ease-in;transition:transform 50ms ease-in,-webkit-transform 50ms ease-in;-webkit-transform-origin:25% 65%;transform-origin:25% 65%;-webkit-transform-style:preserve-3d;transform-style:preserve-3d}.w-outline-control .outline-icon.outline-icon-expanded{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.w-outline-control .outline-content{flex:1 1 auto;flex-wrap:wrap;padding:0 4px}.w-outline-control .outline-content.outline-content-selected{cursor:default;font-weight:700}.outline-u-unselectable-text{-webkit-user-select:none;-moz-user-select:none;-o-user-select:none;-ms-user-select:none;user-select:none;cursor:auto}"],
                    },] },
        ];
        /** @nocollapse */
        OutlineControlComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: OutlineState, decorators: [{ type: core.Optional }, { type: core.Inject, args: [core.forwardRef(function () { return OutlineState; }),] }] },
                { type: OutlineControlComponent, decorators: [{ type: core.SkipSelf }, { type: core.Optional }, { type: core.Inject, args: [core.forwardRef(function () { return OutlineControlComponent; }),] }] },
                { type: OutlineForComponent, decorators: [{ type: core.SkipSelf }, { type: core.Optional }, { type: core.Inject, args: [core.forwardRef(function () { return OutlineForComponent; }),] }] }
            ];
        };
        OutlineControlComponent.propDecorators = {
            title: [{ type: core.Input }],
            allowSelection: [{ type: core.Input }],
            allowEdit: [{ type: core.Input }],
            action: [{ type: core.Output }]
        };
        return OutlineControlComponent;
    }(BaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWOutlineForModule = (function () {
        function AWOutlineForModule() {
        }
        AWOutlineForModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            OutlineForComponent,
                            OutlineControlComponent,
                            InitNestingDirective
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            AWCoreComponentModule
                        ],
                        exports: [
                            OutlineForComponent,
                            OutlineControlComponent,
                            forms.ReactiveFormsModule,
                            forms.FormsModule
                        ],
                        providers: []
                    },] },
        ];
        return AWOutlineForModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Renders html text area component
     *
     * ### Example
     *
     * ```typescript
     *
     * \@Component({
     *          selector: 'myNote' ,
     *          template: '<aw-text-area [value]="inputValue" [autoResize]="autoResize" >
     *              </aw-text-area>'
     *      })
     *      export class MyNoteComponent
     *      {
     *          inputValue: string = 'Some really long text';
     *          autoResize: false;
     *      }
     *
     * ```
     *  Note: if you are using this outside of FormTable please provide your own FormGroup
     */
    var /** @type {?} */ TEXTAREA_CONTROL_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return TextAreaComponent; }),
        multi: true
    };
    var TextAreaComponent = (function (_super) {
        __extends(TextAreaComponent, _super);
        function TextAreaComponent(env, parentContainer) {
            var _this = _super.call(this, env, parentContainer) || this;
            _this.env = env;
            _this.parentContainer = parentContainer;
            /**
             *
             * A value used to store and read user input
             *
             */
            _this.value = '';
            /**
             * Spefifies visible number of lines
             */
            _this.rows = 2;
            /**
             * Specifies visible width
             */
            _this.columns = 20;
            /**
             * when this option is TRUE and user starts typing it will maximize textarea's width and height
             */
            _this.autoResize = true;
            return _this;
        }
        /**
         * @return {?}
         */
        TextAreaComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                _super.prototype.ngOnInit.call(this);
                _super.prototype.registerFormControl.call(this, this.value);
                this.formControl.valueChanges.pipe(operators.distinctUntilChanged()).subscribe(function (val) {
                    _this.value = val;
                    _this.onModelChanged(_this.value);
                });
            };
        /**
         * Internal. Please see ControlValueAccessor
         *
         */
        /**
         * Internal. Please see ControlValueAccessor
         *
         * @param {?} value
         * @return {?}
         */
        TextAreaComponent.prototype.writeValue = /**
         * Internal. Please see ControlValueAccessor
         *
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value !== this.value) {
                    this.value = value;
                    this.formControl.setValue(value, { onlySelf: true });
                }
            };
        TextAreaComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-text-area',
                        template: "<div *ngIf=\"editable\" [formGroup]=\"formGroup\">\n\n\t<textarea\n        pInputTextarea\n        [attr.name]=\"name\"\n        class=\"w-text-area\"\n        [class.u-validation-error]=\"!(formControl.valid || (formControl.pristine))\"\n        [class.disabled]=\"disabled\"\n        formControlName=\"{{name}}\"\n        [rows]=\"rows\"\n        [cols]=\"columns\"\n        [autoResize]=\"autoResize\"\n        [attr.placeholder]=\"placeHolder\"\n\n    ></textarea>\n\n</div>\n\n\n<ng-template [ngIf]=\"!editable\">\n    <aw-string [value]=\"value\"></aw-string>\n</ng-template>\n",
                        styles: [""],
                        providers: [
                            TEXTAREA_CONTROL_VALUE_ACCESSOR,
                            { provide: BaseFormComponent, useExisting: core.forwardRef(function () { return TextAreaComponent; }) }
                        ]
                    },] },
        ];
        /** @nocollapse */
        TextAreaComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: BaseFormComponent, decorators: [{ type: core.SkipSelf }, { type: core.Optional }, { type: core.Inject, args: [core.forwardRef(function () { return FormRowComponent; }),] }] }
            ];
        };
        TextAreaComponent.propDecorators = {
            value: [{ type: core.Input }],
            rows: [{ type: core.Input }],
            columns: [{ type: core.Input }],
            autoResize: [{ type: core.Input }]
        };
        return TextAreaComponent;
    }(BaseFormComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWTextAreaModule = (function () {
        function AWTextAreaModule() {
        }
        AWTextAreaModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            TextAreaComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            primeng.InputTextareaModule,
                            AWStringFieldModule
                        ],
                        entryComponents: [
                            TextAreaComponent
                        ],
                        exports: [
                            TextAreaComponent,
                            forms.ReactiveFormsModule,
                            forms.FormsModule
                        ],
                        providers: []
                    },] },
        ];
        return AWTextAreaModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     *
     * Page-Notification component that implements a notification system for the user regarding
     * the current object he's working on. Typical notification are:
     *      Success - saved.
     *      Warning - Sourcing request requires 3 suppliers.
     *      Error   - cannot connect to server, check internet connection.
     *
     *
     *
     * Usage 1:  As part of page wrapper.
     *
     * \@Component({
     *    selector: 'MyPage' ,
     *    template: `
     *       <aw-object-page-wrapper
     *                        [title]="MyPage"
     *                        [objectType]="MyType"
     *                        [notification]="pageNotification">
     *             page content
     *          `
     *       </aw-object-pager-wrapper>
     *    })
     *    export class MyPage
     *    {
     *
     *        pageNotification: PageNotification = new PageNotification("warn",
     *                              "Policy Warning", "This request requires 3 bids.");
     *
     *        constructor ()
     *        {
     *        }
     *    }
     *
     * Usage 2: directly into the page.
     *
     * \@Component({
     *    selector: 'registration' ,
     *    template: `
     *      <aw-header></aw-header>
     *        Page Header
     *
     *        <ng-template [ngIf]="hasNotifications()">
     *          <div class="ui-g-12 u-nopadding">
     *            <aw-page-notification [notification]="notification"></aw-page-notification>
     *          </div>
     *        </ng-template>
     *
     *      <aw-footer></aw-footer>
     *    `
     *    })
     *    export class MyPage
     *    {
     *
     *        notification: PageNotification = new PageNotification("warning",
     *                              "Policy Warning", "This request requires 3 bids.");
     *
     *        constructor ()
     *        {
     *        }
     *    }
     *
     */
    var PageNotificationComponent = (function (_super) {
        __extends(PageNotificationComponent, _super);
        function PageNotificationComponent(element, env) {
            var _this = _super.call(this, env) || this;
            _this.element = element;
            _this.env = env;
            return _this;
        }
        /**
         * @return {?}
         */
        PageNotificationComponent.prototype.notificationClass = /**
         * @return {?}
         */
            function () {
                return "notification-" + this.notification.type;
            };
        /**
         * @return {?}
         */
        PageNotificationComponent.prototype.notificationIcon = /**
         * @return {?}
         */
            function () {
                return "ariba-icon icon-" + this.notification.type;
            };
        PageNotificationComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-page-notification',
                        template: "<div class=\"page-notification\">\n    <div [class]=\"notificationClass()\">\n        <i [class]=\"notificationIcon()\"></i>\n        <span class=\"content\">\n              <span class=\"title\">{{notification.title}}</span>\n              <span class=\"description\">\n                    <ng-template *ngIf=\"notification.hasTemplate(); else description\"\n                                 [ngTemplateOutlet]=\"notification.contentTmpl\">\n                    </ng-template>\n                    <ng-template #description>{{notification.description}}</ng-template>\n              </span>\n      </span>\n    </div>\n</div>\n",
                        styles: [".page-notification{margin:0 0 5px}.notification-error,.notification-info,.notification-success,.notification-warning{padding:9px 8px}.notification-error i,.notification-info i,.notification-success i,.notification-warning i{font-size:24px;margin:10px}.notification-success i{color:#58b957}.notification-info i{color:#199de0}.notification-warning i{color:#f90}.notification-error i{color:#c00}.notification-success{background-color:#f1f9f1;border:1px solid rgba(88,185,87,.5)}.notification-info{background-color:#edf8fd;border:1px solid rgba(25,157,224,.5)}.notification-warning{background-color:#fff8dd;border:1px solid rgba(255,153,0,.5)}.notification-error{background-color:#ffebeb;border:1px solid rgba(204,0,0,.5)}.icon-error:before{content:\"\\EA9D\"}.icon-warning:before{content:\"\\EA9C\"}.content{vertical-align:super}.title{font-weight:700;margin-right:10px}"]
                    },] },
        ];
        /** @nocollapse */
        PageNotificationComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core$1.Environment }
            ];
        };
        PageNotificationComponent.propDecorators = {
            notification: [{ type: core.Input }]
        };
        return PageNotificationComponent;
    }(BaseComponent));
    /**
     * Page Notification are messages for this page only. It displays in the center of the page
     * right under page title. Typical page notifications are 'save confirmation',
     * 'error during submit', warnings of field requirements, etc.
     */
    var /**
     * Page Notification are messages for this page only. It displays in the center of the page
     * right under page title. Typical page notifications are 'save confirmation',
     * 'error during submit', warnings of field requirements, etc.
     */ PageNotification = (function () {
        function PageNotification(type, title, description, contentTmpl) {
            this.type = type;
            this.title = title;
            this.description = description;
            this.contentTmpl = contentTmpl;
        }
        /**
         * @return {?}
         */
        PageNotification.prototype.hasTemplate = /**
         * @return {?}
         */
            function () {
                return core$1.isPresent(this.contentTmpl);
            };
        /**
         * @return {?}
         */
        PageNotification.prototype.toString = /**
         * @return {?}
         */
            function () {
                return this.type + ', title: ' + this.title + ', description:  ' + this.description;
            };
        return PageNotification;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWPageNotificationModule = (function () {
        function AWPageNotificationModule() {
        }
        AWPageNotificationModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            PageNotificationComponent
                        ],
                        imports: [
                            common.CommonModule
                        ],
                        entryComponents: [
                            PageNotificationComponent
                        ],
                        exports: [
                            PageNotificationComponent
                        ],
                        providers: []
                    },] },
        ];
        return AWPageNotificationModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Represents an event triggered when a page has been initialized.
     *
     */
    var /**
     * Represents an event triggered when a page has been initialized.
     *
     */ PageInitialized = (function () {
        function PageInitialized(title) {
            this.title = title;
        }
        /**
         * @return {?}
         */
        PageInitialized.prototype.toString = /**
         * @return {?}
         */
            function () {
                return "PageInitializied(title: " + this.title + ")";
            };
        return PageInitialized;
    }());
    /**
     * Represents an event triggered when a page has been destroyed.
     *
     */
    var /**
     * Represents an event triggered when a page has been destroyed.
     *
     */ PageDestroyed = (function () {
        function PageDestroyed(title) {
            this.title = title;
        }
        /**
         * @return {?}
         */
        PageDestroyed.prototype.toString = /**
         * @return {?}
         */
            function () {
                return "PageDestroyed(title: " + this.title + ")";
            };
        return PageDestroyed;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Page LifeCycle Service monitors all page initialization and destructions.
     * The purpose of this service is to help the application monitor page lifecycle, subscribe
     * to lifecycle events and execute actions such as user analytics.
     *
     * Usage:
     *
     *    1.  Inject PageLifeCycleService into your constructor
     *
     *    constructor(pageLifecycle:PageLifeCycleService) {
     *        pageLifecycle.pageEvents.subscribe(event:Event => {
     *            if(event instanceof PageInitialized) {
     *            }
     *            // PageDestroyed
     *
     *        });
     *     }
     */
    var PageLifeCycleService = (function () {
        /**
         *
         */
        function PageLifeCycleService() {
            /**
             * Page event queue when all page lifecycle events: init, destroy are emitted.
             * Listeners can subscribe to these events.
             */
            this.pageEvents = new rxjs.Subject();
        }
        /**
         * Called when page is initialized.
         * @param {?} pageTitle
         * @return {?}
         */
        PageLifeCycleService.prototype.onPageInit = /**
         * Called when page is initialized.
         * @param {?} pageTitle
         * @return {?}
         */
            function (pageTitle) {
                this.pageEvents.next(new PageInitialized(pageTitle));
            };
        /**
         * Call when page has been destroyed
         * @param {?} pageTitle
         * @return {?}
         */
        PageLifeCycleService.prototype.onPageDestroy = /**
         * Call when page has been destroyed
         * @param {?} pageTitle
         * @return {?}
         */
            function (pageTitle) {
                this.pageEvents.next(new PageDestroyed(pageTitle));
            };
        PageLifeCycleService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        PageLifeCycleService.ctorParameters = function () { return []; };
        return PageLifeCycleService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @enum {number} */
    var PageType = {
        Init: 0,
        // Init Page type
        Login: 1,
        // Login Page
        Object: 2,
        // Object detail page
        List: 3,
        // List Page
        MasterDetail: 4,
        // MasterDetail
        Dashboard: 5,
        // Dashboard page
        Modal: 6,
    };
    PageType[PageType.Init] = "Init";
    PageType[PageType.Login] = "Login";
    PageType[PageType.Object] = "Object";
    PageType[PageType.List] = "List";
    PageType[PageType.MasterDetail] = "MasterDetail";
    PageType[PageType.Dashboard] = "Dashboard";
    PageType[PageType.Modal] = "Modal";
    /**
     *  Page wrapper is the base class for all pages. The idea is that there are different page types
     *  in an Application. A List Page renders a list of objects, ex: customers, requests, PO.  And
     *  a object page will render one object in detail.
     *
     *  They share common attributes such as page type and page id.
     *
     *  Ariba Page have a life cycle. When page starts up, it's initialized. And when the page is
     *  destroyed, it'll be complete.
     * @abstract
     */
    var /**
     *  Page wrapper is the base class for all pages. The idea is that there are different page types
     *  in an Application. A List Page renders a list of objects, ex: customers, requests, PO.  And
     *  a object page will render one object in detail.
     *
     *  They share common attributes such as page type and page id.
     *
     *  Ariba Page have a life cycle. When page starts up, it's initialized. And when the page is
     *  destroyed, it'll be complete.
     * @abstract
     */ PageWrapper = (function (_super) {
        __extends(PageWrapper, _super);
        function PageWrapper(env, pageType, componentRegistry, pageLifecycleService) {
            var _this = _super.call(this, env) || this;
            _this.env = env;
            _this.componentRegistry = componentRegistry;
            _this.pageLifecycleService = pageLifecycleService;
            /**
             * What type of page this is.
             *
             */
            _this.pageType = PageType.Init;
            _this.pageType = pageType;
            return _this;
        }
        /**
         * Get the unique Id for this page.
         *
         * @return {?}
         */
        PageWrapper.prototype.getId = /**
         * Get the unique Id for this page.
         *
         * @return {?}
         */
            function () {
                if (this.id) {
                    return this.id;
                }
                this.id = this.generatePageId();
            };
        return PageWrapper;
    }(BaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     *
     * Header component that implements consistent styling, behavior for an Ariba page.
     * Header includes a menu, user profile, and alerts.
     *
     * \@Component({
     *    selector: 'registration' ,
     *    template: `
     *                <aw-page-header [showBackAction]="true" userName="Chad Noll"
     *                                 [menuItems]="menuItems" [notifications]="userNotifications">
     *                     <div class="page-header-center">
     *                           <a class="navbar-brand" tabindex="0" href="/">
     *                               <img class="navbar-logo" src="./images/SAP_Ariba_DB.png"
     *                                   alt="Go to homepage" data-pin-nopin="true">
     *                          </a>
     *                     </div>
     *                </aw-page-header>
     *
     *    `
     *    })
     *    export class MyPage
     *    {
     *      menuItems: PageMenuItem[] = [new PageMenuItem('icon-home', 'Home', '/play/'),
     *                                  new PageMenuItem('icon-expense-report', 'Reports',
     *                                                     '/play/pageheader'),
     *                                  new PageMenuItem('icon-sales-order', 'Purchase Order',
     *                                                       '/play/pageheader'),
     *                                  new PageMenuItem('icon-account', 'Accounts',
     *                                                     '/play/pageheader')];
     *
     *     userNotifications: UserNotification[] = [
     *       new UserNotification('icon-expense-report', 'Expense report EXP453 has been approved.',
     *                             '/play/'),
     *         new UserNotification('icon-sales-order', 'Sales Order SO1234 has been created.',
     *                             '/play/'),
     *           new UserNotification('icon-account', 'Supplier account SA1234 has been updated.',
     *                               '/play/')
     *        ];
     *
     *        constructor ()
     *        {
     *        }
     *
     *    }
     */
    var PageHeaderComponent = (function (_super) {
        __extends(PageHeaderComponent, _super);
        function PageHeaderComponent(element, env, routing) {
            var _this = _super.call(this, env) || this;
            _this.element = element;
            _this.env = env;
            _this.routing = routing;
            /**
             * Should the user notification icon be hidden. Default it to show the icon even
             * if there's no notifications.
             *
             */
            _this.hideNotification = false;
            /**
             * displays the back link that navigates user to the previous page when clicked.
             */
            _this.showBackAction = false;
            _this.showNotificationPanel = false;
            return _this;
        }
        /**
         * @return {?}
         */
        PageHeaderComponent.prototype.backAction = /**
         * @return {?}
         */
            function () {
                this.routing.goBack();
            };
        /**
         * Do i have any menu items.
         *
         */
        /**
         * Do i have any menu items.
         *
         * @return {?}
         */
        PageHeaderComponent.prototype.hasMenuItems = /**
         * Do i have any menu items.
         *
         * @return {?}
         */
            function () {
                return (this.menuItems && this.menuItems.length > 0);
            };
        /**
         * Toggle the side navigation menu.
         */
        /**
         * Toggle the side navigation menu.
         * @return {?}
         */
        PageHeaderComponent.prototype.showHideMenu = /**
         * Toggle the side navigation menu.
         * @return {?}
         */
            function () {
                this.sidenav.toggle();
            };
        /**
         * Do I have any notifications.
         *
         */
        /**
         * Do I have any notifications.
         *
         * @return {?}
         */
        PageHeaderComponent.prototype.hasNotifications = /**
         * Do I have any notifications.
         *
         * @return {?}
         */
            function () {
                return core$1.isPresent(this.notifications) && this.notifications.length > 0;
            };
        /**
         * toggling wheather notification panel is displayed or not.
         */
        /**
         * toggling wheather notification panel is displayed or not.
         * @return {?}
         */
        PageHeaderComponent.prototype.toggleNotificationPanel = /**
         * toggling wheather notification panel is displayed or not.
         * @return {?}
         */
            function () {
                this.showNotificationPanel = !this.showNotificationPanel;
            };
        PageHeaderComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-page-header',
                        template: "<nav class=\"navbar page-header\" role=\"navigation\">\n\n    <div class=\"ui-g\">\n        <div class=\"ui-g-12 ui-md-4 navbar-left\">\n\n        <span *ngIf=\"hasMenuItems()\">\n            <a (click)=\"showHideMenu()\">\n                <i class=\"sap-icon icon-paging\"></i>\n            </a>\n\n            <!-- Side menu -->\n            <aw-sidenav #sidemenu [items]=\"menuItems\"></aw-sidenav>\n        </span>\n            <!-- End Hamburger menu. -->\n\n            <!--  back action -->\n            <span class=\"back-action\">\n            <a (click)=\"backAction()\">\n                <i *ngIf=\"showBackAction\" class=\"sap-icon icon-arrow-left\" role=\"button\"></i>\n            </a>\n        </span>\n\n        </div>\n\n        <div class=\"ui-g-12 ui-md-4 navbar-center\">\n\n            <!-- central section.  Application can add Ariba-logo, search box, etc -->\n            <ng-content select=\".page-header-center\"></ng-content>\n        </div>\n\n        <div class=\"ui-g-12 ui-md-4 navbar-right\">\n        <span *ngIf=\"userName\">\n            <img id=\"userProfilePicture\" class=\"profile-logo\" aria-hidden=\"true\"\n                 [title]=\"userName\" src=\"{{assetFolder}}/images/default_image_small.png\">\n            <span class=\"profile-user\" title=\"{{userName}}\">{{userName}}</span>\n        </span>\n\n            <span *ngIf=\"!hideNotification\" class=\"notification-container\">\n\n            <i #notificationIcon class=\"ariba-icon icon-notification\"\n               (click)=\"toggleNotificationPanel()\"></i>\n            <span *ngIf=\"hasNotifications()\" class=\"notification-badge\" aria-hidden=\"true\">{{notifications.length}}</span>\n\n                <!-- Originally I was using p-overlay-panel, however, it doesn't position correctly under the notification icon.\n                     The positioning logic in prime ng needs some more investigation. So for now, use a div instead-->\n            <div *ngIf=\"showNotificationPanel\" class=\"notification-panel\">\n\n                <div class=\"notification-header\">\n                     Notifications\n                </div>\n\n                <ul class=\"notification-content\">\n                    <li *ngFor=\"let noti of notifications\" class=\"notification-item\">\n                        <a [routerLink]=\"noti.link\">\n                            <span class=\"notification-item-icon\"><i\n                                [ngClass]=\"'sap-icon ' + noti.icon\"></i></span>\n                            {{noti.label}}\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </span>\n        </div>\n\n\n    </div>\n</nav>\n",
                        styles: [".page-header i{font-size:32px}.page-header .icon-paging{font-size:30px;position:relative;top:2px}.back-action{display:inline-block;margin-left:15px}.back-action i{position:relative;top:3px}.navbar{background:#000;color:#fff}.navbar-left{padding-left:15px;height:50px}.navbar-center{text-align:center;height:50px}.navbar-right{text-align:right;height:50px}.profile-logo{width:30px;height:30px;position:relative;top:2px}.profile-user{vertical-align:super;margin-right:30px}.icon-notification:before{content:\"\\eA14\"}.navbar #sidebar-menu-icon{position:relative;top:.5em}.notification-container{position:relative;margin-right:20px;display:inline-block}.notification-badge{display:inline-block;padding:2px 5px;font-size:12px;font-weight:700;color:#fff;background-color:#c00;border-radius:10px;position:absolute;top:0;left:16px}.notification-panel{position:absolute;right:-27px;top:45px;width:350px;color:#767676;box-shadow:0 2px 10px 0 rgba(0,0,0,.13);background-color:#fff;overflow:hidden;transition:all .3s ease-in-out}.notification-panel .notification-header{background-color:#f3f3f3;font-size:16px;height:50px;line-height:50px;text-align:center}.notification-panel .notification-content{padding:0;margin:0}.notification-panel .notification-item{height:50px;border-top:1px solid #d7d7d7;padding:15px 10px;white-space:nowrap;text-overflow:ellipsis}.notification-panel .notification-item a{color:#767676;text-decoration:none;line-height:35px}.notification-panel .notification-item:hover{background-color:#f7f8fa}.notification-panel .notification-item-icon{margin-right:15px;color:#767676;display:inline-block;margin-top:10px;vertical-align:middle}"]
                    },] },
        ];
        /** @nocollapse */
        PageHeaderComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core$1.Environment },
                { type: core$1.RoutingService }
            ];
        };
        PageHeaderComponent.propDecorators = {
            menuItems: [{ type: core.Input }],
            notifications: [{ type: core.Input }],
            hideNotification: [{ type: core.Input }],
            showBackAction: [{ type: core.Input }],
            userName: [{ type: core.Input }],
            sidenav: [{ type: core.ViewChild, args: ['sidemenu',] }]
        };
        return PageHeaderComponent;
    }(BaseComponent));
    /**
     * PageMenuItem represents an item in the page menu structure.
     */
    var /**
     * PageMenuItem represents an item in the page menu structure.
     */ PageMenuItem = (function () {
        /**
         * @param icon    - Icon of this menu item.
         * @param label   - label of this item.
         * @param link    - link to the destination when user clicks on it.
         */
        function PageMenuItem(icon, label, link) {
            this.icon = icon;
            this.label = label;
            this.link = link;
        }
        /**
         * @return {?}
         */
        PageMenuItem.prototype.toString = /**
         * @return {?}
         */
            function () {
                return "PageMenuItem: (label, " + this.label + ")";
            };
        return PageMenuItem;
    }());
    /**
     * notification for the current logged in user.
     * Ex:  PR2049 has been approved.
     *      Order PO518 received.
     */
    var /**
     * notification for the current logged in user.
     * Ex:  PR2049 has been approved.
     *      Order PO518 received.
     */ UserNotification = (function () {
        /**
         * @param icon   - alert notification icon
         * @param label  - alert notification label
         * @param link   - link
         */
        function UserNotification(icon, label, link) {
            this.icon = icon;
            this.label = label;
            this.link = link;
        }
        /**
         * @return {?}
         */
        UserNotification.prototype.toString = /**
         * @return {?}
         */
            function () {
                return "PageUserNotification: (label, " + this.label + ")";
            };
        return UserNotification;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Footer component that implements consistent styling, behavior.
     * This footer component self contained.
     *
     * \@Component({
     *    selector: 'registration' ,
     *    template: `
     *
     *          <aw-page-footer>
     *               <div class="page-footer-logo">
     *                   <img src="images/ariba_logo_white_bkgd.png">
     *               </div>
     *               <div class="page-footer-user-info">
     *                   Chad Noll (cnoll) last visit {{last_visited | date:'MM/dd/yyyy h:mma' }}
     *                   | Buyer Organization
     *               </div>
     *               <span class="page-footer-copyright" #copyright>
     *                   <p>© 2020–2028 The Future, Inc. All rights reserved</p>
     *               </span>
     *           </aw-page-footer>
     *    `
     *    })
     *    export class MyPage
     *    {
     *        constructor ()
     *        {
     *        }
     *
     *    }
     */
    var PageFooterComponent = (function (_super) {
        __extends(PageFooterComponent, _super);
        function PageFooterComponent(element, env) {
            var _this = _super.call(this, env) || this;
            _this.element = element;
            _this.env = env;
            /**
             * show default copyright. If copyright is passed in, then show the passed in one.
             */
            _this.showDefaultCopyright = true;
            return _this;
        }
        /**
         * @return {?}
         */
        PageFooterComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @return {?}
         */
        PageFooterComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.showDefaultCopyright = !core$1.isPresent(this.copyright);
            };
        PageFooterComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-page-footer',
                        template: "<div class=\"page-footer\">\n    <div class=\"ui-g\">\n        <div class=\"ui-g-12 ui-md-8\">\n\n            <ng-content select=\".page-footer-logo\"></ng-content>\n\n            <div class=\"user-info\">\n                <ng-content select=\".page-footer-user-info\"></ng-content>\n            </div>\n\n            <ul class=\"footer-links\">\n                <li role=\"presentation\"><a href=\"http://www.ariba.com/legal/ariba_tou.cfm\">Terms of\n                    Use</a></li>\n                <li role=\"presentation\"><a\n                    href=\"http://www.ariba.com/legal/ariba_security_policy.cfm\">Security\n                    Disclosure</a></li>\n                <li role=\"presentation\"><a\n                    href=\"http://www.ariba.com/legal/ariba_privacy_statement.cfm\">Privacy\n                    Statement</a></li>\n                <li role=\"presentation\"><a\n                    href=\"http://www.ariba.com/legal/ariba-privacy-statement\">Cookie Statement</a>\n                </li>\n                <li role=\"presentation\"><a\n                    href=\"http://www.ariba.com/legal/ariba-privacy-statement\">Participant\n                    Statement</a></li>\n            </ul>\n        </div>\n\n        <div class=\"ui-g-12 ui-md-4\">\n            <div class=\"u-bottom-align\"></div>\n            <div class=\"u-hright copyright\">\n                <ng-content select=\".page-footer-copyright\"></ng-content>\n            </div>\n\n            <!-- Default Copyright -->\n            <div *ngIf=\"showDefaultCopyright\" class=\"u-hright copyright\">\n                <p>\u00A9 1996\u20132017 Ariba, Inc. All rights reserved</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n",
                        styles: [".page-footer{background:#fff;padding:15px 0 0;font-size:11px;border-top:1px solid #d7d7d7}.page-footer .user-info{color:#ccc}.page-footer .ui-g{margin:0 auto}.page-footer .copyright{color:#ccc}.footer-links{list-style:none;margin:0 -15px;padding:0;font-size:10px}.footer-links li{float:left}.footer-links:after,.footer-links:before{content:\" \";display:table}.footer-links:after{clear:both}.footer-links>li,.footer-links>li>a{position:relative;display:block}.footer-links>li>a{padding:10px 15px;color:#199de0}"]
                    },] },
        ];
        /** @nocollapse */
        PageFooterComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core$1.Environment }
            ];
        };
        PageFooterComponent.propDecorators = {
            copyright: [{ type: core.ContentChild, args: ['copyright',] }]
        };
        return PageFooterComponent;
    }(BaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     *
     * Object Page Wrapper Component renders any object instance in detail. It has a uniform layout,
     * Header, Page title, Page notification, actions, content, and Footer.
     *
     *
     *  Usage:
     *
     * \@Component({
     *    selector: 'RFXPage' ,
     *    template: `
     *       <aw-object-page-wrapper
     *                        [title]="rfxEntity.headerInfo.title"
     *                        [objectType]="rfxEntity.headerInfo.eventTypeString"
     *                        [notification]="pageNotification">
     *
     *
     *           <aw-page-actions>
     *               <aw-button [type]="'submit'" [name]="'edit'" [value]="edit" [style]="'primary'">
     *                   Edit
     *                </aw-button>
     *               <aw-button [type]="'button'" [name]="'cancel'" [value]="cancel"
     *                                                         [style]="'secondary'">
     *                  Cancel
     *               </aw-button>
     *           </aw-page-actions>
     *
     *           <aw-page-content>
     *             <aw-section title="Sourcing request info" (onStateChanged)="onStateChange($event)">
     *
     *                   <m-context [object]="rfxEntity.headerInfo"
     *                              [operation]="this.editabilityState.headerInfoOp"
     *                              layout="Inspect"
     *                              uiGroup="HeaderGeneral"
     *                   >
     *                       <m-include-component></m-include-component>
     *                   </m-context>
     *
     *             </aw-section>
     *           </aw-page-content>
     *       </aw-object-page-wrapper>
     *    `
     *    })
     *    export class RFXPage
     *    {
     *       // To keep track what section is editable and which read only
     *       editabilityState: EditabilityState;
     *
     *       // Current RFX event
     *       rfxEntity: RfxEventEntity;
     *
     *       // Notifications
     *       notification: PageNotification = new PageNotification("warn",
     *                              "Policy Warning", "This request requires 3 bids.");
     *
     *        constructor ()
     *        {
     *        }
     *
     *    }
     */
    var ObjectPageWrapperComponent = (function (_super) {
        __extends(ObjectPageWrapperComponent, _super);
        function ObjectPageWrapperComponent(element, env, componentRegistry, pageLifecycleService) {
            var _this = _super.call(this, env, PageType.Object, componentRegistry, pageLifecycleService) || this;
            _this.element = element;
            _this.env = env;
            /**
             * Set true if page should not include any header. Need to set to true even no header
             * object is passed in. Otherwise, a default Header component will be added.
             */
            _this.hideHeader = false;
            /**
             * Set true if page should not include any footer. Need to set to true even no footer
             * object is passed in. Otherwise, a default Footer component will be added.
             */
            _this.hideFooter = false;
            /**
             * The positioning of the page actions (page buttons)
             *   'top' :    page buttons are placed at the top of the page, below the title, to the right.
             *   'bottom' : page buttons are placed at the bottom of the page, above the footer.
             *   'both'   : page buttons are placed at both top and bottom.
             *
             */
            _this.pageActionPosition = 'top';
            /**
             * This flag is driven by pageActionPosition. The default position is top.
             * Value is true for both 'top' and 'both' of pageActionPosition.
             */
            _this.hasTopPageActions = true;
            _this.objectStateIndex = 0;
            // Setting Default header component
            // Setting Default header component
            _this.header = PageHeaderComponent;
            _this.footer = PageFooterComponent;
            return _this;
        }
        /**
         * Generate a unique Id for this object.
         *
         */
        /**
         * Generate a unique Id for this object.
         *
         * @return {?}
         */
        ObjectPageWrapperComponent.prototype.generatePageId = /**
         * Generate a unique Id for this object.
         *
         * @return {?}
         */
            function () {
                return this.objectType + '_' + this.title + (this.id) ? ('_' + this.id) : '';
            };
        /**
         * Does my page have page notification?
         *
         */
        /**
         * Does my page have page notification?
         *
         * @return {?}
         */
        ObjectPageWrapperComponent.prototype.hasNotifications = /**
         * Does my page have page notification?
         *
         * @return {?}
         */
            function () {
                return (this.notifications && this.notifications.length > 0);
            };
        /**
         * @return {?}
         */
        ObjectPageWrapperComponent.prototype.hasObjectStates = /**
         * @return {?}
         */
            function () {
                return core$1.isPresent(this.objectStates);
            };
        /**
         * Initialize my local components
         */
        /**
         * Initialize my local components
         * @return {?}
         */
        ObjectPageWrapperComponent.prototype.ngOnInit = /**
         * Initialize my local components
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                // New Component types that are used in c-include-component
                if (this.header) {
                    this.componentRegistry.registerType(this.header.name, this.header);
                }
                // New Component types that are used in c-include-component
                if (this.footer) {
                    this.componentRegistry.registerType(this.footer.name, this.footer);
                }
                /** notify subscribers of the page lifecycle service  */
                this.pageLifecycleService.onPageInit(this.title);
                // Setting the page action position.
                if (this.pageActionPosition === 'bottom') {
                    this.hasTopPageActions = false;
                    this.hasBottomPageActions = true;
                }
                else if (this.pageActionPosition === 'both') {
                    this.hasTopPageActions = true;
                    this.hasBottomPageActions = true;
                }
                if (core$1.isPresent(this.objectStates) && this.objectStates.length > 1
                    && core$1.isPresent(this.currentState)) {
                    this.objectStateIndex = this.objectStates.indexOf(this.currentState);
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        ObjectPageWrapperComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                _super.prototype.ngOnChanges.call(this, changes);
                if (core$1.isPresent(changes['currentState']) &&
                    changes['currentState'].currentValue !== changes['currentState'].previousValue) {
                    // we dont need to check if objectStates exists
                    this.objectStateIndex = this.objectStates.indexOf(this.currentState);
                }
            };
        /**
         * @return {?}
         */
        ObjectPageWrapperComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.pageLifecycleService.onPageDestroy(this.title);
            };
        ObjectPageWrapperComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-object-page-wrapper',
                        template: "<div class=\"page-wrapper\">\n    <ng-template [ngIf]=\"!hideHeader\">\n        <aw-include-component [name]='header.name'></aw-include-component>\n    </ng-template>\n\n    <div class=\"arc-object-detail\">\n\n        <div class=\"ui-g\">\n\n            <!-- page header -->\n            <div class=\"ui-g-12 page-title\">\n\n                <!-- page title -->\n                <div class=\"ui-g-8 ui-md-8 page-title-text\">{{title}}</div>\n\n                <div class=\"ui-g-4 ui-md-4 page-status\">\n                    <span class=\"object-status-label\">{{objectStatusLabel}} &nbsp;</span>\n                    <span class=\"object-status\">{{objectStatus}}</span>\n                </div>\n            </div>\n\n            <!-- page actions -->\n            <div class=\"ui-g-12 page-actions\" *ngIf=\"hasTopPageActions\">\n                <ng-template [embeddedItem]=\"actionsTemplate\"\n                             *ngIf=\"hasTopPageActions\"></ng-template>\n            </div>\n\n            <!-- object states  displays only if state exists. -->\n            <div class=\"ui-g-12 page-state\">\n                <div class=\"ui-g-3 page-state-left\" [class.content]=\"hasObjectStates()\">\n                    <ng-content select=\".page-state-left\"></ng-content>\n                </div>\n                <div class=\"ui-g-6 page-state-center\">\n                    <ng-container *ngIf=\"hasObjectStates()\">\n                        <aw-stepper [steps]=\"objectStates\"\n                                    [currentStep]=\"objectStateIndex\"></aw-stepper>\n                    </ng-container>\n                </div>\n                <div class=\"ui-g-3 page-state-right\">\n                    <ng-content select=\".page-state-right\"></ng-content>\n                </div>\n            </div>\n\n\n            <!-- Page Notification -->\n            <ng-template [ngIf]=\"hasNotifications()\">\n                <div class=\"ui-g-12 u-nopadding\">\n\n                    <aw-page-notification *ngFor=\"let notification of notifications\"\n                                          [notification]=\"notification\"></aw-page-notification>\n                </div>\n            </ng-template>\n\n            <!-- additional content -->\n            <ng-content select=\"aw-page-content\"></ng-content>\n\n        </div>\n\n    </div>\n\n    <!-- page actions -->\n    <div class=\"ui-g-12 page-actions-bottom\" *ngIf=\"hasBottomPageActions\">\n        <ng-template [embeddedItem]=\"actionsTemplate\"\n                     *ngIf=\"hasBottomPageActions\"></ng-template>\n\n    </div>\n\n    <div class=\"page-push\"></div>\n</div>\n\n<ng-template [ngIf]=\"!hideFooter\">\n    <aw-include-component [name]='footer.name'></aw-include-component>\n</ng-template>\n",
                        styles: [".page-wrapper{background-color:#f2f2f2;min-height:100%;margin-bottom:-100px}.arc-object-detail{padding:20px}.page-title-text{font-size:22px;color:#000;padding:14px 0}.page-title{padding:5px 0;border-bottom:1px solid #d7d7d7}.page-actions{padding:15px 0 5px}.page-actions-bottom{padding:0 20px}.page-state,.page-state-center,.page-state-left,.page-state-right{padding:0}.content::after{content:'\\x000a0';font-size:0}.page-title /deep/ .ui-button{min-width:100px}.page-status{text-align:right;padding:18px 0}.page-status .object-status-label{color:#767676}.page-status .object-status{font-weight:700;color:#038719}.page-push{height:100px}"]
                    },] },
        ];
        /** @nocollapse */
        ObjectPageWrapperComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core$1.Environment },
                { type: ComponentRegistry },
                { type: PageLifeCycleService }
            ];
        };
        ObjectPageWrapperComponent.propDecorators = {
            title: [{ type: core.Input }],
            objectType: [{ type: core.Input }],
            objectStatusLabel: [{ type: core.Input }],
            objectStatus: [{ type: core.Input }],
            objectStates: [{ type: core.Input }],
            currentState: [{ type: core.Input }],
            header: [{ type: core.Input }],
            hideHeader: [{ type: core.Input }],
            footer: [{ type: core.Input }],
            hideFooter: [{ type: core.Input }],
            pageActionPosition: [{ type: core.Input }],
            actionsTemplate: [{ type: core.ContentChild, args: ['pageActions',] }],
            notifications: [{ type: core.Input }]
        };
        return ObjectPageWrapperComponent;
    }(PageWrapper));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Page actions is a wrapper for all page actions, buttons, links, menus that interacts it with the
     * page. The wrapper use the ability to position it as needed.
     */
    var PageActionsComponent = (function (_super) {
        __extends(PageActionsComponent, _super);
        function PageActionsComponent(element, env) {
            var _this = _super.call(this, env) || this;
            _this.element = element;
            _this.env = env;
            return _this;
        }
        PageActionsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-page-actions',
                        template: "<div class=\"page-actions\">\n    <ng-content></ng-content>\n</div>\n",
                        styles: [".page-actions{text-align:right;padding-top:0;padding-right:0}"]
                    },] },
        ];
        /** @nocollapse */
        PageActionsComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core$1.Environment }
            ];
        };
        return PageActionsComponent;
    }(BaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Page content is a wrapper for page content.
     * Currently, it's pretty bare, but as we add more interactions on the page, like a side bar,
     * the page content area will likely get affected.
     */
    var PageContentComponent = (function (_super) {
        __extends(PageContentComponent, _super);
        function PageContentComponent(element, env) {
            var _this = _super.call(this, env) || this;
            _this.element = element;
            _this.env = env;
            return _this;
        }
        PageContentComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-page-content',
                        template: '<ng-content></ng-content>',
                        styles: [':host {width: 100%; padding: 0 .5em;}']
                    },] },
        ];
        /** @nocollapse */
        PageContentComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core$1.Environment }
            ];
        };
        return PageContentComponent;
    }(BaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ STEPPER_COMPLETED_STEP_COLOR = '#58b957';
    var /** @type {?} */ STEPPER_CURRENT_STEP_COLOR = '#0076CB';
    var /** @type {?} */ STEPPER_REMAINING_STEP_COLOR = '#D7D7D7';
    /**
     * Stepper component displays a list of steps for user to follow. It can be used as a checklist
     * to indicate completed, current and remaining items. It could be also be used to indicate
     * the state of an document, created, submitted, approved, etc...
     *
     *
     * Usage:
     *   1.   Use the component inside your template. provide a list of steps and the current step.
     *
     * \@Component({
     *                selector: 'aw-page' ,
     *                           template: `
     *                <aw-stepper [steps]="steps" [currentStep]="currentStep"></aw-stepper>
     *
     *                  `
     *         export class MyPageComponent implements OnInit {
     *
     *                     steps: string[] = ['Monitor', 'Add Supplier', 'Get Quote'];
     *                     currentStep: number = 1;
     *
     *                     constructor(private modalService: ModalService) {
     *                          super();
     *                       }
     *                     ngOnInit() { }
     *       }
     *
     *   2.  Override the default colors.
     *
     * \@Component({
     *                selector: 'aw-page' ,
     *                           template: `
     *                            <aw-stepper [steps]="steps" [stepColorCurrent]="'#ff9900'"
     *                                        [stepColorRemaining]="'#CC0000'"
     *                                        [stepColorCompleted]="'#97a822'"
     *                                        [currentStep]="currentStep">
     *                            </aw-stepper>
     *                  `
     */
    var StepperComponent = (function (_super) {
        __extends(StepperComponent, _super);
        function StepperComponent(env) {
            var _this = _super.call(this, env) || this;
            _this.env = env;
            /**
             * Local variable to indicate whether to use the colors array or not.
             */
            _this.bUseColorArray = false;
            /**
             * The current step that's on. If not provided default to the first step.
             */
            _this.currentStep = 0;
            // Initial color for the different stages of steps.
            // Initial color for the different stages of steps.
            _this.stepColorCompleted = STEPPER_COMPLETED_STEP_COLOR;
            _this.stepColorCurrent = STEPPER_CURRENT_STEP_COLOR;
            _this.stepColorRemaining = STEPPER_REMAINING_STEP_COLOR;
            return _this;
        }
        /**
         * @return {?}
         */
        StepperComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                // Calculate the connector width based on how many steps
                if (core$1.isPresent(this.steps) && this.steps.length > 1) {
                    // (100% - 20% (side margins)) / (NumOfSteps -1)
                    this.connectorWidth = Math.ceil(80 / (this.steps.length - 1)) + '%';
                }
                /**
                         * Use the color array if it's defined.
                         */
                if (core$1.isPresent(this.colors)) {
                    this.bUseColorArray = true;
                    if (this.colors.length !== this.steps.length) {
                        throw new Error("The size of the steps and colors don't match:\n                  (steps.length = " + this.steps.length + "), (colors.length = " + this.colors.length);
                    }
                }
            };
        /**
         * Getting the color of the step for the current index
         *
         * @param index
         */
        /**
         * Getting the color of the step for the current index
         *
         * @param {?} index
         * @return {?}
         */
        StepperComponent.prototype.getStepColor = /**
         * Getting the color of the step for the current index
         *
         * @param {?} index
         * @return {?}
         */
            function (index) {
                // Color Array overrides everything else.
                if (this.bUseColorArray) {
                    return this.colors[index];
                }
                if (index < this.currentStep) {
                    return this.stepColorCompleted;
                }
                else if (index === this.currentStep) {
                    return this.stepColorCurrent;
                }
                else {
                    return this.stepColorRemaining;
                }
            };
        /**
         * The connector colors are driven by the step colors.
         *
         */
        /**
         * The connector colors are driven by the step colors.
         *
         * @param {?} index
         * @return {?}
         */
        StepperComponent.prototype.getConnectorColor = /**
         * The connector colors are driven by the step colors.
         *
         * @param {?} index
         * @return {?}
         */
            function (index) {
                // Color Array overrides everything else.
                if (this.bUseColorArray) {
                    return this.colors[index];
                }
                if (index < this.currentStep) {
                    return this.stepColorCompleted;
                }
                else {
                    return this.stepColorRemaining;
                }
            };
        /**
         * Next step.
         */
        /**
         * Next step.
         * @return {?}
         */
        StepperComponent.prototype.nextStep = /**
         * Next step.
         * @return {?}
         */
            function () {
                this.currentStep++;
            };
        /**
         * previous step.
         */
        /**
         * previous step.
         * @return {?}
         */
        StepperComponent.prototype.prevStep = /**
         * previous step.
         * @return {?}
         */
            function () {
                this.currentStep--;
            };
        StepperComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-stepper',
                        template: "<div class=\"stepper-container\">\n    <div class=\"steps\">\n        <div class=\"step-spacing\"></div>\n\n        <ng-container *ngFor=\"let step of steps; let i=index; let last=last;\">\n            <div class=\"step\">\n                <aw-step [title]=\"step\" [color]=\"getStepColor(i)\"></aw-step>\n            </div>\n            <div *ngIf=\"!last\" class=\"step-connector\" [style.width]=\"connectorWidth\">\n                <div class=\"connector\" [style.borderBottomColor]=\"getConnectorColor(i)\"></div>\n            </div>\n        </ng-container>\n\n        <div class=\"step-spacing\"></div>\n    </div>\n\n    <div class=\"step-labels\"></div>\n</div>\n\n\n",
                        styles: [".stepper-container{display:table;table-layout:fixed;width:100%}.steps{display:table-row}.step-spacing{display:table-cell;width:10%}.step{display:table-cell;width:32px}.step-connector{display:table-cell;vertical-align:middle}.connector{height:1px;border-bottom:3px solid #58b957}.step-labels{display:table-row;height:50px}"]
                    },] },
        ];
        /** @nocollapse */
        StepperComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment }
            ];
        };
        StepperComponent.propDecorators = {
            steps: [{ type: core.Input }],
            colors: [{ type: core.Input }],
            stepColorCompleted: [{ type: core.Input }],
            stepColorCurrent: [{ type: core.Input }],
            stepColorRemaining: [{ type: core.Input }],
            currentStep: [{ type: core.Input }]
        };
        return StepperComponent;
    }(BaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Renders html step component
     *
     *  * Usage:
     *       Straight forward to use. But mostly it would be used as part of the stepper component.
     *
     * \@Component({
     *                selector: 'aw-page' ,
     *                           template: `
     *                           <aw-step [title]="step" [color]="color"></aw-step>
     *                           `
     */
    var /** @type {?} */ DEFAULT_COLOR = '#58b957';
    var StepComponent = (function () {
        function StepComponent(env) {
            this.env = env;
        }
        /**
         * @return {?}
         */
        StepComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (core$1.isBlank(this.color)) {
                    this.color = DEFAULT_COLOR;
                }
            };
        StepComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-step',
                        template: "<div class=\"step-container\">\n    <div class=\"outer-circle\" [style.borderColor]=\"color\">\n        <div class=\"inner-circle\" [style.borderColor]=\"color\" [style.backgroundColor]=\"color\"></div>\n    </div>\n\n    <div class=\"step-title\">{{title}}</div>\n</div>\n\n",
                        styles: [".step-container{position:relative;width:32px}.outer-circle{width:26px;height:26px;border-radius:50%;background-color:#fff;border:3px solid #58b957;position:relative}.inner-circle{width:8px;height:8px;border-radius:50%;border:2px solid #58b957;background-color:#58b957;margin:0 auto;position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.step-title{position:absolute;width:150px;top:40px;left:-60px;text-align:center}"]
                    },] },
        ];
        /** @nocollapse */
        StepComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment }
            ];
        };
        StepComponent.propDecorators = {
            color: [{ type: core.Input }],
            title: [{ type: core.Input }]
        };
        return StepComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWStepperModule = (function () {
        function AWStepperModule() {
        }
        AWStepperModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            StepComponent,
                            StepperComponent
                        ],
                        imports: [
                            common.CommonModule,
                            AWCoreComponentModule,
                        ],
                        entryComponents: [
                            StepComponent,
                            StepperComponent
                        ],
                        exports: [
                            StepComponent,
                            StepperComponent
                        ],
                        providers: []
                    },] },
        ];
        return AWStepperModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     *  This is a temporary implementation for the page header component.
     *  When the real implementation of side menu is done, PageHeaderComponent will
     *  be swaped to use it.
     *
     */
    var SidenavComponent = (function (_super) {
        __extends(SidenavComponent, _super);
        function SidenavComponent(element, env) {
            var _this = _super.call(this, env) || this;
            _this.element = element;
            _this.env = env;
            return _this;
        }
        /**
         * @return {?}
         */
        SidenavComponent.prototype.getSidenavClass = /**
         * @return {?}
         */
            function () {
                // Only show if I have items
                return (this.show && this.items) ? 'sidenav sidenav-active' : 'sidenav';
            };
        /**
         * @return {?}
         */
        SidenavComponent.prototype.open = /**
         * @return {?}
         */
            function () {
                this.show = true;
            };
        /**
         * @return {?}
         */
        SidenavComponent.prototype.close = /**
         * @return {?}
         */
            function () {
                this.show = false;
            };
        /**
         * @return {?}
         */
        SidenavComponent.prototype.toggle = /**
         * @return {?}
         */
            function () {
                this.show = !this.show;
            };
        SidenavComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-sidenav',
                        template: "<div [ngClass]=\"getSidenavClass()\">\n    <div class=\"sidenav-content\">\n        <a *ngFor=\"let item of items\" [routerLink]=\"item.link\">\n            <span class=\"sidenav-icon\"><i [ngClass]=\"'sap-icon ' + item.icon\"></i></span>\n            {{item.label}}\n        </a>\n    </div>\n</div>\n",
                        styles: [".sidenav{height:100%;width:0;position:fixed;z-index:1;top:50px;left:0;background-color:#363636;overflow-x:hidden;padding-top:20px;transition:.5s}.sidenav-active{width:250px}.sidenav a{padding:8px 8px 8px 32px;text-decoration:none;font-size:16px;color:#fff;display:block;transition:.3s}.sidenav a:hover{background-color:#111}.sidenav-icon{font-size:30px;color:#ccc;margin-right:10px}"]
                    },] },
        ];
        /** @nocollapse */
        SidenavComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core$1.Environment }
            ];
        };
        SidenavComponent.propDecorators = {
            items: [{ type: core.Input }],
            show: [{ type: core.Input }]
        };
        return SidenavComponent;
    }(BaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWPageWrapperModule = (function () {
        function AWPageWrapperModule() {
        }
        AWPageWrapperModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            ObjectPageWrapperComponent,
                            PageActionsComponent,
                            PageContentComponent,
                            PageFooterComponent,
                            PageHeaderComponent,
                            SidenavComponent
                        ],
                        imports: [
                            common.CommonModule,
                            router.RouterModule,
                            AWCoreComponentModule,
                            AWStepperModule,
                            AWPageNotificationModule
                        ],
                        entryComponents: [
                            PageFooterComponent,
                            PageActionsComponent,
                            PageContentComponent,
                            PageHeaderComponent
                        ],
                        exports: [
                            ObjectPageWrapperComponent,
                            PageActionsComponent,
                            PageContentComponent,
                            PageFooterComponent,
                            PageHeaderComponent,
                            SidenavComponent
                        ],
                        providers: [PageLifeCycleService]
                    },] },
        ];
        return AWPageWrapperModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @enum {number} */
    var EditorType = {
        Default: 0,
        // Default Editor supports Minimal set of functionality
        // [ bold | italic | underline | ordered | bullet | alignment]
        Full: 1,
        // The full list of functionality,
        TextFormat: 2,
        // Functionalities that affects text formatting.
        Custom: 3,
    };
    EditorType[EditorType.Default] = "Default";
    EditorType[EditorType.Full] = "Full";
    EditorType[EditorType.TextFormat] = "TextFormat";
    EditorType[EditorType.Custom] = "Custom";
    var /** @type {?} */ EDITOR_CONTROL_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return RichTextAreaComponent; }),
        multi: true
    };
    var RichTextAreaComponent = (function (_super) {
        __extends(RichTextAreaComponent, _super);
        function RichTextAreaComponent(env, parentContainer) {
            var _this = _super.call(this, env, parentContainer) || this;
            _this.env = env;
            _this.parentContainer = parentContainer;
            /**
             * A value used to save and read when rendering and updating this component
             */
            _this.value = '';
            /**
             * Expose editorType so that it can be used in this components template.
             */
            _this.EditorType = EditorType;
            _this.type = EditorType.Default;
            _this.styleClass = 'default-editor';
            return _this;
        }
        /**
         * @return {?}
         */
        RichTextAreaComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                _super.prototype.ngOnInit.call(this);
                _super.prototype.registerFormControl.call(this, this.value);
                this.formControl.valueChanges.pipe(operators.distinctUntilChanged()).subscribe(function (val) {
                    _this.value = val;
                    _this.onModelChanged(_this.value);
                });
            };
        /**
         * Internal. Please see ControlValueAccessor
         */
        /**
         * Internal. Please see ControlValueAccessor
         * @param {?} value
         * @return {?}
         */
        RichTextAreaComponent.prototype.writeValue = /**
         * Internal. Please see ControlValueAccessor
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value !== this.value) {
                    this.value = value;
                    this.formControl.setValue(value);
                }
            };
        RichTextAreaComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-richtextarea',
                        template: "<ng-template [ngIf]=\"editable\">\n\n    <!-- Basic editor, also the default, which the most used features enabled. -->\n    <div *ngIf=\"type === EditorType.Default\">\n        <p-editor [(ngModel)]=\"value\" [styleClass]=\"styleClass\" [style]=\"{'height':'180px'}\"\n                  [placeholder]=\"placeHolder\">\n            <p-header>\n                    <span class=\"ql-formats\">\n                        <button class=\"ql-bold\" aria-label=\"Bold\"></button>\n                        <button class=\"ql-italic\" aria-label=\"Italic\"></button>\n                        <button class=\"ql-underline\" aria-label=\"Underline\"></button>\n                    </span>\n                <span class=\"ql-formats\">\n                        <button class=\"ql-list\" value=\"ordered\"></button>\n                        <button class=\"ql-list\" value=\"bullet\"></button>\n                    </span>\n                <span class=\"ql-formats\">\n                            <button value=\"left\" selected></button>\n                            <button value=\"center\"></button>\n                            <button value=\"right\"></button>\n                            <button value=\"justify\"></button>\n                    </span>\n            </p-header>\n        </p-editor>\n    </div>\n\n    <!-- Editor with all the features enabled -->\n    <div *ngIf=\"type === EditorType.Full\">\n        <p-editor [(ngModel)]=\"value\" [styleClass]=\"styleClass\" [style]=\"{'height':'180px'}\"\n                  [placeholder]=\"placeHolder\"></p-editor>\n    </div>\n\n    <!-- Editor with all Text formatting  -->\n    <div *ngIf=\"type === EditorType.TextFormat\">\n        <p-editor [(ngModel)]=\"value\" [styleClass]=\"styleClass\" [style]=\"{'height':'180px'}\"\n                  [placeholder]=\"placeHolder\">\n            <p-header>\n            <span class=\"ql-format-group\">\n              <select title=\"Font\" class=\"ql-font\">\n                <option value=\"sans-serif\" selected=\"\">Sans Serif</option>\n                <option value=\"serif\">Serif</option>\n                <option value=\"monospace\">Monospace</option>\n              </select>\n              <select title=\"Size\" class=\"ql-size\">\n                <option value=\"10px\">Small</option>\n                <option value=\"13px\" selected=\"\">Normal</option>\n                <option value=\"18px\">Large</option>\n                <option value=\"32px\">Huge</option>\n              </select>\n            </span>\n                <span class=\"ql-formats\">\n                    <button class=\"ql-bold\" aria-label=\"Bold\"></button>\n                    <button class=\"ql-italic\" aria-label=\"Italic\"></button>\n                    <button class=\"ql-underline\" aria-label=\"Underline\"></button>\n                </span>\n                <span class=\"ql-format-group\">\n              <select title=\"Text Color\" class=\"ql-color\">\n                <option value=\"rgb(0, 0, 0)\" label=\"rgb(0, 0, 0)\" selected=\"\"></option>\n                <option value=\"rgb(230, 0, 0)\" label=\"rgb(230, 0, 0)\"></option>\n                <option value=\"rgb(255, 153, 0)\" label=\"rgb(255, 153, 0)\"></option>\n                <option value=\"rgb(255, 255, 0)\" label=\"rgb(255, 255, 0)\"></option>\n                <option value=\"rgb(0, 138, 0)\" label=\"rgb(0, 138, 0)\"></option>\n                <option value=\"rgb(0, 102, 204)\" label=\"rgb(0, 102, 204)\"></option>\n                <option value=\"rgb(153, 51, 255)\" label=\"rgb(153, 51, 255)\"></option>\n                <option value=\"rgb(255, 255, 255)\" label=\"rgb(255, 255, 255)\"></option>\n                <option value=\"rgb(250, 204, 204)\" label=\"rgb(250, 204, 204)\"></option>\n                <option value=\"rgb(255, 235, 204)\" label=\"rgb(255, 235, 204)\"></option>\n                <option value=\"rgb(255, 255, 204)\" label=\"rgb(255, 255, 204)\"></option>\n                <option value=\"rgb(204, 232, 204)\" label=\"rgb(204, 232, 204)\"></option>\n                <option value=\"rgb(204, 224, 245)\" label=\"rgb(204, 224, 245)\"></option>\n                <option value=\"rgb(235, 214, 255)\" label=\"rgb(235, 214, 255)\"></option>\n                <option value=\"rgb(187, 187, 187)\" label=\"rgb(187, 187, 187)\"></option>\n                <option value=\"rgb(240, 102, 102)\" label=\"rgb(240, 102, 102)\"></option>\n                <option value=\"rgb(255, 194, 102)\" label=\"rgb(255, 194, 102)\"></option>\n                <option value=\"rgb(255, 255, 102)\" label=\"rgb(255, 255, 102)\"></option>\n                <option value=\"rgb(102, 185, 102)\" label=\"rgb(102, 185, 102)\"></option>\n                <option value=\"rgb(102, 163, 224)\" label=\"rgb(102, 163, 224)\"></option>\n                <option value=\"rgb(194, 133, 255)\" label=\"rgb(194, 133, 255)\"></option>\n                <option value=\"rgb(136, 136, 136)\" label=\"rgb(136, 136, 136)\"></option>\n                <option value=\"rgb(161, 0, 0)\" label=\"rgb(161, 0, 0)\"></option>\n                <option value=\"rgb(178, 107, 0)\" label=\"rgb(178, 107, 0)\"></option>\n                <option value=\"rgb(178, 178, 0)\" label=\"rgb(178, 178, 0)\"></option>\n                <option value=\"rgb(0, 97, 0)\" label=\"rgb(0, 97, 0)\"></option>\n                <option value=\"rgb(0, 71, 178)\" label=\"rgb(0, 71, 178)\"></option>\n                <option value=\"rgb(107, 36, 178)\" label=\"rgb(107, 36, 178)\"></option>\n                <option value=\"rgb(68, 68, 68)\" label=\"rgb(68, 68, 68)\"></option>\n                <option value=\"rgb(92, 0, 0)\" label=\"rgb(92, 0, 0)\"></option>\n                <option value=\"rgb(102, 61, 0)\" label=\"rgb(102, 61, 0)\"></option>\n                <option value=\"rgb(102, 102, 0)\" label=\"rgb(102, 102, 0)\"></option>\n                <option value=\"rgb(0, 55, 0)\" label=\"rgb(0, 55, 0)\"></option>\n                <option value=\"rgb(0, 41, 102)\" label=\"rgb(0, 41, 102)\"></option>\n                <option value=\"rgb(61, 20, 102)\" label=\"rgb(61, 20, 102)\"></option>\n              </select>\n              <span class=\"ql-format-separator\"></span>\n              <select title=\"Background Color\" class=\"ql-background\">\n                <option value=\"rgb(0, 0, 0)\" label=\"rgb(0, 0, 0)\"></option>\n                <option value=\"rgb(230, 0, 0)\" label=\"rgb(230, 0, 0)\"></option>\n                <option value=\"rgb(255, 153, 0)\" label=\"rgb(255, 153, 0)\"></option>\n                <option value=\"rgb(255, 255, 0)\" label=\"rgb(255, 255, 0)\"></option>\n                <option value=\"rgb(0, 138, 0)\" label=\"rgb(0, 138, 0)\"></option>\n                <option value=\"rgb(0, 102, 204)\" label=\"rgb(0, 102, 204)\"></option>\n                <option value=\"rgb(153, 51, 255)\" label=\"rgb(153, 51, 255)\"></option>\n                <option value=\"rgb(255, 255, 255)\" label=\"rgb(255, 255, 255)\" selected=\"\"></option>\n                <option value=\"rgb(250, 204, 204)\" label=\"rgb(250, 204, 204)\"></option>\n                <option value=\"rgb(255, 235, 204)\" label=\"rgb(255, 235, 204)\"></option>\n                <option value=\"rgb(255, 255, 204)\" label=\"rgb(255, 255, 204)\"></option>\n                <option value=\"rgb(204, 232, 204)\" label=\"rgb(204, 232, 204)\"></option>\n                <option value=\"rgb(204, 224, 245)\" label=\"rgb(204, 224, 245)\"></option>\n                <option value=\"rgb(235, 214, 255)\" label=\"rgb(235, 214, 255)\"></option>\n                <option value=\"rgb(187, 187, 187)\" label=\"rgb(187, 187, 187)\"></option>\n                <option value=\"rgb(240, 102, 102)\" label=\"rgb(240, 102, 102)\"></option>\n                <option value=\"rgb(255, 194, 102)\" label=\"rgb(255, 194, 102)\"></option>\n                <option value=\"rgb(255, 255, 102)\" label=\"rgb(255, 255, 102)\"></option>\n                <option value=\"rgb(102, 185, 102)\" label=\"rgb(102, 185, 102)\"></option>\n                <option value=\"rgb(102, 163, 224)\" label=\"rgb(102, 163, 224)\"></option>\n                <option value=\"rgb(194, 133, 255)\" label=\"rgb(194, 133, 255)\"></option>\n                <option value=\"rgb(136, 136, 136)\" label=\"rgb(136, 136, 136)\"></option>\n                <option value=\"rgb(161, 0, 0)\" label=\"rgb(161, 0, 0)\"></option>\n                <option value=\"rgb(178, 107, 0)\" label=\"rgb(178, 107, 0)\"></option>\n                <option value=\"rgb(178, 178, 0)\" label=\"rgb(178, 178, 0)\"></option>\n                <option value=\"rgb(0, 97, 0)\" label=\"rgb(0, 97, 0)\"></option>\n                <option value=\"rgb(0, 71, 178)\" label=\"rgb(0, 71, 178)\"></option>\n                <option value=\"rgb(107, 36, 178)\" label=\"rgb(107, 36, 178)\"></option>\n                <option value=\"rgb(68, 68, 68)\" label=\"rgb(68, 68, 68)\"></option>\n                <option value=\"rgb(92, 0, 0)\" label=\"rgb(92, 0, 0)\"></option>\n                <option value=\"rgb(102, 61, 0)\" label=\"rgb(102, 61, 0)\"></option>\n                <option value=\"rgb(102, 102, 0)\" label=\"rgb(102, 102, 0)\"></option>\n                <option value=\"rgb(0, 55, 0)\" label=\"rgb(0, 55, 0)\"></option>\n                <option value=\"rgb(0, 41, 102)\" label=\"rgb(0, 41, 102)\"></option>\n                <option value=\"rgb(61, 20, 102)\" label=\"rgb(61, 20, 102)\"></option>\n              </select>\n            </span>\n                <span class=\"ql-formats\">\n                <button class=\"ql-list\" value=\"ordered\"></button>\n                <button class=\"ql-list\" value=\"bullet\"></button>\n            </span>\n                <span class=\"ql-formats\">\n                    <button value=\"left\" selected></button>\n                    <button value=\"center\"></button>\n                    <button value=\"right\"></button>\n                    <button value=\"justify\"></button>\n            </span>\n            </p-header>\n        </p-editor>\n    </div>\n\n    <!-- Custom header Text Editor -->\n    <div *ngIf=\"type === EditorType.Custom\">\n        <p-editor [(ngModel)]=\"value\" [styleClass]=\"styleClass\" [style]=\"{'height':'180px'}\"\n                  [placeholder]=\"placeHolder\">\n            <p-header>\n                <ng-content select=\"custom-header\"></ng-content>\n            </p-header>\n        </p-editor>\n    </div>\n\n</ng-template>\n\n\n<ng-template [ngIf]=\"!editable\">\n    <aw-string [value]=\"value\"></aw-string>\n</ng-template>\n",
                        styles: ["/deep/ .ui-editor-toolbar{background-color:#f5f5f5;border:1px solid #d7d7d7}/deep/ p-editor:active /deep/ .ui-editor-toolbar.ql-toolbar.ql-snow,/deep/ p-editor:focus /deep/ .ui-editor-toolbar.ql-toolbar.ql-snow,/deep/ p-editor:hover /deep/ .ui-editor-toolbar.ql-toolbar.ql-snow{border-color:#199de0}/deep/ p-editor:active /deep/ .ui-editor-content.ql-container.ql-snow,/deep/ p-editor:focus /deep/ .ui-editor-content.ql-container.ql-snow,/deep/ p-editor:hover /deep/ .ui-editor-content.ql-container.ql-snow{border-color:#199de0}"],
                        providers: [
                            EDITOR_CONTROL_VALUE_ACCESSOR,
                            { provide: BaseFormComponent, useExisting: core.forwardRef(function () { return RichTextAreaComponent; }) }
                        ]
                    },] },
        ];
        /** @nocollapse */
        RichTextAreaComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: BaseFormComponent, decorators: [{ type: core.SkipSelf }, { type: core.Optional }, { type: core.Inject, args: [core.forwardRef(function () { return FormRowComponent; }),] }] }
            ];
        };
        RichTextAreaComponent.propDecorators = {
            type: [{ type: core.Input }],
            value: [{ type: core.Input }]
        };
        return RichTextAreaComponent;
    }(BaseFormComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWRichTextAreaModule = (function () {
        function AWRichTextAreaModule() {
        }
        AWRichTextAreaModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            RichTextAreaComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            primeng.EditorModule,
                            AWStringFieldModule
                        ],
                        entryComponents: [
                            RichTextAreaComponent
                        ],
                        exports: [
                            RichTextAreaComponent,
                            forms.ReactiveFormsModule,
                            forms.FormsModule
                        ],
                        providers: []
                    },] },
        ];
        return AWRichTextAreaModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Allow developer to override default actions. Must have this declared before class when we
     * want to have this declaration inside the same file.
     */
    var SectionActionsComponent = (function () {
        function SectionActionsComponent() {
        }
        SectionActionsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-section-actions',
                        template: "<ng-content></ng-content> ",
                    },] },
        ];
        return SectionActionsComponent;
    }());
    /**
     *
     * Section component that implements a section of the page. It's an outline box that
     * has the ability to expand and hide its content.
     *
     * ```ts
     * \@Component({
     *    selector: 'rfx-details' ,
     *    template: `
     *         <aw-section title="Sourcing request info" (onEdit)="onStateChange($event)"
     *                          [editable]="true">
     *
     *                <m-context [object]="rfxEntity.headerInfo"
     *                          [operation]="this.editabilityState.headerInfoOp"
     *                          layout="Inspect"
     *                          uiGroup="HeaderGeneral">
     *                   <m-include-component></m-include-component>
     *               </m-context>
     *           </aw-section>
     *
     *
     *           <aw-section #supplierSection title="Selected suppliers" (onOpen)="onOpen()"
     *                [opened]="false">
     *               <supplier-profile-card></supplier-profile-card>
     *           </aw-section>
     *
     *           <aw-section title="RFQ Details"
     *                       description="Review and update information for suppliers to respond."
     *                       [disableClose]="true">
     *
     *               <aw-subsection title="Event timeline">
     *                   <aw-form-table [useFiveZone]="false" [editable]="true">
     *
     *                       <aw-form-row [label]="'Start Date'" [name]="'startDate'" [size]="'small'"
     *                                   [highlightRow]="true">
     *                           <aw-date-time
     *                               formatName="dateTime"
     *                               name="startDate" [value]="rfxEntity.created"
     *                               [showTime]="true"></aw-date-time>
     *                       </aw-form-row>
     *                   </aw-form-table>
     *               </aw-subsection>
     *          </aw-section>
     *    `
     *    })
     *    export class MyPage
     *    {
     *
     *        constructor ()
     *        {
     *        }
     *
     *    }
     *
     * ```
     *
     * Section component also supports editability modes and if enabled it will render action buttons
     * in the footer. Developer can also override default behavior and provide custom actions.
     *
     *
     * e.g:
     *
     * ```
     *      <aw-section [title]="title" [editable]="true"
     *                          (onCancelAction)="someHandler1($event)"
     *                          (onSaveAction)="someHandler2($event)" >
     *              section content
     *
     *
     *   </aw-section>
     *
     * ```
     *
     * or custom action buttons:
     *
     *
     * ```html
     *
     *       <aw-section-actions>
     *                      <aw-button >
     *                            ButtonTest1
     *                      </aw-button>
     *                      <aw-button>
     *                            ButtonTest2
     *                      </aw-button>
     *     </aw-section-actions>
     *
     * ```
     *
     *
     * There are two edit modes
     *  # Default
     *      Renders action buttons in the footers and emit actions to the application
     *
     *  # External
     *     No action buttons are shown in the footer and behavior is handled by application. Only event
     *     is emited.
     *
     *
     *  e.g:
     *
     *  ```ts
     *
     *      <aw-section title="User Information" (onEdit)="onAddSomething($event)"
     *                  [editable]="true" [editMode]="'external'" >
     *                  <div>
     *                      Content
     *                  </div>
     *      </aw-section>
     *
     *  ```
     *
     * Note: When using editing mode you have to call at the end of the editing cycle method
     * `completeEditing()` to commit editing which changes internal state of the Section.
     *
     *
     *
     */
    var SectionComponent = (function (_super) {
        __extends(SectionComponent, _super);
        function SectionComponent(element, env) {
            var _this = _super.call(this, env) || this;
            _this.element = element;
            _this.env = env;
            /**
             * Should this section be opened at the start. Default is opened.
             */
            _this.opened = true;
            /**
             * Whether this section can be closed or not.
             *
             */
            _this.disableClose = false;
            /**
             * Whether this section is in EditState or not.
             *
             * When in editing state and we show "Cancel / Save" button developer needs use this binding
             * to control the state.
             */
            _this.editState = false;
            /**
             * Current Editing mode. Tells the components if its its default behavior or driven by
             * application using this component.
             *
             * {\@see EditMode}
             *
             */
            _this.editMode = 'default';
            /**
             * Developer can provide custom Edit action icon that will appear in the right top corner
             */
            _this.actionIcon = 'icon-edit';
            /**
             * Event emitted when the section is fully opened.
             */
            _this.onOpen = new core.EventEmitter();
            /**
             * Event emitted when the section is fully closed.
             */
            _this.onClose = new core.EventEmitter();
            /**
             * Edit state to broadcast state of current section
             */
            _this.onEdit = new core.EventEmitter();
            /**
             * When in editing state and default buttons are rendered on click broadcast Cancel action
             */
            _this.onCancelAction = new core.EventEmitter();
            /**
             * When in editing state and default buttons are rendered on click broadcast Save action
             */
            _this.onSaveAction = new core.EventEmitter();
            _this.onEditingComplete = new core.EventEmitter();
            _this.editable = false;
            return _this;
        }
        /**
         * @return {?}
         */
        SectionComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                // If I have not header, then I can't close the section.
                if (!this.isHeaderDisplayed()) {
                    this.disableClose = true;
                }
                // If I can't close the section, then it should default open.
                if (this.disableClose) {
                    this.opened = true;
                }
                // initialize the expanded state.
                this.expanded = this.opened;
            };
        /**
         * Don't display header area if I don't have title and description.
         *
         * @return {?}
         */
        SectionComponent.prototype.isHeaderDisplayed = /**
         * Don't display header area if I don't have title and description.
         *
         * @return {?}
         */
            function () {
                return (core$1.isPresent(this.title) || core$1.isPresent(this.description));
            };
        /**
         * Css Class that control the look and feel for section component.
         */
        /**
         * Css Class that control the look and feel for section component.
         * @return {?}
         */
        SectionComponent.prototype.aClass = /**
         * Css Class that control the look and feel for section component.
         * @return {?}
         */
            function () {
                if (!this.isHeaderDisplayed()) {
                    return 'section-no-header';
                }
                return '';
            };
        /**
         * Since we introduced buttons and editState the decision on when to exit editing mode
         * should be on the developer using this component therefore only startEditing
         *
         */
        /**
         * Since we introduced buttons and editState the decision on when to exit editing mode
         * should be on the developer using this component therefore only startEditing
         *
         * @param {?} $event
         * @return {?}
         */
        SectionComponent.prototype.onEditAction = /**
         * Since we introduced buttons and editState the decision on when to exit editing mode
         * should be on the developer using this component therefore only startEditing
         *
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                // when in editing make sure we dont switch state as there can be some Form errors
                // which needs to be handled by developer and only then change the editState
                if (!this.editState) {
                    this.editState = !this.editState;
                    var /** @type {?} */ state = (this.editState) ? 'inEdit' : 'notInEdit';
                    this.onEdit.emit(state);
                    this.open();
                }
                // prevent the original event from bubbling up. Because the edit icon is inside
                // the header. If the click even is bubbled up, this event will cause the section to
                // expand or collapse.
                if (core$1.isPresent($event.event)) {
                    $event.event.stopPropagation();
                    $event.event.preventDefault();
                }
            };
        /**
         * @return {?}
         */
        SectionComponent.prototype.hasDescription = /**
         * @return {?}
         */
            function () {
                return core$1.isPresent(this.description);
            };
        /**
         * Open this section, if it's already open, will do nothing.
         */
        /**
         * Open this section, if it's already open, will do nothing.
         * @param {?=} event
         * @return {?}
         */
        SectionComponent.prototype.open = /**
         * Open this section, if it's already open, will do nothing.
         * @param {?=} event
         * @return {?}
         */
            function (event) {
                if (!this.expanded) {
                    this.accordionTab.toggle(event);
                }
            };
        /**
         * Close this section, if it's already close, will do nothing.
         */
        /**
         * Close this section, if it's already close, will do nothing.
         * @param {?} event
         * @return {?}
         */
        SectionComponent.prototype.close = /**
         * Close this section, if it's already close, will do nothing.
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.expanded) {
                    this.accordionTab.toggle(event);
                }
            };
        /**
         * Callback to be invoked when accordion is opened
         *
         */
        /**
         * Callback to be invoked when accordion is opened
         *
         * @param {?} event
         * @return {?}
         */
        SectionComponent.prototype.onSectionOpen = /**
         * Callback to be invoked when accordion is opened
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.expanded = true;
                this.onOpen.emit('open');
            };
        /**
         * Callback to be invoked when accordion is closed
         *
         */
        /**
         * Callback to be invoked when accordion is closed
         *
         * @param {?} event
         * @return {?}
         */
        SectionComponent.prototype.onSectionClose = /**
         * Callback to be invoked when accordion is closed
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.expanded = false;
                this.onClose.emit('close');
            };
        /**
         *
         * Tells us if we need to render application defined custom actions
         *
         */
        /**
         *
         * Tells us if we need to render application defined custom actions
         *
         * @return {?}
         */
        SectionComponent.prototype.hasCustomActions = /**
         *
         * Tells us if we need to render application defined custom actions
         *
         * @return {?}
         */
            function () {
                return core$1.isPresent(this.customActions);
            };
        /**
         * Emit the editing state back to non-editable
         */
        /**
         * Emit the editing state back to non-editable
         * @return {?}
         */
        SectionComponent.prototype.completeEditing = /**
         * Emit the editing state back to non-editable
         * @return {?}
         */
            function () {
                this.editState = false;
                this.onEditingComplete.emit(this.editState);
            };
        SectionComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-section',
                        template: "<div class=\"ui-g-12 section-container\"\n     [class.editing]=\"editable && editState && editMode === 'default'\">\n\n    <p-accordion (onOpen)=\"onSectionOpen($event)\" (onClose)=\"onSectionClose($event)\"\n                 [styleClass]=\"aClass()\">\n        <p-accordionTab #accordionTab [selected]=\"opened\" [disabled]=\"disableClose\">\n            <p-header>\n                <!-- title and description -->\n                <div class=\"section-header-container\">\n                    <div class=\"section-title\">{{title}}</div>\n                    <div *ngIf=\"hasDescription()\" class=\"section-description\">{{description}}</div>\n\n                    <!-- actions: Hide when in editing and editMode is default -->\n                    <div *ngIf=\"(editable && !editState && editMode === 'default') ||\n                        (editable && editMode === 'external')\"\n                         class=\"section-actions\">\n                        <aw-hyperlink (action)=\"onEditAction($event)\">\n                            <i class=\"sap-icon section-edit-action\" [ngClass]=\"actionIcon\"></i>\n                        </aw-hyperlink>\n                    </div>\n                </div>\n            </p-header>\n\n            <ng-content></ng-content>\n        </p-accordionTab>\n    </p-accordion>\n    <!--\n        need to put it outside of p-accordion otherwise button will inherit different\n        color scheme\n    -->\n    <div class=\"section-footer-container\" *ngIf=\"editable && editState &&\n            editMode === 'default'\">\n        <div class=\"footer-actions\">\n\n            <ng-template [ngIf]=\"!hasCustomActions()\">\n                <aw-button [style]=\"'secondary'\" size=\"small\"\n                           (action)=\"onCancelAction.emit($event)\">\n                    Cancel\n                </aw-button>\n                <aw-button size=\"small\" (action)=\"onSaveAction.emit($event)\">\n                    Save\n                </aw-button>\n            </ng-template>\n\n            <ng-content select=\"aw-section-actions\"></ng-content>\n        </div>\n    </div>\n</div>\n",
                        styles: [".section-header-container{position:relative}.section-container{margin:10px 0;background-color:#fff;padding:.2em .5em;border:2px dashed transparent}.section-container.editing{border-color:#199de0}.section-container ::ng-deep .ui-accordion-header>a{display:flex}.section-container ::ng-deep .ui-accordion-header>a .ui-accordion-toggle-icon{flex:0 0 30px;padding-top:2px}.section-container ::ng-deep .ui-accordion-header>a p-header{flex:1 0}.section-container /deep/ .ui-accordion-header.ui-state-disabled{opacity:1}.section-title{font-size:1.1em}.section-description{font-size:.9em;padding:.6em 0 .2em}.section-footer-container{margin:1em 2em 0;padding:.8em 0 1.5em .8em;border-top:1px solid #d7d7d7}.section-footer-container .footer-actions{display:inline-block;text-align:right;width:100%}.section-actions{position:absolute;top:0;right:0;z-index:1}.section-actions /deep/ a.link,.section-actions /deep/ a.link:hover{padding:0;text-decoration:none}.section-edit-action{font-size:1.5em;position:relative;padding:.1em 0 .1em .5em;cursor:pointer}.section-edit-action.icon-edit{font-size:1.4em}.section-container /deep/ .ui-accordion-header{color:#363636;border:none;background:#fff!important;padding:0 1em}.section-container /deep/ .ui-accordion-content{border:none;padding:1em 2em}.section-container /deep/ .ui-accordion-header /deep/ a[role=tab]{padding:.75em 0;text-decoration:none}.section-container /deep/ .ui-accordion-header.ui-state-active /deep/ a[role=tab]{border-bottom:1px solid #d7d7d7;color:#363636}.section-container /deep/ .section-no-header /deep/ .ui-accordion-header{height:1px}.section-container /deep/ .section-no-header /deep/ .ui-accordion-header.ui-state-active /deep/ a[role=tab]{border-bottom:none}.section-container /deep/ .section-no-header /deep/ .ui-accordion-header .section-edit-action{cursor:pointer!important}:host /deep/ .ui-accordion-header /deep/ .pi.pi-caret-down,:host /deep/ .ui-accordion-header /deep/ .pi.pi-caret-right{font-family:\"SAP icon fonts\";font-size:1.1em;top:.8em;left:.1em;color:#767676;margin-top:0}:host /deep/ .ui-accordion-header.ui-state-disabled /deep/ .fa,:host /deep/ .ui-accordion-header.ui-state-disabled /deep/ .pi{display:none}:host /deep/ .ui-accordion-header /deep/ .pi.pi-caret-right:before{content:\"\\e1ed\"}:host /deep/ .ui-accordion-header /deep/ .pi.pi-caret-down:before{content:\"\\e1ef\"}"]
                    },] },
        ];
        /** @nocollapse */
        SectionComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core$1.Environment }
            ];
        };
        SectionComponent.propDecorators = {
            title: [{ type: core.Input }],
            description: [{ type: core.Input }],
            opened: [{ type: core.Input }],
            disableClose: [{ type: core.Input }],
            editState: [{ type: core.Input }],
            editMode: [{ type: core.Input }],
            actionIcon: [{ type: core.Input }],
            onOpen: [{ type: core.Output }],
            onClose: [{ type: core.Output }],
            onEdit: [{ type: core.Output }],
            onCancelAction: [{ type: core.Output }],
            onSaveAction: [{ type: core.Output }],
            onEditingComplete: [{ type: core.Output }],
            accordionTab: [{ type: core.ViewChild, args: ['accordionTab',] }],
            customActions: [{ type: core.ContentChild, args: [SectionActionsComponent,] }]
        };
        return SectionComponent;
    }(BaseComponent));
    var SubSectionComponent = (function () {
        function SubSectionComponent() {
        }
        SubSectionComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-subsection',
                        template: "\n                    <h4 class=\"subsection-title\">{{title}}</h4>\n                    <ng-content></ng-content>\n                 ",
                        styles: ['.subsection-title {color: #363636; }']
                    },] },
        ];
        SubSectionComponent.propDecorators = {
            title: [{ type: core.Input }]
        };
        return SubSectionComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWSectionModule = (function () {
        function AWSectionModule() {
        }
        AWSectionModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            SectionComponent,
                            SubSectionComponent,
                            SectionActionsComponent
                        ],
                        imports: [
                            common.CommonModule,
                            primeng.AccordionModule,
                            core$1.AribaCoreModule,
                            AWStringFieldModule,
                            AWHyperlinkModule,
                            AWButtonModule,
                            primeng.SharedModule
                        ],
                        entryComponents: [
                            SectionComponent,
                            SubSectionComponent,
                            SectionActionsComponent
                        ],
                        exports: [
                            SectionComponent,
                            SectionActionsComponent,
                            SubSectionComponent,
                            forms.ReactiveFormsModule,
                            forms.FormsModule
                        ],
                        providers: []
                    },] },
        ];
        return AWSectionModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * DTColumn represent single column including header and its body. Each column has its own
     * rendererTemplate which a entry to this component.
     *
     * Keeping this separate from the datatable where DT is not really aware what it is rendering,
     * it allows us more flexibility in terms of different type of column inheriting from this
     * one.. Such as:
     *  DTRowDetail  column
     *  DTSingleSelection column
     *  DTMultiSelection column
     *
     * This way we don't do IF/THEN/ELSE inside the datatable and trying to create different cases.
     *
     *  Then later on this will let us create additional logic for the pivotal layout. Because DT
     *  does know anything about the type of the column so whatever is added to the DT.columns it
     *  will be rendered.
     *
     *
     *  Columns can be also frozen meaning if the content overflows they dont scroll. To make the
     *  column frozen we need to use [frozen] binding and se it to TRUE plus it requires a [width]
     *  binding to be set (in px).
     *  We need this to be able to properly position the second table which is changed to absolute
     *  positioning.
     *
     *
     *
     */
    var DTColumn2Component = (function (_super) {
        __extends(DTColumn2Component, _super);
        function DTColumn2Component(env, domHandler) {
            var _this = _super.call(this, env) || this;
            _this.env = env;
            _this.domHandler = domHandler;
            /**
             *
             * Cell alignment. It inserts regular align attribute to the table cell
             *
             */
            _this.align = 'left';
            /**
             *
             * If false applies dt-is-hidden style that hides the column
             *
             */
            _this.isVisible = true;
            /**
             * Sorting direction
             *
             */
            _this.sortOrdering = 'descending';
            /**
             * Tells the template if whether to render a label
             *
             */
            _this.showColumnLabel = true;
            /**
             *
             * See AWDataTable
             *
             */
            _this.showSubHeader = false;
            /**
             *
             * Used together with cell selectionMode to tell which column is selectable
             *
             */
            _this.selectable = false;
            /**
             * Use globally defined HEADER template for current column
             *
             */
            _this.useGlobalHeader = true;
            /**
             * Use globally defined SubHeader template for current column
             *
             */
            _this.useGlobalSubHeader = true;
            /**
             * Use globally defined body template
             *
             */
            _this.useGlobalBody = true;
            /**
             * Tells if the column is data column  - if it is rendering data or just a label or some
             * control
             *
             * This is important when calculating a column span and we need to know which columns are or
             * will be just for selection controls and which holds data
             */
            _this.isDataColumn = true;
            /**
             * Identifies column that will not scroll horizontally with other columns. Column is
             * frozen.
             *
             * For such columns that are marked as frozen binding [width] is required.
             *
             */
            _this.frozen = false;
            _this.maxWidthPx = 0;
            _this.minWidthPx = 0;
            _this.widthPx = 0;
            _this.widestCell = 0;
            return _this;
        }
        /**
         * @return {?}
         */
        DTColumn2Component.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                if (core$1.isBlank(this.key) && core$1.isBlank(this.label)) {
                    throw new Error('Missing required binding: ' +
                        '[key] or [label] bindings must be used at minimum');
                }
                // To be able to position second DT we require [width] to be set as well
                if (this.frozen && core$1.isBlank(this.width)) {
                    throw new Error('Missing required binding [width]: ' +
                        'when [frozen]=true then [width] binding needs to be specified.');
                }
            };
        /**
         * @return {?}
         */
        DTColumn2Component.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        DTColumn2Component.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                // need to deffer this and trigger change detection otherwise I get
                // value was changed after it was checked error
                // setTimeout(() =>
                // {
                // });
            };
        /**
         *
         * When cell selectionMode is enabled this method is triggered when we click on header.
         * It delegates the call to the DT where it toggles currently selected value
         *
         */
        /**
         *
         * When cell selectionMode is enabled this method is triggered when we click on header.
         * It delegates the call to the DT where it toggles currently selected value
         *
         * @param {?} event
         * @param {?} element
         * @return {?}
         */
        DTColumn2Component.prototype.handleHeaderClick = /**
         *
         * When cell selectionMode is enabled this method is triggered when we click on header.
         * It delegates the call to the DT where it toggles currently selected value
         *
         * @param {?} event
         * @param {?} element
         * @return {?}
         */
            function (event, element) {
                if (this.isHeaderSelectable()) {
                    this.dt.onHeaderSelectionChange(element, this);
                }
                else if (this.sortable) {
                    this.sort(event);
                }
                event.preventDefault();
            };
        /**
         *
         * Todo: Implement our own sorting mechanism once we extract the sorting logic to its component
         *
         */
        /**
         *
         * Todo: Implement our own sorting mechanism once we extract the sorting logic to its component
         *
         * @param {?} event
         * @return {?}
         */
        DTColumn2Component.prototype.sort = /**
         *
         * Todo: Implement our own sorting mechanism once we extract the sorting logic to its component
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (!this.sortable) {
                    return;
                }
                var /** @type {?} */ targetNode = event.target;
                if (this.domHandler.hasClass(targetNode, 'dt-u-sortable') ||
                    this.domHandler.hasClass(targetNode, 'dt-col-title') ||
                    this.domHandler.hasClass(targetNode, 'dt-col-sortable-icon')) {
                    if (core$1.isPresent(this.dt.sortColumn) && this.dt.sortColumn.key === this.key) {
                        this.sortOrder = this.sortOrder * -1;
                        this.sortOrdering = this.dt.sortOrderingForNumber(this.sortOrder);
                    }
                    else {
                        this.dt.sortColumn = this;
                    }
                    this.dt.dataSource.state.sortKey = this.key;
                    this.dt.dataSource.state.sortOrder = this.dt.sortOrderingForString(this.sortOrdering);
                    this.dt.sortSingle();
                }
                this.dt.updateDataToRender();
            };
        /**
         * Calculated style class based on data
         *
         *
         */
        /**
         * Calculated style class based on data
         *
         *
         * @param {?} item
         * @return {?}
         */
        DTColumn2Component.prototype.dynamicBodyClass = /**
         * Calculated style class based on data
         *
         *
         * @param {?} item
         * @return {?}
         */
            function (item) {
                var /** @type {?} */ dynClass = core$1.isPresent(this.bodyClassFn)
                    ? this.bodyClassFn.apply(this.dt.context, [this, item]) : '';
                if (core$1.isPresent(this.bodyStyleClass)) {
                    dynClass += ' ' + this.bodyStyleClass;
                }
                else if (core$1.isPresent(this.styleClass)) {
                    dynClass += ' ' + this.styleClass;
                }
                return dynClass;
            };
        /**
         * @param {?} item
         * @return {?}
         */
        DTColumn2Component.prototype.isRowSelectable = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (core$1.isPresent(this.dt.isRowSelectable)) {
                    return this.dt.isRowSelectable(item);
                }
                return false;
            };
        /**
         * @param {?} item
         * @return {?}
         */
        DTColumn2Component.prototype.isCellSelectable = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return this.dt.selectionMode === 'cell' && this.isRowSelectable(item) && this.selectable;
            };
        /**
         * @return {?}
         */
        DTColumn2Component.prototype.isHeaderSelectable = /**
         * @return {?}
         */
            function () {
                return this.dt.selectionMode === 'cell' && this.selectable;
            };
        /**
         * @return {?}
         */
        DTColumn2Component.prototype.getSortOrder = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ order = 0;
                if (core$1.isPresent(this.dt.sortColumn) && this.key === this.dt.sortColumn.key) {
                    order = this.dt.sortColumn.sortOrder;
                }
                return order;
            };
        /**
         * @return {?}
         */
        DTColumn2Component.prototype.isSorted = /**
         * @return {?}
         */
            function () {
                if (!this.sortable) {
                    return false;
                }
                return core$1.isPresent(this.dt.sortColumn) && this.key === this.dt.sortColumn.key;
            };
        /**
         * @param {?} table
         * @return {?}
         */
        DTColumn2Component.prototype.initialize = /**
         * @param {?} table
         * @return {?}
         */
            function (table) {
                this.dt = table;
                if (core$1.isPresent(this.dt.initialSortKey) && this.dt.initialSortKey === this.key) {
                    this.sortable = true;
                    this.sortOrder = this.dt.sortOrderingForString(this.dt.initialSortOrder);
                    this.dt.sortColumn = this;
                }
                if (core$1.isBlank(this.bodyTemplate) && this.useGlobalBody) {
                    this.bodyTemplate = this.dt.bodyTemplate;
                }
                if (core$1.isBlank(this.headerTemplate) && this.useGlobalHeader) {
                    this.headerTemplate = this.dt.headerTemplate;
                }
                if (core$1.isBlank(this.subHeaderTemplate) && this.useGlobalSubHeader) {
                    this.subHeaderTemplate = this.dt.subHeaderTemplate;
                }
                if (core$1.isBlank(this.bodyClassFn)) {
                    this.bodyClassFn = this.dt.bodyClassFn;
                }
                this.maxWidthPx = this.widthToPx(this.maxWidth);
                this.minWidthPx = this.widthToPx(this.minWidth);
                this.widthPx = this.widthToPx(this.width);
            };
        /**
         * This method is called at the end of the view init cycle from the dt.ngAfterViewChecked.
         *
         * In case we use MaxWidth directive we set new width once for all columsn
         */
        /**
         * This method is called at the end of the view init cycle from the dt.ngAfterViewChecked.
         *
         * In case we use MaxWidth directive we set new width once for all columsn
         * @param {?} myIndex
         * @return {?}
         */
        DTColumn2Component.prototype.postInitialize = /**
         * This method is called at the end of the view init cycle from the dt.ngAfterViewChecked.
         *
         * In case we use MaxWidth directive we set new width once for all columsn
         * @param {?} myIndex
         * @return {?}
         */
            function (myIndex) {
                var _this = this;
                var /** @type {?} */ colIndex = myIndex + 1;
                var /** @type {?} */ table;
                if (this.dt.hasFrozenColumns()) {
                    table = ((this.dt)).el
                        .nativeElement.querySelector('.dt-body-frozen table');
                }
                else {
                    table = ((this.dt)).el.nativeElement.querySelector('table');
                }
                if (this.widestCell > 0) {
                    var /** @type {?} */ all = table.querySelectorAll('tr th:nth-child(' + colIndex + '), ' +
                        'tr td:nth-child(' + colIndex + ')').forEach(function (node) {
                        node.style.width = _this.widestCell + 'px';
                    });
                }
            };
        /**
         * You either use this binding directly and say its datacolumn or when there is a [key]
         * biding we know it refers to some field.
         *
         */
        /**
         * You either use this binding directly and say its datacolumn or when there is a [key]
         * biding we know it refers to some field.
         *
         * @return {?}
         */
        DTColumn2Component.prototype.isValueColumn = /**
         * You either use this binding directly and say its datacolumn or when there is a [key]
         * biding we know it refers to some field.
         *
         * @return {?}
         */
            function () {
                return (core$1.isPresent(this.isDataColumn) && core$1.BooleanWrapper.isTrue(this.isDataColumn)) ||
                    core$1.isPresent(this.key);
            };
        /**
         * When we are in outline mode  we need to also indend each selection control accordingly.
         *
         * indent - 1 > only offset with
         * indent
         */
        /**
         * When we are in outline mode  we need to also indend each selection control accordingly.
         *
         * indent - 1 > only offset with
         * indent
         * @param {?} cell
         * @param {?} level
         * @return {?}
         */
        DTColumn2Component.prototype.indentForControl = /**
         * When we are in outline mode  we need to also indend each selection control accordingly.
         *
         * indent - 1 > only offset with
         * indent
         * @param {?} cell
         * @param {?} level
         * @return {?}
         */
            function (cell, level) {
                if (this.dt.isOutline() && level > 0 && cell.offsetWidth > 0
                    && core$1.isPresent(cell.nextElementSibling)) {
                    var /** @type {?} */ outlineNodePadding = parseInt(getComputedStyle(cell.nextElementSibling).paddingLeft) || 0;
                    // 1st level is pushed as root
                    if (this.dt.pushRootSectionOnNewLine) {
                        return (level === 1) ? null : (this.dt.indentationPerLevel * level)
                            - outlineNodePadding;
                    }
                    else {
                        return (this.dt.indentationPerLevel * level) + outlineNodePadding;
                    }
                }
                return null;
            };
        /**
         *
         * Internal
         * @param {?} width
         * @return {?}
         */
        DTColumn2Component.prototype.widthToPx = /**
         *
         * Internal
         * @param {?} width
         * @return {?}
         */
            function (width) {
                var /** @type {?} */ px;
                if (core$1.isPresent(width)) {
                    if (width.indexOf('%') > 0) {
                        var /** @type {?} */ nonPc = parseFloat(width) / 100;
                        px = nonPc * ((this.dt)).el.nativeElement.offsetWidth;
                    }
                    else {
                        px = parseFloat(width);
                    }
                }
                return px;
            };
        DTColumn2Component.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-dt-column2',
                        template: "<!--\n    To make it more readable Each Column type has its own rendering template instead of putting\n    all this into datatable as this is more responsibility of the column. And the main goal\n    was try to be modular as possible. When There will be different types of columns\n\n    - Regular DTColumn (current implementation),\n    - SelectionColumn (Single/Multi select) - todo,\n    - DetailRow column, then pivotal collumn to render row/column/detail attributes - todo.\n\n    When implementing new column type you just inherit this DTColumnComponent and provide your\n    own rendering template and DT take care of the rest.\n\n    todo: We have SingleSelect, Multiselect rendering template that is Added programatically\n    todo: We have pivotal rendering template\n\n\n-->\n<ng-template #renderingTemplate let-isHeader let-isSubHeader=\"isSubHeader\" let-column=\"column\"\n             let-dataToRender=\"data\"\n             let-columnIndex=\"columnIndex\"\n             let-rowIndex=\"rowIndex\">\n\n    <ng-template *ngIf=\"isHeader\" [ngTemplateOutlet]=\"colHeader\"\n                 [ngTemplateOutletContext]=\"{$implicit: isSubHeader, columnIndex:columnIndex, data: dataToRender,\n                 rowIndex:rowIndex}\">\n    </ng-template>\n\n    <ng-template *ngIf=\"!isHeader\" [ngTemplateOutlet]=\"colBody\"\n                 [ngTemplateOutletContext]=\"{$implicit: column, data:dataToRender,rowIndex:rowIndex}\">\n    </ng-template>\n</ng-template>\n\n\n<!--\n    Templates for header columns. Here we are rendering two types. Header and Subheader that we\n    usually use here as some kind of summary columns. Not really having summary at the bottom like other\n    DT.\n\n    TH column and their text are usually unselectable and most of these were inherited from\n    original PrimeNg DT even not many things got left after we refactor this but the idea is the\n    same.\n\n    Each cell has its dt-cell-def class that sets default styling like font, background, alignment\n    padding, etcs..\n\n\n-->\n<ng-template #colHeader let-isSubHeader let-columnIndex=\"columnIndex\" let-data=\"data\" let-rowIndex=\"rowIndex\">\n\n    <th #headerCell1 [class]=\"headerStyleClass||styleClass\" *ngIf=\"!isSubHeader\"\n        (click)=\"handleHeaderClick($event, headerCell1)\"\n        [ngClass]=\"{'dt-is-default dt-u-unselectable-text' :true,\n                    'dt-cell-def': dt.selectionMode !== 'cell' || (!dt.isOutline() || !dt.pivotalLayout),\n                    'dt-u-sortable': sortable,\n                    'dt-is-active': isSorted(),\n                    'dt-is-hidden': !isVisible}\"\n        [attr.width]=\"width\"\n        [attr.align]=\"align\"\n        [attr.tabindex]=\"sortable ? 1 : null\"\n        [dtMaxWidth]=\"maxWidthPx\"\n    >\n\n        <ng-template [ngIf]=\"dt.headerFilterTemplate && columnIndex === 0 \">\n            <ng-container *ngTemplateOutlet=\"dt.headerFilterTemplate\">\n            </ng-container>\n        </ng-template>\n        <!--\n            when cell are selectable we need two version where one wrap the cell content in div\n        -->\n        <ng-template [ngIf]=\"isHeaderSelectable()\">\n            <ng-container *ngTemplateOutlet=\"selectableHeaderCell; context: {$implicit: this}\">\n            </ng-container>\n        </ng-template>\n\n\n        <ng-template [ngIf]=\"!isHeaderSelectable()\">\n            <ng-container *ngTemplateOutlet=\"nonSelectableHeaderCell; context: {$implicit: this}\">\n            </ng-container>\n        </ng-template>\n    </th>\n\n    <th #headerCell2 [class]=\"headerStyleClass||styleClass\" *ngIf=\"isSubHeader\"\n        [attr.width]=\"width\"\n        [attr.align]=\"align\"\n        [ngClass]=\"{'dt-is-default dt-cell-def dt-sub-header dt-u-unselectable-text':true}\"\n        [dtMaxWidth]=\"maxWidthPx\">\n\n        <span class=\"dt-col-title\" *ngIf=\"dt.showSubHeader && subHeaderTemplate\">\n            <ng-container *ngTemplateOutlet=\"subHeaderTemplate;\n                    context: {$implicit: this, rowData: data, rowIndex: rowIndex}\">\n            </ng-container>\n        </span>\n    </th>\n</ng-template>\n\n\n<!--\n    Template for the body = the TD. For the body and we might want to do the same for header we\n    allow to have calculated body class that comes from the application. So based on the data types\n    you might want to apply different class in order to apply custom styling.\n-->\n<ng-template #colBody let-data=\"data\" let-rowIndex=\"rowIndex\">\n\n    <td #cell [class]=\"dynamicBodyClass(data)\"\n        (click)=\"dt.onCellSelectionChange(cell, this, data)\"\n        [attr.width]=\"width\"\n        [attr.align]=\"align\"\n        [ngClass]=\"{ 'dt-is-default': true,\n        'dt-cell-def': !isCellSelectable(data),\n        'dt-is-hidden': !isVisible}\"\n        [dtMaxWidth]=\"maxWidthPx\"\n        >\n\n        <!--\n            Since we need to support cell selection when we need to draw border around it\n            We are wrapping such sells with div which gives us better flexibility\n        -->\n        <ng-template [ngIf]=\"isCellSelectable(data)\">\n            <ng-container *ngTemplateOutlet=\"selectableBodyCell;\n                        context: {$implicit: this, data: data, rowIndex: rowIndex }\">\n            </ng-container>\n\n        </ng-template>\n\n\n        <ng-template [ngIf]=\"!isCellSelectable(data)\">\n            <ng-container *ngTemplateOutlet=\"nonSelectableBodyCell;\n                        context: {$implicit: this, data: data, rowIndex: rowIndex}\">\n            </ng-container>\n        </ng-template>\n\n    </td>\n</ng-template>\n\n<!--\n    Todo: create better solution instead of using different template create directive that wraps\n    it with the div conditionally\n-->\n<ng-template #selectableHeaderCell let-data=\"data\" let-rowIndex=\"rowIndex\">\n\n    <div class=\"dt-cell-def-selectable\"\n         [ngClass]=\"{'dt-cell-selected': dt.isHeaderSelected(this)}\">\n        <ng-container *ngTemplateOutlet=\"headerCellContent;\n                        context: {$implicit: this, data: data, rowIndex: rowIndex}\">\n        </ng-container>\n    </div>\n</ng-template>\n\n\n<ng-template #nonSelectableHeaderCell let-data=\"data\" let-rowIndex=\"rowIndex\">\n    <ng-container *ngTemplateOutlet=\"headerCellContent;\n                        context: {$implicit: this, data: data, rowIndex: rowIndex}\">\n    </ng-container>\n</ng-template>\n\n\n<ng-template #headerCellContent let-data=\"data\" let-rowIndex=\"rowIndex\">\n    <span class=\"dt-col-title\" *ngIf=\"showColumnLabel && !headerTemplate\">\n                {{label}}\n    </span>\n\n    <span class=\"dt-col-title\" *ngIf=\"showColumnLabel && headerTemplate\">\n                    <ng-container *ngTemplateOutlet=\"headerTemplate;\n                        context: {$implicit: this, rowData: data, rowIndex: rowIndex }\">\n                    </ng-container>\n    </span>\n\n    <span class=\"dt-col-sortable-icon sap-icon icon-sort\" *ngIf=\"sortable\"\n          [ngClass]=\"{'icon-sort-descending': (getSortOrder() == -1),\n                           'icon-sort-ascending': (getSortOrder() == 1)}\">\n    </span>\n</ng-template>\n\n\n<ng-template #selectableBodyCell let-data=\"data\" let-rowIndex=\"rowIndex\">\n    <div class=\"dt-cell-def-selectable\"\n         [ngClass]=\"{'dt-cell-selected': dt.isBodyCellSelected(this, data)}\">\n        <ng-container *ngTemplateOutlet=\"bodyCellContent;\n                        context: {$implicit: this, data: data, rowIndex: rowIndex}\">\n        </ng-container>\n    </div>\n</ng-template>\n\n\n<ng-template #nonSelectableBodyCell let-data=\"data\" let-rowIndex=\"rowIndex\">\n    <ng-container *ngTemplateOutlet=\"bodyCellContent;\n                        context: {$implicit: this, data: data, rowIndex: rowIndex}\">\n    </ng-container>\n</ng-template>\n\n\n<ng-template #bodyCellContent let-data=\"data\" let-rowIndex=\"rowIndex\">\n    <!--\n           when no template is used use our FieldPath to access the object value based on the\n           key binding\n        -->\n    <span class=\"dt-col-cell-data\" *ngIf=\"!bodyTemplate\">\n            {{dt.getValue(data, key)}}\n        </span>\n\n\n    <!--\n        In case application wants to provide their own cell component they use\n        #body ng-template to do so.\n    -->\n    <span class=\"dt-col-cell-data\" *ngIf=\"bodyTemplate\">\n            <ng-container *ngTemplateOutlet=\"bodyTemplate;\n            context: {$implicit: this, rowData: data, rowIndex: rowIndex}\"></ng-container>\n        </span>\n</ng-template>\n",
                        styles: [".dt-sortable-col{cursor:pointer}.dt-col-sortable-icon{display:inline-block;margin-left:.125em}th.dt-cell-def{font-weight:400;color:#4a4a4a}th.dt-is-default{background-color:#f2f2f2;white-space:nowrap}th.dt-is-default.dt-cell-def:not(.dt-sub-header){border-bottom-color:#f2f2f2}th.dt-sub-header{background-color:#fff}th .dt-cell-selected{border-color:#58b957}td .dt-cell-selected{border-left-color:#4f9fcf}.dt-root-section .dt-selection-column,.dt-selection-column{width:46px;padding:0 12px}.dt-pivot-layout td.dt-selection-column,th.dt-selection-column{border-right-color:transparent}thead tr:first-child th{border-top-color:transparent}tbody tr:last-child:not(.dt-drag-row-bottom) td{border-bottom-color:transparent}td:first-child,th:first-child{border-left-color:transparent}td:last-child,th:last-child{border-right-color:transparent}tbody .dt-drag-row-top>td{background:linear-gradient(0deg,#fff 0,#fff 97%,#0271d2 100%)}tbody .dt-drag-row-bottom>td{background:linear-gradient(180deg,#fff 0,#fff 97%,#0271d2 100%)}tbody .dt-drag-row-both>td{background:linear-gradient(0deg,#0271d2 0,#fff 3%,#fff 97%,#0271d2 100%)}tbody .dt-row-dragging>td{background-color:#ececec;color:#b9b9b9}tbody .dt-row-dragging .ui-state-active{opacity:.5;cursor:not-allowed}"],
                        encapsulation: core.ViewEncapsulation.None,
                        providers: [primeng.DomHandler]
                    },] },
        ];
        /** @nocollapse */
        DTColumn2Component.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: primeng.DomHandler }
            ];
        };
        DTColumn2Component.propDecorators = {
            label: [{ type: core.Input }],
            key: [{ type: core.Input }],
            align: [{ type: core.Input }],
            bodyClassFn: [{ type: core.Input }],
            isVisible: [{ type: core.Input }],
            sortable: [{ type: core.Input }],
            sortOrdering: [{ type: core.Input }],
            showColumnLabel: [{ type: core.Input }],
            showSubHeader: [{ type: core.Input }],
            headerStyleClass: [{ type: core.Input }],
            bodyStyleClass: [{ type: core.Input }],
            selectable: [{ type: core.Input }],
            useGlobalHeader: [{ type: core.Input }],
            useGlobalSubHeader: [{ type: core.Input }],
            useGlobalBody: [{ type: core.Input }],
            isDataColumn: [{ type: core.Input }],
            frozen: [{ type: core.Input }],
            maxWidth: [{ type: core.Input }],
            minWidth: [{ type: core.Input }],
            rendererTemplate: [{ type: core.ViewChild, args: ['renderingTemplate',] }],
            headerTemplate: [{ type: core.ContentChild, args: ['header',] }],
            subHeaderTemplate: [{ type: core.ContentChild, args: ['subHeader',] }],
            bodyTemplate: [{ type: core.ContentChild, args: ['body',] }]
        };
        return DTColumn2Component;
    }(BaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * An datatable header area.
     *
     * See {\@link DataTableComponent} for more explanation.
     */
    var DTHeaderComponent2 = (function () {
        function DTHeaderComponent2() {
        }
        DTHeaderComponent2.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-dt-header2',
                        template: '<ng-content></ng-content>'
                    },] },
        ];
        return DTHeaderComponent2;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     *
     * Custom column implementation to render detail row spaning its column across whole table width.
     *
     *
     */
    var DTDetailRowComponent = (function (_super) {
        __extends(DTDetailRowComponent, _super);
        function DTDetailRowComponent(env, domHandler) {
            var _this = _super.call(this, env, domHandler) || this;
            _this.env = env;
            _this.domHandler = domHandler;
            /**
             *
             * tells if we need to render a line between item row and its detail
             *
             */
            _this.showRowLine = true;
            return _this;
        }
        /**
         * @return {?}
         */
        DTDetailRowComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                // just to get around the check in parent class
                this.key = '';
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * Check if we need to keep some leading TDs
         *
         */
        /**
         * Check if we need to keep some leading TDs
         *
         * @return {?}
         */
        DTDetailRowComponent.prototype.visibleLeadingCols = /**
         * Check if we need to keep some leading TDs
         *
         * @return {?}
         */
            function () {
                return this.dt.numberOfColsBeforeData - (this.dt.hasInvisibleSelectionColumn() ? 1 : 0);
            };
        /**
         *
         * Check if we can show detail row/column using either [isVisible] or [isVisibleFn] bindings.
         * Here can hook on application level custom method to decide if current item has detail row
         * or not
         *
         * Or we can use isVisible=true to tell all row have detail row
         *
         */
        /**
         *
         * Check if we can show detail row/column using either [isVisible] or [isVisibleFn] bindings.
         * Here can hook on application level custom method to decide if current item has detail row
         * or not
         *
         * Or we can use isVisible=true to tell all row have detail row
         *
         * @param {?} item
         * @return {?}
         */
        DTDetailRowComponent.prototype.showDetailRow = /**
         *
         * Check if we can show detail row/column using either [isVisible] or [isVisibleFn] bindings.
         * Here can hook on application level custom method to decide if current item has detail row
         * or not
         *
         * Or we can use isVisible=true to tell all row have detail row
         *
         * @param {?} item
         * @return {?}
         */
            function (item) {
                var /** @type {?} */ isVisible = this.isVisible;
                if (core$1.isPresent(this.isVisibleFn)) {
                    isVisible = this.isVisibleFn.apply(this.dt.context, [this, item]);
                }
                return isVisible;
            };
        /**
         * @param {?} table
         * @return {?}
         */
        DTDetailRowComponent.prototype.initialize = /**
         * @param {?} table
         * @return {?}
         */
            function (table) {
                _super.prototype.initialize.call(this, table);
                this.isVisible = !this.dt.isOutline() || !this.dt.pivotalLayout;
            };
        DTDetailRowComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-dt-detail-column',
                        template: "<!--\n    Renders application defined detail column. This template just renders a detail row and\n    not expansion control. This is implemented by different DtColumn implementation and its added\n    (will be) added programmatically during column initialization\n-->\n<ng-template #renderingTemplate let-column=\"column\" let-rowData=\"data\">\n\n    <tr #detailRowElement class=\"dt-body-row dt-detail-row\">\n\n        <td *ngIf=\"dt.hasInvisibleSelectionColumn()\" width=\"1px\"></td>\n        <td *ngIf=\"visibleLeadingCols() > 0\" colspan=\"visibleLeadingCols()\" width=\"1px\">\n            &nbsp;&nbsp;\n        </td>\n        <td [attr.colspan]=\"dt.startOfFirstDataColumn\" [class]=\"dynamicBodyClass(rowData)\"\n            [ngClass]=\"{ 'dt-is-default dt-cell-def': true}\">\n\n            <ng-container\n                *ngTemplateOutlet=\"bodyTemplate; context:{$implicit: this, rowData:rowData}\">\n            </ng-container>\n        </td>\n    </tr>\n</ng-template>\n\n",
                        styles: [""],
                        encapsulation: core.ViewEncapsulation.None,
                        providers: [primeng.DomHandler]
                    },] },
        ];
        /** @nocollapse */
        DTDetailRowComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: primeng.DomHandler }
            ];
        };
        DTDetailRowComponent.propDecorators = {
            isVisibleFn: [{ type: core.Input }],
            showRowLine: [{ type: core.Input }]
        };
        return DTDetailRowComponent;
    }(DTColumn2Component));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     *
     *
     *
     *
     */
    var DTDetailRowExpanderComponent = (function (_super) {
        __extends(DTDetailRowExpanderComponent, _super);
        function DTDetailRowExpanderComponent(env, domHandler) {
            var _this = _super.call(this, env, domHandler) || this;
            _this.env = env;
            _this.domHandler = domHandler;
            // we dont want to show the row/column unless application says so
            // we dont want to show the row/column unless application says so
            _this.isVisible = false;
            // default width of the selection control
            // default width of the selection control
            _this.width = '45px';
            return _this;
        }
        /**
         * @return {?}
         */
        DTDetailRowExpanderComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                // just to get around the check in parent class
                this.key = '';
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @param {?} event
         * @param {?} item
         * @return {?}
         */
        DTDetailRowExpanderComponent.prototype.toggleExpansion = /**
         * @param {?} event
         * @param {?} item
         * @return {?}
         */
            function (event, item) {
                this.dt.detailRowExpansionState.toggle(item);
                event.stopPropagation();
            };
        /**
         * @param {?} item
         * @return {?}
         */
        DTDetailRowExpanderComponent.prototype.calculateStyleClass = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return this.dt.detailRowExpansionState.isExpanded(item) ?
                    'icon-slim-arrow-down' : 'icon-slim-arrow-right';
            };
        DTDetailRowExpanderComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-dt-detail-column-expand',
                        template: "<!--\n   Special column that renders expand/collapse control for detail row when detail row is enabled.\n\n   Just like for the other column it renders header section as well as body section with\n   expand control to toggle the expansion\n\n-->\n<ng-template #renderingTemplate let-isHeader let-isSubHeader=\"isSubHeader\" let-column=\"column\"\n             let-dataToRender=\"data\" let-columnIndex=\"columnIndex\" let-rowIndex=\"rowIndex\">\n\n\n    <ng-template [ngIf]=\"isHeader && !isSubHeader\">\n        <th #headerCell1 [class]=\"headerStyleClass||styleClass\"\n            class=\"dt-row-cell-expando\"\n            [ngClass]=\"{'dt-is-default dt-u-unselectable-text dt-cell-def' :true,\n                        'dt-det-row-expanded': dt.detailRowExpansionState.isExpanded(dataToRender)}\">\n        </th>\n\n    </ng-template>\n\n    <ng-template [ngIf]=\"!isHeader && !isSubHeader\">\n        <td #cell\n            class=\"dt-row-cell-expando\"\n            [ngClass]=\"{ 'dt-is-default': true,\n                    'dt-cell-def': !isCellSelectable(dataToRender),\n                    'dt-det-row-expanded': dt.detailRowExpansionState.isExpanded(dataToRender),\n                    'dt-det-row-with-ln' : dt.rowDetailColumn.showRowLine}\">\n\n            <span (click)=\"toggleExpansion($event, dataToRender)\"\n                  class=\"dt-det-row-expand sap-icon\"\n                  [ngClass]=\"calculateStyleClass(dataToRender)\">\n\n            </span>\n\n        </td>\n\n    </ng-template>\n\n\n</ng-template>\n\n",
                        styles: [".dt-row-cell-expando{width:14px;text-align:right;padding:17px 5px 17px 17px;border-right-color:transparent}.dt-row-cell-expando .dt-det-row-expand{cursor:pointer;line-height:21px}td.dt-det-row-expanded:not(.dt-det-row-with-ln),td.dt-det-row-expanded:not(.dt-det-row-with-ln)~td{border-bottom-color:transparent}"],
                        encapsulation: core.ViewEncapsulation.None,
                        providers: [primeng.DomHandler]
                    },] },
        ];
        /** @nocollapse */
        DTDetailRowExpanderComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: primeng.DomHandler }
            ];
        };
        return DTDetailRowExpanderComponent;
    }(DTColumn2Component));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     *
     * @license
     * Copyright 2017 SAP Ariba
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     *
     *
     */
    var /** @type {?} */ DragEvents = ['mousedown', 'dragstart', 'dragover', 'dragenter', 'dragleave',
        'drop', 'dragend'];
    /** @enum {string} */
    var DragDirection = {
        None: 'none',
        Up: 'dt-drag-row-top',
        Down: 'dt-drag-row-bottom',
        Middle: 'dt-drag-row-both',
    };
    /** @enum {string} */
    var DropPosition = {
        Before: 'before',
        After: 'after',
        Into: 'into',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Concrete DataSource implementation for Datatable which defines state and column definition that
     * can programmatically modify rendered columns (if provided) and method for inserting and
     * and deleting records;
     *
     * All operations dealing with data use Observable<T> and instant() method to retrieve current
     * state is not implemented.
     *
     *
     */
    var DT2DataSource = (function (_super) {
        __extends(DT2DataSource, _super);
        function DT2DataSource(dataProviders, finders) {
            var _this = _super.call(this, dataProviders, finders) || this;
            _this.dataProviders = dataProviders;
            _this.finders = finders;
            _this.initialized = false;
            _this.state = Datatable2State.create();
            _this.debugTime = new Date().getTime();
            return _this;
        }
        /**
         * @param {...?} args
         * @return {?}
         */
        DT2DataSource.prototype.init = /**
         * @param {...?} args
         * @return {?}
         */
            function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                if (core$1.isBlank(args) || args.length !== 1 && !isDTInitParams(args[0])) {
                    throw new Error('You need to initialize DS with (DSChooserInitParams)');
                }
                var /** @type {?} */ init = args[0];
                // use existing or find best match for dataProvider
                this.dataProvider = core$1.isPresent(init.dataProvider) ? init.dataProvider
                    : this.dataProviders.find(init.obj);
                // use existing or find best match for dataFinder
                this.dataFinder = core$1.isPresent(init.dataFinder) ? init.dataFinder
                    : this.finders.find(this.dataProvider, init.queryType);
                core$1.assert(core$1.isPresent(this.dataProvider) && core$1.isPresent(this.dataFinder), 'DataSource incorrectly initialized. (DataProvider, DataFinder) missing. ');
                this.dataFinder.lookupKey = init.lookupKey;
                if (core$1.isBlank(init.state)) {
                    this.state = new Datatable2State();
                }
                else {
                    this.state = init.state;
                }
                this.initialized = true;
            };
        /**
         * Triggers async fetch data request and result is given back using dataProvider.dataChanges
         *
         */
        /**
         * Triggers async fetch data request and result is given back using dataProvider.dataChanges
         *
         * @param {?=} withParams
         * @return {?}
         */
        DT2DataSource.prototype.fetch = /**
         * Triggers async fetch data request and result is given back using dataProvider.dataChanges
         *
         * @param {?=} withParams
         * @return {?}
         */
            function (withParams) {
                var _this = this;
                var /** @type {?} */ params = null;
                if (core$1.isPresent(withParams)) {
                    params = new Map().set('offset', withParams.offset)
                        .set('limit', withParams.limit)
                        .set('orderby', withParams.sortKey)
                        .set('selector', withParams.sortOrder);
                }
                this.dataProvider.fetch(params).subscribe(function (result) {
                    if (withParams.offset > 0) {
                        var /** @type {?} */ incrData = __spread(_this.dataProvider.dataChanges.getValue(), result);
                        _this.dataProvider.dataChanges.next(incrData);
                    }
                    else {
                        _this.dataProvider.dataChanges.next(result);
                    }
                });
            };
        /**
         * Component uses this method to open up continuous stream to listen for any changes which
         * need to be reflected on the UI.
         *
         * Dont forget to unsubscribe when component is destroyed.
         */
        /**
         * Component uses this method to open up continuous stream to listen for any changes which
         * need to be reflected on the UI.
         *
         * Dont forget to unsubscribe when component is destroyed.
         * @template T
         * @return {?}
         */
        DT2DataSource.prototype.open = /**
         * Component uses this method to open up continuous stream to listen for any changes which
         * need to be reflected on the UI.
         *
         * Dont forget to unsubscribe when component is destroyed.
         * @template T
         * @return {?}
         */
            function () {
                return this.dataProvider.dataChanges.asObservable();
            };
        /**
         * @return {?}
         */
        DT2DataSource.prototype.close = /**
         * @return {?}
         */
            function () {
                this.dataProvider = null;
                this.dataFinder = null;
            };
        /**
         * If CRUD is enabled we delegate calls to DataProvider that is responsible to tell the
         * dataProvider.dataChanges that are new data. If not enabled we have default implementation
         * which works with local array
         *
         */
        /**
         * If CRUD is enabled we delegate calls to DataProvider that is responsible to tell the
         * dataProvider.dataChanges that are new data. If not enabled we have default implementation
         * which works with local array
         *
         * @param {?} object
         * @return {?}
         */
        DT2DataSource.prototype.insert = /**
         * If CRUD is enabled we delegate calls to DataProvider that is responsible to tell the
         * dataProvider.dataChanges that are new data. If not enabled we have default implementation
         * which works with local array
         *
         * @param {?} object
         * @return {?}
         */
            function (object) {
                if (this.dataProvider.canCRUD()) {
                    this.dataProvider.insert(object);
                }
                else {
                    this.dataProvider.offScreenData.push(object);
                    this.dataProvider.dataChanges.next(this.dataProvider.offScreenData);
                }
            };
        /**
         * Please see {@link insert} method
         *
         */
        /**
         * Please see {\@link insert} method
         *
         * @param {?} object
         * @return {?}
         */
        DT2DataSource.prototype.remove = /**
         * Please see {\@link insert} method
         *
         * @param {?} object
         * @return {?}
         */
            function (object) {
                if (this.dataProvider.canCRUD()) {
                    this.dataProvider.remove(object);
                }
                else {
                    core$1.ListWrapper.removeIfExist(this.dataProvider.offScreenData, object);
                    this.dataProvider.dataChanges.next(this.dataProvider.offScreenData);
                }
            };
        /**
         *
         * Provides access to DataFinder which can accept either plain string or Map.
         *
         * To be able to provide correct input we need to ask DataFinder if it supports FullText like
         * type query or Predicate. In case of Predicate we build the Map with different key/value
         * pairs
         *
         *
         */
        /**
         *
         * Provides access to DataFinder which can accept either plain string or Map.
         *
         * To be able to provide correct input we need to ask DataFinder if it supports FullText like
         * type query or Predicate. In case of Predicate we build the Map with different key/value
         * pairs
         *
         *
         * @param {?=} pattern
         * @return {?}
         */
        DT2DataSource.prototype.find = /**
         *
         * Provides access to DataFinder which can accept either plain string or Map.
         *
         * To be able to provide correct input we need to ask DataFinder if it supports FullText like
         * type query or Predicate. In case of Predicate we build the Map with different key/value
         * pairs
         *
         *
         * @param {?=} pattern
         * @return {?}
         */
            function (pattern) {
                var _this = this;
                if (core$1.isBlank(pattern) || pattern.length === 0) {
                    // if we received empty string return orginal list
                    this.fetch(this.state);
                    return;
                }
                var /** @type {?} */ searchParam = pattern;
                if (this.dataFinder.accepts(this.dataProvider, QueryType.Predicate)) {
                    searchParam = new Map().set('query', pattern).set('limit', DT2DataSource.MaxLimit);
                    if (core$1.isPresent(this.state.sortKey)) {
                        searchParam.set('orderby', this.state.sortKey);
                    }
                    if (core$1.isPresent(this.state.sortKey)) {
                        searchParam.set('selector', this.state.sortOrder);
                    }
                }
                else {
                    core$1.assert(core$1.isString(pattern), 'Cannot pass non-string value to FullText Finder');
                }
                this.dataFinder.match(searchParam).subscribe(function (result) {
                    _this.dataProvider.dataChanges.next(result);
                });
            };
        /**
         *
         * Data source delegates the responsibility to the given data provider which needs to implement
         * specific sorting mechanism
         *
         * Todo: Extend to sort by multiple columns
         *
         */
        /**
         *
         * Data source delegates the responsibility to the given data provider which needs to implement
         * specific sorting mechanism
         *
         * Todo: Extend to sort by multiple columns
         *
         * @param {?} key
         * @param {?} sortOrder
         * @return {?}
         */
        DT2DataSource.prototype.sort = /**
         *
         * Data source delegates the responsibility to the given data provider which needs to implement
         * specific sorting mechanism
         *
         * Todo: Extend to sort by multiple columns
         *
         * @param {?} key
         * @param {?} sortOrder
         * @return {?}
         */
            function (key, sortOrder) {
                if (core$1.isBlank(this.dataProvider.data()) || this.dataProvider.data().length === 0) {
                    return;
                }
                this.state.sortKey = key;
                this.state.sortOrder = sortOrder;
                this.fetch(this.state);
            };
        /**
         *
         * Persist db state
         *
         */
        /**
         *
         * Persist db state
         *
         * @param {?} offset
         * @param {?} sortField
         * @param {?} sOrder
         * @return {?}
         */
        DT2DataSource.prototype.updateState = /**
         *
         * Persist db state
         *
         * @param {?} offset
         * @param {?} sortField
         * @param {?} sOrder
         * @return {?}
         */
            function (offset, sortField, sOrder) {
                this.state.offset = offset;
                this.state.sortKey = sortField;
                this.state.sortOrder = sOrder;
            };
        /**
         *
         * reshuffles current array based on new row D&D result.
         *
         * Since there is a difference if we move item from bottom or from the top and then accordingly
         * highlighting a space between rows. We need to reflect this in here as well.
         *
         * UseCase 1:
         *
         * 1. You can grab item with index 0 and move it down so that you can see a dropping line
         * between row with index 2 - 3
         *
         * 2. In this case splice() starts from position 2 and insert all elements after 2
         *      splice(start: number, deleteCount: number, ...items: T[]): T[];
         *
         * 3. no need to update newPos
         *
         * UseCase 2:
         *
         * 1. You can grab item with index 0 and move all the way down of the DT and now move the
         * row toward TOP and space between rows with index 2 - 3 is highlighted again.
         *
         * 2. Here is the difference, before we highlighted row #2 with line at the bottom, now
         * it seems the same but its highlighted row #3 with line at the TOP.
         *
         * * This is the reason whey we need to do newPos -= 1 or newPos += 1; depending our direction
         * where where the line between rows is created.
         *
         *
         * We don't need any complicated calculation trying to find out if we are on one half of the row
         * or second half and based on this try to apply certain style. This would not give so much
         * space if we want drop row into the row. And the calculation with coordinates woudl be too
         * complicated.
         *
         * We simply remember the direction we are moving and based on this we apply style to
         * to create a line at the TOP if we are going upwards or bottom otherwise.
         *
         *
         */
        /**
         *
         * reshuffles current array based on new row D&D result.
         *
         * Since there is a difference if we move item from bottom or from the top and then accordingly
         * highlighting a space between rows. We need to reflect this in here as well.
         *
         * UseCase 1:
         *
         * 1. You can grab item with index 0 and move it down so that you can see a dropping line
         * between row with index 2 - 3
         *
         * 2. In this case splice() starts from position 2 and insert all elements after 2
         *      splice(start: number, deleteCount: number, ...items: T[]): T[];
         *
         * 3. no need to update newPos
         *
         * UseCase 2:
         *
         * 1. You can grab item with index 0 and move all the way down of the DT and now move the
         * row toward TOP and space between rows with index 2 - 3 is highlighted again.
         *
         * 2. Here is the difference, before we highlighted row #2 with line at the bottom, now
         * it seems the same but its highlighted row #3 with line at the TOP.
         *
         * * This is the reason whey we need to do newPos -= 1 or newPos += 1; depending our direction
         * where where the line between rows is created.
         *
         *
         * We don't need any complicated calculation trying to find out if we are on one half of the row
         * or second half and based on this try to apply certain style. This would not give so much
         * space if we want drop row into the row. And the calculation with coordinates woudl be too
         * complicated.
         *
         * We simply remember the direction we are moving and based on this we apply style to
         * to create a line at the TOP if we are going upwards or bottom otherwise.
         *
         *
         * @param {?} origPos
         * @param {?} newPos
         * @param {?} dropPos
         * @return {?}
         */
        DT2DataSource.prototype.reorderRows = /**
         *
         * reshuffles current array based on new row D&D result.
         *
         * Since there is a difference if we move item from bottom or from the top and then accordingly
         * highlighting a space between rows. We need to reflect this in here as well.
         *
         * UseCase 1:
         *
         * 1. You can grab item with index 0 and move it down so that you can see a dropping line
         * between row with index 2 - 3
         *
         * 2. In this case splice() starts from position 2 and insert all elements after 2
         *      splice(start: number, deleteCount: number, ...items: T[]): T[];
         *
         * 3. no need to update newPos
         *
         * UseCase 2:
         *
         * 1. You can grab item with index 0 and move all the way down of the DT and now move the
         * row toward TOP and space between rows with index 2 - 3 is highlighted again.
         *
         * 2. Here is the difference, before we highlighted row #2 with line at the bottom, now
         * it seems the same but its highlighted row #3 with line at the TOP.
         *
         * * This is the reason whey we need to do newPos -= 1 or newPos += 1; depending our direction
         * where where the line between rows is created.
         *
         *
         * We don't need any complicated calculation trying to find out if we are on one half of the row
         * or second half and based on this try to apply certain style. This would not give so much
         * space if we want drop row into the row. And the calculation with coordinates woudl be too
         * complicated.
         *
         * We simply remember the direction we are moving and based on this we apply style to
         * to create a line at the TOP if we are going upwards or bottom otherwise.
         *
         *
         * @param {?} origPos
         * @param {?} newPos
         * @param {?} dropPos
         * @return {?}
         */
            function (origPos, newPos, dropPos) {
                var /** @type {?} */ array = this.dataProvider.data().slice();
                // take something from top and drag&drop under
                if (newPos > origPos && dropPos === DropPosition.Before && newPos < array.length) {
                    newPos -= 1;
                    // take something from bottom and drag&drop above
                }
                else if (newPos < origPos && dropPos === DropPosition.After && newPos >= 0) {
                    newPos += 1;
                }
                array.splice.apply(array, __spread([newPos, 0], array.splice(origPos, 1)[0]));
                this.dataProvider.dataChanges.next(array);
            };
        DT2DataSource.MaxLimit = 100;
        return DT2DataSource;
    }(DataSource));
    /**
     * Keeps current datatable state the state which drivers the way while fetching the data as well
     * encapsulate set of properties that needs to be persistet in order to recover a state after e.g.
     * browser refresh
     *
     *
     * todo: Create methods to convert this state from and to JSON for easier serialization
     */
    var Datatable2State = (function () {
        function Datatable2State() {
            /**
             * Properties for paging and fetching
             */
            this.offset = 0;
            this.limit = 0;
            /**
             * Identifies default value that is used to render N number of rows in non-fullscreen
             * mode
             *
             */
            this.displayLimit = 0;
            /**
             * Sorting order of the sort field. DataTable support sorting for multiple column but we
             * dont persist it now. Maybe in the future
             */
            this.sortOrder = Datatable2State.Ascending;
            /**
             * If we are using global filter for current datatable then save it here
             */
            this.currentSearchQuery = '';
            this.outlineState = new Map();
            this.detailRowExpandState = new Map();
        }
        /**
         * @param {?=} offset
         * @param {?=} limit
         * @param {?=} displayLimit
         * @param {?=} sortField
         * @param {?=} sOrder
         * @param {?=} searchQuery
         * @param {?=} filter
         * @param {?=} outlineState
         * @param {?=} detailRowState
         * @return {?}
         */
        Datatable2State.create = /**
         * @param {?=} offset
         * @param {?=} limit
         * @param {?=} displayLimit
         * @param {?=} sortField
         * @param {?=} sOrder
         * @param {?=} searchQuery
         * @param {?=} filter
         * @param {?=} outlineState
         * @param {?=} detailRowState
         * @return {?}
         */
            function (offset, limit, displayLimit, sortField, sOrder, searchQuery, filter, outlineState, detailRowState) {
                if (offset === void 0) {
                    offset = 0;
                }
                if (limit === void 0) {
                    limit = 15;
                }
                if (displayLimit === void 0) {
                    displayLimit = 5;
                }
                if (sortField === void 0) {
                    sortField = '';
                }
                if (sOrder === void 0) {
                    sOrder = 0;
                }
                if (outlineState === void 0) {
                    outlineState = new Map();
                }
                if (detailRowState === void 0) {
                    detailRowState = new Map();
                }
                var /** @type {?} */ s = new Datatable2State();
                s.offset = offset;
                s.limit = limit;
                s.displayLimit = displayLimit;
                s.sortKey = sortField;
                s.sortOrder = sOrder;
                s.currentSearchQuery = searchQuery;
                s.currentFilter = filter;
                s.outlineState = outlineState;
                s.detailRowExpandState = detailRowState;
                return s;
            };
        /**
         * @param {?} data
         * @return {?}
         */
        Datatable2State.fromJSON = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var /** @type {?} */ state = JSON.parse(data);
                var /** @type {?} */ ds = new Datatable2State();
                ds.offset = state.offset;
                ds.limit = state.limit;
                ds.displayLimit = state.displayLimit;
                ds.sortKey = state.sortKey;
                ds.sortOrder = state.sortOrder;
                ds.currentSearchQuery = state.currentSearchQuery;
                ds.outlineState = core$1.MapWrapper.createFromAnyMap(state.outlineState);
                ds.detailRowExpandState = core$1.MapWrapper.createFromAnyMap(state.detailRowExpandState);
                return ds;
            };
        /**
         * @param {?} data
         * @return {?}
         */
        Datatable2State.toJSON = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var /** @type {?} */ toConvert = {
                    offset: data.offset,
                    limit: data.limit,
                    displayLimit: data.displayLimit,
                    sortKey: data.sortKey,
                    sortOrder: data.sortOrder,
                    currentSearchQuery: data.currentSearchQuery,
                    outlineState: core$1.MapWrapper.toAnyMap(data.outlineState),
                    detailRowExpandState: core$1.MapWrapper.toAnyMap(data.detailRowExpandState)
                };
                return JSON.stringify(toConvert);
            };
        Datatable2State.Ascending = 1;
        Datatable2State.Descending = -1;
        return Datatable2State;
    }());
    /**
     * This needs to go to DTDataSource to keep and manage the state of the detail row. The idea is
     * simple we have a map holding item reference as a key and boolean value indicating if the
     * detail row is visible
     *
     * Todo: move this out to DS
     */
    var /**
     * This needs to go to DTDataSource to keep and manage the state of the detail row. The idea is
     * simple we have a map holding item reference as a key and boolean value indicating if the
     * detail row is visible
     *
     * Todo: move this out to DS
     */ DetailRowExpansionState = (function () {
        function DetailRowExpansionState(dt) {
            this.dt = dt;
        }
        Object.defineProperty(DetailRowExpansionState.prototype, "detailExpansionEnabled", {
            get: /**
             * @return {?}
             */ function () {
                return core$1.isPresent(this.expansionStates);
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value) {
                    this.expansionStates = new Map();
                }
                else {
                    this.expansionStates = null;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} item
         * @return {?}
         */
        DetailRowExpansionState.prototype.toggle = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                var /** @type {?} */ key = this.itemToKey(item);
                if (!this.isExpanded(item)) {
                    this.expansionStates.set(key, true);
                }
                else {
                    this.expansionStates.delete(key);
                }
                this.dt.dataSource.state.detailRowExpandState = this.expansionStates;
            };
        /**
         * @param {?} item
         * @return {?}
         */
        DetailRowExpansionState.prototype.isExpanded = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                var /** @type {?} */ key = this.itemToKey(item);
                // handle special case where we collapse parent of parent while detail row is expanded
                if (this.dt.isOutline() && !this.dt.outlineState.isExpanded(key)) {
                    this.expansionStates.delete(key);
                    return false;
                }
                var /** @type {?} */ isOutlineExpanded = this.dt.isOutline() ? this.dt.outlineState.isExpanded(key) : true;
                return core$1.isPresent(key) && this.expansionStates.has(key);
            };
        /**
         * @param {?} item
         * @return {?}
         */
        DetailRowExpansionState.prototype.itemToKey = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return core$1.isEntity(item) ? ((item)).identity() : item;
            };
        return DetailRowExpansionState;
    }());
    /**
     * @param {?} init
     * @return {?}
     */
    function isDTInitParams(init) {
        return core$1.isPresent(init.obj) || core$1.isPresent(init.queryType) || core$1.isPresent(init.entity);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     *
     * Column implementation for the Multiselection where we show checkbox control
     *
     *
     */
    var DTMultiSelectColumnComponent = (function (_super) {
        __extends(DTMultiSelectColumnComponent, _super);
        function DTMultiSelectColumnComponent(env, domHandler) {
            var _this = _super.call(this, env, domHandler) || this;
            _this.env = env;
            _this.domHandler = domHandler;
            // default width of the selection control
            // default width of the selection control
            _this.width = '45px';
            return _this;
        }
        DTMultiSelectColumnComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-dt-multi-select-column',
                        template: "<!--\n    Manages multi selection and renders checkboxes both for header in case [showSelectAll] is\n    enabled as well as each checkbox per row\n-->\n<ng-template #renderingTemplate let-isHeader let-isSubHeader=\"isSubHeader\" let-column=\"column\"\n             let-dataToRender=\"data\"\n             let-level=\"nestingLevel\"\n             let-columnIndex=\"columnIndex\"\n             let-rowIndex=\"rowIndex\">\n\n    <ng-template *ngIf=\"isHeader\" [ngTemplateOutlet]=\"colHeader\"\n                 [ngTemplateOutletContext]=\"{$implicit: isSubHeader, columnIndex:columnIndex,\n                 level:level}\">\n    </ng-template>\n\n    <ng-template *ngIf=\"!isHeader\" [ngTemplateOutlet]=\"colBody\"\n                 [ngTemplateOutletContext]=\"{$implicit: column, level:level,\n                    data:dataToRender,rowIndex:rowIndex}\">\n    </ng-template>\n</ng-template>\n\n\n<ng-template #colHeader let-isSubHeader let-columnIndex=\"columnIndex\">\n    <th [ngClass]=\"{'dt-is-default dt-u-unselectable-text dt-selection-column' :true,\n                    'dt-cell-def': true,\n                    'dt-sub-header': isSubHeader,\n                    'dt-is-hidden': !dt.showSelectionColumn}\" align=\"center\">\n\n        <ng-template [ngIf]=\"dt.showSelectAll\">\n            <aw-checkbox [type]=\"'action'\" (action)=\"dt.toggleAllColumns($event)\"\n                         [value]=\"dt.isToggleAllColumnSelected()\"\n                         [disabled]=\"dt.isToggleAllColumnDisabled()\">\n            </aw-checkbox>\n        </ng-template>\n\n        <ng-template [ngIf]=\"!dt.showSelectAll\">&nbsp;\n        </ng-template>\n    </th>\n\n</ng-template>\n\n\n<ng-template #colBody let-data=\"data\" let-rowIndex=\"rowIndex\" , let-level=\"level\">\n\n    <td #cell [class]=\"dynamicBodyClass(data)\"\n        [style.padding-left.px]=\"indentForControl(cell, level)\"\n        align=\"center\"\n        [ngClass]=\"{ 'dt-is-default dt-selection-column': true,\n        'dt-cell-def': true,\n        'dt-is-hidden': !dt.showSelectionColumn}\">\n\n        <aw-checkbox [type]=\"'action'\" [value]=\"dt.isRowSelected(data)\">\n        </aw-checkbox>\n\n    </td>\n</ng-template>\n",
                        styles: [""],
                        encapsulation: core.ViewEncapsulation.None,
                        providers: [primeng.DomHandler]
                    },] },
        ];
        /** @nocollapse */
        DTMultiSelectColumnComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: primeng.DomHandler }
            ];
        };
        return DTMultiSelectColumnComponent;
    }(DTColumn2Component));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     *
     * Column implementation for the SingleSelect where we show checkbox control
     *
     *
     */
    var DTSingleSelectColumnComponent = (function (_super) {
        __extends(DTSingleSelectColumnComponent, _super);
        function DTSingleSelectColumnComponent(env, domHandler) {
            var _this = _super.call(this, env, domHandler) || this;
            _this.env = env;
            _this.domHandler = domHandler;
            // default width of the selection control
            // default width of the selection control
            _this.width = '45px';
            return _this;
        }
        DTSingleSelectColumnComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-dt-single-select-column',
                        template: "<!--\n    Manages multi selection and renders checkboxes both for header in case [showSelectAll] is\n    enabled as well as each checkbox per row\n-->\n<ng-template #renderingTemplate let-isHeader let-isSubHeader=\"isSubHeader\" let-column=\"column\"\n             let-dataToRender=\"data\"\n             let-level=\"nestingLevel\"\n             let-columnIndex=\"columnIndex\"\n             let-rowIndex=\"rowIndex\">\n\n    <ng-template *ngIf=\"isHeader\" [ngTemplateOutlet]=\"colHeader\"\n                 [ngTemplateOutletContext]=\"{$implicit: isSubHeader, columnIndex:columnIndex,\n                 level:level}\">\n    </ng-template>\n\n    <ng-template *ngIf=\"!isHeader\" [ngTemplateOutlet]=\"colBody\"\n                 [ngTemplateOutletContext]=\"{$implicit: column, level:level,\n                    data:dataToRender,rowIndex:rowIndex}\">\n    </ng-template>\n</ng-template>\n\n\n<ng-template #colHeader let-isSubHeader let-columnIndex=\"columnIndex\">\n    <th [ngClass]=\"{'dt-is-default dt-u-unselectable-text dt-selection-column' :true,\n                    'dt-cell-def': true,\n                    'dt-sub-header': isSubHeader,\n                    'dt-is-hidden': !dt.showSelectionColumn}\" align=\"center\">\n        &nbsp;\n    </th>\n\n</ng-template>\n\n\n<ng-template #colBody let-data=\"data\" let-rowIndex=\"rowIndex\" , let-level=\"level\">\n\n    <td #cell [class]=\"dynamicBodyClass(data)\"\n        [style.padding-left.px]=\"indentForControl(cell, level)\"\n        align=\"center\"\n        [ngClass]=\"{ 'dt-is-default dt-selection-column': true,\n        'dt-cell-def': true,\n        'dt-is-hidden': !dt.showSelectionColumn}\">\n\n        <aw-radiobutton [name]=\"'DTRadio'\" [value]=\"data\" [(ngModel)]=\"dt.dataSource.state.selection\">\n        </aw-radiobutton>\n    </td>\n</ng-template>\n",
                        styles: [""],
                        encapsulation: core.ViewEncapsulation.None,
                        providers: [primeng.DomHandler]
                    },] },
        ];
        /** @nocollapse */
        DTSingleSelectColumnComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: primeng.DomHandler }
            ];
        };
        return DTSingleSelectColumnComponent;
    }(DTColumn2Component));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * DT component that implements the data grid that shows tabular data. Even the basic
     * structure is based on PrimeNG datatable its completely refactored into smaller pieces that
     * allows more extensibility and trying to stay as close as possible to existing AWL implementation
     *
     * There are 3 main pieces:
     *
     *  Table Wrapper - focuses on the outer structure. Container with basic datable layout plus
     *  contains any additional panels that datatable needs such as our new concept how editing will
     *  work - sliding panel from the bottom
     *
     *  Datatable Column - Instead of rendering everything inside DT I split the part that renders
     *  column into separate component. This way component column has its own renderer template which
     *  can render both header and data cells.
     *  Later on DTColumn is then extended to support other additional column types
     *  SingleSelectionColumn, MultiSelectionColumn, both responsible for rendering selection controls.
     *
     * To support pivotal layout this can be extended for other additional columns that implements their
     * own rendering templates
     *
     * Datatable - The main component that is only focus on header and body rendering and basaed on the
     * column type it will render the correct template
     * column type it will render the correct template
     *
     *
     *
     *
     *
     */
    var Datatable2Component = (function (_super) {
        __extends(Datatable2Component, _super);
        /**
         *
         * In case of outline table we are inject OutlineState which is provided in the DT component
         * definition. This is used by nested outlineFor component it set itself as reference and
         * initialize the state so it can be used later on inside OutlineControl
         *
         *
         * Each Datatable is pre-defaulted with its own version of DataSource so all the observers
         * inside are unique for this component
         *
         */
        function Datatable2Component(env, el, _defaultDS, changeDetector, factoryResolver, outlineState, zone, injector) {
            var _this = _super.call(this, env) || this;
            _this.env = env;
            _this.el = el;
            _this._defaultDS = _defaultDS;
            _this.changeDetector = changeDetector;
            _this.factoryResolver = factoryResolver;
            _this.outlineState = outlineState;
            _this.zone = zone;
            _this.injector = injector;
            /**
             *  Hides or shows table heading where we have filters and tools menus
             */
            _this.showTableHeader = true;
            /**
             * See AWDataTable
             *
             */
            _this.pivotalLayout = false;
            /**
             * See AWDataTable
             */
            _this.initialSortOrder = 'descending';
            /**
             * When DT is loaded in the page and we are not in the full screen (full page mode), this
             * is hte number of lines that DT will show
             *
             * todo: come up with better name
             */
            _this.displayRowSize = 10;
            /**
             * Used for paging on lazy loading using infinite scroller to set initial fetch limit size
             *
             * todo: come up with better name !!!
             *
             */
            _this.pageSize = 15;
            /**
             * Default message when there are no data .
             *
             * todo: Use i18n value and create resource file
             */
            _this.emptyMessage = 'No records found';
            /**
             *
             * See AWDataTable
             *
             */
            _this.selectionMode = 'none';
            /**
             *
             * Can provide custom icon. These icons are not animated divs, we used css
             * transformation to rotate them.
             *
             */
            _this.loadingIcon = 'icon-synchronize';
            /**
             * Additional indent can be added when rendering detail row
             */
            _this.indentDetailRow = false;
            /**
             * See AWDataTable
             *
             */
            _this.indentationPerLevel = 25;
            /**
             *
             *  SubHeader is used to show summary columns, which in our UX is shown at the top just under
             *  the regular table header
             *
             */
            _this.showSubHeader = false;
            /**
             * See OutlineFor - only used in the tree mode
             */
            _this.expandAll = false;
            /**
             *
             * See OutlineFor  - format - only used in the tree mode
             */
            _this.outlineFormat = 'free';
            /**
             * See AWDataTable
             */
            _this.pushRootSectionOnNewLine = true;
            /**
             * Render or hide expansion control for row detail columns. Expansion control makes sense for
             * simple table, when using this inside outline (tree table), its driven by outline control
             */
            _this.showRowDetailExpansionControl = true;
            /**
             * See AWDataTable
             *
             */
            _this.showSelectionColumn = true;
            /**
             * See AWDataTable
             *
             */
            _this.showSelectAll = true;
            /**
             * Show or hide global search term input field in the header
             */
            _this.showGlobalSearch = true;
            /**
             * Enables or disables row reordering
             *
             */
            _this.dndRowEnabled = false;
            /**
             *
             * Fires event that sorting is enabled for column and we trigger sorting
             *
             */
            _this.onSort = new core.EventEmitter();
            /**
             * Based on selection mode it triggers even
             *
             */
            _this.onRowClick = new core.EventEmitter();
            /**
             *
             * When multi or single selection mode is enabled it will trigger event when checkbox or
             * radio buttons is selected
             *
             * todo: implement SingleSelectionDTColumn, MultiSelectionDTColumn with their renderers
             */
            _this.onRowSelectionChange = new core.EventEmitter();
            /**
             * When cell body selection changes we fire event
             *
             */
            _this.onCellChange = new core.EventEmitter();
            /**
             * When cell header selection changes we fire event
             *
             */
            _this.onHeaderSelection = new core.EventEmitter();
            /**
             *
             * Triggers when items in the list are updated
             *
             */
            _this.valueChange = new core.EventEmitter();
            _this.classList = 'w-datatable ';
            /**
             *  Indicates that columns were initialed Also used when we hide and show column to trigger
             *  change.
             *
             */
            _this.columnsChanged = false;
            /**
             * See AWDataTable
             */
            _this.numberOfColsBeforeData = 0;
            /**
             * See AWDataTable
             */
            _this.startOfFirstDataColumn = 0;
            _this.dataSource = _this._defaultDS;
            return _this;
        }
        Object.defineProperty(Datatable2Component.prototype, "state", {
            /**
             * Pushes a state out to application. Can be use as two way bindings
             *
             * [(state)]=dtState(s)
             *
             */
            get: /**
             * Pushes a state out to application. Can be use as two way bindings
             *
             * [(state)]=dtState(s)
             *
             * @return {?}
             */ function () {
                return this.dataSource.state;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this.dataSource.state = val;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        Datatable2Component.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                if (core$1.isPresent(this.list) && core$1.isPresent(this.destinationClass)) {
                    throw new Error('You cannot use both bindings [list] and [destinationClass]!');
                }
                this.detailRowExpansionState = new DetailRowExpansionState(this);
                // init default columns
                this.rowDetailExpandColumn = this.factoryResolver
                    .resolveComponentFactory(DTDetailRowExpanderComponent).create(this.injector).instance;
                this.multiSelectColumn = this.factoryResolver
                    .resolveComponentFactory(DTMultiSelectColumnComponent).create(this.injector).instance;
                this.singleSelectColumn = this.factoryResolver
                    .resolveComponentFactory(DTSingleSelectColumnComponent).create(this.injector).instance;
                /**
                         * If the data are not deferred and we get list directly then it creates DS. If
                         * ngOnChanges is called first we properly init DS and clean this.list
                         *
                         */
                if (core$1.isPresent(this.destinationClass) || core$1.isPresent(this.list)) {
                    this.initDatasource();
                }
                else if (this.dataSource.initialized) {
                    this.initDatasource(false);
                }
                // since we work with references let's pass created map inside our state
                this.outlineState.expansionStates = this.state.outlineState;
            };
        /**
         * When data arrives later maybe due to REST API latency, initialize DS only when we have a
         * data, otherwise if data changed thru the bindings just trigger dataChange event
         *
         */
        /**
         * When data arrives later maybe due to REST API latency, initialize DS only when we have a
         * data, otherwise if data changed thru the bindings just trigger dataChange event
         *
         * @param {?} changes
         * @return {?}
         */
        Datatable2Component.prototype.ngOnChanges = /**
         * When data arrives later maybe due to REST API latency, initialize DS only when we have a
         * data, otherwise if data changed thru the bindings just trigger dataChange event
         *
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                _super.prototype.ngOnChanges.call(this, changes);
                if (changes['list'] && core$1.isPresent(changes['list'].currentValue)
                    && !this.dataSource.initialized) {
                    this.initDatasource();
                }
                else if (this.dataSource.initialized) {
                    this.dataSource.dataProvider.dataChanges.next(this.list);
                }
            };
        /**
         * @return {?}
         */
        Datatable2Component.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // make sure we init a state when detail column is present
                // todo: move this initialization to datasource
                this.detailRowExpansionState.detailExpansionEnabled = core$1.isPresent(this.rowDetailColumn);
                this.initColumns();
                this.columnsSubscription = this.colsQuery.changes.subscribe(function (_) {
                    _this.initColumns();
                    _this.changeDetector.markForCheck();
                });
            };
        /**
         * @return {?}
         */
        Datatable2Component.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                // assign it programatically as we want to have a context for the filter
                if (core$1.isPresent(this.rowDetailColumn) && core$1.isPresent(this.outlineState.outlineFor)) {
                    this.outlineState.outlineFor.filterOut = this.skipOutlineItem.bind(this);
                }
                if (core$1.isPresent(this.outlineState.outlineFor)) ;
                this.initialized = true;
            };
        /**
         * @return {?}
         */
        Datatable2Component.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
            function () {
                if (this.columnsChanged && this.el.nativeElement.offsetParent) {
                    this.columnsChanged = false;
                }
                if (this.hasFrozenColumns()) {
                    this.frozenColumns.forEach(function (col, index) {
                        return col.postInitialize(index);
                    });
                }
                else {
                    this.columns.forEach(function (col, index) {
                        return col.postInitialize(index);
                    });
                }
            };
        /**
         * Key entry method that initialized our columns. Later on when we will support selection and
         * multiselection we will programmatically instantiate SingleSelection, MultiSelection column
         * components and add them to the list so they can be rendered.
         *
         * so the idea here is:
         *
         * When DT component initialize and we are in editing mode and we support Single/Multi selection
         * we will use ComponentFactoryResolver to create component and add it as first item to the list
         * and then it will be rendered just like anythign else.
         *
         */
        /**
         * Key entry method that initialized our columns. Later on when we will support selection and
         * multiselection we will programmatically instantiate SingleSelection, MultiSelection column
         * components and add them to the list so they can be rendered.
         *
         * so the idea here is:
         *
         * When DT component initialize and we are in editing mode and we support Single/Multi selection
         * we will use ComponentFactoryResolver to create component and add it as first item to the list
         * and then it will be rendered just like anythign else.
         *
         * @return {?}
         */
        Datatable2Component.prototype.initColumns = /**
         * Key entry method that initialized our columns. Later on when we will support selection and
         * multiselection we will programmatically instantiate SingleSelection, MultiSelection column
         * components and add them to the list so they can be rendered.
         *
         * so the idea here is:
         *
         * When DT component initialize and we are in editing mode and we support Single/Multi selection
         * we will use ComponentFactoryResolver to create component and add it as first item to the list
         * and then it will be rendered just like anythign else.
         *
         * @return {?}
         */
            function () {
                var _this = this;
                this.columns = [];
                this.frozenColumns = [];
                if (this.detailRowExpansionState.detailExpansionEnabled) {
                    this.initDetailColumnExpansion();
                }
                if (this.hasLeadingSelectColumn() && this.selectionMode === 'multi') {
                    this.multiSelectColumn.initialize(this);
                    this.columns.push(this.multiSelectColumn);
                }
                else if (this.hasLeadingSelectColumn() && this.selectionMode === 'single') {
                    this.singleSelectColumn.initialize(this);
                    this.columns.push(this.singleSelectColumn);
                }
                /**
                         * Add expansion column when detail row is enabled
                         */
                if (this.detailRowExpansionState.detailExpansionEnabled && !this.isOutline()) {
                    this.rowDetailExpandColumn.initialize(this);
                    this.columns.push(this.rowDetailExpandColumn);
                }
                this.colsQuery
                    .filter(function (col1) { return !col1.frozen; })
                    .forEach(function (col) {
                    col.initialize(_this);
                    _this.columns.push(col);
                });
                this.initFrozenColumns();
                this.initColumnInfo();
                this.columnsChanged = true;
            };
        /**
         * Check if current column is programmatically created
         *
         */
        /**
         * Check if current column is programmatically created
         *
         * @param {?} col
         * @return {?}
         */
        Datatable2Component.prototype.isInternalColumn = /**
         * Check if current column is programmatically created
         *
         * @param {?} col
         * @return {?}
         */
            function (col) {
                return col instanceof DTSingleSelectColumnComponent ||
                    col instanceof DTMultiSelectColumnComponent ||
                    col instanceof DTDetailRowExpanderComponent;
            };
        /**
         * Create new Datasource based on passed values. It tries to initialize DS for first time
         * inside the ngInit but in case Data arrives later maybe due to some REST API calls this
         * can be triggered also from ngOnChanges.
         *
         */
        /**
         * Create new Datasource based on passed values. It tries to initialize DS for first time
         * inside the ngInit but in case Data arrives later maybe due to some REST API calls this
         * can be triggered also from ngOnChanges.
         *
         * @param {?=} initialize
         * @return {?}
         */
        Datatable2Component.prototype.initDatasource = /**
         * Create new Datasource based on passed values. It tries to initialize DS for first time
         * inside the ngInit but in case Data arrives later maybe due to some REST API calls this
         * can be triggered also from ngOnChanges.
         *
         * @param {?=} initialize
         * @return {?}
         */
            function (initialize) {
                var _this = this;
                if (initialize === void 0) {
                    initialize = true;
                }
                if (core$1.isBlank(this.state)) {
                    this.state = Datatable2State.create(0, this.pageSize, this.displayRowSize, this.initialSortKey, this.sortOrderingForString(this.initialSortOrder));
                }
                else {
                    this.state.limit = this.state.displayLimit = this.displayRowSize;
                    if (core$1.isPresent(this.initialSortKey)) {
                        this.state.sortKey = this.initialSortKey;
                        this.state.sortOrder = this.sortOrderingForString(this.initialSortOrder);
                    }
                }
                if (initialize) {
                    var /** @type {?} */ qType = (this.isOutline() && this.outlineFormat === 'tree') ?
                        QueryType.FullTextOutline : QueryType.FullText;
                    this.dataSource.init({
                        obj: core$1.isPresent(this.destinationClass) ? this.destinationClass : this.list,
                        queryType: qType,
                        state: this.state,
                        multiselect: false
                    });
                }
                this.dataSource.fetch(this.state);
                // reset list to make sure it comes from DataProvider, we use list  to initialize
                this.list = null;
                // This is the ENTRY point for the DATA CHANGES. All addition, edits, deletion ends up
                // here. We dont work directly with LIST. Any change is reactive and here is listener
                this.dataSource.open().subscribe(function (data) {
                    _this.updateList(data);
                });
            };
        /**
         * When detailRow column is present we initialize a state holding information which item is
         * expanded.
         *
         * todo: This is temporary here and once we suport lazy loading move this to datasource.
         *
         * For example for outline tree table we need to connect a state from outline with a state in
         * here as we are using outline control to expand and collapse items
         */
        /**
         * When detailRow column is present we initialize a state holding information which item is
         * expanded.
         *
         * todo: This is temporary here and once we suport lazy loading move this to datasource.
         *
         * For example for outline tree table we need to connect a state from outline with a state in
         * here as we are using outline control to expand and collapse items
         * @return {?}
         */
        Datatable2Component.prototype.initDetailColumnExpansion = /**
         * When detailRow column is present we initialize a state holding information which item is
         * expanded.
         *
         * todo: This is temporary here and once we suport lazy loading move this to datasource.
         *
         * For example for outline tree table we need to connect a state from outline with a state in
         * here as we are using outline control to expand and collapse items
         * @return {?}
         */
            function () {
                if (core$1.isPresent(this.rowDetailColumn)) {
                    this.rowDetailColumn.initialize(this);
                }
                this.detailRowExpansionState.detailExpansionEnabled = core$1.isPresent(this.rowDetailColumn) &&
                    core$1.BooleanWrapper.isTrue(this.showRowDetailExpansionControl);
            };
        /**
         * This method is executed after we initialize all the columns in order to calculate correct
         * numbers used for indentation while rendering selection columns as well as detail row columns.
         *
         * Here we need to be aware how many columns to span
         *
         */
        /**
         * This method is executed after we initialize all the columns in order to calculate correct
         * numbers used for indentation while rendering selection columns as well as detail row columns.
         *
         * Here we need to be aware how many columns to span
         *
         * @return {?}
         */
        Datatable2Component.prototype.initColumnInfo = /**
         * This method is executed after we initialize all the columns in order to calculate correct
         * numbers used for indentation while rendering selection columns as well as detail row columns.
         *
         * Here we need to be aware how many columns to span
         *
         * @return {?}
         */
            function () {
                var _this = this;
                this.numberOfColsBeforeData = 0;
                this.columns.forEach(function (col) {
                    if (!col.isValueColumn()) {
                        _this.numberOfColsBeforeData++;
                    }
                });
                if (this.indentDetailRow) {
                    this.numberOfColsBeforeData++;
                }
                this.startOfFirstDataColumn = this.columns.length - this.numberOfColsBeforeData;
            };
        /**
         * See AWDataTable
         *
         */
        /**
         * See AWDataTable
         *
         * @param {?} cell
         * @param {?} column
         * @param {?} item
         * @return {?}
         */
        Datatable2Component.prototype.onCellSelectionChange = /**
         * See AWDataTable
         *
         * @param {?} cell
         * @param {?} column
         * @param {?} item
         * @return {?}
         */
            function (cell, column, item) {
                if (this.selectionMode !== 'cell') {
                    return;
                }
                var /** @type {?} */ lookupKey = {
                    col: column.key || column.label,
                    item: item
                };
                if (core$1.isPresent(this.state.selection) && this.state.selection.length > 0) {
                    var /** @type {?} */ foundIndex_1 = core$1.ListWrapper.findIndexComplex(this.state.selection, lookupKey);
                    var /** @type {?} */ isSelected = foundIndex_1 !== -1;
                    if (isSelected) {
                        this.state.selection = this.state.selection
                            .filter(function (val, index) { return index !== foundIndex_1; });
                    }
                    else {
                        this.state.selection = __spread(this.state.selection, [lookupKey]);
                    }
                }
                else {
                    this.state.selection = [lookupKey];
                }
                this.onCellChange.emit(this.state.selection);
            };
        /**
         * See AWDataTable
         *
         */
        /**
         * See AWDataTable
         *
         * @param {?} cell
         * @param {?} column
         * @return {?}
         */
        Datatable2Component.prototype.onHeaderSelectionChange = /**
         * See AWDataTable
         *
         * @param {?} cell
         * @param {?} column
         * @return {?}
         */
            function (cell, column) {
                if (core$1.isPresent(this.state.headerSelection)) {
                    if (this.isHeaderSelected(column)) {
                        this.state.headerSelection = null;
                    }
                    else {
                        this.state.headerSelection = column;
                    }
                }
                else {
                    this.state.headerSelection = column;
                }
                this.onHeaderSelection.emit(this.state.headerSelection);
            };
        /**
         * @param {?} event
         * @param {?} item
         * @return {?}
         */
        Datatable2Component.prototype.onHandleRowClicked = /**
         * @param {?} event
         * @param {?} item
         * @return {?}
         */
            function (event, item) {
                // special alt key modifier. When used with rows it indicates there is a D&D enabled
                if (event.altKey) {
                    return;
                }
                if (this.selectionMode === 'multi') {
                    this.onRowToggle(event, item);
                }
                else if (this.selectionMode === 'single') {
                    this.onRowSelect(event, item);
                }
            };
        /**
         * See AWDataTable
         *
         */
        /**
         * See AWDataTable
         *
         * @param {?} event
         * @param {?} item
         * @return {?}
         */
        Datatable2Component.prototype.onRowToggle = /**
         * See AWDataTable
         *
         * @param {?} event
         * @param {?} item
         * @return {?}
         */
            function (event, item) {
                var /** @type {?} */ rowSelected = true;
                if (core$1.isPresent(this.state.selection) && this.state.selection.length > 0) {
                    var /** @type {?} */ foundIndex_2 = core$1.ListWrapper.findIndexComplex(this.state.selection, item);
                    var /** @type {?} */ isSelected = foundIndex_2 !== -1;
                    if (isSelected) {
                        this.state.selection = this.state.selection
                            .filter(function (val, index) { return index !== foundIndex_2; });
                        rowSelected = false;
                    }
                    else {
                        this.state.selection = __spread(this.state.selection, [item]);
                    }
                    // for the outline go up and down the sync with treeitems
                    if (this.isOutline()) {
                        this.onHandleOutlineRowToggleToChildren(item, isSelected);
                        this.oHandleOutlineRowToggleToParent(item, isSelected);
                    }
                }
                else {
                    this.state.selection = [item];
                    if (this.isOutline()) {
                        this.onHandleOutlineRowToggleToChildren(item, false);
                        this.oHandleOutlineRowToggleToParent(item, false);
                    }
                }
                this.onRowSelectionChange.emit({
                    isSelected: rowSelected,
                    item: this.state.selection
                });
                event.stopPropagation();
            };
        /**
         * See AWDataTable
         *
         */
        /**
         * See AWDataTable
         *
         * @param {?} event
         * @param {?} item
         * @return {?}
         */
        Datatable2Component.prototype.onRowSelect = /**
         * See AWDataTable
         *
         * @param {?} event
         * @param {?} item
         * @return {?}
         */
            function (event, item) {
                this.state.selection = item;
                event.stopPropagation();
                this.onRowSelectionChange.emit(item);
            };
        /**
         * See AWDataTable
         *
         */
        /**
         * See AWDataTable
         *
         * @param {?} currentItem
         * @param {?} isSelected
         * @return {?}
         */
        Datatable2Component.prototype.onHandleOutlineRowToggleToChildren = /**
         * See AWDataTable
         *
         * @param {?} currentItem
         * @param {?} isSelected
         * @return {?}
         */
            function (currentItem, isSelected) {
                var /** @type {?} */ childrenForNode = this.children.apply(this.context, [currentItem]) || [];
                if (childrenForNode.length > 0) {
                    // If is selected currently then toggle to other state
                    if (!isSelected) {
                        // when checking all from root, deselect children and add all
                        this.onHandleOutlineRowToggleToChildren(currentItem, true);
                        this.state.selection = __spread(this.state.selection, childrenForNode);
                    }
                    else {
                        var _loop_1 = function (child) {
                            var /** @type {?} */ foundIndex = core$1.ListWrapper.findIndexComplex(this_1.state.selection, child);
                            this_1.state.selection = this_1.state.selection
                                .filter(function (val, index) { return index !== foundIndex; });
                        };
                        var this_1 = this;
                        try {
                            // remove each child
                            for (var childrenForNode_1 = __values(childrenForNode), childrenForNode_1_1 = childrenForNode_1.next(); !childrenForNode_1_1.done; childrenForNode_1_1 = childrenForNode_1.next()) {
                                var child = childrenForNode_1_1.value;
                                _loop_1(child);
                            }
                        }
                        catch (e_1_1) {
                            e_1 = { error: e_1_1 };
                        }
                        finally {
                            try {
                                if (childrenForNode_1_1 && !childrenForNode_1_1.done && (_a = childrenForNode_1.return))
                                    _a.call(childrenForNode_1);
                            }
                            finally {
                                if (e_1)
                                    throw e_1.error;
                            }
                        }
                    }
                    try {
                        // apply the same for children of children
                        for (var childrenForNode_2 = __values(childrenForNode), childrenForNode_2_1 = childrenForNode_2.next(); !childrenForNode_2_1.done; childrenForNode_2_1 = childrenForNode_2.next()) {
                            var child = childrenForNode_2_1.value;
                            this.onHandleOutlineRowToggleToChildren(child, isSelected);
                        }
                    }
                    catch (e_2_1) {
                        e_2 = { error: e_2_1 };
                    }
                    finally {
                        try {
                            if (childrenForNode_2_1 && !childrenForNode_2_1.done && (_b = childrenForNode_2.return))
                                _b.call(childrenForNode_2);
                        }
                        finally {
                            if (e_2)
                                throw e_2.error;
                        }
                    }
                }
                var e_1, _a, e_2, _b;
            };
        /**
         * See AWDataTable
         *
         */
        /**
         * See AWDataTable
         *
         * @param {?} currentItem
         * @param {?} isSelected
         * @return {?}
         */
        Datatable2Component.prototype.oHandleOutlineRowToggleToParent = /**
         * See AWDataTable
         *
         * @param {?} currentItem
         * @param {?} isSelected
         * @return {?}
         */
            function (currentItem, isSelected) {
                var /** @type {?} */ parent = currentItem.$$parentItem;
                if (core$1.isPresent(parent)) {
                    var /** @type {?} */ childrenForNode = this.children.apply(this.context, [parent]) || [];
                    var /** @type {?} */ allSelected = true;
                    try {
                        for (var childrenForNode_3 = __values(childrenForNode), childrenForNode_3_1 = childrenForNode_3.next(); !childrenForNode_3_1.done; childrenForNode_3_1 = childrenForNode_3.next()) {
                            var child = childrenForNode_3_1.value;
                            allSelected = core$1.ListWrapper.findIndexComplex(this.state.selection, child) !== -1
                                && allSelected;
                        }
                    }
                    catch (e_3_1) {
                        e_3 = { error: e_3_1 };
                    }
                    finally {
                        try {
                            if (childrenForNode_3_1 && !childrenForNode_3_1.done && (_a = childrenForNode_3.return))
                                _a.call(childrenForNode_3);
                        }
                        finally {
                            if (e_3)
                                throw e_3.error;
                        }
                    }
                    if (!isSelected) {
                        if (allSelected) {
                            this.state.selection.push(parent);
                        }
                    }
                    else {
                        if (!allSelected) {
                            var /** @type {?} */ parentIndex_1 = core$1.ListWrapper.findIndexComplex(this.state.selection, parent);
                            this.state.selection = this.state.selection
                                .filter(function (val, index) { return index !== parentIndex_1; });
                        }
                    }
                    this.oHandleOutlineRowToggleToParent(currentItem.$$parentItem, isSelected);
                }
                var e_3, _a;
            };
        /**
         * See AWDataTable
         *
         */
        /**
         * See AWDataTable
         *
         * @param {?} origPos
         * @param {?} newPos
         * @param {?} dropPos
         * @return {?}
         */
        Datatable2Component.prototype.onDnDRowDrop = /**
         * See AWDataTable
         *
         * @param {?} origPos
         * @param {?} newPos
         * @param {?} dropPos
         * @return {?}
         */
            function (origPos, newPos, dropPos) {
                if (core$1.isPresent(this.dataSource)) {
                    // console.log('Dropping row #: ', origPos + ' ' + dropPos + ' row #: ' + newPos);
                    this.dataSource.reorderRows(origPos, newPos, dropPos);
                }
            };
        /**
         * See AWDataTable
         *
         */
        /**
         * See AWDataTable
         *
         * @param {?} event
         * @return {?}
         */
        Datatable2Component.prototype.onOutlineExpandChange = /**
         * See AWDataTable
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var /** @type {?} */ item = event.item;
                // We dont really need to store a state form outline locally as we are using the same object
                // reference
                // this.state.outlineState = this.outlineState.expansionStates;
                if (this.canUseForDetailRow(item)) {
                    this.detailRowExpansionState.toggle(item);
                }
            };
        /**
         * See AWDataTable
         *
         *
         */
        /**
         * See AWDataTable
         *
         *
         * @return {?}
         */
        Datatable2Component.prototype.sortSingle = /**
         * See AWDataTable
         *
         *
         * @return {?}
         */
            function () {
                if (core$1.isPresent(this.list) && core$1.isPresent(this.sortColumn)) {
                    core$1.assert(core$1.isPresent(this.sortColumn.key), 'Invalid column to sort');
                    this.dataSource.sort(this.sortColumn.key, this.sortColumn.sortOrder);
                    this.onSort.emit({
                        field: this.sortColumn.key,
                        order: this.sortColumn.sortOrder
                    });
                }
            };
        /**
         * See AWDataTable
         *
         */
        /**
         * See AWDataTable
         *
         * @return {?}
         */
        Datatable2Component.prototype.handleDataChange = /**
         * See AWDataTable
         *
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.state.sortKey || this.sortColumn) {
                    if (!this.sortColumn && this.columns) {
                        this.sortColumn = this.columns.find(function (col) { return col.key === _this.state.sortKey; });
                    }
                }
                this.updateDataToRender();
                this.valueChange.emit(this.list);
            };
        /**
         * @param {?=} datasource
         * @return {?}
         */
        Datatable2Component.prototype.updateDataToRender = /**
         * @param {?=} datasource
         * @return {?}
         */
            function (datasource) {
                this.dataToRender = datasource || this.list;
                if (core$1.isBlank(this.children) && core$1.isPresent(this.dataToRender)
                    && this.dataToRender.length > 0 && isOutlineNode(this.dataToRender[0])) {
                    this.outlineFormat = 'tree';
                }
                // this.changeDetector.markForCheck();
                this.changeDetector.detectChanges();
            };
        /**
         * @return {?}
         */
        Datatable2Component.prototype.reset = /**
         * @return {?}
         */
            function () {
                this.sortColumn = null;
                this.updateDataToRender();
            };
        /**
         * See AWDataTable
         */
        /**
         * See AWDataTable
         * @param {?} item
         * @return {?}
         */
        Datatable2Component.prototype.isHeaderSelected = /**
         * See AWDataTable
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (core$1.isBlank(this.state.headerSelection)) {
                    return false;
                }
                var /** @type {?} */ colMatched = item.key || item.label;
                var /** @type {?} */ currentCol = this.state.headerSelection.key || this.state.headerSelection.label;
                return colMatched === currentCol;
            };
        /**
         *
         * See AWDataTable
         *
         */
        /**
         *
         * See AWDataTable
         *
         * @param {?} column
         * @param {?} item
         * @return {?}
         */
        Datatable2Component.prototype.isBodyCellSelected = /**
         *
         * See AWDataTable
         *
         * @param {?} column
         * @param {?} item
         * @return {?}
         */
            function (column, item) {
                var /** @type {?} */ lookupKey = {
                    col: column.key || column.label,
                    item: item
                };
                return core$1.isPresent(this.state.selection) &&
                    core$1.ListWrapper.findIndexComplex(this.state.selection, lookupKey) !== -1;
            };
        /**
         *  See AWDataTable
         *
         */
        /**
         *  See AWDataTable
         *
         * @param {?} item
         * @return {?}
         */
        Datatable2Component.prototype.isRowSelected = /**
         *  See AWDataTable
         *
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (this.hasLeadingSelectColumn() && core$1.isPresent(this.state.selection)) {
                    if (this.selectionMode === 'multi') {
                        return core$1.ListWrapper.findIndexComplex(this.state.selection, item) !== -1;
                    }
                    else if (this.selectionMode === 'single') {
                        return core$1.equals(this.state.selection, item);
                    }
                }
                return false;
            };
        /**
         *
         * Do we have data to render Used inside template to tell if we should use the NoData template
         *
         */
        /**
         *
         * Do we have data to render Used inside template to tell if we should use the NoData template
         *
         * @return {?}
         */
        Datatable2Component.prototype.isEmpty = /**
         *
         * Do we have data to render Used inside template to tell if we should use the NoData template
         *
         * @return {?}
         */
            function () {
                return core$1.isBlank(this.dataToRender) || (this.dataToRender.length === 0);
            };
        /**
         * @return {?}
         */
        Datatable2Component.prototype.hasFrozenColumns = /**
         * @return {?}
         */
            function () {
                return core$1.isPresent(this.frozenColumns) && this.frozenColumns.length > 0;
            };
        /**
         * See AWDataTable
         */
        /**
         * See AWDataTable
         * @return {?}
         */
        Datatable2Component.prototype.hasInvisibleSelectionColumn = /**
         * See AWDataTable
         * @return {?}
         */
            function () {
                return this.hasLeadingSelectColumn() && !this.showSelectionColumn;
            };
        /**
         *
         * See AWDataTable
         *
         */
        /**
         *
         * See AWDataTable
         *
         * @return {?}
         */
        Datatable2Component.prototype.hasLeadingSelectColumn = /**
         *
         * See AWDataTable
         *
         * @return {?}
         */
            function () {
                return this.selectionMode !== 'none' && this.selectionMode !== 'cell';
            };
        /**
         * @return {?}
         */
        Datatable2Component.prototype.visibleColumns = /**
         * @return {?}
         */
            function () {
                return this.columns ? this.columns.filter(function (c) { return c.isVisible; }) : [];
            };
        /**
         * See AWDataTable
         *
         */
        /**
         * See AWDataTable
         *
         * @param {?} direction
         * @return {?}
         */
        Datatable2Component.prototype.sortOrderingForString = /**
         * See AWDataTable
         *
         * @param {?} direction
         * @return {?}
         */
            function (direction) {
                if (core$1.isBlank(direction) || direction === 'ascending') {
                    return 1;
                }
                if (core$1.isBlank(direction) || direction === 'descending') {
                    return -1;
                }
                // todo: log bad key
                return 1;
            };
        /**
         * @param {?} direction
         * @return {?}
         */
        Datatable2Component.prototype.sortOrderingForNumber = /**
         * @param {?} direction
         * @return {?}
         */
            function (direction) {
                if (core$1.isBlank(direction) || direction === 1) {
                    return 'ascending';
                }
                if (core$1.isBlank(direction) || direction === -1) {
                    return 'descending';
                }
                // todo: log bad key
                return 'ascending';
            };
        /**
         * See AWDataTable
         *
         */
        /**
         * See AWDataTable
         *
         * @param {?} event
         * @return {?}
         */
        Datatable2Component.prototype.toggleAllColumns = /**
         * See AWDataTable
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var /** @type {?} */ currentItems = this.dataToRender || [];
                var /** @type {?} */ selectedObject = this.state.selection || [];
                if (selectedObject.length >= currentItems.length) {
                    this.state.selection = [];
                }
                else {
                    this.state.selection = [];
                    this.state.selection = __spread(currentItems);
                }
            };
        /**
         *
         * See AWDataTable
         *
         */
        /**
         *
         * See AWDataTable
         *
         * @return {?}
         */
        Datatable2Component.prototype.isToggleAllColumnSelected = /**
         *
         * See AWDataTable
         *
         * @return {?}
         */
            function () {
                var /** @type {?} */ currentItems = this.dataToRender || [];
                var /** @type {?} */ selectedObject = this.state.selection || [];
                return currentItems.length > 0 && selectedObject.length >= currentItems.length;
            };
        /**
         * @return {?}
         */
        Datatable2Component.prototype.isToggleAllColumnDisabled = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ currentItems = this.dataToRender || [];
                return currentItems.length === 0;
            };
        /**
         *
         * Used by template to decide if we need to render DetailRow template. We need to have
         * DetailRow ContentChild and using DetailRow component [isVisibleFn] function binding we
         * check if the item that is about to be rendered is eligible for detail row
         *
         */
        /**
         *
         * Used by template to decide if we need to render DetailRow template. We need to have
         * DetailRow ContentChild and using DetailRow component [isVisibleFn] function binding we
         * check if the item that is about to be rendered is eligible for detail row
         *
         * @param {?} item
         * @return {?}
         */
        Datatable2Component.prototype.showDetailColumn = /**
         *
         * Used by template to decide if we need to render DetailRow template. We need to have
         * DetailRow ContentChild and using DetailRow component [isVisibleFn] function binding we
         * check if the item that is about to be rendered is eligible for detail row
         *
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (this.canUseForDetailRow(item) && this.detailRowExpansionState.isExpanded(item)) {
                    return true;
                }
                return false;
            };
        /**
         *
         * See AWDataTable
         *
         */
        /**
         *
         * See AWDataTable
         *
         * @return {?}
         */
        Datatable2Component.prototype.isOutline = /**
         *
         * See AWDataTable
         *
         * @return {?}
         */
            function () {
                return core$1.isPresent(this.children) || this.outlineFormat === 'tree';
            };
        /**
         *
         * When dealing with detail column (detail row) and outline all together we need have a
         * mechanism to tell to the outline "don't render the next level of items" and use detail row.
         * So certain item type needs to be skipped.
         *
         * The way we skip those item is we use isVisibleFn condition of the detail row and look ahead
         * if we should skip next level.
         *
         */
        /**
         *
         * When dealing with detail column (detail row) and outline all together we need have a
         * mechanism to tell to the outline "don't render the next level of items" and use detail row.
         * So certain item type needs to be skipped.
         *
         * The way we skip those item is we use isVisibleFn condition of the detail row and look ahead
         * if we should skip next level.
         *
         * @param {?} item
         * @return {?}
         */
        Datatable2Component.prototype.skipOutlineItem = /**
         *
         * When dealing with detail column (detail row) and outline all together we need have a
         * mechanism to tell to the outline "don't render the next level of items" and use detail row.
         * So certain item type needs to be skipped.
         *
         * The way we skip those item is we use isVisibleFn condition of the detail row and look ahead
         * if we should skip next level.
         *
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return this.canUseForDetailRow(item);
            };
        /**
         *
         * See AWDaTable
         *
         */
        /**
         *
         * See AWDaTable
         *
         * @param {?} data
         * @param {?} field
         * @return {?}
         */
        Datatable2Component.prototype.getValue = /**
         *
         * See AWDaTable
         *
         * @param {?} data
         * @param {?} field
         * @return {?}
         */
            function (data, field) {
                return core$1.FieldPath.getFieldValue(data, field);
            };
        /**
         * @return {?}
         */
        Datatable2Component.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnDestroy.call(this);
                if (this.columnsSubscription) {
                    this.columnsSubscription.unsubscribe();
                }
            };
        /**
         * Makes sure that we also include programmatic column if present. Move them to the correct
         * array
         *
         * @return {?}
         */
        Datatable2Component.prototype.initFrozenColumns = /**
         * Makes sure that we also include programmatic column if present. Move them to the correct
         * array
         *
         * @return {?}
         */
            function () {
                var _this = this;
                this.colsQuery
                    .filter(function (col1) { return col1.frozen; })
                    .forEach(function (col) {
                    col.initialize(_this);
                    _this.frozenColumns.push(col);
                });
                if (this.frozenColumns.length > 0) {
                    // find last index of column that is internal / programmatic
                    var /** @type {?} */ lastInx = this.columns.slice()
                        .reverse()
                        .findIndex(function (col) { return _this.isInternalColumn(col); });
                    if (lastInx !== -1) {
                        var /** @type {?} */ idx = this.columns.length - 1 - lastInx;
                        var /** @type {?} */ internalCols = this.columns.splice(0, idx + 1);
                        this.frozenColumns = __spread(internalCols, this.frozenColumns);
                    }
                    var /** @type {?} */ hasValidCols = this.columns
                        .findIndex(function (col) { return core$1.isBlank(col.width); }) === -1;
                    core$1.assert(hasValidCols || core$1.isPresent(this.scrollWidth), 'When using [frozen] binding you need specify [width] for each ' +
                        'column or [scrollWidth] on datatable!');
                    core$1.assert(core$1.isBlank(this.rowDetailColumn), 'You cannot combine aw-dt-detail-column with frozen columns!');
                }
            };
        /**
         * Updates current immutable list and trigger change detection. Need to wrap it with
         * setTimeout as the change can easily come after view checked and this would result some errors
         *
         * @param {?} newList
         * @return {?}
         */
        Datatable2Component.prototype.updateList = /**
         * Updates current immutable list and trigger change detection. Need to wrap it with
         * setTimeout as the change can easily come after view checked and this would result some errors
         *
         * @param {?} newList
         * @return {?}
         */
            function (newList) {
                var _this = this;
                setTimeout(function () {
                    _this.list = newList;
                    _this.handleDataChange();
                });
            };
        /**
         * @param {?} item
         * @return {?}
         */
        Datatable2Component.prototype.canUseForDetailRow = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return core$1.isPresent(this.rowDetailColumn) &&
                    ((this.rowDetailColumn)).showDetailRow(item);
            };
        Datatable2Component.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-datatable2',
                        template: "<!--\n    This template focus only on header and body rendering.\n\n    This datatable also supports frozen column and for this rendering it is pretty much transparent\n    as it received sets of column that it needs to render from the TableWrapper.\n\n    TableWrapper in case of frozen columns calls #headerRows and #bodyRows templates twice to\n    render to separate tables where one has frozen columns and another one has the rest and its\n    scrollable\n-->\n\n<aw-dt-wrapper #dtWrapper>\n    <ng-template #headingArea>\n        <ng-content select=\"aw-dt-header2\"></ng-content>\n    </ng-template>\n\n    <ng-template #headerRows let-colsToRender let-frozenView=\"frozenColumns\">\n        <ng-container\n            *ngTemplateOutlet=\"header; context:{$implicit: colsToRender, frozen:frozenView }\">\n        </ng-container>\n    </ng-template>\n\n    <ng-template #bodyRows let-colsToRender>\n        <ng-template [ngIf]=\"isOutline()\">\n            <ng-container\n                *ngTemplateOutlet=\"bodyOutline; context:{$implicit: colsToRender}\"></ng-container>\n        </ng-template>\n        <ng-template [ngIf]=\"!isOutline()\">\n            <ng-container\n                *ngTemplateOutlet=\"bodyPlain; context:{$implicit: colsToRender}\"></ng-container>\n        </ng-template>\n    </ng-template>\n</aw-dt-wrapper>\n\n\n<!--\n    Each rendering column has its own renderTemplate which define how things should be render.\n    Based on different column types this code should be transparent as we dont care on this\n    level what kind of column we are rendering.\n\n    Later on when we will support single/multi selection, this will be just another column extending\n    DTColumn and providing its own template\n\n    We pass into this template if we are rendering header, subHeader, or data\n-->\n<ng-template #header let-colsToRender let-frozen=\"frozen\">\n    <tr>\n        <ng-template ngFor let-col [ngForOf]=\"colsToRender\" let-lastCol=\"last\"\n                     let-columnIndex=\"index\">\n\n            <ng-container *ngTemplateOutlet=\"col.rendererTemplate;\n                context:{$implicit: true, isSubHeader:false,\n                columnIndex:(frozen ? columnIndex: (columns.length + columnIndex))}\">\n            </ng-container>\n        </ng-template>\n    </tr>\n\n    <tr *ngIf=\"showSubHeader\">\n        <ng-template ngFor let-col [ngForOf]=\"colsToRender\" let-lastCol=\"last\">\n            <ng-container *ngTemplateOutlet=\"col.rendererTemplate;\n                context:{$implicit: true, isSubHeader:true}\">\n            </ng-container>\n        </ng-template>\n    </tr>\n</ng-template>\n\n\n<ng-template #bodyPlain let-colsToRender>\n\n    <tbody [ngClass]=\"{'dt-content dt-data-cells ': true, 'dt-is-hoverable-row': rowHover}\">\n\n    <ng-template ngFor let-rowData [ngForOf]=\"dataToRender\" let-even=\"even\" let-odd=\"odd\"\n                 let-rowIndex=\"index\" [ngForTrackBy]=\"rowTrackBy\">\n\n        <ng-container *ngTemplateOutlet=\"rowTemplate; context:{$implicit: rowData, even:even,\n                                          odd:odd, rowIndex:rowIndex, colsToRender:colsToRender}\">\n        </ng-container>\n\n        <ng-template [ngIf]=\"showDetailColumn(rowData)\">\n            <ng-container *ngTemplateOutlet=\"rowDetailColumn.rendererTemplate;\n                    context:{$implicit: false, data:rowData, rowIndex:(rowIndex)}\">\n            </ng-container>\n        </ng-template>\n\n    </ng-template>\n    <ng-container *ngTemplateOutlet=\"noData\"></ng-container>\n    </tbody>\n</ng-template>\n\n\n<ng-template #bodyOutline let-colsToRender>\n    <tbody #outlineFor awOutlineFor [list]=\"dataToRender\"\n           [format]=\"outlineFormat\"\n           [context]=\"context\"\n           [indentationPerLevel]=\"indentationPerLevel\"\n           [pushRootSectionOnNewLine]=\"pushRootSectionOnNewLine\"\n           [children]=\"children\" [expandAll]=\"expandAll\"\n           [state]=\"outlineState\"\n           [ngClass]=\"{'dt-content dt-data-cells ': true,\n                           'dt-is-hoverable-row': rowHover}\"\n           (onExpandChange)=\"onOutlineExpandChange($event)\">\n\n    <ng-template #outline let-rowData let-nestingLevel=\"nestingLevel\" let-rowIndex=\"rowIndex\">\n        <ng-container *ngTemplateOutlet=\"rowTemplate;\n                                context:{$implicit: rowData, nestingLevel:nestingLevel, colsToRender:colsToRender}\">\n        </ng-container>\n\n        <ng-template [ngIf]=\"showDetailColumn(rowData)\">\n            <ng-container *ngTemplateOutlet=\"rowDetailColumn.rendererTemplate;\n                    context:{$implicit: false, data:rowData, rowIndex:(rowIndex)}\">\n            </ng-container>\n        </ng-template>\n\n    </ng-template>\n    <ng-container *ngTemplateOutlet=\"noData\"></ng-container>\n    </tbody>\n</ng-template>\n\n<!--\n    Default template that is display when there are no data\n-->\n<ng-template #noData>\n    <tr *ngIf=\"isEmpty()\" class=\" dt-emptymessage-row\"\n        [style.visibility]=\"loading ? 'hidden' : 'visible'\">\n\n        <td [attr.colspan]=\"visibleColumns().length\" class=\"dt-emptymessage\">\n            <span *ngIf=\"!emptyMessageTemplate\">{{emptyMessage}}</span>\n            <ng-container *ngTemplateOutlet=\"emptyMessageTemplate\"></ng-container>\n        </td>\n    </tr>\n</ng-template>\n\n<!--\n    Template that renders actual row. Renders both header and body column. Each rendered\n    column has its own template called rendererTemplate that has all things that needs to be\n    rendered and we just tell the template if we are rendering header, subheader or body\n-->\n<ng-template #rowTemplate let-rowData let-even=\"event\" let-odd=\"odd\" let-rowIndex=\"rowIndex\"\n             let-nestingLevel=\"nestingLevel\" let-colsToRender=\"colsToRender\">\n\n\n    <tr #rowElement dtDraggableRow [dndRowIndex]=\"rowIndex\"\n        class=\"dt-body-row\"\n        (click)=\"onHandleRowClicked($event, rowData)\"\n        [attr.nestingLevel]=\"nestingLevel\"\n        [ngClass]=\"{'dt-even-row': even, 'dt-odd-row': odd,\n            'dt-row-selected': isRowSelected(rowData),\n            'dt-row-draggable': dndRowEnabled,\n            'dt-root-section': nestingLevel === 0 }\">\n\n        <ng-template ngFor let-col [ngForOf]=\"colsToRender\" let-colIndex=\"index\">\n            <ng-container *ngTemplateOutlet=\"col.rendererTemplate;\n                    context:{$implicit: false, data:rowData, rowIndex:rowIndex,\n                    nestingLevel:nestingLevel}\">\n            </ng-container>\n        </ng-template>\n    </tr>\n</ng-template>\n\n\n",
                        styles: [".w-datatable{position:relative;display:block;box-sizing:border-box}.w-datatable table{border-collapse:collapse;width:100%;table-layout:fixed}.w-datatable tbody,.w-datatable td,.w-datatable th{outline:0}.dt-cell-def,.dt-cell-def-selectable{border:1px solid transparent;padding:17px 16px;box-sizing:border-box}.dt-cell-def-selectable{cursor:pointer;width:100%;height:100%}th .dt-cell-def-selectable{border-width:4px 1px 1px;padding:14px 16px 17px}td .dt-cell-def-selectable{border-width:0 1px 0 5px;padding:17px 16px 17px 13px}.dt-data-cells tr.dt-is-highlight,.dt-data-cells tr.dt-is-hover{border-color:inherit;font-weight:inherit;cursor:pointer}.w-datatable-rtl{direction:rtl}.w-datatable-rtl.w-datatable-rtl.w-datatable thead th{text-align:right}.dt-root-section .dt-cell-def,.dt-root-section .dt-cell-def-selectable{background-color:#f3f6f8;padding:10px 16px;border-bottom-color:transparent;border-right-color:transparent}.dt-plain-layout .dt-is-active,.dt-plain-layout .dt-is-default,.dt-plain-layout .dt-is-highlight,.dt-plain-layout .dt-is-hover,.dt-plain-layout .dt-is-hoverable-row{border-right-color:transparent}.dt-is-active,.dt-is-default,.dt-is-highlight,.dt-is-hover,.dt-is-hoverable-row{border:1px solid #d7d7d7;background-color:#fff;color:#363636}.dt-row-selected td{background-color:rgba(238,255,238,.71)}.dt-is-active{border-color:#065d9c;color:#199de0}.dt-is-highlight{background-color:rgba(65,117,5,.18)}.dt-is-hidden{display:none}.dt-u-unselectable-text{-webkit-user-select:none;-moz-user-select:none;-o-user-select:none;-ms-user-select:none;user-select:none}.dt-u-sortable{cursor:pointer}"],
                        providers: [
                            objectutils.ObjectUtils,
                            OutlineState,
                            { provide: DATA_SOURCE, useClass: DT2DataSource, deps: [DataProviders, DataFinders] },
                        ],
                        encapsulation: core.ViewEncapsulation.None,
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    },] },
        ];
        /** @nocollapse */
        Datatable2Component.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: core.ElementRef },
                { type: DT2DataSource, decorators: [{ type: core.Inject, args: [DATA_SOURCE,] }] },
                { type: core.ChangeDetectorRef },
                { type: core.ComponentFactoryResolver },
                { type: OutlineState },
                { type: core.NgZone },
                { type: core.Injector }
            ];
        };
        Datatable2Component.propDecorators = {
            list: [{ type: core.Input }],
            destinationClass: [{ type: core.Input }],
            tableStyleClass: [{ type: core.Input }],
            bodyClassFn: [{ type: core.Input }],
            isRowSelectable: [{ type: core.Input }],
            showTableHeader: [{ type: core.Input }],
            pivotalLayout: [{ type: core.Input }],
            context: [{ type: core.Input }],
            initialSortOrder: [{ type: core.Input }],
            initialSortKey: [{ type: core.Input }],
            displayRowSize: [{ type: core.Input }],
            pageSize: [{ type: core.Input }],
            dataSource: [{ type: core.Input }],
            emptyMessage: [{ type: core.Input }],
            rowTrackBy: [{ type: core.Input }],
            rowHover: [{ type: core.Input }],
            loading: [{ type: core.Input }],
            selectionMode: [{ type: core.Input }],
            loadingIcon: [{ type: core.Input }],
            indentDetailRow: [{ type: core.Input }],
            indentationPerLevel: [{ type: core.Input }],
            showSubHeader: [{ type: core.Input }],
            children: [{ type: core.Input }],
            showExpansionControl: [{ type: core.Input }],
            expandAll: [{ type: core.Input }],
            outlineFormat: [{ type: core.Input }],
            pushRootSectionOnNewLine: [{ type: core.Input }],
            showRowDetailExpansionControl: [{ type: core.Input }],
            showSelectionColumn: [{ type: core.Input }],
            showSelectAll: [{ type: core.Input }],
            showGlobalSearch: [{ type: core.Input }],
            scrollWidth: [{ type: core.Input }],
            dndRowEnabled: [{ type: core.Input }],
            onSort: [{ type: core.Output }],
            onRowClick: [{ type: core.Output }],
            onRowSelectionChange: [{ type: core.Output }],
            onCellChange: [{ type: core.Output }],
            onHeaderSelection: [{ type: core.Output }],
            header: [{ type: core.ContentChild, args: [DTHeaderComponent2,] }],
            emptyMessageTemplate: [{ type: core.ContentChild, args: ['noDataTempl',] }],
            headerTemplate: [{ type: core.ContentChild, args: ['dtHeader',] }],
            subHeaderTemplate: [{ type: core.ContentChild, args: ['dtSubHeader',] }],
            bodyTemplate: [{ type: core.ContentChild, args: ['dtBody',] }],
            headerFilterTemplate: [{ type: core.ContentChild, args: ['headerFilter',] }],
            colsQuery: [{ type: core.ContentChildren, args: [DTColumn2Component,] }],
            rowDetailColumn: [{ type: core.ContentChild, args: [DTDetailRowComponent,] }],
            valueChange: [{ type: core.Output }],
            classList: [{ type: core.HostBinding, args: ['class',] }],
            state: [{ type: core.Input }]
        };
        return Datatable2Component;
    }(BaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Please see datatable for more detail description. But the main goal of this wrapper to remove
     * all the common surrounding parts around the datatable and make sure DT can focus only actual
     * header and body structure
     *
     * It is expected that wrapper also provides some code for the sliding up panel containing
     * buttons and other actions that will be used during editing
     *
     *
     * Todo: Extract the expand logic out into some directive or component or just a class
     *
     */
    var DTWrapper = (function (_super) {
        __extends(DTWrapper, _super);
        function DTWrapper(env, render, thisElement, domUtils, platformId, dt) {
            var _this = _super.call(this, env) || this;
            _this.env = env;
            _this.render = render;
            _this.thisElement = thisElement;
            _this.domUtils = domUtils;
            _this.platformId = platformId;
            _this.dt = dt;
            /**
             * Color that is used by full screen div overlay to create expanding effect which needs to have
             * little tent;
             *
             */
            _this.expandColorFrom = '#f3f3f3';
            /**
             * Color that is used to set after we are in the full screen so our overlay div hide everything
             * on the page
             *
             */
            _this.expandColorTo = '#FFFFFF';
            /**
             * In order to debounce the typing we need to use subject
             *
             */
            _this.searchTerms = new rxjs.Subject();
            /**
             *  Specifies if we are in viewing/editing mode that can browse whole dataset lazily
             *
             */
            _this.isFullScreenMode = false;
            /**
             * Tells if we can support full screen mode - only available for the browser
             *
             */
            _this.supportFullScreen = true;
            return _this;
        }
        /**
         * @return {?}
         */
        DTWrapper.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                _super.prototype.ngOnInit.call(this);
                this.querySubscription = this.searchTerms.pipe(
                // wait 300ms after each keystroke before considering the term
                operators.debounceTime(300), 
                // ignore new term if same as previous term
                operators.distinctUntilChanged(), operators.switchMap(function (term) { return rxjs.of(term); })).subscribe(function (term) {
                    if (core$1.isPresent(term)) {
                        _this.dt.dataSource.find(term);
                    }
                });
                this.loadingSub = this.dt.valueChange
                    .subscribe(function (data) { return _this.loadingFinished(); });
            };
        /**
         * Iterates over all columns marked as frozen and retrieve a width so we can update
         * parent div
         *
         */
        /**
         * Iterates over all columns marked as frozen and retrieve a width so we can update
         * parent div
         *
         * @return {?}
         */
        DTWrapper.prototype.calculateFrozenWidth = /**
         * Iterates over all columns marked as frozen and retrieve a width so we can update
         * parent div
         *
         * @return {?}
         */
            function () {
                if (!this.dt.hasFrozenColumns()) {
                    return null;
                }
                var /** @type {?} */ fWidth = 0;
                this.dt.frozenColumns.forEach(function (col) {
                    if (col.maxWidthPx > 0) {
                        fWidth += col.widestCell;
                    }
                    else {
                        fWidth += parseInt(col.width);
                    }
                });
                return fWidth;
            };
        /**
         * When having two separate tables we need to make sure that rows of the tables are aligned.
         *
         * Therefore this method takes first column from each table read the height of the rows and set
         * the max height to both rows.
         *
         *
         */
        /**
         * When having two separate tables we need to make sure that rows of the tables are aligned.
         *
         * Therefore this method takes first column from each table read the height of the rows and set
         * the max height to both rows.
         *
         *
         * @param {?} frozenView
         * @param {?} unFrozenView
         * @return {?}
         */
        DTWrapper.prototype.alignTablesHeights = /**
         * When having two separate tables we need to make sure that rows of the tables are aligned.
         *
         * Therefore this method takes first column from each table read the height of the rows and set
         * the max height to both rows.
         *
         *
         * @param {?} frozenView
         * @param {?} unFrozenView
         * @return {?}
         */
            function (frozenView, unFrozenView) {
                core$1.assert(core$1.isPresent(frozenView) && core$1.isPresent(frozenView), 'Cant align table views as one of the view is undefined');
                var /** @type {?} */ frozenRows = frozenView.querySelectorAll('table tr');
                var /** @type {?} */ unFrozenRows = unFrozenView.querySelectorAll('table tr');
                core$1.assert(frozenRows.length === unFrozenRows.length, 'Frozen Column: Two tables does not much!');
                Array.from(frozenRows).forEach(function (frozen, index) {
                    var /** @type {?} */ h = Math.max(frozen.offsetHeight, unFrozenRows[index].offsetHeight);
                    frozen.style.height = h + 'px';
                    unFrozenRows[index].style.height = h + 'px';
                });
            };
        /**
         * @return {?}
         */
        DTWrapper.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.initFullScreen();
            };
        /**
         * @return {?}
         */
        DTWrapper.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
            function () {
                if (this.dt.hasFrozenColumns()) {
                    var /** @type {?} */ frozenView = this.thisElement.nativeElement.querySelector('.dt-body-frozen');
                    var /** @type {?} */ unFrozenView = this.thisElement.nativeElement.querySelector('.dt-body-unfrozen');
                    var /** @type {?} */ frozenWidth = this.calculateFrozenWidth();
                    frozenView.style.width = frozenWidth + 'px';
                    if (core$1.isPresent(unFrozenView)) {
                        // include border and create indent effect by having 1px white space
                        unFrozenView.style.left = (frozenWidth + 2) + 'px';
                        unFrozenView.style.width = unFrozenView.parentElement.offsetWidth
                            - frozenView.offsetWidth + 'px';
                        this.alignTablesHeights(frozenView, unFrozenView);
                    }
                }
            };
        /**
         * @return {?}
         */
        DTWrapper.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnDestroy.call(this);
                if (core$1.isPresent(this.querySubscription)) {
                    this.querySubscription.unsubscribe();
                }
                if (core$1.isPresent(this.loadingSub)) {
                    this.loadingSub.unsubscribe();
                }
            };
        /**
         * FULL SCREEN MODE methods
         */
        /**
         *
         * When fullscreen functionality is enabled this method switches between norml and full screen
         * mode
         *
         */
        /**
         *
         * When fullscreen functionality is enabled this method switches between norml and full screen
         * mode
         *
         * @param {?} event
         * @return {?}
         */
        DTWrapper.prototype.toggleFullScreen = /**
         *
         * When fullscreen functionality is enabled this method switches between norml and full screen
         * mode
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.isFullScreenMode) {
                    this.closeFullScreen(event);
                }
                else {
                    this.openFullScreen(event);
                }
            };
        /**
         * To push this component to full screen mode or maybe full page mode we need run following:
         *
         *  - Execute expand transformation, where we have additional overlay div that we slowly expand
         *  and this creates impression the DT is expanding
         *
         *  - apply full-screen class on top host element  - in this case its DataTable to switch
         *  to absolute positioning
         *
         *  - make sure we are scrolled all the way up
         *
         *  - hide all the elements on the page so their dimension don't interfere with this table.
         *
         *
         */
        /**
         * To push this component to full screen mode or maybe full page mode we need run following:
         *
         *  - Execute expand transformation, where we have additional overlay div that we slowly expand
         *  and this creates impression the DT is expanding
         *
         *  - apply full-screen class on top host element  - in this case its DataTable to switch
         *  to absolute positioning
         *
         *  - make sure we are scrolled all the way up
         *
         *  - hide all the elements on the page so their dimension don't interfere with this table.
         *
         *
         * @param {?} event
         * @return {?}
         */
        DTWrapper.prototype.openFullScreen = /**
         * To push this component to full screen mode or maybe full page mode we need run following:
         *
         *  - Execute expand transformation, where we have additional overlay div that we slowly expand
         *  and this creates impression the DT is expanding
         *
         *  - apply full-screen class on top host element  - in this case its DataTable to switch
         *  to absolute positioning
         *
         *  - make sure we are scrolled all the way up
         *
         *  - hide all the elements on the page so their dimension don't interfere with this table.
         *
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.isFullScreenMode = true;
                this.runExpandEffect();
                this.originalScrollPosition = window.pageYOffset;
                window.scroll(0, 0);
                this.toggleFullScreenOnDT(true);
                // mark my element in the path that needs to stay
                var /** @type {?} */ parentNode = this.thisElement.nativeElement.parentNode;
                while (core$1.isPresent(parentNode) && parentNode.tagName !== 'BODY') {
                    parentNode.classList.add('u-full-screen-element');
                    parentNode = parentNode.parentNode;
                }
                this.hideNonFullScreenElement(document.body);
                this.dt.state.limit = Math.round(this.calculateLimit());
                this.dt.dataSource.fetch(this.dt.state);
                // once loaded set back correct page size we use when loading data
                this.dt.state.limit = this.dt.pageSize;
            };
        /**
         *
         * The same like above method (openFullScreen) but in reverse order.
         *
         */
        /**
         *
         * The same like above method (openFullScreen) but in reverse order.
         *
         * @param {?} event
         * @return {?}
         */
        DTWrapper.prototype.closeFullScreen = /**
         *
         * The same like above method (openFullScreen) but in reverse order.
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _this = this;
                this.isFullScreenMode = false;
                this.showNonFullScreenElement();
                this.runCollapseEffect();
                this.toggleFullScreenOnDT(false);
                this.dt.dataSource.state.limit = this.dt.dataSource.state.displayLimit;
                this.dt.dataSource.state.offset = 0;
                this.dt.dataSource.fetch(this.dt.dataSource.state);
                setTimeout(function () {
                    window.scroll(0, _this.originalScrollPosition);
                }, 300);
            };
        /**
         * Applies set of set of css properties to make the DT main component on the page expand to
         * full page mode and back
         *
         * We want to make it with little delay to let other animation finish
         */
        /**
         * Applies set of set of css properties to make the DT main component on the page expand to
         * full page mode and back
         *
         * We want to make it with little delay to let other animation finish
         * @param {?} fullScreen
         * @return {?}
         */
        DTWrapper.prototype.toggleFullScreenOnDT = /**
         * Applies set of set of css properties to make the DT main component on the page expand to
         * full page mode and back
         *
         * We want to make it with little delay to let other animation finish
         * @param {?} fullScreen
         * @return {?}
         */
            function (fullScreen) {
                var _this = this;
                this.dt.el.nativeElement.style.opacity = 0;
                setTimeout(function () {
                    if (fullScreen) {
                        _this.dt.classList += 'dt-full-screen';
                        _this.dt.el.nativeElement.style.opacity = 1;
                    }
                    else {
                        _this.dt.classList = _this.dt.classList.replace('dt-full-screen', '');
                        _this.dt.el.nativeElement.style.opacity = 1;
                    }
                }, 200);
            };
        /**
         * Listen for infinite scroll event and request new data from data source
         *
         */
        /**
         * Listen for infinite scroll event and request new data from data source
         *
         * @param {?} event
         * @return {?}
         */
        DTWrapper.prototype.onLazyLoad = /**
         * Listen for infinite scroll event and request new data from data source
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (event.isLoad) {
                    this.dt.state.offset = event.offset;
                    this.dt.dataSource.fetch(this.dt.state);
                }
                else {
                    var /** @type {?} */ dataProvider = this.dt.dataSource.dataProvider;
                    var /** @type {?} */ data = dataProvider.dataChanges.getValue();
                    dataProvider.dataChanges.next(data.slice(0, event.offset));
                }
            };
        /**
         * Creates animation effect to make it feel like the element (in this case DT) is expanding
         * from the middle to the full page mode.
         *
         * We take the dimension of the table then it is scaled slowly to the full page
         * @return {?}
         */
        DTWrapper.prototype.runExpandEffect = /**
         * Creates animation effect to make it feel like the element (in this case DT) is expanding
         * from the middle to the full page mode.
         *
         * We take the dimension of the table then it is scaled slowly to the full page
         * @return {?}
         */
            function () {
                var _this = this;
                this.dtBoundingClientRect = this.thisElement.nativeElement.getBoundingClientRect();
                this.updateElement();
                this.dtFullScreenOverlay.nativeElement.style.backgroundColor = this.expandColorFrom;
                this.dtFullScreenOverlay.nativeElement.style.opacity = 1;
                this.applyTransformation(true);
                setTimeout(function () {
                    _this.dtFullScreenOverlay.nativeElement.style.backgroundColor = _this.expandColorTo;
                }, 300);
            };
        /**
         * Applies the transformation and scale the helper div (overlay) down to make it look like
         * it collapses
         * @return {?}
         */
        DTWrapper.prototype.runCollapseEffect = /**
         * Applies the transformation and scale the helper div (overlay) down to make it look like
         * it collapses
         * @return {?}
         */
            function () {
                var _this = this;
                this.updateElement();
                this.applyTransformation(false);
                setTimeout(function () {
                    _this.updateElement();
                    _this.dtFullScreenOverlay.nativeElement.style.opacity = 0;
                }, 200);
                setTimeout(function () {
                    _this.updateElement(_this.dtBoundingClientRect.left, _this.dtBoundingClientRect.top, 0, 0);
                }, 400);
            };
        /**
         * DFS  - to go thru all the element under BODY and remove them from the page.
         *
         * @param {?} parentElement
         * @return {?}
         */
        DTWrapper.prototype.hideNonFullScreenElement = /**
         * DFS  - to go thru all the element under BODY and remove them from the page.
         *
         * @param {?} parentElement
         * @return {?}
         */
            function (parentElement) {
                if (this.thisElement.nativeElement.parentNode === parentElement) {
                    return;
                }
                for (var /** @type {?} */ i = 0; i < parentElement.children.length; i++) {
                    var /** @type {?} */ element = parentElement.children[i];
                    if (this.needTraverseDown(element)) {
                        this.hideNonFullScreenElement(element);
                    }
                    else if (!element.classList.contains('dt-full-screen')) {
                        element.classList.add('u-fs-element-out');
                    }
                }
            };
        /**
         * Put all the element that were previously removed by hideNonFullScreenElement() back
         * @return {?}
         */
        DTWrapper.prototype.showNonFullScreenElement = /**
         * Put all the element that were previously removed by hideNonFullScreenElement() back
         * @return {?}
         */
            function () {
                Array.from(document.querySelectorAll('.u-fs-element-out'))
                    .forEach(function (elem) { return elem.classList.remove('u-fs-element-out'); });
            };
        /**
         * \@Internal
         *
         * @param {?} element
         * @return {?}
         */
        DTWrapper.prototype.needTraverseDown = /**
         * \@Internal
         *
         * @param {?} element
         * @return {?}
         */
            function (element) {
                return core$1.isPresent(element) && element.tagName !== 'SCRIPT' &&
                    element.classList.contains('u-full-screen-element') &&
                    !element.classList.contains('dt-full-screen');
            };
        /**
         * When we enter full screen /page mode when need to calculate how many rows to load initially
         *
         * @return {?}
         */
        DTWrapper.prototype.calculateLimit = /**
         * When we enter full screen /page mode when need to calculate how many rows to load initially
         *
         * @return {?}
         */
            function () {
                var /** @type {?} */ browserH = this.domUtils.browserDimentions().height;
                var /** @type {?} */ rowH = this.dt.el.nativeElement.querySelector('tbody tr:first-child').offsetHeight;
                return (core$1.isPresent(rowH) && rowH > 0) ? (browserH / rowH) + 20 : 50;
            };
        /**
         * \@Internal
         *
         * @param {?=} l
         * @param {?=} t
         * @param {?=} w
         * @param {?=} h
         * @return {?}
         */
        DTWrapper.prototype.updateElement = /**
         * \@Internal
         *
         * @param {?=} l
         * @param {?=} t
         * @param {?=} w
         * @param {?=} h
         * @return {?}
         */
            function (l, t, w, h) {
                if (l === void 0) {
                    l = this.dtBoundingClientRect.left;
                }
                if (t === void 0) {
                    t = this.dtBoundingClientRect.top;
                }
                if (w === void 0) {
                    w = this.dtBoundingClientRect.width;
                }
                if (h === void 0) {
                    h = this.dtBoundingClientRect.height;
                }
                this.dtFullScreenOverlay.nativeElement.style.left = l + 'px';
                this.dtFullScreenOverlay.nativeElement.style.top = t + 'px';
                this.dtFullScreenOverlay.nativeElement.style.width = w + 'px';
                this.dtFullScreenOverlay.nativeElement.style.height = h + 'px';
            };
        /**
         * \@Internal
         *
         * @param {?} expand
         * @return {?}
         */
        DTWrapper.prototype.applyTransformation = /**
         * \@Internal
         *
         * @param {?} expand
         * @return {?}
         */
            function (expand) {
                var /** @type {?} */ x, /** @type {?} */ y, /** @type {?} */ tx, /** @type {?} */ ty;
                if (expand) {
                    x = window.innerWidth / this.dtBoundingClientRect.width;
                    y = window.innerHeight / this.dtBoundingClientRect.height;
                    tx = (window.innerWidth / 2 - this.dtBoundingClientRect.width / 2
                        - this.dtBoundingClientRect.left) / x;
                    ty = (window.innerHeight / 2 - this.dtBoundingClientRect.height / 2
                        - this.dtBoundingClientRect.top) / y;
                }
                else {
                    x = 1;
                    y = 1;
                    tx = this.dtBoundingClientRect.left;
                    ty = this.dtBoundingClientRect.top;
                }
                this.dtFullScreenOverlay.nativeElement.style.transform =
                    'scaleX(' + x + ') scaleY(' + y + ') translate3d(' + (tx) + 'px, ' + (ty) + 'px, 0px)';
            };
        /**
         * INFINITE SCROLLING METHODS
         * @return {?}
         */
        DTWrapper.prototype.initFullScreen = /**
         * INFINITE SCROLLING METHODS
         * @return {?}
         */
            function () {
                if (!common.isPlatformBrowser(this.platformId)) {
                    this.supportFullScreen = false;
                    return;
                }
                this.render.appendChild(document.body, this.dtFullScreenOverlay.nativeElement);
            };
        /**
         * When loading is finished mark loading icon is done so we can hide it. I am using little
         * delay to make the animation visible
         * @return {?}
         */
        DTWrapper.prototype.loadingFinished = /**
         * When loading is finished mark loading icon is done so we can hide it. I am using little
         * delay to make the animation visible
         * @return {?}
         */
            function () {
                var _this = this;
                if (core$1.isPresent(this.infiniteScroll)) {
                    setTimeout(function () { return _this.infiniteScroll.complete(); }, 200);
                }
            };
        DTWrapper.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-dt-wrapper',
                        template: "<div [ngClass]=\"dt.styleClass\" [class.dt-full-screen-mode]=\"isFullScreenMode\"\n     [style.width]=\"dt.width\"\n>\n    <div class=\"dt-loading-overlay\" *ngIf=\"dt.loading\"></div>\n    <div class=\"dt-loading-content\" *ngIf=\"dt.loading\">\n        <i [class]=\"'sap-icon u-dt-spin-icon ' + dt.loadingIcon\"></i>\n    </div>\n\n    <div class=\"dt-header\" *ngIf=\"dt.showTableHeader\">\n        <ng-template *ngIf=\"dt.header; then appDefinedHeader else defaultHeader\"></ng-template>\n    </div>\n\n    <!-- DT BODY with table headers and values -->\n    <div class=\"dt-body-wrapper-view\">\n        <ng-template\n            *ngIf=\"dt.hasFrozenColumns(); then dtBodyWithFrozenColumns else dtBodyNoFrozenColumns\">\n        </ng-template>\n    </div>\n\n    <!--<div class=\"dt-footer\" *ngIf=\"footer\">-->\n    <!--&lt;!&ndash; footerArea&ndash;&gt;-->\n    <!--<ng-content select=\"aw-dt-footer\"></ng-content>-->\n    <!--</div>-->\n</div>\n\n<!-- todo: dont activate this if we reached the end of list - -->\n<aw-infinite-scroll #infiniteScroll *ngIf=\"isFullScreenMode\"\n                    [distance]=\"'10%'\"\n                    [fetchSize]=\"dt.state.limit\"\n                    (onLoad)=\"onLazyLoad($event)\">\n</aw-infinite-scroll>\n\n\n<ng-template #appDefinedHeader>\n    <ng-container *ngTemplateOutlet=\"heading;\"></ng-container>\n</ng-template>\n\n<ng-template #defaultHeader>\n    <div class=\"dt-global-filter\">\n        <span class=\"sap-icon icon-filter\"></span>\n    </div>\n\n    <div class=\"dt-global-actions\">\n        <div class=\"dt-action-combo\">\n            <span *ngIf=\"supportFullScreen\" class=\"sap-icon icon-resize\"\n                  (click)=\"toggleFullScreen($event)\"></span>\n\n            <aw-input-field *ngIf=\"dt.showGlobalSearch\" styleClass=\"dt-table-search\"\n                            [(ngModel)]=\"dt.state.currentSearchQuery\"\n                            placeHolder=\"search\"\n                            icon=\"icon-search\"\n                            (ngModelChange)=\"searchTerms.next($event)\">\n            </aw-input-field>\n            <span class=\"ariba-icon icon-more\"></span>\n        </div>\n    </div>\n</ng-template>\n\n<!--\n    Each section frozen/non-frozen is calculated inside table-wrapper in the ngAfterViewChecked, where we set\n    proper width for each frame as well as left coordinates for the right one\n-->\n<ng-template #dtBodyNoFrozenColumns>\n    <!--\n        For non-frozen case we also need to set TRUE as the view is actually frozen and does not\n        scroll.\n        We use this frozenColumns flag inside DT to properly set column index on the header level\n        columnIndex:(frozen ? columnIndex: (columns.length + columnIndex))\n\n        therefore we need to set true even in this case to return real columnIndex since we dont\n        have the second table.\n    -->\n    <ng-container *ngTemplateOutlet=\"dtBody; context:{$implicit: dt.columns, frozenColumns: true }\">\n    </ng-container>\n</ng-template>\n\n<ng-template #dtBodyWithFrozenColumns>\n    <ng-container\n        *ngTemplateOutlet=\"dtBody; context:{$implicit: dt.frozenColumns, frozenColumns: true }\">\n    </ng-container>\n    <ng-container\n        *ngTemplateOutlet=\"dtBody; context:{$implicit: dt.columns, frozenColumns: false }\">\n    </ng-container>\n</ng-template>\n\n\n<ng-template #dtBody let-columns let-frozenColumns=\"frozenColumns\">\n\n    <div #dtContainer class=\"dt-body-wrapper\"\n         [style.width.px]=\"this.calculateFrozenWidth()\"\n         [class.dt-body-unfrozen]=\"dt.hasFrozenColumns() && !frozenColumns\"\n         [class.dt-body-frozen]=\"dt.hasFrozenColumns() && frozenColumns\"\n    >\n\n        <table [ngClass]=\"dt.tableStyleClass\"\n               [style.width]=\"frozenColumns ? null : dt.scrollWidth\"\n               [class.dt-pivot-layout]=\"dt.pivotalLayout\"\n               [class.dt-plain-layout]=\"!dt.pivotalLayout && !dt.isOutline()\">\n\n            <!-- Render TH header rows-->\n            <thead class=\"dt-thead\">\n            <ng-container *ngTemplateOutlet=\"headerRows; context:{$implicit: columns,frozenColumns:frozenColumns }\">\n            </ng-container>\n            </thead>\n\n            <!--\n                Render data rows. For data rows we need to keep tbody tag inside DT table\n                due to Outline\n             -->\n            <ng-container *ngTemplateOutlet=\"bodyRows; context:{$implicit: columns,  frozenColumns:frozenColumns }\">\n            </ng-container>\n        </table>\n    </div>\n</ng-template>\n\n\n<div #dtFullScreenOverlay class=\"dt-full-screen-overlay u-full-screen-element\"></div>\n",
                        styles: [".dt-footer,.dt-header{text-align:center;padding:.5em .75em;box-sizing:border-box}.dt-footer{border-top:0}.dt-thead tr{border-width:0}.dt-body-wrapper-view{position:relative}.dt-body-wrapper{overflow:hidden;border:1px solid #d7d7d7}.dt-body-wrapper.dt-body-unfrozen{border-left-color:transparent;position:absolute;top:0;overflow-x:auto}.dt-loading-overlay{position:absolute;background-color:#9b9b9b;width:100%;height:100%;opacity:.1;z-index:1}.dt-loading-content{position:absolute;left:50%;top:25%;z-index:2}.dt-header{width:100%;display:flex;flex-flow:row nowrap;justify-content:space-between;color:#363636;border-bottom:1px solid #f1f1f1;margin-bottom:30px}.dt-header .dt-global-filter{flex:0 0;align-items:flex-start;font-size:18px}.dt-header .dt-global-actions{flex:0 0;align-items:flex-end}.dt-header .dt-action-combo{display:flex;flex-flow:row nowrap;color:#7d7d7d}.dt-header .dt-action-combo .ariba-icon,.dt-header .dt-action-combo .sap-icon{margin-left:15px;font-size:20px;align-self:center;cursor:pointer}.dt-header .dt-action-combo .dt-table-search{border-top-color:transparent;border-left-color:transparent;border-right-color:transparent}.dt-header .dt-action-combo .icon-resize{color:#4a4a4a;font-size:16px;line-height:18px;margin-right:15px}.u-dt-spin-icon{display:inline-block;-webkit-animation:2s linear infinite doSpin;animation:2s linear infinite doSpin}@-webkit-keyframes doSpin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes doSpin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.dt-full-screen-overlay{position:fixed;z-index:100;-webkit-transform-origin:50% 50%;transform-origin:50% 50%;transition:all .4s ease-in-out}.dt-full-screen{width:98vw;z-index:120;position:absolute;top:15px;pointer-events:all;transition:opacity .5s ease-in-out}.u-fs-element-out{display:none}"],
                        encapsulation: core.ViewEncapsulation.None
                    },] },
        ];
        /** @nocollapse */
        DTWrapper.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: core.Renderer2 },
                { type: core.ElementRef },
                { type: DomUtilsService },
                { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },
                { type: Datatable2Component, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return Datatable2Component; }),] }] }
            ];
        };
        DTWrapper.propDecorators = {
            expandColorFrom: [{ type: core.Input }],
            expandColorTo: [{ type: core.Input }],
            heading: [{ type: core.ContentChild, args: ['headingArea',] }],
            headerRows: [{ type: core.ContentChild, args: ['headerRows',] }],
            bodyRows: [{ type: core.ContentChild, args: ['bodyRows',] }],
            footer: [{ type: core.ContentChild, args: ['footerArea',] }],
            dtFullScreenOverlay: [{ type: core.ViewChild, args: ['dtFullScreenOverlay',] }],
            infiniteScroll: [{ type: core.ViewChild, args: ['infiniteScroll',] }]
        };
        return DTWrapper;
    }(BaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     *
     * This directive is responsible for checking and setting the widest content width onto
     * Column component as the widestCell property.
     *
     * We use this directive inside dt-column.component to store a current width for each td,th
     *
     *
     */
    var SetCellMaxWidthDirective = (function () {
        function SetCellMaxWidthDirective(element, render, td) {
            this.element = element;
            this.render = render;
            this.td = td;
        }
        /**
         * @return {?}
         */
        SetCellMaxWidthDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        SetCellMaxWidthDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                // console.log('Cell Max Width: ' + this.dtMaxWidth, this.dtMaxWidth > 0);
                if (core$1.isPresent(this.dtMaxWidth) && this.dtMaxWidth > 0) {
                    var /** @type {?} */ inlineData = this.element.nativeElement.querySelector('.dt-col-cell-data');
                    if (core$1.isPresent(inlineData)) {
                        inlineData.style.whiteSpace = 'nowrap';
                        inlineData.style.display = 'inline-block';
                        var /** @type {?} */ cellWidth = inlineData.offsetWidth; // td
                        inlineData.style.whiteSpace = 'normal';
                        inlineData.style.display = 'inline';
                        if (!this.isInThresHold(cellWidth)) {
                            return;
                        }
                        cellWidth += this.tdPadding();
                        if (cellWidth > this.td.widthPx) {
                            if (cellWidth < this.dtMaxWidth) {
                                this.td.widestCell = cellWidth > this.td.widestCell ? cellWidth :
                                    this.td.widestCell;
                            }
                            else if (cellWidth >= this.dtMaxWidth) {
                                this.td.widestCell = (this.dtMaxWidth > this.td.widestCell)
                                    ? this.dtMaxWidth : this.td.widestCell;
                            }
                        }
                    }
                }
            };
        /**
         *
         * Is the new width the same as the one already set on the column? If yes then probably
         * new content does not differ that much. We still keep certain threshold as the new content
         * width might differ 1 or 2 pixes depending how set the css.
         *
         * To make sure we resize column only if necessary because it could be original size
         * is 400px but the new one is 401px since somewhere add some extra border we have this
         * safe threshold
         *
         */
        /**
         *
         * Is the new width the same as the one already set on the column? If yes then probably
         * new content does not differ that much. We still keep certain threshold as the new content
         * width might differ 1 or 2 pixes depending how set the css.
         *
         * To make sure we resize column only if necessary because it could be original size
         * is 400px but the new one is 401px since somewhere add some extra border we have this
         * safe threshold
         *
         * @param {?} newWidth
         * @return {?}
         */
        SetCellMaxWidthDirective.prototype.isInThresHold = /**
         *
         * Is the new width the same as the one already set on the column? If yes then probably
         * new content does not differ that much. We still keep certain threshold as the new content
         * width might differ 1 or 2 pixes depending how set the css.
         *
         * To make sure we resize column only if necessary because it could be original size
         * is 400px but the new one is 401px since somewhere add some extra border we have this
         * safe threshold
         *
         * @param {?} newWidth
         * @return {?}
         */
            function (newWidth) {
                if (this.td.widestCell > 0) {
                    return Math.abs(this.td.widestCell - newWidth) > 3 && newWidth > this.td.widestCell;
                }
                return true;
            };
        /**
         * @return {?}
         */
        SetCellMaxWidthDirective.prototype.tdPadding = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ computedStyle = getComputedStyle(this.element.nativeElement);
                var /** @type {?} */ cell = parseInt(computedStyle.paddingLeft) || 0;
                cell += parseInt(computedStyle.paddingRight) || 0;
                cell += parseInt(computedStyle.borderRightWidth) || 0;
                cell += parseInt(computedStyle.borderLeftWidth) || 0;
                // plus give it some little space around the text so it nots px to px inner width of the td
                // cuz it could wrap
                cell += 5;
                return cell;
            };
        SetCellMaxWidthDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[dtMaxWidth]'
                    },] },
        ];
        /** @nocollapse */
        SetCellMaxWidthDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Renderer2 },
                { type: DTColumn2Component }
            ];
        };
        SetCellMaxWidthDirective.propDecorators = {
            dtMaxWidth: [{ type: core.Input }]
        };
        return SetCellMaxWidthDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Directive used inside DT in order to support table rows re-ordering. This manages all the
     * D&D necessary logic for this functionality.
     *
     * [dtDraggableRow] is used inside the `rowTemplate` like this:
     *
     *
     * ```html
     *
     * <ng-template #rowTemplate let-rowData let-even='event" let-odd="odd" let-rowIndex="rowIndex"
     *              let-nestingLevel="nestingLevel" let-colsToRender="colsToRender">
     *
     *     <tr #rowElement dtDraggableRow [dndRowIndex]="rowIndex"
     *          class="dt-body-row"
     *
     *
     *
     * ```
     *
     * which enabled or disables based on the used DT binding [dndRowEnabled]. By default its disabled.
     *
     *
     *
     */
    var DTDraggableRowDirective = (function () {
        function DTDraggableRowDirective(element, dt, domUtils, ngZone) {
            this.element = element;
            this.dt = dt;
            this.domUtils = domUtils;
            this.ngZone = ngZone;
            /**
             *
             * Tells the directive if we enable middle row zone to create an effect that we are dropping
             * into the row. Used for outline DT mainly.
             *
             */
            this.dropIntoEnabled = false;
            /**
             * Current TR index number
             *
             */
            this.dndRowIndex = 0;
            /**
             * Holds information about our dragging direction UP and DOWN in order to assign correct style
             * that highlights the row at the top or bottom
             *
             */
            this.dragDir = DragDirection.None;
            /**
             * Indicates that we dragged our row and stopped in the middle of the other row
             *
             */
            this.inMiddle = false;
            /**
             *
             * Current drag Y coordinates which is used together with the dragDir when assinging dragging
             * direction.
             *
             */
            this.dragY = 0;
        }
        /**
         * @return {?}
         */
        DTDraggableRowDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.dt.dndRowEnabled) {
                    this.setupEventListeners();
                }
            };
        /**
         * @return {?}
         */
        DTDraggableRowDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.dt.dndRowEnabled) {
                    this.releaseEventListeners();
                }
            };
        /**
         * Setups listeners and returns handle to them so we can later on unsubscribe.
         * @return {?}
         */
        DTDraggableRowDirective.prototype.setupEventListeners = /**
         * Setups listeners and returns handle to them so we can later on unsubscribe.
         * @return {?}
         */
            function () {
                var _this = this;
                this.ngZone.runOutsideAngular(function () {
                    _this.eventHandlers = {};
                    _this.eventHandlers['mousedown'] = _this.onMouseDownEvent.bind(_this);
                    _this.element.nativeElement.addEventListener('mousedown', _this.eventHandlers['mousedown']);
                    _this.eventHandlers['dragstart'] = _this.onDragStartEvent.bind(_this);
                    _this.element.nativeElement.addEventListener('dragstart', _this.eventHandlers['dragstart']);
                    _this.eventHandlers['dragover'] = _this.onDragOverEvent.bind(_this);
                    _this.element.nativeElement.addEventListener('dragover', _this.eventHandlers['dragover']);
                    _this.eventHandlers['dragleave'] = _this.onDragLeaveEvent.bind(_this);
                    _this.element.nativeElement.addEventListener('dragleave', _this.eventHandlers['dragleave']);
                    _this.eventHandlers['drop'] = _this.onDropEvent.bind(_this);
                    _this.element.nativeElement.addEventListener('drop', _this.eventHandlers['drop']);
                    _this.eventHandlers['dragend'] = _this.onDragEndEvent.bind(_this);
                    _this.element.nativeElement.addEventListener('dragend', _this.eventHandlers['dragend']);
                });
            };
        /**
         * Removes all the created listeners inside destroy() callback
         * @return {?}
         */
        DTDraggableRowDirective.prototype.releaseEventListeners = /**
         * Removes all the created listeners inside destroy() callback
         * @return {?}
         */
            function () {
                var _this = this;
                DragEvents.forEach(function (name) {
                    document.removeEventListener('name', _this.eventHandlers[name]);
                });
            };
        /**
         *
         * This is first event where we:
         *
         *  - Mark element draggable to enable D&D
         *  - Set click position relative to the middle of the current row
         *      This is mainly needed when we are trying to calculate something for
         *      dropInto row (outline)
         *
         * event.target usually contains reference to TD element
         * @param {?} event
         * @return {?}
         */
        DTDraggableRowDirective.prototype.onMouseDownEvent = /**
         *
         * This is first event where we:
         *
         *  - Mark element draggable to enable D&D
         *  - Set click position relative to the middle of the current row
         *      This is mainly needed when we are trying to calculate something for
         *      dropInto row (outline)
         *
         * event.target usually contains reference to TD element
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (event.altKey && this.domUtils.hasParent(event.target, '.dt-row-draggable')) {
                    this.element.nativeElement.draggable = true;
                    var /** @type {?} */ elToBeDragged = this.domUtils.elementDimensions(event.target);
                    this.dt.env.setValue('ddClickDeviance', (elToBeDragged.height / 2) - event.offsetY);
                }
                else {
                    this.element.nativeElement.draggable = false;
                }
            };
        /**
         * This is second triggered event when the actual dragging starts. Here we need to disable
         * dragged row and save information that are common to a table.
         *
         * Marking row disabled with the style .dt-row-dragging using setTimeout is needed as
         * if we would go without it then D&D framework would create a copy of row in disabled state.
         * Now we grab a row with active state and after a 200ms delay we disable the original row.
         *
         * @param {?} event
         * @return {?}
         */
        DTDraggableRowDirective.prototype.onDragStartEvent = /**
         * This is second triggered event when the actual dragging starts. Here we need to disable
         * dragged row and save information that are common to a table.
         *
         * Marking row disabled with the style .dt-row-dragging using setTimeout is needed as
         * if we would go without it then D&D framework would create a copy of row in disabled state.
         * Now we grab a row with active state and after a 200ms delay we disable the original row.
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                setTimeout(function () {
                    if (core$1.isPresent(event.target.classList)) {
                        event.target.classList.add('dt-row-dragging');
                    }
                }, 200);
                this.dt.env.setValue('isDragging', true);
                this.dt.env.setValue('dndId', this.dndRowIndex);
                event.dataTransfer.setData('text', this.dndRowIndex);
            };
        /**
         *
         * This events happens anytime as we drag over rows. This event triggered after certain
         * delay. In here we calculate the mouse movement to identify if we are going UP or DOWN.
         *
         * This is mainly needed to mark a row with the correct line on TOP or BOTTOM to visually
         * show a user where we are.
         *
         * Once we know the direction and the drop target is valid we mark the row with correct class
         * that does the trick
         * @param {?} event
         * @return {?}
         */
        DTDraggableRowDirective.prototype.onDragOverEvent = /**
         *
         * This events happens anytime as we drag over rows. This event triggered after certain
         * delay. In here we calculate the mouse movement to identify if we are going UP or DOWN.
         *
         * This is mainly needed to mark a row with the correct line on TOP or BOTTOM to visually
         * show a user where we are.
         *
         * Once we know the direction and the drop target is valid we mark the row with correct class
         * that does the trick
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.dataTransfer.dropEffect = 'move';
                if (this.dragY < event.pageY) {
                    this.dragDir = DragDirection.Down;
                }
                else if (this.dragY > event.pageY) {
                    this.dragDir = DragDirection.Up;
                }
                // dont set again unless its different
                if (this.dragY !== event.pageY) {
                    this.dragY = event.pageY;
                }
                if (this.isValidDropTarget(event)) {
                    // todo test this preventDefault() so it does not create some sideeffect
                    event.preventDefault();
                    this.markRowWithClass(event, this.domUtils.closest(event.target, 'tr'));
                }
            };
        /**
         * This is finishing event just before D&D is done. It takes current information and
         * broadcast them to the DT so DT can do necessary row reordering
         *
         *
         * @param {?} event
         * @return {?}
         */
        DTDraggableRowDirective.prototype.onDropEvent = /**
         * This is finishing event just before D&D is done. It takes current information and
         * broadcast them to the DT so DT can do necessary row reordering
         *
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.clearClasses(event.target.parentElement);
                // event.preventDefault();
                var /** @type {?} */ origIndx = this.dt.env.getValue('dndId');
                var /** @type {?} */ dropPos = this.inMiddle ? DropPosition.Into : (this.dragDir === DragDirection.Up ? DropPosition.Before : DropPosition.After);
                this.dt.onDnDRowDrop(origIndx, this.dndRowIndex, dropPos);
                this.inMiddle = false;
                this.dragY = 0;
            };
        /**
         * Every time we drag over the element we apply some classes to the it. this method does the
         * opposite which is to remove everything so we are ready for the next row
         *
         *
         * @param {?} event
         * @return {?}
         */
        DTDraggableRowDirective.prototype.onDragLeaveEvent = /**
         * Every time we drag over the element we apply some classes to the it. this method does the
         * opposite which is to remove everything so we are ready for the next row
         *
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var /** @type {?} */ tr = this.domUtils.closest(event.target, 'tr');
                this.clearClasses(tr);
                this.dt.env.deleteValue('dndOnHoldIndex');
            };
        /**
         *
         * This is last event within D&D flow. Mainly used to clean up all the resource that has not
         * been clean up already inside onDropEvent.
         *
         * @param {?} event
         * @return {?}
         */
        DTDraggableRowDirective.prototype.onDragEndEvent = /**
         *
         * This is last event within D&D flow. Mainly used to clean up all the resource that has not
         * been clean up already inside onDropEvent.
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (core$1.isPresent(event.target.classList)) {
                    event.target.classList.remove('dt-row-dragging');
                }
                this.clearClasses(event.target);
                this.element.nativeElement.draggable = false;
                this.dt.env.deleteValue('isDragging');
                this.dt.env.deleteValue('dndId');
                this.dt.env.deleteValue('ddClickDeviance');
            };
        /**
         * Assign CSS classes to the row to create an highlighting effect to capture current position
         * for the user.
         *
         * Based on the Drag direction we either apply
         * css class that creates a line on top or bottom.  Only for the dropInto functionality we
         * need to calculate some more to identify if we are really in the middle of the row.
         *
         * DropInto:
         * ---------
         *
         * Initially we captured a position (in mousedown) the distance to the middle of the row and
         * this we are using here with some threshold of 2 pixes so we dont have to be exactly on pixel
         * perfect.
         *
         * - let currentTrCenter = this.domUtils.elementDimensions(activeRow).height / 2;
         *      Read center of current row
         *
         * - let draggedTrCenter = event.offsetY + this.dt.env.getValue('ddClickDeviance');
         *      Read mouse coordinates relative to current row/td and add to it our deviation.
         *
         *
         * @param {?} event
         * @param {?} activeRow
         * @return {?}
         */
        DTDraggableRowDirective.prototype.markRowWithClass = /**
         * Assign CSS classes to the row to create an highlighting effect to capture current position
         * for the user.
         *
         * Based on the Drag direction we either apply
         * css class that creates a line on top or bottom.  Only for the dropInto functionality we
         * need to calculate some more to identify if we are really in the middle of the row.
         *
         * DropInto:
         * ---------
         *
         * Initially we captured a position (in mousedown) the distance to the middle of the row and
         * this we are using here with some threshold of 2 pixes so we dont have to be exactly on pixel
         * perfect.
         *
         * - let currentTrCenter = this.domUtils.elementDimensions(activeRow).height / 2;
         *      Read center of current row
         *
         * - let draggedTrCenter = event.offsetY + this.dt.env.getValue('ddClickDeviance');
         *      Read mouse coordinates relative to current row/td and add to it our deviation.
         *
         *
         * @param {?} event
         * @param {?} activeRow
         * @return {?}
         */
            function (event, activeRow) {
                this.clearClasses(activeRow);
                // Check if drag item is in the middle of other row
                var /** @type {?} */ currentTrCenter = this.domUtils.elementDimensions(activeRow).height / 2;
                var /** @type {?} */ draggedTrCenter = event.offsetY + this.dt.env.getValue('ddClickDeviance');
                if (this.dropIntoEnabled) {
                    this.inMiddle = Math.abs(currentTrCenter - draggedTrCenter) < 2;
                }
                if (this.inMiddle) {
                    activeRow.classList.add(DragDirection.Middle);
                }
                else {
                    activeRow.classList.add(this.dragDir);
                }
            };
        /**
         *
         * Drop target must be only another TR and it cannot be the element itself the one we are
         * dragging and it does not make sense to allow to drop to the same position we started from
         *
         * @param {?} event
         * @return {?}
         */
        DTDraggableRowDirective.prototype.isValidDropTarget = /**
         *
         * Drop target must be only another TR and it cannot be the element itself the one we are
         * dragging and it does not make sense to allow to drop to the same position we started from
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var /** @type {?} */ origInx = this.dt.env.getValue('dndId');
                var /** @type {?} */ siblingRow = this.dndRowIndex - origInx;
                return event.target.parentElement.tagName === 'TR' && this.dndRowIndex !== origInx &&
                    !(siblingRow === 1 && this.dragDir === DragDirection.Up) &&
                    !(siblingRow === -1 && this.dragDir === DragDirection.Down);
            };
        /**
         *  private
         *
         * @param {?} tr
         * @return {?}
         */
        DTDraggableRowDirective.prototype.clearClasses = /**
         *  private
         *
         * @param {?} tr
         * @return {?}
         */
            function (tr) {
                tr.classList.remove('dt-drag-row-top');
                tr.classList.remove('dt-drag-row-bottom');
                tr.classList.remove('dt-drag-row-both');
            };
        /**
         *  private
         *
         * @return {?}
         */
        DTDraggableRowDirective.prototype.dragDirToString = /**
         *  private
         *
         * @return {?}
         */
            function () {
                switch (this.dragDir) {
                    case DragDirection.Up:
                        return 'Up';
                    case DragDirection.Down:
                        return 'Down';
                    default:
                        return 'Not Sure';
                }
            };
        DTDraggableRowDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[dtDraggableRow]'
                    },] },
        ];
        /** @nocollapse */
        DTDraggableRowDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: Datatable2Component, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return Datatable2Component; }),] }] },
                { type: DomUtilsService },
                { type: core.NgZone }
            ];
        };
        DTDraggableRowDirective.propDecorators = {
            dropIntoEnabled: [{ type: core.Input }],
            dndRowIndex: [{ type: core.Input }]
        };
        return DTDraggableRowDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWDatatable2Module = (function () {
        function AWDatatable2Module() {
        }
        AWDatatable2Module.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            Datatable2Component,
                            DTWrapper,
                            DTColumn2Component,
                            DTHeaderComponent2,
                            DTDetailRowComponent,
                            DTDetailRowExpanderComponent,
                            DTMultiSelectColumnComponent,
                            DTSingleSelectColumnComponent,
                            DTDraggableRowDirective,
                            SetCellMaxWidthDirective
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            AWCoreComponentModule,
                            AWCheckBoxModule,
                            AWOutlineForModule,
                            AWRadioButtonModule,
                            AWInputFieldModule
                        ],
                        entryComponents: [
                            DTDetailRowExpanderComponent,
                            DTMultiSelectColumnComponent,
                            DTSingleSelectColumnComponent
                        ],
                        exports: [
                            Datatable2Component,
                            DTColumn2Component,
                            AWOutlineForModule,
                            DTHeaderComponent2,
                            DTDetailRowComponent
                        ],
                        providers: []
                    },] },
        ];
        return AWDatatable2Module;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * An confirmation header area.
     *
     * See {\@link ConfirmationComponent} for more explanation.
     */
    var ConfirmationHeaderComponent = (function () {
        function ConfirmationHeaderComponent() {
        }
        ConfirmationHeaderComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-confirmation-header',
                        template: '<ng-content></ng-content>'
                    },] },
        ];
        return ConfirmationHeaderComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * An confirmation header area.
     *
     * See {\@link ConfirmationComponent} for more explanation.
     */
    var ConfirmationFooterComponent = (function () {
        function ConfirmationFooterComponent() {
        }
        ConfirmationFooterComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-confirmation-footer',
                        template: '<ng-content></ng-content>'
                    },] },
        ];
        return ConfirmationFooterComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Confirmation Component is a specific version of the dialog where it supports confirm and cancel
     * functionality. It behaves like a dialog, is modal, and not closable by default.
     *
     * There are three types of popup.
     *   1.  a regular dialog box that has header, body and footer. It's the most customizable.
     *   2.  a confirmation box is similar to a dialog box but has accept and reject action buttons.
     *   3.  a overlay, which is a very basic popup with what you put inside.
     *       It doesn't have header and footer.
     *
     * There are two ways to use any popup component.
     *   1.  Either directly by using component, aw-dialog, aw-confirmation or aw-overlay
     *   2.  or the ModalService  service.open(<ConfirmationComponent>), service.close()
     *
     * Usage:
     *    1.  Using ModalService directly to display a modal popup. This usage is a quick way to show
     *        a confirmation to the user.
     *
     *          this.modalService.open<ConfirmationComponent>(ConfirmationComponent, {
     *                        title: 'Confirmation',
     *                        body: ` Are you sure ? `,
     *                        width: 300,
     *                        onConfirm: () => {
     *                              this.confirmAction();
     *                        },
     *                        onCancel: () => {
     *                              this.cancelAction();
     *                        }
     *           });
     *
     *
     *   2.   Use the component inside your template.
     *
     * \@Component({
     *                selector: 'aw-page' ,
     *                           template: `
     *                              <aw-confirmation [title]="'Confirmation'"
     *                                      [(visible)]="display"
     *                                     (onConfirm)="confirmAction()"
     *                                    (onCancel)="cancelAction()">
     *                                       <i class="sap-icon icon-alert"></i>
     *                                       Are you sure you want to delete your hard drive?
     *                            </aw-confirmation>
     *
     *                                   <aw-button [size]="'small'" (click)="open()">
     *                                       Open Confirmation
     *                                   </aw-button>
     *                  `
     *         export class MyPageComponent implements OnInit {
     *
     *                     display: boolean = false;
     *
     *                     confirmAction: string;
     *
     *                     constructor(private modalService: ModalService) {
     *                          super();
     *                       }
     *                     ngOnInit() { }
     *
     *                     open() {
     *                        this.display = true;
     *                     }
     *
     *                     confirmAction()  {
     *                        this.confirmAction = "confirmed";
     *                      }
     *
     *                      close() {
     *                         this.display = false;
     *                      }
     *
     *                      cancelAction() {
     *                          this.confirmAction = "canceled";
     *                      }
     *
     *       }
     *
     *
     */
    var ConfirmationComponent = (function (_super) {
        __extends(ConfirmationComponent, _super);
        function ConfirmationComponent(env) {
            var _this = _super.call(this, env) || this;
            _this.env = env;
            /**
             * support two way data binding on visible property.
             */
            _this.visibleChange = new core.EventEmitter();
            /**
             * Whether there's an x at the top right that makes the dialog closable.
             */
            _this.closable = false;
            /**
             * Event fired when dialog is closed.
             */
            _this.onClose = new core.EventEmitter();
            /**
             * Event fired when the dialog is opened.
             */
            _this.onOpen = new core.EventEmitter();
            /**
             * Fired when user clicked on confirm button.
             */
            _this.onConfirm = new core.EventEmitter();
            /**
             * Fired when user clicked on cancel button.
             */
            _this.onCancel = new core.EventEmitter();
            _this.width = 400;
            _this.height = 'auto';
            // Todo: internationalize.
            // Todo: internationalize.
            _this.confirmActionLabel = 'Confirm';
            _this.cancelActionLabel = 'Cancel';
            return _this;
        }
        /**
         * open confirmation.
         */
        /**
         * open confirmation.
         * @return {?}
         */
        ConfirmationComponent.prototype.open = /**
         * open confirmation.
         * @return {?}
         */
            function () {
                this.visible = true;
                this.onOpen.emit();
                this.visibleChange.emit(true);
            };
        /**
         * close confirmation.
         */
        /**
         * close confirmation.
         * @return {?}
         */
        ConfirmationComponent.prototype.close = /**
         * close confirmation.
         * @return {?}
         */
            function () {
                this.visible = false;
                this.onClose.emit();
                // Important to make sure change is set on parent binding.
                // Otherwise, the variable and dialog open/close state can be out
                // of sync and we wouldn't trigger change detection.
                this.visibleChange.emit(false);
            };
        /**
         * Does the confirmation have header content?
         */
        /**
         * Does the confirmation have header content?
         * @return {?}
         */
        ConfirmationComponent.prototype.hasHeader = /**
         * Does the confirmation have header content?
         * @return {?}
         */
            function () {
                return core$1.isPresent(this.header);
            };
        /**
         * Does the confirmation have footer content?
         */
        /**
         * Does the confirmation have footer content?
         * @return {?}
         */
        ConfirmationComponent.prototype.hasFooter = /**
         * Does the confirmation have footer content?
         * @return {?}
         */
            function () {
                return core$1.isPresent(this.footer);
            };
        /**
         * Confirm action.
         */
        /**
         * Confirm action.
         * @return {?}
         */
        ConfirmationComponent.prototype.confirm = /**
         * Confirm action.
         * @return {?}
         */
            function () {
                this.close();
                this.onConfirm.emit();
            };
        /**
         * Cancel action.
         */
        /**
         * Cancel action.
         * @return {?}
         */
        ConfirmationComponent.prototype.cancel = /**
         * Cancel action.
         * @return {?}
         */
            function () {
                this.close();
                this.onCancel.emit();
            };
        ConfirmationComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-confirmation',
                        template: "<aw-dialog [title]=\"title\" [(visible)]=\"visible\"\n           [modal]=\"true\" [closable]=\"closable\" [width]=\"width\" [height]=\"height\"\n           [styleClass]=\"styleClass\" [appendTo]=\"appendTo\" (onOpen)=\"open()\" (onClose)=\"close()\">\n\n    <aw-dialog-header *ngIf=\"hasHeader()\">\n        <ng-content select=\"aw-confirmation-header\"></ng-content>\n    </aw-dialog-header>\n\n    {{body}}\n    <ng-content></ng-content>\n\n\n    <aw-dialog-footer *ngIf=\"hasFooter(); else defaultFooter\">\n        <ng-content select=\"aw-confirmation-footer\"></ng-content>\n    </aw-dialog-footer>\n\n    <ng-template #defaultFooter>\n        <aw-dialog-footer>\n            <aw-button name=\"confirm\" [style]=\"'primary'\" (action)=\"confirm()\">\n                {{confirmActionLabel}}\n            </aw-button>\n\n            <aw-button name=\"cancel\" [style]=\"'secondary'\" (action)=\"cancel()\">\n                {{cancelActionLabel}}\n            </aw-button>\n\n        </aw-dialog-footer>\n    </ng-template>\n\n</aw-dialog>\n",
                        styles: [".confirmation-footer-separator{border-top:1px solid #d7d7d7;height:14px}"]
                    },] },
        ];
        /** @nocollapse */
        ConfirmationComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment }
            ];
        };
        ConfirmationComponent.propDecorators = {
            title: [{ type: core.Input }],
            body: [{ type: core.Input }],
            confirmActionLabel: [{ type: core.Input }],
            cancelActionLabel: [{ type: core.Input }],
            visibleChange: [{ type: core.Output }],
            closable: [{ type: core.Input }],
            appendTo: [{ type: core.Input }],
            onClose: [{ type: core.Output }],
            onOpen: [{ type: core.Output }],
            onConfirm: [{ type: core.Output }],
            onCancel: [{ type: core.Output }],
            header: [{ type: core.ContentChild, args: [ConfirmationHeaderComponent,] }],
            footer: [{ type: core.ContentChild, args: [ConfirmationFooterComponent,] }]
        };
        return ConfirmationComponent;
    }(ModalContainer));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWConfirmationModule = (function () {
        function AWConfirmationModule() {
        }
        AWConfirmationModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            ConfirmationComponent,
                            ConfirmationHeaderComponent,
                            ConfirmationFooterComponent
                        ],
                        imports: [
                            common.CommonModule,
                            AWCoreComponentModule,
                            AWDialogModule,
                            AWButtonModule
                        ],
                        entryComponents: [
                            ModalComponent,
                            ConfirmationComponent,
                            ConfirmationHeaderComponent,
                            ConfirmationFooterComponent
                        ],
                        exports: [
                            ConfirmationComponent,
                            ConfirmationHeaderComponent,
                            ConfirmationFooterComponent
                        ],
                        providers: []
                    },] },
        ];
        return AWConfirmationModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     *
     * Container panel providing scrolling functionality for its children. You can configure this
     * container to let it to scroll its content either horizontally, vertically or let the content
     * wrap.
     *
     *
     * Usage is pretty simple:
     *
     *  ### Example using horizontal scroll (default behavior):
     *
     *  ```
     *            <aw-scrollable>
     *                  <w-demo-card> Card 1</w-demo-card>
     *                  <w-demo-card> Card 2</w-demo-card>
     *                  <w-demo-card> Card 3</w-demo-card>
     *                  <w-demo-card> Card 4</w-demo-card>
     *                  <w-demo-card> Card 5</w-demo-card>
     *                  <w-demo-card> Card 6</w-demo-card>
     *                  <w-demo-card> Card 7</w-demo-card>
     *                  <w-demo-card> Card 8</w-demo-card>
     *                  <w-demo-card> Card 9</w-demo-card>
     *              </aw-scrollable>
     *
     *  ```
     *
     *  ### Example using vertical scroll:
     *
     *  ```
     *            <aw-scrollable [direction]="'vertical'" [height]="'40vh'">
     *                  <w-demo-card> Card 1</w-demo-card>
     *                  <w-demo-card> Card 2</w-demo-card>
     *                  <w-demo-card> Card 3</w-demo-card>
     *                  <w-demo-card> Card 4</w-demo-card>
     *                  <w-demo-card> Card 5</w-demo-card>
     *                  <w-demo-card> Card 6</w-demo-card>
     *                  <w-demo-card> Card 7</w-demo-card>
     *                  <w-demo-card> Card 8</w-demo-card>
     *                  <w-demo-card> Card 9</w-demo-card>
     *              </aw-scrollable>
     *
     * ```
     *
     *  ### Example scrolling is disabled and content wraps and centers:
     *
     *  ```
     *            <aw-scrollable [direction]="'none'" [alignment]="'center'">
     *                  <w-demo-card> Card 1</w-demo-card>
     *                  <w-demo-card> Card 2</w-demo-card>
     *                  <w-demo-card> Card 3</w-demo-card>
     *                  <w-demo-card> Card 4</w-demo-card>
     *                  <w-demo-card> Card 5</w-demo-card>
     *                  <w-demo-card> Card 6</w-demo-card>
     *                  <w-demo-card> Card 7</w-demo-card>
     *                  <w-demo-card> Card 8</w-demo-card>
     *                  <w-demo-card> Card 9</w-demo-card>
     *              </aw-scrollable>
     *  ```
     *
     * ### Height property:
     *
     * When using "horizontal scrolling" it set "flexbox-direction" to "row" where height
     * is set automatically based on its content. The height should be always 100% when using
     * this in parent container.
     *
     * If "vertical scrolling" is used you need to make sure that:
     *   - your parent container sets the boundaries with correctly set width and height
     *   otherwise it will use 100% of the viewport
     *   - if used as standalone you need to limit the height otherwise it will expand to 100% of
     *   the document
     *
     *
     *
     *
     */
    var ScrollableContainerComponent = (function (_super) {
        __extends(ScrollableContainerComponent, _super);
        function ScrollableContainerComponent(env, elementRef) {
            var _this = _super.call(this, env) || this;
            _this.env = env;
            _this.elementRef = elementRef;
            /**
             * Defines scrolling direction of the container meaning tells which overflow axies will be
             * disabled or enabled.
             *
             * Default value is "horizontal": Here we lock overflow-y and overflow-x set to auto.
             *
             * When scrolling direction is "vertical" please make sure you maintain correct height and
             * width.
             *
             */
            _this.direction = 'horizontal';
            /**
             * Defines how flexbox container items should be aligned. Default behavior is LEFT
             *
             */
            _this.alignment = 'left';
            _this.height = '100%';
            _this.width = '100%';
            return _this;
        }
        /**
         * @return {?}
         */
        ScrollableContainerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.initDefault();
            };
        /**
         * Make sure we re-initialize default when Input Bindings changes
         *
         */
        /**
         * Make sure we re-initialize default when Input Bindings changes
         *
         * @param {?} changes
         * @return {?}
         */
        ScrollableContainerComponent.prototype.ngOnChanges = /**
         * Make sure we re-initialize default when Input Bindings changes
         *
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                this.initDefault();
            };
        /**
         * Initialize default values and Calculates layout and alignment class. The reason for using
         * these utility classes is that we can change the behavior anytime as compared to using
         * directly [style.xxx] bindings.
         *
         * ### Direction flow class:
         *  - u-scrollable-f<direction>
         *
         * ### Alignment class:
         *  - u-scrollable-a<alignment>
         *
         * @return {?}
         */
        ScrollableContainerComponent.prototype.initDefault = /**
         * Initialize default values and Calculates layout and alignment class. The reason for using
         * these utility classes is that we can change the behavior anytime as compared to using
         * directly [style.xxx] bindings.
         *
         * ### Direction flow class:
         *  - u-scrollable-f<direction>
         *
         * ### Alignment class:
         *  - u-scrollable-a<alignment>
         *
         * @return {?}
         */
            function () {
                this.layoutClass = 'u-scrollable-fh';
                if (this.direction === 'vertical') {
                    this.layoutClass = 'u-scrollable-fv';
                }
                if (this.direction === 'vertical-row') {
                    this.layoutClass = 'u-scrollable-fv-row';
                }
                else if (this.direction === 'both') {
                    this.layoutClass = 'u-scrollable-fb';
                }
                else if (this.direction === 'none') {
                    this.layoutClass = 'u-scrollable-fn';
                }
                this.layoutClass += ' u-scrollable-a' + this.alignment.substring(0, 1);
                if (core$1.isPresent(this.styleClass)) {
                    this.layoutClass += " " + this.styleClass;
                }
                // make sure we default width and height to some value in case somebody passes null
                if (core$1.isBlank(this.width)) {
                    this.width = '100%';
                }
                if (core$1.isBlank(this.height)) {
                    this.height = '100%';
                }
            };
        /**
         * Tells if the horizontal scrollbar is visible
         *
         */
        /**
         * Tells if the horizontal scrollbar is visible
         *
         * @return {?}
         */
        ScrollableContainerComponent.prototype.hasHorizontalScroll = /**
         * Tells if the horizontal scrollbar is visible
         *
         * @return {?}
         */
            function () {
                var /** @type {?} */ scrollContainer = this.elementRef.nativeElement.querySelector('.w-scrollable');
                return scrollContainer.scrollWidth > scrollContainer.clientWidth;
            };
        /**
         * Tells if the vertical scrollbar is visible
         *
         */
        /**
         * Tells if the vertical scrollbar is visible
         *
         * @return {?}
         */
        ScrollableContainerComponent.prototype.hasVerticalScroll = /**
         * Tells if the vertical scrollbar is visible
         *
         * @return {?}
         */
            function () {
                var /** @type {?} */ scrollContainer = this.elementRef.nativeElement.querySelector('.w-scrollable');
                return scrollContainer.scrollHeight > scrollContainer.clientHeight;
            };
        ScrollableContainerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-scrollable',
                        template: "<div class=\"w-scrollable\" [ngClass]=\"layoutClass\" [style.width]=\"width\"\n     [style.height]=\"height\">\n    <ng-content></ng-content>\n</div>\n",
                        styles: [".w-scrollable{display:flex;display:-webkit-flex;backface-visibility:hidden;-webkit-backface-visibility:hidden;will-change:overflow}.w-scrollable /deep/>*{flex:0 0 auto;-webkit-flex:0 0 auto;-ms-flex:0 0 auto;margin:10px}.u-scrollable-fh{flex-flow:row nowrap;overflow-x:auto;overflow-y:hidden}.u-scrollable-fv{flex-flow:column nowrap;overflow-x:hidden;overflow-y:auto}.u-scrollable-fb{flex-flow:row nowrap;overflow-x:auto;overflow-y:auto}.u-scrollable-fv-row{flex-flow:row wrap;overflow-x:hidden;overflow-y:auto}.u-scrollable-fn{flex-flow:row wrap}.u-scrollable-al{justify-content:flex-start;-webkit-justify-content:flex-start}.u-scrollable-ar{justify-content:flex-end;-webkit-justify-content:flex-end}.u-scrollable-ac{justify-content:center;-webkit-justify-content:center}.u-scrollable-aj,.u-scrollable-aj-around{justify-content:space-between;-webkit-justify-content:space-between}"]
                    },] },
        ];
        /** @nocollapse */
        ScrollableContainerComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: core.ElementRef }
            ];
        };
        ScrollableContainerComponent.propDecorators = {
            direction: [{ type: core.Input }],
            alignment: [{ type: core.Input }]
        };
        return ScrollableContainerComponent;
    }(BaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWScrollableContainerModule = (function () {
        function AWScrollableContainerModule() {
        }
        AWScrollableContainerModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            ScrollableContainerComponent
                        ],
                        imports: [
                            common.CommonModule
                        ],
                        entryComponents: [
                            ScrollableContainerComponent
                        ],
                        exports: [
                            ScrollableContainerComponent
                        ],
                        providers: []
                    },] },
        ];
        return AWScrollableContainerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ LB_CONTROL_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return ListComponent; }),
        multi: true
    };
    /**
     *
     * The List component represent a structure which contains a list of selectable items. Items
     * selection can be configured in single-selection, multi-selection or multi-selection with visible
     * checkboxes mode.
     * In addition it can display data inside 3 zones LEFT, MIDDLE and RIGHT in order to provide
     * easy way for application developer to layout its own custom content or even change out of box
     * behavior.
     *
     *
     *  ### Examples
     *
     *  1. Render simple single selection list
     *
     *  ```html
     *
     *      <aw-list [list]="list"></aw-list>
     *
     *  ```
     *  2. Render list - multi selection with custom RIGHT content to show a CheckMark when item
     *  is selected
     *
     *  ```html
     *
     *   <aw-list #awlist [list]="list"
     *                       height="150px"
     *                       width="250px"
     *                       [selectionMode]="'multi'">
     *
     *                  <ng-template #right let-item>
     *
     *                      <span class="sap-icon"
     *                            [ngClass]="{'icon-accept': awlist.pListBox.isSelected(item),
     *                            '': !awlist.pListBox.isSelected(item)}">
     *
     *                      </span>
     *                  </ng-template>
     *   </aw-list>
     *
     *  ```
     *
     * 3. Render list - multi selection with visible checkboxes and custom MIDDLE content to change
     *  the way item name is rendered
     *
     *
     *
     *  ```html
     *
     *   <aw-list [list]="list" height="180px"
     *                       width="200px"
     *                       [selection]="selection"
     *                       [selectionMode]="'multiWithCheckbox'">
     *
     *                  <ng-template #middle let-item>
     *                      XX-{{item.value}}
     *                  </ng-template>
     *    </aw-list>
     *
     *  ```
     *
     *
     *
     */
    var ListComponent = (function (_super) {
        __extends(ListComponent, _super);
        function ListComponent(env, parentContainer) {
            var _this = _super.call(this, env, parentContainer) || this;
            _this.env = env;
            _this.parentContainer = parentContainer;
            /**
             * Component recognizes 3 modes: single, multi, multi with visible checkboxes
             */
            _this.selectionMode = 'single';
            /**
             * Don't render Listbox border. Used for embedding this inside other components
             *
             */
            _this.borderless = false;
            /**
             * Triggered when we double click on the list Item
             *
             */
            _this.action = new core.EventEmitter();
            /**
             * Event fired when user select a item
             *
             */
            _this.onSelection = new core.EventEmitter();
            _this.listStyle = {};
            _this.isMultiple = false;
            _this.showCheckbox = false;
            return _this;
        }
        /**
         * @return {?}
         */
        ListComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                this.isMultiple = this.selectionMode === 'multi' ||
                    this.selectionMode === 'multiWithCheckbox';
                this.showCheckbox = this.selectionMode === 'multiWithCheckbox';
                // cannot have both either we use field to get display value or valueTransformer
                if (core$1.isPresent(this.field) && core$1.isPresent(this.valueTransformer)) {
                    throw new Error('You can have either [field] or [valueTransformer].');
                }
                if (core$1.isPresent(this.list)) {
                    this.initList();
                }
                else {
                    throw new Error('Missing [list] binding.');
                }
                // Also add overflowY to make sure it can scroll and does not expand based on its content
                if (core$1.isPresent(this.height)) {
                    this.listStyle['height'] = this.height;
                    this.listStyle['overflow-y'] = 'auto';
                }
                if (core$1.isPresent(this.width)) {
                    this.listStyle['width'] = this.width;
                }
                if (this.borderless) {
                    this.listStyle['border-color'] = 'transparent';
                }
                if (this.isStandalone) {
                    _super.prototype.registerFormControl.call(this, this.selection);
                    if (core$1.isBlank(this.selection)) {
                        this.selection = this.formControl.value;
                    }
                }
            };
        /**
         *
         * Since we are using <aw-checkbox> we need to have custom handling both when clicking on the
         * checkbox as well as item text.
         *
         *
         */
        /**
         *
         * Since we are using <aw-checkbox> we need to have custom handling both when clicking on the
         * checkbox as well as item text.
         *
         *
         * @param {?} event
         * @param {?} item
         * @param {?} checkbox
         * @return {?}
         */
        ListComponent.prototype.itemClicked = /**
         *
         * Since we are using <aw-checkbox> we need to have custom handling both when clicking on the
         * checkbox as well as item text.
         *
         *
         * @param {?} event
         * @param {?} item
         * @param {?} checkbox
         * @return {?}
         */
            function (event, item, checkbox) {
                if (core$1.isPresent(checkbox)) {
                    this.pListBox.onCheckboxClick(event, item);
                }
                else if (core$1.isPresent(this.pListBox)) {
                    this.pListBox.onOptionClick(event, item);
                    event.stopPropagation();
                    event.preventDefault();
                }
            };
        /**
         * Internal
         *
         */
        /**
         * Internal
         *
         * @return {?}
         */
        ListComponent.prototype.hasRightTempl = /**
         * Internal
         *
         * @return {?}
         */
            function () {
                return core$1.isPresent(this.rZoneTempl);
            };
        /**
         * @return {?}
         */
        ListComponent.prototype.hasLeftTempl = /**
         * @return {?}
         */
            function () {
                return core$1.isPresent(this.lZoneTempl);
            };
        /**
         * @return {?}
         */
        ListComponent.prototype.hasMiddleTempl = /**
         * @return {?}
         */
            function () {
                return core$1.isPresent(this.mZoneTempl);
            };
        /**
         *
         * Triggered by p-listbox component when item is selected. When state is managed internally
         * we also update FormControl model.
         *
         */
        /**
         *
         * Triggered by p-listbox component when item is selected. When state is managed internally
         * we also update FormControl model.
         *
         * @param {?} event
         * @return {?}
         */
        ListComponent.prototype.onItemSelected = /**
         *
         * Triggered by p-listbox component when item is selected. When state is managed internally
         * we also update FormControl model.
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (core$1.isBlank(event.value)) {
                    return;
                }
                this.onSelection.emit(event.value);
                if (this.isStandalone) {
                    this.formControl.setValue(event.value, { emitEvent: true });
                }
                this.onModelChanged(event.value);
            };
        /**
         * Internal. Please see ControlValueAccessor
         *
         */
        /**
         * Internal. Please see ControlValueAccessor
         *
         * @param {?} value
         * @return {?}
         */
        ListComponent.prototype.writeValue = /**
         * Internal. Please see ControlValueAccessor
         *
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (!core$1.equals(value, this.selection)) {
                    this.selection = value;
                    if (this.isStandalone) {
                        this.formControl.setValue(value);
                    }
                }
            };
        /**
         * Translates external form of the list into PrimeNG expected format where it uses
         * SelectionItem interface
         * @return {?}
         */
        ListComponent.prototype.initList = /**
         * Translates external form of the list into PrimeNG expected format where it uses
         * SelectionItem interface
         * @return {?}
         */
            function () {
                var _this = this;
                if (core$1.isPresent(this.list)) {
                    this.internalList = this.list.map(function (item) {
                        return { label: _this.displayValue(item), value: item };
                    });
                }
            };
        /**
         *  Generates label value for the list box.
         *
         * @param {?} item
         * @return {?}
         */
        ListComponent.prototype.displayValue = /**
         *  Generates label value for the list box.
         *
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (core$1.isBlank(item)) {
                    return '';
                }
                var /** @type {?} */ val = item.toString();
                if (core$1.isPresent(this.field)) {
                    val = item[this.field];
                }
                else if (core$1.isPresent(this.valueTransformer)) {
                    val = this.valueTransformer(item);
                }
                return val;
            };
        ListComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-list',
                        template: "<p-listbox #listbox [options]=\"internalList\" [multiple]=\"isMultiple\" [checkbox]=\"showCheckbox\"\n           [(ngModel)]=\"selection\" [disabled]=\"disabled\" [style]=\"listStyle\" [showToggleAll]=\"false\"\n           (onChange)=\"onItemSelected($event)\" (onDblClick)=\"action.emit($event.value)\"\n           [styleClass]=\"styleClass\">\n\n\n    <ng-template let-item pTemplate=\"item\">\n        <div class=\"w-li-wrapper\">\n            <div class=\"w-li-left\">\n                <ng-template *ngIf=\"hasLeftTempl(); else defaultLeft\"\n                             [ngTemplateOutlet]=\"lZoneTempl\"\n                             [ngTemplateOutletContext]=\"{$implicit: item}\"></ng-template>\n\n\n                <ng-template #defaultLeft>\n                    <aw-checkbox #check *ngIf=\"isMultiple && showCheckbox\"\n                                 [isStandalone]=\"false\"\n                                 [value]=\"listbox.isSelected(item)\"\n                                 type=\"action\"\n                                 (action)=\"itemClicked($event, item, check)\">\n                    </aw-checkbox>\n                </ng-template>\n            </div>\n\n            <div class=\"w-li-middle\" (click)=\"itemClicked($event, item, null)\">\n\n                <ng-template *ngIf=\"hasMiddleTempl(); else defaultMiddle\"\n                             [ngTemplateOutlet]=\"mZoneTempl\"\n                             [ngTemplateOutletContext]=\"{$implicit: item}\"></ng-template>\n\n                <ng-template #defaultMiddle>\n                    {{item.label}}\n                </ng-template>\n\n            </div>\n\n            <div class=\"w-li-right\" *ngIf=\"hasRightTempl()\">\n                <ng-template [ngTemplateOutlet]=\"rZoneTempl\"\n                             [ngTemplateOutletContext]=\"{$implicit: item}\">\n                </ng-template>\n\n            </div>\n        </div>\n    </ng-template>\n</p-listbox>\n",
                        styles: ["::ng-deep .ui-listbox-item>.ui-chkbox{display:none}::ng-deep .ui-listbox-item .ui-chkbox{margin-right:1em}.w-li-wrapper{display:flex;align-items:flex-start}.w-li-wrapper .w-li-left,.w-li-wrapper .w-li-right{flex:0 1 auto}.w-li-wrapper .w-li-middle{flex:1 1 auto}"],
                        providers: [
                            LB_CONTROL_VALUE_ACCESSOR,
                            { provide: BaseFormComponent, useExisting: core.forwardRef(function () { return ListComponent; }) }
                        ]
                    },] },
        ];
        /** @nocollapse */
        ListComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment },
                { type: BaseFormComponent, decorators: [{ type: core.SkipSelf }, { type: core.Optional }, { type: core.Inject, args: [core.forwardRef(function () { return BaseFormComponent; }),] }] }
            ];
        };
        ListComponent.propDecorators = {
            list: [{ type: core.Input }],
            selection: [{ type: core.Input }],
            selectionMode: [{ type: core.Input }],
            valueTransformer: [{ type: core.Input }],
            field: [{ type: core.Input }],
            borderless: [{ type: core.Input }],
            action: [{ type: core.Output }],
            onSelection: [{ type: core.Output }],
            pListBox: [{ type: core.ViewChild, args: ['listbox',] }],
            lZoneTempl: [{ type: core.ContentChild, args: ['left',] }],
            mZoneTempl: [{ type: core.ContentChild, args: ['middle',] }],
            rZoneTempl: [{ type: core.ContentChild, args: ['right',] }]
        };
        return ListComponent;
    }(BaseFormComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWListModule = (function () {
        function AWListModule() {
        }
        AWListModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            ListComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.ReactiveFormsModule,
                            forms.FormsModule,
                            primeng.ListboxModule,
                            AWCheckBoxModule
                        ],
                        entryComponents: [
                            ListComponent
                        ],
                        exports: [
                            ListComponent,
                            forms.ReactiveFormsModule,
                            forms.FormsModule
                        ],
                        providers: []
                    },] },
        ];
        return AWListModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var WizardProgressComponent = (function () {
        function WizardProgressComponent() {
            this.currentStep = 0;
            this.stepChanged = new core.EventEmitter();
            this.totalSteps = 0;
        }
        /**
         * @return {?}
         */
        WizardProgressComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.steps) {
                    var /** @type {?} */ currentIndex = this.steps.indexOf(this.steps.filter(function (step) { return step.current; })[0]);
                    this.totalSteps = this.steps.length;
                    this.setCurrentStep(~currentIndex ? currentIndex : 0);
                }
            };
        /**
         * @param {?=} index
         * @return {?}
         */
        WizardProgressComponent.prototype.setCurrentStep = /**
         * @param {?=} index
         * @return {?}
         */
            function (index) {
                if (index === void 0) {
                    index = 0;
                }
                this.steps[index].current = true;
                this.currentStep = index;
                this.stepChanged.emit({ current: this.currentStep });
            };
        /**
         * @param {?} index
         * @return {?}
         */
        WizardProgressComponent.prototype.goToStep = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                if (!this.steps[index].complete) {
                    return;
                }
                var /** @type {?} */ currentIndex = this.steps.indexOf(this.steps.filter(function (step) { return step.current; })[0]);
                this.steps[currentIndex].current = false;
                this.setCurrentStep(index);
            };
        WizardProgressComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-wizard-progress',
                        template: "<div class=\"step-indicator\">{{currentStep + 1}}/{{totalSteps}}</div>\n<div class=\"aw-step-progress\">\n    <div class=\"aw-step-progress__item\" *ngFor=\"let step of steps; let i = index;\"\n         [ngClass]=\"{ 'aw-step-progress__item--is-active': step.current === true }\"\n         (click)=\"goToStep(i);\">\n    </div>\n</div>\n",
                        styles: [":host{display:block}.step-indicator{width:100%;text-align:center;font-size:14px;font-weight:600;padding-bottom:.3rem}.aw-step-progress{display:flex;flex-direction:row;padding:.2rem;justify-content:center}.aw-step-progress__item{cursor:pointer;list-style:none;width:1.2rem;margin:0 .2rem;border-radius:.3rem;height:.4rem;background-color:#eaeaea}.aw-step-progress__item:last-child{margin-right:0}.aw-step-progress__item:first-child{margin-left:0}.aw-step-progress__item--is-active{background-color:#09a7af}"]
                    },] },
        ];
        /** @nocollapse */
        WizardProgressComponent.ctorParameters = function () { return []; };
        WizardProgressComponent.propDecorators = {
            steps: [{ type: core.Input }],
            currentStep: [{ type: core.Input }],
            stepChanged: [{ type: core.Output }]
        };
        return WizardProgressComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var WizardProgressModule = (function () {
        function WizardProgressModule() {
        }
        WizardProgressModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            WizardProgressComponent
                        ],
                        imports: [
                            common.CommonModule
                        ],
                        entryComponents: [
                            WizardProgressComponent
                        ],
                        exports: [
                            WizardProgressComponent
                        ],
                        providers: []
                    },] },
        ];
        return WizardProgressModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Renders a Toggle Switch
     *
     * ### Example
     *
     * ```typescript
     *
     * \@Component({
     *          selector: 'myToggleSection' ,
     *          template: '<aw-toggle [model]="inputValue" [labelText]="labelText" >
     *              </aw-toggle>'
     *      })
     *      export class MyNoteComponent
     *      {
     *          inputValue: boolean = false;
     *          labelText: string = 'my label';
     *      }
     *
     * ```
     */
    var ToggleSwitchComponent = (function (_super) {
        __extends(ToggleSwitchComponent, _super);
        function ToggleSwitchComponent(env) {
            var _this = _super.call(this, env) || this;
            _this.env = env;
            /**
             * toggle model
             */
            _this.model = false;
            return _this;
        }
        /**
         * click handler for toggle
         */
        /**
         * click handler for toggle
         * @return {?}
         */
        ToggleSwitchComponent.prototype.changeHandler = /**
         * click handler for toggle
         * @return {?}
         */
            function () {
                this.model = !this.model;
            };
        ToggleSwitchComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-toggle',
                        template: "<div class=\"w-toggle\">\n    <label class=\"w-toggle__label\" *ngIf=\"labelText\">\n        {{ labelText }}\n    </label>\n    <div class=\"slider\" (click)=\"changeHandler()\">\n        <div class=\"slider__button\" [ngClass]=\"{ 'slider__button--is-active': model === true }\"></div>\n    </div>\n</div>\n",
                        styles: [":host{display:block}.w-toggle input{display:none}.w-toggle__label{color:#999;margin-right:.2rem}.w-toggle .slider{position:relative;height:.6rem;width:1.5rem;background-color:#d8d8d8;border-radius:.9rem;display:inline-block;border-top:1px solid #7e7e7e;border-left:1px solid #b5b5b5;border-right:1px solid #b5b5b5}.w-toggle .slider__button{left:-.1rem;transition:left .1s ease-out;cursor:pointer;position:absolute;height:1rem;width:1rem;border-radius:50%;background-color:#eaeaea;top:-.2rem}.w-toggle .slider__button--is-active{left:calc(100% - .8rem);background-color:#09a7af}"]
                    },] },
        ];
        /** @nocollapse */
        ToggleSwitchComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment }
            ];
        };
        ToggleSwitchComponent.propDecorators = {
            model: [{ type: core.Input }],
            labelText: [{ type: core.Input }]
        };
        return ToggleSwitchComponent;
    }(BaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ToggleSwitchModule = (function () {
        function ToggleSwitchModule() {
        }
        ToggleSwitchModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            ToggleSwitchComponent
                        ],
                        imports: [
                            common.CommonModule
                        ],
                        entryComponents: [
                            ToggleSwitchComponent
                        ],
                        exports: [
                            ToggleSwitchComponent
                        ],
                        providers: []
                    },] },
        ];
        return ToggleSwitchModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Overlay Component is a simple version of the dialog where there's only content.
     * Overlay will appear at the position where the action performed trigger an overlay.
     *
     * There are three types of popup.
     *   1.  a regular dialog box that has header, body and footer. It's the most customizable.
     *   2.  a confirmation box is similar to a dialog box but has accept and reject action buttons.
     *   3.  a overlay, which is a very basic popup with what you put inside.
     *       It doesn't have header and footer.
     *
     * There are two ways to use any popup component.
     *   1.  Either directly by using component, aw-dialog, aw-confirmation or aw-overlay
     *   2.  or the ModalService  service.open(<OverlayComponent>), service.close()
     *
     * Usage:
     *    1.  Using ModalService directly to display a modal popup. The usage is a little tricky
     *        because angular currently doesn't support dynamic content projection.
     *
     *          let overlay = this.modalService.open<OverlayComponent>(OverlayComponent, {});
     *
     *            // Add content. There's not support for dynamic content projection yet.
     *            // So have add content directly.
     *            // This is probably not the best way.
     *          overlay.instance.overlay.el.nativeElement.querySelector(".ui-overlaypanel-content")
     *               .innerHTML = `<img style='width:300px;' src="sales.png" alt="Sales Chart" />`;
     *
     *          // delay the opening after ng lifecycle has been initialized.
     *          setTimeout(() => { overlay.instance.open(event); }, 1);
     *
     *
     *   2.   Use the component inside your template.
     *
     * \@Component({
     *                selector: 'aw-page' ,
     *                           template: `
     *                                <aw-overlay #overlay (onOpen)="overlayAction='open'"
     *                                                     (onClose)="overlayAction='close'">
     *                                      <img src="sales.png" alt="Chart"/>
     *                                </aw-overlay>
     *
     *                                <aw-button [size]="'small'" (click)="overlay.open($event)">
     *                                    Open Overlay
     *                                </aw-button>
     *                  `
     *         export class MyPageComponent implements OnInit {
     *
     *                     overlayAction: string;
     *
     *                     constructor(private modalService: ModalService) {
     *                          super();
     *                       }
     *                     ngOnInit() { }
     *       }
     *
     *
     */
    var OverlayComponent = (function (_super) {
        __extends(OverlayComponent, _super);
        function OverlayComponent(env) {
            var _this = _super.call(this, env) || this;
            _this.env = env;
            /**
             * Enables hide overlay when outside is clicked.
             */
            _this.dismissable = true;
            /**
             * displays the close icon 'x' at top of right corner.
             */
            _this.showCloseIcon = false;
            /**
             * Event fired when overlay is closed.
             */
            _this.onClose = new core.EventEmitter();
            /**
             * Event fired when the overlay is opened.
             */
            _this.onOpen = new core.EventEmitter();
            return _this;
        }
        /**
         * @return {?}
         */
        OverlayComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * Open Overlay
         * @param event
         */
        /**
         * Open Overlay
         * @param {?} event
         * @return {?}
         */
        OverlayComponent.prototype.open = /**
         * Open Overlay
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.overlay.show(event);
                this.onOpened(null);
            };
        /**
         * Close Overlay
         */
        /**
         * Close Overlay
         * @return {?}
         */
        OverlayComponent.prototype.close = /**
         * Close Overlay
         * @return {?}
         */
            function () {
                this.overlay.hide();
            };
        /**
         * toggle open and close.
         * @param event
         */
        /**
         * toggle open and close.
         * @param {?} event
         * @return {?}
         */
        OverlayComponent.prototype.toggle = /**
         * toggle open and close.
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.overlay.toggle(event);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        OverlayComponent.prototype.onOpened = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.onOpen.emit(event);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        OverlayComponent.prototype.onClosed = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.onClose.emit(event);
            };
        OverlayComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-overlay',
                        template: "<p-overlayPanel [dismissable]=\"dismissable\" [showCloseIcon]=\"showCloseIcon\"\n                [styleClass]=\"styleClass\" [appendTo]=\"appendTo\"\n                (onAfterHide)=\"onClosed($event)\">\n    <ng-content></ng-content>\n</p-overlayPanel>\n",
                        styles: ["::ng-deep .ui-overlaypanel{border:1px solid #d7d7d7;box-shadow:0 2px 4px 0 rgba(0,0,0,.2)}::ng-deep .ui-overlaypanel-content{padding:2em 3.4em .6em 1.43em}::ng-deep .ui-overlaypanel-close{border-radius:0;top:.5em;right:.5em}::ng-deep .ui-overlaypanel-close.ui-state-default{border:none}"]
                    },] },
        ];
        /** @nocollapse */
        OverlayComponent.ctorParameters = function () {
            return [
                { type: core$1.Environment }
            ];
        };
        OverlayComponent.propDecorators = {
            dismissable: [{ type: core.Input }],
            showCloseIcon: [{ type: core.Input }],
            appendTo: [{ type: core.Input }],
            onClose: [{ type: core.Output }],
            onOpen: [{ type: core.Output }],
            overlay: [{ type: core.ViewChild, args: [primeng.OverlayPanel,] }]
        };
        return OverlayComponent;
    }(ModalContainer));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @enum {number} */
    var HCCardPosition = {
        top: 0,
        bottom: 1,
        none: 2,
    };
    HCCardPosition[HCCardPosition.top] = "top";
    HCCardPosition[HCCardPosition.bottom] = "bottom";
    HCCardPosition[HCCardPosition.none] = "none";
    /** @enum {number} */
    var HCCardAlignment = {
        left: 0,
        paddedLeft: 1,
        right: 2,
        paddedRight: 3,
        default: 4,
    };
    HCCardAlignment[HCCardAlignment.left] = "left";
    HCCardAlignment[HCCardAlignment.paddedLeft] = "paddedLeft";
    HCCardAlignment[HCCardAlignment.right] = "right";
    HCCardAlignment[HCCardAlignment.paddedRight] = "paddedRight";
    HCCardAlignment[HCCardAlignment.default] = "default";
    /**
     * Maps position to styles that are applied to the Card container. This is just to make it easier
     * as we are working with enumerations and have already enum type.
     *
     * u-hc-arrow-b: Arrow will appear at the bottom
     * u-hc-arrow-t: Arrow will appear at the top
     *
     * u-hc-shadow-t: Border shadow will appear at the top
     * u-hc-shadow-b: Border shadow will appear at the bottom
     */
    var /** @type {?} */ PositionToStyle = {
        top: ' w-hc-panel-arrow u-hc-arrow-b u-hc-shadow-t',
        bottom: ' w-hc-panel-arrow u-hc-arrow-t u-hc-shadow-b',
        none: ''
    };
    /**
     *
     * Maps aligned Card container to custom styles in order to apply correct arrow
     *
     * -ll: Stands for Large Left (large: there is plenty of space around )
     * -lr: Stands for Large right
     * -sl: Stands for Small left (Small and resized screen where we try to fit card container
     * somewhere in between)
     * -sr: Stands for Large right
     *
     */
    var /** @type {?} */ AlignmentToStyle = {
        left: ' u-hc-arrow-ll',
        right: ' u-hc-arrow-lr',
        paddedLeft: ' u-hc-arrow-sl',
        paddedRight: ' u-hc-arrow-sr',
        default: ' u-hc-arrow-ll',
    };
    /**
     * The HoverCard components adds hover behavior to text, the specified content is loaded
     * on the left or right side of the element.
     *
     * Todo: extends so we can wrap any element and any element can be triggering this. Not only
     * linkTitle
     *
     *
     * ### Example:
     *
     * ```
     *
     *   <aw-hover-card [linkTitle]="'Frank kolar'">
     *       <h3>My Card Title</h3>
     *       <div>
     *
     *           This is my contents
     *
     *       </div>
     *
     *
     *    </aw-hover-card>
     * ```
     *
     * By default there is [forceClose]=true which forces the user to use X close icon
     *
     *
     *
     */
    var HoverCardComponent = (function (_super) {
        __extends(HoverCardComponent, _super);
        function HoverCardComponent(elem, env, cd) {
            var _this = _super.call(this, env) || this;
            _this.elem = elem;
            _this.env = env;
            _this.cd = cd;
            /**
             * Should we keep the hover card open and force user to manually close
             *
             */
            _this.forceClose = true;
            /**
             *
             * This current workaround until we find better solution. PrimeNG overlays operates within
             * its relative element so if the overlay is wrapped inside some other relative container
             * the overlay content is croped by its parent and content is not visible.
             *
             * They have [appendTo] binding which we need to use for this purpose
             *
             */
            _this.appendContentToBody = true;
            /**
             *
             * Internal style class to use to apply additional styles when it needs to show a Arrow on the
             * card
             *
             */
            _this.arrowClass = '';
            _this.opening = false;
            _this.currrentPosition = HCCardPosition.none;
            return _this;
        }
        /**
         * @return {?}
         */
        HoverCardComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                core$1.assert(core$1.isPresent(this.linkTitle), 'You must provide [linkTitle] binding !');
                // make sure there is open HC when we start new component
                this.env.deleteValue('hc-open');
                if (!this.appendContentToBody) {
                    this.appendTo = null;
                }
            };
        /**
         * As of Angular 5 we have to introduce this ViewChecked as PrimeNG does final calculation
         * during this phase.
         *
         * So now its broken down into two parts:
         *   - Apply class styles
         *   - Position it.
         */
        /**
         * As of Angular 5 we have to introduce this ViewChecked as PrimeNG does final calculation
         * during this phase.
         *
         * So now its broken down into two parts:
         *   - Apply class styles
         *   - Position it.
         * @return {?}
         */
        HoverCardComponent.prototype.ngAfterViewChecked = /**
         * As of Angular 5 we have to introduce this ViewChecked as PrimeNG does final calculation
         * during this phase.
         *
         * So now its broken down into two parts:
         *   - Apply class styles
         *   - Position it.
         * @return {?}
         */
            function () {
                if (this.opening) {
                    var /** @type {?} */ container = this.awOverlay.overlay.container;
                    var /** @type {?} */ cntRect = container.getBoundingClientRect();
                    if (this.currrentPosition !== HCCardPosition.none) {
                        this.adjustCard(container, cntRect, this.awOverlay.overlay);
                    }
                    else {
                        this.arrowClass = '';
                    }
                    this.opening = false;
                }
            };
        /**
         * Init elements BoundingClientRect that we use for calculation
         *
         */
        /**
         * Init elements BoundingClientRect that we use for calculation
         *
         * @return {?}
         */
        HoverCardComponent.prototype.initElements = /**
         * Init elements BoundingClientRect that we use for calculation
         *
         * @return {?}
         */
            function () {
                var /** @type {?} */ titleElem = this.elem.nativeElement.querySelector('.w-hc-title');
                var /** @type {?} */ triggerElem = this.elem.nativeElement.querySelector('.sap-icon');
                this.titleAreaRect = titleElem.getBoundingClientRect();
                this.trigRect = triggerElem.getBoundingClientRect();
                this.trigIconMiddle = this.trigRect.width / 2;
            };
        /**
         *
         * Fires when user mouse over the triggering icon and opens up overlay component. To make sure
         * only one Card is opened at the time it uses Environment to save extra information for it
         *
         *
         */
        /**
         *
         * Fires when user mouse over the triggering icon and opens up overlay component. To make sure
         * only one Card is opened at the time it uses Environment to save extra information for it
         *
         *
         * @param {?} event
         * @return {?}
         */
        HoverCardComponent.prototype.openCard = /**
         *
         * Fires when user mouse over the triggering icon and opens up overlay component. To make sure
         * only one Card is opened at the time it uses Environment to save extra information for it
         *
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (core$1.isPresent(this.awOverlay) && !this.env.hasValue('hc-open')) {
                    this.awOverlay.open(event);
                    this.env.setValue('hc-open', true);
                }
            };
        /**
         *
         * Fired at the end of the opening cycle when all is initialized and the card is about to
         * fade in.
         *
         * This method first simulates displaying card by setting display:block and
         * domHandler.absolutePosition so we can read dimensions and then later on position the card
         * accordingly.
         *
         */
        /**
         *
         * Fired at the end of the opening cycle when all is initialized and the card is about to
         * fade in.
         *
         * This method first simulates displaying card by setting display:block and
         * domHandler.absolutePosition so we can read dimensions and then later on position the card
         * accordingly.
         *
         * @param {?} event
         * @return {?}
         */
        HoverCardComponent.prototype.cardOpened = /**
         *
         * Fired at the end of the opening cycle when all is initialized and the card is about to
         * fade in.
         *
         * This method first simulates displaying card by setting display:block and
         * domHandler.absolutePosition so we can read dimensions and then later on position the card
         * accordingly.
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var /** @type {?} */ container = this.awOverlay.overlay.container;
                var /** @type {?} */ target = this.awOverlay.overlay.target;
                this.openForAdjustments(container);
                // pre-run positioning so we can calculate new coordinates
                this.awOverlay.overlay.domHandler.absolutePosition(container, target);
                var /** @type {?} */ cntRect = container.getBoundingClientRect();
                this.currrentPosition = this.positionForCard(container, cntRect);
                this.applyStyleClass(container, cntRect, this.awOverlay.overlay);
                this.closeForAdjustments(container);
                this.opening = true;
            };
        /**
         *
         * When card is closed we need to release it and delete all the references from Environment
         *
         *
         */
        /**
         *
         * When card is closed we need to release it and delete all the references from Environment
         *
         *
         * @param {?} event
         * @return {?}
         */
        HoverCardComponent.prototype.cardClosed = /**
         *
         * When card is closed we need to release it and delete all the references from Environment
         *
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.env.deleteValue('hc-open');
            };
        /**
         *
         * Applies style.TOP and style.LEFT to the container in order to reposition it and add
         * extra arrow.
         *
         * First based on the initial position we apply style.TOP and depending if its on the
         * top or bottom we apply either -HoverCardComponent.ArrowPad or +HoverCardComponent.ArrowPad.
         *
         * Then for positioning horizontally we use two types.
         *  - When there is allot of space the arrow is 25% from the edge
         *
         *    -----^------------   or       -----------^----
         *
         *
         *  - When there is less or none space we have only 10% far away form the edge
         *
         *    --^------------   or       -----------^--
         *
         *  Once we pick the correct positioning (25%, 10%) we need to recalculate and shift the card
         *  either to the left or right.
         *
         */
        /**
         *
         * Applies style.TOP and style.LEFT to the container in order to reposition it and add
         * extra arrow.
         *
         * First based on the initial position we apply style.TOP and depending if its on the
         * top or bottom we apply either -HoverCardComponent.ArrowPad or +HoverCardComponent.ArrowPad.
         *
         * Then for positioning horizontally we use two types.
         *  - When there is allot of space the arrow is 25% from the edge
         *
         *    -----^------------   or       -----------^----
         *
         *
         *  - When there is less or none space we have only 10% far away form the edge
         *
         *    --^------------   or       -----------^--
         *
         *  Once we pick the correct positioning (25%, 10%) we need to recalculate and shift the card
         *  either to the left or right.
         *
         * @param {?} container
         * @param {?} containerRect
         * @param {?} modalContainer
         * @return {?}
         */
        HoverCardComponent.prototype.adjustCard = /**
         *
         * Applies style.TOP and style.LEFT to the container in order to reposition it and add
         * extra arrow.
         *
         * First based on the initial position we apply style.TOP and depending if its on the
         * top or bottom we apply either -HoverCardComponent.ArrowPad or +HoverCardComponent.ArrowPad.
         *
         * Then for positioning horizontally we use two types.
         *  - When there is allot of space the arrow is 25% from the edge
         *
         *    -----^------------   or       -----------^----
         *
         *
         *  - When there is less or none space we have only 10% far away form the edge
         *
         *    --^------------   or       -----------^--
         *
         *  Once we pick the correct positioning (25%, 10%) we need to recalculate and shift the card
         *  either to the left or right.
         *
         * @param {?} container
         * @param {?} containerRect
         * @param {?} modalContainer
         * @return {?}
         */
            function (container, containerRect, modalContainer) {
                var /** @type {?} */ diff = (this.currrentPosition === HCCardPosition.bottom) ? 1 : -1;
                var /** @type {?} */ scrollTop = modalContainer.domHandler.getWindowScrollTop();
                var /** @type {?} */ posWithScroll = containerRect.top + scrollTop;
                container.style.top = (posWithScroll + (HoverCardComponent.ArrowPad * diff)) + 'px';
                var /** @type {?} */ alignment = this.alignmentForCard(containerRect, modalContainer);
                container.style.left = this.calcLeftForAlignment(containerRect, alignment) + 'px';
            };
        /**
         * @param {?} container
         * @param {?} containerRect
         * @param {?} modalContainer
         * @return {?}
         */
        HoverCardComponent.prototype.applyStyleClass = /**
         * @param {?} container
         * @param {?} containerRect
         * @param {?} modalContainer
         * @return {?}
         */
            function (container, containerRect, modalContainer) {
                if (this.currrentPosition !== HCCardPosition.none) {
                    var /** @type {?} */ alignment = this.alignmentForCard(containerRect, modalContainer);
                    this.arrowClass = ((PositionToStyle))[((HCCardPosition))[this.currrentPosition]];
                    this.arrowClass += ((AlignmentToStyle))[((HCCardAlignment))[alignment]];
                }
                else {
                    this.arrowClass = '';
                }
            };
        /**
         *
         * Detects if the card is going to be shown on the top of the Link label or under. Or if
         * its covering it.
         *
         */
        /**
         *
         * Detects if the card is going to be shown on the top of the Link label or under. Or if
         * its covering it.
         *
         * @param {?} container
         * @param {?} boundingRect
         * @return {?}
         */
        HoverCardComponent.prototype.positionForCard = /**
         *
         * Detects if the card is going to be shown on the top of the Link label or under. Or if
         * its covering it.
         *
         * @param {?} container
         * @param {?} boundingRect
         * @return {?}
         */
            function (container, boundingRect) {
                // secure this in case of IE returning undefined
                var /** @type {?} */ borderWidth = getComputedStyle(container).borderWidth;
                var /** @type {?} */ cntWidth = parseFloat(borderWidth || '0');
                var /** @type {?} */ pos = HCCardPosition.none;
                if (this.trigRect.bottom < boundingRect.top) {
                    pos = HCCardPosition.bottom;
                }
                else if (this.trigRect.top > (boundingRect.bottom - cntWidth)) {
                    pos = HCCardPosition.top;
                }
                return pos;
            };
        /**
         *
         * Detect horizontal alignment.
         *
         * @param {?} boundingRect
         * @param {?} modalContainer
         * @return {?}
         */
        HoverCardComponent.prototype.alignmentForCard = /**
         *
         * Detect horizontal alignment.
         *
         * @param {?} boundingRect
         * @param {?} modalContainer
         * @return {?}
         */
            function (boundingRect, modalContainer) {
                var /** @type {?} */ alignment = HCCardAlignment.left;
                var /** @type {?} */ viewPort = modalContainer.domHandler.getViewport();
                if (this.trigRect.left.toFixed(0) === boundingRect.left.toFixed(0) &&
                    boundingRect.left > HoverCardComponent.SpacingLimit) {
                    alignment = HCCardAlignment.left;
                }
                else if (boundingRect.left < HoverCardComponent.SpacingLimit) {
                    alignment = HCCardAlignment.paddedLeft;
                }
                else if ((viewPort.width - boundingRect.right) < HoverCardComponent.SpacingLimit) {
                    alignment = HCCardAlignment.paddedRight;
                }
                else if (this.trigRect.right.toFixed(0) === boundingRect.right.toFixed(0) ||
                    (viewPort.width - boundingRect.right) > HoverCardComponent.SpacingLimit) {
                    alignment = HCCardAlignment.right;
                }
                else {
                    alignment = HCCardAlignment.default;
                }
                return alignment;
            };
        /**
         *
         * Turn on temporary display to BLOCK so we can read dimensions
         *
         */
        /**
         *
         * Turn on temporary display to BLOCK so we can read dimensions
         *
         * @param {?} container
         * @return {?}
         */
        HoverCardComponent.prototype.openForAdjustments = /**
         *
         * Turn on temporary display to BLOCK so we can read dimensions
         *
         * @param {?} container
         * @return {?}
         */
            function (container) {
                container.style.visibility = 'hidden';
                container.style.display = 'block';
                this.initElements();
            };
        /**
         *
         * Turn off display back NONE
         *
         */
        /**
         *
         * Turn off display back NONE
         *
         * @param {?} container
         * @return {?}
         */
        HoverCardComponent.prototype.closeForAdjustments = /**
         *
         * Turn off display back NONE
         *
         * @param {?} container
         * @return {?}
         */
            function (container) {
                container.style.visibility = 'visible';
                // container.style.display = 'none';
            };
        /**
         *
         * Calculates positioning for style.LEFT. As already said they are two types of triangles that
         * are applies for these case:
         *
         *
         * a) Large left, Large right
         *
         *  PrimeNG aligns the card with either the right side or left side of the triggering icon
         *
         *
         *  V                                                                V
         *  ......^........................ or  .......................^......
         *
         *
         *
         *
         *  b) Small left , small right
         *
         *  This is for cases where there is not enough space and PrimeNG position the card off to the
         *  triggering icons, so even primeNg does not have space to align it with the V
         *
         *
         *     V                                                      V
         *  ....^........................ or  .......................^....
         *
         *
         * c)Aligned with the edge of browser
         *
         * On the right side this is problem as we cannot calculate full future width of the card.
         * but we applly for this case #b (arrow 10% )
         *
         *
         *
         * @param {?} boundingRect
         * @param {?} alignment
         * @return {?}
         */
        HoverCardComponent.prototype.calcLeftForAlignment = /**
         *
         * Calculates positioning for style.LEFT. As already said they are two types of triangles that
         * are applies for these case:
         *
         *
         * a) Large left, Large right
         *
         *  PrimeNG aligns the card with either the right side or left side of the triggering icon
         *
         *
         *  V                                                                V
         *  ......^........................ or  .......................^......
         *
         *
         *
         *
         *  b) Small left , small right
         *
         *  This is for cases where there is not enough space and PrimeNG position the card off to the
         *  triggering icons, so even primeNg does not have space to align it with the V
         *
         *
         *     V                                                      V
         *  ....^........................ or  .......................^....
         *
         *
         * c)Aligned with the edge of browser
         *
         * On the right side this is problem as we cannot calculate full future width of the card.
         * but we applly for this case #b (arrow 10% )
         *
         *
         *
         * @param {?} boundingRect
         * @param {?} alignment
         * @return {?}
         */
            function (boundingRect, alignment) {
                // width for which we need to shift card. 25% or 10% of the container width
                var /** @type {?} */ wLargeTriangle = boundingRect.width * 0.25;
                var /** @type {?} */ wSmallTriangle = boundingRect.width * 0.10;
                switch (alignment) {
                    case HCCardAlignment.right:
                        var /** @type {?} */ shiftRight = boundingRect.left + wLargeTriangle;
                        var /** @type {?} */ trigRight = this.trigRect.right - this.trigIconMiddle;
                        return shiftRight - (boundingRect.right - trigRight);
                    case HCCardAlignment.paddedRight:
                        var /** @type {?} */ shiftRightS = boundingRect.left + wSmallTriangle;
                        var /** @type {?} */ trigRightS = this.trigRect.right - this.trigIconMiddle;
                        return shiftRightS - (boundingRect.right - trigRightS);
                    case HCCardAlignment.paddedLeft:
                        var /** @type {?} */ shiftLeftPad = boundingRect.left - wSmallTriangle;
                        return shiftLeftPad + this.trigIconMiddle;
                    case HCCardAlignment.left:
                    default:
                        var /** @type {?} */ shiftLeft = boundingRect.left - wLargeTriangle;
                        return shiftLeft + this.trigIconMiddle;
                }
            };
        /**
         * Default padding representing a height of the Arrow for which we need to vertically adjust
         * Card container
         *
         */
        HoverCardComponent.ArrowPad = 10;
        /**
         * Defines safe threshold where there might not be enough space around or Card is aligned with
         * the left or right edge of the viewport for which we need to position the Arrow closer to the
         * side of the card
         *
         */
        HoverCardComponent.SpacingLimit = 50;
        HoverCardComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aw-hover-card',
                        template: "<span class=\"w-hc\">\n    <span class=\"w-hc-title\">\n        <aw-string [value]=\"linkTitle\"></aw-string>\n        <span class=\"sap-icon icon-slim-arrow-down\" (mouseover)=\"openCard($event)\"></span>\n    </span>\n\n    <div class=\"w-hc-body\">\n\n         <aw-overlay #overlay [showCloseIcon]=\"forceClose\" [dismissable]=\"!forceClose\"\n                     [styleClass]=\"arrowClass\"\n                     [appendTo]=\"appendTo\"\n                     (onOpen)=\"cardOpened($event)\"\n                     (onClose)=\"cardClosed($event)\">\n\n        <!-- this is workaround to create a _ngcontent-INDEX reference so we can\n        refer to this ng-content. Angular does not have any way right now to track this\n        -->\n        <span class=\"u-ngcontent\">\n                <ng-content></ng-content>\n            </span>\n\n    </aw-overlay>\n\n    </div>\n</span>\n\n\n<!--<ng-template #contentToBody>-->\n    <!--<aw-overlay #overlay [showCloseIcon]=\"forceClose\" [dismissable]=\"!forceClose\"-->\n                <!--[styleClass]=\"arrowClass\"-->\n                <!--[appendTo]=\"appendTo\"-->\n                <!--(onOpen)=\"cardOpened($event)\"-->\n                <!--(onClose)=\"cardClosed($event)\">-->\n\n        <!--&lt;!&ndash; this is workaround to create a _ngcontent-INDEX reference so we can-->\n        <!--refer to this ng-content. Angular does not have any way right now to track this-->\n        <!--&ndash;&gt;-->\n        <!--<span class=\"u-ngcontent\">-->\n                <!--<ng-content></ng-content>-->\n            <!--</span>-->\n\n    <!--</aw-overlay>-->\n\n<!--</ng-template>-->\n\n\n<!--<ng-template #contentToOverlay>-->\n\n    <!--<aw-overlay #overlay [showCloseIcon]=\"forceClose\" [dismissable]=\"!forceClose\"-->\n                <!--[styleClass]=\"arrowClass\"-->\n                <!--(onOpen)=\"cardOpened($event)\"-->\n                <!--(onClose)=\"cardClosed($event)\">-->\n\n        <!--&lt;!&ndash; this is workaround to create a _ngcontent-INDEX reference so we can-->\n        <!--refer to this ng-content. Angular does not have any way right now to track this-->\n        <!--&ndash;&gt;-->\n        <!--<span class=\"u-ngcontent\">-->\n                <!--<ng-content></ng-content>-->\n            <!--</span>-->\n\n    <!--</aw-overlay>-->\n<!--</ng-template>-->\n\n\n",
                        styles: [".w-hc-title{padding-right:1.4em;position:relative;white-space:nowrap}.w-hc-title .sap-icon{font-size:1em;color:#00679e;position:absolute;padding-top:.2em;right:0}::ng-deep .w-hc-panel-arrow.u-hc-shadow-b{box-shadow:0 2px 4px 0 rgba(0,0,0,.2)}::ng-deep .w-hc-panel-arrow.u-hc-shadow-t{box-shadow:0 -2px 4px 0 rgba(0,0,0,.2)}::ng-deep .w-hc-panel-arrow:after,::ng-deep .w-hc-panel-arrow:before{left:25%;border:solid transparent;content:\" \";height:0;width:0;position:absolute;pointer-events:none}::ng-deep .w-hc-panel-arrow:after{border-color:rgba(136,183,213,0);border-width:.7em;margin-left:-.7em}::ng-deep .w-hc-panel-arrow:before{border-color:rgba(255,136,56,0);border-width:.8em;margin-left:-.8em}::ng-deep .u-hc-arrow-ll:after,::ng-deep .u-hc-arrow-ll:before{left:25%}::ng-deep .u-hc-arrow-lr:after,::ng-deep .u-hc-arrow-lr:before{left:75%}::ng-deep .u-hc-arrow-sl:after,::ng-deep .u-hc-arrow-sl:before{left:10%}::ng-deep .u-hc-arrow-sr:after,::ng-deep .u-hc-arrow-sr:before{left:90%}::ng-deep .u-hc-arrow-t:after,::ng-deep .u-hc-arrow-t:before{bottom:100%}::ng-deep .u-hc-arrow-t:after{border-bottom-color:#fff}::ng-deep .u-hc-arrow-t:before{border-bottom-color:#d7d7d7}::ng-deep .u-hc-arrow-b:after,::ng-deep .u-hc-arrow-b:before{top:100%}::ng-deep .u-hc-arrow-b:after{border-top-color:#fff}::ng-deep .u-hc-arrow-b:before{border-top-color:#d7d7d7}"]
                    },] },
        ];
        /** @nocollapse */
        HoverCardComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core$1.Environment },
                { type: core.ChangeDetectorRef }
            ];
        };
        HoverCardComponent.propDecorators = {
            linkTitle: [{ type: core.Input }],
            forceClose: [{ type: core.Input }],
            appendContentToBody: [{ type: core.Input }],
            awOverlay: [{ type: core.ViewChild, args: ['overlay',] }]
        };
        return HoverCardComponent;
    }(BaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Spy lifecycle directive is used for debugging purposes to track lifecycle callback
     *
     * ###Usage
     *
     * ```
     *   <my-directive spyhooks><my-directive>
     *
     * ```
     */
    var SpyLifeCycleHooksDirective = (function () {
        function SpyLifeCycleHooksDirective(elementRef) {
            this.elementRef = elementRef;
        }
        /**
         * @return {?}
         */
        SpyLifeCycleHooksDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.logIt('onInit');
            };
        /**
         * @return {?}
         */
        SpyLifeCycleHooksDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.logIt('onDestroy');
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        SpyLifeCycleHooksDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                this.logIt('ngOnChanges = ' + changes);
            };
        /**
         * @return {?}
         */
        SpyLifeCycleHooksDirective.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
                this.logIt('ngDoCheck');
            };
        /**
         * @return {?}
         */
        SpyLifeCycleHooksDirective.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.logIt('ngAfterContentInit');
            };
        /**
         * @return {?}
         */
        SpyLifeCycleHooksDirective.prototype.ngAfterContentChecked = /**
         * @return {?}
         */
            function () {
                this.logIt('ngAfterContentChecked');
            };
        /**
         * @return {?}
         */
        SpyLifeCycleHooksDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.logIt('ngAfterViewInit');
            };
        /**
         * @return {?}
         */
        SpyLifeCycleHooksDirective.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
            function () {
                this.logIt('ngAfterViewChecked');
            };
        /**
         * @param {?} msg
         * @return {?}
         */
        SpyLifeCycleHooksDirective.prototype.logIt = /**
         * @param {?} msg
         * @return {?}
         */
            function (msg) {
                var /** @type {?} */ level = 0;
                var /** @type {?} */ me = this.elementRef.nativeElement;
                var /** @type {?} */ tagBody = me;
                while ((tagBody = tagBody.parentNode) != null) {
                    level++;
                    if (tagBody.tagName === 'APP-ROOT' || level === 6) {
                        break;
                    }
                }
                var /** @type {?} */ indent = '';
                var /** @type {?} */ indentNumber = level;
                while (level > 0) {
                    indent += '\t';
                    level--;
                }
                var /** @type {?} */ params = '';
                if (core$1.isPresent(me.attributes)) {
                    for (var /** @type {?} */ i = 0; i < me.attributes.length; i++) {
                        var /** @type {?} */ attr = me.attributes.item(i);
                        if (this.ignore(attr.name.toLowerCase())) {
                            continue;
                        }
                        params += '(' + attr.name + '=' + attr.value + '),  ';
                    }
                }
                core$1.print(indent + me.tagName + '(' + indentNumber + '): ' + msg + ' => ' + params);
            };
        /**
         * @param {?} name
         * @return {?}
         */
        SpyLifeCycleHooksDirective.prototype.ignore = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                return name.indexOf('_ng') > -1 ||
                    name.indexOf('ng-') > -1 ||
                    name.indexOf('spyhooks') > -1;
            };
        SpyLifeCycleHooksDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[spyHooks]' },] },
        ];
        /** @nocollapse */
        SpyLifeCycleHooksDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        return SpyLifeCycleHooksDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    var components = /*#__PURE__*/Object.freeze({
        AWCoreComponentModule: AWCoreComponentModule,
        ErrorMessagesComponent: ErrorMessagesComponent,
        ModalContainer: ModalContainer,
        ModalService: ModalService,
        ModalComponent: ModalComponent,
        CurrencyFormatPipe: CurrencyFormatPipe,
        BaseComponent: BaseComponent,
        BaseFormComponent: BaseFormComponent,
        WidgetSizeColumns: WidgetSizeColumns,
        DomUtilsService: DomUtilsService,
        EmbeddedItemDirective: EmbeddedItemDirective,
        EmbededItem: EmbededItem,
        ErrorManagerService: ErrorManagerService,
        GenericContainerComponent: GenericContainerComponent,
        IncludeComponentDirective: IncludeComponentDirective,
        ComponentRegistry: ComponentRegistry,
        DataTypeProviderRegistry: DataTypeProviderRegistry,
        DataProviders: DataProviders,
        DataFinders: DataFinders,
        DataFinder: DataFinder,
        FullTextArrayDataFinder: FullTextArrayDataFinder,
        QueryType: QueryType,
        DATA_SOURCE: DATA_SOURCE,
        DataProvider: DataProvider,
        ArrayDataProvider: ArrayDataProvider,
        NgForSetDirective: NgForSetDirective,
        AwNameDirective: AwNameDirective,
        AwNameStore: AwNameStore,
        FormTableComponent: FormTableComponent,
        AWFormTableModule: AWFormTableModule,
        FormRowComponent: FormRowComponent,
        TopZoneComponent: TopZoneComponent,
        LeftZoneComponent: LeftZoneComponent,
        MiddleZoneComponent: MiddleZoneComponent,
        RightZoneComponent: RightZoneComponent,
        BottomZoneComponent: BottomZoneComponent,
        AWInputFieldModule: AWInputFieldModule,
        AWStringFieldModule: AWStringFieldModule,
        AWBasicNavigatorModule: AWBasicNavigatorModule,
        AWButtonModule: AWButtonModule,
        AWCardModule: AWCardModule,
        AWCheckBoxModule: AWCheckBoxModule,
        AWCheckBoxListModule: AWCheckBoxListModule,
        AWHyperlinkModule: AWHyperlinkModule,
        AWChooserModule: AWChooserModule,
        AWDropdownModule: AWDropdownModule,
        AWCurrencyModule: AWCurrencyModule,
        AWDateAndTimeModule: AWDateAndTimeModule,
        AWDialogModule: AWDialogModule,
        AWGenericChooserModule: AWGenericChooserModule,
        AWRadioButtonModule: AWRadioButtonModule,
        AWRadioButtonListModule: AWRadioButtonListModule,
        AWOutlineForModule: AWOutlineForModule,
        AWTextAreaModule: AWTextAreaModule,
        AWPageNotificationModule: AWPageNotificationModule,
        AWPageWrapperModule: AWPageWrapperModule,
        AWRichTextAreaModule: AWRichTextAreaModule,
        AWSectionModule: AWSectionModule,
        AWStepperModule: AWStepperModule,
        AWDatatable2Module: AWDatatable2Module,
        AWConfirmationModule: AWConfirmationModule,
        AWScrollableContainerModule: AWScrollableContainerModule,
        AWListModule: AWListModule,
        WizardProgressModule: WizardProgressModule,
        ToggleSwitchModule: ToggleSwitchModule,
        BasicNavigatorComponent: BasicNavigatorComponent,
        ButtonComponent: ButtonComponent,
        CheckBoxListComponent: CheckBoxListComponent,
        CHOOSER_CONTROL_VALUE_ACCESSOR: CHOOSER_CONTROL_VALUE_ACCESSOR,
        ChooserComponent: ChooserComponent,
        ChooserState: ChooserState,
        DefaultSelectionState: DefaultSelectionState,
        ChooserSelectionState: ChooserSelectionState,
        ChooserDataSource: ChooserDataSource,
        isDSChooserInitParams: isDSChooserInitParams,
        CURRENCY_CONTROL_VALUE_ACCESSOR: CURRENCY_CONTROL_VALUE_ACCESSOR,
        CurrencyComponent: CurrencyComponent,
        Money: Money,
        DateAndTimeComponent: DateAndTimeComponent,
        DATETIME_CONTROL_VALUE_ACCESSOR: DATETIME_CONTROL_VALUE_ACCESSOR,
        DialogComponent: DialogComponent,
        DialogHeaderComponent: DialogHeaderComponent,
        DialogFooterComponent: DialogFooterComponent,
        ConfirmationComponent: ConfirmationComponent,
        ConfirmationHeaderComponent: ConfirmationHeaderComponent,
        ConfirmationFooterComponent: ConfirmationFooterComponent,
        OverlayComponent: OverlayComponent,
        DD_CONTROL_VALUE_ACCESSOR: DD_CONTROL_VALUE_ACCESSOR,
        DropdownComponent: DropdownComponent,
        GCChooserState: GCChooserState,
        GenericChooserComponent: GenericChooserComponent,
        HyperlinkComponent: HyperlinkComponent,
        INPUT_CONTROL_VALUE_ACCESSOR: INPUT_CONTROL_VALUE_ACCESSOR,
        InputFieldComponent: InputFieldComponent,
        RadioButtonListComponent: RadioButtonListComponent,
        StringComponent: StringComponent,
        TEXTAREA_CONTROL_VALUE_ACCESSOR: TEXTAREA_CONTROL_VALUE_ACCESSOR,
        TextAreaComponent: TextAreaComponent,
        CardComponent: CardComponent,
        CardZoneTitleComponent: CardZoneTitleComponent,
        CardZoneTopComponent: CardZoneTopComponent,
        CardZoneBottomComponent: CardZoneBottomComponent,
        OutlineForComponent: OutlineForComponent,
        OutlineControlComponent: OutlineControlComponent,
        OutlineState: OutlineState,
        isOutlineNode: isOutlineNode,
        PageContentComponent: PageContentComponent,
        PageNotificationComponent: PageNotificationComponent,
        PageNotification: PageNotification,
        PageInitialized: PageInitialized,
        PageDestroyed: PageDestroyed,
        PageWrapper: PageWrapper,
        PageLifeCycleService: PageLifeCycleService,
        ObjectPageWrapperComponent: ObjectPageWrapperComponent,
        PageHeaderComponent: PageHeaderComponent,
        PageMenuItem: PageMenuItem,
        UserNotification: UserNotification,
        PageFooterComponent: PageFooterComponent,
        SidenavComponent: SidenavComponent,
        PageActionsComponent: PageActionsComponent,
        SectionComponent: SectionComponent,
        SubSectionComponent: SubSectionComponent,
        SectionActionsComponent: SectionActionsComponent,
        EditorType: EditorType,
        RichTextAreaComponent: RichTextAreaComponent,
        CheckboxComponent: CheckboxComponent,
        RadioButtonComponent: RadioButtonComponent,
        StepperComponent: StepperComponent,
        StepComponent: StepComponent,
        ScrollableContainerComponent: ScrollableContainerComponent,
        HoverCardComponent: HoverCardComponent,
        ListComponent: ListComponent,
        Datatable2Component: Datatable2Component,
        DTHeaderComponent2: DTHeaderComponent2,
        DTColumn2Component: DTColumn2Component,
        DTDetailRowComponent: DTDetailRowComponent,
        Datatable2State: Datatable2State,
        isDTInitParams: isDTInitParams,
        DT2DataSource: DT2DataSource,
        DetailRowExpansionState: DetailRowExpansionState,
        DTMultiSelectColumnComponent: DTMultiSelectColumnComponent,
        WizardProgressComponent: WizardProgressComponent,
        ToggleSwitchComponent: ToggleSwitchComponent,
        DomHandler: primeng.DomHandler,
        TreeDragDropService: primeng.TreeDragDropService,
        ConfirmationService: primeng.ConfirmationService,
        Header: primeng.Header,
        Footer: primeng.Footer,
        PrimeTemplate: primeng.PrimeTemplate,
        Column: primeng.Column,
        Row: primeng.Row,
        HeaderColumnGroup: primeng.HeaderColumnGroup,
        FooterColumnGroup: primeng.FooterColumnGroup,
        SharedModule: primeng.SharedModule,
        AccordionTab: primeng.AccordionTab,
        Accordion: primeng.Accordion,
        AccordionModule: primeng.AccordionModule,
        AUTOCOMPLETE_VALUE_ACCESSOR: primeng.AUTOCOMPLETE_VALUE_ACCESSOR,
        AutoComplete: primeng.AutoComplete,
        AutoCompleteModule: primeng.AutoCompleteModule,
        BlockUI: primeng.BlockUI,
        BlockUIModule: primeng.BlockUIModule,
        Breadcrumb: primeng.Breadcrumb,
        BreadcrumbModule: primeng.BreadcrumbModule,
        ButtonDirective: primeng.ButtonDirective,
        Button: primeng.Button,
        ButtonModule: primeng.ButtonModule,
        Captcha: primeng.Captcha,
        CaptchaModule: primeng.CaptchaModule,
        CALENDAR_VALUE_ACCESSOR: primeng.CALENDAR_VALUE_ACCESSOR,
        Calendar: primeng.Calendar,
        CalendarModule: primeng.CalendarModule,
        Card: primeng.Card,
        CardModule: primeng.CardModule,
        Carousel: primeng.Carousel,
        CarouselModule: primeng.CarouselModule,
        UIChart: primeng.UIChart,
        ChartModule: primeng.ChartModule,
        CHECKBOX_VALUE_ACCESSOR: primeng.CHECKBOX_VALUE_ACCESSOR,
        Checkbox: primeng.Checkbox,
        CheckboxModule: primeng.CheckboxModule,
        CHIPS_VALUE_ACCESSOR: primeng.CHIPS_VALUE_ACCESSOR,
        Chips: primeng.Chips,
        ChipsModule: primeng.ChipsModule,
        CodeHighlighter: primeng.CodeHighlighter,
        CodeHighlighterModule: primeng.CodeHighlighterModule,
        COLORPICKER_VALUE_ACCESSOR: primeng.COLORPICKER_VALUE_ACCESSOR,
        ColorPicker: primeng.ColorPicker,
        ColorPickerModule: primeng.ColorPickerModule,
        ConfirmDialog: primeng.ConfirmDialog,
        ConfirmDialogModule: primeng.ConfirmDialogModule,
        ContextMenuSub: primeng.ContextMenuSub,
        ContextMenu: primeng.ContextMenu,
        ContextMenuModule: primeng.ContextMenuModule,
        DataGrid: primeng.DataGrid,
        DataGridModule: primeng.DataGridModule,
        DataList: primeng.DataList,
        DataListModule: primeng.DataListModule,
        DataScroller: primeng.DataScroller,
        DataScrollerModule: primeng.DataScrollerModule,
        DTRadioButton: primeng.DTRadioButton,
        DTCheckbox: primeng.DTCheckbox,
        ColumnHeaders: primeng.ColumnHeaders,
        ColumnFooters: primeng.ColumnFooters,
        TableBody: primeng.TableBody,
        ScrollableView: primeng.ScrollableView,
        DataTable: primeng.DataTable,
        DataTableModule: primeng.DataTableModule,
        DeferredLoader: primeng.DeferredLoader,
        DeferModule: primeng.DeferModule,
        Dialog: primeng.Dialog,
        DialogModule: primeng.DialogModule,
        Draggable: primeng.Draggable,
        Droppable: primeng.Droppable,
        DragDropModule: primeng.DragDropModule,
        DROPDOWN_VALUE_ACCESSOR: primeng.DROPDOWN_VALUE_ACCESSOR,
        Dropdown: primeng.Dropdown,
        DropdownModule: primeng.DropdownModule,
        EDITOR_VALUE_ACCESSOR: primeng.EDITOR_VALUE_ACCESSOR,
        Editor: primeng.Editor,
        EditorModule: primeng.EditorModule,
        Fieldset: primeng.Fieldset,
        FieldsetModule: primeng.FieldsetModule,
        FileUpload: primeng.FileUpload,
        FileUploadModule: primeng.FileUploadModule,
        Galleria: primeng.Galleria,
        GalleriaModule: primeng.GalleriaModule,
        GMap: primeng.GMap,
        GMapModule: primeng.GMapModule,
        Growl: primeng.Growl,
        GrowlModule: primeng.GrowlModule,
        InplaceDisplay: primeng.InplaceDisplay,
        InplaceContent: primeng.InplaceContent,
        Inplace: primeng.Inplace,
        InplaceModule: primeng.InplaceModule,
        INPUTMASK_VALUE_ACCESSOR: primeng.INPUTMASK_VALUE_ACCESSOR,
        InputMask: primeng.InputMask,
        InputMaskModule: primeng.InputMaskModule,
        INPUTSWITCH_VALUE_ACCESSOR: primeng.INPUTSWITCH_VALUE_ACCESSOR,
        InputSwitch: primeng.InputSwitch,
        InputSwitchModule: primeng.InputSwitchModule,
        InputText: primeng.InputText,
        InputTextModule: primeng.InputTextModule,
        InputTextarea: primeng.InputTextarea,
        InputTextareaModule: primeng.InputTextareaModule,
        KEYFILTER_VALIDATOR: primeng.KEYFILTER_VALIDATOR,
        KeyFilter: primeng.KeyFilter,
        KeyFilterModule: primeng.KeyFilterModule,
        Lightbox: primeng.Lightbox,
        LightboxModule: primeng.LightboxModule,
        LISTBOX_VALUE_ACCESSOR: primeng.LISTBOX_VALUE_ACCESSOR,
        Listbox: primeng.Listbox,
        ListboxModule: primeng.ListboxModule,
        MegaMenu: primeng.MegaMenu,
        MegaMenuModule: primeng.MegaMenuModule,
        MenuItemContent: primeng.MenuItemContent,
        Menu: primeng.Menu,
        MenuModule: primeng.MenuModule,
        MenubarSub: primeng.MenubarSub,
        Menubar: primeng.Menubar,
        MenubarModule: primeng.MenubarModule,
        Messages: primeng.Messages,
        MessagesModule: primeng.MessagesModule,
        UIMessage: primeng.UIMessage,
        MessageModule: primeng.MessageModule,
        MULTISELECT_VALUE_ACCESSOR: primeng.MULTISELECT_VALUE_ACCESSOR,
        MultiSelect: primeng.MultiSelect,
        MultiSelectModule: primeng.MultiSelectModule,
        OrderList: primeng.OrderList,
        OrderListModule: primeng.OrderListModule,
        OrganizationChartNode: primeng.OrganizationChartNode,
        OrganizationChart: primeng.OrganizationChart,
        OrganizationChartModule: primeng.OrganizationChartModule,
        OverlayPanel: primeng.OverlayPanel,
        OverlayPanelModule: primeng.OverlayPanelModule,
        Paginator: primeng.Paginator,
        PaginatorModule: primeng.PaginatorModule,
        Panel: primeng.Panel,
        PanelModule: primeng.PanelModule,
        BasePanelMenuItem: primeng.BasePanelMenuItem,
        PanelMenuSub: primeng.PanelMenuSub,
        PanelMenu: primeng.PanelMenu,
        PanelMenuModule: primeng.PanelMenuModule,
        Password: primeng.Password,
        PasswordModule: primeng.PasswordModule,
        PickList: primeng.PickList,
        PickListModule: primeng.PickListModule,
        ProgressBar: primeng.ProgressBar,
        ProgressBarModule: primeng.ProgressBarModule,
        ProgressSpinner: primeng.ProgressSpinner,
        ProgressSpinnerModule: primeng.ProgressSpinnerModule,
        RADIO_VALUE_ACCESSOR: primeng.RADIO_VALUE_ACCESSOR,
        RadioButton: primeng.RadioButton,
        RadioButtonModule: primeng.RadioButtonModule,
        RATING_VALUE_ACCESSOR: primeng.RATING_VALUE_ACCESSOR,
        Rating: primeng.Rating,
        RatingModule: primeng.RatingModule,
        Schedule: primeng.Schedule,
        ScheduleModule: primeng.ScheduleModule,
        ScrollPanel: primeng.ScrollPanel,
        ScrollPanelModule: primeng.ScrollPanelModule,
        SELECTBUTTON_VALUE_ACCESSOR: primeng.SELECTBUTTON_VALUE_ACCESSOR,
        SelectButton: primeng.SelectButton,
        SelectButtonModule: primeng.SelectButtonModule,
        SlideMenuSub: primeng.SlideMenuSub,
        SlideMenu: primeng.SlideMenu,
        SlideMenuModule: primeng.SlideMenuModule,
        SLIDER_VALUE_ACCESSOR: primeng.SLIDER_VALUE_ACCESSOR,
        Slider: primeng.Slider,
        SliderModule: primeng.SliderModule,
        Sidebar: primeng.Sidebar,
        SidebarModule: primeng.SidebarModule,
        SPINNER_VALUE_ACCESSOR: primeng.SPINNER_VALUE_ACCESSOR,
        Spinner: primeng.Spinner,
        SpinnerModule: primeng.SpinnerModule,
        SplitButton: primeng.SplitButton,
        SplitButtonModule: primeng.SplitButtonModule,
        Steps: primeng.Steps,
        StepsModule: primeng.StepsModule,
        TabViewNav: primeng.TabViewNav,
        TabPanel: primeng.TabPanel,
        TabView: primeng.TabView,
        TabViewModule: primeng.TabViewModule,
        TabMenu: primeng.TabMenu,
        TabMenuModule: primeng.TabMenuModule,
        Terminal: primeng.Terminal,
        TerminalModule: primeng.TerminalModule,
        TieredMenuSub: primeng.TieredMenuSub,
        TieredMenu: primeng.TieredMenu,
        TieredMenuModule: primeng.TieredMenuModule,
        TOGGLEBUTTON_VALUE_ACCESSOR: primeng.TOGGLEBUTTON_VALUE_ACCESSOR,
        ToggleButton: primeng.ToggleButton,
        ToggleButtonModule: primeng.ToggleButtonModule,
        Toolbar: primeng.Toolbar,
        ToolbarModule: primeng.ToolbarModule,
        Tooltip: primeng.Tooltip,
        TooltipModule: primeng.TooltipModule,
        UITreeNode: primeng.UITreeNode,
        Tree: primeng.Tree,
        TreeModule: primeng.TreeModule,
        TreeTableService: primeng.TreeTableService,
        TreeTable: primeng.TreeTable,
        TTBody: primeng.TTBody,
        TTScrollableView: primeng.TTScrollableView,
        TTSortableColumn: primeng.TTSortableColumn,
        TTSortIcon: primeng.TTSortIcon,
        TTResizableColumn: primeng.TTResizableColumn,
        TTReorderableColumn: primeng.TTReorderableColumn,
        TTSelectableRow: primeng.TTSelectableRow,
        TTSelectableRowDblClick: primeng.TTSelectableRowDblClick,
        TTContextMenuRow: primeng.TTContextMenuRow,
        TTCheckbox: primeng.TTCheckbox,
        TTHeaderCheckbox: primeng.TTHeaderCheckbox,
        TTEditableColumn: primeng.TTEditableColumn,
        TreeTableCellEditor: primeng.TreeTableCellEditor,
        TreeTableToggler: primeng.TreeTableToggler,
        TreeTableModule: primeng.TreeTableModule,
        TRISTATECHECKBOX_VALUE_ACCESSOR: primeng.TRISTATECHECKBOX_VALUE_ACCESSOR,
        TriStateCheckbox: primeng.TriStateCheckbox,
        TriStateCheckboxModule: primeng.TriStateCheckboxModule
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWOverlayModule = (function () {
        function AWOverlayModule() {
        }
        AWOverlayModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            OverlayComponent
                        ],
                        imports: [
                            common.CommonModule,
                            AWCoreComponentModule,
                            primeng.OverlayPanelModule
                        ],
                        entryComponents: [
                            OverlayComponent
                        ],
                        exports: [
                            OverlayComponent,
                            AWCoreComponentModule
                        ],
                        providers: []
                    },] },
        ];
        return AWOverlayModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AWHoverCardModule = (function () {
        function AWHoverCardModule() {
        }
        AWHoverCardModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            HoverCardComponent
                        ],
                        imports: [
                            common.CommonModule,
                            AWOverlayModule,
                            AWStringFieldModule
                        ],
                        entryComponents: [
                            HoverCardComponent
                        ],
                        exports: [
                            HoverCardComponent
                        ],
                        providers: []
                    },] },
        ];
        return AWHoverCardModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Component module is core module for the common layouts and widgets libraries.
     *
     * todo: There are some things that I still need to resolve - please see and notices \@Duplicates
     * jsdoc I want to keep this there to remind me that I need to refactor this as of now there are
     * not much option with angular.
     *
     */
    var AribaComponentsModule = (function () {
        function AribaComponentsModule() {
        }
        /**
         * @return {?}
         */
        AribaComponentsModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: AribaComponentsModule,
                    providers: [
                        ModalService,
                        ComponentRegistry,
                        ErrorManagerService,
                        DomUtilsService,
                        DataTypeProviderRegistry,
                        DataProviders,
                        DataFinders,
                        AwNameStore,
                        {
                            provide: core.APP_INITIALIZER,
                            useFactory: registerComponents,
                            deps: [ComponentRegistry],
                            multi: true,
                        }
                    ]
                };
            };
        AribaComponentsModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            core$1.AribaCoreModule,
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            AWCoreComponentModule,
                            AWBasicNavigatorModule,
                            AWCardModule,
                            AWCheckBoxListModule,
                            AWCheckBoxModule,
                            AWChooserModule,
                            AWConfirmationModule,
                            AWCurrencyModule,
                            AWDateAndTimeModule,
                            AWDialogModule,
                            AWDropdownModule,
                            AWGenericChooserModule,
                            AWHyperlinkModule,
                            AWInputFieldModule,
                            AWOutlineForModule,
                            AWOverlayModule,
                            AWPageNotificationModule,
                            AWPageWrapperModule,
                            AWRadioButtonModule,
                            AWRadioButtonListModule,
                            AWRichTextAreaModule,
                            AWScrollableContainerModule,
                            AWSectionModule,
                            AWStepperModule,
                            AWStringFieldModule,
                            AWTextAreaModule,
                            AWFormTableModule,
                            AWButtonModule,
                            AWHoverCardModule,
                            AWListModule,
                            AWDatatable2Module,
                            WizardProgressModule,
                            ToggleSwitchModule,
                            primeng.PanelModule,
                            primeng.ButtonModule,
                            primeng.ToolbarModule,
                            primeng.InputTextModule,
                            primeng.InputTextareaModule,
                            primeng.AutoCompleteModule,
                            primeng.DropdownModule,
                            primeng.CalendarModule,
                            primeng.CheckboxModule,
                            primeng.RadioButtonModule,
                            primeng.SharedModule,
                            primeng.DialogModule,
                            primeng.MenuModule,
                            primeng.TabMenuModule,
                            primeng.AccordionModule,
                            primeng.EditorModule,
                            primeng.DataTableModule,
                            primeng.PaginatorModule,
                            primeng.OverlayPanelModule,
                            primeng.TreeModule
                        ],
                        declarations: [
                            SpyLifeCycleHooksDirective,
                        ],
                        bootstrap: [],
                        entryComponents: [
                            primeng.Checkbox,
                            primeng.Dialog
                        ],
                        exports: [
                            forms.ReactiveFormsModule,
                            forms.FormsModule,
                            SpyLifeCycleHooksDirective,
                            AWCoreComponentModule,
                            AWBasicNavigatorModule,
                            AWCardModule,
                            AWCheckBoxListModule,
                            AWCheckBoxModule,
                            AWChooserModule,
                            AWConfirmationModule,
                            AWCurrencyModule,
                            AWDateAndTimeModule,
                            AWDialogModule,
                            AWDropdownModule,
                            AWGenericChooserModule,
                            AWHyperlinkModule,
                            AWInputFieldModule,
                            AWOutlineForModule,
                            AWOverlayModule,
                            AWPageNotificationModule,
                            AWPageWrapperModule,
                            AWRadioButtonModule,
                            AWRadioButtonListModule,
                            AWRichTextAreaModule,
                            AWScrollableContainerModule,
                            AWSectionModule,
                            AWStepperModule,
                            AWStringFieldModule,
                            AWTextAreaModule,
                            AWFormTableModule,
                            EmbeddedItemDirective,
                            AWButtonModule,
                            AWHoverCardModule,
                            AWListModule,
                            AWDatatable2Module,
                            WizardProgressModule,
                            ToggleSwitchModule,
                            primeng.SharedModule,
                            primeng.PanelModule,
                            primeng.ButtonModule,
                            primeng.ToolbarModule,
                            primeng.InputTextModule,
                            primeng.InputTextareaModule,
                            primeng.AutoCompleteModule,
                            primeng.DropdownModule,
                            primeng.CalendarModule,
                            primeng.CheckboxModule,
                            primeng.RadioButtonModule,
                            primeng.DialogModule,
                            primeng.MenuModule,
                            primeng.TabMenuModule,
                            primeng.EditorModule,
                            primeng.DataTableModule,
                            primeng.PaginatorModule,
                            primeng.OverlayPanelModule
                        ]
                    },] },
        ];
        return AribaComponentsModule;
    }());
    /**
     * @param {?} compRegistry
     * @return {?}
     */
    function registerComponents(compRegistry) {
        return compRegistry.initialize.bind(compRegistry, components);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     *
     * This module is used mainly for tests as importing a module with all the components and you
     * use only 1 or two has a big impact on the performance execution. e.g. from executing couple
     * tests under 1 sec can go up to 10sec if you import all the things that you are not using.
     *
     * I havent noticed anything similar in application its only jasmine/karma that needs to init
     * components for every test.
     *
     */
    var AribaComponentsTestProviderModule = (function () {
        function AribaComponentsTestProviderModule() {
        }
        /**
         * @return {?}
         */
        AribaComponentsTestProviderModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: AribaComponentsTestProviderModule,
                    providers: [
                        ModalService,
                        ComponentRegistry,
                        ErrorManagerService,
                        DomUtilsService,
                        DataTypeProviderRegistry,
                        DataProviders,
                        DataFinders,
                        AwNameStore,
                        {
                            provide: core.APP_INITIALIZER,
                            useFactory: registerComponents$1,
                            deps: [ComponentRegistry],
                            multi: true,
                        }
                    ]
                };
            };
        AribaComponentsTestProviderModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: []
                    },] },
        ];
        return AribaComponentsTestProviderModule;
    }());
    /**
     * @param {?} compRegistry
     * @return {?}
     */
    function registerComponents$1(compRegistry) {
        return compRegistry.initialize.bind(compRegistry, components);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.ErrorMessagesComponent = ErrorMessagesComponent;
    exports.ModalContainer = ModalContainer;
    exports.ModalService = ModalService;
    exports.ModalComponent = ModalComponent;
    exports.CurrencyFormatPipe = CurrencyFormatPipe;
    exports.BaseComponent = BaseComponent;
    exports.WidgetSizeColumns = WidgetSizeColumns;
    exports.DomUtilsService = DomUtilsService;
    exports.EmbeddedItemDirective = EmbeddedItemDirective;
    exports.EmbededItem = EmbededItem;
    exports.ErrorManagerService = ErrorManagerService;
    exports.GenericContainerComponent = GenericContainerComponent;
    exports.IncludeComponentDirective = IncludeComponentDirective;
    exports.ComponentRegistry = ComponentRegistry;
    exports.AWCoreComponentModule = AWCoreComponentModule;
    exports.BaseFormComponent = BaseFormComponent;
    exports.DataTypeProviderRegistry = DataTypeProviderRegistry;
    exports.DataProvider = DataProvider;
    exports.DataProviders = DataProviders;
    exports.DataFinders = DataFinders;
    exports.DataFinder = DataFinder;
    exports.QueryType = QueryType;
    exports.FullTextArrayDataFinder = FullTextArrayDataFinder;
    exports.DATA_SOURCE = DATA_SOURCE;
    exports.ArrayDataProvider = ArrayDataProvider;
    exports.NgForSetDirective = NgForSetDirective;
    exports.AwNameDirective = AwNameDirective;
    exports.AwNameStore = AwNameStore;
    exports.FormTableComponent = FormTableComponent;
    exports.FormRowComponent = FormRowComponent;
    exports.TopZoneComponent = TopZoneComponent;
    exports.LeftZoneComponent = LeftZoneComponent;
    exports.MiddleZoneComponent = MiddleZoneComponent;
    exports.RightZoneComponent = RightZoneComponent;
    exports.BottomZoneComponent = BottomZoneComponent;
    exports.AWFormTableModule = AWFormTableModule;
    exports.BasicNavigatorComponent = BasicNavigatorComponent;
    exports.ButtonComponent = ButtonComponent;
    exports.CheckBoxListComponent = CheckBoxListComponent;
    exports.CHOOSER_CONTROL_VALUE_ACCESSOR = CHOOSER_CONTROL_VALUE_ACCESSOR;
    exports.ChooserComponent = ChooserComponent;
    exports.ChooserState = ChooserState;
    exports.DefaultSelectionState = DefaultSelectionState;
    exports.ChooserSelectionState = ChooserSelectionState;
    exports.CURRENCY_CONTROL_VALUE_ACCESSOR = CURRENCY_CONTROL_VALUE_ACCESSOR;
    exports.CurrencyComponent = CurrencyComponent;
    exports.Money = Money;
    exports.DateAndTimeComponent = DateAndTimeComponent;
    exports.DATETIME_CONTROL_VALUE_ACCESSOR = DATETIME_CONTROL_VALUE_ACCESSOR;
    exports.DialogComponent = DialogComponent;
    exports.DialogHeaderComponent = DialogHeaderComponent;
    exports.DialogFooterComponent = DialogFooterComponent;
    exports.ConfirmationComponent = ConfirmationComponent;
    exports.ConfirmationHeaderComponent = ConfirmationHeaderComponent;
    exports.ConfirmationFooterComponent = ConfirmationFooterComponent;
    exports.OverlayComponent = OverlayComponent;
    exports.DropdownComponent = DropdownComponent;
    exports.GCChooserState = GCChooserState;
    exports.GenericChooserComponent = GenericChooserComponent;
    exports.HyperlinkComponent = HyperlinkComponent;
    exports.INPUT_CONTROL_VALUE_ACCESSOR = INPUT_CONTROL_VALUE_ACCESSOR;
    exports.InputFieldComponent = InputFieldComponent;
    exports.RadioButtonListComponent = RadioButtonListComponent;
    exports.StringComponent = StringComponent;
    exports.TEXTAREA_CONTROL_VALUE_ACCESSOR = TEXTAREA_CONTROL_VALUE_ACCESSOR;
    exports.TextAreaComponent = TextAreaComponent;
    exports.OutlineForComponent = OutlineForComponent;
    exports.OutlineControlComponent = OutlineControlComponent;
    exports.PageActionsComponent = PageActionsComponent;
    exports.PageContentComponent = PageContentComponent;
    exports.PageFooterComponent = PageFooterComponent;
    exports.PageHeaderComponent = PageHeaderComponent;
    exports.PageMenuItem = PageMenuItem;
    exports.UserNotification = UserNotification;
    exports.PageNotificationComponent = PageNotificationComponent;
    exports.PageNotification = PageNotification;
    exports.PageInitialized = PageInitialized;
    exports.PageDestroyed = PageDestroyed;
    exports.PageWrapper = PageWrapper;
    exports.PageLifeCycleService = PageLifeCycleService;
    exports.ObjectPageWrapperComponent = ObjectPageWrapperComponent;
    exports.SectionComponent = SectionComponent;
    exports.SubSectionComponent = SubSectionComponent;
    exports.RichTextAreaComponent = RichTextAreaComponent;
    exports.EditorType = EditorType;
    exports.CheckboxComponent = CheckboxComponent;
    exports.RadioButtonComponent = RadioButtonComponent;
    exports.StepperComponent = StepperComponent;
    exports.StepComponent = StepComponent;
    exports.AWInputFieldModule = AWInputFieldModule;
    exports.AWStringFieldModule = AWStringFieldModule;
    exports.AWBasicNavigatorModule = AWBasicNavigatorModule;
    exports.AWButtonModule = AWButtonModule;
    exports.AWHyperlinkModule = AWHyperlinkModule;
    exports.AWCardModule = AWCardModule;
    exports.AWCheckBoxModule = AWCheckBoxModule;
    exports.AWCheckBoxListModule = AWCheckBoxListModule;
    exports.AWChooserModule = AWChooserModule;
    exports.AWDropdownModule = AWDropdownModule;
    exports.AWCurrencyModule = AWCurrencyModule;
    exports.AWDateAndTimeModule = AWDateAndTimeModule;
    exports.AWDialogModule = AWDialogModule;
    exports.AWGenericChooserModule = AWGenericChooserModule;
    exports.AWRadioButtonModule = AWRadioButtonModule;
    exports.AWRadioButtonListModule = AWRadioButtonListModule;
    exports.AWTextAreaModule = AWTextAreaModule;
    exports.AWPageNotificationModule = AWPageNotificationModule;
    exports.AWPageWrapperModule = AWPageWrapperModule;
    exports.AWRichTextAreaModule = AWRichTextAreaModule;
    exports.AWSectionModule = AWSectionModule;
    exports.AWStepperModule = AWStepperModule;
    exports.ScrollableContainerComponent = ScrollableContainerComponent;
    exports.AWScrollableContainerModule = AWScrollableContainerModule;
    exports.AWConfirmationModule = AWConfirmationModule;
    exports.ChooserDataSource = ChooserDataSource;
    exports.isDSChooserInitParams = isDSChooserInitParams;
    exports.HoverCardComponent = HoverCardComponent;
    exports.ListComponent = ListComponent;
    exports.AWListModule = AWListModule;
    exports.CardComponent = CardComponent;
    exports.OutlineState = OutlineState;
    exports.Datatable2Component = Datatable2Component;
    exports.DTColumn2Component = DTColumn2Component;
    exports.DTHeaderComponent2 = DTHeaderComponent2;
    exports.DTDetailRowComponent = DTDetailRowComponent;
    exports.DetailRowExpansionState = DetailRowExpansionState;
    exports.Datatable2State = Datatable2State;
    exports.isDTInitParams = isDTInitParams;
    exports.DT2DataSource = DT2DataSource;
    exports.DTMultiSelectColumnComponent = DTMultiSelectColumnComponent;
    exports.AWDatatable2Module = AWDatatable2Module;
    exports.WizardProgressComponent = WizardProgressComponent;
    exports.isOutlineNode = isOutlineNode;
    exports.AWOutlineForModule = AWOutlineForModule;
    exports.ToggleSwitchComponent = ToggleSwitchComponent;
    exports.WizardProgressModule = WizardProgressModule;
    exports.ToggleSwitchModule = ToggleSwitchModule;
    exports.AribaComponentsModule = AribaComponentsModule;
    exports.AribaComponentsTestProviderModule = AribaComponentsTestProviderModule;
    exports.SpyLifeCycleHooksDirective = SpyLifeCycleHooksDirective;
    exports.ɵp = registerComponents;
    exports.ɵq = registerComponents$1;
    exports.ɵy = BaseComponent;
    exports.ɵa = DataSource;
    exports.ɵr = InfiniteScrollComponent;
    exports.ɵh = CardZoneTitleComponent;
    exports.ɵg = CardZoneBottomComponent;
    exports.ɵf = CardZoneTopComponent;
    exports.ɵb = AWCardModule;
    exports.ɵc = CB_LIST_CONTROL_VALUE_ACCESSOR;
    exports.ɵm = CB_CONTROL_VALUE_ACCESSOR;
    exports.ɵu = DTDetailRowExpanderComponent;
    exports.ɵv = DTSingleSelectColumnComponent;
    exports.ɵx = SetCellMaxWidthDirective;
    exports.ɵw = DTDraggableRowDirective;
    exports.ɵt = DTWrapper;
    exports.ɵd = DD_CONTROL_VALUE_ACCESSOR;
    exports.ɵba = AWHoverCardModule;
    exports.ɵo = LB_CONTROL_VALUE_ACCESSOR;
    exports.ɵi = InitNestingDirective;
    exports.ɵz = AWOverlayModule;
    exports.ɵj = SidenavComponent;
    exports.ɵe = RB_LIST_CONTROL_VALUE_ACCESSOR;
    exports.ɵn = RAB_CONTROL_VALUE_ACCESSOR;
    exports.ɵl = EDITOR_CONTROL_VALUE_ACCESSOR;
    exports.ɵk = SectionActionsComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,