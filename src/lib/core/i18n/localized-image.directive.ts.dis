/**
 *
 * @license
 * Copyright 2017 SAP Ariba
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *
 *
 */
import {Directive, ElementRef, OnInit} from '@angular/core';
import {TranslateService, LangChangeEvent} from '@ngx-translate/core';
import {Http, Response} from '@angular/http';
import {isPresent} from '../utils/lang';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';

/**
 * Provides support for localized images. When internationalization is enabled we want to also
 * support images to be overriden by current locale' images
 *
 * ### Usage
 *
 * You use images as you would in regular html markup, you just need to make sure that images are
 * under assets/images folder and if you want some image to be locale specific you just place this
 * image under corresponding assets/i18/images folder keeping the same directory structure.
 *
 *
 *
 */
@Directive({
    selector: 'img'
})
export class LocalizedImageDirective implements OnInit
{
    private static readonly IMAGES = 'images';
    private static readonly IMG_CNT_TYPE = 'image/';
    private static readonly ASSETS_IMG = 'assets/' + LocalizedImageDirective.IMAGES;
    currentLang: string;
    defaultImgUrl: string;


    /**
     *
     * We need to remember original URL as fallback when localized image is not found.
     *
     */
    constructor(private _elementRef: ElementRef, private transService: TranslateService,
                private http: Http)
    {
        this.defaultImgUrl = this._elementRef.nativeElement.src;
    }


    ngOnInit(): void
    {

        this.currentLang = this.transService.currentLang;
        this.checkForLocalizedImage();

        this.transService.onLangChange.subscribe((event: LangChangeEvent) =>
        {
            this.currentLang = event.lang;
            this.checkForLocalizedImage();
        });
    }

    /**
     * This method does simple check if the resource on specific location exists and if
     * it does then img src is replaced with localized URL image
     *
     */
    checkForLocalizedImage(): void
    {
        let idx = this.defaultImgUrl.indexOf(LocalizedImageDirective.ASSETS_IMG);
        if (idx > -1) {
            this._elementRef.nativeElement.src = this.defaultImgUrl;

            let hostUrl = this.defaultImgUrl.substring(0, idx);
            let resourceRootUrl = this.defaultImgUrl.substring(
                idx + LocalizedImageDirective.ASSETS_IMG.length);
            let images = LocalizedImageDirective.IMAGES;
            let locUrl = `${hostUrl}assets/i18n/${this.currentLang}/${images}${resourceRootUrl}`;
            this.http.get(locUrl).toPromise()
                .then((res: Response) =>
                {
                    // todo check this with real server as ng serve always returns 200
                    // even the resources does not exists
                    if (isPresent(res) && isPresent(res.headers) &&
                        isPresent(res.headers.get('Content-Type')) &&
                        res.headers.get('Content-Type')
                            .indexOf(LocalizedImageDirective.IMG_CNT_TYPE) > -1) {
                        this._elementRef.nativeElement.src = locUrl;
                    }
                });

        }
    }
}
