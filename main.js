(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["main"],{

/***/ "../../dist/@aribaui/components/fesm5/aribaui-components.js":
/*!***********************************************************************************************************************!*\
  !*** /Users/i304804/Documents/ariba/projects/Open Source/MetaUI/dist/@aribaui/components/fesm5/aribaui-components.js ***!
  \***********************************************************************************************************************/
/*! exports provided: ErrorMessagesComponent, ModalContainer, ModalService, ModalComponent, CurrencyFormatPipe, BaseComponent, WidgetSizeColumns, DomUtilsService, EmbeddedItemDirective, EmbededItem, ErrorManagerService, GenericContainerComponent, IncludeComponentDirective, ComponentRegistry, AWCoreComponentModule, BaseFormComponent, DataTypeProviderRegistry, DataProvider, DataProviders, DataFinders, DataFinder, QueryType, FullTextArrayDataFinder, DATA_SOURCE, ArrayDataProvider, NgForSetDirective, AwNameDirective, AwNameStore, FormTableComponent, FormRowComponent, TopZoneComponent, LeftZoneComponent, MiddleZoneComponent, RightZoneComponent, BottomZoneComponent, AWFormTableModule, BasicNavigatorComponent, ButtonComponent, CheckBoxListComponent, CHOOSER_CONTROL_VALUE_ACCESSOR, ChooserComponent, ChooserState, DefaultSelectionState, ChooserSelectionState, CURRENCY_CONTROL_VALUE_ACCESSOR, CurrencyComponent, Money, DateAndTimeComponent, DATETIME_CONTROL_VALUE_ACCESSOR, DialogComponent, DialogHeaderComponent, DialogFooterComponent, ConfirmationComponent, ConfirmationHeaderComponent, ConfirmationFooterComponent, OverlayComponent, DropdownComponent, GCChooserState, GenericChooserComponent, HyperlinkComponent, INPUT_CONTROL_VALUE_ACCESSOR, InputFieldComponent, RadioButtonListComponent, StringComponent, TEXTAREA_CONTROL_VALUE_ACCESSOR, TextAreaComponent, OutlineForComponent, OutlineControlComponent, PageActionsComponent, PageContentComponent, PageFooterComponent, PageHeaderComponent, PageMenuItem, UserNotification, PageNotificationComponent, PageNotification, PageInitialized, PageDestroyed, PageWrapper, PageLifeCycleService, ObjectPageWrapperComponent, SectionComponent, SubSectionComponent, RichTextAreaComponent, EditorType, CheckboxComponent, RadioButtonComponent, StepperComponent, StepComponent, AWInputFieldModule, AWStringFieldModule, AWBasicNavigatorModule, AWButtonModule, AWHyperlinkModule, AWCardModule, AWCheckBoxModule, AWCheckBoxListModule, AWChooserModule, AWDropdownModule, AWCurrencyModule, AWDateAndTimeModule, AWDialogModule, AWGenericChooserModule, AWRadioButtonModule, AWRadioButtonListModule, AWTextAreaModule, AWPageNotificationModule, AWPageWrapperModule, AWRichTextAreaModule, AWSectionModule, AWStepperModule, ScrollableContainerComponent, AWScrollableContainerModule, AWConfirmationModule, ChooserDataSource, isDSChooserInitParams, HoverCardComponent, ListComponent, AWListModule, CardComponent, OutlineState, Datatable2Component, DTColumn2Component, DTHeaderComponent2, DTDetailRowComponent, DetailRowExpansionState, Datatable2State, isDTInitParams, DT2DataSource, DTMultiSelectColumnComponent, AWDatatable2Module, WizardProgressComponent, isOutlineNode, AWOutlineForModule, ToggleSwitchComponent, WizardProgressModule, ToggleSwitchModule, AribaComponentsModule, AribaComponentsTestProviderModule, SpyLifeCycleHooksDirective, ɵp, ɵq, ɵy, ɵa, ɵr, ɵh, ɵg, ɵf, ɵb, ɵc, ɵm, ɵu, ɵv, ɵx, ɵw, ɵt, ɵd, ɵba, ɵo, ɵi, ɵz, ɵj, ɵe, ɵn, ɵl, ɵk */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorMessagesComponent", function() { return ErrorMessagesComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModalContainer", function() { return ModalContainer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModalService", function() { return ModalService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModalComponent", function() { return ModalComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CurrencyFormatPipe", function() { return CurrencyFormatPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseComponent", function() { return BaseComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WidgetSizeColumns", function() { return WidgetSizeColumns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DomUtilsService", function() { return DomUtilsService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EmbeddedItemDirective", function() { return EmbeddedItemDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EmbededItem", function() { return EmbededItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorManagerService", function() { return ErrorManagerService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GenericContainerComponent", function() { return GenericContainerComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IncludeComponentDirective", function() { return IncludeComponentDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentRegistry", function() { return ComponentRegistry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWCoreComponentModule", function() { return AWCoreComponentModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseFormComponent", function() { return BaseFormComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataTypeProviderRegistry", function() { return DataTypeProviderRegistry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataProvider", function() { return DataProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataProviders", function() { return DataProviders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataFinders", function() { return DataFinders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataFinder", function() { return DataFinder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueryType", function() { return QueryType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FullTextArrayDataFinder", function() { return FullTextArrayDataFinder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DATA_SOURCE", function() { return DATA_SOURCE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrayDataProvider", function() { return ArrayDataProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgForSetDirective", function() { return NgForSetDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AwNameDirective", function() { return AwNameDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AwNameStore", function() { return AwNameStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormTableComponent", function() { return FormTableComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormRowComponent", function() { return FormRowComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopZoneComponent", function() { return TopZoneComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LeftZoneComponent", function() { return LeftZoneComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MiddleZoneComponent", function() { return MiddleZoneComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RightZoneComponent", function() { return RightZoneComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BottomZoneComponent", function() { return BottomZoneComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWFormTableModule", function() { return AWFormTableModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicNavigatorComponent", function() { return BasicNavigatorComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonComponent", function() { return ButtonComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CheckBoxListComponent", function() { return CheckBoxListComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CHOOSER_CONTROL_VALUE_ACCESSOR", function() { return CHOOSER_CONTROL_VALUE_ACCESSOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChooserComponent", function() { return ChooserComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChooserState", function() { return ChooserState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultSelectionState", function() { return DefaultSelectionState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChooserSelectionState", function() { return ChooserSelectionState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CURRENCY_CONTROL_VALUE_ACCESSOR", function() { return CURRENCY_CONTROL_VALUE_ACCESSOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CurrencyComponent", function() { return CurrencyComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Money", function() { return Money; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateAndTimeComponent", function() { return DateAndTimeComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DATETIME_CONTROL_VALUE_ACCESSOR", function() { return DATETIME_CONTROL_VALUE_ACCESSOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DialogComponent", function() { return DialogComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DialogHeaderComponent", function() { return DialogHeaderComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DialogFooterComponent", function() { return DialogFooterComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfirmationComponent", function() { return ConfirmationComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfirmationHeaderComponent", function() { return ConfirmationHeaderComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfirmationFooterComponent", function() { return ConfirmationFooterComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayComponent", function() { return OverlayComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DropdownComponent", function() { return DropdownComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GCChooserState", function() { return GCChooserState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GenericChooserComponent", function() { return GenericChooserComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HyperlinkComponent", function() { return HyperlinkComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "INPUT_CONTROL_VALUE_ACCESSOR", function() { return INPUT_CONTROL_VALUE_ACCESSOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputFieldComponent", function() { return InputFieldComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RadioButtonListComponent", function() { return RadioButtonListComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StringComponent", function() { return StringComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TEXTAREA_CONTROL_VALUE_ACCESSOR", function() { return TEXTAREA_CONTROL_VALUE_ACCESSOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextAreaComponent", function() { return TextAreaComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OutlineForComponent", function() { return OutlineForComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OutlineControlComponent", function() { return OutlineControlComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageActionsComponent", function() { return PageActionsComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageContentComponent", function() { return PageContentComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageFooterComponent", function() { return PageFooterComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageHeaderComponent", function() { return PageHeaderComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageMenuItem", function() { return PageMenuItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserNotification", function() { return UserNotification; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageNotificationComponent", function() { return PageNotificationComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageNotification", function() { return PageNotification; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageInitialized", function() { return PageInitialized; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageDestroyed", function() { return PageDestroyed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageWrapper", function() { return PageWrapper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageLifeCycleService", function() { return PageLifeCycleService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectPageWrapperComponent", function() { return ObjectPageWrapperComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SectionComponent", function() { return SectionComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubSectionComponent", function() { return SubSectionComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RichTextAreaComponent", function() { return RichTextAreaComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditorType", function() { return EditorType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CheckboxComponent", function() { return CheckboxComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RadioButtonComponent", function() { return RadioButtonComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StepperComponent", function() { return StepperComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StepComponent", function() { return StepComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWInputFieldModule", function() { return AWInputFieldModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWStringFieldModule", function() { return AWStringFieldModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWBasicNavigatorModule", function() { return AWBasicNavigatorModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWButtonModule", function() { return AWButtonModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWHyperlinkModule", function() { return AWHyperlinkModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWCardModule", function() { return AWCardModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWCheckBoxModule", function() { return AWCheckBoxModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWCheckBoxListModule", function() { return AWCheckBoxListModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWChooserModule", function() { return AWChooserModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWDropdownModule", function() { return AWDropdownModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWCurrencyModule", function() { return AWCurrencyModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWDateAndTimeModule", function() { return AWDateAndTimeModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWDialogModule", function() { return AWDialogModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWGenericChooserModule", function() { return AWGenericChooserModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWRadioButtonModule", function() { return AWRadioButtonModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWRadioButtonListModule", function() { return AWRadioButtonListModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWTextAreaModule", function() { return AWTextAreaModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWPageNotificationModule", function() { return AWPageNotificationModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWPageWrapperModule", function() { return AWPageWrapperModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWRichTextAreaModule", function() { return AWRichTextAreaModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWSectionModule", function() { return AWSectionModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWStepperModule", function() { return AWStepperModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollableContainerComponent", function() { return ScrollableContainerComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWScrollableContainerModule", function() { return AWScrollableContainerModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWConfirmationModule", function() { return AWConfirmationModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChooserDataSource", function() { return ChooserDataSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDSChooserInitParams", function() { return isDSChooserInitParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HoverCardComponent", function() { return HoverCardComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListComponent", function() { return ListComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWListModule", function() { return AWListModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CardComponent", function() { return CardComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OutlineState", function() { return OutlineState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Datatable2Component", function() { return Datatable2Component; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DTColumn2Component", function() { return DTColumn2Component; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DTHeaderComponent2", function() { return DTHeaderComponent2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DTDetailRowComponent", function() { return DTDetailRowComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DetailRowExpansionState", function() { return DetailRowExpansionState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Datatable2State", function() { return Datatable2State; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDTInitParams", function() { return isDTInitParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DT2DataSource", function() { return DT2DataSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DTMultiSelectColumnComponent", function() { return DTMultiSelectColumnComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWDatatable2Module", function() { return AWDatatable2Module; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WizardProgressComponent", function() { return WizardProgressComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isOutlineNode", function() { return isOutlineNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWOutlineForModule", function() { return AWOutlineForModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToggleSwitchComponent", function() { return ToggleSwitchComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WizardProgressModule", function() { return WizardProgressModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToggleSwitchModule", function() { return ToggleSwitchModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AribaComponentsModule", function() { return AribaComponentsModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AribaComponentsTestProviderModule", function() { return AribaComponentsTestProviderModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpyLifeCycleHooksDirective", function() { return SpyLifeCycleHooksDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵp", function() { return registerComponents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵq", function() { return registerComponents$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵy", function() { return BaseComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function() { return DataSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵr", function() { return InfiniteScrollComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵh", function() { return CardZoneTitleComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵg", function() { return CardZoneBottomComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵf", function() { return CardZoneTopComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function() { return AWCardModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function() { return CB_LIST_CONTROL_VALUE_ACCESSOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵm", function() { return CB_CONTROL_VALUE_ACCESSOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵu", function() { return DTDetailRowExpanderComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵv", function() { return DTSingleSelectColumnComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵx", function() { return SetCellMaxWidthDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵw", function() { return DTDraggableRowDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵt", function() { return DTWrapper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function() { return DD_CONTROL_VALUE_ACCESSOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵba", function() { return AWHoverCardModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵo", function() { return LB_CONTROL_VALUE_ACCESSOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵi", function() { return InitNestingDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵz", function() { return AWOverlayModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵj", function() { return SidenavComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function() { return RB_LIST_CONTROL_VALUE_ACCESSOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵn", function() { return RAB_CONTROL_VALUE_ACCESSOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵl", function() { return EDITOR_CONTROL_VALUE_ACCESSOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵk", function() { return SectionActionsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _aribaui_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aribaui/core */ "../../dist/@aribaui/core/fesm5/aribaui-core.js");
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "../../node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/platform-browser */ "../../node_modules/@angular/platform-browser/fesm5/platform-browser.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common */ "../../node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/_esm5/index.js");
/* harmony import */ var primeng_components_inputtext_inputtext__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! primeng/components/inputtext/inputtext */ "../../node_modules/primeng/components/inputtext/inputtext.js");
/* harmony import */ var primeng_components_inputtext_inputtext__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(primeng_components_inputtext_inputtext__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ "../../node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var primeng_primeng__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! primeng/primeng */ "../../node_modules/primeng/primeng.js");
/* harmony import */ var primeng_primeng__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(primeng_primeng__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/animations */ "../../node_modules/@angular/animations/fesm5/animations.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/router */ "../../node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var primeng_components_utils_objectutils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! primeng/components/utils/objectutils */ "../../node_modules/primeng/components/utils/objectutils.js");
/* harmony import */ var primeng_components_utils_objectutils__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(primeng_components_utils_objectutils__WEBPACK_IMPORTED_MODULE_12__);














/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * When we have a custom component like dropdown, radiobuttonlist and
 * many more we want to provide a custom content to it like so:
 *
 * ```
 *  <aw-dropdown [list]="listOfUsers" let somehowGetItemOut>
 *      {{item.userName}}
 *
 *   <aw-dropdown
 *
 * ```
 * Who else would know how to render list of objects..
 *
 * But its not possible in current form. if I do not provide Angular some as they call it this
 * syntactic sugar *,
 *
 *
 * ```
 *  <aw-dropdown *mySugerDirective=.....>
 *      {{item.userName}}
 *
 *   <aw-dropdown
 * ```
 *
 *
 * then angular will not know  inside is a template and I wont be able to get hold of TemplateRef
 * inside the component
 *
 * So the only way I found (expecting I do not want to change anything in terms of bindings and the
 * signature I use it. I have to use it like this:
 *
 * ```
 *  <aw-dropdown [list]="listOfUsers" let somehowGetItemOut>
 *      <ng-template let-item> {{item.userName}}</ng-template>
 *
 *   <aw-dropdown
 *
 * ```
 *
 *  This way it could work. Since I am inside ngFor I want to render the item into the correct
 * viewContainer of ngFor's current item.
 *
 *  This way I can also expose item outside using Angular's special local variable called:
 * $implicit.
 *
 * This gets even more complex if we try to pass this template 2 levels down, like in case of
 * RadioButtonList. But later on I might want to refactor this into custom NG FOR
 *
 * @deprecated in favor of ngTemplateOutlet (will be removed in the next version)
 *
 */
var EmbeddedItemDirective = /** @class */ (function () {
    function EmbeddedItemDirective(_viewContainer) {
        this._viewContainer = _viewContainer;
    }
    Object.defineProperty(EmbeddedItemDirective.prototype, "item", {
        set: /**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            this._implicitValue = item;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     */
    /**
     *
     * @param {?} changes
     * @return {?}
     */
    EmbeddedItemDirective.prototype.ngOnChanges = /**
     *
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._viewRef)) {
            this._viewContainer.remove(this._viewContainer.indexOf(this._viewRef));
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.embeddedItem)) {
            var /** @type {?} */ context = new EmbededItem(this._implicitValue);
            this._viewRef = this._viewContainer.createEmbeddedView(this.embeddedItem, context);
        }
    };
    EmbeddedItemDirective.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: '[embeddedItem]' },] },
    ];
    /** @nocollapse */
    EmbeddedItemDirective.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] }
    ]; };
    EmbeddedItemDirective.propDecorators = {
        embeddedItem: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        item: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return EmbeddedItemDirective;
}());
/**
 * Wrapper class around Angular's EmbeddedViewRef.context()
 *
 */
var  /**
 * Wrapper class around Angular's EmbeddedViewRef.context()
 *
 */
EmbededItem = /** @class */ (function () {
    function EmbededItem($implicit) {
        this.$implicit = $implicit;
    }
    return EmbededItem;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * GenericContainerComponent is used by include-component.directive to dynamically create an
 * HTMLElement and use this element to wrap a child component. This is very useful when we want to
 * modify a child by wrapping it with a border, a background, or bold its text.
 *
 * The wrapper element is dynamically created. It's element is specified by the tagName property in
 * the bindings \@Input.
 *
 *  ### Example.  Directly in html
 *
 *   app.html
 *      <aw-generic-container tagName="tagName" bindings="bindings">
 *          <my-component ..bindings..></my-component>
 *      </aw-generic-container>
 *
 *   app.component.ts
 *
 *       tagName = (bBold) ? 'h1' : 'span';
 *       bindings = {  style: 'background-color: red' }
 *
 */
var GenericContainerComponent = /** @class */ (function () {
    /**
     * param renderer - Renderer is used to create 'tagName' element.
     */
    function GenericContainerComponent(renderer, element) {
        this.renderer = renderer;
        this.element = element;
        this.nativeElement = element.nativeElement;
    }
    /**
     * During the initialization, verify that at least one input has been set.
     */
    /**
     * During the initialization, verify that at least one input has been set.
     * @return {?}
     */
    GenericContainerComponent.prototype.ngOnInit = /**
     * During the initialization, verify that at least one input has been set.
     * @return {?}
     */
    function () {
        // If there's no input, this component wouldn't know what to do and throw exception.
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.bindings) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.tagName)) {
            throw new Error('GenericContainerComponent input bindings or tagName ' +
                'have not been set.');
        }
        // If the tagName is blank, the get it from bindings.
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.tagName)) {
            this.tagName = this.bindings.get('tagName');
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.tagName)) {
                this.tagName = GenericContainerComponent.DefaultTagName;
            }
        }
        // Save first added
        this.childElement = this.nativeElement.firstChild;
        this.doRender();
    };
    /**
     * @return {?}
     */
    GenericContainerComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.childElement) &&
            this.childElement.parentNode !== this.nativeElement.firstChild) {
            this.nativeElement.firstChild.appendChild(this.childElement);
        }
    };
    /**
     * After content has been initialized. Create the tagName element. Apply all the bindings on to
     * the element as attribute. Finally, move the child element, <ng-content>, to inside the
     * wrapper component.
     * @return {?}
     */
    GenericContainerComponent.prototype.doRender = /**
     * After content has been initialized. Create the tagName element. Apply all the bindings on to
     * the element as attribute. Finally, move the child element, <ng-content>, to inside the
     * wrapper component.
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ el = this.renderer.createElement(this.tagName);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.nativeElement)) {
            this.renderer.appendChild(this.nativeElement, el);
        }
        // Loop through all the bindings and add them to the element.
        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].iterable(this.bindings).forEach(function (v, k) {
            _this.renderer.setStyle(el, k, v);
        });
        // Attach the component to this divElement.
        el.appendChild(this.childElement);
    };
    /**
     * Default tagName if none is specified inside bindings.
     *
     */
    GenericContainerComponent.DefaultTagName = 'div';
    GenericContainerComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-generic-container',
                    template: '<ng-content></ng-content>',
                    styles: []
                },] },
    ];
    /** @nocollapse */
    GenericContainerComponent.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
    ]; };
    GenericContainerComponent.propDecorators = {
        bindings: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        tagName: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return GenericContainerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *  Base component shares common functionality among all the components (layouts, widgets).
 *
 * @abstract
 */
var BaseComponent = /** @class */ (function () {
    function BaseComponent(env) {
        this.env = env;
        /**
         * Adds disabled flag to the component
         *
         */
        this.disabled = false;
        /**
         * Weather this component is visible
         * Default is false;
         */
        this.visible = false;
        /**
         * Tell  the component if we are in editing mode.
         *
         */
        this.editable = true;
        /**
         * Removes padding from the component. Usually used when we are nesting other component with
         * its own grid.
         */
        this.omitPadding = false;
        /**
         * Prefix for the correct asset path
         */
        this.assetFolder = 'assets';
        this.extBindings = new Map();
        this.omitPadding = false;
    }
    /**
     * @return {?}
     */
    BaseComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.assetFolder = this.env.getValue(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["AppConfig"].AssetFolder);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    BaseComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     * @return {?}
     */
    BaseComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    BaseComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    BaseComponent.propDecorators = {
        disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        visible: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        editable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        width: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        height: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        styleClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        omitPadding: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return BaseComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {number} */
var WidgetSizeColumns = {
    xsmall: 1,
    small: 3,
    medium: 6,
    large: 9,
    xlarge: 12,
};
WidgetSizeColumns[WidgetSizeColumns.xsmall] = "xsmall";
WidgetSizeColumns[WidgetSizeColumns.small] = "small";
WidgetSizeColumns[WidgetSizeColumns.medium] = "medium";
WidgetSizeColumns[WidgetSizeColumns.large] = "large";
WidgetSizeColumns[WidgetSizeColumns.xlarge] = "xlarge";
/**
 *  BaseFormComponnet extends BaseComponent for add specific form behavior
 *
 * @abstract
 */
var BaseFormComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(BaseFormComponent, _super);
    /**
     * Some of the BaseFormComponent can wrap other component and in these cases we want to
     * inherit some of the behavior from parent
     *
     * @Inject(Environment) public env: Environment : is tem a workaround as without inject
     * on this specific component it complains that Environment is unresolved symbol
     *
     */
    function BaseFormComponent(env, parentContainer) {
        var _this = _super.call(this, env) || this;
        _this.env = env;
        _this.parentContainer = parentContainer;
        /**
         *
         * Is current element visible
         */
        _this.hidden = false;
        /**
         * Renders required flex around the component
         *
         */
        _this.required = false;
        /**
         *  a text displayed when value is empty or NULL
         */
        _this.placeHolder = '';
        /**
         * Identify if this control is used directly or if its part of some other control
         * e.g. GenericChooser and managed by this control.
         * Meaning State is mananged outside of this component
         *
         */
        _this.isStandalone = true;
        _this.onModelChanged = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["noop"];
        _this.onModelTouched = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["noop"];
        return _this;
    }
    /**
     * @return {?}
     */
    BaseFormComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.parentContainer)) {
            this.formGroup = this.parentContainer.formGroup;
            this.editable = this.parentContainer.editable;
        }
        this.checkInitForm();
    };
    /**
     * Make sure that we have available formGroup and Name and ID
     *
     */
    /**
     * Make sure that we have available formGroup and Name and ID
     *
     * @return {?}
     */
    BaseFormComponent.prototype.checkInitForm = /**
     * Make sure that we have available formGroup and Name and ID
     *
     * @return {?}
     */
    function () {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.env.currentForm)) {
            this.env.currentForm = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormGroup"]({});
        }
        /**
                 * Todo: Right now I just need to initialize name , but ideally it needs to be generated
                 * number basedon some semantics app.page.component if there are more component on the page
                 * then app.page.componentNumber. Simple solution is to is to get Elementref and query it.
                 */
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.name)) {
            this.name = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["uuid"])();
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.id)) {
            this.id = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["uuid"])();
        }
    };
    /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    BaseFormComponent.prototype.doRegister = /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function (name, value) {
        var /** @type {?} */ fControl;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.formGroup.controls[name])) {
            this.formGroup.registerControl(name, new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"](value));
            fControl = /** @type {?} */ (this.formGroup.controls[name]);
        }
        else {
            fControl = /** @type {?} */ (this.formGroup.controls[name]);
            var /** @type {?} */ updatedValue = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(fControl.value) ? fControl.value : value;
            fControl.patchValue(updatedValue, { onlySelf: true, emitEvent: false });
        }
        return fControl;
    };
    /**
     * When we are dealing with Forms this is a helper method to register control
     *
     *
     * @param value default value to be pre-set
     */
    /**
     * When we are dealing with Forms this is a helper method to register control
     *
     *
     * @param {?} value default value to be pre-set
     * @return {?}
     */
    BaseFormComponent.prototype.registerFormControl = /**
     * When we are dealing with Forms this is a helper method to register control
     *
     *
     * @param {?} value default value to be pre-set
     * @return {?}
     */
    function (value) {
        this.formControl = this.doRegister(this.name, value);
        if (this.disabled) {
            this.formControl.disable();
        }
    };
    Object.defineProperty(BaseFormComponent.prototype, "formGroup", {
        get: /**
         * @return {?}
         */
        function () {
            return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._formGroup) ? this._formGroup : this.env.currentForm;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._formGroup = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Indicates if we can pass field type as a binding to the components. e.g. InputField need
     * such type to correctly render input type=text, number
     *
     * todo: is this needed? can we maybe pass this to the formRow?
     */
    /**
     * Indicates if we can pass field type as a binding to the components. e.g. InputField need
     * such type to correctly render input type=text, number
     *
     * todo: is this needed? can we maybe pass this to the formRow?
     * @return {?}
     */
    BaseFormComponent.prototype.canSetType = /**
     * Indicates if we can pass field type as a binding to the components. e.g. InputField need
     * such type to correctly render input type=text, number
     *
     * todo: is this needed? can we maybe pass this to the formRow?
     * @return {?}
     */
    function () {
        return false;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    BaseFormComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    BaseFormComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChanged = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    BaseFormComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /*
         *  Supported layout constants. It is expected there will be more options as we currently
         *  support only these two there will be other variations of it. e.g. for stacked it will not
         *  be 1 columns like it is now but multiple columns
         *
         */
    BaseFormComponent.LayoutStacked = 'stacked';
    BaseFormComponent.LayoutInline = 'inline';
    /** @nocollapse */
    BaseFormComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"],] }] },
        { type: BaseFormComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return BaseFormComponent; }),] }] }
    ]; };
    BaseFormComponent.propDecorators = {
        name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        hidden: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        placeHolder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        isStandalone: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        formGroup: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return BaseFormComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Simple component rendering values in the read only mode. Just needed some component used
 * to render Strings in read only mode
 *
 *
 *  ### Example
 *
 * Using it inside form container along with label
 *
 *
 *  ```
 * \@Component({
 *              selector: 'userInfo' ,
 *              template: `
 *                      <aw-form-table [editable]="false" >
 *                          <aw-form-row [name]="fieldName"  [label]="label">
 *                                 <aw-string [value]="inputValue" ></aw-string>
 *                           </aw-form-row>
 *                      </aw-form-table>
 *
 *                  `
 *          })
 *          export class UserProfileComponent
 *          {
 *              inputValue: string = 'Some text';
 *              inputType: string = 'string';
 *              fieldName: string = 'firstName';
 *              label: string = 'My Name';
 *              required: boolean = true;
 *              editing: boolean = true;
 *              labelsOnTop: boolean = false;
 *
 *          }
 *
 *  ```
 *
 * You can also pass html tags.
 *
 */
var StringComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(StringComponent, _super);
    function StringComponent(env, sanitizer, parentContainer) {
        var _this = _super.call(this, env, parentContainer) || this;
        _this.env = env;
        _this.sanitizer = sanitizer;
        _this.parentContainer = parentContainer;
        /**
         *  Value to be interpolated
         *
         */
        _this._value = '';
        return _this;
    }
    Object.defineProperty(StringComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.sanitizer.bypassSecurityTrustHtml(this._value);
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._value = value;
        },
        enumerable: true,
        configurable: true
    });
    StringComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-string',
                    template: "\n        <span class=\"w-string-field\" [innerHTML]=\"value\"></span>\n    ",
                    styles: [".w-string-field{display:inline-block}"]
                },] },
    ];
    /** @nocollapse */
    StringComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_4__["DomSanitizer"] },
        { type: BaseFormComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return BaseFormComponent; }),] }] }
    ]; };
    StringComponent.propDecorators = {
        value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return StringComponent;
}(BaseFormComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * A class holding a references to components. The methods are self-explanatory.
 *
 */
var ComponentRegistry = /** @class */ (function () {
    function ComponentRegistry(env) {
        this.env = env;
        this._nameToType = new Map();
    }
    /**
     * @param {?} references
     * @return {?}
     */
    ComponentRegistry.prototype.initialize = /**
     * @param {?} references
     * @return {?}
     */
    function (references) {
        this.registerTypes(references);
        var /** @type {?} */ promise = new Promise(function (resolve) {
            resolve(true);
        });
        return promise;
    };
    /**
     * @param {?} name
     * @param {?} type
     * @return {?}
     */
    ComponentRegistry.prototype.registerType = /**
     * @param {?} name
     * @param {?} type
     * @return {?}
     */
    function (name, type) {
        if (!this.nameToType.has(name)) {
            this._nameToType.set(name, type);
        }
    };
    /**
     * @param {?} references
     * @return {?}
     */
    ComponentRegistry.prototype.registerTypes = /**
     * @param {?} references
     * @return {?}
     */
    function (references) {
        var _this = this;
        if (!Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isStringMap"])(references)) {
            return;
        }
        Object.keys(references).forEach(function (name) {
            _this.registerType(name, references[name]);
        });
    };
    Object.defineProperty(ComponentRegistry.prototype, "nameToType", {
        get: /**
         * @return {?}
         */
        function () {
            return this._nameToType;
        },
        enumerable: true,
        configurable: true
    });
    ComponentRegistry.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] },
    ];
    /** @nocollapse */
    ComponentRegistry.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] }
    ]; };
    return ComponentRegistry;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *  `IncludeComponent` directive dynamically instantiate and insert a components into the screen
 * based on the name. It can accepts bindings as well which will be automatically bound and applied
 * to the component
 *
 *  ### usage:
 *
 *  Instead of inserting component in the way:
 *
 *  ```
 *    <textfield value="some value">
 *
 *  ```
 *
 *  you can do so dynamically like this:
 *
 * ```
 *  <aw-include-component 'TextfieldComponent' [bindings]=bindings ></aw-include-component>
 * ```
 *
 * This is the main building block to dynamically generated UI.
 *
 *
 * Todo: Currently the way Angular API work and we use it to create programatically components
 * is too complext we need to create everything 3 different calls to place a component to the
 * container. What I want is is to create some kind of representation of ContainerElement and this
 * can be also parent for our BaseComponent with method add and remove content. Then we could have
 * some AWContent.
 *
 * e.g.: to replace applyContentElementIfAny where we have several calls to create and add
 * component to the view.
 *
 * ```ts
 *  let containerElement = AWConcreteTemplate(viewContainer, factoryResolver)
 *  containerElement.add('Clck Me')
 * ```
 *
 * To assemble different components together - not only adding string content
 *
 * ```ts
 *  let content = new AWContent(ButtonComponent, bindingsMap)
 *  content.add('Click Me');
 *  containerElement.add(content)
 *
 * ```
 *
 * add more component hierarchy:
 *
 * ```ts
 *  let content = new AWContent(HoverCardComponnets, bindingsMap)
 *  content.add(createLayout();
 *  containerElement.add(content)
 *
 * ```
 *
 *
 *
 *
 */
var IncludeComponentDirective = /** @class */ (function () {
    function IncludeComponentDirective(viewContainer, factoryResolver, cd, compRegistry) {
        this.viewContainer = viewContainer;
        this.factoryResolver = factoryResolver;
        this.cd = cd;
        this.compRegistry = compRegistry;
        /**
         * I use this flag to identify that component is rendering for first time or its updated during
         * change detection
         *
         */
        this.initRenderInProgress = false;
        /**
         * Not sure if we need this, but want to keep it here or maybe move it to some service so we
         * can cache created components and maybe reuse them.
         *
         */
        this.componentReferences = new Map();
        this.bindings = new Map();
    }
    /**
     * @return {?}
     */
    IncludeComponentDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initRenderInProgress = true;
        // todo: check if this the right lifecycle callback, this is called only once and you want
        // to probably listen for changes, and change dection decide there is some change and we
        // need to re-draw the view
        this.viewContainer.clear();
        this.doRenderComponent();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    IncludeComponentDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(changes['name']) &&
            (changes['name'].currentValue !== changes['name'].previousValue)) {
            this.viewContainer.clear();
            this.doRenderComponent();
        }
    };
    /**
     * @return {?}
     */
    IncludeComponentDirective.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        this.initRenderInProgress = false;
    };
    /**
     * @return {?}
     */
    IncludeComponentDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // check to see if we need to render and reposition DOM element both for wrapper and
        // content
        this.createWrapperElementIfAny();
        this.createContentElementIfAny();
    };
    /**
     * @return {?}
     */
    IncludeComponentDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * Handles a case where we need to resolve additional component and wrap the current one.
     * Just like reateContentElementIfAny() this method needs to be executed after all
     * is created and initialized (inside the ngAfterViewInit() )
     *
     */
    /**
     * Handles a case where we need to resolve additional component and wrap the current one.
     * Just like reateContentElementIfAny() this method needs to be executed after all
     * is created and initialized (inside the ngAfterViewInit() )
     *
     * @return {?}
     */
    IncludeComponentDirective.prototype.createWrapperElementIfAny = /**
     * Handles a case where we need to resolve additional component and wrap the current one.
     * Just like reateContentElementIfAny() this method needs to be executed after all
     * is created and initialized (inside the ngAfterViewInit() )
     *
     * @return {?}
     */
    function () {
    };
    /**
     * Renders a component into actual View Container. The process goes as this.
     *  1. We retrieve component Type based on the component name, which creates componentRef
     *  2. Place the component onto the screen
     *  3. Read component metadata, mainly INPUTs and apply bindings for each of them
     *  4. Manually spin change detection to update the screen. Mainly for case where I need to
     * redraw a screen
     */
    /**
     * Renders a component into actual View Container. The process goes as this.
     *  1. We retrieve component Type based on the component name, which creates componentRef
     *  2. Place the component onto the screen
     *  3. Read component metadata, mainly INPUTs and apply bindings for each of them
     *  4. Manually spin change detection to update the screen. Mainly for case where I need to
     * redraw a screen
     * @return {?}
     */
    IncludeComponentDirective.prototype.doRenderComponent = /**
     * Renders a component into actual View Container. The process goes as this.
     *  1. We retrieve component Type based on the component name, which creates componentRef
     *  2. Place the component onto the screen
     *  3. Read component metadata, mainly INPUTs and apply bindings for each of them
     *  4. Manually spin change detection to update the screen. Mainly for case where I need to
     * redraw a screen
     * @return {?}
     */
    function () {
        var _this = this;
        this.placeTheComponent();
        // this.currentComponent.changeDetectorRef.detach();
        this.applyBindings(this.componentReference(), this.currentComponent, this.bindings);
        // this.currentComponent.changeDetectorRef.detectChanges();
        // Still not sure about this what all I should release here.
        this.currentComponent.onDestroy(function () {
            // this.bindings.clear();
            // this.bindings = undefined;
            //
            // this.componentReferences.clear();
            // this.componentReferences = undefined;
            // this.bindings.clear();
            // this.bindings = undefined;
            //
            // this.componentReferences.clear();
            // this.componentReferences = undefined;
            _this.destroy();
        });
    };
    /**
     * Place actual component onto the screen using ViewContainerRef
     *
     */
    /**
     * Place actual component onto the screen using ViewContainerRef
     *
     * @return {?}
     */
    IncludeComponentDirective.prototype.placeTheComponent = /**
     * Place actual component onto the screen using ViewContainerRef
     *
     * @return {?}
     */
    function () {
        var /** @type {?} */ reference = this.componentReference();
        this.currentComponent = this.viewContainer.createComponent(reference.resolvedCompFactory);
    };
    /**
     * When inserting Component that needs to have a content like e.g. hyperlink or button
     *
     * ```
     *   <button> MY NG CONTENT </button>
     *
     * ```
     *  this method applies and insert a child content into the main component. This method insert
     * a simple string. We are not wrapping existing component with another component here.
     *
     * @return need to run detect changes ? default is false
     */
    /**
     * When inserting Component that needs to have a content like e.g. hyperlink or button
     *
     * ```
     *   <button> MY NG CONTENT </button>
     *
     * ```
     *  this method applies and insert a child content into the main component. This method insert
     * a simple string. We are not wrapping existing component with another component here.
     *
     * @return {?} need to run detect changes ? default is false
     */
    IncludeComponentDirective.prototype.createContentElementIfAny = /**
     * When inserting Component that needs to have a content like e.g. hyperlink or button
     *
     * ```
     *   <button> MY NG CONTENT </button>
     *
     * ```
     *  this method applies and insert a child content into the main component. This method insert
     * a simple string. We are not wrapping existing component with another component here.
     *
     * @return {?} need to run detect changes ? default is false
     */
    function () {
        var /** @type {?} */ detectChanges = false;
        var /** @type {?} */ ngContent = this.ngContent();
        var /** @type {?} */ ngContentElement = this.ngContentElement();
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(ngContent)) {
            var /** @type {?} */ awContentComponent = this.factoryResolver.resolveComponentFactory(StringComponent);
            var /** @type {?} */ component = this.viewContainer.createComponent(awContentComponent, 0);
            (/** @type {?} */ (component.instance)).value = ngContent;
            var /** @type {?} */ awContentContainer = this.currentComponent.location.nativeElement.firstChild;
            awContentContainer.appendChild(component.location.nativeElement);
            detectChanges = true;
        }
        else if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(ngContentElement)) ;
        return detectChanges;
    };
    /**
     *
     * Retrieve a NG Content from binding list and remove it so it its not prepagated down when
     * applying other bindings.
     *
     */
    /**
     *
     * Retrieve a NG Content from binding list and remove it so it its not prepagated down when
     * applying other bindings.
     *
     * @return {?}
     */
    IncludeComponentDirective.prototype.ngContent = /**
     *
     * Retrieve a NG Content from binding list and remove it so it its not prepagated down when
     * applying other bindings.
     *
     * @return {?}
     */
    function () {
        var /** @type {?} */ content;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(content = this.bindings.get(IncludeComponentDirective.NgContent))) {
            this.bindings.delete(IncludeComponentDirective.NgContent);
        }
        return content;
    };
    /**
     * @return {?}
     */
    IncludeComponentDirective.prototype.ngContentElement = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ content;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(content = this.bindings.get(IncludeComponentDirective.NgContentElement))) {
            this.bindings.delete(IncludeComponentDirective.NgContentElement);
        }
        return content;
    };
    /**
     * We need to convert a component name to actual a type and then use ComponentFactoryResolver
     * to instantiate a a component and save its information into our component references. The
     * reason why we have this component reference is we need to store Angular's component metadata
     * so we can iterate thru all the inputs and bind them to the context.
     *
     * returns {ComponentReference} a reference representing a compoent currently being rendered
     */
    /**
     * We need to convert a component name to actual a type and then use ComponentFactoryResolver
     * to instantiate a a component and save its information into our component references. The
     * reason why we have this component reference is we need to store Angular's component metadata
     * so we can iterate thru all the inputs and bind them to the context.
     *
     * returns {ComponentReference} a reference representing a compoent currently being rendered
     * @return {?}
     */
    IncludeComponentDirective.prototype.componentReference = /**
     * We need to convert a component name to actual a type and then use ComponentFactoryResolver
     * to instantiate a a component and save its information into our component references. The
     * reason why we have this component reference is we need to store Angular's component metadata
     * so we can iterate thru all the inputs and bind them to the context.
     *
     * returns {ComponentReference} a reference representing a compoent currently being rendered
     * @return {?}
     */
    function () {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.resolvedComponentRef)) {
            return this.resolvedComponentRef;
        }
        var /** @type {?} */ currType = this.resolveComponentType();
        var /** @type {?} */ componentFactory = this.factoryResolver
            .resolveComponentFactory(currType);
        var /** @type {?} */ componentMeta = this.resolveDirective(componentFactory);
        var /** @type {?} */ compReference = {
            metadata: componentMeta,
            resolvedCompFactory: componentFactory,
            componentType: currType,
            componentName: this.name
        };
        this.resolvedComponentRef = compReference;
        return compReference;
    };
    /**
     * Iterates thru ComponentMetadata @Inputs() and check if we have available binding inside the
     * 'this.bindings'
     */
    /**
     * Iterates thru ComponentMetadata \@Inputs() and check if we have available binding inside the
     * 'this.bindings'
     * @param {?} cRef
     * @param {?} component
     * @param {?} bindings
     * @return {?}
     */
    IncludeComponentDirective.prototype.applyBindings = /**
     * Iterates thru ComponentMetadata \@Inputs() and check if we have available binding inside the
     * 'this.bindings'
     * @param {?} cRef
     * @param {?} component
     * @param {?} bindings
     * @return {?}
     */
    function (cRef, component, bindings) {
        var /** @type {?} */ inputs = cRef.metadata.inputs;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(inputs) || inputs.length === 0) {
            return;
        }
        // should we do any type conversion?
        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].iterable(bindings).forEach(function (v, k) {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(component.instance[k])) {
                component.instance[k] = v;
            }
        });
    };
    /**
     * Resolves a component Type based on the string literal
     *
     * @returns component type used by `ComponentFactoryResolver`
     *
     * todo: rename the method so its clear that it returns component type based on string.
     */
    /**
     * Resolves a component Type based on the string literal
     *
     * @return {?} component type used by `ComponentFactoryResolver`
     *
     * todo: rename the method so its clear that it returns component type based on string.
     */
    IncludeComponentDirective.prototype.resolveComponentType = /**
     * Resolves a component Type based on the string literal
     *
     * @return {?} component type used by `ComponentFactoryResolver`
     *
     * todo: rename the method so its clear that it returns component type based on string.
     */
    function () {
        var /** @type {?} */ componentType = this.compRegistry.nameToType.get(this.name);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(componentType)) {
            Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(false, this.name + ' component does not exists. Create Dummy Component instead' +
                ' of throwing this error');
            return;
        }
        return componentType;
    };
    /**
     * @param {?} compFactory
     * @return {?}
     */
    IncludeComponentDirective.prototype.resolveDirective = /**
     * @param {?} compFactory
     * @return {?}
     */
    function (compFactory) {
        var /** @type {?} */ compMeta = {
            inputs: [],
            outputs: []
        };
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(compFactory.inputs) && compFactory.inputs.length > 0) {
            compFactory.inputs.forEach(function (input) {
                compMeta.inputs.push(input.propName);
            });
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(compFactory.outputs) && compFactory.outputs.length > 0) {
            compFactory.outputs.forEach(function (output) {
                compMeta.outputs.push(output.propName);
            });
        }
        return compMeta;
    };
    /**
     * @return {?}
     */
    IncludeComponentDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.currentComponent)) {
            this.currentComponent.destroy();
            this.currentComponent = undefined;
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.viewContainer)) {
            this.viewContainer.clear();
        }
    };
    /**
     * @return {?}
     */
    IncludeComponentDirective.prototype.destroy = /**
     * @return {?}
     */
    function () {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.currentComponent)) {
            this.currentComponent = null;
            this.resolvedComponentRef = null;
        }
    };
    IncludeComponentDirective.NgContent = 'ngcontent';
    IncludeComponentDirective.NgContentElement = 'ngcontentElement';
    IncludeComponentDirective.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                    selector: 'aw-include-component'
                },] },
    ];
    /** @nocollapse */
    IncludeComponentDirective.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"] },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
        { type: ComponentRegistry }
    ]; };
    IncludeComponentDirective.propDecorators = {
        name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        bindings: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return IncludeComponentDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Error Manager is a service used by Forms components to map error codes into meaningful messages.
 * Currently it does not have much but once we plug in localization it will make more sense
 *
 *
 * todo: Once ng-translate is implemented replace this with ng-translate functionality so we can
 * externalize these messages into locale files.
 *
 */
var ErrorManagerService = /** @class */ (function () {
    function ErrorManagerService() {
        this.messages = {
            'required': 'Required field',
            'minlength': 'Field does not meet minimum length',
            'maxlength': 'Field does not meet maximum length',
            'customMsg': '%s',
            'metavalid': '%s'
        };
    }
    /**
     * @param {?} validatorName
     * @param {?=} validatorValue
     * @return {?}
     */
    ErrorManagerService.prototype.errorMessage = /**
     * @param {?} validatorName
     * @param {?=} validatorValue
     * @return {?}
     */
    function (validatorName, validatorValue) {
        var /** @type {?} */ message = this.messages[validatorName];
        if (_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["StringWrapper"].contains(message, '%s')) {
            // todo: use ng-translate with proper message formatting
            return _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["StringWrapper"].replace(message, '%s', validatorValue.msg);
        }
        return message;
    };
    ErrorManagerService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] },
    ];
    /** @nocollapse */
    ErrorManagerService.ctorParameters = function () { return []; };
    return ErrorManagerService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * ErrorMessagesComponent is used by form's component like FormRow to print its validation errors.
 * Its  based on ModelDriven (Reactive forms) and it reads errors from FormControl
 *
 *
 *
 */
var ErrorMessagesComponent = /** @class */ (function () {
    function ErrorMessagesComponent(errManager) {
        this.errManager = errManager;
    }
    /**
     * @return {?}
     */
    ErrorMessagesComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    ErrorMessagesComponent.prototype.hasMessage = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ msg = this.errorMsg;
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(msg);
    };
    Object.defineProperty(ErrorMessagesComponent.prototype, "errorMsg", {
        /**
         * Retrieve a messages if any registered by added validators
         *
         */
        get: /**
         * Retrieve a messages if any registered by added validators
         *
         * @return {?}
         */
        function () {
            for (var /** @type {?} */ propertyName in this.control.errors) {
                if (this.control.errors.hasOwnProperty(propertyName) && this.control.touched) {
                    return this.errManager.errorMessage(propertyName, this.control.errors[propertyName]);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     * Show errors? We currently shows errors if the control is not valid, it was touched by user.
     * Most of the type on blur event  and at last its not pristine anymore (its dirty)
     *
     */
    /**
     *
     * Show errors? We currently shows errors if the control is not valid, it was touched by user.
     * Most of the type on blur event  and at last its not pristine anymore (its dirty)
     *
     * @return {?}
     */
    ErrorMessagesComponent.prototype.showErrors = /**
     *
     * Show errors? We currently shows errors if the control is not valid, it was touched by user.
     * Most of the type on blur event  and at last its not pristine anymore (its dirty)
     *
     * @return {?}
     */
    function () {
        return !this.control.valid && !this.control.pristine && this.control.touched;
    };
    ErrorMessagesComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'a-error-messages',
                    template: "\n            <div class=\"ui-g\">\n                    <small *ngIf=\"hasMessage()\"\n                        class=\"ui-g-12 ui-message ui-messages-error ui-corner-all\">\n                        {{ errorMsg }}\n                    </small>\n            </div>\n    ",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    ErrorMessagesComponent.ctorParameters = function () { return [
        { type: ErrorManagerService }
    ]; };
    ErrorMessagesComponent.propDecorators = {
        control: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return ErrorMessagesComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Modal service is used to to create modal dialogs. It creates modal dialogs dynamically.
 * The service also keeps track of the created modal dialog and can close it by calling the
 * service's close()
 *
 * Modal service requires a ViewContainer to insert newly created modals. This is taken care
 * by the ModalComponent.
 *
 * Usage:
 *     Add   <aw-modal></aw-modal>  into your application main html. It needs to be on every
 *     page where a modal dialog will appear.
 *
 *    1.  Popup a dialog without creating your own component.
 *        Use the existing DialogComponent in widgets.
 *
 *             this.modalService.open<DialogComponent>(DialogComponent, {
 *                     title: 'My Popup Title',
 *                     body: 'My Popup Body'
 *              });
 *
 *
 *   2.   Creating your own Dialog Component to popup.
 *
 *         let componentRef = this.modalService.open<MyDialogComponent>(MyDialogComponent,
 * {inputs});
 *
 * \@Component({
 *                selector: 'aw-mydialog' ,
 *                           template: `
 *                                         <aw-dialog (onClose)="closePopup()">
 *                                              <ng-template #titleTemplate>
 *                                                 <span><i class="fa fa-envira" ></i>This is my
 *     Title </span>
 *                                              </ng-template>
 *                                              <ng-template #bodyTemplate>
 *                                                 <span><i class="fa fa-envira" ></i>This is my
 *     Body </span>
 *                                              </ng-template>
 *                                        </aw-dialog>
 *                                     `
 *         })
 *         export class MyDialogComponent extends DialogComponent implements OnInit {
 *                     constructor(private modalService: ModalService) {
 *                          super();
 *                       }
 *                     ngOnInit() { }
 *
 *                     closePopup() {
 *                            this.modalService.close();
 *                      }
 *         }
 */
var ModalService = /** @class */ (function () {
    /**
     * DI ComponentFactoryResolver to be used to create modal component.
     *
     * @param cfr
     */
    function ModalService(cfr) {
        this.cfr = cfr;
    }
    /**
     *  PlaceHolder for modal to be inserted.
     *
     * @param vcRef
     */
    /**
     *  PlaceHolder for modal to be inserted.
     *
     * @param {?} vcRef
     * @return {?}
     */
    ModalService.prototype.registerViewContainerRef = /**
     *  PlaceHolder for modal to be inserted.
     *
     * @param {?} vcRef
     * @return {?}
     */
    function (vcRef) {
        this.vcRef = vcRef;
    };
    /**
     * Opens the modal dialog by dynamically creating the component and adding it to vcRef.
     *
     */
    /**
     * Opens the modal dialog by dynamically creating the component and adding it to vcRef.
     *
     * @template T
     * @param {?} component
     * @param {?=} parameters
     * @return {?}
     */
    ModalService.prototype.open = /**
     * Opens the modal dialog by dynamically creating the component and adding it to vcRef.
     *
     * @template T
     * @param {?} component
     * @param {?=} parameters
     * @return {?}
     */
    function (component, parameters) {
        var /** @type {?} */ cf = this.cfr.resolveComponentFactory(component);
        var /** @type {?} */ componentRef = this.vcRef.createComponent(cf);
        // Auto set visiblity to true. So that the Dialog will display
        parameters = (parameters) ? parameters : {};
        parameters['visible'] = true;
        // Handle output parameters.
        ModalService.OUTPUT_PARAMETERS.forEach(function (param) {
            if (parameters[param]) {
                (/** @type {?} */ (componentRef.instance))[param].subscribe(parameters[param]);
                delete parameters[param];
            }
        });
        Object.assign(componentRef.instance, parameters);
        // had to cast it in order to avoid any index Error
        // Attach a destroy method to the newly created component.
        (/** @type {?} */ (componentRef.instance))['destroy'] = function () {
            componentRef.destroy();
        };
        // Save the instance, so it can be destroyed later.
        this.instance = componentRef;
        return componentRef;
    };
    /**
     * Calling close() will remove the modal from view.
     */
    /**
     * Calling close() will remove the modal from view.
     * @return {?}
     */
    ModalService.prototype.close = /**
     * Calling close() will remove the modal from view.
     * @return {?}
     */
    function () {
        if (this.instance) {
            this.instance.destroy();
            this.instance = null;
        }
    };
    /**
     * This is a static list of output parameter from Dialog, Confirmation components
     * that needs to be handled.
     *
     */
    ModalService.OUTPUT_PARAMETERS = ['onClose', 'onConfirm', 'onCancel'];
    ModalService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] },
    ];
    /** @nocollapse */
    ModalService.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"] }
    ]; };
    return ModalService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Place holder for all modal dialogs. This component works with the modalService by providing
 * a place holder for it to inject Dialog component into.
 */
var ModalComponent = /** @class */ (function () {
    function ModalComponent(modalService) {
        this.modalService = modalService;
    }
    /**
     * @return {?}
     */
    ModalComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.modalService.registerViewContainerRef(this.viewContainerRef);
    };
    ModalComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-modal',
                    template: "<div #modal></div>\n",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    ModalComponent.ctorParameters = function () { return [
        { type: ModalService }
    ]; };
    ModalComponent.propDecorators = {
        viewContainerRef: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['modal', { read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] },] }]
    };
    return ModalComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * This currency formatter will ignore null and empty string for value.
 * Issue : https://github.com/angular/angular/issues/8694  DI fails when extends other classes
 */
var CurrencyFormatPipe = /** @class */ (function () {
    function CurrencyFormatPipe(currencyPipe) {
        this.currencyPipe = currencyPipe;
    }
    /**
     * @param {?} value
     * @param {...?} args
     * @return {?}
     */
    CurrencyFormatPipe.prototype.transform = /**
     * @param {?} value
     * @param {...?} args
     * @return {?}
     */
    function (value) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        // Default values
        var /** @type {?} */ currencyCode = 'USD', /** @type {?} */ symbolDisplay = true, /** @type {?} */ digits = '1.0-2';
        if (!value || value.length === 0) {
            return value;
        }
        if (args && args.length > 0) {
            var /** @type {?} */ code = args[0];
            if (code && code.length > 0) {
                currencyCode = code;
            }
        }
        return this.currencyPipe.transform(value, currencyCode, symbolDisplay, digits);
    };
    CurrencyFormatPipe.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"], args: [{
                    name: 'currencyFormat',
                    pure: false
                },] },
    ];
    /** @nocollapse */
    CurrencyFormatPipe.ctorParameters = function () { return [
        { type: _angular_common__WEBPACK_IMPORTED_MODULE_5__["CurrencyPipe"] }
    ]; };
    return CurrencyFormatPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Simple utility directive that is used by NG For cycle in situation where we need to call a
 * or execute some logic after each iteration
 */
var NgForSetDirective = /** @class */ (function () {
    function NgForSetDirective() {
        this.onItem = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    /**
     * @return {?}
     */
    NgForSetDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.onItem.emit('--');
    };
    NgForSetDirective.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                    selector: '[ngForSet]'
                },] },
    ];
    /** @nocollapse */
    NgForSetDirective.ctorParameters = function () { return []; };
    NgForSetDirective.propDecorators = {
        onItem: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
    };
    return NgForSetDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Simple convenient service to work with the dom. All the future logic related to DOM manipulation
 * or traversal should be put into this service
 *
 */
var DomUtilsService = /** @class */ (function () {
    function DomUtilsService() {
    }
    /**
     * goes all the way up to the body and checks if there is a element identified by a 'selector'
     *
     */
    /**
     * goes all the way up to the body and checks if there is a element identified by a 'selector'
     *
     * @param {?} nativeElement
     * @param {?} selector
     * @return {?}
     */
    DomUtilsService.prototype.hasParent = /**
     * goes all the way up to the body and checks if there is a element identified by a 'selector'
     *
     * @param {?} nativeElement
     * @param {?} selector
     * @return {?}
     */
    function (nativeElement, selector) {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.closest(nativeElement, selector));
    };
    /**
     *  Travels all the way up to the BODY and retrieve element identified by 'selector' or NULL if
     * not found
     *
     */
    /**
     *  Travels all the way up to the BODY and retrieve element identified by 'selector' or NULL if
     * not found
     *
     * @param {?} nativeElement
     * @param {?} selector
     * @return {?}
     */
    DomUtilsService.prototype.closest = /**
     *  Travels all the way up to the BODY and retrieve element identified by 'selector' or NULL if
     * not found
     *
     * @param {?} nativeElement
     * @param {?} selector
     * @return {?}
     */
    function (nativeElement, selector) {
        var /** @type {?} */ firstChar = selector.charAt(0);
        var /** @type {?} */ parentNode = nativeElement;
        while (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])((parentNode = parentNode.parentNode))) {
            if (firstChar === '.' && parentNode.classList.contains(selector.substr(1))) {
                return parentNode;
            }
            if (firstChar === '#' && parentNode.id === selector.substr(1)) {
                return parentNode;
            }
            // If selector is a tag
            if (parentNode.nodeType === 1 && parentNode.tagName.toLowerCase() === selector) {
                return parentNode;
            }
            if (parentNode.nodeType === 1 && parentNode.tagName === 'BODY') {
                return null;
            }
        }
        return null;
    };
    /**
     * When angular component is rendered along with NGContent it has its own _ngContent_INDEX
     * which always corresponds with _nghost_INDEX, this works fine if we have actual component
     * that is already rendered. If we are creating component programatically there is no way to
     * identify where the actual ng-content is placed within the component
     *
     * e.g. Consider following example:
     *
     *
     * Button Component Template:
     *
     * ```
     *  <span class=mybuttonTitle><ng-content></ng-content></span>
     * ```
     *
     * When you use button component as <aw-button>ClickMe</aw-button>  then its rendered as
     *
     * ```
     * <aw-button _nghost_123>
     *  <span _ngcontent_123 class=mybuttonTitle>ClickMe</span>
     * </aw-button>
     * ```
     *
     * But with programmatic API you instantiate Button and since it created without a Content it
     * looks like this;
     *
     *  ```
     * <aw-button _nghost_123>
     *  <span class=mybuttonTitle></span>
     * </aw-button>
     * ```
     *
     * Where do you place you child (content component)? Therefore utility css class was created
     * to wrap <ng-content> to get around this limitation.
     *
     *  ```
     *   <span class="u-ngcontent">
     *      <ng-content></ng-content>
     *   </span>
     *  ````
     *
     *
     *
     *
     */
    /**
     * When angular component is rendered along with NGContent it has its own _ngContent_INDEX
     * which always corresponds with _nghost_INDEX, this works fine if we have actual component
     * that is already rendered. If we are creating component programatically there is no way to
     * identify where the actual ng-content is placed within the component
     *
     * e.g. Consider following example:
     *
     *
     * Button Component Template:
     *
     * ```
     *  <span class=mybuttonTitle><ng-content></ng-content></span>
     * ```
     *
     * When you use button component as <aw-button>ClickMe</aw-button>  then its rendered as
     *
     * ```
     * <aw-button _nghost_123>
     *  <span _ngcontent_123 class=mybuttonTitle>ClickMe</span>
     * </aw-button>
     * ```
     *
     * But with programmatic API you instantiate Button and since it created without a Content it
     * looks like this;
     *
     *  ```
     * <aw-button _nghost_123>
     *  <span class=mybuttonTitle></span>
     * </aw-button>
     * ```
     *
     * Where do you place you child (content component)? Therefore utility css class was created
     * to wrap <ng-content> to get around this limitation.
     *
     *  ```
     *   <span class="u-ngcontent">
     *      <ng-content></ng-content>
     *   </span>
     *  ````
     *
     *
     *
     *
     * @param {?} parentNativeEl
     * @param {?} childNativeEl
     * @return {?}
     */
    DomUtilsService.prototype.insertIntoParentNgContent = /**
     * When angular component is rendered along with NGContent it has its own _ngContent_INDEX
     * which always corresponds with _nghost_INDEX, this works fine if we have actual component
     * that is already rendered. If we are creating component programatically there is no way to
     * identify where the actual ng-content is placed within the component
     *
     * e.g. Consider following example:
     *
     *
     * Button Component Template:
     *
     * ```
     *  <span class=mybuttonTitle><ng-content></ng-content></span>
     * ```
     *
     * When you use button component as <aw-button>ClickMe</aw-button>  then its rendered as
     *
     * ```
     * <aw-button _nghost_123>
     *  <span _ngcontent_123 class=mybuttonTitle>ClickMe</span>
     * </aw-button>
     * ```
     *
     * But with programmatic API you instantiate Button and since it created without a Content it
     * looks like this;
     *
     *  ```
     * <aw-button _nghost_123>
     *  <span class=mybuttonTitle></span>
     * </aw-button>
     * ```
     *
     * Where do you place you child (content component)? Therefore utility css class was created
     * to wrap <ng-content> to get around this limitation.
     *
     *  ```
     *   <span class="u-ngcontent">
     *      <ng-content></ng-content>
     *   </span>
     *  ````
     *
     *
     *
     *
     * @param {?} parentNativeEl
     * @param {?} childNativeEl
     * @return {?}
     */
    function (parentNativeEl, childNativeEl) {
        // default behavior is to insert it as child to parentNativeEl
        var /** @type {?} */ ngContentParent = parentNativeEl;
        var /** @type {?} */ foundNgContent = parentNativeEl.querySelector('.u-ngcontent');
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(foundNgContent)) {
            // we don't cover a case where there could be multiple ngcontents
            ngContentParent = foundNgContent;
        }
        ngContentParent.appendChild(childNativeEl);
    };
    /**
     *
     * Retrieves current browser window width and height
     *
     */
    /**
     *
     * Retrieves current browser window width and height
     *
     * @return {?}
     */
    DomUtilsService.prototype.browserDimentions = /**
     *
     * Retrieves current browser window width and height
     *
     * @return {?}
     */
    function () {
        return {
            width: (window.innerWidth || document.documentElement.clientWidth
                || document.body.clientWidth),
            height: (window.innerHeight || document.documentElement.clientHeight
                || document.body.clientHeight)
        };
    };
    /**
     *
     * Retrieves elemements dimensions
     *
     */
    /**
     *
     * Retrieves elemements dimensions
     *
     * @param {?} element
     * @return {?}
     */
    DomUtilsService.prototype.elementDimensions = /**
     *
     * Retrieves elemements dimensions
     *
     * @param {?} element
     * @return {?}
     */
    function (element) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(element.getBoundingClientRect)) {
            return element.getBoundingClientRect();
        }
        return { left: 0, top: 0, right: 0, bottom: 0, x: 0, y: 0, width: 0, height: 0 };
    };
    DomUtilsService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] },
    ];
    /** @nocollapse */
    DomUtilsService.ctorParameters = function () { return []; };
    return DomUtilsService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * The Infinite Scroll allows you to perform an action when the user
 * scrolls a specified distance from the bottom or top of the page.
 *
 * The expression assigned to the `infinite` event is called when
 * the user scrolls to the specified distance. When this expression
 * has finished its tasks, it should call the `complete()` method
 * on the infinite scroll instance.
 *
 * ## Usage
 *
 * ```html
 *
 *  <div  *ngFor="let item of items">{{item}} </div>
 *   <aw-infinite-scroll (onLoad)="doInfinite($event)">
 *  </aw-infinite-scroll>
 *
 * ```
 *
 *
 * You can also set a threshold to change the distance when the lazy load kicks
 * in.
 * ## Usage
 *
 * ```html
 *
 *  <div  *ngFor="let item of items">{{item}} </div>
 *   <aw-infinite-scroll (onLoad)="doInfinite($event)"  [distance]="'15%'">
 *  </aw-infinite-scroll>
 *
 * ```
 */
var InfiniteScrollComponent = /** @class */ (function () {
    function InfiniteScrollComponent(_render, _zone, domUtils, _cd) {
        this._render = _render;
        this._zone = _zone;
        this.domUtils = domUtils;
        this._cd = _cd;
        this._lastCheck = 0;
        this._lastScrollTop = 0;
        this._thr = '10%';
        this._thrPx = 0;
        this._thrPc = 0.10;
        this._init = false;
        /**
         * \@internal
         */
        this.state = STATE_ENABLED;
        /**
         * \@output {event} Emitted when the scroll reaches
         * the threshold distance. From within your infinite handler,
         * you must call the infinite scroll's `complete()` method when
         * your async operation has completed.
         */
        this.onLoad = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         *
         * Lazy load current numbers. tell the app starting point and what is the size of loaded
         * list
         *
         */
        this.fetchSize = 0;
        this.loadOffset = 0;
    }
    Object.defineProperty(InfiniteScrollComponent.prototype, "distance", {
        /**
         * @input {string} The threshold distance from the bottom
         * of the content to call the `onLoad` output event when scrolled.
         * The threshold value can be either a percent, or
         * in pixels. For example, use the value of `10%` for the `infinite`
         * output event to get called when the user has scrolled 10%
         * from the bottom of the page. Use the value `100px` when the
         * scroll is within 100 pixels from the bottom of the page.
         * Default is `15%`.
         */
        get: /**
         * \@input {string} The threshold distance from the bottom
         * of the content to call the `onLoad` output event when scrolled.
         * The threshold value can be either a percent, or
         * in pixels. For example, use the value of `10%` for the `infinite`
         * output event to get called when the user has scrolled 10%
         * from the bottom of the page. Use the value `100px` when the
         * scroll is within 100 pixels from the bottom of the page.
         * Default is `15%`.
         * @return {?}
         */
        function () {
            return this._thr;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._thr = val;
            if (val.indexOf('%') > -1) {
                this._thrPx = 0;
                this._thrPc = (parseFloat(val) / 100);
            }
            else {
                this._thrPx = parseFloat(val);
                this._thrPc = 0;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InfiniteScrollComponent.prototype, "enabled", {
        /**
         * @input {boolean} If true, Whether or not the infinite scroll should be
         * enabled or not. Setting to `false` will remove scroll event listeners
         * and hide the display.
         */
        set: /**
         * \@input {boolean} If true, Whether or not the infinite scroll should be
         * enabled or not. Setting to `false` will remove scroll event listeners
         * and hide the display.
         * @param {?} shouldEnable
         * @return {?}
         */
        function (shouldEnable) {
            this.enable(shouldEnable);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InfiniteScrollComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._render.addClass(document.body, 'has-infinite-scroll');
    };
    /**
     * @param {?} ev
     * @return {?}
     */
    InfiniteScrollComponent.prototype._onScroll = /**
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        if (this.state === STATE_LOADING || this.state === STATE_DISABLED) {
            return;
        }
        // must throttle the class by 100ms
        if (this._lastCheck + 100 > ev.timeStamp) {
            // no need to check less than every XXms
            return;
        }
        this._lastCheck = ev.timeStamp;
        var /** @type {?} */ scrollTop = this.scrollTop();
        var /** @type {?} */ winHeight = this.domUtils.browserDimentions().height;
        var /** @type {?} */ height = Math.max(this._docBody.scrollHeight, this._docBody.offsetHeight, winHeight, this._content.scrollHeight, this._content.offsetHeight);
        if (!height) {
            // if there is no height of this element then do nothing
            return;
        }
        var /** @type {?} */ threshold = this._thrPc ? (height * this._thrPc) : this._thrPx;
        var /** @type {?} */ distanceFromInfinite = this._content.scrollHeight - winHeight - scrollTop - threshold;
        // console.log('Document height (' + height + ') , Distance from bottom '
        // + distanceFromInfinite + ',  => threshold = ' +
        //     this.distance + ' (' + threshold + ')');
        if (distanceFromInfinite < 0 && this._lastScrollTop < scrollTop) {
            this.fireOnLazyLoad();
        }
        else if (this._lastScrollTop > scrollTop && scrollTop < winHeight
            && this.loadOffset !== this.fetchSize) {
            this.fireOnLazyUnLoad();
        }
        this._lastScrollTop = scrollTop;
        return;
    };
    /**
     * Todo: refactor to one method
     * @return {?}
     */
    InfiniteScrollComponent.prototype.fireOnLazyLoad = /**
     * Todo: refactor to one method
     * @return {?}
     */
    function () {
        var _this = this;
        this._zone.run(function () {
            if (_this.state !== STATE_LOADING && _this.state !== STATE_DISABLED) {
                _this.state = STATE_LOADING;
                _this.onLoad.emit({
                    isLoad: true,
                    limit: _this.fetchSize,
                    offset: _this.loadOffset
                });
                // start on the next record
                // start on the next record
                _this.loadOffset += _this.fetchSize;
            }
        });
    };
    /**
     * @return {?}
     */
    InfiniteScrollComponent.prototype.fireOnLazyUnLoad = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._zone.run(function () {
            if (_this.state !== STATE_LOADING && _this.state !== STATE_DISABLED) {
                _this.state = STATE_LOADING;
                // start on the next record
                // start on the next record
                _this.loadOffset = _this.fetchSize;
                _this.onLoad.emit({
                    isLoad: false,
                    limit: _this.fetchSize,
                    offset: _this.loadOffset
                });
            }
        });
    };
    /**
     * @return {?}
     */
    InfiniteScrollComponent.prototype.scrollTop = /**
     * @return {?}
     */
    function () {
        return (window.pageYOffset || this._content.scrollTop);
    };
    /**
     * Call `complete()` within the `infinite` output event handler when
     * your async operation has completed. For example, the `loading`
     * state is while the app is performing an asynchronous operation,
     * such as receiving more data from an AJAX request to add more items
     * to a data list. Once the data has been received and UI updated, you
     * then call this method to signify that the loading has completed.
     * This method will change the infinite scroll's state from `loading`
     * to `enabled`.
     */
    /**
     * Call `complete()` within the `infinite` output event handler when
     * your async operation has completed. For example, the `loading`
     * state is while the app is performing an asynchronous operation,
     * such as receiving more data from an AJAX request to add more items
     * to a data list. Once the data has been received and UI updated, you
     * then call this method to signify that the loading has completed.
     * This method will change the infinite scroll's state from `loading`
     * to `enabled`.
     * @return {?}
     */
    InfiniteScrollComponent.prototype.complete = /**
     * Call `complete()` within the `infinite` output event handler when
     * your async operation has completed. For example, the `loading`
     * state is while the app is performing an asynchronous operation,
     * such as receiving more data from an AJAX request to add more items
     * to a data list. Once the data has been received and UI updated, you
     * then call this method to signify that the loading has completed.
     * This method will change the infinite scroll's state from `loading`
     * to `enabled`.
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.state !== STATE_LOADING) {
            return;
        }
        setTimeout(function () {
            _this.state = STATE_ENABLED;
            // need to trigger extra detect changes to rerender loading icon
            // need to trigger extra detect changes to rerender loading icon
            _this._cd.detectChanges();
        }, 100);
    };
    /**
     * Call `enable(false)` to disable the infinite scroll from actively
     * trying to receive new data while scrolling. This method is useful
     * when it is known that there is no more data that can be added, and
     * the infinite scroll is no longer needed.
     * @param shouldEnable  If the infinite scroll should be
     * enabled or not. Setting to `false` will remove scroll event listeners
     * and hide the display.
     */
    /**
     * Call `enable(false)` to disable the infinite scroll from actively
     * trying to receive new data while scrolling. This method is useful
     * when it is known that there is no more data that can be added, and
     * the infinite scroll is no longer needed.
     * @param {?} shouldEnable  If the infinite scroll should be
     * enabled or not. Setting to `false` will remove scroll event listeners
     * and hide the display.
     * @return {?}
     */
    InfiniteScrollComponent.prototype.enable = /**
     * Call `enable(false)` to disable the infinite scroll from actively
     * trying to receive new data while scrolling. This method is useful
     * when it is known that there is no more data that can be added, and
     * the infinite scroll is no longer needed.
     * @param {?} shouldEnable  If the infinite scroll should be
     * enabled or not. Setting to `false` will remove scroll event listeners
     * and hide the display.
     * @return {?}
     */
    function (shouldEnable) {
        this.state = (shouldEnable ? STATE_ENABLED : STATE_DISABLED);
        this._setListeners(shouldEnable);
    };
    /**
     * Subscribes to native windows scroll event
     */
    /**
     * Subscribes to native windows scroll event
     * @param {?} shouldListen
     * @return {?}
     */
    InfiniteScrollComponent.prototype._setListeners = /**
     * Subscribes to native windows scroll event
     * @param {?} shouldListen
     * @return {?}
     */
    function (shouldListen) {
        var _this = this;
        if (this._init) {
            if (shouldListen) {
                if (!this._scLsn) {
                    this._zone.runOutsideAngular(function () {
                        _this._scLsn = _this._onScroll.bind(_this);
                        window.addEventListener('scroll', _this._scLsn);
                    });
                }
            }
            else {
                if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._scLsn)) {
                    window.removeEventListener('scroll', this._scLsn);
                    this._scLsn = null;
                }
            }
        }
    };
    /**
     * @return {?}
     */
    InfiniteScrollComponent.prototype.isLoading = /**
     * @return {?}
     */
    function () {
        return this.state === STATE_LOADING;
    };
    /**
     * @return {?}
     */
    InfiniteScrollComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this._init = true;
        this._docBody = document.body;
        this._content = document.documentElement;
        this._setListeners(this.state !== STATE_DISABLED);
        if (this.loadOffset === 0) {
            this.fireOnLazyLoad();
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    InfiniteScrollComponent.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        this._setListeners(false);
    };
    InfiniteScrollComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-infinite-scroll',
                    template: "<div class=\"w-infinite-loader-panel\" *ngIf=\"isLoading()\">\n    <span class=\"sap-icon icon-synchronize u-spin-icon\"></span>\n</div>\n",
                    styles: [".w-infinite-loader-panel{display:flex;align-items:center;justify-content:center;background-color:#fff;width:100%;height:100px;z-index:300;bottom:100px}.w-infinite-loader-panel span{color:#4a4a4a;font-size:2em}"],
                },] },
    ];
    /** @nocollapse */
    InfiniteScrollComponent.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
        { type: DomUtilsService },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
    ]; };
    InfiniteScrollComponent.propDecorators = {
        distance: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        enabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        onLoad: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        loadPanel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['loadinPanel',] }],
        fetchSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return InfiniteScrollComponent;
}());
var /** @type {?} */ STATE_ENABLED = 'enabled';
var /** @type {?} */ STATE_DISABLED = 'disabled';
var /** @type {?} */ STATE_LOADING = 'loading';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AwNameStore = /** @class */ (function () {
    function AwNameStore() {
        this.store = new Map();
    }
    /**
     * @param {?} name
     * @param {?} el
     * @return {?}
     */
    AwNameStore.prototype.add = /**
     * @param {?} name
     * @param {?} el
     * @return {?}
     */
    function (name, el) {
        if (this.collides(name)) {
            throw new Error('Name is not unique!');
        }
        return this.store.set(name, el);
    };
    /**
     * @param {?} name
     * @return {?}
     */
    AwNameStore.prototype.remove = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this.store.delete(name);
    };
    /**
     * @param {?} name
     * @return {?}
     */
    AwNameStore.prototype.collides = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this.store.has(name);
    };
    /**
     * @return {?}
     */
    AwNameStore.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.store.clear();
    };
    AwNameStore.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] },
    ];
    /** @nocollapse */
    AwNameStore.ctorParameters = function () { return []; };
    return AwNameStore;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * The 'awName' directive attaches a identifier to decorated element to aid selectors for testing
 * purposes. The 'awName' directive tries to generate a unique identifier based on contextual data
 * and inherant immutable element attributes.
 *
 * **Generating the Base Name**
 *
 * The 'awName' directive generates a base name from element tag name and attributes which are
 * static by nature.
 *
 *     Example:
 *         <button name="order" awName>
 *
 *     Result:
 *         <button name="order" awname="button_order">
 *
 * If the element has an 'id', that value takes precedent and is used instead of a generated
 * name.
 *
 *     Example:
 *         <button name="order" id="myOrderButton" awName>
 *
 *     Result:
 *         <button name="order" id="myOrderButton" awname="button_myOrderButton">
 *
 *
 * **Repeated Elements and the 'ext' Parameter**
 *
 * There are many cases where elements are generated dynamically in the code as lists or tables.
 * In such cases, it may not be easy to distinguish individual elements by standard HTML
 * attributes, so the 'awName' directive allows custom extentions to the base name to be provided
 * using the 'ext' attribute.
 *
 *    Example:
 *        fruits = ['apple', 'banana', 'orange'];
 *
 *        <ul>
 *            <li *ngFor="let fruit of fruits" awName ext="{{fruit}}">{{fruit}}</li>
 *        </ul>
 *
 *   Result:
 *       <ul>
 *           <li awname="li_apple">apple</li>
 *           <li awname="li_banana">banana</li>
 *           <li awname="li_orane">orange</li>
 *       </ul>
 *
 * **Adding Context Through Ancestor Inspection**
 *
 * In order to provide context to the element naming, the 'awName' directive loops through the
 * parent ancestry and searches for any unique element 'id' to prepend to the base name.
 *
 *     Example:
 *         <form id="applicant">
 *            <input type="text" name="firstName" awName>
 *            <input type="text" name="lastName" awName>
 *         </form>
 *         <form id="spouse">
 *            <input type="text" name="firstName" awName>
 *            <input type="text" name="lastName" awName>
 *         </form>
 *
 *     Result:
 *         <form id="applicant">
 *            <input type="text" name="firstName" awname="applicant_input_firstName">
 *            <input type="text" name="lastName" awname="applicant_input_lastName">
 *         </form>
 *         <form id="spouse">
 *            <input type="text" name="firstName" awname="spouse_input_firstName">
 *            <input type="text" name="lastName" awname="spouse_input_lastname">
 *         </form>
 *
 * **Uniqueness Check**
 *
 * 'awName' keeps track of the names it creates by adding them to a map store. Whenever it
 * creates a new name during the `ngOnInit` phase it checks it against the existing map,
 * and will throw an error if it encounters a duplicate. Moreover during the element destruction
 * phase, `ngOnDestroy`, 'awName' removes the generated name from the store.
 *
 *
 * **In Production**
 *
 * Using 'awName' adds a small bit of rendering overhead for each element it is used on. In
 * a production environment, 'awName' serves no functionality to the end user, but may have
 * a performance impact on the application. As such, 'awName' takes into account the
 * `AppConfig` settings and disables name generation when `AppConfig.isProductionMode()`
 * is `true`.
 *
 * In your application, you can turn on production mode by setting `devmode.enabled` to
 * `false` when configuring `AribaCoreModule`:
 *
 *     AribaCoreModule.forRoot({
 *         'devmode.enabled': false
 *     })
 *
 */
var AwNameDirective = /** @class */ (function () {
    function AwNameDirective(el, store, config) {
        this.el = el;
        this.store = store;
        this.config = config;
        this.separator = '_';
    }
    /**
     * @return {?}
     */
    AwNameDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.config.isProductionMode()) {
            this.name = this.createName(this.el);
            this.addElementToStore(this.name, this.el);
            this.el.nativeElement.setAttribute('awname', this.name);
        }
    };
    /**
     * @return {?}
     */
    AwNameDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.store.remove(this.name);
    };
    /**
     * Add element name/id and reference to map store. If name/id already
     * exists in store then it throws an error.
     *
     */
    /**
     * Add element name/id and reference to map store. If name/id already
     * exists in store then it throws an error.
     *
     * @param {?} name
     * @param {?} elem
     * @return {?}
     */
    AwNameDirective.prototype.addElementToStore = /**
     * Add element name/id and reference to map store. If name/id already
     * exists in store then it throws an error.
     *
     * @param {?} name
     * @param {?} elem
     * @return {?}
     */
    function (name, elem) {
        try {
            this.store.add(name, elem);
        }
        catch (/** @type {?} */ e) {
            console.error(e.message + (". \"" + name + "\" is already in use."), elem.nativeElement);
            return;
        }
    };
    /**
     * Generate name/id for element.
     *
     * param elem Reference to element
     * @return String Name/ID
     */
    /**
     * Generate name/id for element.
     *
     * param elem Reference to element
     * @param {?} elem
     * @return {?} String Name/ID
     */
    AwNameDirective.prototype.createName = /**
     * Generate name/id for element.
     *
     * param elem Reference to element
     * @param {?} elem
     * @return {?} String Name/ID
     */
    function (elem) {
        var /** @type {?} */ tagName = this.getTagName(elem);
        // Initialize array of string parts
        var /** @type {?} */ parts = [];
        // Find ancestor tag id, if there is one
        var /** @type {?} */ parentID = this.getAncestorId(elem);
        if (parentID) {
            parts.push(parentID);
        }
        // Check the tag type
        if (tagName === 'option') {
            var /** @type {?} */ parentName = this.getParentName(elem);
            if (parentName) {
                parts.push(parentName);
            }
        }
        // Get tagname
        parts.push(tagName);
        // Choose id property if it exists
        if (elem.nativeElement.id) {
            parts.push(elem.nativeElement.id);
            // Otherwise build extension from tag properties
        }
        else {
            // check for a name attribute
            if (elem.nativeElement.hasAttribute('name')) {
                parts.push(elem.nativeElement.name);
            }
            // check for value attribute if 'option' tag
            if (tagName === 'option') {
                if (elem.nativeElement.hasAttribute('value')) {
                    parts.push(this.spacesToUnderscore(elem.nativeElement.value));
                }
            }
        }
        // Add custom extension if it exists
        if (this.ext) {
            parts.push(this.spacesToUnderscore(this.ext));
        }
        return parts.join(this.separator);
    };
    /**
     * Get tag name from element reference.
     * @param elem Reference to element
     */
    /**
     * Get tag name from element reference.
     * @param {?} elem Reference to element
     * @return {?}
     */
    AwNameDirective.prototype.getTagName = /**
     * Get tag name from element reference.
     * @param {?} elem Reference to element
     * @return {?}
     */
    function (elem) {
        return elem.nativeElement.tagName.toLowerCase();
    };
    /**
     * Traverse element ancestry and return first id attribute
     * encountered.
     * @param elem Reference to element
     */
    /**
     * Traverse element ancestry and return first id attribute
     * encountered.
     * @param {?} elem Reference to element
     * @return {?}
     */
    AwNameDirective.prototype.getAncestorId = /**
     * Traverse element ancestry and return first id attribute
     * encountered.
     * @param {?} elem Reference to element
     * @return {?}
     */
    function (elem) {
        var /** @type {?} */ parent = elem.nativeElement.parentNode;
        var /** @type {?} */ id = '';
        while (parent && !id) {
            if (parent.id) {
                id = parent.id;
            }
            parent = parent.parentNode;
        }
        return id;
    };
    /**
     * Get name attribute from parent if name attribute exists.
     * @param elem Reference to element
     */
    /**
     * Get name attribute from parent if name attribute exists.
     * @param {?} elem Reference to element
     * @return {?}
     */
    AwNameDirective.prototype.getParentName = /**
     * Get name attribute from parent if name attribute exists.
     * @param {?} elem Reference to element
     * @return {?}
     */
    function (elem) {
        var /** @type {?} */ parent = elem.nativeElement.parentNode;
        return (parent.name && !parent.id) ? parent.name : null;
    };
    /**
     * @param {?} str
     * @return {?}
     */
    AwNameDirective.prototype.spacesToUnderscore = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return str.replace(/\s+/g, '_');
    };
    AwNameDirective.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                    selector: '[awName]',
                },] },
    ];
    /** @nocollapse */
    AwNameDirective.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
        { type: AwNameStore },
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["AppConfig"] }
    ]; };
    AwNameDirective.propDecorators = {
        ext: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return AwNameDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWCoreComponentModule = /** @class */ (function () {
    function AWCoreComponentModule() {
    }
    AWCoreComponentModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        EmbeddedItemDirective,
                        IncludeComponentDirective,
                        GenericContainerComponent,
                        ErrorMessagesComponent,
                        ModalComponent,
                        CurrencyFormatPipe,
                        NgForSetDirective,
                        InfiniteScrollComponent,
                        AwNameDirective
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"]
                    ],
                    entryComponents: [
                        GenericContainerComponent,
                        ModalComponent
                    ],
                    exports: [
                        EmbeddedItemDirective,
                        IncludeComponentDirective,
                        GenericContainerComponent,
                        ErrorMessagesComponent,
                        ModalComponent,
                        CurrencyFormatPipe,
                        NgForSetDirective,
                        InfiniteScrollComponent,
                        AwNameDirective
                    ]
                },] },
    ];
    return AWCoreComponentModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Parent class for all modal dialogs. Provides defaults functionality for all modals.
 */
var  /**
 * Parent class for all modal dialogs. Provides defaults functionality for all modals.
 */
ModalContainer = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(ModalContainer, _super);
    function ModalContainer(env) {
        var _this = _super.call(this, env) || this;
        _this.env = env;
        /**
         * Override function.
         */
        _this.destroy = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["noop"];
        return _this;
    }
    /**
     * function that closes the dialog by calling destroy on the component reference.
     * Method inherited by all its children.
     */
    /**
     * function that closes the dialog by calling destroy on the component reference.
     * Method inherited by all its children.
     * @return {?}
     */
    ModalContainer.prototype.closeModal = /**
     * function that closes the dialog by calling destroy on the component reference.
     * Method inherited by all its children.
     * @return {?}
     */
    function () {
        this.destroy();
    };
    return ModalContainer;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * DataTypeProviderRegistry aggregates different DataProviders per type.
 */
var DataTypeProviderRegistry = /** @class */ (function () {
    function DataTypeProviderRegistry() {
        this.registryByProvider = new Map();
        this.registryNameToClass = new Map();
    }
    /**
     * For every single registered DataProvider implementation we also need store its prototype
     * in order to be able to support some kind of inheritance. You can register a provider for
     * a parent class if needed
     *
     */
    /**
     * For every single registered DataProvider implementation we also need store its prototype
     * in order to be able to support some kind of inheritance. You can register a provider for
     * a parent class if needed
     *
     * @template T
     * @param {?} target
     * @param {?} provider
     * @return {?}
     */
    DataTypeProviderRegistry.prototype.registerProvider = /**
     * For every single registered DataProvider implementation we also need store its prototype
     * in order to be able to support some kind of inheritance. You can register a provider for
     * a parent class if needed
     *
     * @template T
     * @param {?} target
     * @param {?} provider
     * @return {?}
     */
    function (target, provider) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(target) || (!Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isStringMap"])(target) && !Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isType"])(target))) {
            throw new Error(' Cannot register non-object');
        }
        var /** @type {?} */ name = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isType"])(target) ? target.prototype.constructor.name : target.constructor.name;
        this.registryByProvider.set(name, provider);
        var /** @type {?} */ prototype = Object.getPrototypeOf(target);
        this.registryNameToClass.set(name, prototype);
    };
    /**
     * Search for best matching provider. If not found then use object prototype to get hold of its
     * parent and see if there is a provider registered on this level
     *
     */
    /**
     * Search for best matching provider. If not found then use object prototype to get hold of its
     * parent and see if there is a provider registered on this level
     *
     * @template T
     * @param {?} className
     * @return {?}
     */
    DataTypeProviderRegistry.prototype.bestMatchForClass = /**
     * Search for best matching provider. If not found then use object prototype to get hold of its
     * parent and see if there is a provider registered on this level
     *
     * @template T
     * @param {?} className
     * @return {?}
     */
    function (className) {
        var /** @type {?} */ registeredClassName = className;
        var /** @type {?} */ classProto = this.registryNameToClass.get(className);
        while (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(registeredClassName)) {
            var /** @type {?} */ provider = this.registryByProvider.get(registeredClassName);
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(provider)) {
                provider.type = className;
                return provider;
            }
            // Go up to parent
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(classProto)) {
                classProto = Object.getPrototypeOf(classProto);
                var /** @type {?} */ parentName = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["objectToName"])(classProto);
                registeredClassName =
                    (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(parentName) && parentName !== registeredClassName) ? parentName
                        : null;
            }
            else {
                return null;
            }
        }
        return null;
    };
    /**
     * The same as bestMatchForClass() with the difference to pass a type. If you want to
     * support object inheritance you need this.
     *
     *
     */
    /**
     * The same as bestMatchForClass() with the difference to pass a type. If you want to
     * support object inheritance you need this.
     *
     *
     * @template T
     * @param {?} type
     * @return {?}
     */
    DataTypeProviderRegistry.prototype.bestMatchForType = /**
     * The same as bestMatchForClass() with the difference to pass a type. If you want to
     * support object inheritance you need this.
     *
     *
     * @template T
     * @param {?} type
     * @return {?}
     */
    function (type) {
        var /** @type {?} */ name = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["objectToName"])(type);
        this.registryNameToClass.set(name, type);
        return this.bestMatchForClass(name);
    };
    DataTypeProviderRegistry.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] },
    ];
    /** @nocollapse */
    DataTypeProviderRegistry.ctorParameters = function () { return []; };
    return DataTypeProviderRegistry;
}());
/**
 * Provider is a data driver that can access data and retrieve them. It knows how to get 1
 * or more records, maybe do paging and some other things.
 *
 * @abstract
 * @template T
 */
var  /**
 * Provider is a data driver that can access data and retrieve them. It knows how to get 1
 * or more records, maybe do paging and some other things.
 *
 * @abstract
 * @template T
 */
DataProvider = /** @class */ (function () {
    function DataProvider() {
        /**
         * Notifies all the listeners in case of data are available or if they changed due to some user
         * interaction  (search, adding or removing).
         *
         */
        this.dataChanges = new rxjs__WEBPACK_IMPORTED_MODULE_6__["BehaviorSubject"]([]);
    }
    /**
     *  Return size of the source
     *
     */
    /**
     *  Return size of the source
     *
     * @param {?=} params
     * @return {?}
     */
    DataProvider.prototype.expectedCount = /**
     *  Return size of the source
     *
     * @param {?=} params
     * @return {?}
     */
    function (params) {
        return -1;
    };
    /**
     *
     * Returns non-async current state of data
     */
    /**
     *
     * Returns non-async current state of data
     * @return {?}
     */
    DataProvider.prototype.data = /**
     *
     * Returns non-async current state of data
     * @return {?}
     */
    function () {
        return this.dataChanges.getValue();
    };
    /**
     * Tells if this DataProvider supports INSERT, REMOVE
     *
     */
    /**
     * Tells if this DataProvider supports INSERT, REMOVE
     *
     * @return {?}
     */
    DataProvider.prototype.canCRUD = /**
     * Tells if this DataProvider supports INSERT, REMOVE
     *
     * @return {?}
     */
    function () {
        return false;
    };
    /**
     * Tells if this DataProvider supports query capability
     *
     */
    /**
     * Tells if this DataProvider supports query capability
     *
     * @return {?}
     */
    DataProvider.prototype.canQuery = /**
     * Tells if this DataProvider supports query capability
     *
     * @return {?}
     */
    function () {
        return false;
    };
    /**
     * Implement to support insertion. After record is inserted emit event for dataChanges to
     * inform all subscribers
     *
     */
    /**
     * Implement to support insertion. After record is inserted emit event for dataChanges to
     * inform all subscribers
     *
     * @param {?} obj
     * @return {?}
     */
    DataProvider.prototype.insert = /**
     * Implement to support insertion. After record is inserted emit event for dataChanges to
     * inform all subscribers
     *
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
    };
    /**
     * Implement to support record removal. After record is removed emit event for dataChanges to
     * inform all subscribers.
     *
     */
    /**
     * Implement to support record removal. After record is removed emit event for dataChanges to
     * inform all subscribers.
     *
     * @param {?} obj
     * @return {?}
     */
    DataProvider.prototype.remove = /**
     * Implement to support record removal. After record is removed emit event for dataChanges to
     * inform all subscribers.
     *
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
    };
    /**
     * Implement to provide access to low level searcg API.
     *
     */
    /**
     * Implement to provide access to low level searcg API.
     *
     * @param {?} params
     * @return {?}
     */
    DataProvider.prototype.query = /**
     * Implement to provide access to low level searcg API.
     *
     * @param {?} params
     * @return {?}
     */
    function (params) {
    };
    return DataProvider;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Default implementation for Arrays.
 * @template T
 */
var  /**
 * Default implementation for Arrays.
 * @template T
 */
ArrayDataProvider = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(ArrayDataProvider, _super);
    function ArrayDataProvider(values) {
        var _this = _super.call(this) || this;
        _this.values = values;
        _this.type = Array;
        _this.offScreenData = _this.values;
        _this.dataChanges.next(_this.values);
        return _this;
    }
    /**
     * @param {?=} params
     * @return {?}
     */
    ArrayDataProvider.prototype.expectedCount = /**
     * @param {?=} params
     * @return {?}
     */
    function (params) {
        return this.offScreenData.length;
    };
    /**
     * @param {?=} params
     * @return {?}
     */
    ArrayDataProvider.prototype.dataForParams = /**
     * @param {?=} params
     * @return {?}
     */
    function (params) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(params)) {
            return this.offScreenData;
        }
        var /** @type {?} */ data = this.offScreenData;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(params) && params.has('offset') && params.has('limit')) {
            var /** @type {?} */ offset = params.get('offset');
            var /** @type {?} */ limit = params.get('limit');
            if (data.length > (offset + limit)) {
                data = data.slice(offset, offset + limit);
            }
            else {
                data = data.slice(offset, data.length);
            }
        }
        if (params.has('orderby') && params.has('selector')) {
            this.sort(data, params.get('orderby'), params.get('selector'));
        }
        return data;
    };
    /**
     * @param {?} params
     * @return {?}
     */
    ArrayDataProvider.prototype.fetch = /**
     * @param {?} params
     * @return {?}
     */
    function (params) {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["of"])(this.dataForParams(params));
    };
    /**
     * Provides default implementation for sorting current dataset by one column / key
     *
     * for sortOrdering please see Datatable and its sortOrderingForNumber()
     *
     *      1  = ascending
     *      -1 = descending
     * @param {?} arrayToSort
     * @param {?} key
     * @param {?} sortOrder
     * @return {?}
     */
    ArrayDataProvider.prototype.sort = /**
     * Provides default implementation for sorting current dataset by one column / key
     *
     * for sortOrdering please see Datatable and its sortOrderingForNumber()
     *
     *      1  = ascending
     *      -1 = descending
     * @param {?} arrayToSort
     * @param {?} key
     * @param {?} sortOrder
     * @return {?}
     */
    function (arrayToSort, key, sortOrder) {
        arrayToSort.sort(function (data1, data2) {
            var /** @type {?} */ value1 = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["FieldPath"].getFieldValue(data1, key);
            var /** @type {?} */ value2 = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["FieldPath"].getFieldValue(data2, key);
            var /** @type {?} */ result = null;
            if (value1 == null && value2 != null) {
                result = -1;
            }
            else if (value1 != null && value2 == null) {
                result = 1;
            }
            else if (value1 == null && value2 == null) {
                result = 0;
            }
            else if (typeof value1 === 'string' && typeof value2 === 'string') {
                result = value1.localeCompare(value2);
            }
            else {
                result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;
            }
            return (sortOrder * result);
        });
    };
    return ArrayDataProvider;
}(DataProvider));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Provides top level accessor class in order to make {\@link DataProvider} retrieval process easier.
 * Using {\@link DataTypeProviderRegistry} we either retrieve registered instance of concrete
 * provider or instantiate our implicit provider for native types such as Array.
 *
 *
 */
var DataProviders = /** @class */ (function () {
    function DataProviders(registry) {
        this.registry = registry;
    }
    /**
     * Finds the best matching  DataProvider or create new one in case of Array
     * More room to register and instantiate some other implicit Providers
     */
    /**
     * Finds the best matching  DataProvider or create new one in case of Array
     * More room to register and instantiate some other implicit Providers
     * @param {?} target
     * @return {?}
     */
    DataProviders.prototype.find = /**
     * Finds the best matching  DataProvider or create new one in case of Array
     * More room to register and instantiate some other implicit Providers
     * @param {?} target
     * @return {?}
     */
    function (target) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(target)) {
            return new ArrayDataProvider(target);
        }
        else if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isString"])(target)) {
            return this.registry.bestMatchForClass(target);
        }
        return this.registry.bestMatchForType(target);
    };
    /**
     * Registers new provider within DataTypeProviderRegistry
     *
     */
    /**
     * Registers new provider within DataTypeProviderRegistry
     *
     * @template T
     * @param {?} target
     * @param {?} provider
     * @return {?}
     */
    DataProviders.prototype.register = /**
     * Registers new provider within DataTypeProviderRegistry
     *
     * @template T
     * @param {?} target
     * @param {?} provider
     * @return {?}
     */
    function (target, provider) {
        this.registry.registerProvider(target, provider);
    };
    DataProviders.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] },
    ];
    /** @nocollapse */
    DataProviders.ctorParameters = function () { return [
        { type: DataTypeProviderRegistry }
    ]; };
    return DataProviders;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *
 * Provides a registry of different data Finders used mostly by DataSources. All Finders are
 * registered by this class as we don't have any needs right now to expose this to developer.
 *
 */
var DataFinders = /** @class */ (function () {
    function DataFinders() {
        this.findersByType = new Map();
        this.initFinders();
    }
    /**
     * Finds the best matching DataFinder based on the object type and queryType.
     */
    /**
     * Finds the best matching DataFinder based on the object type and queryType.
     * @param {?} forProvider
     * @param {?} forType
     * @return {?}
     */
    DataFinders.prototype.find = /**
     * Finds the best matching DataFinder based on the object type and queryType.
     * @param {?} forProvider
     * @param {?} forType
     * @return {?}
     */
    function (forProvider, forType) {
        var /** @type {?} */ finderMatch;
        this.findersByType.forEach(function (v, k) {
            if (k.accepts(forProvider, forType)) {
                finderMatch = v;
                return true;
            }
        });
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(finderMatch)) {
            var /** @type {?} */ copy = new finderMatch();
            copy.forData(forProvider);
            return copy;
        }
        return null;
    };
    /**
     * Registers new finder
     *
     */
    /**
     * Registers new finder
     *
     * @template T
     * @param {?} prototype
     * @param {?} type
     * @return {?}
     */
    DataFinders.prototype.register = /**
     * Registers new finder
     *
     * @template T
     * @param {?} prototype
     * @param {?} type
     * @return {?}
     */
    function (prototype, type) {
        this.findersByType.set(prototype, type);
    };
    /**
     * @return {?}
     */
    DataFinders.prototype.initFinders = /**
     * @return {?}
     */
    function () {
        // create a prototype for each
        this.findersByType.set(new FullTextArrayDataFinder(), FullTextArrayDataFinder);
        this.findersByType.set(new OutlineFullTextArrayDataFinder(), OutlineFullTextArrayDataFinder);
    };
    DataFinders.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] },
    ];
    /** @nocollapse */
    DataFinders.ctorParameters = function () { return []; };
    return DataFinders;
}());
/** @enum {number} */
var QueryType = {
    FullText: 0,
    FullTextOutline: 1,
    Predicate: 2,
    FullTextAndPredicate: 3,
};
QueryType[QueryType.FullText] = "FullText";
QueryType[QueryType.FullTextOutline] = "FullTextOutline";
QueryType[QueryType.Predicate] = "Predicate";
QueryType[QueryType.FullTextAndPredicate] = "FullTextAndPredicate";
/**
 * This class provides matching capability for given DataProvider.
 * @abstract
 */
var  /**
 * This class provides matching capability for given DataProvider.
 * @abstract
 */
DataFinder = /** @class */ (function () {
    function DataFinder() {
    }
    /**
     * In order to find concrete DataFinder we need to know the target type and the query type
     *
     */
    /**
     * In order to find concrete DataFinder we need to know the target type and the query type
     *
     * @param {?} forData
     * @param {?} forType
     * @return {?}
     */
    DataFinder.prototype.accepts = /**
     * In order to find concrete DataFinder we need to know the target type and the query type
     *
     * @param {?} forData
     * @param {?} forType
     * @return {?}
     */
    function (forData, forType) {
        return false;
    };
    /**
     *
     * Query can be a simple string literal or a map having different key value pair as a
     * filter
     *
     */
    /**
     *
     * Query can be a simple string literal or a map having different key value pair as a
     * filter
     *
     * @template T
     * @param {?} query
     * @param {?=} max
     * @return {?}
     */
    DataFinder.prototype.match = /**
     *
     * Query can be a simple string literal or a map having different key value pair as a
     * filter
     *
     * @template T
     * @param {?} query
     * @param {?=} max
     * @return {?}
     */
    function (query, max) {
        if (max === void 0) { max = -1; }
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["unimplemented"])();
    };
    /**
     * @template T
     * @param {?} selections
     * @param {?} query
     * @param {?} max
     * @return {?}
     */
    DataFinder.prototype.matchWithSelections = /**
     * @template T
     * @param {?} selections
     * @param {?} query
     * @param {?} max
     * @return {?}
     */
    function (selections, query, max) {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["unimplemented"])();
    };
    return DataFinder;
}());
/**
 * Simple FullText implementation based on infix string matching which works on top of
 * ArrayDataProvider.
 *
 */
var  /**
 * Simple FullText implementation based on infix string matching which works on top of
 * ArrayDataProvider.
 *
 */
FullTextArrayDataFinder = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(FullTextArrayDataFinder, _super);
    function FullTextArrayDataFinder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FullTextArrayDataFinder.prototype, "lookupKey", {
        set: /**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            this._keyPath = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(key) ? new _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["FieldPath"](key) : null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} forData
     * @param {?} forType
     * @return {?}
     */
    FullTextArrayDataFinder.prototype.accepts = /**
     * @param {?} forData
     * @param {?} forType
     * @return {?}
     */
    function (forData, forType) {
        return forData instanceof ArrayDataProvider && forType === QueryType.FullText;
    };
    /**
     * @param {?} provider
     * @return {?}
     */
    FullTextArrayDataFinder.prototype.forData = /**
     * @param {?} provider
     * @return {?}
     */
    function (provider) {
        this._provider = provider;
        return this;
    };
    /**
     * @template T
     * @param {?} query
     * @param {?} max
     * @return {?}
     */
    FullTextArrayDataFinder.prototype.instantMatch = /**
     * @template T
     * @param {?} query
     * @param {?} max
     * @return {?}
     */
    function (query, max) {
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._provider), 'Missing DataProvider');
        var /** @type {?} */ list = this._provider.dataForParams(new Map().set('limit', max));
        return this.instantMatchWithSelections(list, query, max);
    };
    /**
     * @template T
     * @param {?} selectionsForMatch
     * @param {?} query
     * @param {?} max
     * @return {?}
     */
    FullTextArrayDataFinder.prototype.instantMatchWithSelections = /**
     * @template T
     * @param {?} selectionsForMatch
     * @param {?} query
     * @param {?} max
     * @return {?}
     */
    function (selectionsForMatch, query, max) {
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._provider), 'Missing DataProvider');
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(query)) {
            return selectionsForMatch;
        }
        var /** @type {?} */ result = [];
        var /** @type {?} */ toLowerPattern = query.toLowerCase();
        for (var /** @type {?} */ i = 0; i < selectionsForMatch.length; i++) {
            var /** @type {?} */ item = selectionsForMatch[i];
            if (this.matches(item, toLowerPattern)) {
                result.push(item);
                if (result.length >= max) {
                    break;
                }
            }
        }
        return result;
    };
    /**
     *
     * Warning: If you dont supply search Key and you want fulltext search and you use this
     * default implementation be aware that it can  perform poorly as it is naive implementaion
     * that does not do deep compare.
     *
     */
    /**
     *
     * Warning: If you dont supply search Key and you want fulltext search and you use this
     * default implementation be aware that it can  perform poorly as it is naive implementaion
     * that does not do deep compare.
     *
     * @template T
     * @param {?} item
     * @param {?} pattern
     * @return {?}
     */
    FullTextArrayDataFinder.prototype.matches = /**
     *
     * Warning: If you dont supply search Key and you want fulltext search and you use this
     * default implementation be aware that it can  perform poorly as it is naive implementaion
     * that does not do deep compare.
     *
     * @template T
     * @param {?} item
     * @param {?} pattern
     * @return {?}
     */
    function (item, pattern) {
        var /** @type {?} */ val = (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._keyPath)) ? this._keyPath.getFieldValue(item) : item;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(val)) {
            val = val.call(item);
        }
        else if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isJsObject"])(item)) {
            return this.hasObjectValue(item, pattern);
        }
        else {
            return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(pattern) ||
                Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(val) && val.toString().toLowerCase().indexOf(pattern) > -1;
        }
    };
    /**
     * @template T
     * @param {?} query
     * @param {?} max
     * @return {?}
     */
    FullTextArrayDataFinder.prototype.match = /**
     * @template T
     * @param {?} query
     * @param {?} max
     * @return {?}
     */
    function (query, max) {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["of"])(this.instantMatch(query, max));
    };
    /**
     * @template T
     * @param {?} selections
     * @param {?} query
     * @param {?} max
     * @return {?}
     */
    FullTextArrayDataFinder.prototype.matchWithSelections = /**
     * @template T
     * @param {?} selections
     * @param {?} query
     * @param {?} max
     * @return {?}
     */
    function (selections, query, max) {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["of"])(this.instantMatchWithSelections(selections, query, max));
    };
    /**
     * @param {?} obj
     * @param {?} pattern
     * @return {?}
     */
    FullTextArrayDataFinder.prototype.hasObjectValue = /**
     * @param {?} obj
     * @param {?} pattern
     * @return {?}
     */
    function (obj, pattern) {
        var _this = this;
        var /** @type {?} */ values = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["objectValues"])(obj);
        var /** @type {?} */ parentObj = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["objectToName"])(obj);
        var /** @type {?} */ length2 = values.filter(function (value) {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(value) || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(value)) {
                return false;
            }
            else if (!Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isJsObject"])(value) && !Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(value)) {
                return value.toString().toLowerCase().indexOf(pattern) !== -1;
            }
            else if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isJsObject"])(value) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["objectToName"])(value) !== parentObj) {
                return _this.hasObjectValue(value, pattern);
            }
            return false;
        }).length;
        return length2 > 0;
    };
    return FullTextArrayDataFinder;
}(DataFinder));
/**
 * Extends basic Infix implementation to work on top of OutlineNodes. It first checks all the
 * children on lowest level and moving up to the root and marking nodes that can be removed.
 *
 *  For simple data structure which operates on local array this should be good enough we this
 *  can never match with real DB full text search.
 *
 */
var /**
 * Extends basic Infix implementation to work on top of OutlineNodes. It first checks all the
 * children on lowest level and moving up to the root and marking nodes that can be removed.
 *
 *  For simple data structure which operates on local array this should be good enough we this
 *  can never match with real DB full text search.
 *
 */
OutlineFullTextArrayDataFinder = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(OutlineFullTextArrayDataFinder, _super);
    function OutlineFullTextArrayDataFinder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} forData
     * @param {?} forType
     * @return {?}
     */
    OutlineFullTextArrayDataFinder.prototype.accepts = /**
     * @param {?} forData
     * @param {?} forType
     * @return {?}
     */
    function (forData, forType) {
        return forData instanceof ArrayDataProvider && forType === QueryType.FullTextOutline;
    };
    /**
     * @template T
     * @param {?} selectionsForMatch
     * @param {?} query
     * @param {?} max
     * @return {?}
     */
    OutlineFullTextArrayDataFinder.prototype.instantMatchWithSelections = /**
     * @template T
     * @param {?} selectionsForMatch
     * @param {?} query
     * @param {?} max
     * @return {?}
     */
    function (selectionsForMatch, query, max) {
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._provider), 'Missing DataProvider');
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(query)) {
            return selectionsForMatch;
        }
        var /** @type {?} */ toLowerPattern = query.toLowerCase();
        var /** @type {?} */ sourceToSearch = selectionsForMatch.slice();
        this.rollup(sourceToSearch, toLowerPattern);
        return this.shake(sourceToSearch);
    };
    /**
     *
     * Going thru the tree from bottom up and mark all that matches query
     *
     */
    /**
     *
     * Going thru the tree from bottom up and mark all that matches query
     *
     * @param {?} nodes
     * @param {?} query
     * @return {?}
     */
    OutlineFullTextArrayDataFinder.prototype.rollup = /**
     *
     * Going thru the tree from bottom up and mark all that matches query
     *
     * @param {?} nodes
     * @param {?} query
     * @return {?}
     */
    function (nodes, query) {
        var _this = this;
        nodes.forEach(function (item) {
            // start from bottom up and capture how many occurrences is found for future use
            var /** @type {?} */ hasChildrenMatch = false;
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(item.children) && item.children.length > 0) {
                hasChildrenMatch = _this.rollup(item.children, query);
            }
            item.visible = hasChildrenMatch || _this.matches(item, query);
        });
        return nodes.some(function (item) { return item.visible; });
    };
    /**
     * Filter out all the nodes that are marked as visible = false and make sure and
     * don't modify original list
     *
     */
    /**
     * Filter out all the nodes that are marked as visible = false and make sure and
     * don't modify original list
     *
     * @param {?} nodes
     * @return {?}
     */
    OutlineFullTextArrayDataFinder.prototype.shake = /**
     * Filter out all the nodes that are marked as visible = false and make sure and
     * don't modify original list
     *
     * @param {?} nodes
     * @return {?}
     */
    function (nodes) {
        var _this = this;
        return nodes
            .filter(function (node) { return node.visible; })
            .map(function (node) { return (Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__assign"])({}, node, { isExpanded: node.visible, children: node.children && _this.shake(node.children) })); });
    };
    return OutlineFullTextArrayDataFinder;
}(FullTextArrayDataFinder));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ DATA_SOURCE = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('DATA_SOURCE');
/**
 * DataSource describes basic functionality for handling stream of data specific to component
 *
 * It is expected that DataSource will be defined as component provider using
 *
 * \@Components ({
 *      ...
 *      providers:[
 *
 *          provide: DATA_SOURCE, useClass: ChooserDataSourcePlainArrayExample,
 * deps: [DataProviders, DataFinders]
 *      ]
 *
 * })
 *
 *
 * so all the dependencies (DataProviders, DataFinders) are properly injected.
 *
 * DataProvider uses open() method to broadcast changes to all the subscribers in reactive way.
 * Or you can use instant() method to retrieve current state of this DataSource (sync)
 *
 * @abstract
 */
var DataSource = /** @class */ (function () {
    /**
     *
     * Each DataSource have injected DataProviders and DataFinders to retrieve concrete
     * implementation
     *
     */
    function DataSource(dataProviders, finders) {
        this.dataProviders = dataProviders;
        this.finders = finders;
    }
    /**
     * Returns a data instantly from the internal state of DataProvider
     */
    /**
     * Returns a data instantly from the internal state of DataProvider
     * @template T
     * @return {?}
     */
    DataSource.prototype.instant = /**
     * Returns a data instantly from the internal state of DataProvider
     * @template T
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["unimplemented"])();
    };
    DataSource.MaxLength = 10;
    DataSource.MaxRecentSelected = 5;
    return DataSource;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Common class used used for Five Zone layout. Used for the ng-content selector
 */
var TopZoneComponent = /** @class */ (function () {
    function TopZoneComponent() {
        this.classList = 'ui-g-12 ui-g-nopad ';
    }
    TopZoneComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-top',
                    template: '<ng-content></ng-content>'
                },] },
    ];
    TopZoneComponent.propDecorators = {
        classList: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class',] }]
    };
    return TopZoneComponent;
}());
/**
 * Common class used used for Five Zone layout. Used for the ng-content selector
 */
var LeftZoneComponent = /** @class */ (function () {
    function LeftZoneComponent() {
        this.classList = 'ui-g-12 ui-g-nopad';
    }
    LeftZoneComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-left',
                    template: '<ng-content></ng-content>'
                },] },
    ];
    LeftZoneComponent.propDecorators = {
        classList: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class',] }]
    };
    return LeftZoneComponent;
}());
/**
 * Common class used used for Five Zone layout. Used for the ng-content selector
 */
var MiddleZoneComponent = /** @class */ (function () {
    function MiddleZoneComponent() {
        this.classList = 'ui-g-12 ui-md-6 ui-lg-4 ui-g-nopad';
    }
    MiddleZoneComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-middle',
                    template: '<ng-content></ng-content>'
                },] },
    ];
    MiddleZoneComponent.propDecorators = {
        classList: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class',] }]
    };
    return MiddleZoneComponent;
}());
/**
 * Common class used used for Five Zone layout. Used for the ng-content selector
 */
var RightZoneComponent = /** @class */ (function () {
    function RightZoneComponent() {
        this.classList = 'ui-g-12 ui-g-nopad';
    }
    RightZoneComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-right',
                    template: '<ng-content></ng-content>'
                },] },
    ];
    RightZoneComponent.propDecorators = {
        classList: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class',] }]
    };
    return RightZoneComponent;
}());
/**
 * Common class used used for Five Zone layout. Used for the ng-content selector
 */
var BottomZoneComponent = /** @class */ (function () {
    function BottomZoneComponent() {
        this.classList = 'ui-g-12 ui-g-nopad';
    }
    BottomZoneComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-bottom',
                    template: '<ng-content></ng-content>'
                },] },
    ];
    BottomZoneComponent.propDecorators = {
        classList: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class',] }]
    };
    return BottomZoneComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Used by FormTable to layout fields into Rows. Each FormTable row is reasonable for not only to
 * include actual component such is DropDown or InputField but mainly provides a enough context for
 * the component to specify the size, how it should layout, whether we need to show required flag,
 * to show/hide labels in case if we have no label layout and much more.
 *
 * FormRow component also registers angular validator for the current row/field. As already
 * mentioned We treat our widgets with minimal responsibility as possible to present and retrive
 * information to/from user and let somebody else to figure out where it appear and how.
 *
 * todo: Move under FormTable
 */
var FormRowComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(FormRowComponent, _super);
    function FormRowComponent(env, 
    // Event this creates CI depends. Need to have a reference to parent
    // I need to refactor more parent to not use this child and refactor layouting
    parentContainer) {
        var _this = _super.call(this, env, parentContainer) || this;
        _this.env = env;
        _this.parentContainer = parentContainer;
        /**
         * Hides the label
         *
         */
        _this.noLabelLayout = false;
        /**
         * Renders row with highlighted background
         *
         */
        _this.highlightRow = false;
        /**
         *
         *  Field label that should appear above or next to the control
         *
         */
        _this.label = '';
        /**
         *
         * For single column layout without zones we need to apply grid directly to the FormRow tag
         * so we don't need to introduce extra div level
         *
         */
        _this.classList = '';
        _this._size = 'ui-g-12 ui-md-' + WidgetSizeColumns.medium;
        return _this;
    }
    /**
     * Right now we just initialize this once and use the values we do not expect now to react to
     * changes
     */
    /**
     * Right now we just initialize this once and use the values we do not expect now to react to
     * changes
     * @return {?}
     */
    FormRowComponent.prototype.ngOnInit = /**
     * Right now we just initialize this once and use the values we do not expect now to react to
     * changes
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        _super.prototype.registerFormControl.call(this, null);
        this.registerValidators();
        this.omitPadding = this.parentContainer.omitPadding;
        this.classList += Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.parentContainer) ? ' ui-g-12 ' : '';
        this.classList = this.highlightRow ? this.classList + ' highlight-row ' : this.classList;
        this.classList = this.omitPadding ? this.classList + ' ui-g-nopad ' : this.classList;
    };
    Object.defineProperty(FormRowComponent.prototype, "size", {
        /**
         * Just a size getter
         *
         */
        get: /**
         * Just a size getter
         *
         * @return {?}
         */
        function () {
            return this._size;
        },
        /**
         *  A size setter we translate custom sizes into actual bootstrap grid system. We use medium
         * right now. but we should extend this for other screen sizes
         *
         *  todo: provide mapping and add other grid classes for other sizes xs, sm, lg, xl
         *
         *  Also check if this is dynamic size that should vary based on the how many number of columns
         * we have. e.g. Date widgets is by default small, but in 2, 3 columns layout this small is too
         * small.
         */
        set: /**
         *  A size setter we translate custom sizes into actual bootstrap grid system. We use medium
         * right now. but we should extend this for other screen sizes
         *
         *  todo: provide mapping and add other grid classes for other sizes xs, sm, lg, xl
         *
         *  Also check if this is dynamic size that should vary based on the how many number of columns
         * we have. e.g. Date widgets is by default small, but in 2, 3 columns layout this small is too
         * small.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var /** @type {?} */ isDynVal = false;
            if (_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["StringWrapper"].startsWidth(value, 'd-')) {
                isDynVal = true;
                value = value.substr(2, value.length - 1);
            }
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(value)) {
                this._size = value;
                var /** @type {?} */ dSize = this.dynSize(value, isDynVal);
                this._size = 'ui-g-12 ui-md-' + dSize;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FormRowComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngDoCheck.call(this);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.parentContainer) && this.editable !== this.parentContainer.editable) {
            this.editable = this.parentContainer.editable;
        }
    };
    /**
     * Push out of box angular validator as well as custom one to current FormControl
     * @return {?}
     */
    FormRowComponent.prototype.registerValidators = /**
     * Push out of box angular validator as well as custom one to current FormControl
     * @return {?}
     */
    function () {
        var /** @type {?} */ validators = [];
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.maxLength)) {
            validators.push(_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].maxLength(this.maxLength));
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.minLength)) {
            validators.push(_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].minLength(this.minLength));
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.required) && this.required) {
            validators.push(_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required);
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.pattern)) {
            validators.push(_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].pattern(this.pattern));
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.customValidators)) {
            _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].addAll(validators, this.customValidators);
        }
        if (validators.length === 1) {
            this.formControl.setValidators(validators[0]);
        }
        else if (validators.length > 1) {
            this.formControl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].compose(validators));
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.customAsyncValidators) && this.customAsyncValidators.length === 1) {
            this.formControl.setAsyncValidators(this.customAsyncValidators[0]);
        }
        else if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.customAsyncValidators) && this.customAsyncValidators.length > 1) {
            this.formControl.setAsyncValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].composeAsync(this.customAsyncValidators));
        }
    };
    Object.defineProperty(FormRowComponent.prototype, "labelsOnTop", {
        /**
         *
         * Do we have labels on TOP, try to read this from Parent
         *
         */
        get: /**
         *
         * Do we have labels on TOP, try to read this from Parent
         *
         * @return {?}
         */
        function () {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._labelsOnTop) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.parentContainer)) {
                return (/** @type {?} */ (this.parentContainer)).isLabelsOnTop();
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     * Can refactor all into 1 line but its hard to debug so this is just for read
     *
     * @param {?} value
     * @param {?} isDynValue
     * @return {?}
     */
    FormRowComponent.prototype.dynSize = /**
     *
     * Can refactor all into 1 line but its hard to debug so this is just for read
     *
     * @param {?} value
     * @param {?} isDynValue
     * @return {?}
     */
    function (value, isDynValue) {
        var /** @type {?} */ normalizeSize = value.toLowerCase().replace('-', '');
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.parentContainer) &&
            (/** @type {?} */ (this.parentContainer)).hasTwoColumn && isDynValue) {
            var /** @type {?} */ enumValues = Object.keys(WidgetSizeColumns);
            normalizeSize = enumValues[enumValues.indexOf(normalizeSize) + 1];
        }
        return (/** @type {?} */ (WidgetSizeColumns))[normalizeSize];
    };
    FormRowComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-form-row',
                    template: "<div *ngIf=\"!hidden\"\n     class=\"w-form-row ui-g\"\n     [class.highlight-row]=\"highlightRow\"\n     [class.required]=\"required\"\n     [class.label-on-top]=\"labelsOnTop\"\n     [class.label-on-side]=\"!labelsOnTop\"\n     [class.has-danger]=\"!formControl.valid && !formControl.pristine \"\n     [ngClass]=\"styleClass\">\n\n    <div class=\"control-label ui-g-12 ui-g-nopad\"\n         *ngIf=\"!noLabelLayout\"\n         [class.ui-md-3]=\"!labelsOnTop\">\n        <label [class.sr-only]=\"noLabelLayout\">{{label}}</label>\n    </div>\n\n    <div class=\"control-value ui-g-nopad\" [ngClass]=\"size\"\n         [class.read-only]=\"!editable\">\n        <ng-content></ng-content>\n        <a-error-messages [control]=\"formControl\"></a-error-messages>\n    </div>\n</div>\n",
                    styles: [".required label:after{content:\"*\";color:red}/deep/ .highlight-row{background-color:#f7f8fa}.w-form-row.highlight-row{background-color:#f7f8fa}.w-form-row.label-on-top{padding-bottom:13px}.w-form-row.label-on-top .control-label,.w-form-row.label-on-top .control-value{padding-top:0;padding-bottom:0}.w-form-row.label-on-top .control-label{padding-bottom:12px}.w-form-row.label-on-side .control-label,.w-form-row.label-on-side .control-value{padding-top:0;padding-bottom:0}.w-form-row.label-on-side .control-label ::ng-deep .w-string-field,.w-form-row.label-on-side .control-value ::ng-deep .w-string-field{line-height:36px}.w-form-row.label-on-side .control-label ::ng-deep .sap-icon,.w-form-row.label-on-side .control-value ::ng-deep .sap-icon{line-height:26px}.w-form-row.label-on-side .control-label label,.w-form-row.label-on-side .control-value label{line-height:36px}.w-form-row.label-on-side .control-label .fa,.w-form-row.label-on-side .control-value .fa{line-height:18px}.control-label{color:#636363}.u-validation-error{border-color:red}"],
                    providers: [
                        { provide: BaseFormComponent, useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return FormRowComponent; }) }
                    ]
                },] },
    ];
    /** @nocollapse */
    FormRowComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: FormTableComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return FormTableComponent; }),] }] }
    ]; };
    FormRowComponent.propDecorators = {
        noLabelLayout: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        highlightRow: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        maxLength: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        minLength: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        pattern: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        customAsyncValidators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        customValidators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        classList: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class',] }],
        size: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return FormRowComponent;
}(BaseFormComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * FormTable is a specific layout component for rendering Labels and its controls in two columns
 * and 5 different zones.
 *
 * We support LEFT, MIDDLE, RIGHT, TOP, BOTTOM zone where we can place our component or widgets.
 * This
 * component is used as primary layout to wrap all the common use cases. E.g. When we lay out
 * fields in the form I do not want controls to be aware of error validation, size, labels, and
 * some other things. Control such INPUT is just responsible for retrieve user value but not how it
 * appear on the page.
 *
 * This way we can be flexible how we treat widgets for different kinds of situation depending
 * where they appear
 * FormTable just like the rest of the components are using Model driven approach how to work with
 * data, mean we are using FormGroup, FormControl etc. FormGroup can be passed into the FormTable,
 * otherwise its automatically created when the FormTable is instantiated.
 *
 * FormGroup is saved insode Environment where we are using this to pass this around the pages and
 * components.
 *
 * ### Example
 *
 * Simple Layout fields and its control
 *
 *
 * ```typescript
 * \@Component({
 *      selector: 'wrapper-comp' ,
 *      template: `
 *  			<aw-form-table [formGroup]="formGroup" (onSubmit)=>
 *  				<aw-form-row [label]="'name'" [name]="'name'">
 *  					<aw-input-field [type]="'string'"></aw-input-field>
 *  				</aw-form-row>
 *
 *  				<aw-form-row [label]="'Preferred Colors'" [name]="'myColors'">
 *  					<aw-checkbox-list [list]="checkBoxListValues"
 *  					                 [selections]="selectedValues"
 *  					                 [layout]="'inline'"
 *  					                 (onSelection)="onCBClick($event)">
 *  					</aw-checkbox-list>
 *  				</aw-form-row>
 *  				<aw-form-row [label]="'Gender'" [name]="'gender'">
 *
 *  					<aw-radiobutton-list [list]="rbValues" [selection]="rbSelection">
 *
 *  					</aw-radiobutton-list>
 *
 *  				</aw-form-row>
 *  				<aw-form-row [label]="'My birthdate'" [name]="'birthDate'" [size]="'small'">
 *
 *  					<aw-date-time [value]="date" [editable]="editable" [showTime]="showTime">
 *  					</aw-date-time>
 *  				</aw-form-row>
 *  			</aw-form-table>
 *    `
 *  })
 *  export class ShowUserInfoComponent
 *  {
 *       checkBoxListValues: string[] = ['blue' , 'red' , 'yellow' , 'orange' , 'white' , 'silver'
 *     , 'black' , 'Green'
 *     , 'Gray' , 'Navy' ,
 *          'Olive' , 'Aqua' , 'Purple'];
 *      selectedValues: string[] = ['blue' , 'Olive' , 'Aqua' , 'Purple'];
 *      rbValues: string[] = ['male' , 'female' , 'other'];
 *      rbSelection: string = 'male';
 *      editable: boolean = true;
 *      showTime: boolean = true;
 *
 *      formGroup: FormGroup = new FormGroup({});
 *
 *
 *      onCBClick (event): void
 *      {
 *          console.log('onCBClick = ' + event);
 *      }
 *
 *      onSubmit (model: any): void
 *      {
 *         console.log(model)
 *
 *         // will print { name:null, myColors:['blue' , 'Olive' , 'Aqua' , 'Purple'], gender:
 *     male}
 *      }
 *
 *  }
 *
 *  ```
 *
 *  Or you can use zone to layout these fields into two columns:
 *
 *  Current zones are implement with <ng-content SELECT> which is just a selector to searches for
 *     specific pattern. In our case instead of creating extra wrapper custom component use simple
 *     CSS class
 *
 *
 *  ```
 *            <aw-form-table #metaFormTable [editable]="editing"
 *                          [useFiveZone]="isFiveZoneLayout"
 *                          (onSubmit)="onSaveAction($event)">
 *
 *                <aw-left  *ngIf="canShowZone('zLeft')">
 *
 *                        <aw-form-row [label]="'name'" [name]="'name'">
 *                            <aw-input-field [type]="'string'"></aw-input-field>
 *                        </aw-form-row>
 *
 *                        <aw-form-row [label]="'Preferred Colors'" [name]="'myColors'">
 *                            <aw-checkbox-list [list]="checkBoxListValues"
 *                                             [selections]="selectedValues"
 *                                             [layout]="'inline'"
 *                                             (onSelection)="onCBClick($event)">
 *                            </aw-checkbox-list>
 *                        </aw-form-row>
 *                </aw-left>
 *
 *
 *                <aw-right  *ngIf="canShowZone('zRight')">
 *                        <aw-form-row [label]="'Gender'" [name]="'gender'">
 *                                <aw-radiobutton-list [list]="rbValues" [selection]="rbSelection">
 *                                </aw-radiobutton-list>
 *                        </aw-form-row>
 *
 *                        <aw-form-row [label]="'My birthdate'" [name]="'birthDate'"
 *     [size]="'small'">
 *                            <aw-date-time [value]="date" [editable]="editable"
 *     [showTime]="showTime">
 *                            </aw-date-time>
 *                        </aw-form-row>
 *                </<aw-right>
 *            </aw-form-table>
 *
 *  ```
 *
 *  todo: remove my css selectors for zones and replace it with real component even just a tag
 *  todo: would work file
 *
 */
var FormTableComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(FormTableComponent, _super);
    function FormTableComponent(env) {
        var _this = _super.call(this, env, null) || this;
        _this.env = env;
        /**
         * Used for the form layout to see if we need to render labels stacked  or side by side next to
         * the control
         *
         */
        _this.labelsOnTop = false;
        /**
         *
         * Is this a 4 zone layout
         *
         */
        _this.useFiveZone = false;
        /**
         * For certain usecase we dont want to set automatically this to all children
         */
        _this.editabilityCheck = true;
        /**
         *  Triggers when the <form> is submitted. onSubmit we emit the whole formController objects
         *
         *
         */
        _this.onSubmit = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Cache calculated properties when init this component
         *
         */
        _this.hasOneColumn = false;
        _this.hasTwoColumn = false;
        _this.hasThreeColumn = false;
        return _this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    FormTableComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        _super.prototype.ngOnChanges.call(this, changes);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(changes['editable']) &&
            changes['editable'].previousValue !== changes['editable'].currentValue) {
            this.updateFormFields();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FormTableComponent.prototype.onSubmitForm = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onSubmit.emit(event);
    };
    /**
     *
     * Are labels on top
     *
     */
    /**
     *
     * Are labels on top
     *
     * @return {?}
     */
    FormTableComponent.prototype.isLabelsOnTop = /**
     *
     * Are labels on top
     *
     * @return {?}
     */
    function () {
        return this.labelsOnTop;
    };
    /**
     *
     * Used by child component to inherit editability
     *
     */
    /**
     *
     * Used by child component to inherit editability
     *
     * @return {?}
     */
    FormTableComponent.prototype.isFormEditable = /**
     *
     * Used by child component to inherit editability
     *
     * @return {?}
     */
    function () {
        return this.editable;
    };
    /**
     * @return {?}
     */
    FormTableComponent.prototype.applyColumns = /**
     * @return {?}
     */
    function () {
        if (!this.useFiveZone && this.hasAnyZones()) {
            throw new Error('Zones detected in the FormTable but useFiveZone option is false');
        }
        this.hasOneColumn = !Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.rightZone) && !Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.middleZone);
        this.hasTwoColumn = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.leftZone) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.rightZone) &&
            !Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.middleZone);
        this.hasThreeColumn = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.leftZone) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.rightZone) &&
            Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.middleZone);
        if (this.hasTwoColumn && !this.isTwoZoneReady()) {
            this.leftZone.classList += ' ui-md-6 ui-lg-6';
            this.rightZone.classList += ' ui-md-6 ui-lg-6';
        }
        if (this.hasThreeColumn && !this.isThreeZoneReady()) {
            this.leftZone.classList += ' ui-md-6 ui-lg-4';
            this.rightZone.classList += ' ui-md-6 ui-lg-4';
        }
    };
    /**
     * @return {?}
     */
    FormTableComponent.prototype.hasAnyZones = /**
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.leftZone) || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.rightZone) || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.middleZone)
            || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.topZone) || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.bottomZone);
    };
    /**
     * Helper method to check if we already initialized the classList.
     * the
     *
     * TODO: Probably string array would be easier
     */
    /**
     * Helper method to check if we already initialized the classList.
     * the
     *
     * TODO: Probably string array would be easier
     * @return {?}
     */
    FormTableComponent.prototype.isTwoZoneReady = /**
     * Helper method to check if we already initialized the classList.
     * the
     *
     * TODO: Probably string array would be easier
     * @return {?}
     */
    function () {
        return this.leftZone.classList.indexOf('ui-lg-6') > 0 &&
            this.leftZone.classList.indexOf('ui-lg-6') > 0;
    };
    /**
     * Helper method to check if we already initialized the classList.
     * the
     *
     * TODO: Probably string array would be easier
     */
    /**
     * Helper method to check if we already initialized the classList.
     * the
     *
     * TODO: Probably string array would be easier
     * @return {?}
     */
    FormTableComponent.prototype.isThreeZoneReady = /**
     * Helper method to check if we already initialized the classList.
     * the
     *
     * TODO: Probably string array would be easier
     * @return {?}
     */
    function () {
        return this.leftZone.classList.indexOf('ui-lg-4') > 0 &&
            this.leftZone.classList.indexOf('ui-lg-4') > 0;
    };
    /**
     * @return {?}
     */
    FormTableComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // problem since Angular 4.2, ngAfterContentInit
        // without this I get error that value was changed after view was checked
        // todo: refactor  - mainly our zones left, right middle
        setTimeout(function () {
            _this.applyColumns();
            _this.updateFormFields();
            _this.adjustLayout();
        });
    };
    /**
     * @return {?}
     */
    FormTableComponent.prototype.updateFormFields = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.editabilityCheck && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.formFields) && this.formFields.length > 0) {
            this.formFields.forEach(function (item) {
                item.editable = _this.editable;
                // item.formGroup = this.formGroup;
            });
        }
    };
    /**
     * Based on if we are 2 or 3 or 1 column layout we need to adjust widgets width within the
     * form row.
     * @return {?}
     */
    FormTableComponent.prototype.adjustLayout = /**
     * Based on if we are 2 or 3 or 1 column layout we need to adjust widgets width within the
     * form row.
     * @return {?}
     */
    function () {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.rows) && this.rows.length > 0) {
            if (this.hasThreeColumn) {
                this.rows.forEach(function (item) { return item.size = 'large'; });
            }
        }
    };
    FormTableComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-form-table',
                    template: "<form class=\"w-form-table ui-g ui-fluid\" [formGroup]=\"formGroup\"\n      [ngClass]=\"styleClass\"\n      (ngSubmit)=\"onSubmitForm(formGroup.value)\" novalidate>\n\n    <div class=\"ui-g-12 ui-g-nopad\">\n\n        <div class=\"ui-g\">\n            <ng-content></ng-content>\n        </div>\n\n    </div>\n</form>\n\n",
                    styles: [".page-container>form{margin-top:1em}.w-form-table button{float:right}"],
                    providers: [
                        { provide: BaseFormComponent, useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return FormTableComponent; }) }
                    ]
                },] },
    ];
    /** @nocollapse */
    FormTableComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] }
    ]; };
    FormTableComponent.propDecorators = {
        labelsOnTop: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        useFiveZone: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        editabilityCheck: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        onSubmit: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        leftZone: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [LeftZoneComponent,] }],
        middleZone: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [MiddleZoneComponent,] }],
        rightZone: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [RightZoneComponent,] }],
        topZone: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [TopZoneComponent,] }],
        bottomZone: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [BottomZoneComponent,] }],
        formFields: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [BaseFormComponent, { descendants: true },] }],
        rows: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return FormRowComponent; }), { descendants: true },] }]
    };
    return FormTableComponent;
}(BaseFormComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWFormTableModule = /** @class */ (function () {
    function AWFormTableModule() {
    }
    AWFormTableModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        FormTableComponent,
                        FormRowComponent,
                        TopZoneComponent,
                        LeftZoneComponent,
                        RightZoneComponent,
                        MiddleZoneComponent,
                        BottomZoneComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        primeng_components_inputtext_inputtext__WEBPACK_IMPORTED_MODULE_7__["InputTextModule"],
                        AWCoreComponentModule
                    ],
                    entryComponents: [
                        FormTableComponent,
                        FormRowComponent,
                        TopZoneComponent,
                        LeftZoneComponent,
                        RightZoneComponent,
                        MiddleZoneComponent,
                        BottomZoneComponent
                    ],
                    exports: [
                        FormTableComponent,
                        FormRowComponent,
                        TopZoneComponent,
                        LeftZoneComponent,
                        RightZoneComponent,
                        MiddleZoneComponent,
                        BottomZoneComponent
                    ]
                },] },
    ];
    return AWFormTableModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * This component represent a Input field and it can  accept different types of values such as
 * text, number.
 *
 *
 *
 * ### Example
 *
 * ```typescript
 * \@Component({
 *      selector: 'wrapper-comp' ,
 *      template: '<aw-input-field [value]="inputValue" [type]="inputType"></aw-input-field>'
 *  })
 *  export class TestInputComponent
 *  {
 *      inputValue: string = 'Some text';
 *
 *      // by default input type is text, you can pass string, String, or text
 *      inputType: string = 'string';
 *  }
 *
 * ```
 *
 *
 *
 * ### Example wher input field is initialized with ngModel
 *
 * ```typescript
 * \@Component({
 *      selector: 'wrapper-comp' ,
 *      template: '<aw-input-field [value]="inputValue" [(ngModel)]="inputType"></aw-input-field>'
 *  })
 *  export class TestInputComponent
 *  {
 *      inputValue: string = 'Some text';
 *
 *      // by default input type is text, you can pass string, String, or text
 *      inputType: string = 'string';
 *  }
 *
 * ```
 *
 *  Note: if you are using this outside of FormTable please provide your own FormGroup
 *
 */
var /** @type {?} */ INPUT_CONTROL_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return InputFieldComponent; }),
    multi: true
};
var InputFieldComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(InputFieldComponent, _super);
    function InputFieldComponent(env, parentContainer) {
        var _this = _super.call(this, env, parentContainer) || this;
        _this.env = env;
        _this.parentContainer = parentContainer;
        /**
         *
         * A value used to save and read  when rendering and updating a component
         *
         */
        _this.value = '';
        /**
         * The formatted decimal value. Uses angular decimalPipe to format based on locale.
         */
        _this.displayValue = '';
        /**
         * Input field type. Currently we support either Number or text
         */
        _this._type = 'string';
        _this.decimalPipe = new _angular_common__WEBPACK_IMPORTED_MODULE_5__["DecimalPipe"](env.locale);
        return _this;
    }
    Object.defineProperty(InputFieldComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        /**
         *
         * generated setter to check for value and normalizing into expected either number or text
         *
         */
        set: /**
         *
         * generated setter to check for value and normalizing into expected either number or text
         *
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value.toLowerCase() === 'string' || value.toLowerCase() === 'text') {
                this._type = 'text';
            }
            else if (value.toLowerCase() === 'number') {
                this._type = 'number';
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InputFieldComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        _super.prototype.registerFormControl.call(this, this.bigDecimal);
        this.vchSubscriber = this.formControl.valueChanges
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["distinctUntilChanged"])())
            .subscribe(function (val) {
            _this.value = val;
            _this.onModelChanged(_this.value);
        });
        if (this.bigDecimal) {
            this.displayValue = this.formatNumber(this.bigDecimal.amount);
        }
        else {
            this.displayValue = this.value;
        }
    };
    /**
     * @return {?}
     */
    InputFieldComponent.prototype.canSetType = /**
     * @return {?}
     */
    function () {
        return true;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    InputFieldComponent.prototype.onKeyDown = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        if (this._type === 'number') {
            this.displayValue = el.value;
            this.onModelChanged(this.displayValue);
        }
    };
    /**
     * @param {?} el
     * @return {?}
     */
    InputFieldComponent.prototype.onBlur = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        if (this._type === 'number') {
            this.bigDecimal = new BigDecimal(Number(el.value));
            this.displayValue = this.formatNumber(this.bigDecimal.amount);
            this.onModelChanged(this.displayValue);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    InputFieldComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== this.displayValue) {
            this.value = value;
            this.displayValue = '';
            if (this.value) {
                this.displayValue = this.value;
            }
            this.formControl.setValue(value, { onlySelf: true });
        }
    };
    /**
     * Format the number object according to its precision.
     *
     */
    /**
     * Format the number object according to its precision.
     *
     * @param {?} value
     * @return {?}
     */
    InputFieldComponent.prototype.formatNumber = /**
     * Format the number object according to its precision.
     *
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!value) {
            return '';
        }
        // If precision is present, use it for format the bigDecimal value for display.
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.precision) &&
            this._type === 'number') {
            // The default precision is 2. For example, 10.23.
            var /** @type {?} */ digits = '1.0-2';
            digits = '1.0-' + this.precision;
            return this.decimalPipe.transform(value, digits);
        }
        return value;
    };
    /**
     * @return {?}
     */
    InputFieldComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnDestroy.call(this);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.vchSubscriber)) {
            this.vchSubscriber.unsubscribe();
        }
    };
    InputFieldComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-input-field',
                    template: "<div *ngIf=\"editable\" [formGroup]=\"formGroup\" class=\"w-input-wrapper\">\n\n    <input pInputText\n           #inputFieldValue\n           [attr.name]=\"name\"\n           [attr.type]=\"type\"\n           class=\"w-input-field\"\n           [ngClass]=\"styleClass\"\n           [class.has-icon]=\"icon\"\n           placeholder=\"{{placeHolder}}\"\n           [class.u-validation-error]=\"!(formControl.valid || (formControl.pristine))\"\n           formControlName=\"{{name}}\"\n           (keydown)=\"onKeyDown(inputFieldValue)\"\n           (blur)=\"onBlur(inputFieldValue)\"\n           [value]=\"displayValue\">\n    <span *ngIf=\"icon\" class=\"sap-icon\" [ngClass]=\"icon\"></span>\n</div>\n\n\n<ng-template [ngIf]=\"!editable\">\n    <aw-string [value]=\"displayValue\"></aw-string>\n</ng-template>\n",
                    styles: [".w-input-wrapper{position:relative}.w-input-field{padding-right:35px}.w-input-field~span{top:13px;position:absolute;right:15px}"],
                    providers: [
                        INPUT_CONTROL_VALUE_ACCESSOR,
                        { provide: BaseFormComponent, useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return InputFieldComponent; }) }
                    ]
                },] },
    ];
    /** @nocollapse */
    InputFieldComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: BaseFormComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return FormRowComponent; }),] }] }
    ]; };
    InputFieldComponent.propDecorators = {
        value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        precision: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        bigDecimal: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        icon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return InputFieldComponent;
}(BaseFormComponent));
/**
 * BigDecimal object is represented as a value, locale, and currencyCode
 */
var /**
 * BigDecimal object is represented as a value, locale, and currencyCode
 */
BigDecimal = /** @class */ (function () {
    function BigDecimal(amount, locale) {
        if (amount === void 0) { amount = 0; }
        if (locale === void 0) { locale = 'en_US'; }
        this.amount = amount;
        this.locale = locale;
    }
    /**
     * @return {?}
     */
    BigDecimal.prototype.getTypes = /**
     * @return {?}
     */
    function () {
        return {
            amount: Number,
            locale: String
        };
    };
    /**
     * @return {?}
     */
    BigDecimal.prototype.className = /**
     * @return {?}
     */
    function () {
        return 'BigDecimal';
    };
    /**
     * @return {?}
     */
    BigDecimal.prototype.$proto = /**
     * @return {?}
     */
    function () {
        return new BigDecimal(1, 'en_US');
    };
    /**
     * @return {?}
     */
    BigDecimal.prototype.toString = /**
     * @return {?}
     */
    function () {
        return this.amount + ', locale: ' + this.locale;
    };
    /**
     * @param {?=} data
     * @return {?}
     */
    BigDecimal.prototype.clone = /**
     * @param {?=} data
     * @return {?}
     */
    function (data) {
        if (data === void 0) { data = {}; }
        return new BigDecimal(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(data.amount) ? data.amount : this.amount, Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(data.locale) ? data.locale : this.locale);
    };
    return BigDecimal;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWStringFieldModule = /** @class */ (function () {
    function AWStringFieldModule() {
    }
    AWStringFieldModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        StringComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"]
                    ],
                    entryComponents: [
                        StringComponent
                    ],
                    exports: [
                        StringComponent
                    ],
                    providers: []
                },] },
    ];
    return AWStringFieldModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWInputFieldModule = /** @class */ (function () {
    function AWInputFieldModule() {
    }
    AWInputFieldModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        InputFieldComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        primeng_components_inputtext_inputtext__WEBPACK_IMPORTED_MODULE_7__["InputTextModule"],
                        AWStringFieldModule
                    ],
                    entryComponents: [
                        InputFieldComponent
                    ],
                    exports: [
                        InputFieldComponent,
                        AWStringFieldModule,
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"]
                    ],
                    providers: []
                },] },
    ];
    return AWInputFieldModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *
 * basic navigation bar provide a main action buttons for its content (page level buttons).
 * This is not the Top level application navigation. This component provides by default action OK,
 * CANCEL and you are free to modify how the OK or CANCEL will be call as well as subscribe to the
 * event. Or you can provide your own buttons template which will be used instead of this default
 * one.
 *
 *
 *
 *
 *
 * ### Example 1:
 *
 * In order to use navigation bar in its basic usage you can do following:
 * this will render buttons on the top as well as on the bottom around the content.
 *
 *
 *  ```html
 *
 *      <aw-basic-navigator [brandImg]="'img/aribalogobal.png'">
 *
 *            <div class="container">
 *                <form>
 *                    User name: <input type=text value="peter.pan">
 *                </<form>>
 *            </div>
 *      </aw-basic-navigator>
 *
 *
 * ```
 *
 *  if you do not want button on the top or bottom you can say thi using binding showTop or
 * showBottom.
 *
 *
 * ### Example 2:
 *  In this example we are providing custom buttons as well as brank section
 *
 *
 *  ```html
 *
 *
 *      <aw-basic-navigator [brandImg]="'img/aribalogobal.png'">
 *            <ng-template #buttons>
 *                <ul class="nav navbar-nav float-md-right collapse navbar-toggleable-xs">
 *                    <li class="nav-item ">
 *                        <button class="btn btn-secondary" type="button"
 * (click)="onSaveAction($evemt)">Cancel</button>
 *                    </li>
 *                    <li class="nav-item active">
 *                        <button class="btn btn-primary" type="button"
 * (click)="onCancelAction($event)"> Save
 *                        </button>
 *                    </li>
 *                </ul>
 *            </ng-template>
 *
 *            <ng-template #brand>
 *                <span class="brand-title">Ariba</span>
 *            </ng-template>
 *
 *
 *            <div class="container">
 *                <form>
 *                    User name: <input type=text value="peter.pan">
 *                </<form>>
 *            </div>
 *      </aw-basic-navigator>
 *
 *
 * ```
 *
 */
var BasicNavigatorComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(BasicNavigatorComponent, _super);
    function BasicNavigatorComponent(env, appConfig) {
        var _this = _super.call(this, env) || this;
        /**
         * Indicates that buttons will be rendered on the top
         *
         * Default value is TRUE
         *
         */
        _this.showTop = true;
        /**
         * Indicates that buttons will be rendered on the bottom
         *
         * Default value is TRUE
         *
         */
        _this.showBottom = true;
        /**
         * Indicates that brand section that is on the left side and only in the top bar is visible
         *
         * Default value is TRUE
         *
         */
        _this.showBrand = true;
        /**
         *
         * EventEmitter that is triggered when you click on default OK Action
         *
         */
        _this.onOKAction = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         *
         * EventEmitter that is triggered when you click on default CANCEL Action
         *
         */
        _this.onCancelAction = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        // todo: load this from resource file using ngTranslate service
        // todo: load this from resource file using ngTranslate service
        _this.okActionLabel = 'OK';
        _this.cancelActionLabel = 'Cancel';
        _this.brandImg = 'images/aribalogobal.png';
        return _this;
    }
    /**
     * @return {?}
     */
    BasicNavigatorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.showCancelButton)) {
            this.showCancelButton = this.editable || (this.onCancelAction.observers.length > 0
                && this.onOKAction.observers.length > 0);
        }
    };
    /**
     * Returns if buttonsTemplate is available
     *
     */
    /**
     * Returns if buttonsTemplate is available
     *
     * @return {?}
     */
    BasicNavigatorComponent.prototype.hasButtonTemplate = /**
     * Returns if buttonsTemplate is available
     *
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.buttonsTemplate);
    };
    /**
     * Returns if brandTemplate is available
     *
     */
    /**
     * Returns if brandTemplate is available
     *
     * @return {?}
     */
    BasicNavigatorComponent.prototype.hasBrandTemplate = /**
     * Returns if brandTemplate is available
     *
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.brandTemplate);
    };
    BasicNavigatorComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-basic-navigator',
                    template: "<p-toolbar *ngIf=\"showTop\" [class]=\"'w-basic-navigator'\">\n    <div class=\"ui-toolbar-group-left\">\n\n        <a class=\"nav-brand\" href=\"#\" *ngIf=\"showBrand\">\n            <ng-template [ngIf]=\"!hasBrandTemplate()\">\n                <img src=\"{{assetFolder}}/{{brandImg}}\" height=\"30\" alt=\"\">\n                <span class=\"nav-brand-title\">Ariba</span>\n            </ng-template>\n\n            <ng-template [embeddedItem]=\"brandTemplate\" [item]=\"context\"\n                         *ngIf=\"hasBrandTemplate()\"></ng-template>\n        </a>\n\n    </div>\n\n    <div class=\"ui-toolbar-group-right\">\n        <ng-template [ngIf]=\"!hasButtonTemplate()\">\n\n            <aw-button *ngIf=\"showCancelButton\" [style]=\"'secondary'\"\n                       (action)=\"onCancelAction.emit($event)\">\n                {{cancelActionLabel}}\n            </aw-button>\n\n            <aw-button (action)=\"onOKAction.emit($event)\">\n                {{okActionLabel}}\n            </aw-button>\n\n\n        </ng-template>\n        <ng-template [embeddedItem]=\"buttonsTemplate\" [item]=\"context\"\n                     *ngIf=\"hasButtonTemplate()\"></ng-template>\n    </div>\n\n</p-toolbar>\n\n<ng-content></ng-content>\n\n<p-toolbar *ngIf=\"showBottom\">\n\n    <div class=\"ui-toolbar-group-right\">\n        <ng-template [ngIf]=\"!hasButtonTemplate()\">\n\n            <aw-button *ngIf=\"showCancelButton\" [style]=\"'secondary'\"\n                       (action)=\"onCancelAction.emit($event)\">\n                {{cancelActionLabel}}\n            </aw-button>\n\n            <aw-button (action)=\"onOKAction.emit($event)\">\n                {{okActionLabel}}\n            </aw-button>\n        </ng-template>\n        <ng-template [embeddedItem]=\"buttonsTemplate\" [item]=\"context\"\n                     *ngIf=\"hasButtonTemplate()\"></ng-template>\n    </div>\n\n</p-toolbar>\n\n\n\n",
                    styles: ["a.nav-brand{vertical-align:middle;line-height:inherit;text-decoration:none;color:#2d353c}a.nav-brand:focus,a.nav-brand:hover{text-decoration:none}a.nav-brand span{vertical-align:middle}.nav-brand img{display:inline-block;vertical-align:middle;padding:3px}"]
                },] },
    ];
    /** @nocollapse */
    BasicNavigatorComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["AppConfig"] }
    ]; };
    BasicNavigatorComponent.propDecorators = {
        showTop: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        showBottom: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        showBrand: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        brandImg: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        okActionLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        cancelActionLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        context: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        showCancelButton: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        onOKAction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        onCancelAction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        buttonsTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: ['buttons',] }],
        brandTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: ['brand',] }]
    };
    return BasicNavigatorComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Button component that implements consistent styling, behavior. Button can be rendered either as
 * a button or as a link. It could be standalone or be part of a form.
 *
 *  ### Example
 *  ```
 *
 * \@Component({
 *    selector: 'registration' ,
 *    template: `
 *
 *   <aw-form-table >
 *       <aw-form-row [label]="'Amount'" [name]="'amount'" [size]="'small'">
 *
 *           <aw-button [type]="'submit'" [name]="'button'"
 *                     (action)="onClicked($event)" [value]="command"
 *                     [style]="'warning'" >Button</aw-button>
 *       </aw-form-row>
 *   </aw-form-table>
 *
 *    `
 *    })
 *    export class MyComponent
 *    {
 *        command:boolean;
 *
 *        constructor ()
 *        {
 *        }
 *
 *        onClicked(value:string) {
 *           if (value) {
 *              // submit form.
 *           }
 *        }
 *    }
 */
var ButtonComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(ButtonComponent, _super);
    function ButtonComponent(element, env) {
        var _this = _super.call(this, env) || this;
        _this.element = element;
        _this.env = env;
        /**
         * Button types  [ button | submit | reset ]
         *
         */
        _this.type = 'button';
        /**
         * styling for this button. See ButtonStyle for all supported styles.
         */
        _this.style = 'primary';
        /**
         * sizing for this button. [large, normal, small].
         */
        _this.size = 'normal';
        /**
         * Event fired when user select a item
         */
        _this.action = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        // Default button class is secondary.
        // Default button class is secondary.
        _this.buttonClass = 'ui-button-secondary';
        // Default disabled
        // Default disabled
        _this.disabled = false;
        return _this;
    }
    /**
     * @return {?}
     */
    ButtonComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        // How to style this button.
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.style)) {
            if (this.style === 'primary') {
                // Default .ui-button and .ui-button-primary get the same style.
                // .ui-button-primary is necessary because button style can be overridden
                // when included inside other widgets. So specify primary
                this.buttonClass = 'ui-button-primary';
            }
            else {
                this.buttonClass = 'ui-button-' + this.style;
            }
        }
        // Determine the button class based on input size.
        if (this.size) {
            switch (this.size) {
                case 'large':
                    this.buttonClass += ' btn-lg';
                    break;
                case 'normal':
                    this.buttonClass += ' btn-mid';
                    break;
                case 'small':
                    this.buttonClass += ' btn-sm';
                    break;
            }
        }
    };
    /**
     * This is little hacky hackity hack as currently primeng button directive does not work with
     * ngcontent projection but it has a label bindings, which is not the way developers work with
     * button. you want to
     *
     * <button> MY CONTENT</button instead of <button label='MyContent'></button>
     *
     *
     * @Todo: Change this until the time keep a test that check that they are still using ui-button
     *     that we are expecting and replacing
     */
    /**
     * This is little hacky hackity hack as currently primeng button directive does not work with
     * ngcontent projection but it has a label bindings, which is not the way developers work with
     * button. you want to
     *
     * <button> MY CONTENT</button instead of <button label='MyContent'></button>
     *
     *
     * \@Todo: Change this until the time keep a test that check that they are still using ui-button
     *     that we are expecting and replacing
     * @return {?}
     */
    ButtonComponent.prototype.ngAfterViewInit = /**
     * This is little hacky hackity hack as currently primeng button directive does not work with
     * ngcontent projection but it has a label bindings, which is not the way developers work with
     * button. you want to
     *
     * <button> MY CONTENT</button instead of <button label='MyContent'></button>
     *
     *
     * \@Todo: Change this until the time keep a test that check that they are still using ui-button
     *     that we are expecting and replacing
     * @return {?}
     */
    function () {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.element)) {
            var /** @type {?} */ button = this.element.nativeElement.querySelector('button');
            var /** @type {?} */ buttonTitle = button.children[0];
            button.children[0].textContent = this.element.nativeElement.textContent.trim()
                .replace('ui-button', '').replace('ui-btn', '');
            button.classList.remove('ui-button-text-empty');
            button.textContent = '';
            button.appendChild(buttonTitle);
        }
    };
    /**
     *  Action clicked. Call parent action.
     */
    /**
     *  Action clicked. Call parent action.
     * @param {?} $event
     * @return {?}
     */
    ButtonComponent.prototype.clicked = /**
     *  Action clicked. Call parent action.
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.action.emit(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.value) ? $event : this.value);
    };
    ButtonComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-button',
                    template: "<button\n    pButton\n    [attr.type]=\"type\"\n    [attr.name]=\"name\"\n    [ngClass]=\"buttonClass\"\n    [disabled]=\"disabled\"\n    [attr.value]=\"value\"\n    (click)=\"clicked($event)\">\n\n    <ng-content></ng-content>\n</button>\n",
                    styles: [".ui-button-link{color:#337ab7;font-weight:400;border-radius:0;background-color:transparent}.ui-button-link,.ui-button-link.active,.ui-button-link:active,.ui-button-link:focus,.ui-button-link:hover,.ui-button-link[disabled]{border-color:transparent}.ui-button-link:focus,.ui-button-link:hover{color:#337ab7;-webkit-text-decoration:#337ab7;text-decoration:#337ab7;background-color:transparent}.ui-button-link[disabled]:focus,.ui-button-link[disabled]:hover{color:#2399e5;text-decoration:none}.ui-button{margin-right:5px}.btn-mid{height:36px;padding:5px 10px}.btn-lg{height:42px;font-size:16px;padding:5px 12px}.btn-sm{height:30px;font-size:12px;padding:5px 10px}"]
                },] },
    ];
    /** @nocollapse */
    ButtonComponent.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] }
    ]; };
    ButtonComponent.propDecorators = {
        type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        style: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        size: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        target: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        action: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
    };
    return ButtonComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWButtonModule = /** @class */ (function () {
    function AWButtonModule() {
    }
    AWButtonModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        ButtonComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ButtonModule"],
                    ],
                    entryComponents: [
                        ButtonComponent
                    ],
                    exports: [
                        ButtonComponent
                    ],
                    providers: []
                },] },
    ];
    return AWButtonModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWBasicNavigatorModule = /** @class */ (function () {
    function AWBasicNavigatorModule() {
    }
    AWBasicNavigatorModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        BasicNavigatorComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ToolbarModule"],
                        AWButtonModule,
                        AWCoreComponentModule
                    ],
                    exports: [
                        BasicNavigatorComponent
                    ],
                    providers: []
                },] },
    ];
    return AWBasicNavigatorModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var CardZoneTopComponent = /** @class */ (function () {
    function CardZoneTopComponent() {
    }
    CardZoneTopComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                    selector: "aw-card-top",
                    host: {
                        'class': 'w-card-ztop'
                    }
                },] },
    ];
    return CardZoneTopComponent;
}());
var CardZoneBottomComponent = /** @class */ (function () {
    function CardZoneBottomComponent() {
    }
    CardZoneBottomComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                    selector: "aw-card-bottom",
                    host: {
                        'class': 'w-card-zbottom'
                    }
                },] },
    ];
    return CardZoneBottomComponent;
}());
/**
 *
 * Card component is a container rendering its content inside 3 different zones.
 *
 *  ------------------------------------------
 *  |   TITLE                       | ACTION |
 *  |-----------------------------------------
 *  |                                        |
 *  |   TOP                                  |
 *  |                                        |
 *  ------------------------------------------
 *  |                                        |
 *  |   BOTTOM                               |
 *  |                                        |
 *  |                                        |
 *  ------------------------------------------
 *
 *
 *  There are 3 zones  + 1 placeholder for the actionIcon
 *
 *  Cards can be selectable which means when you click on it there will be rendered a border with
 *  a check mark inside Action zone (this is default behavior).
 *  You can use [selectable] binding to disable this, in such case card will have just a border
 *  without any check mark.
 *
 *  Cards can also contain custom Action which is rendered inside ACTION zone and on the
 *  application level you can listen for (click) events as well as you can provide your own action
 *  icon
 *
 *  Besides ACTION, TITLE, TOP and BOTTOM content zones cards support hover overlay effect and
 *  when its activated there is a overlay displayed on top of the card with Icon in the middle.
 *  Please note when [hasHover] is TRUE all the actions and selectability are disabled as there is
 *  only one action which click on the hover overlay.
 *
 *
 * ###example 1:
 *  Basic hover card which by default support selectable mode
 *
 * ```
 *          <aw-card #card1 [hasAction]="false" [width]="'202px'" [height]="'154px'">
 *
 *                 <aw-card-title [align]="'bottom-left'">
 *                     <span class="a-supplier-tag">
 *                         Preferred
 *                     </span>
 *                 </aw-card-title>
 *
 *                 <aw-card-top>
 *                     <div class="supplierName">
 *                         Haight Pumps
 *                     </div>
 *                     <div class="supplierLocation">
 *                         Palo Alto, CA, USA
 *                     </div>
 *                 </aw-card-top>
 *
 *                 <aw-card-bottom class="w-card-zbottom">
 *                     some text about the supplier and his parents<br/>
 *                     and some contacts
 *                 </aw-card-bottom>
 *
 *             </aw-card>
 *
 * ```
 *
 *  ###example 2:
 *   Hover card with custom action. when unselected action will appear and user can click on it.
 *
 * ```
 *          <aw-card #card1 [selectable]="true" [actionIcon]="'icon-question-mark'"
 *                     (onAction)="onAction(3, $event)">
 *
 *                 <aw-card-title [align]="'bottom-left'">
 *                     <span class="a-supplier-tag">
 *                         Preferred
 *                     </span>
 *                 </aw-card-title>
 *
 *                 <aw-card-top>
 *                     <div class="supplierName">
 *                         Haight Pumps
 *                     </div>
 *                     <div class="supplierLocation">
 *                         Palo Alto, CA, USA
 *                     </div>
 *                 </aw-card-top>
 *
 *                 <aw-card-bottom class="w-card-zbottom">
 *                     some text about the supplier and his parents<br/>
 *                     and some contacts
 *                 </aw-card-bottom>
 *
 *             </aw-card>
 *
 * ```
 *
 *
 *
 */
var CardComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(CardComponent, _super);
    function CardComponent(env) {
        var _this = _super.call(this, env) || this;
        _this.env = env;
        /**
         * Tells if we should explicitly hide the action
         *
         */
        _this.hasAction = false;
        /**
         *
         * Is selectable mode supported? Saying Yes, card will have by default check-mark in the
         * ACTION zone when selected
         *
         */
        _this.selectable = true;
        /**
         * Option to pass custom "Card Selected" Icon
         *
         */
        _this.selectedIcon = 'icon-accept';
        /*
             * Enable and disables hover effect on top of the card
             */
        _this.hasHover = false;
        /**
         *
         * Default icon name for the hover overlay. This icons shows up in the middle over the card
         * vertically and horizontally centered
         *
         */
        _this.hoverIcon = 'icon-add';
        /**
         *  Selection state
         *
         */
        _this.selected = true;
        /**
         * Fired when the card is selected.
         *
         */
        _this.onSelect = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Fired when action icon is clicked.
         *
         */
        _this.onAction = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Fired when the user clicks on the hover overlay.
         *
         */
        _this.onHoverAction = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Usually when template is provided we want to use it and replace internal one but in this
         * case it will be always conditional and application developer can switch between default
         * template with zones and custom one provided by developer.
         *
         */
        _this.useBodyTemplate = false;
        // sets default value
        // sets default value
        _this.width = '202px';
        _this.height = '154px';
        return _this;
    }
    /**
     * @return {?}
     */
    CardComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        // If application wants to use action it must provide actionIcon
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.actionIcon) && this.hasAction) {
            throw new Error('You need to provide action icon');
        }
    };
    /**
     * @return {?}
     */
    CardComponent.prototype.showBottomSection = /**
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.bottom);
    };
    /**
     * fires select and unselect event.
     */
    /**
     * fires select and unselect event.
     * @param {?} event
     * @return {?}
     */
    CardComponent.prototype.toggleSelect = /**
     * fires select and unselect event.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.selectable) {
            event.preventDefault();
            event.stopPropagation();
        }
        else {
            this.selected = !this.selected;
            this.onSelect.emit(this.selected);
        }
    };
    /**
     *
     * Only fired when action is rendered and user clicks on custom actionIcon
     *
     */
    /**
     *
     * Only fired when action is rendered and user clicks on custom actionIcon
     *
     * @param {?} event
     * @return {?}
     */
    CardComponent.prototype.onActionClick = /**
     *
     * Only fired when action is rendered and user clicks on custom actionIcon
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.hasAction && (!this.selected || !this.selectable)) {
            this.onAction.emit(this.selected);
        }
    };
    /**
     * Triggered  when hover effect is on + user click on the card
     *
     */
    /**
     * Triggered  when hover effect is on + user click on the card
     *
     * @param {?} isEnter
     * @return {?}
     */
    CardComponent.prototype.onHover = /**
     * Triggered  when hover effect is on + user click on the card
     *
     * @param {?} isEnter
     * @return {?}
     */
    function (isEnter) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.hoverDiv)) {
            this.hoverDiv.nativeElement.style.opacity = isEnter ? 0.5 : 0;
        }
    };
    /**
     *
     * Used to decide if we should render implicit card template with our zones or
     * user provided template
     *
     */
    /**
     *
     * Used to decide if we should render implicit card template with our zones or
     * user provided template
     *
     * @return {?}
     */
    CardComponent.prototype.showBodyTemplate = /**
     *
     * Used to decide if we should render implicit card template with our zones or
     * user provided template
     *
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.bodyTemplate) && this.useBodyTemplate;
    };
    CardComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-card',
                    template: "<div class=\"w-card\" [style.width]=\"width\" [style.height]=\"height\"\n     [class.u-is-hover]=\"hasHover\"\n     (mouseenter)=\"onHover(true)\"\n     (mouseleave)=\"onHover(false)\"\n     [class.u-card-selected]=\"selected\"\n     [class.u-card-unselected]=\"!selected\"\n     [ngClass]=\"styleClass\"\n>\n\n    <div class=\"card-body ui-g\"  *ngIf=\"!showBodyTemplate()\">\n        <!-- Hover element that is triggered by mouseenter, mouseleave events-->\n        <div #hoverDiv *ngIf=\"hasHover\" class=\"u-card-hover\" (click)=\"onHoverAction.emit($event)\">\n            <span [style.width]=\"'100%'\" class=\"sap-icon\" [ngClass]=\"hoverIcon\"></span>\n        </div>\n        <!-- HEADER HAVING TITLE AND ICONS/ACTIONS-->\n        <div class=\"ui-g-12 ui-g-nopad w-card-header\">\n            <div class=\"w-card-ztitle ui-g-nopad\" (click)=\"toggleSelect($event)\"\n                 [class.u-card-pointer]=\"selectable\"\n                 [ngClass]=\"{'ui-g-9': hasAction || selectable, 'ui-g-11': !hasAction && !selectable}\">\n                <ng-content select=\"aw-card-title\"></ng-content>\n            </div>\n\n            <div *ngIf=\"hasAction || selectable\" class=\"w-card-zaction ui-g-nopad ui-g-3\">\n\n                <span *ngIf=\"selected && selectable\" class=\"sap-icon selection\"\n                      [class.u-card-pointer]=\"selectable\"\n                      [class.u-card-action-bg]=\"selected\"\n                      (click)=\"toggleSelect($event)\"\n                      [ngClass]=\"selectedIcon\"></span>\n\n\n                <span *ngIf=\"hasAction && (!selected || !selectable) \"\n                      class=\"sap-icon action\"\n                      [class.u-card-pointer]=\"true\"\n                      (click)=\"onActionClick($event)\"\n                      [ngClass]=\"actionIcon\"\n                ></span>\n            </div>\n        </div>\n\n        <!--TOP CARD SECTION-->\n        <div class=\"w-card-ztop ui-g-nopad ui-g-12 \"\n             (click)=\"toggleSelect($event)\"\n             [class.u-card-pointer]=\"selectable\">\n            <ng-content select=\"aw-card-top\"></ng-content>\n        </div>\n\n        <div class=\"ui-g-12 ui-g-nopad w-card-line-divider  \" *ngIf=\"showBottomSection()\"></div>\n        <!--BOTTOM CARD SECTION-->\n        <div *ngIf=\"showBottomSection()\" class=\"ui-g-12 ui-g-nopad w-card-zbottom\"\n             [class.u-card-pointer]=\"selectable\"\n             (click)=\"toggleSelect($event)\">\n            <ng-content select=\"aw-card-bottom\"></ng-content>\n        </div>\n    </div>\n\n    <div *ngIf=\"showBodyTemplate()\" class=\"w-card-user-cnt\" >\n        <ng-container *ngTemplateOutlet=\"bodyTemplate\">\n        </ng-container>\n    </div>\n\n</div>\n",
                    styles: [".w-card{border:2px solid #0076cb;display:inline-block;overflow:hidden;color:#636363;box-sizing:border-box}.w-card-header{position:relative;height:30px;padding-left:1em}.w-card-ztitle{height:100%;padding-top:3px}.w-card-ztitle ::ng-deep .w-card-title{height:100%;width:100%;display:flex}.w-card-ztitle ::ng-deep .w-card-title>*{flex:0 1}.w-card-zaction{height:100%;display:inline-block;text-align:right}.w-card-zaction .sap-icon{width:29px;height:29px;text-align:center;display:inline-block;font-size:1.5em;line-height:1.4em}.w-card-zaction .sap-icon.selection{color:#fff}.w-card-zaction .sap-icon.action{color:#969696}.w-card-zbottom,.w-card-ztop{padding:1em}.w-card-line-divider{border-top:1px solid #d6d6d6;margin:0 14px}.w-card-user-cnt{width:100%;height:100%;position:relative;background-color:#eee}.u-card-hover{position:absolute;height:100%;width:100%;opacity:0;transition:.5s ease;background-color:#0076cb;z-index:100}.u-card-hover .sap-icon{text-align:center;display:inline-block;font-size:4em;color:#fff;position:relative;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.u-card-action-bg{background:#0076cb}.u-is-hover{position:relative}.u-card-selected{border-color:#0076cb}.u-card-unselected{border-color:#d7d7d7}.u-card-hover,.u-card-pointer{cursor:pointer}"]
                },] },
    ];
    /** @nocollapse */
    CardComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] }
    ]; };
    CardComponent.propDecorators = {
        hasAction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        selectable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        selectedIcon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        actionIcon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        hasHover: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        hoverIcon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        onSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        onAction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        onHoverAction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        bottom: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [CardZoneBottomComponent,] }],
        bodyTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: ['body',] }],
        hoverDiv: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['hoverDiv',] }]
    };
    return CardComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Maps our internal alignment value to real css values
 *
 */
var /** @type {?} */ VAlignMap = {
    'top-left': 'flex-start',
    'top-center': 'flex-start',
    'top-right': 'flex-start',
    'center-left': 'center',
    'center-center': 'center',
    'center-right': 'center',
    'bottom-left': 'flex-end',
    'bottom-center': 'flex-end',
    'bottom-right': 'flex-end'
};
var /** @type {?} */ HAlignMap = {
    'top-left': 'flex-start',
    'top-center': 'center',
    'top-right': 'flex-end',
    'center-left': 'flex-start',
    'center-center': 'center',
    'center-right': 'flex-end',
    'bottom-left': 'flex-start',
    'bottom-center': 'center',
    'bottom-right': 'flex-end'
};
/**
 * Title zone provides a content placeholder for the Title Area. This zone is adding ability
 * to align its content into 9 different position.
 *
 * You can use this Title zone within <aw-card> as:
 *
 *
 * ```html
 *
 *  <aw-card  [width]="'202px'" [height]="'154px'" [hasHover]="true"
 *                       [selectable]="false" [hasAction]="false"
 *                  (onHoverAction)="onAction(7, $event)" >
 *
 *                  <aw-card-title [align]="'bottom-left'">
 *                      <span class="a-supplier-tag">
 *                          Preferred
 *                      </span>
 *                  </aw-card-title>
 *
 *   </aw-card>
 *
 * ```
 * Default alignment is top-left
 *
 *
 *
 *
 */
var CardZoneTitleComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(CardZoneTitleComponent, _super);
    function CardZoneTitleComponent(env, elem) {
        var _this = _super.call(this, env) || this;
        _this.env = env;
        _this.elem = elem;
        /**
         * Special property which is used to apply flex properties for aligning content vertically
         * as well as horizontally
         *
         */
        _this.align = 'top-left';
        return _this;
    }
    /**
     * @return {?}
     */
    CardZoneTitleComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.elem.nativeElement.style.alignItems = VAlignMap[this.align];
        this.elem.nativeElement.style.justifyContent = HAlignMap[this.align];
    };
    CardZoneTitleComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                    selector: "aw-card-title",
                    host: {
                        'class': 'w-card-title'
                    }
                },] },
    ];
    /** @nocollapse */
    CardZoneTitleComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
    ]; };
    CardZoneTitleComponent.propDecorators = {
        align: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return CardZoneTitleComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWCardModule = /** @class */ (function () {
    function AWCardModule() {
    }
    AWCardModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"]
                    ],
                    declarations: [
                        CardComponent,
                        CardZoneTitleComponent,
                        CardZoneTopComponent,
                        CardZoneBottomComponent
                    ],
                    entryComponents: [
                        CardComponent
                    ],
                    exports: [
                        CardComponent,
                        CardZoneTitleComponent,
                        CardZoneTopComponent,
                        CardZoneBottomComponent
                    ],
                    providers: []
                },] },
    ];
    return AWCardModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *
 * Implements standard HTML checkbox on top of PrimeNG. There are 2 types of
 * {\@link CheckboxComponent}: form and action checkbox as described above.
 *
 *
 * Usage: Basic example having red checkbox checked
 *
 * ```HTML
 *        <aw-checkbox [name]="'color'" [value]="'red'" [label]="'Red'"
 *                                        [(ngModel)]="model">
 *        </aw-checkbox>
 *        <aw-checkbox [name]="'color'" [value]="'blue'" [label]="'Blue'"
 *                                        [(ngModel)]="model">
 *       </aw-checkbox>
 *
 * ```
 *
 * ```ts
 *
 *
 *   class CBBasicWithNgModelComponent
 *   {
 *
 *       model: string[] = ['red'];
 *
 *       constructor()
 *       {
 *       }
 *   }
 *
 * ```
 *
 * For more examples please see a playground or unit test.
 *
 */
var /** @type {?} */ CB_CONTROL_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return CheckboxComponent; }),
    multi: true
};
var CheckboxComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(CheckboxComponent, _super);
    function CheckboxComponent(env, parentContainer) {
        var _this = _super.call(this, env, parentContainer) || this;
        _this.env = env;
        _this.parentContainer = parentContainer;
        /**
         *
         * A value associated with this checkbox
         *
         */
        _this.value = '';
        /**
         * Type of checkbox. Form based updates model and Action based only fires click events
         *
         */
        _this.type = 'form';
        /**
         * Trigger click event.
         *
         */
        _this.action = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * PrimeNG has this type called binary which works only with Boolean meaning it does not add or
         * remove values.
         *
         * In our case Checktype = Action is always binary or when this.value is boolean
         *
         */
        _this.isBinary = false;
        return _this;
    }
    /**
     * @return {?}
     */
    CheckboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.model = this.value;
        this.type = this.action.observers.length > 0 ? 'action' : this.type;
        if (this.isFormType()) {
            _super.prototype.ngOnInit.call(this);
            if (this.isStandalone) {
                _super.prototype.registerFormControl.call(this, this.value);
                this.model = this.formControl.value;
                this.onModelChanged(this.model);
            }
            else {
                // get control from parent
                this.formControl = /** @type {?} */ (this.formGroup.controls[this.name]);
            }
        }
        // When value is boolean we are dealing with PrimeNg Binary checkbox
        // which only sets TRUE/FALSE and does not add or remove values
        this.isBinary = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBoolean"])(this.value);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    CheckboxComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        _super.prototype.ngOnChanges.call(this, changes);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(changes['value']) &&
            (changes['value'].currentValue !== changes['value'].previousValue)) {
            this.model = changes['value'].currentValue;
        }
    };
    /**
     * Called when Checkbox is clicked and it either fire action or updates the model.
     *
     */
    /**
     * Called when Checkbox is clicked and it either fire action or updates the model.
     *
     * @param {?} event
     * @return {?}
     */
    CheckboxComponent.prototype.onChange = /**
     * Called when Checkbox is clicked and it either fire action or updates the model.
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.isFormType()) {
            this.onModelChanged(this.model);
            if (this.isStandalone) {
                this.formControl.setValue(this.model);
            }
        }
        else {
            this.action.emit(event);
        }
    };
    /**
     *
     * Tell if we are using Form Checkbox. This is used remove some of the bindings that are not
     * applicable for certain type.
     *
     */
    /**
     *
     * Tell if we are using Form Checkbox. This is used remove some of the bindings that are not
     * applicable for certain type.
     *
     * @return {?}
     */
    CheckboxComponent.prototype.isFormType = /**
     *
     * Tell if we are using Form Checkbox. This is used remove some of the bindings that are not
     * applicable for certain type.
     *
     * @return {?}
     */
    function () {
        return this.type === 'form';
    };
    /**
     * Internal. Please see ControlValueAccessor
     *
     */
    /**
     * Internal. Please see ControlValueAccessor
     *
     * @param {?} value
     * @return {?}
     */
    CheckboxComponent.prototype.writeValue = /**
     * Internal. Please see ControlValueAccessor
     *
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== this.model && this.isFormType()) {
            this.model = value;
            if (this.isStandalone) {
                this.onModelChanged(this.model);
                this.formControl.setValue(this.model);
            }
        }
    };
    CheckboxComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-checkbox',
                    template: "<span class=\"w-checkbox\">\n\n    <ng-template [ngIf]=\"editable && isFormType()\">\n        <p-checkbox [name]=\"name\" [value]=\"value\" [label]=\"label\"\n                    [(ngModel)]=\"model\"\n                    [binary]=\"isBinary\"\n                    (onChange)=\"onChange($event)\"\n                    [disabled]=\"disabled\"\n                    [class.u-validation-error]=\"!(formControl.valid || (formControl.pristine))\"\n        >\n        </p-checkbox>\n    </ng-template>\n\n\n    <ng-template [ngIf]=\"!isFormType()\">\n        <p-checkbox [binary]=\"isBinary\"\n                    [label]=\"label\"\n                    [(ngModel)]=\"model\"\n                    (onChange)=\"onChange($event)\"\n                    [disabled]=\"disabled\">\n        </p-checkbox>\n\n    </ng-template>\n</span>\n",
                    styles: ["/deep/ .ui-chkbox .ui-chkbox-box{width:22px;height:22px}/deep/ .ui-chkbox .pi{font-family:\"SAP icon fonts\";color:#199de0;cursor:pointer;font-size:1.07em;line-height:1.42em}/deep/ .ui-chkbox .pi.pi-check:before{content:'\\e05b'}"],
                    providers: [
                        CB_CONTROL_VALUE_ACCESSOR,
                        { provide: BaseFormComponent, useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return CheckboxComponent; }) }
                    ]
                },] },
    ];
    /** @nocollapse */
    CheckboxComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: BaseFormComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return BaseFormComponent; }),] }] }
    ]; };
    CheckboxComponent.propDecorators = {
        value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        action: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
    };
    return CheckboxComponent;
}(BaseFormComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWCheckBoxModule = /** @class */ (function () {
    function AWCheckBoxModule() {
    }
    AWCheckBoxModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        CheckboxComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["CheckboxModule"]
                    ],
                    entryComponents: [
                        CheckboxComponent
                    ],
                    exports: [
                        CheckboxComponent,
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"]
                    ],
                    providers: []
                },] },
    ];
    return AWCheckBoxModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *  Checkbox list is a wrapper class around 'Checkbox' component to simply assembly of multi choice
 * component
 *
 * In Addition it adds ability to work with complex object. PrimeNG checkboxes work only with
 * primitive values.
 *
 * @see {\@link check-box/check-box.component.ts}
 *
 *
 * ### Example
 *
 *
 * \@Component({
 *       selector: 'showCheckBoxList' ,
 *       template: `
 *           <aw-checkbox-list [list]="checkBoxListValues" [selections]="selectedValues"
 *
 *            [name]="'myColors'" [formGroup]="formGroup" (onSelection)="onCBClick">
 *           </aw-checkbox-list>
 *       `
 *
 *       })
 *        class MyShowCLComponent
 *        {
 *            checkBoxListValues: string[] = ['blue' , 'red' , 'yellow' , 'orange' , 'white' ,
 *     'silver' , 'black' ,
 *            'Green' , 'Gray' , 'Navy' , 'Olive' , 'Aqua' , 'Purple'];
 *
 *            selectedValues: string[] = ['blue' , 'Olive' , 'Aqua' , 'Purple'];
 *
 *
 *            formGroup: FormGroup = new FormGroup({});
 *
 *
 *            onCBClick (event): void
 *            {
 *                console.log('onCBClick = ' + event);
 *            }
 *
 *        }
 * *
 */
var /** @type {?} */ CB_LIST_CONTROL_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return CheckBoxListComponent; }),
    multi: true
};
var CheckBoxListComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(CheckBoxListComponent, _super);
    function CheckBoxListComponent(env, cd, parentContainer) {
        var _this = _super.call(this, env, parentContainer) || this;
        _this.env = env;
        _this.cd = cd;
        _this.parentContainer = parentContainer;
        /**
         * Fires event when checkbox is selected/clicked. Emits current clicked checkboxed. not the
         * actuall internal model value in this case array of choices
         *
         */
        _this.onSelection = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Internal model
         */
        _this.model = [];
        return _this;
    }
    /**
     * @return {?}
     */
    CheckBoxListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.selections)) {
            this.selections = [];
        }
        this.registerFormControl(this.selections);
        this.updateModel(this.selections);
        this.onModelChanged(this.selections);
    };
    /**
     * @return {?}
     */
    CheckBoxListComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ updatedModel = [];
        this.model.forEach(function (index) { return updatedModel.push(_this.list[index]); });
        this.formControl.setValue(updatedModel, {
            emitEvent: true,
            emitViewToModelChange: false
        });
        this.cd.detectChanges();
    };
    /**
     * Label is extracted into this method so in the future we can play more how we want to display
     * the value. Since I want to support formatters for each components we might have a chance to
     * decide how label will look like.
     *
     */
    /**
     * Label is extracted into this method so in the future we can play more how we want to display
     * the value. Since I want to support formatters for each components we might have a chance to
     * decide how label will look like.
     *
     * @param {?} item
     * @return {?}
     */
    CheckBoxListComponent.prototype.labelValue = /**
     * Label is extracted into this method so in the future we can play more how we want to display
     * the value. Since I want to support formatters for each components we might have a chance to
     * decide how label will look like.
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.labelFormatter)) {
            return this.labelFormatter(item);
        }
        return item.toString();
    };
    /**
     * In this version of checkboxes we still expect only primitive types. Keep this functionality
     * in extra method so we can work with it even now we just return the same value back
     */
    /**
     * In this version of checkboxes we still expect only primitive types. Keep this functionality
     * in extra method so we can work with it even now we just return the same value back
     * @param {?} item
     * @return {?}
     */
    CheckBoxListComponent.prototype.value = /**
     * In this version of checkboxes we still expect only primitive types. Keep this functionality
     * in extra method so we can work with it even now we just return the same value back
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return item;
    };
    /**
     * Delegate event outside of this component and convert indexed model to original objects
     *
     */
    /**
     * Delegate event outside of this component and convert indexed model to original objects
     *
     * @param {?} event
     * @return {?}
     */
    CheckBoxListComponent.prototype.onChange = /**
     * Delegate event outside of this component and convert indexed model to original objects
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        var /** @type {?} */ updatedModel = [];
        this.model.forEach(function (index) {
            updatedModel.push(_this.list[index]);
        });
        this.onSelection.emit(updatedModel);
        this.onModelChanged(updatedModel);
        this.formControl.setValue(updatedModel, {
            emitEvent: true,
            emitViewToModelChange: false
        });
    };
    /**
     * Since we might be dealing with complex object store only INDEXes number in the model.
     *
     */
    /**
     * Since we might be dealing with complex object store only INDEXes number in the model.
     *
     * @param {?} sourceList
     * @return {?}
     */
    CheckBoxListComponent.prototype.updateModel = /**
     * Since we might be dealing with complex object store only INDEXes number in the model.
     *
     * @param {?} sourceList
     * @return {?}
     */
    function (sourceList) {
        var _this = this;
        sourceList.forEach(function (item) {
            var /** @type {?} */ index = _this.list.findIndex(function (elem) {
                return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["equals"])(item, elem);
            });
            _this.model.push(index);
        });
    };
    /**
     * Internal. Please see ControlValueAccessor
     *
     */
    /**
     * Internal. Please see ControlValueAccessor
     *
     * @param {?} value
     * @return {?}
     */
    CheckBoxListComponent.prototype.writeValue = /**
     * Internal. Please see ControlValueAccessor
     *
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.model) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(value)) {
            var /** @type {?} */ newModel = value;
            this.updateModel(newModel);
            // this.cd.markForCheck();
        }
    };
    CheckBoxListComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-checkbox-list',
                    template: "<div *ngFor=\"let item of list; let i = index\" class=\"ui-g\">\n\n    <!-- in the future we should be able to to support inline and stack-->\n    <div class=\"ui-g-12\">\n        <aw-checkbox [(ngModel)]=\"model\"\n                     (ngModelChange)=\"onChange($event)\"\n                     [editable]=\"editable\"\n                     [isStandalone]=\"false\"\n                     [name]=\"name\"\n                     [value]=\"i\"\n                     [label]=\"labelValue(item)\">\n\n        </aw-checkbox>\n    </div>\n\n</div>\n\n",
                    styles: [""],
                    providers: [
                        CB_LIST_CONTROL_VALUE_ACCESSOR,
                        { provide: BaseFormComponent, useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return CheckBoxListComponent; }) }
                    ]
                },] },
    ];
    /** @nocollapse */
    CheckBoxListComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
        { type: BaseFormComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return FormRowComponent; }),] }] }
    ]; };
    CheckBoxListComponent.propDecorators = {
        list: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        selections: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        onSelection: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        labelFormatter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return CheckBoxListComponent;
}(BaseFormComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWCheckBoxListModule = /** @class */ (function () {
    function AWCheckBoxListModule() {
    }
    AWCheckBoxListModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        CheckBoxListComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        AWCheckBoxModule
                    ],
                    exports: [
                        CheckBoxListComponent
                    ],
                    providers: []
                },] },
    ];
    return AWCheckBoxListModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Hyperlink component that implements consistent styling, behavior. Hyperlink supports all of the
 * native link functionality. In addition, it supports navigation to components through the action
 * binding.
 *
 *
 * for more info please see class Doc of the:
 * @see {\@link button/button.component.ts}
 *
 *  ### Example
 *  ```
 *
 * \@Component({
 *    selector: 'registration' ,
 *    template: `
 *
 *           <aw-hyperlink  [type]="'text/html'" [name]="'link'"
 *                        (action)="onClicked($event)" [value]="customerId"
 *                        [size]="'large'" >my link</aw-hyperlink>
 *
 *    `
 *    })
 *    export class MyComponent
 *    {
 *        command:boolean;
 *
 *        constructor ()
 *        {
 *        }
 *
 *        onClicked(customerId:string) {
 *           if (customerId) {
 *              // display customer details component.
 *           }
 *        }
 *    }
 */
var HyperlinkComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(HyperlinkComponent, _super);
    function HyperlinkComponent(env) {
        var _this = _super.call(this, env) || this;
        _this.env = env;
        /**
         * sizing for this link. [large, normal, small].
         */
        _this.size = 'normal';
        /**
         * Event fired when user select a item
         */
        _this.action = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Internal CSS class that styles this hyperlink based on input 'size'
         */
        _this.linkClass = 'link';
        return _this;
    }
    /**
     * @return {?}
     */
    HyperlinkComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        // Determine the link class based on input size.
        if (this.size) {
            switch (this.size) {
                case 'large':
                    this.linkClass += ' link-lg';
                    break;
                case 'normal':
                    this.linkClass += ' link-mid';
                    break;
                case 'small':
                    this.linkClass += ' link-sm';
                    break;
            }
        }
        // If I have an action tag, and no href. We add default styling and behavior.
        if (this.action.observers.length > 0) {
            this.linkClass += ' link-bh';
        }
    };
    /**
     *  Action clicked. Call parent action.
     */
    /**
     *  Action clicked. Call parent action.
     * @param {?} event
     * @return {?}
     */
    HyperlinkComponent.prototype.clicked = /**
     *  Action clicked. Call parent action.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.action.emit({
            event: event,
            value: this.value
        });
    };
    HyperlinkComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-hyperlink',
                    template: "<a [attr.type]=\"type\"\n   [attr.href]=\"href\"\n   [attr.rel]=\"rel\"\n   [attr.target]=\"target\"\n   [ngClass]=\"linkClass\"\n   [class.disabled]=\"disabled\"\n   (click)=\"clicked($event)\">\n\n    <ng-content></ng-content>\n</a>\n",
                    styles: [".link{color:#0275d8;cursor:pointer}.link.link-bh{color:#0275d8}.link.link-bh:hover{text-decoration:underline;cursor:pointer}.link-sm{font-size:.875em}.link-mid{font-size:1em}.link-lg{font-size:1.25em}.link.disabled{pointer-events:none;cursor:default;color:#ddd}"]
                },] },
    ];
    /** @nocollapse */
    HyperlinkComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] }
    ]; };
    HyperlinkComponent.propDecorators = {
        type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        href: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        rel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        size: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        target: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        action: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
    };
    return HyperlinkComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWHyperlinkModule = /** @class */ (function () {
    function AWHyperlinkModule() {
    }
    AWHyperlinkModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        HyperlinkComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"]
                    ],
                    entryComponents: [
                        HyperlinkComponent
                    ],
                    exports: [
                        HyperlinkComponent
                    ],
                    providers: []
                },] },
    ];
    return AWHyperlinkModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Selection State for the chooser in order to be able to comunicate with the parent object using a
 * chooser. If I would have to manage only single values with no addional methods i would user
 * emitters to do the job, but in this case we need this interface (abstract class) between a
 * chooser and actual object.
 *
 *
 * @abstract
 */
var  /**
 * Selection State for the chooser in order to be able to comunicate with the parent object using a
 * chooser. If I would have to manage only single values with no addional methods i would user
 * emitters to do the job, but in this case we need this interface (abstract class) between a
 * chooser and actual object.
 *
 *
 * @abstract
 */
ChooserSelectionState = /** @class */ (function () {
    function ChooserSelectionState() {
    }
    /**
     *
     * Set selection state is usually triggered by selecting and unselecting a item (in case of
     * multiselect) and it should update its list of objects with either settings/adding item or
     * removing it.
     *
     *
     */
    /**
     *
     * Set selection state is usually triggered by selecting and unselecting a item (in case of
     * multiselect) and it should update its list of objects with either settings/adding item or
     * removing it.
     *
     *
     * @param {?} selection
     * @param {?} selected
     * @return {?}
     */
    ChooserSelectionState.prototype.setSelectionState = /**
     *
     * Set selection state is usually triggered by selecting and unselecting a item (in case of
     * multiselect) and it should update its list of objects with either settings/adding item or
     * removing it.
     *
     *
     * @param {?} selection
     * @param {?} selected
     * @return {?}
     */
    function (selection, selected) {
    };
    /**
     * The most recent selection . Null if last action was a deselection. Usually used by Chooser
     * or ChooserState to get cuurent value.
     *
     */
    /**
     * The most recent selection . Null if last action was a deselection. Usually used by Chooser
     * or ChooserState to get cuurent value.
     *
     * @return {?}
     */
    ChooserSelectionState.prototype.selectedObject = /**
     * The most recent selection . Null if last action was a deselection. Usually used by Chooser
     * or ChooserState to get cuurent value.
     *
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["unimplemented"])();
    };
    /**
     * The most recent selections.
     *
     */
    /**
     * The most recent selections.
     *
     * @return {?}
     */
    ChooserSelectionState.prototype.selectedObjects = /**
     * The most recent selections.
     *
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["unimplemented"])();
    };
    /**
     *
     * Check if the item selection items is in the selectedObjects
     */
    /**
     *
     * Check if the item selection items is in the selectedObjects
     * @param {?} selection
     * @return {?}
     */
    ChooserSelectionState.prototype.isSelected = /**
     *
     * Check if the item selection items is in the selectedObjects
     * @param {?} selection
     * @return {?}
     */
    function (selection) {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["unimplemented"])();
    };
    return ChooserSelectionState;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * ChooserState manages complete lifecycle for the Chooser Component. It keeps track of current
 * selection as well as it can broadcast any updates.
 *
 *
 */
var  /**
 * ChooserState manages complete lifecycle for the Chooser Component. It keeps track of current
 * selection as well as it can broadcast any updates.
 *
 *
 */
ChooserState = /** @class */ (function () {
    function ChooserState(chooserSelectionState, isMulti) {
        if (isMulti === void 0) { isMulti = true; }
        /**
         * Indicates if there are any validation like entered value does not much with the source list.
         *
         */
        this.isInvalid = false;
        /**
         *
         * indicates that we started to some editing e.g. starting to type in something into the
         * filter, or removing already selected items
         */
        this.addMode = false;
        this.recentSelectedDisplayed = 0;
        /**
         * When this option is active we do not show all selected items, but max number that is
         * defined. User is able to toggle to expand the view to see all selections and hide them as
         * well
         */
        this.showAllRecentlySelected = false;
        this.selectionState = chooserSelectionState;
        this.multiselect = isMulti;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.selectionState)) {
            this.selectionState = new DefaultSelectionState(this.multiselect);
        }
    }
    /**
     *
     * It will select and persist an item using ChooserSelectionState provider.
     *
     */
    /**
     *
     * It will select and persist an item using ChooserSelectionState provider.
     *
     * @param {?} item
     * @return {?}
     */
    ChooserState.prototype.updatedSelectedObjects = /**
     *
     * It will select and persist an item using ChooserSelectionState provider.
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(item)) {
            item = this.currentItem;
        }
        if (!this.multiselect) {
            this.setSelectionState(item, true);
        }
        else {
            var /** @type {?} */ selectedObject = this.selectedObject();
            var /** @type {?} */ selectedObjects = this.selectedObjects();
            if (this.addMode) {
                if (this.isInvalid) {
                    if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(selectedObject)) {
                        this.setSelectionState(selectedObject, false);
                    }
                }
                this.setSelectionState(item, !_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].containsComplex(selectedObjects, item));
            }
            else {
                if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(selectedObject)) {
                    this.setSelectionState(selectedObject, false);
                }
                this.setSelectionState(item, true);
            }
        }
    };
    /**
     * When user selection is large we use this method to check if we need to show all selected
     * items or only MaxRecentSelected
     */
    /**
     * When user selection is large we use this method to check if we need to show all selected
     * items or only MaxRecentSelected
     * @return {?}
     */
    ChooserState.prototype.toggleAllSelected = /**
     * When user selection is large we use this method to check if we need to show all selected
     * items or only MaxRecentSelected
     * @return {?}
     */
    function () {
        this.showAllRecentlySelected = !this.showAllRecentlySelected;
    };
    Object.defineProperty(ChooserState.prototype, "recentSelectedObjects", {
        /**
         *
         * Renders user's selection under the input field
         *
         */
        get: /**
         *
         * Renders user's selection under the input field
         *
         * @return {?}
         */
        function () {
            if (!this.multiselect) {
                return [];
            }
            var /** @type {?} */ recentSelectedObjects = [];
            this.recentSelectedDisplayed = 0;
            var /** @type {?} */ selectedObjects = this.selectedObjects();
            var /** @type {?} */ size = selectedObjects.length;
            var /** @type {?} */ maxCount = DataSource.MaxRecentSelected;
            if (size > DataSource.MaxRecentSelected && !this.showAllRecentlySelected) {
                maxCount -= 1;
            }
            if (this.showAllRecentlySelected) {
                maxCount = size;
            }
            for (var /** @type {?} */ i = size - 1; i >= 0 && (this.recentSelectedDisplayed < maxCount); i--) {
                var /** @type {?} */ selection = selectedObjects[i];
                recentSelectedObjects.push(selection);
                this.recentSelectedDisplayed++;
            }
            return recentSelectedObjects;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ChooserState.prototype.selectedObject = /**
     * @return {?}
     */
    function () {
        return this.selectionState.selectedObject();
    };
    /**
     * @return {?}
     */
    ChooserState.prototype.selectedObjects = /**
     * @return {?}
     */
    function () {
        return this.selectionState.selectedObjects();
    };
    /**
     * @param {?} selection
     * @param {?} selected
     * @return {?}
     */
    ChooserState.prototype.setSelectionState = /**
     * @param {?} selection
     * @param {?} selected
     * @return {?}
     */
    function (selection, selected) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(selection)) {
            this.selectionState.setSelectionState(selection, selected);
        }
    };
    return ChooserState;
}());
/**
 * Dummy implementation ChooserSelectionState
 */
var  /**
 * Dummy implementation ChooserSelectionState
 */
DefaultSelectionState = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(DefaultSelectionState, _super);
    function DefaultSelectionState(multiSelect) {
        var _this = _super.call(this) || this;
        _this.multiSelect = multiSelect;
        return _this;
    }
    /**
     * @param {?} selection
     * @param {?} selected
     * @return {?}
     */
    DefaultSelectionState.prototype.setSelectionState = /**
     * @param {?} selection
     * @param {?} selected
     * @return {?}
     */
    function (selection, selected) {
        if (selected) {
            this._selectedObject = selection;
            if (this.multiSelect && !_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].containsComplex(this.selectedObjects(), selection)) {
                this.selectedObjects().push(selection);
            }
        }
        else {
            if (this.multiSelect) {
                _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].removeIfExist(this.selectedObjects(), selection);
            }
        }
    };
    /**
     * @return {?}
     */
    DefaultSelectionState.prototype.selectedObject = /**
     * @return {?}
     */
    function () {
        return this._selectedObject;
    };
    /**
     * @return {?}
     */
    DefaultSelectionState.prototype.selectedObjects = /**
     * @return {?}
     */
    function () {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._selectedObjects)) {
            this._selectedObjects = [];
        }
        return this._selectedObjects;
    };
    /**
     * @param {?} selection
     * @return {?}
     */
    DefaultSelectionState.prototype.isSelected = /**
     * @param {?} selection
     * @return {?}
     */
    function (selection) {
        return _super.prototype.isSelected.call(this, selection);
    };
    return DefaultSelectionState;
}(ChooserSelectionState));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Concrete DataSource implementation for the Chooser component. There are two ways how to use it:
 *
 * 1) You can use default DataSource injected inside component constructor and just call
 * initialize to configure it with correct DataProvider and DataFinder:
 *
 *
 * ```
 *   this.dataSource.init({
 *               obj: this.list,
 *               queryType: QueryType.FullText,
 *               state: null,
 *               multiselect: this.multiselect
 *           });
 *
 * ```
 *
 * and then you can use it to simply retrieve data or run queries.
 *
 * 2) You will instantiate your own DataSource and pass it into the component using [dataSource]
 * binding
 *
 * ```
 *
 *   this.ds = new ChooserDataSource(this.data, this.finders);
 *   this.ds.init({
 *               obj: this.list,
 *               queryType: QueryType.FullText,
 *               state: null,
 *               multiselect: this.multiselect
 *           });
 *
 * ```
 *
 *
 */
var  /**
 * Concrete DataSource implementation for the Chooser component. There are two ways how to use it:
 *
 * 1) You can use default DataSource injected inside component constructor and just call
 * initialize to configure it with correct DataProvider and DataFinder:
 *
 *
 * ```
 *   this.dataSource.init({
 *               obj: this.list,
 *               queryType: QueryType.FullText,
 *               state: null,
 *               multiselect: this.multiselect
 *           });
 *
 * ```
 *
 * and then you can use it to simply retrieve data or run queries.
 *
 * 2) You will instantiate your own DataSource and pass it into the component using [dataSource]
 * binding
 *
 * ```
 *
 *   this.ds = new ChooserDataSource(this.data, this.finders);
 *   this.ds.init({
 *               obj: this.list,
 *               queryType: QueryType.FullText,
 *               state: null,
 *               multiselect: this.multiselect
 *           });
 *
 * ```
 *
 *
 */
ChooserDataSource = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(ChooserDataSource, _super);
    function ChooserDataSource(dataProviders, finders) {
        var _this = _super.call(this, dataProviders, finders) || this;
        _this.dataProviders = dataProviders;
        _this.finders = finders;
        return _this;
    }
    /**
     * To initialize this DataSource with current DataFinder and Provider as well as state we use
     * an interface DSChooserInitParams to have all init values typed checked
     *
     *
     */
    /**
     * To initialize this DataSource with current DataFinder and Provider as well as state we use
     * an interface DSChooserInitParams to have all init values typed checked
     *
     *
     * @param {...?} args
     * @return {?}
     */
    ChooserDataSource.prototype.init = /**
     * To initialize this DataSource with current DataFinder and Provider as well as state we use
     * an interface DSChooserInitParams to have all init values typed checked
     *
     *
     * @param {...?} args
     * @return {?}
     */
    function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(args) || args.length !== 1 && !isDSChooserInitParams(args[0])) {
            throw new Error('You need to initialize DS with (DSChooserInitParams)');
        }
        var /** @type {?} */ init = args[0];
        this.dataProvider = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(init.dataProvider) ? init.dataProvider
            : this.dataProviders.find(init.obj);
        this.dataFinder = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(init.dataFinder) ? init.dataFinder
            : this.finders.find(this.dataProvider, init.queryType);
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.dataProvider) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.dataFinder), 'DataSource incorrectly initialized. (DataProvider, DataFinder) missing. ');
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(init.state)) {
            this.state = init.state;
        }
        else {
            this.state = new ChooserState(null, init.multiselect);
        }
        this.dataFinder.lookupKey = init.lookupKey;
        this.state.lookupKey = init.lookupKey;
    };
    /**
     * @param {?} pattern
     * @param {?} max
     * @return {?}
     */
    ChooserDataSource.prototype.find = /**
     * @param {?} pattern
     * @param {?} max
     * @return {?}
     */
    function (pattern, max) {
        var _this = this;
        this.state.pattern = pattern;
        this.state.lastFullMatchPattern = pattern;
        if (pattern.length === 0) {
            return;
        }
        if (pattern === '*') {
            // query everything
            pattern = '';
        }
        // make sure we dataFinder has expected lookup key
        var /** @type {?} */ origKey = this.dataFinder.lookupKey;
        this.dataFinder.lookupKey = this.state.lookupKey;
        this.dataFinder.forData(this.dataProvider).match(pattern, max)
            .subscribe(function (result) {
            _this.state.matches = result;
            if (_this.state.multiselect) {
                for (var /** @type {?} */ i = 0; i < _this.state.selectedObjects().length; i++) {
                    var /** @type {?} */ item = _this.state.selectedObjects()[i];
                    _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].removeIfExist(_this.state.matches, item);
                }
            }
            _this.dataFinder.lookupKey = origKey;
        });
    };
    /**
     *
     * When multiselect this method checks if we need to show SHOW MORE label under the selected
     * items. We do not want show e.g. 50 selection under the chooser that would take up whole
     * page.
     *
     */
    /**
     *
     * When multiselect this method checks if we need to show SHOW MORE label under the selected
     * items. We do not want show e.g. 50 selection under the chooser that would take up whole
     * page.
     *
     * @return {?}
     */
    ChooserDataSource.prototype.showMoreSelected = /**
     *
     * When multiselect this method checks if we need to show SHOW MORE label under the selected
     * items. We do not want show e.g. 50 selection under the chooser that would take up whole
     * page.
     *
     * @return {?}
     */
    function () {
        return this.state.selectedObjects().length >= DataSource.MaxRecentSelected;
    };
    /**
     * @template T
     * @return {?}
     */
    ChooserDataSource.prototype.open = /**
     * @template T
     * @return {?}
     */
    function () {
        return this.dataProvider.dataChanges.asObservable();
    };
    /**
     * @return {?}
     */
    ChooserDataSource.prototype.close = /**
     * @return {?}
     */
    function () {
        this.dataProvider = null;
        this.dataFinder = null;
        this.state = null;
    };
    /**
     * @template T
     * @return {?}
     */
    ChooserDataSource.prototype.instant = /**
     * @template T
     * @return {?}
     */
    function () {
        return this.dataProvider.data();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ChooserDataSource.prototype.updateValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        this.state.addMode = true;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(value)) {
            var /** @type {?} */ items = value;
            items.forEach(function (item) { return _this.state.updatedSelectedObjects(item); });
        }
        else {
            this.state.updatedSelectedObjects(value);
        }
        this.state.addMode = false;
    };
    Object.defineProperty(ChooserDataSource.prototype, "lookupKey", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dataFinder.lookupKey;
        },
        enumerable: true,
        configurable: true
    });
    return ChooserDataSource;
}(DataSource));
/**
 * @param {?} init
 * @return {?}
 */
function isDSChooserInitParams(init) {
    return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(init.obj) || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(init.queryType);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Typeahead chooser that supports both single and multi-select. Not like Dropdown, this chooser
 * requires little bit different setup. It requires at minimum \@Input dataSource or
 * destinationClass
 *
 *
 * By default chooser is multi-select. If you want single select then you must provide multi-select
 * with \@Input.
 *
 * ### Example
 *
 * In simple scenario you can use Chooser like so:
 *
 *
 * ```
 * \@Component({
 *      selector: 'chooser-app' ,
 *      template: `<aw-chooser  [formGroup]="formGroup" name="color"'
 *                      [dataSource]="ds"></aw-chooser>`
 *  })
 *  export class MyChooserApp
 *  {
 *
 *      ds: ChooserDataSource;
 *
 *     constructor(private data: DataProviders, private finders: DataFinders){
 *          this.ds = new ChooserDataSource(this.data, this.finders);
 *
 *       this.ds.init({
 *           obj: ['blue', 'red', 'yellow'], queryType: QueryType.FullText, state: null,
 *            multiselect: true
 *       });
 *
 *     }
 *  }
 *
 * ````
 *  Above example will use provided dataSource and render multi-select chooser. With default
 *  implementation  selected values will appear as a tags under the input box
 *
 *
 *
 * * ### Example
 *
 *  In this example we provide custom template to change the way how chooser's MenuItem are
 *     rendered as well as template for the selection item looks like
 *
 * ```
 * \@Component({
 *      selector: 'chooser-app' ,
 *      template: `<aw-chooser  name="commodity"' [dataSource]="ds">
 *
 *          <ng-template #menuItem let-item>
 *             	<span>
 *             		<i class="fa fa-envira " ></i>
 *             		{{item}}
 *             	</span>
 *
 *          </ng-template>
 *
 *          <ng-template #selectionItem let-item>
 *             	<span class="tag tag-circle">
 *             		item: {{item }}
 *             		<i class="fa fa-close" (click)="chooser.removeValue(item)"></i>
 *             	</span>
 *
 *
 *          </ng-template>
 *
 *
 *          </aw-chooser>
 *      `
 *      style: [`
 *              .tag-circle {
 *              	border-radius: 6rem;
 *              	height: 7rem;
 *              	color: #e8eef1;
 *              	background-color: rgba(53, 56, 58, 0.67);
 *              	line-height: 6rem;
 *              }
 *      `]
 *  })
 *
 * ````
 *
 *  In above example we change how the chooser's menu item look like as well as we define custom
 *     template for selection item to turn all selection to circles with text in the middle.
 *
 *
 *
 */
var /** @type {?} */ CHOOSER_CONTROL_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return ChooserComponent; }),
    multi: true
};
var ChooserComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(ChooserComponent, _super);
    function ChooserComponent(env, elemementRef, _defaultDS, parentContainer) {
        var _this = _super.call(this, env, parentContainer) || this;
        _this.env = env;
        _this.elemementRef = elemementRef;
        _this._defaultDS = _defaultDS;
        _this.parentContainer = parentContainer;
        /**
         * Max number of items return at single Match so we do not return 1000 items at single time.
         *
         */
        _this.maxLength = 10;
        /**
         * Max number of items return at single Match so we do not return 1000 items at single time.
         *
         */
        _this.minLenForSearch = 1;
        /**
         * Is this multiselect
         *
         */
        _this.multiselect = true;
        _this.delay = 300;
        /**
         * Event fired when user select a item
         */
        _this.onSelection = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(_this.placeHolder)) {
            // this.placeHolder = i18n.instant('Widgets.chooser.placeHolder');
            // this.placeHolder = i18n.instant('Widgets.chooser.placeHolder');
            _this.placeHolder = 'Search';
        }
        // this.hideLink = i18n.instant('Widgets.chooser.hideSelection');
        // this.hideLink = i18n.instant('Widgets.chooser.hideSelection');
        _this.hideLink = 'Hide';
        return _this;
    }
    /**
     * @return {?}
     */
    ChooserComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.dataSource)) {
            this.dataSource = this._defaultDS;
            this.initDatasource();
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.formControl) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.formControl.value)) {
            this.dataSource.updateValue(this.formControl.value);
        }
        this.initInternalModel();
        if (this.isStandalone) {
            _super.prototype.registerFormControl.call(this, this.internalChooserModel);
        }
        else {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.name)) {
                this.formControl = /** @type {?} */ (this.formGroup.controls[this.name]);
            }
        }
    };
    /**
     * Add Search icon in case of multiselect.
     * todo: Once PrimeNG will provide a template to override default behavior remove it
     *
     */
    /**
     * Add Search icon in case of multiselect.
     * todo: Once PrimeNG will provide a template to override default behavior remove it
     *
     * @return {?}
     */
    ChooserComponent.prototype.ngAfterViewInit = /**
     * Add Search icon in case of multiselect.
     * todo: Once PrimeNG will provide a template to override default behavior remove it
     *
     * @return {?}
     */
    function () {
        if (!this.dataSource.state.multiselect) {
            return;
        }
        var /** @type {?} */ searchInput = this.elemementRef.nativeElement.querySelector('.ui-autocomplete-input-token');
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(searchInput)) {
            var /** @type {?} */ iconElement = document.createElement('span');
            iconElement.className = 'search-icon-right fa fa-fw fa-search';
            searchInput.appendChild(iconElement);
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.selectionAppendTo) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.selectionViewElem)) {
            var /** @type {?} */ parentElem = this.selectionAppendTo instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] ?
                this.selectionAppendTo.nativeElement : this.selectionAppendTo;
            parentElem.appendChild(this.selectionViewElem.nativeElement);
        }
    };
    /**
     * Need to change current behavior since we want to show selection under the chooser. K
     *
     */
    /**
     * Need to change current behavior since we want to show selection under the chooser. K
     *
     * @return {?}
     */
    ChooserComponent.prototype.ngAfterViewChecked = /**
     * Need to change current behavior since we want to show selection under the chooser. K
     *
     * @return {?}
     */
    function () {
        if (!this.dataSource.state.multiselect) {
            return;
        }
        var /** @type {?} */ tokens = this.elemementRef.nativeElement.querySelectorAll('.ui-autocomplete .ui-autocomplete-token');
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(tokens) && tokens.length > 0) {
            tokens.forEach(function (item) {
                item.remove();
            });
        }
    };
    /**
     *
     * When value is entered into search box, we ask our DataSource to match this pattern
     * against data repository. It will retrieve all possible matches limited by MaxLen and this
     * is again filtered so it does not include already selected items.
     *
     *  the matched resulted is saved in the: this.dataSource.state.matches
     */
    /**
     *
     * When value is entered into search box, we ask our DataSource to match this pattern
     * against data repository. It will retrieve all possible matches limited by MaxLen and this
     * is again filtered so it does not include already selected items.
     *
     *  the matched resulted is saved in the: this.dataSource.state.matches
     * @param {?} pattern
     * @return {?}
     */
    ChooserComponent.prototype.match = /**
     *
     * When value is entered into search box, we ask our DataSource to match this pattern
     * against data repository. It will retrieve all possible matches limited by MaxLen and this
     * is again filtered so it does not include already selected items.
     *
     *  the matched resulted is saved in the: this.dataSource.state.matches
     * @param {?} pattern
     * @return {?}
     */
    function (pattern) {
        var /** @type {?} */ maxLen = this.maxLength ? this.maxLength : ChooserDataSource.MaxLength;
        this.dataSource.find(pattern, maxLen);
        // fix: for tests: In version 4 we need to explicitly focus input otherwise autocomplete
        // doesn't give us any popup panel
        if (this.env.inTest && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.autoCompleteComponent)) {
            this.autoCompleteComponent.focusInput();
        }
    };
    /**
     *
     * Invoked by Dropdown button in case of single select and here we want to invoke match
     * to retrieve all suggestions without any filter
     *
     */
    /**
     *
     * Invoked by Dropdown button in case of single select and here we want to invoke match
     * to retrieve all suggestions without any filter
     *
     * @param {?} event
     * @return {?}
     */
    ChooserComponent.prototype.onDropdownClick = /**
     *
     * Invoked by Dropdown button in case of single select and here we want to invoke match
     * to retrieve all suggestions without any filter
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        this.match('*');
        setTimeout(function () {
            _this.match('*');
        }, 100);
    };
    /**
     *
     * Chooser state is updated  with user selection. Please see writeValue. When do not need
     * call anything additional as internalChooserModel and this.chooserState.selectedObjects()
     * shares the same references so its important that we first save reference to
     * this.chooserState.selectedObjects() and then back to internalChooserModel
     *
     */
    /**
     *
     * Chooser state is updated  with user selection. Please see writeValue. When do not need
     * call anything additional as internalChooserModel and this.chooserState.selectedObjects()
     * shares the same references so its important that we first save reference to
     * this.chooserState.selectedObjects() and then back to internalChooserModel
     *
     * @param {?} item
     * @return {?}
     */
    ChooserComponent.prototype.selectItem = /**
     *
     * Chooser state is updated  with user selection. Please see writeValue. When do not need
     * call anything additional as internalChooserModel and this.chooserState.selectedObjects()
     * shares the same references so its important that we first save reference to
     * this.chooserState.selectedObjects() and then back to internalChooserModel
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.onSelection.emit(this.internalChooserModel);
        this.formControl.setValue(this.internalChooserModel, { emitEvent: true });
        this.formControl.markAsDirty({ onlySelf: true });
        this.dataSource.state.addMode = true;
        this.onModelChanged(this.internalChooserModel);
        this.dataSource.state.updatedSelectedObjects(item);
        this.dataSource.state.addMode = true;
        if (!this.dataSource.state.multiselect) {
            this.autoCompleteComponent.inputEL.nativeElement.value =
                this.displayItem(this.internalChooserModel);
        }
    };
    /**
     *
     * Unselect item
     *
     */
    /**
     *
     * Unselect item
     *
     * @param {?} item
     * @return {?}
     */
    ChooserComponent.prototype.removeValue = /**
     *
     * Unselect item
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.dataSource.state.addMode = true;
        this.dataSource.state.updatedSelectedObjects(item);
        this.dataSource.state.addMode = false;
        this.internalChooserModel = this.dataSource.state.selectedObjects();
        this.onSelection.emit(this.internalChooserModel);
        this.formControl.setValue(this.internalChooserModel, { emitEvent: true });
        this.formControl.markAsDirty({ onlySelf: true });
        this.onModelChanged(this.internalChooserModel);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.autoCompleteComponent)) {
            this.autoCompleteComponent.focusInput();
        }
    };
    /**
     *
     * Convert a object if any into the string representation
     *
     * todo: implement better way how to work with objects
     *
     */
    /**
     *
     * Convert a object if any into the string representation
     *
     * todo: implement better way how to work with objects
     *
     * @param {?} item
     * @return {?}
     */
    ChooserComponent.prototype.displayItem = /**
     *
     * Convert a object if any into the string representation
     *
     * todo: implement better way how to work with objects
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(item)) {
            return null;
        }
        this.dataSource.state.currentItem = item;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.valueTransformer)) {
            return this.valueTransformer(item);
        }
        else if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.dataSource.lookupKey)) {
            return item[this.dataSource.lookupKey];
        }
        else {
            return item.toString();
        }
    };
    /**
     *
     * Returns a label that is shown under the selected item when user selection is >
     * MaxRecentSelected
     *
     */
    /**
     *
     * Returns a label that is shown under the selected item when user selection is >
     * MaxRecentSelected
     *
     * @return {?}
     */
    ChooserComponent.prototype.moreSelectString = /**
     *
     * Returns a label that is shown under the selected item when user selection is >
     * MaxRecentSelected
     *
     * @return {?}
     */
    function () {
        var /** @type {?} */ moreSelected = this.dataSource.state.selectedObjects().length -
            this.dataSource.state.recentSelectedDisplayed;
        if (moreSelected < 2 && !this.dataSource.state.showAllRecentlySelected) {
            return '';
        }
        if (this.dataSource.state.showAllRecentlySelected) {
            return this.hideLink;
        }
        return moreSelected + " more selected...";
    };
    /**
     * In case of multiselect = false check if we want to show a selected value inside the input
     * field
     *
     */
    /**
     * In case of multiselect = false check if we want to show a selected value inside the input
     * field
     *
     * @return {?}
     */
    ChooserComponent.prototype.singleValueSelected = /**
     * In case of multiselect = false check if we want to show a selected value inside the input
     * field
     *
     * @return {?}
     */
    function () {
        return !this.dataSource.state && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.dataSource.state.currentItem)
            && !this.dataSource.state.addMode;
    };
    /**
     * @return {?}
     */
    ChooserComponent.prototype.hasMenuTemplate = /**
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.menuTemplate);
    };
    /**
     * @return {?}
     */
    ChooserComponent.prototype.hasSelectionTemplate = /**
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.selectionTemplate);
    };
    /**
     * Internal. Please see ControlValueAccessor
     * As we are using DataSource internally for [(ngModel)] case we need to deffer DataSource
     * initialization once we have a value and we only accept []
     *
     *
     * ? Should we do some deeper comparision?
     */
    /**
     * Internal. Please see ControlValueAccessor
     * As we are using DataSource internally for [(ngModel)] case we need to deffer DataSource
     * initialization once we have a value and we only accept []
     *
     *
     * ? Should we do some deeper comparision?
     * @param {?} value
     * @return {?}
     */
    ChooserComponent.prototype.writeValue = /**
     * Internal. Please see ControlValueAccessor
     * As we are using DataSource internally for [(ngModel)] case we need to deffer DataSource
     * initialization once we have a value and we only accept []
     *
     *
     * ? Should we do some deeper comparision?
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(value)) {
            return;
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.dataSource)) {
            this.dataSource.updateValue(value);
        }
        else {
            var /** @type {?} */ selState = new DefaultSelectionState(this.multiselect);
            var /** @type {?} */ chState = new ChooserState(selState, this.multiselect);
            this.initDatasource(chState);
            this.dataSource.updateValue(value);
        }
        this.initInternalModel();
    };
    /**
     * @param {?=} chooserState
     * @return {?}
     */
    ChooserComponent.prototype.initDatasource = /**
     * @param {?=} chooserState
     * @return {?}
     */
    function (chooserState) {
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.destinationClass), 'You need to provide destinationClass or custom DataSource');
        this.dataSource.init({
            obj: this.destinationClass,
            queryType: QueryType.FullText,
            lookupKey: this.field,
            state: chooserState,
            multiselect: this.multiselect
        });
    };
    /**
     *
     * Used by ngOnInit and Write value to read state from ChooserState and set it to internal
     * ngModel property
     *
     * @return {?}
     */
    ChooserComponent.prototype.initInternalModel = /**
     *
     * Used by ngOnInit and Write value to read state from ChooserState and set it to internal
     * ngModel property
     *
     * @return {?}
     */
    function () {
        if (this.dataSource.state.multiselect) {
            this.internalChooserModel = this.dataSource.state.selectedObjects();
        }
        else {
            this.internalChooserModel = this.dataSource.state.selectedObject();
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.formControl)) {
            this.formControl.setValue(this.internalChooserModel);
        }
    };
    ChooserComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-chooser',
                    template: "<div class=\"w-chooser \">\n\n    <p-autoComplete #autoCompplete [(ngModel)]=\"internalChooserModel\"\n                    [suggestions]=\"dataSource.state.matches\"\n                    [multiple]=\"dataSource.state.multiselect\"\n                    [dropdown]=\"!dataSource.state.multiselect\"\n                    [minLength]=\"minLenForSearch\"\n                    [placeholder]=\"placeHolder\"\n                    [delay]=\"delay\"\n                    [disabled]=\"disabled\"\n                    (onDropdownClick)=\"onDropdownClick($event)\"\n                    (completeMethod)=\"match($event.query)\"\n                    (onSelect)=\"selectItem($event)\"\n                    (onUnselect)=\"removeValue($event)\">\n\n\n        <ng-template let-internalChooserModel pTemplate=\"item\">\n            <ng-template [ngIf]=\"!hasMenuTemplate()\">\n                {{ displayItem(internalChooserModel) }}\n            </ng-template>\n            <ng-template [embeddedItem]=\"menuTemplate\" [item]=\"internalChooserModel\"\n                         *ngIf=\"hasMenuTemplate()\"></ng-template>\n        </ng-template>\n    </p-autoComplete>\n\n    <!--\n        Wrap whole selection with one extra element so we can move it around\n\n         see: selectionAppendTo\n    -->\n    <span #selectionView>\n        <div class=\"w-chooser-selections\"\n             *ngIf=\"multiselect && dataSource.state.recentSelectedObjects.length > 0\">\n\n        <ng-template [ngIf]=\"!hasSelectionTemplate()\">\n\n            <!-- no selection template render it as it is from CORE-->\n            <ul class=\"ui-autocomplete-multiple-container ui-widget ui-state-default \"\n                [ngClass]=\"{'ui-state-disabled':disabled,'ui-state-focus':autoCompleteComponent.focus}\">\n\n                <li #token *ngFor=\"let item of dataSource.state.recentSelectedObjects\"\n                    class=\"ui-autocomplete-token ui-state-highlight ui-corner-all\" tabindex=\"0\"\n                    (keyup.delete)=\"removeValue(item)\"\n                    (keyup.backspace)=\"removeValue(item)\">\n\t\t\t\t\t<span class=\"ui-autocomplete-token-icon sap-icon icon-decline\"\n                          (click)=\"removeValue(item)\"></span>\n                    <span class=\"ui-autocomplete-token-label\">{{ displayItem(item) }}</span>\n                </li>\n            </ul>\n        </ng-template>\n\n            <!--Yes there is selection template let's iterate and push each item to be rendered-->\n        <ng-template ngFor [ngForOf]=\"dataSource.state.recentSelectedObjects\" let-item>\n            <ng-template [embeddedItem]=\"selectionTemplate\" [item]=\"item\"\n                         *ngIf=\"hasSelectionTemplate()\"></ng-template>\n        </ng-template>\n\n        <ng-template [ngIf]=\"dataSource.showMoreSelected()\">\n\t\t\t<span class=\"more-selected\">\n\t\t\t\t<aw-hyperlink [size]=\"'small'\" (action)=\"dataSource.state.toggleAllSelected()\">\n\t\t\t\t\t{{moreSelectString()}}\n\t\t\t\t</aw-hyperlink>\n\t\t\t</span>\n        </ng-template>\n    </div>\n    </span>\n\n\n</div>\n\n",
                    styles: ["/deep/ .ui-fluid .ui-autocomplete.ui-autocomplete-dd .ui-autocomplete-input,/deep/ .ui-fluid .ui-autocomplete.ui-autocomplete-dd .ui-autocomplete-multiple-container{width:100%}/deep/ .w-chooser .ui-autocomplete-multiple{line-height:normal}/deep/ .w-chooser .ui-autocomplete-input{width:100%}/deep/ .w-chooser .ui-autocomplete-dropdown.ui-button{right:0;position:absolute;border:0;width:30px;background:0 0}/deep/ .w-chooser .ui-autocomplete-dropdown.ui-button .pi{font-family:\"SAP icon fonts\";color:#767676;cursor:pointer;font-size:1.4em;margin-left:-.85em}/deep/ .w-chooser .ui-autocomplete-dropdown.ui-button .pi-caret-down:before{content:'\\e1ef'}/deep/ .w-chooser .ui-autocomplete-dropdown.ui-button input{padding-right:30px}/deep/ .w-chooser .ui-autocomplete-input-token{padding:0;margin:0;vertical-align:baseline;width:inherit}/deep/ .w-chooser .ui-autocomplete-input-token .fa{font-family:\"SAP icon fonts\";color:#767676;cursor:pointer;font-size:1.2em}/deep/ .w-chooser .ui-autocomplete-input-token .fa-search:before{content:'\\e00d'}/deep/ .w-chooser .ui-autocomplete-input-token input{width:inherit;padding-right:25px}/deep/ .w-chooser .ui-autocomplete-input-token span{position:absolute;right:5px;top:0;padding-top:.6em}/deep/ .w-chooser .ui-autocomplete-dropdown{height:36px}/deep/ .w-chooser .ui-autocomplete-panel .ui-autocomplete-list-item{padding:.65em 2em .65em .64em;margin:0}/deep/ body .ui-autocomplete.ui-autocomplete-multiple .ui-autocomplete-multiple-container{padding:.4em .5em .4em 1em}.w-chooser-selections{margin-top:2px}.w-chooser-selections ul{margin:0;padding:0}.w-chooser-selections .ui-autocomplete-multiple-container{border:0}.w-chooser-selections .ui-autocomplete-multiple-container .ui-autocomplete-token{font-size:.85em;letter-spacing:.1px;font-weight:400;padding:0;background:#e0f2ff;margin-right:5px;margin-bottom:5px}.w-chooser-selections .ui-autocomplete-multiple-container .ui-autocomplete-token-label{padding:4px 21px 4px 5px}.w-chooser-selections .ui-autocomplete-multiple-container .ui-autocomplete-token-icon{font-size:.78em;padding-right:.28em}.w-chooser-selections .ui-autocomplete-multiple-container .sap-icon{line-height:inherit}.w-chooser-selections .more-selected{display:inline-block}"],
                    providers: [
                        CHOOSER_CONTROL_VALUE_ACCESSOR,
                        { provide: BaseFormComponent, useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return ChooserComponent; }) },
                        { provide: DATA_SOURCE, useClass: ChooserDataSource, deps: [DataProviders, DataFinders] }
                    ]
                },] },
    ];
    /** @nocollapse */
    ChooserComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
        { type: ChooserDataSource, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [DATA_SOURCE,] }] },
        { type: BaseFormComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return BaseFormComponent; }),] }] }
    ]; };
    ChooserComponent.propDecorators = {
        maxLength: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        minLenForSearch: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        valueTransformer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        multiselect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        dataSource: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        selectionAppendTo: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        delay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        destinationClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        field: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        onSelection: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        menuTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: ['menuItem',] }],
        selectionTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: ['selectionItem',] }],
        autoCompleteComponent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['autoCompplete',] }],
        selectionViewElem: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['selectionView',] }]
    };
    return ChooserComponent;
}(BaseFormComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWChooserModule = /** @class */ (function () {
    function AWChooserModule() {
    }
    AWChooserModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        ChooserComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["AutoCompleteModule"],
                        AWHyperlinkModule,
                        AWCoreComponentModule
                    ],
                    entryComponents: [
                        ChooserComponent
                    ],
                    exports: [
                        ChooserComponent,
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"]
                    ],
                    providers: []
                },] },
    ];
    return AWChooserModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * A popup like component rendering list of values as. Based on PrimeNG component and one of the
 * main reason why we need to wrap this is to extend its capabilities to accept almost any
 * data type without using Primens's specific SelectItem type.
 *
 *
 * ### Example
 *
 * ```
 * \@Component({
 *      selector: 'showDropDown' ,
 *      template: '<aw-dropdown [list]="testItemSmall"
 *     (onSelection)="onSelection($event)"></aw-dropdown>'
 *  })
 *  export class MyDropComponent
 *  {
 *      testItemSmall: string[] = ['view' , 'edit'];
 *
 *      // when you switch list binding to refert to large item fiilter automatically is shown and
 *     max 10 items are
 *      // visible
 *      testItemLarge: string[] = ['view' , 'edit' , 'frank' , 'kolar' , 'The Sun' , 'Dog' ,
 *     'Computer' , 'A Desk' ,
 *      'My Car' , 'Pencil' , 'This Page' , 'Yesterday' , 'Monday' , 'Tuesday' , 'BMW R1200 GS' ,
 *     'Czech Republic' ,
 *      'Last Item'];
 *
 *
 *      itemSelected: string = 'view';
 *      itemSelectedLg: string = 'Monday';
 *
 *      noselString: string = '(no selection)';
 *
 *
 *      onSelection (event): void
 *      {
 *          this.itemSelected = event;
 *
 *      }
 *  }
 *
 *  ```
 *
 */
var /** @type {?} */ DD_CONTROL_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return DropdownComponent; }),
    multi: true
};
var DropdownComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(DropdownComponent, _super);
    function DropdownComponent(env, parentContainer) {
        var _this = _super.call(this, env, parentContainer) || this;
        _this.env = env;
        _this.parentContainer = parentContainer;
        /**
         * Event fired when user select a item
         */
        _this.onSelection = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        return _this;
    }
    /**
     * Todo: Put back the scrolling option once we decide so. Currently the requirements are
     * show only 10 items max, no scrolling. Functionality commented out can show scrollbar with
     * search filter.
     */
    /**
     * Todo: Put back the scrolling option once we decide so. Currently the requirements are
     * show only 10 items max, no scrolling. Functionality commented out can show scrollbar with
     * search filter.
     * @return {?}
     */
    DropdownComponent.prototype.ngOnInit = /**
     * Todo: Put back the scrolling option once we decide so. Currently the requirements are
     * show only 10 items max, no scrolling. Functionality commented out can show scrollbar with
     * search filter.
     * @return {?}
     */
    function () {
        if (this.isStandalone) {
            _super.prototype.ngOnInit.call(this);
            _super.prototype.registerFormControl.call(this, this.selection);
        }
        else {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.name)) {
                this.formControl = /** @type {?} */ (this.formGroup.controls[this.name]);
            }
        }
        // transform a value to PrimeNg Format, we are not really be using a label field only a
        // value.
        this.internalList = [];
        // if (isPresent(this.noSelectionString)) {
        //     this.internalList.push({
        //         label: this.noSelectionString,
        //         value: null
        //     });
        //
        //     if (isBlank(this.selection)) {
        //         this.selection = this.noSelectionString;
        //     }
        // }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.list) && this.list.length >= DropdownComponent.MaxNumShown) {
            this.internalList = this.list.slice(0, DropdownComponent.MaxNumShown).map(function (item) {
                return { label: item.toString(), value: item };
            });
        }
        else if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.list)) {
            this.internalList = this.list.slice(0).map(function (item) {
                return { label: item.toString(), value: item };
            });
        }
    };
    /**
     * @return {?}
     */
    DropdownComponent.prototype.hasEmbeddedTemplate = /**
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.itemTemplate);
    };
    /**
     * Check to prevent Empty item to be rendered
     *
     * todo: Report this on PrimeNg
     *
     */
    /**
     * Check to prevent Empty item to be rendered
     *
     * todo: Report this on PrimeNg
     *
     * @param {?} item
     * @return {?}
     */
    DropdownComponent.prototype.itemExist = /**
     * Check to prevent Empty item to be rendered
     *
     * todo: Report this on PrimeNg
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(item);
    };
    /**
     * When dropdown list is more then defined constant MaxNumShown (10) automatically show filter
     * input field
     */
    /**
     * When dropdown list is more then defined constant MaxNumShown (10) automatically show filter
     * input field
     * @return {?}
     */
    DropdownComponent.prototype.showFilter = /**
     * When dropdown list is more then defined constant MaxNumShown (10) automatically show filter
     * input field
     * @return {?}
     */
    function () {
        return false;
        // return isPresent(this.list) && this.list.length > DropdownComponent.MaxNumShown;
    };
    /**
     *
     * Updates internal models of current selections and triggers onSelection event
     *
     */
    /**
     *
     * Updates internal models of current selections and triggers onSelection event
     *
     * @param {?} value
     * @return {?}
     */
    DropdownComponent.prototype.onItemSelection = /**
     *
     * Updates internal models of current selections and triggers onSelection event
     *
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.selection = value.value;
        this.onSelection.emit(value.value);
        if (this.isStandalone) {
            this.formControl.setValue(this.selection);
            this.formControl.markAsDirty({ onlySelf: true });
        }
        this.onModelChanged(value.value);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    DropdownComponent.prototype.displayItem = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(item) ? item.label : 'No Selection';
    };
    /**
     * Internal. Please see ControlValueAccessor
     *
     */
    /**
     * Internal. Please see ControlValueAccessor
     *
     * @param {?} value
     * @return {?}
     */
    DropdownComponent.prototype.writeValue = /**
     * Internal. Please see ControlValueAccessor
     *
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["equals"])(value, this.selection)) {
            this.selection = value;
            this.formControl.setValue(value);
        }
    };
    DropdownComponent.MaxNumShown = 10;
    DropdownComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-dropdown',
                    template: "<div class=\"w-dropdown\" [formGroup]=\"formGroup\">\n\n    <ng-template [ngIf]=\"isStandalone\">\n        <p-dropdown [options]=\"internalList\"\n                    [formControlName]=\"name\"\n                    [placeholder]=\"noSelectionString\"\n                    [autoWidth]=\"false\"\n                    [filter]=\"showFilter()\"\n                    (onChange)=\"onItemSelection($event)\">\n\n            <ng-template let-item pTemplate=\"item\">\n                <ng-template [ngIf]=\"!hasEmbeddedTemplate() && itemExist(item)\">\n                    {{item.label }}\n                </ng-template>\n\n                <ng-template [embeddedItem]=\"itemTemplate\" [item]=\"item\"\n                             *ngIf=\"hasEmbeddedTemplate() && itemExist(item)\">\n\n                </ng-template>\n            </ng-template>\n\n\n        </p-dropdown>\n    </ng-template>\n</div>\n\n\n<!-- no formControl Name here. ngModel cannot have formGroup around -->\n<ng-template [ngIf]=\"!isStandalone\">\n    <div class=\"w-dropdown\">\n        <p-dropdown [options]=\"internalList\"\n                    [(ngModel)]=\"selection\"\n                    [placeholder]=\"noSelectionString\"\n                    [autoWidth]=\"false\"\n                    [filter]=\"showFilter()\"\n                    (onChange)=\"onItemSelection($event)\">\n\n            <ng-template let-item pTemplate=\"item\">\n\n                <ng-template [ngIf]=\"!hasEmbeddedTemplate() && itemExist(item)\">\n                    {{item.label }}\n                </ng-template>\n                <ng-template [embeddedItem]=\"itemTemplate\" [item]=\"item\"\n                             *ngIf=\"hasEmbeddedTemplate() && itemExist(item)\">\n                </ng-template>\n            </ng-template>\n        </p-dropdown>\n    </div>\n</ng-template>\n",
                    styles: ["/deep/ .ui-dropdown-panel .ui-dropdown-items-wrapper{max-height:none!important}/deep/ .ui-dropdown-panel .ui-dropdown-item{padding:.65em 2em .65em .64em;margin:0}/deep/ .ui-dropdown-panel .ui-dropdown-filter-container{width:100%}/deep/ .ui-dropdown-panel .ui-dropdown-filter-container .fa{top:1.2em}/deep/ .ui-dropdown-panel .ui-dropdown-list{padding:1em 0}/deep/ .w-dropdown:not(.ng-dirty) label{color:#969696}/deep/ .w-dropdown .ui-dropdown-trigger.ui-corner-right{border-left:none;color:#969696}/deep/ .w-dropdown .ui-dropdown-trigger .pi{font-family:\"SAP icon fonts\";color:#767676;cursor:pointer;font-size:1.4em;margin-left:-.85em}/deep/ .w-dropdown .ui-dropdown-trigger .pi-caret-down:before{content:'\\e1ef'}/deep/ .w-dropdown .ui-dropdown-label{padding-right:2.4em}"],
                    providers: [
                        DD_CONTROL_VALUE_ACCESSOR,
                        { provide: BaseFormComponent, useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return DropdownComponent; }) }
                    ]
                },] },
    ];
    /** @nocollapse */
    DropdownComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: BaseFormComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return BaseFormComponent; }),] }] }
    ]; };
    DropdownComponent.propDecorators = {
        list: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        selection: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        noSelectionString: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        onSelection: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        itemTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: ['itemTemplate',] }]
    };
    return DropdownComponent;
}(BaseFormComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWDropdownModule = /** @class */ (function () {
    function AWDropdownModule() {
    }
    AWDropdownModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        DropdownComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DropdownModule"],
                        AWCoreComponentModule
                    ],
                    entryComponents: [
                        DropdownComponent
                    ],
                    exports: [
                        DropdownComponent,
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"]
                    ],
                    providers: []
                },] },
    ];
    return AWDropdownModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Lightweight and configurable Currency component based on the ng bootstrap directive. This
 * component combines an input and currency code dropdown.
 *
 *
 * for more info please see class Doc of the:
 * @see {\@link currency/currency.component.ts}
 *
 *  ### Example
 *  ```
 *
 * \@Component({
 *    selector: 'amount' ,
 *    template: `
 *
 *      <aw-currency [money]="price" [currencies]="currencies" [name]="'currency'">
 *      </aw-currency>
 *
 *    `
 *    })
 *    export class MyComponent
 *    {
 *        amount: number = 1000;
 *        currencies: string[] = ['USD', 'CNY', 'AUD', 'EUR', 'GBP'];
 *        currencyCode: string = this.currencies[0];
 *
 *        constructor ()
 *        {
 *        }
 *    }
 */
var /** @type {?} */ CURRENCY_CONTROL_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return CurrencyComponent; }),
    multi: true
};
var CurrencyComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(CurrencyComponent, _super);
    function CurrencyComponent(env, parentContainer) {
        var _this = _super.call(this, env, parentContainer) || this;
        _this.env = env;
        _this.parentContainer = parentContainer;
        /**
         * Disable user to change Money's currency code and still
         * allow user to edit Money's amount.
         */
        _this.readonlyCurrencyCode = false;
        // Initialize currencies.
        // Initialize currencies.
        _this.initCurrencies();
        _this.currencyPipe = new _angular_common__WEBPACK_IMPORTED_MODULE_5__["CurrencyPipe"](env.locale);
        env.onLocaleChange.subscribe(function (locale) {
            _this.currencyPipe = new _angular_common__WEBPACK_IMPORTED_MODULE_5__["CurrencyPipe"](locale);
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(_this.money)) {
                _this.displayValue = _this.formatCurrency(_this.money.amount);
            }
        });
        return _this;
    }
    /**
     * @return {?}
     */
    CurrencyComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        _super.prototype.registerFormControl.call(this, this.money);
        this.initCurrencies();
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.currencySelection)) {
            this.currencySelection = this._currencies[0];
        }
        // ready the money field if it exists. and override the existing values.
        if (this.money) {
            this.currencySelection = this.money.currency;
        }
        else {
            this.money = new Money(null, this.currencySelection);
        }
        this.displayValue = this.formatCurrency(this.money.amount);
    };
    /**
     * @return {?}
     */
    CurrencyComponent.prototype.initCurrencies = /**
     * @return {?}
     */
    function () {
        if (!this._currencies || this._currencies.length === 0) {
            this._currencies = ['USD', 'CNY', 'AUD', 'EUR', 'GBP'];
        }
    };
    /**
     * Display the real value when the user clicks in the currency widget. Then he can modify the
     * value without seeing the formatting.
     *
     * @param el
     */
    /**
     * Display the real value when the user clicks in the currency widget. Then he can modify the
     * value without seeing the formatting.
     *
     * @param {?} el
     * @return {?}
     */
    CurrencyComponent.prototype.onFocus = /**
     * Display the real value when the user clicks in the currency widget. Then he can modify the
     * value without seeing the formatting.
     *
     * @param {?} el
     * @return {?}
     */
    function (el) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.money) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.money.amount)) {
            this.displayValue = this.money.amount.toString();
        }
    };
    /**
     * display the formatted currency value when the user navigates away.
     * @param el
     */
    /**
     * display the formatted currency value when the user navigates away.
     * @param {?} el
     * @return {?}
     */
    CurrencyComponent.prototype.onBlur = /**
     * display the formatted currency value when the user navigates away.
     * @param {?} el
     * @return {?}
     */
    function (el) {
        this.money = this.money.clone({ amount: Number(el.value) });
        this.displayValue = this.formatCurrency(this.money.amount);
        this.onModelChanged(this.money);
    };
    /**
     * @param {?} currency
     * @return {?}
     */
    CurrencyComponent.prototype.onSelection = /**
     * @param {?} currency
     * @return {?}
     */
    function (currency) {
        this.currencySelection = currency;
        this.displayValue = this.formatCurrency(this.money.amount);
    };
    /**
     * Function will check to see if currency is a valid number before formatting.
     * @param {?} val
     * @return {?}
     */
    CurrencyComponent.prototype.formatCurrency = /**
     * Function will check to see if currency is a valid number before formatting.
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (!val || val.length === 0) {
            return val;
        }
        if (isNaN(val)) {
            return val;
        }
        var /** @type {?} */ code = 'USD';
        if (this.currencySelection) {
            code = this.currencySelection;
        }
        this.money = this.money.clone({ currency: this.currencySelection });
        // By default, the precision is 2. For example, 10.23 USD.
        var /** @type {?} */ digits = '1.0-2';
        // If precision is present, use it for format the money value for display.
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.precision)) {
            digits = '1.0-' + this.precision;
        }
        return this.currencyPipe.transform(val, code, 'symbol', digits);
    };
    /**
     * @return {?}
     */
    CurrencyComponent.prototype.getMoneyCurrency = /**
     * @return {?}
     */
    function () {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.displayValue) && this.displayValue.length > 0) {
            return this.currencySelection;
        }
        return '';
    };
    Object.defineProperty(CurrencyComponent.prototype, "currencies", {
        get: /**
         * @return {?}
         */
        function () {
            return this._currencies;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(value)) {
                this._currencies = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Internal. Please see ControlValueAccessor
     *
     */
    /**
     * Internal. Please see ControlValueAccessor
     *
     * @param {?} value
     * @return {?}
     */
    CurrencyComponent.prototype.writeValue = /**
     * Internal. Please see ControlValueAccessor
     *
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if ((value instanceof Money) && !Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["equals"])(value, this.money)) {
            this.money = value;
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.money.currency)) {
                this.currencySelection = this.money.currency;
            }
            this.displayValue = this.formatCurrency(this.money.amount);
            this.formControl.setValue(this.money);
        }
    };
    CurrencyComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-currency',
                    template: "<ng-template [ngIf]=\"editable\">\n    <div class=\"w-currency-field ui-fluid\" [formGroup]=\"formGroup\">\n        <div class=\"ui-g \">\n            <div class=\"ui-g-8 ui-g-nopad \">\n                <input #currencyInput\n                       pInputText\n                       type=\"text\" class=\"w-text-field currency-format\"\n                       [attr.name]=\"name\"\n                       [attr.placeholder]=\"placeHolder\"\n                       [value]=\"displayValue\"\n                       (focus)=\"onFocus(currencyInput)\"\n                       (blur)=\"onBlur(currencyInput)\"\n                       [disabled]=\"disabled\">\n            </div>\n            <div class=\"ui-g-4 ui-g-nopad w-cc-field\">\n                <aw-dropdown *ngIf=\"!readonlyCurrencyCode\"\n                             [isStandalone]=\"false\" [list]=\"currencies\"\n                             [selection]=\"money.currency\"\n                             (onSelection)=\"onSelection($event)\"\n                             [disabled]=\"disabled\">\n\n                </aw-dropdown>\n                <div *ngIf=\"readonlyCurrencyCode\" class=\"w-cc-readonly-field\">{{money.currency}}</div>\n            </div>\n        </div>\n    </div>\n</ng-template>\n\n<!-- currency:'USD':true -->\n\n<ng-template [ngIf]=\"!editable\">\n    <aw-string value=\"{{displayValue}} {{ getMoneyCurrency() }}\"></aw-string>\n</ng-template>\n",
                    styles: [".w-currency-field [readonly],.w-currency-type-field [readonly]{background-color:#fff}.w-currency-field input,.w-currency-type-field input{min-width:80px}.w-currency-field i.fa,.w-currency-type-field i.fa{cursor:pointer}.w-currency-field{margin-top:0}.w-currency-field /deep/ .ui-dropdown{min-width:80px}.w-cc-field{display:flex;align-items:center}.w-cc-readonly-field{padding-left:5px;color:#969696}.no-gutter>[class*=ui-g-]{padding-right:0;padding-left:0}"],
                    providers: [
                        CURRENCY_CONTROL_VALUE_ACCESSOR,
                        { provide: BaseFormComponent, useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return CurrencyComponent; }) }
                    ]
                },] },
    ];
    /** @nocollapse */
    CurrencyComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: BaseFormComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return FormRowComponent; }),] }] }
    ]; };
    CurrencyComponent.propDecorators = {
        money: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        readonlyCurrencyCode: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        currencySelection: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        precision: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        currencies: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return CurrencyComponent;
}(BaseFormComponent));
/**
 * Money object is represented as a value, locale, and currencyCode
 */
var  /**
 * Money object is represented as a value, locale, and currencyCode
 */
Money = /** @class */ (function () {
    function Money(amount, currency, locale) {
        if (amount === void 0) { amount = 0; }
        if (currency === void 0) { currency = 'USD'; }
        if (locale === void 0) { locale = 'en_US'; }
        this.amount = amount;
        this.currency = currency;
        this.locale = locale;
    }
    /**
     * @return {?}
     */
    Money.prototype.getTypes = /**
     * @return {?}
     */
    function () {
        return {
            amount: Number,
            currency: String,
            locale: String
        };
    };
    /**
     * @return {?}
     */
    Money.prototype.className = /**
     * @return {?}
     */
    function () {
        return 'Money';
    };
    /**
     * @return {?}
     */
    Money.prototype.$proto = /**
     * @return {?}
     */
    function () {
        return new Money(1, '23', '33');
    };
    /**
     * @return {?}
     */
    Money.prototype.toString = /**
     * @return {?}
     */
    function () {
        return this.amount + ', locale: ' + this.locale + ', code:  ' + this.currency;
    };
    /**
     * @param {?=} data
     * @return {?}
     */
    Money.prototype.clone = /**
     * @param {?=} data
     * @return {?}
     */
    function (data) {
        if (data === void 0) { data = {}; }
        return new Money(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(data.amount) ? data.amount : this.amount, Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(data.currency) ? data.currency : this.currency, Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(data.locale) ? data.locale : this.locale);
    };
    return Money;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWCurrencyModule = /** @class */ (function () {
    function AWCurrencyModule() {
    }
    AWCurrencyModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        CurrencyComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["InputTextModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DropdownModule"],
                        AWDropdownModule,
                        AWStringFieldModule,
                        AWCoreComponentModule
                    ],
                    entryComponents: [
                        CurrencyComponent
                    ],
                    exports: [
                        CurrencyComponent,
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"]
                    ],
                    providers: [_angular_common__WEBPACK_IMPORTED_MODULE_5__["CurrencyPipe"]]
                },] },
    ];
    return AWCurrencyModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Lightweight and configurable Date and Time component based on the primeng. This
 * component combines both date picker as well as time picker
 *
 *
 *  ### Example
 *  ```
 *
 * \@Component({
 *    selector: 'myTimer' ,
 *    template: `
 *    <aw-date-time [value]="date" [editable]="editable"  [name]="'dueDate'">
 *    </aw-date-time>
 *
 *    `
 *    })
 *    export class MyTimmerComponet
 *    {
 *
 *        date: Date = new Date();
 *
 *
 *        constructor ()
 *        {
 *            this.date.setFullYear(2016 , 10 , 3);
 *            this.date.setHours(10 , 10 , 10);
 *        }
 *    }
 *
 * ```
 *
 * By default you will see date field and time field is hidden to show both you just do following:
 *
 *  ```
 *
 * \@Component({
 *    selector: 'myTimer' ,
 *    template: `
 *
 *    <aw-date-time [value]="date"  [showTime]="showTime" [editable]="editable"  [name]="'bbdd'">
 *    </aw-date-time>
 *
 *    `
 *    })
 *    export class MyTimmerComponet
 *    {
 *        date: Date = new Date();
 *        showTime = true;
 *
 *        constructor ()
 *        {
 *            this.date.setFullYear(2016 , 10 , 3);
 *            this.date.setHours(10 , 10 , 10);
 *        }
 *    }
 *
 * ```
 *
 *
 *
 */
var /** @type {?} */ DATETIME_CONTROL_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return DateAndTimeComponent; }),
    multi: true
};
var DateAndTimeComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(DateAndTimeComponent, _super);
    function DateAndTimeComponent(env, parentContainer) {
        var _this = _super.call(this, env, parentContainer) || this;
        _this.env = env;
        _this.parentContainer = parentContainer;
        /**
         * Default date format pattern used if none is passed
         *
         */
        _this.formatPattern = 'mm/dd/yy';
        /**
         * Special workaround as formatters in the primeNG and angular are different so until its
         * fixed we need to keep this extra pattern.
         */
        _this.formatPatternNG = 'MM/dd/yy';
        /**
         * Shows and hides navigation bar with year and months selections
         */
        _this.showNavigation = false;
        /**
         * Shows and hides navigation bar with year and months selections
         */
        _this.showIcon = true;
        /**
         * Whether to show timepicker
         */
        _this.showTime = false;
        /**
         * Whether to show DatePicker. Even we can hide it. it should be for most of the case always
         * true
         */
        _this.showDate = true;
        /**
         *
         * Tells the date picker what format it should use when presenting time. When hourFormat is 12,
         * it shows the AM, PM
         *
         */
        _this.hourFormat = '24';
        /**
         * Triggers event when specific date is clicked inside DatePicker
         *
         */
        _this.onChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Set the date to highlight on first opening if the field is blank.
         *
         */
        _this.defaultDate = new Date();
        _this.timePlaceHolder = 'hh:ss';
        return _this;
    }
    /**
     * @return {?}
     */
    DateAndTimeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        _super.prototype.registerFormControl.call(this, this.value);
        // default to dateTime pattern which is defined in resource files
        if (this.hourFormat !== '12' && this.hourFormat !== '24') {
            this.hourFormat = '24';
        }
        this.timePlaceHolder = (this.hourFormat === '12') ?
            " " + DateAndTimeComponent.NgTime12 : " " + DateAndTimeComponent.NgTime24;
        this.formControl.valueChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["distinctUntilChanged"])()).subscribe(function (val) {
            _this.value = val;
            _this.onModelChanged(_this.value);
        });
        this.initTranslations();
        this.env.onLocaleChange.subscribe(function (locale) {
            _this.initTranslations();
        });
    };
    /**
     * Need to refactor this as this really get complicated trying to cover usecase with time
     * and date and every format we have. We should probably have separate patterns for
     * dates only and date + time
     * @return {?}
     */
    DateAndTimeComponent.prototype.initTranslations = /**
     * Need to refactor this as this really get complicated trying to cover usecase with time
     * and date and every format we have. We should probably have separate patterns for
     * dates only and date + time
     * @return {?}
     */
    function () {
        this.formatNameWithTime = this.formatPattern;
        if (!this.showDate) {
            this.formatPatternNG = this.formatPattern += (this.hourFormat === '12') ?
                " " + DateAndTimeComponent.NgTime12 : " " + DateAndTimeComponent.NgTime24;
        }
        if (this.showTime) {
            var /** @type {?} */ timeStarts = this.formatPattern.indexOf('h');
            if (timeStarts !== -1) {
                this.formatNameWithTime = this.formatPattern.substring(0, timeStarts);
            }
            this.formatPatternNG += (this.hourFormat === '12') ?
                " " + DateAndTimeComponent.NgTime12 : " " + DateAndTimeComponent.NgTime24;
        }
        this.i18n = {
            firstDayOfWeek: 0,
            dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday',
                'Saturday'],
            dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            dayNamesMin: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
            monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',
                'September', 'October', 'November', 'December'],
            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct',
                'Nov', 'Dec']
        };
    };
    /**
     * Fired when dates changes. Here we update  this.value - > date and also update value inside
     * formController
     *
     */
    /**
     * Fired when dates changes. Here we update  this.value - > date and also update value inside
     * formController
     *
     * @param {?} event
     * @return {?}
     */
    DateAndTimeComponent.prototype.onDateChange = /**
     * Fired when dates changes. Here we update  this.value - > date and also update value inside
     * formController
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(event)) {
            // throw some error ?
            return;
        }
        this.value = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isDate"])(event) ? event : new Date(event);
        this.formControl.setValue(this.value, { onlySelf: false, emitEvent: true });
        this.onModelChanged(this.value);
        this.onChange.emit(this.value);
    };
    /**
     * Internal. Please see ControlValueAccessor
     *
     */
    /**
     * Internal. Please see ControlValueAccessor
     *
     * @param {?} value
     * @return {?}
     */
    DateAndTimeComponent.prototype.writeValue = /**
     * Internal. Please see ControlValueAccessor
     *
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== this.value) {
            this.value = value;
            this.formControl.setValue(value);
        }
    };
    DateAndTimeComponent.NgTime12 = 'hh:mm a';
    DateAndTimeComponent.NgTime24 = 'HH.mm a';
    DateAndTimeComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-date-time',
                    template: "<ng-template [ngIf]=\"editable\">\n\n    <div class=\"w-datetime \" [class.has-time]=\"showTime\" [formGroup]=\"formGroup\">\n\n        <p-calendar formControlName=\"{{name}}\"\n                    [defaultDate]=\"defaultDate\"\n                    [showIcon]=\"showIcon\"\n                    dateFormat=\"{{showTime ? formatNameWithTime : formatPattern}}\"\n                    [yearNavigator]=\"showNavigation\"\n                    [monthNavigator]=\"showNavigation\"\n                    [yearRange]=\"yearRange\"\n                    placeholder=\"{{showTime ? formatNameWithTime.toUpperCase() : formatPattern.toUpperCase()}}\"\n                    (onSelect)=\"onDateChange($event)\"\n                    [timeOnly]=\"!showDate\"\n                    [readonlyInput]=\"true\"\n                    [locale]=\"i18n\">\n        </p-calendar>\n\n        <p-calendar *ngIf=\"showTime\"\n                    icon=\"icon-history\"\n                    formControlName=\"{{name}}\"\n                    [hourFormat]=\"hourFormat\"\n                    [defaultDate]=\"defaultDate\"\n                    [showIcon]=\"showIcon\"\n                    [timeOnly]=\"showTime\"\n                    [showTime]=\"showTime\"\n                    [placeholder]=\"timePlaceHolder\"\n                    (onSelect)=\"onDateChange($event)\"\n                    [locale]=\"i18n\">\n        </p-calendar>\n\n    </div>\n</ng-template>\n\n<ng-template [ngIf]=\"!editable\">\n    <aw-string value=\"{{value | date: formatPatternNG}}\"></aw-string>\n</ng-template>\n",
                    styles: ["/deep/ .w-datetime .ui-calendar button{border:0;width:0}/deep/ .w-datetime .ui-calendar.ui-calendar-w-btn .ui-inputtext{width:100%}/deep/ .ui-calendar .ui-calendar-button .ui-button-icon-left{font-family:\"SAP icon fonts\";color:#199de0;cursor:pointer;font-size:1.4em}/deep/ .ui-calendar .ui-calendar-button .ui-button-icon-left.pi-calendar:before{content:'\\e0e0'}/deep/ .ui-calendar .ui-calendar-button .ui-button-icon-left.icon-history:before{content:'\\e02d'}/deep/ .ui-datepicker{width:24.28em;line-height:25px;padding:0;border-color:#979797;box-shadow:none}/deep/ .ui-datepicker .ui-datepicker-header{padding:.92em 0;font-weight:400;color:#000;font-size:1em}/deep/ .ui-datepicker .ui-datepicker-next,/deep/ .ui-datepicker .ui-datepicker-prev{top:1em}/deep/ .ui-datepicker .ui-datepicker-prev{left:.2em}/deep/ .ui-datepicker .ui-datepicker-next{right:.2em}/deep/ .ui-datepicker table{font-size:1em;margin:0 0 1.5em}/deep/ .ui-datepicker th{font-weight:400;background-color:#ececec;color:#363636;padding:.786em 1.07em}/deep/ .ui-datepicker td{padding:.1em}/deep/ .ui-datepicker td a{text-align:center;width:2.7em;height:2.7em;line-height:2.7em;padding:0;border-radius:50%}/deep/ .ui-datepicker td a.ui-state-default{border-color:transparent}/deep/ .ui-datepicker td a.ui-state-active{background-color:#199de0;color:#fff}/deep/ .ui-datepicker .pi{font-size:1em}/deep/ .ui-datepicker .pi.pi-chevron-left:before{content:'\\e1ee'}/deep/ .ui-datepicker .pi.pi-chevron-right:before{content:'\\e1ed'}/deep/ .ui-datepicker .ui-datepicker-calendar td:not(.ui-state-disabled) a:hover{border-color:transparent;background-color:rgba(25,157,224,.7);opacity:.75;color:#363636}/deep/ .ui-datepicker-timeonly{width:100%}/deep/ .ui-timepicker{font-size:1.14em;color:#767676;font-weight:400}/deep/ .ui-timepicker .pi{font-size:1em}/deep/ .ui-timepicker .pi.pi-chevron-up:before{content:'\\e1f0'}/deep/ .ui-timepicker .pi.pi-chevron-down:before{content:'\\e1ef'}/deep/ .ui-timepicker>div{margin-left:0}/deep/ .ui-timepicker .ui-separator{width:.1em;min-width:.1em}/deep/ .ui-timepicker .ui-separator .pi{font-size:0}/deep/ .ui-datepicker-trigger{background-color:transparent}/deep/ .ui-datepicker-trigger.ui-button:enabled:hover,/deep/ .ui-datepicker-trigger.ui-button:focus{background-color:transparent}/deep/ .has-time{display:flex;flex-wrap:nowrap}/deep/ .has-time p-calendar:first-child{width:55%;margin-right:14px}/deep/ .has-time p-calendar:last-child{width:45%}/deep/ .has-time p-calendar:last-child .ui-datepicker{padding:0}/deep/ .has-time .ui-button-icon-left{line-height:18px}"],
                    providers: [
                        DATETIME_CONTROL_VALUE_ACCESSOR,
                        { provide: BaseFormComponent, useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return DateAndTimeComponent; }) }
                    ]
                },] },
    ];
    /** @nocollapse */
    DateAndTimeComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: BaseFormComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return FormRowComponent; }),] }] }
    ]; };
    DateAndTimeComponent.propDecorators = {
        value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        formatPattern: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        formatPatternNG: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        showNavigation: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        yearRange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        showIcon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        showTime: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        showDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        hourFormat: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        onChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
    };
    return DateAndTimeComponent;
}(BaseFormComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWDateAndTimeModule = /** @class */ (function () {
    function AWDateAndTimeModule() {
    }
    AWDateAndTimeModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        DateAndTimeComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["CalendarModule"],
                        AWStringFieldModule
                    ],
                    entryComponents: [
                        DateAndTimeComponent
                    ],
                    exports: [
                        DateAndTimeComponent,
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"]
                    ]
                },] },
    ];
    return AWDateAndTimeModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * An dialog header area.
 *
 * See {\@link DialogComponent} for more explanation.
 */
var DialogHeaderComponent = /** @class */ (function () {
    function DialogHeaderComponent() {
    }
    DialogHeaderComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-dialog-header',
                    template: '<ng-content></ng-content>'
                },] },
    ];
    return DialogHeaderComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * An dialog header area.
 *
 * See {\@link DialogComponent} for more explanation.
 */
var DialogFooterComponent = /** @class */ (function () {
    function DialogFooterComponent() {
    }
    DialogFooterComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-dialog-footer',
                    template: '<ng-content></ng-content>'
                },] },
    ];
    return DialogFooterComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Dialog Component that provides the look and feel for a modal dialog. This component has three
 * sections: header, body, and footer. It can be used by itself or extended.
 *
 * There are three types of popup.
 *   1.  a regular dialog box that has header, body and footer. It's the most customizable.
 *   2.  a confirmation box is similar to a dialog box but has accept and reject action buttons.
 *   3.  a overlay, which is a very basic popup with what you put inside.
 *       It doesn't have header and footer.
 *
 * There are two ways to use any popup component.
 *   1.  Either directly by using component, aw-dialog, aw-confirmation or aw-overlay
 *   2.  or the ModalService  service.open(<DialogComponent>), service.close()
 *
 * Usage:
 *    1.  Using Dialog directly to display a modal popup. This usage is a quick way to show a
 * message to the user.
 *
 *             this.modalService.open<DialogComponent>( DialogComponent, {
 *                     title: 'My Popup Title',
 *                     body: 'My Popup Body'
 *              });
 *
 *
 *   2.   Use the component inside your template.
 *
 * \@Component({
 *                selector: 'aw-page' ,
 *                           template: `
 *                              <aw-dialog [(visible)]="display" [modal]="true"
 *                                        (onOpen)="openAction()" (onClose)="closeAction()">
 *
 *                                    <aw-dialog-header>Dialog Header</aw-dialog-header>
 *
 *                                     Dialog Body: Creating a dialog using the dialog component
 *
 *                                    <aw-dialog-footer>
 *                                      <aw-button [size]="'small'" [style]="'primary'"
 *                                                 (click)="close()">OK</aw-button>
 *                                    </aw-dialog-footer>
 *                              </aw-dialog>
 *
 *                          <aw-button [size]="'small'" (click)="open()">Open Dialog</aw-button>
 *                  `
 *         export class MyPageComponent implements OnInit {
 *
 *                     display: boolean = false;
 *
 *                     dialogAction: string;
 *
 *                     constructor(private modalService: ModalService) {
 *                          super();
 *                       }
 *                     ngOnInit() { }
 *
 *                     open() {
 *                        this.display = true;
 *                     }
 *
 *                     openAction()  {
 *                        this.dialogAction = "open";
 *                      }
 *       }
 *
 *
 */
var DialogComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(DialogComponent, _super);
    function DialogComponent(env) {
        var _this = _super.call(this, env) || this;
        _this.env = env;
        /**
         * support two way data binding on visible property.
         */
        _this.visibleChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * whether this dialog blocks the rest of the page or not when displayed.
         */
        _this.modal = true;
        /**
         * Whether there's an x at the top right that makes the dialog closable.
         */
        _this.closable = true;
        /**
         * Event fired when dialog is closed.
         */
        _this.onClose = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Event fired when the dialog is opened.
         */
        _this.onOpen = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.width = 300;
        _this.height = 'auto';
        return _this;
    }
    /**
     * Open this dialog.
     */
    /**
     * Open this dialog.
     * @return {?}
     */
    DialogComponent.prototype.open = /**
     * Open this dialog.
     * @return {?}
     */
    function () {
        this.visible = true;
        this.onOpen.emit();
        // visible is a 2-way binding variable.
        this.visibleChange.emit(true);
    };
    /**
     * close the dialog
     */
    /**
     * close the dialog
     * @return {?}
     */
    DialogComponent.prototype.close = /**
     * close the dialog
     * @return {?}
     */
    function () {
        this.visible = false;
        this.onClose.emit();
        // Important to make sure change is set on parent binding.
        // Otherwise, the variable and dialog open/close state can be out
        // of sync and we wouldn't trigger change detection.
        this.visibleChange.emit(false);
    };
    /**
     * Does this dialog have header.
     *
     */
    /**
     * Does this dialog have header.
     *
     * @return {?}
     */
    DialogComponent.prototype.hasHeader = /**
     * Does this dialog have header.
     *
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.header);
    };
    /**
     * Does this dialog have footer.
     *
     */
    /**
     * Does this dialog have footer.
     *
     * @return {?}
     */
    DialogComponent.prototype.hasFooter = /**
     * Does this dialog have footer.
     *
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.footer);
    };
    DialogComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-dialog',
                    template: "<p-dialog [header]=\"title\" [(visible)]=\"visible\"\n          [modal]=\"modal\" [closable]=\"closable\" [width]=\"width\" [height]=\"height\"\n          [styleClass]=\"styleClass\" [appendTo]=\"appendTo\" (onShow)=\"open()\" (onHide)=\"close()\">\n\n    <p-header *ngIf=\"hasHeader()\">\n        <ng-content select=\"aw-dialog-header\"></ng-content>\n    </p-header>\n\n    {{body}}\n    <ng-content></ng-content>\n\n    <p-footer *ngIf=\"hasFooter()\">\n        <div class=\"dialog-footer-separator\"></div>\n        <ng-content select=\"aw-dialog-footer\"></ng-content>\n    </p-footer>\n</p-dialog>\n",
                    styles: ["::ng-deep .ui-dialog .ui-dialog-titlebar{background-color:#f2f2f2;padding:15px 20px}::ng-deep .ui-dialog .ui-dialog-titlebar .ui-dialog-titlebar-icon:hover{border-color:transparent}::ng-deep .ui-widget-header{font-weight:400;font-size:16px}::ng-deep .ui-dialog .ui-dialog-content{padding:15px 20px;line-height:1.3em}::ng-deep .ui-dialog .ui-widget-content{border:none}::ng-deep .ui-dialog.ui-widget-content{border:none;box-shadow:0 2px 10px 0 rgba(0,0,0,.3)}::ng-deep .ui-dialog .dialog-footer-separator{border-top:1px solid #d7d7d7;height:14px}::ng-deep .ui-dialog .ui-dialog-footer{padding:0 20px 15px}"]
                },] },
    ];
    /** @nocollapse */
    DialogComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] }
    ]; };
    DialogComponent.propDecorators = {
        title: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        body: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        visibleChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        modal: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        closable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        appendTo: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        onClose: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        onOpen: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        header: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [DialogHeaderComponent,] }],
        footer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [DialogFooterComponent,] }]
    };
    return DialogComponent;
}(ModalContainer));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWDialogModule = /** @class */ (function () {
    function AWDialogModule() {
    }
    AWDialogModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        DialogComponent,
                        DialogHeaderComponent,
                        DialogFooterComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        AWCoreComponentModule,
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DialogModule"]
                    ],
                    entryComponents: [
                        ModalComponent,
                        DialogComponent,
                        DialogHeaderComponent,
                        DialogFooterComponent
                    ],
                    exports: [
                        DialogComponent,
                        DialogHeaderComponent,
                        DialogFooterComponent,
                        AWCoreComponentModule
                    ],
                    providers: []
                },] },
    ];
    return AWDialogModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Convenient wrapper class around controls such as radiobuttons, dropdown, checkboxes,
 * Chooser. The type of the chooser may be determined dynamically based on the number of items in
 * the data source list, or can be specified explicitly via the "type" binding.
 *
 *
 *
 */
var GenericChooserComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(GenericChooserComponent, _super);
    function GenericChooserComponent(env, _viewContainer, dataSource, parentContainer) {
        var _this = _super.call(this, env, parentContainer) || this;
        _this.env = env;
        _this._viewContainer = _viewContainer;
        _this.dataSource = dataSource;
        _this.parentContainer = parentContainer;
        /**
         *  Is this a List property, or a to-one.
         */
        _this.multiselect = false;
        return _this;
    }
    /**
     * @return {?}
     */
    GenericChooserComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.object)) {
            this.object = (/** @type {?} */ (this._viewContainer.injector)).view.context;
        }
        this.keyPath = new _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["FieldPath"](this.key);
        var /** @type {?} */ defaultDataProvider = null;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.list)) {
            defaultDataProvider = this.dataSource.dataProviders.find(this.list);
        }
        else {
            defaultDataProvider = this.dataSource.dataProviders.find(this.destinationClass);
        }
        var /** @type {?} */ projectedSize = defaultDataProvider.expectedCount(this.choiceProviderParams);
        this.initType(projectedSize);
        if (this.type === 'Chooser') {
            this.dataSource.init({
                dataProvider: defaultDataProvider,
                queryType: QueryType.FullText,
                lookupKey: this.displayKey,
                state: new ChooserState(new GCChooserState(this), this.multiselect),
                multiselect: this.multiselect
            });
        }
        else {
            // do we need to read this value in async?
            this.list = defaultDataProvider.data();
        }
        _super.prototype.registerFormControl.call(this, this.selection);
        this.validateRequired();
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.selection)) {
            // this.noSelectionString = this.i18n.instant('Widgets.gchooser.noSelString');
            this.noSelectionString = 'Select a Item';
        }
    };
    /**
     *
     * When \@Input type is not passed we try to guess and select the best type for current data
     *
     * @param {?} projectedSize
     * @return {?}
     */
    GenericChooserComponent.prototype.initType = /**
     *
     * When \@Input type is not passed we try to guess and select the best type for current data
     *
     * @param {?} projectedSize
     * @return {?}
     */
    function (projectedSize) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.type)) {
            if (this.multiselect) {
                this.type = (projectedSize <= 0 || projectedSize > 8) ? 'Chooser' : 'Checkbox';
            }
            else {
                this.type = (projectedSize <= 0 || projectedSize > 20) ? 'Chooser'
                    : (projectedSize < 6) ? 'Radio' :
                        'Dropdown';
            }
        }
    };
    /**
     * There are certain properties which are required by this component. As already mentioned
     * above GenericChooser works with references and thefore two key properties are object and key
     * so we can access an object
     *
     *
     * @return {?}
     */
    GenericChooserComponent.prototype.validateRequired = /**
     * There are certain properties which are required by this component. As already mentioned
     * above GenericChooser works with references and thefore two key properties are object and key
     * so we can access an object
     *
     *
     * @return {?}
     */
    function () {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.object)) {
            throw Error('Cannot continue without a object');
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.key)) {
            throw Error('Cannot continue without a key binding');
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.list) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.destinationClass)) {
            throw Error('Cannot continue without having either list of values or destinationClass');
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.type) &&
            (this.type !== 'Radio' && this.type !== 'Checkbox' && this.type !== 'Dropdown' &&
                this.type !== 'Chooser')) {
            throw Error('Cannot instantiate GenericChooser  - invalid type');
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.displayKey)) {
            this.displayKey = 'toString';
        }
    };
    /**
     *
     * Used when displaying value both from primitive type as well complex object. If you want to
     * control how item is displayed you can provide display key, which is can be a  method or
     * property of the object you are displaying.
     *
     * Todo: think about formatters as well
     *
     */
    /**
     *
     * Used when displaying value both from primitive type as well complex object. If you want to
     * control how item is displayed you can provide display key, which is can be a  method or
     * property of the object you are displaying.
     *
     * Todo: think about formatters as well
     *
     * @param {?} item
     * @return {?}
     */
    GenericChooserComponent.prototype.displayValue = /**
     *
     * Used when displaying value both from primitive type as well complex object. If you want to
     * control how item is displayed you can provide display key, which is can be a  method or
     * property of the object you are displaying.
     *
     * Todo: think about formatters as well
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.displayKey)) {
            return item;
        }
        var /** @type {?} */ fieldValue = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["FieldPath"].getFieldValue(item, this.displayKey);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(fieldValue)) {
            return fieldValue.call(item);
        }
        return fieldValue;
    };
    Object.defineProperty(GenericChooserComponent.prototype, "selection", {
        /**
         *  Retrieve a current value from the parent/target object
         *
         */
        get: /**
         *  Retrieve a current value from the parent/target object
         *
         * @return {?}
         */
        function () {
            return this.keyPath.getFieldValue(this.object);
        },
        /**
         *  set value back to the object
         *
         */
        set: /**
         *  set value back to the object
         *
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.keyPath.setFieldValue(this.object, value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    GenericChooserComponent.prototype.onSelection = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.selection = value;
        this.formControl.setValue(this.selection);
        this.formControl.markAsDirty();
    };
    GenericChooserComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-generic-chooser',
                    template: "<ng-container [ngSwitch]=\"type\">\n\n    <ng-template [ngSwitchCase]=\"'Checkbox'\">\n        <aw-checkbox-list [list]=\"list\"\n                          [editable]=\"editable\"\n                          [selections]=\"selection\"\n                          [name]=\"name\"\n                          [disabled]=\"disabled\"\n                          [labelFormatter]=\"displayValue\"\n                          (onSelection)=\"onSelection($event)\">\n        </aw-checkbox-list>\n    </ng-template>\n\n\n    <ng-template [ngSwitchCase]=\"'Radio'\">\n        <aw-radiobutton-list [list]=\"list\"\n                             [selection]=\"selection\"\n                             [editable]=\"editable\"\n                             [name]=\"name\"\n                             [disabled]=\"disabled\"\n                             [labelFormatter]=\"displayValue\"\n                             (onSelection)=\"onSelection($event)\">\n        </aw-radiobutton-list>\n    </ng-template>\n\n    <ng-template [ngSwitchCase]=\"'Dropdown'\">\n        <aw-dropdown [list]=\"list\"\n                     [isStandalone]=\"false\"\n                     [editable]=\"editable\"\n                     [noSelectionString]=\"noSelectionString\"\n                     [selection]=\"selection\"\n                     [disabled]=\"disabled\"\n                     [name]=\"name\"\n                     (onSelection)=\"onSelection($event)\">\n            <ng-template #itemTemplate let-item>\n\n                <!-- todo: allow to pass a PIPE to do some additional formatting -->\n                {{ displayValue(item.value) }}\n            </ng-template>\n        </aw-dropdown>\n    </ng-template>\n\n\n    <ng-template [ngSwitchCase]=\"'Chooser'\">\n        <aw-chooser #chooser\n                    [editable]=\"editable\"\n                    [isStandalone]=\"false\"\n                    [name]=\"name\"\n                    [multiselect]=\"multiselect\"\n                    [dataSource]=\"dataSource\"\n                    [valueTransformer]=\"displayValue\"\n                    [disabled]=\"disabled\">\n\n        </aw-chooser>\n\n    </ng-template>\n\n</ng-container>\n",
                    styles: [""],
                    providers: [
                        { provide: BaseFormComponent, useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return GenericChooserComponent; }) },
                        { provide: DATA_SOURCE, useClass: ChooserDataSource, deps: [DataProviders, DataFinders] }
                    ]
                },] },
    ];
    /** @nocollapse */
    GenericChooserComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] },
        { type: ChooserDataSource, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [DATA_SOURCE,] }] },
        { type: BaseFormComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return BaseFormComponent; }),] }] }
    ]; };
    GenericChooserComponent.propDecorators = {
        list: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        object: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        key: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        destinationClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        choiceProviderParams: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        multiselect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        displayKey: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        noSelectionString: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return GenericChooserComponent;
}(BaseFormComponent));
/**
 * GenericChooser implementation of the ChooserSelectionState which is used when Type = Chooser.
 *
 */
var  /**
 * GenericChooser implementation of the ChooserSelectionState which is used when Type = Chooser.
 *
 */
GCChooserState = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(GCChooserState, _super);
    function GCChooserState(gChooser) {
        var _this = _super.call(this) || this;
        _this.gChooser = gChooser;
        return _this;
    }
    /**
     * @param {?} selection
     * @param {?} selected
     * @return {?}
     */
    GCChooserState.prototype.setSelectionState = /**
     * @param {?} selection
     * @param {?} selected
     * @return {?}
     */
    function (selection, selected) {
        if (selected === this.isSelected(selection)) {
            return;
        }
        if (this.gChooser.multiselect) {
            // Check if we can implement smarter and more generic way how we use it in java
            // RelationshipField.addTo(_object, _keyPath, selection);
            var /** @type {?} */ multiRel = this.gChooser.keyPath.getFieldValue(this.gChooser.object);
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(multiRel)) {
                multiRel = [];
            }
            else if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(multiRel) && !Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(multiRel)) {
                throw new Error('I can not store multiselect value into non-array object');
            }
            if (selected) {
                multiRel.push(selection);
                this.gChooser.selection = multiRel;
            }
            else {
                _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].removeIfExist(multiRel, selection);
            }
        }
        else {
            if (!selection) {
                selection = null;
            }
            this.gChooser.selection = selection;
        }
    };
    /**
     * @return {?}
     */
    GCChooserState.prototype.selectedObject = /**
     * @return {?}
     */
    function () {
        if (this.gChooser.multiselect) {
            var /** @type {?} */ objects = this.selectedObjects();
            return (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(objects) || _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].isEmpty(objects)) ? null : _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].last(objects);
        }
        return this.gChooser.selection;
    };
    /**
     * @return {?}
     */
    GCChooserState.prototype.selectedObjects = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ selection = this.gChooser.selection;
        if (this.gChooser.multiselect && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(selection)) {
            selection = [];
        }
        return (this.gChooser.multiselect && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(selection)) ? selection : [selection];
    };
    /**
     * @param {?} selection
     * @return {?}
     */
    GCChooserState.prototype.isSelected = /**
     * @param {?} selection
     * @return {?}
     */
    function (selection) {
        if (this.gChooser.multiselect) {
            return _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].containsComplex(this.selectedObjects(), selection);
        }
        var /** @type {?} */ curValue = this.selectedObject();
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["equals"])(curValue, selection);
    };
    return GCChooserState;
}(ChooserSelectionState));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Wrapper class for RadioButton component providing convenient way to to render RadioButton Groups
 *
 *
 * ### Example
 *
 *
 * ```
 * \@Component({
 *          selector: 'gender-selector' ,
 *          template: `
 *              <aw-radiobutton-list [list]="rbListValues" [layout]="layout"
 *     [selection]="selectedValue" [name]="'name'">
 *               </aw-radiobutton-list>
 *      `
 *      })
 *      export class GenderSelectorComponent
 *      {
 *          rbListValues: string[] = ['male' , 'female' , 'other'];
 *          selectedValue: string = 'other';
 *          layout: string = 'stacked';
 *
 *
 *          formGroup: FormGroup = new FormGroup({});
 *
 *
 *          onCBClick (event): void
 *          {
 *              console.log('onCBClick = ' + event);
 *          }
 *
 *      }
 *
 * ```
 */
var /** @type {?} */ RB_LIST_CONTROL_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return RadioButtonListComponent; }),
    multi: true
};
var RadioButtonListComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(RadioButtonListComponent, _super);
    function RadioButtonListComponent(env, parentContainer) {
        var _this = _super.call(this, env, parentContainer) || this;
        _this.env = env;
        _this.parentContainer = parentContainer;
        /**
         *
         * Fires an event when radio button is selected
         *
         */
        _this.onSelection = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        return _this;
    }
    /**
     * @return {?}
     */
    RadioButtonListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.selection)) {
            this.model = 0;
        }
        this.updateModel(this.selection);
        this.onModelChanged(this.selection);
        this.registerFormControl(this.selection);
    };
    /**
     * Label is extracted into a method so in the future we can play how we want to display the
     * value. Since I want to support formatters for each components we might have a chance to
     * decide how the label will look like.
     *
     */
    /**
     * Label is extracted into a method so in the future we can play how we want to display the
     * value. Since I want to support formatters for each components we might have a chance to
     * decide how the label will look like.
     *
     * @param {?} item
     * @return {?}
     */
    RadioButtonListComponent.prototype.labelValue = /**
     * Label is extracted into a method so in the future we can play how we want to display the
     * value. Since I want to support formatters for each components we might have a chance to
     * decide how the label will look like.
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.labelFormatter)) {
            return this.labelFormatter(item);
        }
        return item.toString();
    };
    /**
     * In this version of checkboxes we still expect only primitive types. Keep this functionality
     * in extra method so we can work with it even now we just return the same value back
     *
     *
     */
    /**
     * In this version of checkboxes we still expect only primitive types. Keep this functionality
     * in extra method so we can work with it even now we just return the same value back
     *
     *
     * @param {?} item
     * @return {?}
     */
    RadioButtonListComponent.prototype.value = /**
     * In this version of checkboxes we still expect only primitive types. Keep this functionality
     * in extra method so we can work with it even now we just return the same value back
     *
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return item;
    };
    /**
     *
     * On NGModel change retrieve actual record based on the INDEX and propagate it to both
     * ngModel as well as FormGroup.
     *
     */
    /**
     *
     * On NGModel change retrieve actual record based on the INDEX and propagate it to both
     * ngModel as well as FormGroup.
     *
     * @param {?} event
     * @return {?}
     */
    RadioButtonListComponent.prototype.onChange = /**
     *
     * On NGModel change retrieve actual record based on the INDEX and propagate it to both
     * ngModel as well as FormGroup.
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ updatedModel = this.list[this.model];
        this.onSelection.emit(updatedModel);
        this.onModelChanged(updatedModel);
        this.formControl.setValue(updatedModel, {
            emitEvent: true,
            emitViewToModelChange: false
        });
    };
    /**
     * Since we might be dealing with complex object store only INDEX number in the model.
     *
     */
    /**
     * Since we might be dealing with complex object store only INDEX number in the model.
     *
     * @param {?} souceItem
     * @return {?}
     */
    RadioButtonListComponent.prototype.updateModel = /**
     * Since we might be dealing with complex object store only INDEX number in the model.
     *
     * @param {?} souceItem
     * @return {?}
     */
    function (souceItem) {
        var /** @type {?} */ index = this.list.findIndex(function (elem) {
            return souceItem === elem;
        });
        this.model = index === -1 ? 0 : index;
    };
    /**
     * @return {?}
     */
    RadioButtonListComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ updatedModel = this.list[this.model];
        this.formControl.setValue(updatedModel, {
            emitEvent: true,
            emitViewToModelChange: false
        });
        // this.cd.detectChanges();
    };
    /**
     * Internal. Please see ControlValueAccessor
     *
     */
    /**
     * Internal. Please see ControlValueAccessor
     *
     * @param {?} value
     * @return {?}
     */
    RadioButtonListComponent.prototype.writeValue = /**
     * Internal. Please see ControlValueAccessor
     *
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== this.value) {
            var /** @type {?} */ newModel = value;
            this.updateModel(newModel);
        }
    };
    RadioButtonListComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-radiobutton-list',
                    template: "<div *ngFor=\"let item of list;  let i = index\" class=\"ui-g\">\n\n    <div class=\"ui-g-12\">\n        <aw-radiobutton\n            [(ngModel)]=\"model\"\n            (ngModelChange)=\"onChange($event)\"\n            [isStandalone]=\"false\"\n            [name]=\"name\"\n            [value]=\"i\"\n            [label]=\"labelValue(item)\">\n        </aw-radiobutton>\n    </div>\n\n</div>\n",
                    styles: [""],
                    providers: [
                        RB_LIST_CONTROL_VALUE_ACCESSOR,
                        { provide: BaseFormComponent, useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return RadioButtonListComponent; }) }
                    ]
                },] },
    ];
    /** @nocollapse */
    RadioButtonListComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: BaseFormComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return FormRowComponent; }),] }] }
    ]; };
    RadioButtonListComponent.propDecorators = {
        list: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        selection: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        labelFormatter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        onSelection: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
    };
    return RadioButtonListComponent;
}(BaseFormComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *
 * Implements standard HTML radio button on top of PrimeNG with ariba styling
 *
 * ### Example
 *
 * 1. Basic usage using ngModel pre-selected first radio
 *
 *  ```ts
 *
 * \@Component({
 *          selector: 'demo-comp',
 *          template: `
 *              <aw-radiobutton [name]="'color'" [value]="'red'" [label]="'Red'"
 *                             [(ngModel)]="model">
 *             </aw-radiobutton>
 *              <aw-radiobutton [name]="'color'" [value]="'blue'" [label]="'Blue'"
 *                      [(ngModel)]="model">
 *              </aw-radiobutton>
 *      `
 *      })*
 *      class BasicWithNgModelComponent
 *      {
 *          model: string[] = ['red'];
 *
 *          constructor()
 *          {
 *          }
 *      }
 *
 *  ```
 *
 *
 * 2. Basic usage with formGroup
 *
 *
 * ```ts
 * \@Component({
 *           selector: 'demo-comp',
 *           template: `
 *          <div [formGroup]="env.currentForm">
 *               <aw-radiobutton [name]="'color2'" [value]="'red'" [label]="'Red'"
 *               (onChange)="onChange($event)">
 *               </aw-radiobutton>
 *               <aw-radiobutton [name]="'color2'" [value]="'blue'" [label]="'Blue'"
 *               (onChange)="onChange($event)">
 *               </aw-radiobutton>
 *
 *       </div>
 *       `
 *       })
 *       class BasicWithFormGroupComponent implements OnInit
 *       {
 *           model: string = 'blue';
 *
 *           constructor(public env: Environment)
 *           {
 *           }
 *
 *           ngOnInit(): void
 *           {
 *               this.env.currentForm = new FormGroup({});
 *               this.env.currentForm.registerControl('color2', new FormControl(this.model));
 *           }
 *
 *
 *           onChange(event: any): void
 *           {
 *               this.modelSet = event;
 *           }
 *
 *       }
 *  ````
 *
 *
 *
 *
 */
var /** @type {?} */ RAB_CONTROL_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return RadioButtonComponent; }),
    multi: true
};
var RadioButtonComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(RadioButtonComponent, _super);
    function RadioButtonComponent(env, parentContainer) {
        var _this = _super.call(this, env, parentContainer) || this;
        _this.env = env;
        _this.parentContainer = parentContainer;
        /**
         *
         * A value associated with this radio
         *
         */
        _this.value = '';
        /**
         * Trigger click event with currrent selected value
         *
         */
        _this.onChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        return _this;
    }
    /**
     * @return {?}
     */
    RadioButtonComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        if (this.isStandalone) {
            _super.prototype.registerFormControl.call(this, this.value);
            this.model = this.formControl.value;
            this.onModelChanged(this.model);
        }
        else {
            this.formControl = /** @type {?} */ (this.formGroup.controls[this.name]);
        }
    };
    /**
     * Called when radio is clicked. Not using PrimeNG click event as it is fired before
     * the model is changed. Therefore need to listen on (ngModelChange)
     *
     */
    /**
     * Called when radio is clicked. Not using PrimeNG click event as it is fired before
     * the model is changed. Therefore need to listen on (ngModelChange)
     *
     * @param {?} newVal
     * @return {?}
     */
    RadioButtonComponent.prototype.onModelChange = /**
     * Called when radio is clicked. Not using PrimeNG click event as it is fired before
     * the model is changed. Therefore need to listen on (ngModelChange)
     *
     * @param {?} newVal
     * @return {?}
     */
    function (newVal) {
        this.onModelChanged(this.model);
        if (this.isStandalone) {
            this.formControl.setValue(this.model, { emitEvent: true });
        }
        this.onChange.emit(this.model);
    };
    /**
     * Internal. Please see ControlValueAccessor
     *
     */
    /**
     * Internal. Please see ControlValueAccessor
     *
     * @param {?} value
     * @return {?}
     */
    RadioButtonComponent.prototype.writeValue = /**
     * Internal. Please see ControlValueAccessor
     *
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== this.model) {
            this.model = value;
            if (this.isStandalone) {
                this.formControl.setValue(this.model, { emitEvent: true });
            }
            this.onModelChanged(this.model);
        }
    };
    RadioButtonComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-radiobutton',
                    template: "<span class=\"w-radiobutton\">\n\n    <ng-template [ngIf]=\"editable \">\n        <p-radioButton [name]=\"name\"\n                       [value]=\"value\"\n                       [label]=\"label\"\n                       [(ngModel)]=\"model\"\n                       [disabled]=\"disabled\"\n                       (ngModelChange)=\"onModelChange($event)\"\n                       [class.u-validation-error]=\"!(formControl.valid || (formControl.pristine))\">\n        </p-radioButton>\n    </ng-template>\n</span>\n",
                    styles: ["/deep/ .w-radiobutton .ui-radiobutton-box{width:23px;height:23px;line-height:23px}/deep/ .w-radiobutton .ui-radiobutton-icon{font-size:1.5em;line-height:1em}"],
                    providers: [
                        RAB_CONTROL_VALUE_ACCESSOR,
                        { provide: BaseFormComponent, useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return RadioButtonComponent; }) }
                    ]
                },] },
    ];
    /** @nocollapse */
    RadioButtonComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: BaseFormComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return FormRowComponent; }),] }] }
    ]; };
    RadioButtonComponent.propDecorators = {
        value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        onChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
    };
    return RadioButtonComponent;
}(BaseFormComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWRadioButtonModule = /** @class */ (function () {
    function AWRadioButtonModule() {
    }
    AWRadioButtonModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        RadioButtonComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["RadioButtonModule"]
                    ],
                    entryComponents: [
                        RadioButtonComponent
                    ],
                    exports: [
                        RadioButtonComponent,
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"]
                    ],
                    providers: []
                },] },
    ];
    return AWRadioButtonModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWRadioButtonListModule = /** @class */ (function () {
    function AWRadioButtonListModule() {
    }
    AWRadioButtonListModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        RadioButtonListComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        AWRadioButtonModule
                    ],
                    entryComponents: [
                        RadioButtonListComponent
                    ],
                    exports: [
                        RadioButtonListComponent,
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"]
                    ],
                    providers: []
                },] },
    ];
    return AWRadioButtonListModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWGenericChooserModule = /** @class */ (function () {
    function AWGenericChooserModule() {
    }
    AWGenericChooserModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        GenericChooserComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        AWCoreComponentModule,
                        AWDropdownModule,
                        AWCheckBoxListModule,
                        AWChooserModule,
                        AWRadioButtonListModule
                    ],
                    entryComponents: [
                        GenericChooserComponent
                    ],
                    exports: [
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                        GenericChooserComponent
                    ]
                },] },
    ];
    return AWGenericChooserModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * OutlineState is the key gluing part for the OutlineFor and OutlineController components. It
 * holds all important information for the current outline tree and manages expansion states in form
 * of so called expansionPath and expansionStates
 *
 * We need to have a way how to work with generic data structure in order not to hold UI specific
 * information on the domain object model just like we had it before, where we had an interface
 * called OutlineNode, with fields (expanded, selected, etc.. )
 *
 *
 * `expansionPath`: Holds an array of currently selected and expanded nodes. This is filled by
 * OutlineController.
 *
 *
 * If we are dealing with Entity or anything that has identity then we have easier situation as we
 * can ask for ID and it is more efficient for serialization
 */
var OutlineState = /** @class */ (function () {
    function OutlineState() {
        /**
         *
         * When outline is rendered for first time or re-rendered and we set default value for the
         * expansionStates. This way we can pretty easily execute CollapseAll, ExpandAll
         *
         */
        this.isExpandedAll = false;
        /**
         *
         * Holds current level during tree node rendering so we can apply correct indentation
         *
         */
        this.currentLevel = -1;
        this.expansionStates = new Map();
    }
    /**
     * For the collapseAll and expandAll we are using simple mechanism where we clean up all
     * selection and then set the global expand state, this whey isExpand method returns the same
     * state for all items
     */
    /**
     * For the collapseAll and expandAll we are using simple mechanism where we clean up all
     * selection and then set the global expand state, this whey isExpand method returns the same
     * state for all items
     * @return {?}
     */
    OutlineState.prototype.collapseAll = /**
     * For the collapseAll and expandAll we are using simple mechanism where we clean up all
     * selection and then set the global expand state, this whey isExpand method returns the same
     * state for all items
     * @return {?}
     */
    function () {
        var _this = this;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.outlineFor) &&
            this.outlineFor.isTreeModelFormat()) {
            // for this case we collapse all but root nodes
            if (this.outlineFor.pushRootSectionOnNewLine) {
                this.outlineFor.list.forEach(function (item) {
                    _this.updateNodes(item.children || [], false);
                });
            }
            else {
                this.updateNodes(this.outlineFor.list || [], false);
            }
        }
        else {
            this.expansionStates.clear();
        }
        this.isExpandedAll = false;
    };
    /**
     * @return {?}
     */
    OutlineState.prototype.expandAll = /**
     * @return {?}
     */
    function () {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.outlineFor) &&
            this.outlineFor.isTreeModelFormat()) {
            this.updateNodes(this.outlineFor.list, true);
        }
        else {
            this.expansionStates.clear();
        }
        this.isExpandedAll = true;
    };
    Object.defineProperty(OutlineState.prototype, "expansionPath", {
        get: /**
         * @return {?}
         */
        function () {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._expansionPath)) {
                this._expansionPath = [];
            }
            return this._expansionPath;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this._expansionPath = value;
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._expansionPath)) {
                return;
            }
            this._expansionPath.forEach(function (item) {
                _this.setExpansionState(item, true);
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} currentPath
     * @param {?=} children
     * @return {?}
     */
    OutlineState.prototype.toggleExpansion = /**
     * @param {?} currentPath
     * @param {?=} children
     * @return {?}
     */
    function (currentPath, children) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(currentPath)) {
            return;
        }
        var /** @type {?} */ item = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].last(currentPath);
        var /** @type {?} */ itemChildren = children || [];
        var /** @type {?} */ newState = !this.isExpanded(item);
        this.setExpansionState(item, newState);
        if (!newState) {
            _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].removeLast(currentPath);
            this.updateNodes(itemChildren, newState);
        }
        this.setExpansionPath(currentPath);
    };
    /**
     * @param {?} nodes
     * @param {?} newState
     * @return {?}
     */
    OutlineState.prototype.updateNodes = /**
     * @param {?} nodes
     * @param {?} newState
     * @return {?}
     */
    function (nodes, newState) {
        var _this = this;
        nodes.forEach(function (child) {
            var /** @type {?} */ items = _this.outlineFor.childrenForItem(child);
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(items) && items.length > 0) {
                _this.updateNodes(items, newState);
            }
            _this.setExpansionState(child, newState);
        });
    };
    /**
     * @param {?} item
     * @param {?} isExpanded
     * @return {?}
     */
    OutlineState.prototype.setExpansionState = /**
     * @param {?} item
     * @param {?} isExpanded
     * @return {?}
     */
    function (item, isExpanded) {
        // Even for tree mode format save the state so we can use it later on in case object
        // references gets meesed up
        if (this.outlineFor &&
            this.outlineFor.isTreeModelFormat()) {
            (/** @type {?} */ (item)).isExpanded = isExpanded;
        }
        else {
            var /** @type {?} */ key = this.itemToKey(item);
            if (isExpanded === this.isExpandedAll) {
                this.expansionStates.delete(key);
            }
            else {
                this.expansionStates.set(key, (isExpanded) ? true : false);
            }
        }
    };
    /**
     * To improve state persisting lets check if we are dealing with an Object that has Identity
     * so we can extract an ID otherwise use object to compare by reference
     *
     *
     * @param {?} item
     * @return {?}
     */
    OutlineState.prototype.itemToKey = /**
     * To improve state persisting lets check if we are dealing with an Object that has Identity
     * so we can extract an ID otherwise use object to compare by reference
     *
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isEntity"])(item) ? (/** @type {?} */ (item)).identity() : item;
    };
    /**
     * @param {?} items
     * @return {?}
     */
    OutlineState.prototype.setExpansionPath = /**
     * @param {?} items
     * @return {?}
     */
    function (items) {
        var _this = this;
        this.expansionPath = items;
        items.forEach(function (node) {
            _this.setExpansionState(node, true);
        });
    };
    /**
     * @param {?} item
     * @return {?}
     */
    OutlineState.prototype.isExpanded = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.outlineFor) &&
            this.outlineFor.isTreeModelFormat()) {
            return (/** @type {?} */ (item)).isExpanded;
        }
        else {
            var /** @type {?} */ key = this.itemToKey(item);
            if (!this.expansionStates.has(key)) {
                return this.isExpandedAll;
            }
            return this.expansionStates.get(key);
        }
    };
    OutlineState.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] },
    ];
    /** @nocollapse */
    OutlineState.ctorParameters = function () { return []; };
    return OutlineState;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *
 * Checks type for OutlineNode
 *
 * @param {?} node
 * @return {?}
 */
function isOutlineNode(node) {
    return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(node) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])((/** @type {?} */ (node)))
        && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])((/** @type {?} */ (node)).parent)
        && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])((/** @type {?} */ (node)).children);
}
/**
 *
 * OutlineForComponent is like ngFor, but for hierarchical (outline/tree) structures -- i.e. in
 * those cases where an item may have children.
 *
 *
 * It uses outline `<aw-outline-control>` to provide expanding functionality, indentation
 * and other things.
 *
 *
 * This component has minimal styling to make sure it can be changed easily.
 *
 * ### Example rendering tree section, where based on the type we format the out plus
 * for the main root section we always render little popup menu.
 *
 * ```
 *
 *   <aw-outline-for [list]="list" [hasChildren]="hasChildren">
 *
 *       <ng-template #outline let-item>
 *
 *           <div class="my-section">
 *               <div class="outline">
 *                   <aw-outline-control>
 *                       <ng-container [ngSwitch]="item.type">
 *                           <ng-template [ngSwitchCase]="'text'">
 *                               <div class="as-paragraf">
 *                                   {{item?.content}}
 *                               </div>
 *                           </ng-template>
 *
 *
 *                           <ng-template ngSwitchDefault>
 *                               {{item?.content}}
 *                           </ng-template>
 *
 *
 *                       </ng-container>
 *
 *
 *                   </aw-outline-control>
 *               </div>
 *
 *               <div class="filters" *ngIf="item.type === 'section'" >
 *
 *                   <aw-hover-card [linkTitle]="'Filter Items'">
 *                       <aw-list [list]="filterItems" [borderless]="true"></aw-list>
 *                   </aw-hover-card>
 *
 *               </div>
 *           </div>
 *     </ng-template>`
 *   </aw-outline-for>
 *
 * ```
 *
 *
 * We can use it also in embedded mode where we use the `awOutlineFor` directive
 *
 * ## Example
 *
 *
 * ````
 *  <table  class="tree-table" >
 *      <thead>
 *          <tr>
 *              <th>Name</th>
 *              <th>Type</th>
 *          </tr>
 *      </thead>
 *      <tbody #ooo2 awOutlineFor [list]="list"
 *             [hasChildren]="hasChildren"
 *             class="outline-table"
 *      >
 *          <ng-template #outline let-item>
 *              <tr>
 *                  <td class="item-name outline-animation">
 *                      <div><aw-outline-control>
 *                          {{item?.content}}
 *                      </aw-outline-control></div>
 *                  </td>
 *                  <td class="item-type outline-animation">
 *                      <div>{{item.type}}</div>
 *                  </td>
 *              </tr>
 *          </ng-template>
 *      </tbody>
 *  </table>
 *
 * ```
 *
 * I was thinking maybe for first time we don't need the same animation like expanding and
 * collapsing. Maybe we need fade-in. In such case I would probably apply \@section anim only
 * on items where level > 0 (in the template I keep levels) and if level == 0 then I would
 * execute the same rendering just without [\@section]
 *
 *
 * Todo: Think about how to do animation for the table case. Must also write unitest - due to
 * AribaLive aggressive schedule we are skipping them for now
 *
 */
var OutlineForComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(OutlineForComponent, _super);
    function OutlineForComponent(env, _viewContainer, builder, element) {
        var _this = _super.call(this, env) || this;
        _this.env = env;
        _this._viewContainer = _viewContainer;
        _this.builder = builder;
        _this.element = element;
        /**
         * Tells the component not to render expansion control, in such case we expandAll as a
         * default behavior
         *
         */
        _this.showExpansionControl = true;
        /**
         * Opens all tree nodes.
         *
         */
        _this.expandAll = false;
        /**
         *
         * Set indentation size to be used for each level
         *
         */
        _this.indentationPerLevel = 25;
        _this.pushRootSectionOnNewLine = false;
        /**
         *
         * Identifies current model mode.
         *
         * We recognize two modes:
         *
         * Free - Application needs to implement a children method to retrieve a list of children for
         * each node and format is pretty much upt to the application
         *
         * Tree - this is more restrictive where we have concrete data structure
         * interface that needs to be folled
         *
         * todo: instead of passing format binding try to look into the list to see what type so
         * we dont make it mandatory
         *
         */
        _this.format = 'free';
        /**
         *
         * Used when in selection mode to push current selected Item to the application
         *
         */
        _this.onItemSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         *
         * This event is triggered by OutlineControl when node is expanded or collapsed
         *
         */
        _this.onExpandChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.embedded = false;
        /**
         * Flag that tells us that component is fully rendered
         *
         */
        _this.viewInitialized = false;
        return _this;
    }
    /**
     * @return {?}
     */
    OutlineForComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.state)) {
            this.state = new OutlineState();
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.state.outlineFor)) {
            this.state.outlineFor = this;
        }
        if (this.expandAll) {
            this.showExpansionControl = false;
        }
        this.state.isExpandedAll = this.expandAll;
        // in case we want to render content of tree outside of outlineFor
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.externalTemplate)) {
            this.controlTemplate = this.externalTemplate;
        }
        this.embedded = this.element.nativeElement.hasAttribute('awoutlinefor');
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.context)) {
            this.context = this;
        }
    };
    /**
     * @return {?}
     */
    OutlineForComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngDoCheck.call(this);
    };
    /**
     * @return {?}
     */
    OutlineForComponent.prototype.isTreeModelFormat = /**
     * @return {?}
     */
    function () {
        return this.format === 'tree';
    };
    /**
     * Used by template and OutlineControl to identify which item is expanded and collapsed
     *
     */
    /**
     * Used by template and OutlineControl to identify which item is expanded and collapsed
     *
     * @param {?} item
     * @param {?=} currentLevel
     * @return {?}
     */
    OutlineForComponent.prototype.isExpanded = /**
     * Used by template and OutlineControl to identify which item is expanded and collapsed
     *
     * @param {?} item
     * @param {?=} currentLevel
     * @return {?}
     */
    function (item, currentLevel) {
        if (currentLevel === void 0) { currentLevel = -1; }
        if (currentLevel === 0 && this.pushRootSectionOnNewLine) {
            // always override/reset for root nodes
            if (this.isTreeModelFormat()) {
                (/** @type {?} */ (item)).isExpanded = true;
            }
            return true;
        }
        return this.state.isExpanded(item);
    };
    /**
     *
     * Since we have currently two ways how to pass children items we need have this method to
     * unify the way how we access it. If we pass `children` binding we use this instead, otherwise
     * we expect current object to have `children` field
     *
     */
    /**
     *
     * Since we have currently two ways how to pass children items we need have this method to
     * unify the way how we access it. If we pass `children` binding we use this instead, otherwise
     * we expect current object to have `children` field
     *
     * @param {?} item
     * @return {?}
     */
    OutlineForComponent.prototype.childrenForItem = /**
     *
     * Since we have currently two ways how to pass children items we need have this method to
     * unify the way how we access it. If we pass `children` binding we use this instead, otherwise
     * we expect current object to have `children` field
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (this.isTreeModelFormat()) {
            return (/** @type {?} */ (item)).children || [];
        }
        else {
            return this.hasChildren(item) ? this.doGetChildren(item) : [];
        }
    };
    /**
     *
     * Check if the current item has a children and needs to be rendered
     *
     */
    /**
     *
     * Check if the current item has a children and needs to be rendered
     *
     * @param {?} item
     * @return {?}
     */
    OutlineForComponent.prototype.hasChildren = /**
     *
     * Check if the current item has a children and needs to be rendered
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (this.isTreeModelFormat()) {
            var /** @type {?} */ children = (/** @type {?} */ (item)).children;
            return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(children) && children.length > 0;
        }
        else if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.children) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(item.children)) {
            Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(false, 'Missing [children] method binding');
        }
        return this.doGetChildren(item).length > 0;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    OutlineForComponent.prototype.doGetChildren = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.children.apply(this.context, [item]);
    };
    /**
     *  Uses the `OutlineState` to toggle state of current selectionPath. The `selectionPath` is
     *  put together inside `OutlineControl` where we iterate all the way to the root and add
     *  each item to the `currentPath` array. This way we collect list of item representing current
     *  current expansionPath.
     *
     *
     */
    /**
     *  Uses the `OutlineState` to toggle state of current selectionPath. The `selectionPath` is
     *  put together inside `OutlineControl` where we iterate all the way to the root and add
     *  each item to the `currentPath` array. This way we collect list of item representing current
     *  current expansionPath.
     *
     *
     * @return {?}
     */
    OutlineForComponent.prototype.toggleExpansion = /**
     *  Uses the `OutlineState` to toggle state of current selectionPath. The `selectionPath` is
     *  put together inside `OutlineControl` where we iterate all the way to the root and add
     *  each item to the `currentPath` array. This way we collect list of item representing current
     *  current expansionPath.
     *
     *
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.animationInProgress) {
            // backup procedure in case onAnimationDone fails
            setTimeout(function () {
                if (_this.animationInProgress) {
                    // change only if its fails
                    _this.animationInProgress = false;
                }
            }, 200);
            return;
        }
        if (!this.embedded) {
            this.animationInProgress = true;
        }
        var /** @type {?} */ currentItem = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].last(this.state.currentPath);
        this.state.toggleExpansion(this.state.currentPath, this.childrenForItem(currentItem));
        if (this.embedded) ;
    };
    /**
     * Angular anim. callback that sets back the flag to make sure we don't trigger animations
     * when one is in progress.
     *
     */
    /**
     * Angular anim. callback that sets back the flag to make sure we don't trigger animations
     * when one is in progress.
     *
     * @param {?} event
     * @return {?}
     */
    OutlineForComponent.prototype.onAnimationDone = /**
     * Angular anim. callback that sets back the flag to make sure we don't trigger animations
     * when one is in progress.
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.animationInProgress = false;
    };
    /**
     * Calculated indentation used to shift the nested section to the right or later on to the
     * left when RTL is supported
     *
     *
     */
    /**
     * Calculated indentation used to shift the nested section to the right or later on to the
     * left when RTL is supported
     *
     *
     * @param {?} currentLevel
     * @return {?}
     */
    OutlineForComponent.prototype.indentation = /**
     * Calculated indentation used to shift the nested section to the right or later on to the
     * left when RTL is supported
     *
     *
     * @param {?} currentLevel
     * @return {?}
     */
    function (currentLevel) {
        if (this.pushRootSectionOnNewLine && currentLevel > 0) {
            currentLevel -= 1;
        }
        return (currentLevel === 0 && this.pushRootSectionOnNewLine)
            ? 0 : (this.indentationPerLevel * currentLevel);
    };
    /**
     * Not all rows are visible by default, there can be a case where you dont want to render items
     * using outline. e.g. Datatable with detail row.
     */
    /**
     * Not all rows are visible by default, there can be a case where you dont want to render items
     * using outline. e.g. Datatable with detail row.
     * @param {?} item
     * @return {?}
     */
    OutlineForComponent.prototype.isVisible = /**
     * Not all rows are visible by default, there can be a case where you dont want to render items
     * using outline. e.g. Datatable with detail row.
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.filterOut)) {
            return !this.filterOut(item);
        }
        return true;
    };
    OutlineForComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-outline-for, [awOutlineFor]',
                    template: "<!--\n    Starts with the list, where nestingLevel is -1.\n    call template outlineItems to iterate and render each item\n-->\n<ng-container [ngIf]=\"list\" *ngTemplateOutlet=\"outlineItems;\n            context:{ $implicit: list, nestingLevel: 0, parentItem: null, expanded: true}\">\n</ng-container>\n\n<!--\n    Main Entry point for the recursion. this is called by the block above as well as byt the inner\n    piece that calls this template recursively again when an item has children\n-->\n<ng-template #outlineItems let-children let-nestingLevel=\"nestingLevel\"\n             let-parent=\"parentItem\" let-expanded=\"expanded\">\n\n    <ng-template ngFor let-item [ngForOf]=\"children\" let-rowIndex=\"index\">\n\n        <ng-container *ngTemplateOutlet=\"outlineItem;\n            context:{ $implicit: item, nestingLevel: nestingLevel, parentItem: parent,\n            expanded: expanded, rowIndex:rowIndex}\">\n        </ng-container>\n\n        <!--\n\n            Recursion piece:\n\n            For non embedded case when even if its not expanded we need to iterate children\n            as we want to apply animation that should go with ngIf which inside the outineItem\n            template\n\n            Dont recurse/ render items that are not visible.\n        -->\n\n        <ng-template [ngIf]=\"hasChildren(item) && (isExpanded(item, nestingLevel) || !embedded) && isVisible(item)\">\n            <ng-container *ngTemplateOutlet=\"outlineItems;\n                        context:{ $implicit: childrenForItem(item),\n                                nestingLevel: nestingLevel+1,\n                                expanded: isExpanded(item, nestingLevel),\n                                parentItem:item }\">\n            </ng-container>\n        </ng-template>\n    </ng-template>\n</ng-template>\n\n\n<!--\n    Renders actual outline node and applies animation while expanding and collapsing\n\n    [@section]=\"expanded || isExpanded(item) ? 'visible' : 'hidden'\"\n-->\n<ng-template #outlineItem let-item let-nestingLevel=\"nestingLevel\" let-parent=\"parentItem\"\n             let-rowIndex=\"rowIndex\"\n             let-expanded=\"expanded\">\n\n    <div class=\"w-outline-item\"\n         *ngIf=\"!embedded && expanded\"\n         [style.padding-left.px]=\"indentation(nestingLevel)\"\n         initNesting [setLevel]=\"nestingLevel\" [setParentItem]=\"parent\"\n         [setCurrrentItem]=\"item\"\n         [@section]\n         (@section.done)=\"onAnimationDone($event)\">\n\n        <ng-container *ngTemplateOutlet=\"controlTemplate;\n                        context:{ $implicit: item, nestingLevel: nestingLevel, rowIndex:rowIndex }\">\n        </ng-container>\n    </div>\n\n    <!--\n        When outline control is used as embedded meaning its inside e..g datatable we\n        cannot have any tags around it.\n\n        Todo: Refactor this in the way so we can do animation when table lines are\n        expanded. Since its embedded we can not have any wrapping element around, the template\n        is fully responsible\n    -->\n    <ng-template [ngIf]=\"embedded && expanded\"\n                 initNesting [setLevel]=\"nestingLevel\" [setParentItem]=\"parent\"\n                 [setCurrrentItem]=\"item\"\n    >\n        <ng-container #renderedItem *ngTemplateOutlet=\"controlTemplate;\n                        context:{ $implicit: item, nestingLevel: nestingLevel, rowIndex:rowIndex  }\">\n        </ng-container>\n    </ng-template>\n\n</ng-template>\n\n\n",
                    styles: [".is-outline-animation>div,::ng-deep .w-outline-item{overflow:hidden}"],
                    animations: [
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_10__["trigger"])('section', [
                            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_10__["state"])('*', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_10__["style"])({
                                'overflow-y': 'hidden',
                                'height': '*',
                                'opacity': '1'
                            })),
                            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_10__["state"])('void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_10__["style"])({
                                'height': '0',
                                'opacity': '0',
                                'overflow-y': 'hidden'
                            })),
                            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_10__["transition"])('* => void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_10__["animate"])('200ms ease-out')),
                            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_10__["transition"])('void => *', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_10__["animate"])('200ms ease-in'))
                        ]),
                    ]
                },] },
    ];
    /** @nocollapse */
    OutlineForComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] },
        { type: _angular_animations__WEBPACK_IMPORTED_MODULE_10__["AnimationBuilder"] },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
    ]; };
    OutlineForComponent.propDecorators = {
        list: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        showExpansionControl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        children: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        filterOut: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        expandAll: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        state: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        indentationPerLevel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        externalTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        context: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        pushRootSectionOnNewLine: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        format: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        onItemSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        onExpandChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        controlTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: ['outline',] }],
        outlineItem: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['renderedItem',] }]
    };
    return OutlineForComponent;
}(BaseComponent));
/**
 *
 * Since we can not directly set `*ngTemplateOutlet` context variables to the typescript class we
 * use this directive to do the Job
 *
 */
var InitNestingDirective = /** @class */ (function () {
    function InitNestingDirective(outline) {
        this.outline = outline;
    }
    /**
     * @return {?}
     */
    InitNestingDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.setLevel)) {
            this.outline.state.currentLevel = this.setLevel;
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.setCurrrentItem)) {
            this.outline.currentItem = this.setCurrrentItem;
            if (this.outline.isTreeModelFormat()) {
                this.outline.currentItem['$$parentItem']
                    = (/** @type {?} */ (this.setCurrrentItem)).parent;
            }
        }
        if (!this.outline.isTreeModelFormat() && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.setParentItem)) {
            this.outline.currentItem['$$parentItem'] = this.setParentItem;
        }
    };
    InitNestingDirective.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                    selector: '[initNesting]'
                },] },
    ];
    /** @nocollapse */
    InitNestingDirective.ctorParameters = function () { return [
        { type: OutlineForComponent }
    ]; };
    InitNestingDirective.propDecorators = {
        setLevel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        setCurrrentItem: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        setParentItem: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return InitNestingDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * OutlineControlComponent renders the indentation, arrow, and text for a node in an outline.
 * It should be used either in the body of an OutlineFor component, or inside datatable
 *
 *
 * ##Usage inside body:
 *
 *  Here you can see that we need to wrap out content inside ng-template which will push us
 *  give us current item item and then we can place OutlineControlComponent to control
 *  the tree.
 *
 * ```
 *  <aw-outline-for2 #ooo [list]="list" [hasChildren]="hasChildren">
 *
 *      <ng-template #outline let-item>
 *          <div class="my-section">
 *              <div class="outline">
 *                  <aw-outline-control>
 *                      {{item?.content}}
 *                  </aw-outline-control>
 *              </div>*
 *          </div>
 *      </ng-template>
 *  </aw-outline-for2>
 *
 *
 * ```
 *
 * We can
 *
 *
 */
var OutlineControlComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(OutlineControlComponent, _super);
    function OutlineControlComponent(env, outlineState, parentControl, outlineFor) {
        var _this = _super.call(this, env) || this;
        _this.env = env;
        _this.outlineState = outlineState;
        _this.parentControl = parentControl;
        _this.outlineFor = outlineFor;
        /**
         *
         *  If TRUE it changes the behavior of the outline node text which click is triggered
         *  it selects the item and broadcast the `onItemSelected` event
         *
         */
        _this.allowSelection = false;
        _this.allowEdit = false;
        /**
         *
         * Triggers action when outline item is expanded
         *
         */
        _this.action = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.isRootItem = false;
        return _this;
    }
    /**
     * @return {?}
     */
    OutlineControlComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.prepareControl();
    };
    /**
     *
     * We dont show expansion icons when there no children
     *
     */
    /**
     *
     * We dont show expansion icons when there no children
     *
     * @return {?}
     */
    OutlineControlComponent.prototype.hasExpansionControl = /**
     *
     * We dont show expansion icons when there no children
     *
     * @return {?}
     */
    function () {
        return this.outlineFor.hasChildren(this.item) && this.outlineFor.showExpansionControl;
    };
    /**
     * @return {?}
     */
    OutlineControlComponent.prototype.isSelected = /**
     * @return {?}
     */
    function () {
        return this.outlineFor.state.selectedItem === this.item;
    };
    /**
     * @return {?}
     */
    OutlineControlComponent.prototype.calculateStyleClass = /**
     * @return {?}
     */
    function () {
        if (!this.hasExpansionControl() ||
            (this.outlineFor.pushRootSectionOnNewLine && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.item.$$parentItem))) {
            return '';
        }
        if (this.outlineFor.embedded) {
            return this.outlineFor.isExpanded(this.item) ? 'icon-slim-arrow-down'
                : 'icon-slim-arrow-right';
        }
        else {
            return this.outlineFor.isExpanded(this.item)
                ? 'icon-slim-arrow-right outline-icon-expanded' : 'icon-slim-arrow-right';
        }
    };
    /**
     * Collapses and expands current node
     *
     */
    /**
     * Collapses and expands current node
     *
     * @param {?} event
     * @return {?}
     */
    OutlineControlComponent.prototype.toggleExpansion = /**
     * Collapses and expands current node
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.outlineFor.state.currentPath = [];
        var /** @type {?} */ currentPath = this.item;
        while (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(currentPath)) {
            this.outlineFor.state.currentPath.unshift(currentPath);
            currentPath = currentPath.$$parentItem;
        }
        this.outlineFor.toggleExpansion();
        var /** @type {?} */ payload = {
            item: this.item,
            expanded: this.outlineFor.state.isExpanded(this.item)
        };
        this.action.emit(payload);
        this.outlineFor.onExpandChange.emit(payload);
        event.stopPropagation();
    };
    /**
     * @return {?}
     */
    OutlineControlComponent.prototype.select = /**
     * @return {?}
     */
    function () {
        this.outlineFor.state.selectedItem = this.item;
        this.outlineFor.onItemSelected.emit(this.item);
    };
    /**
     * @return {?}
     */
    OutlineControlComponent.prototype.prepareControl = /**
     * @return {?}
     */
    function () {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.outlineFor) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.outlineState)) {
            this.outlineFor = this.outlineState.outlineFor;
        }
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.outlineFor), 'Missing outlineFor component');
        if (this.outlineFor.embedded) {
            var /** @type {?} */ level = this.outlineFor.state.currentLevel;
            if (this.outlineFor.pushRootSectionOnNewLine && level > 0) {
                level -= 1;
            }
            this.indentation = (this.outlineFor.indentationPerLevel * level);
        }
        this.item = this.outlineFor.currentItem;
        this.isRootItem = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.item.$$parentItem);
    };
    OutlineControlComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-outline-control',
                    template: "<!--\n    Control is just the two flex box items for displaying expand/collapse icon and content\n\n    Since we animate only standalone/non-embedded case now then we need to also animate the icon\n    so we use only icon-slim-arrow-right and do tranformation on top of this to make it rotate.\n\n    If embedded case we use both icons icon-slim-arrow-right / icon-slim-arrow-down\n-->\n<div class=\"w-outline-control\"\n     [ngClass]=\"{'outline-u-unselectable-text': outlineFor.pushRootSectionOnNewLine && !item.$$parentItem}\">\n    <div class=\"outline-icon sap-icon\"\n         *ngIf=\"!outlineFor.pushRootSectionOnNewLine || !isRootItem\"\n         (click)=\"toggleExpansion($event)\"\n         [style.margin-left.px]=\"indentation\"\n         [ngClass]=\"calculateStyleClass()\">\n    </div>\n\n    <ng-container *ngIf=\"allowSelection; then withSelection else withoutSelection\">\n    </ng-container>\n</div>\n\n<!--\n We support two case for the content\n\n Selection: When you click on the content it will add extra class so you can style currently\n selected item as well as broadcast event outside so developer can hook in some custom logic\n\n If we dont support selection: Then clicking on the content is just like clicking on expandable\n icon, it toggles the state\n-->\n\n<ng-template #withSelection>\n     <span class=\"outline-content outline-content-selected\" *ngIf=\"!allowEdit && isSelected()\">\n        <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n    </span>\n    <span class=\"outline-content\" *ngIf=\"!allowEdit && !isSelected()\" (click)=\"select()\">\n        <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n    </span>\n\n</ng-template>\n\n\n<ng-template #withoutSelection>\n    <span *ngIf=\"!allowEdit\" class=\"outline-content\" (click)=\"toggleExpansion($event)\">\n        <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n    </span>\n    <span *ngIf=\"allowEdit\" class=\"outline-content\">\n        <ng-container *ngTemplateOutlet=\"ngContent\"></ng-container>\n    </span>\n</ng-template>\n\n\n<ng-template #ngContent>\n    <ng-content></ng-content>\n</ng-template>\n\n",
                    styles: [".w-outline-control{overflow:hidden;display:flex;flex-wrap:nowrap;cursor:pointer}.w-outline-control .outline-icon{flex:0 0 15px;color:#ababab;font-size:14px;font-weight:700;min-width:11px;align-self:center;transition:-webkit-transform 50ms ease-in;transition:transform 50ms ease-in;transition:transform 50ms ease-in,-webkit-transform 50ms ease-in;-webkit-transform-origin:25% 65%;transform-origin:25% 65%;-webkit-transform-style:preserve-3d;transform-style:preserve-3d}.w-outline-control .outline-icon.outline-icon-expanded{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.w-outline-control .outline-content{flex:1 1 auto;flex-wrap:wrap;padding:0 4px}.w-outline-control .outline-content.outline-content-selected{cursor:default;font-weight:700}.outline-u-unselectable-text{-webkit-user-select:none;-moz-user-select:none;-o-user-select:none;-ms-user-select:none;user-select:none;cursor:auto}"],
                },] },
    ];
    /** @nocollapse */
    OutlineControlComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: OutlineState, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return OutlineState; }),] }] },
        { type: OutlineControlComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return OutlineControlComponent; }),] }] },
        { type: OutlineForComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return OutlineForComponent; }),] }] }
    ]; };
    OutlineControlComponent.propDecorators = {
        title: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        allowSelection: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        allowEdit: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        action: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
    };
    return OutlineControlComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWOutlineForModule = /** @class */ (function () {
    function AWOutlineForModule() {
    }
    AWOutlineForModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        OutlineForComponent,
                        OutlineControlComponent,
                        InitNestingDirective
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        AWCoreComponentModule
                    ],
                    exports: [
                        OutlineForComponent,
                        OutlineControlComponent,
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"]
                    ],
                    providers: []
                },] },
    ];
    return AWOutlineForModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Renders html text area component
 *
 * ### Example
 *
 * ```typescript
 *
 * \@Component({
 *          selector: 'myNote' ,
 *          template: '<aw-text-area [value]="inputValue" [autoResize]="autoResize" >
 *              </aw-text-area>'
 *      })
 *      export class MyNoteComponent
 *      {
 *          inputValue: string = 'Some really long text';
 *          autoResize: false;
 *      }
 *
 * ```
 *  Note: if you are using this outside of FormTable please provide your own FormGroup
 */
var /** @type {?} */ TEXTAREA_CONTROL_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return TextAreaComponent; }),
    multi: true
};
var TextAreaComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(TextAreaComponent, _super);
    function TextAreaComponent(env, parentContainer) {
        var _this = _super.call(this, env, parentContainer) || this;
        _this.env = env;
        _this.parentContainer = parentContainer;
        /**
         *
         * A value used to store and read user input
         *
         */
        _this.value = '';
        /**
         * Spefifies visible number of lines
         */
        _this.rows = 2;
        /**
         * Specifies visible width
         */
        _this.columns = 20;
        /**
         * when this option is TRUE and user starts typing it will maximize textarea's width and height
         */
        _this.autoResize = true;
        return _this;
    }
    /**
     * @return {?}
     */
    TextAreaComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        _super.prototype.registerFormControl.call(this, this.value);
        this.formControl.valueChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["distinctUntilChanged"])()).subscribe(function (val) {
            _this.value = val;
            _this.onModelChanged(_this.value);
        });
    };
    /**
     * Internal. Please see ControlValueAccessor
     *
     */
    /**
     * Internal. Please see ControlValueAccessor
     *
     * @param {?} value
     * @return {?}
     */
    TextAreaComponent.prototype.writeValue = /**
     * Internal. Please see ControlValueAccessor
     *
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== this.value) {
            this.value = value;
            this.formControl.setValue(value, { onlySelf: true });
        }
    };
    TextAreaComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-text-area',
                    template: "<div *ngIf=\"editable\" [formGroup]=\"formGroup\">\n\n\t<textarea\n        pInputTextarea\n        [attr.name]=\"name\"\n        class=\"w-text-area\"\n        [class.u-validation-error]=\"!(formControl.valid || (formControl.pristine))\"\n        [class.disabled]=\"disabled\"\n        formControlName=\"{{name}}\"\n        [rows]=\"rows\"\n        [cols]=\"columns\"\n        [autoResize]=\"autoResize\"\n        [attr.placeholder]=\"placeHolder\"\n\n    ></textarea>\n\n</div>\n\n\n<ng-template [ngIf]=\"!editable\">\n    <aw-string [value]=\"value\"></aw-string>\n</ng-template>\n",
                    styles: [""],
                    providers: [
                        TEXTAREA_CONTROL_VALUE_ACCESSOR,
                        { provide: BaseFormComponent, useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return TextAreaComponent; }) }
                    ]
                },] },
    ];
    /** @nocollapse */
    TextAreaComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: BaseFormComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return FormRowComponent; }),] }] }
    ]; };
    TextAreaComponent.propDecorators = {
        value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        rows: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        columns: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        autoResize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return TextAreaComponent;
}(BaseFormComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWTextAreaModule = /** @class */ (function () {
    function AWTextAreaModule() {
    }
    AWTextAreaModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        TextAreaComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["InputTextareaModule"],
                        AWStringFieldModule
                    ],
                    entryComponents: [
                        TextAreaComponent
                    ],
                    exports: [
                        TextAreaComponent,
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"]
                    ],
                    providers: []
                },] },
    ];
    return AWTextAreaModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *
 * Page-Notification component that implements a notification system for the user regarding
 * the current object he's working on. Typical notification are:
 *      Success - saved.
 *      Warning - Sourcing request requires 3 suppliers.
 *      Error   - cannot connect to server, check internet connection.
 *
 *
 *
 * Usage 1:  As part of page wrapper.
 *
 * \@Component({
 *    selector: 'MyPage' ,
 *    template: `
 *       <aw-object-page-wrapper
 *                        [title]="MyPage"
 *                        [objectType]="MyType"
 *                        [notification]="pageNotification">
 *             page content
 *          `
 *       </aw-object-pager-wrapper>
 *    })
 *    export class MyPage
 *    {
 *
 *        pageNotification: PageNotification = new PageNotification("warn",
 *                              "Policy Warning", "This request requires 3 bids.");
 *
 *        constructor ()
 *        {
 *        }
 *    }
 *
 * Usage 2: directly into the page.
 *
 * \@Component({
 *    selector: 'registration' ,
 *    template: `
 *      <aw-header></aw-header>
 *        Page Header
 *
 *        <ng-template [ngIf]="hasNotifications()">
 *          <div class="ui-g-12 u-nopadding">
 *            <aw-page-notification [notification]="notification"></aw-page-notification>
 *          </div>
 *        </ng-template>
 *
 *      <aw-footer></aw-footer>
 *    `
 *    })
 *    export class MyPage
 *    {
 *
 *        notification: PageNotification = new PageNotification("warning",
 *                              "Policy Warning", "This request requires 3 bids.");
 *
 *        constructor ()
 *        {
 *        }
 *    }
 *
 */
var PageNotificationComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(PageNotificationComponent, _super);
    function PageNotificationComponent(element, env) {
        var _this = _super.call(this, env) || this;
        _this.element = element;
        _this.env = env;
        return _this;
    }
    /**
     * @return {?}
     */
    PageNotificationComponent.prototype.notificationClass = /**
     * @return {?}
     */
    function () {
        return "notification-" + this.notification.type;
    };
    /**
     * @return {?}
     */
    PageNotificationComponent.prototype.notificationIcon = /**
     * @return {?}
     */
    function () {
        return "ariba-icon icon-" + this.notification.type;
    };
    PageNotificationComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-page-notification',
                    template: "<div class=\"page-notification\">\n    <div [class]=\"notificationClass()\">\n        <i [class]=\"notificationIcon()\"></i>\n        <span class=\"content\">\n              <span class=\"title\">{{notification.title}}</span>\n              <span class=\"description\">\n                    <ng-template *ngIf=\"notification.hasTemplate(); else description\"\n                                 [ngTemplateOutlet]=\"notification.contentTmpl\">\n                    </ng-template>\n                    <ng-template #description>{{notification.description}}</ng-template>\n              </span>\n      </span>\n    </div>\n</div>\n",
                    styles: [".page-notification{margin:0 0 5px}.notification-error,.notification-info,.notification-success,.notification-warning{padding:9px 8px}.notification-error i,.notification-info i,.notification-success i,.notification-warning i{font-size:24px;margin:10px}.notification-success i{color:#58b957}.notification-info i{color:#199de0}.notification-warning i{color:#f90}.notification-error i{color:#c00}.notification-success{background-color:#f1f9f1;border:1px solid rgba(88,185,87,.5)}.notification-info{background-color:#edf8fd;border:1px solid rgba(25,157,224,.5)}.notification-warning{background-color:#fff8dd;border:1px solid rgba(255,153,0,.5)}.notification-error{background-color:#ffebeb;border:1px solid rgba(204,0,0,.5)}.icon-error:before{content:\"\\EA9D\"}.icon-warning:before{content:\"\\EA9C\"}.content{vertical-align:super}.title{font-weight:700;margin-right:10px}"]
                },] },
    ];
    /** @nocollapse */
    PageNotificationComponent.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] }
    ]; };
    PageNotificationComponent.propDecorators = {
        notification: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return PageNotificationComponent;
}(BaseComponent));
/**
 * Page Notification are messages for this page only. It displays in the center of the page
 * right under page title. Typical page notifications are 'save confirmation',
 * 'error during submit', warnings of field requirements, etc.
 */
var  /**
 * Page Notification are messages for this page only. It displays in the center of the page
 * right under page title. Typical page notifications are 'save confirmation',
 * 'error during submit', warnings of field requirements, etc.
 */
PageNotification = /** @class */ (function () {
    function PageNotification(type, title, description, contentTmpl) {
        this.type = type;
        this.title = title;
        this.description = description;
        this.contentTmpl = contentTmpl;
    }
    /**
     * @return {?}
     */
    PageNotification.prototype.hasTemplate = /**
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.contentTmpl);
    };
    /**
     * @return {?}
     */
    PageNotification.prototype.toString = /**
     * @return {?}
     */
    function () {
        return this.type + ', title: ' + this.title + ', description:  ' + this.description;
    };
    return PageNotification;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWPageNotificationModule = /** @class */ (function () {
    function AWPageNotificationModule() {
    }
    AWPageNotificationModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        PageNotificationComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"]
                    ],
                    entryComponents: [
                        PageNotificationComponent
                    ],
                    exports: [
                        PageNotificationComponent
                    ],
                    providers: []
                },] },
    ];
    return AWPageNotificationModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Represents an event triggered when a page has been initialized.
 *
 */
var  /**
 * Represents an event triggered when a page has been initialized.
 *
 */
PageInitialized = /** @class */ (function () {
    function PageInitialized(title) {
        this.title = title;
    }
    /**
     * @return {?}
     */
    PageInitialized.prototype.toString = /**
     * @return {?}
     */
    function () {
        return "PageInitializied(title: " + this.title + ")";
    };
    return PageInitialized;
}());
/**
 * Represents an event triggered when a page has been destroyed.
 *
 */
var  /**
 * Represents an event triggered when a page has been destroyed.
 *
 */
PageDestroyed = /** @class */ (function () {
    function PageDestroyed(title) {
        this.title = title;
    }
    /**
     * @return {?}
     */
    PageDestroyed.prototype.toString = /**
     * @return {?}
     */
    function () {
        return "PageDestroyed(title: " + this.title + ")";
    };
    return PageDestroyed;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Page LifeCycle Service monitors all page initialization and destructions.
 * The purpose of this service is to help the application monitor page lifecycle, subscribe
 * to lifecycle events and execute actions such as user analytics.
 *
 * Usage:
 *
 *    1.  Inject PageLifeCycleService into your constructor
 *
 *    constructor(pageLifecycle:PageLifeCycleService) {
 *        pageLifecycle.pageEvents.subscribe(event:Event => {
 *            if(event instanceof PageInitialized) {
 *            }
 *            // PageDestroyed
 *
 *        });
 *     }
 */
var PageLifeCycleService = /** @class */ (function () {
    /**
     *
     */
    function PageLifeCycleService() {
        /**
         * Page event queue when all page lifecycle events: init, destroy are emitted.
         * Listeners can subscribe to these events.
         */
        this.pageEvents = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
    }
    /**
     * Called when page is initialized.
     * @param {?} pageTitle
     * @return {?}
     */
    PageLifeCycleService.prototype.onPageInit = /**
     * Called when page is initialized.
     * @param {?} pageTitle
     * @return {?}
     */
    function (pageTitle) {
        this.pageEvents.next(new PageInitialized(pageTitle));
    };
    /**
     * Call when page has been destroyed
     * @param {?} pageTitle
     * @return {?}
     */
    PageLifeCycleService.prototype.onPageDestroy = /**
     * Call when page has been destroyed
     * @param {?} pageTitle
     * @return {?}
     */
    function (pageTitle) {
        this.pageEvents.next(new PageDestroyed(pageTitle));
    };
    PageLifeCycleService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] },
    ];
    /** @nocollapse */
    PageLifeCycleService.ctorParameters = function () { return []; };
    return PageLifeCycleService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {number} */
var PageType = {
    Init: 0,
    // Init Page type
    Login: 1,
    // Login Page
    Object: 2,
    // Object detail page
    List: 3,
    // List Page
    MasterDetail: 4,
    // MasterDetail
    Dashboard: 5,
    // Dashboard page
    Modal: 6,
};
PageType[PageType.Init] = "Init";
PageType[PageType.Login] = "Login";
PageType[PageType.Object] = "Object";
PageType[PageType.List] = "List";
PageType[PageType.MasterDetail] = "MasterDetail";
PageType[PageType.Dashboard] = "Dashboard";
PageType[PageType.Modal] = "Modal";
/**
 *  Page wrapper is the base class for all pages. The idea is that there are different page types
 *  in an Application. A List Page renders a list of objects, ex: customers, requests, PO.  And
 *  a object page will render one object in detail.
 *
 *  They share common attributes such as page type and page id.
 *
 *  Ariba Page have a life cycle. When page starts up, it's initialized. And when the page is
 *  destroyed, it'll be complete.
 * @abstract
 */
var  /**
 *  Page wrapper is the base class for all pages. The idea is that there are different page types
 *  in an Application. A List Page renders a list of objects, ex: customers, requests, PO.  And
 *  a object page will render one object in detail.
 *
 *  They share common attributes such as page type and page id.
 *
 *  Ariba Page have a life cycle. When page starts up, it's initialized. And when the page is
 *  destroyed, it'll be complete.
 * @abstract
 */
PageWrapper = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(PageWrapper, _super);
    function PageWrapper(env, pageType, componentRegistry, pageLifecycleService) {
        var _this = _super.call(this, env) || this;
        _this.env = env;
        _this.componentRegistry = componentRegistry;
        _this.pageLifecycleService = pageLifecycleService;
        /**
         * What type of page this is.
         *
         */
        _this.pageType = PageType.Init;
        _this.pageType = pageType;
        return _this;
    }
    /**
     * Get the unique Id for this page.
     *
     * @return {?}
     */
    PageWrapper.prototype.getId = /**
     * Get the unique Id for this page.
     *
     * @return {?}
     */
    function () {
        if (this.id) {
            return this.id;
        }
        this.id = this.generatePageId();
    };
    return PageWrapper;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *  This is a temporary implementation for the page header component.
 *  When the real implementation of side menu is done, PageHeaderComponent will
 *  be swaped to use it.
 *
 */
var SidenavComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(SidenavComponent, _super);
    function SidenavComponent(element, env) {
        var _this = _super.call(this, env) || this;
        _this.element = element;
        _this.env = env;
        return _this;
    }
    /**
     * @return {?}
     */
    SidenavComponent.prototype.getSidenavClass = /**
     * @return {?}
     */
    function () {
        // Only show if I have items
        return (this.show && this.items) ? 'sidenav sidenav-active' : 'sidenav';
    };
    /**
     * @return {?}
     */
    SidenavComponent.prototype.open = /**
     * @return {?}
     */
    function () {
        this.show = true;
    };
    /**
     * @return {?}
     */
    SidenavComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.show = false;
    };
    /**
     * @return {?}
     */
    SidenavComponent.prototype.toggle = /**
     * @return {?}
     */
    function () {
        this.show = !this.show;
    };
    SidenavComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-sidenav',
                    template: "<div [ngClass]=\"getSidenavClass()\">\n    <div class=\"sidenav-content\">\n        <a *ngFor=\"let item of items\" [routerLink]=\"item.link\">\n            <span class=\"sidenav-icon\"><i [ngClass]=\"'sap-icon ' + item.icon\"></i></span>\n            {{item.label}}\n        </a>\n    </div>\n</div>\n",
                    styles: [".sidenav{height:100%;width:0;position:fixed;z-index:1;top:50px;left:0;background-color:#363636;overflow-x:hidden;padding-top:20px;transition:.5s}.sidenav-active{width:250px}.sidenav a{padding:8px 8px 8px 32px;text-decoration:none;font-size:16px;color:#fff;display:block;transition:.3s}.sidenav a:hover{background-color:#111}.sidenav-icon{font-size:30px;color:#ccc;margin-right:10px}"]
                },] },
    ];
    /** @nocollapse */
    SidenavComponent.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] }
    ]; };
    SidenavComponent.propDecorators = {
        items: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        show: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return SidenavComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *
 * Header component that implements consistent styling, behavior for an Ariba page.
 * Header includes a menu, user profile, and alerts.
 *
 * \@Component({
 *    selector: 'registration' ,
 *    template: `
 *                <aw-page-header [showBackAction]="true" userName="Chad Noll"
 *                                 [menuItems]="menuItems" [notifications]="userNotifications">
 *                     <div class="page-header-center">
 *                           <a class="navbar-brand" tabindex="0" href="/">
 *                               <img class="navbar-logo" src="./images/SAP_Ariba_DB.png"
 *                                   alt="Go to homepage" data-pin-nopin="true">
 *                          </a>
 *                     </div>
 *                </aw-page-header>
 *
 *    `
 *    })
 *    export class MyPage
 *    {
 *      menuItems: PageMenuItem[] = [new PageMenuItem('icon-home', 'Home', '/play/'),
 *                                  new PageMenuItem('icon-expense-report', 'Reports',
 *                                                     '/play/pageheader'),
 *                                  new PageMenuItem('icon-sales-order', 'Purchase Order',
 *                                                       '/play/pageheader'),
 *                                  new PageMenuItem('icon-account', 'Accounts',
 *                                                     '/play/pageheader')];
 *
 *     userNotifications: UserNotification[] = [
 *       new UserNotification('icon-expense-report', 'Expense report EXP453 has been approved.',
 *                             '/play/'),
 *         new UserNotification('icon-sales-order', 'Sales Order SO1234 has been created.',
 *                             '/play/'),
 *           new UserNotification('icon-account', 'Supplier account SA1234 has been updated.',
 *                               '/play/')
 *        ];
 *
 *        constructor ()
 *        {
 *        }
 *
 *    }
 */
var PageHeaderComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(PageHeaderComponent, _super);
    function PageHeaderComponent(element, env, routing) {
        var _this = _super.call(this, env) || this;
        _this.element = element;
        _this.env = env;
        _this.routing = routing;
        /**
         * Should the user notification icon be hidden. Default it to show the icon even
         * if there's no notifications.
         *
         */
        _this.hideNotification = false;
        /**
         * displays the back link that navigates user to the previous page when clicked.
         */
        _this.showBackAction = false;
        _this.showNotificationPanel = false;
        return _this;
    }
    /**
     * @return {?}
     */
    PageHeaderComponent.prototype.backAction = /**
     * @return {?}
     */
    function () {
        this.routing.goBack();
    };
    /**
     * Do i have any menu items.
     *
     */
    /**
     * Do i have any menu items.
     *
     * @return {?}
     */
    PageHeaderComponent.prototype.hasMenuItems = /**
     * Do i have any menu items.
     *
     * @return {?}
     */
    function () {
        return (this.menuItems && this.menuItems.length > 0);
    };
    /**
     * Toggle the side navigation menu.
     */
    /**
     * Toggle the side navigation menu.
     * @return {?}
     */
    PageHeaderComponent.prototype.showHideMenu = /**
     * Toggle the side navigation menu.
     * @return {?}
     */
    function () {
        this.sidenav.toggle();
    };
    /**
     * Do I have any notifications.
     *
     */
    /**
     * Do I have any notifications.
     *
     * @return {?}
     */
    PageHeaderComponent.prototype.hasNotifications = /**
     * Do I have any notifications.
     *
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.notifications) && this.notifications.length > 0;
    };
    /**
     * toggling wheather notification panel is displayed or not.
     */
    /**
     * toggling wheather notification panel is displayed or not.
     * @return {?}
     */
    PageHeaderComponent.prototype.toggleNotificationPanel = /**
     * toggling wheather notification panel is displayed or not.
     * @return {?}
     */
    function () {
        this.showNotificationPanel = !this.showNotificationPanel;
    };
    PageHeaderComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-page-header',
                    template: "<nav class=\"navbar page-header\" role=\"navigation\">\n\n    <div class=\"ui-g\">\n        <div class=\"ui-g-12 ui-md-4 navbar-left\">\n\n        <span *ngIf=\"hasMenuItems()\">\n            <a (click)=\"showHideMenu()\">\n                <i class=\"sap-icon icon-paging\"></i>\n            </a>\n\n            <!-- Side menu -->\n            <aw-sidenav #sidemenu [items]=\"menuItems\"></aw-sidenav>\n        </span>\n            <!-- End Hamburger menu. -->\n\n            <!--  back action -->\n            <span class=\"back-action\">\n            <a (click)=\"backAction()\">\n                <i *ngIf=\"showBackAction\" class=\"sap-icon icon-arrow-left\" role=\"button\"></i>\n            </a>\n        </span>\n\n        </div>\n\n        <div class=\"ui-g-12 ui-md-4 navbar-center\">\n\n            <!-- central section.  Application can add Ariba-logo, search box, etc -->\n            <ng-content select=\".page-header-center\"></ng-content>\n        </div>\n\n        <div class=\"ui-g-12 ui-md-4 navbar-right\">\n        <span *ngIf=\"userName\">\n            <img id=\"userProfilePicture\" class=\"profile-logo\" aria-hidden=\"true\"\n                 [title]=\"userName\" src=\"{{assetFolder}}/images/default_image_small.png\">\n            <span class=\"profile-user\" title=\"{{userName}}\">{{userName}}</span>\n        </span>\n\n            <span *ngIf=\"!hideNotification\" class=\"notification-container\">\n\n            <i #notificationIcon class=\"ariba-icon icon-notification\"\n               (click)=\"toggleNotificationPanel()\"></i>\n            <span *ngIf=\"hasNotifications()\" class=\"notification-badge\" aria-hidden=\"true\">{{notifications.length}}</span>\n\n                <!-- Originally I was using p-overlay-panel, however, it doesn't position correctly under the notification icon.\n                     The positioning logic in prime ng needs some more investigation. So for now, use a div instead-->\n            <div *ngIf=\"showNotificationPanel\" class=\"notification-panel\">\n\n                <div class=\"notification-header\">\n                     Notifications\n                </div>\n\n                <ul class=\"notification-content\">\n                    <li *ngFor=\"let noti of notifications\" class=\"notification-item\">\n                        <a [routerLink]=\"noti.link\">\n                            <span class=\"notification-item-icon\"><i\n                                [ngClass]=\"'sap-icon ' + noti.icon\"></i></span>\n                            {{noti.label}}\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </span>\n        </div>\n\n\n    </div>\n</nav>\n",
                    styles: [".page-header i{font-size:32px}.page-header .icon-paging{font-size:30px;position:relative;top:2px}.back-action{display:inline-block;margin-left:15px}.back-action i{position:relative;top:3px}.navbar{background:#000;color:#fff}.navbar-left{padding-left:15px;height:50px}.navbar-center{text-align:center;height:50px}.navbar-right{text-align:right;height:50px}.profile-logo{width:30px;height:30px;position:relative;top:2px}.profile-user{vertical-align:super;margin-right:30px}.icon-notification:before{content:\"\\eA14\"}.navbar #sidebar-menu-icon{position:relative;top:.5em}.notification-container{position:relative;margin-right:20px;display:inline-block}.notification-badge{display:inline-block;padding:2px 5px;font-size:12px;font-weight:700;color:#fff;background-color:#c00;border-radius:10px;position:absolute;top:0;left:16px}.notification-panel{position:absolute;right:-27px;top:45px;width:350px;color:#767676;box-shadow:0 2px 10px 0 rgba(0,0,0,.13);background-color:#fff;overflow:hidden;transition:all .3s ease-in-out}.notification-panel .notification-header{background-color:#f3f3f3;font-size:16px;height:50px;line-height:50px;text-align:center}.notification-panel .notification-content{padding:0;margin:0}.notification-panel .notification-item{height:50px;border-top:1px solid #d7d7d7;padding:15px 10px;white-space:nowrap;text-overflow:ellipsis}.notification-panel .notification-item a{color:#767676;text-decoration:none;line-height:35px}.notification-panel .notification-item:hover{background-color:#f7f8fa}.notification-panel .notification-item-icon{margin-right:15px;color:#767676;display:inline-block;margin-top:10px;vertical-align:middle}"]
                },] },
    ];
    /** @nocollapse */
    PageHeaderComponent.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["RoutingService"] }
    ]; };
    PageHeaderComponent.propDecorators = {
        menuItems: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        notifications: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        hideNotification: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        showBackAction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        userName: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        sidenav: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['sidemenu',] }]
    };
    return PageHeaderComponent;
}(BaseComponent));
/**
 * PageMenuItem represents an item in the page menu structure.
 */
var  /**
 * PageMenuItem represents an item in the page menu structure.
 */
PageMenuItem = /** @class */ (function () {
    /**
     * @param icon    - Icon of this menu item.
     * @param label   - label of this item.
     * @param link    - link to the destination when user clicks on it.
     */
    function PageMenuItem(icon, label, link) {
        this.icon = icon;
        this.label = label;
        this.link = link;
    }
    /**
     * @return {?}
     */
    PageMenuItem.prototype.toString = /**
     * @return {?}
     */
    function () {
        return "PageMenuItem: (label, " + this.label + ")";
    };
    return PageMenuItem;
}());
/**
 * notification for the current logged in user.
 * Ex:  PR2049 has been approved.
 *      Order PO518 received.
 */
var  /**
 * notification for the current logged in user.
 * Ex:  PR2049 has been approved.
 *      Order PO518 received.
 */
UserNotification = /** @class */ (function () {
    /**
     * @param icon   - alert notification icon
     * @param label  - alert notification label
     * @param link   - link
     */
    function UserNotification(icon, label, link) {
        this.icon = icon;
        this.label = label;
        this.link = link;
    }
    /**
     * @return {?}
     */
    UserNotification.prototype.toString = /**
     * @return {?}
     */
    function () {
        return "PageUserNotification: (label, " + this.label + ")";
    };
    return UserNotification;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Footer component that implements consistent styling, behavior.
 * This footer component self contained.
 *
 * \@Component({
 *    selector: 'registration' ,
 *    template: `
 *
 *          <aw-page-footer>
 *               <div class="page-footer-logo">
 *                   <img src="images/ariba_logo_white_bkgd.png">
 *               </div>
 *               <div class="page-footer-user-info">
 *                   Chad Noll (cnoll) last visit {{last_visited | date:'MM/dd/yyyy h:mma' }}
 *                   | Buyer Organization
 *               </div>
 *               <span class="page-footer-copyright" #copyright>
 *                   <p>© 2020–2028 The Future, Inc. All rights reserved</p>
 *               </span>
 *           </aw-page-footer>
 *    `
 *    })
 *    export class MyPage
 *    {
 *        constructor ()
 *        {
 *        }
 *
 *    }
 */
var PageFooterComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(PageFooterComponent, _super);
    function PageFooterComponent(element, env) {
        var _this = _super.call(this, env) || this;
        _this.element = element;
        _this.env = env;
        /**
         * show default copyright. If copyright is passed in, then show the passed in one.
         */
        _this.showDefaultCopyright = true;
        return _this;
    }
    /**
     * @return {?}
     */
    PageFooterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * @return {?}
     */
    PageFooterComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.showDefaultCopyright = !Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.copyright);
    };
    PageFooterComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-page-footer',
                    template: "<div class=\"page-footer\">\n    <div class=\"ui-g\">\n        <div class=\"ui-g-12 ui-md-8\">\n\n            <ng-content select=\".page-footer-logo\"></ng-content>\n\n            <div class=\"user-info\">\n                <ng-content select=\".page-footer-user-info\"></ng-content>\n            </div>\n\n            <ul class=\"footer-links\">\n                <li role=\"presentation\"><a href=\"http://www.ariba.com/legal/ariba_tou.cfm\">Terms of\n                    Use</a></li>\n                <li role=\"presentation\"><a\n                    href=\"http://www.ariba.com/legal/ariba_security_policy.cfm\">Security\n                    Disclosure</a></li>\n                <li role=\"presentation\"><a\n                    href=\"http://www.ariba.com/legal/ariba_privacy_statement.cfm\">Privacy\n                    Statement</a></li>\n                <li role=\"presentation\"><a\n                    href=\"http://www.ariba.com/legal/ariba-privacy-statement\">Cookie Statement</a>\n                </li>\n                <li role=\"presentation\"><a\n                    href=\"http://www.ariba.com/legal/ariba-privacy-statement\">Participant\n                    Statement</a></li>\n            </ul>\n        </div>\n\n        <div class=\"ui-g-12 ui-md-4\">\n            <div class=\"u-bottom-align\"></div>\n            <div class=\"u-hright copyright\">\n                <ng-content select=\".page-footer-copyright\"></ng-content>\n            </div>\n\n            <!-- Default Copyright -->\n            <div *ngIf=\"showDefaultCopyright\" class=\"u-hright copyright\">\n                <p>\u00A9 1996\u20132017 Ariba, Inc. All rights reserved</p>\n            </div>\n\n        </div>\n    </div>\n</div>\n",
                    styles: [".page-footer{background:#fff;padding:15px 0 0;font-size:11px;border-top:1px solid #d7d7d7}.page-footer .user-info{color:#ccc}.page-footer .ui-g{margin:0 auto}.page-footer .copyright{color:#ccc}.footer-links{list-style:none;margin:0 -15px;padding:0;font-size:10px}.footer-links li{float:left}.footer-links:after,.footer-links:before{content:\" \";display:table}.footer-links:after{clear:both}.footer-links>li,.footer-links>li>a{position:relative;display:block}.footer-links>li>a{padding:10px 15px;color:#199de0}"]
                },] },
    ];
    /** @nocollapse */
    PageFooterComponent.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] }
    ]; };
    PageFooterComponent.propDecorators = {
        copyright: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: ['copyright',] }]
    };
    return PageFooterComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *
 * Object Page Wrapper Component renders any object instance in detail. It has a uniform layout,
 * Header, Page title, Page notification, actions, content, and Footer.
 *
 *
 *  Usage:
 *
 * \@Component({
 *    selector: 'RFXPage' ,
 *    template: `
 *       <aw-object-page-wrapper
 *                        [title]="rfxEntity.headerInfo.title"
 *                        [objectType]="rfxEntity.headerInfo.eventTypeString"
 *                        [notification]="pageNotification">
 *
 *
 *           <aw-page-actions>
 *               <aw-button [type]="'submit'" [name]="'edit'" [value]="edit" [style]="'primary'">
 *                   Edit
 *                </aw-button>
 *               <aw-button [type]="'button'" [name]="'cancel'" [value]="cancel"
 *                                                         [style]="'secondary'">
 *                  Cancel
 *               </aw-button>
 *           </aw-page-actions>
 *
 *           <aw-page-content>
 *             <aw-section title="Sourcing request info" (onStateChanged)="onStateChange($event)">
 *
 *                   <m-context [object]="rfxEntity.headerInfo"
 *                              [operation]="this.editabilityState.headerInfoOp"
 *                              layout="Inspect"
 *                              uiGroup="HeaderGeneral"
 *                   >
 *                       <m-include-component></m-include-component>
 *                   </m-context>
 *
 *             </aw-section>
 *           </aw-page-content>
 *       </aw-object-page-wrapper>
 *    `
 *    })
 *    export class RFXPage
 *    {
 *       // To keep track what section is editable and which read only
 *       editabilityState: EditabilityState;
 *
 *       // Current RFX event
 *       rfxEntity: RfxEventEntity;
 *
 *       // Notifications
 *       notification: PageNotification = new PageNotification("warn",
 *                              "Policy Warning", "This request requires 3 bids.");
 *
 *        constructor ()
 *        {
 *        }
 *
 *    }
 */
var ObjectPageWrapperComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(ObjectPageWrapperComponent, _super);
    function ObjectPageWrapperComponent(element, env, componentRegistry, pageLifecycleService) {
        var _this = _super.call(this, env, PageType.Object, componentRegistry, pageLifecycleService) || this;
        _this.element = element;
        _this.env = env;
        /**
         * Set true if page should not include any header. Need to set to true even no header
         * object is passed in. Otherwise, a default Header component will be added.
         */
        _this.hideHeader = false;
        /**
         * Set true if page should not include any footer. Need to set to true even no footer
         * object is passed in. Otherwise, a default Footer component will be added.
         */
        _this.hideFooter = false;
        /**
         * The positioning of the page actions (page buttons)
         *   'top' :    page buttons are placed at the top of the page, below the title, to the right.
         *   'bottom' : page buttons are placed at the bottom of the page, above the footer.
         *   'both'   : page buttons are placed at both top and bottom.
         *
         */
        _this.pageActionPosition = 'top';
        /**
         * This flag is driven by pageActionPosition. The default position is top.
         * Value is true for both 'top' and 'both' of pageActionPosition.
         */
        _this.hasTopPageActions = true;
        _this.objectStateIndex = 0;
        // Setting Default header component
        // Setting Default header component
        _this.header = PageHeaderComponent;
        _this.footer = PageFooterComponent;
        return _this;
    }
    /**
     * Generate a unique Id for this object.
     *
     */
    /**
     * Generate a unique Id for this object.
     *
     * @return {?}
     */
    ObjectPageWrapperComponent.prototype.generatePageId = /**
     * Generate a unique Id for this object.
     *
     * @return {?}
     */
    function () {
        return this.objectType + '_' + this.title + (this.id) ? ('_' + this.id) : '';
    };
    /**
     * Does my page have page notification?
     *
     */
    /**
     * Does my page have page notification?
     *
     * @return {?}
     */
    ObjectPageWrapperComponent.prototype.hasNotifications = /**
     * Does my page have page notification?
     *
     * @return {?}
     */
    function () {
        return (this.notifications && this.notifications.length > 0);
    };
    /**
     * @return {?}
     */
    ObjectPageWrapperComponent.prototype.hasObjectStates = /**
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.objectStates);
    };
    /**
     * Initialize my local components
     */
    /**
     * Initialize my local components
     * @return {?}
     */
    ObjectPageWrapperComponent.prototype.ngOnInit = /**
     * Initialize my local components
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        // New Component types that are used in c-include-component
        if (this.header) {
            this.componentRegistry.registerType(this.header.name, this.header);
        }
        // New Component types that are used in c-include-component
        if (this.footer) {
            this.componentRegistry.registerType(this.footer.name, this.footer);
        }
        /** notify subscribers of the page lifecycle service  */
        this.pageLifecycleService.onPageInit(this.title);
        // Setting the page action position.
        if (this.pageActionPosition === 'bottom') {
            this.hasTopPageActions = false;
            this.hasBottomPageActions = true;
        }
        else if (this.pageActionPosition === 'both') {
            this.hasTopPageActions = true;
            this.hasBottomPageActions = true;
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.objectStates) && this.objectStates.length > 1
            && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.currentState)) {
            this.objectStateIndex = this.objectStates.indexOf(this.currentState);
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ObjectPageWrapperComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        _super.prototype.ngOnChanges.call(this, changes);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(changes['currentState']) &&
            changes['currentState'].currentValue !== changes['currentState'].previousValue) {
            // we dont need to check if objectStates exists
            this.objectStateIndex = this.objectStates.indexOf(this.currentState);
        }
    };
    /**
     * @return {?}
     */
    ObjectPageWrapperComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.pageLifecycleService.onPageDestroy(this.title);
    };
    ObjectPageWrapperComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-object-page-wrapper',
                    template: "<div class=\"page-wrapper\">\n    <ng-template [ngIf]=\"!hideHeader\">\n        <aw-include-component [name]='header.name'></aw-include-component>\n    </ng-template>\n\n    <div class=\"arc-object-detail\">\n\n        <div class=\"ui-g\">\n\n            <!-- page header -->\n            <div class=\"ui-g-12 page-title\">\n\n                <!-- page title -->\n                <div class=\"ui-g-8 ui-md-8 page-title-text\">{{title}}</div>\n\n                <div class=\"ui-g-4 ui-md-4 page-status\">\n                    <span class=\"object-status-label\">{{objectStatusLabel}} &nbsp;</span>\n                    <span class=\"object-status\">{{objectStatus}}</span>\n                </div>\n            </div>\n\n            <!-- page actions -->\n            <div class=\"ui-g-12 page-actions\" *ngIf=\"hasTopPageActions\">\n                <ng-template [embeddedItem]=\"actionsTemplate\"\n                             *ngIf=\"hasTopPageActions\"></ng-template>\n            </div>\n\n            <!-- object states  displays only if state exists. -->\n            <div class=\"ui-g-12 page-state\">\n                <div class=\"ui-g-3 page-state-left\" [class.content]=\"hasObjectStates()\">\n                    <ng-content select=\".page-state-left\"></ng-content>\n                </div>\n                <div class=\"ui-g-6 page-state-center\">\n                    <ng-container *ngIf=\"hasObjectStates()\">\n                        <aw-stepper [steps]=\"objectStates\"\n                                    [currentStep]=\"objectStateIndex\"></aw-stepper>\n                    </ng-container>\n                </div>\n                <div class=\"ui-g-3 page-state-right\">\n                    <ng-content select=\".page-state-right\"></ng-content>\n                </div>\n            </div>\n\n\n            <!-- Page Notification -->\n            <ng-template [ngIf]=\"hasNotifications()\">\n                <div class=\"ui-g-12 u-nopadding\">\n\n                    <aw-page-notification *ngFor=\"let notification of notifications\"\n                                          [notification]=\"notification\"></aw-page-notification>\n                </div>\n            </ng-template>\n\n            <!-- additional content -->\n            <ng-content select=\"aw-page-content\"></ng-content>\n\n        </div>\n\n    </div>\n\n    <!-- page actions -->\n    <div class=\"ui-g-12 page-actions-bottom\" *ngIf=\"hasBottomPageActions\">\n        <ng-template [embeddedItem]=\"actionsTemplate\"\n                     *ngIf=\"hasBottomPageActions\"></ng-template>\n\n    </div>\n\n    <div class=\"page-push\"></div>\n</div>\n\n<ng-template [ngIf]=\"!hideFooter\">\n    <aw-include-component [name]='footer.name'></aw-include-component>\n</ng-template>\n",
                    styles: [".page-wrapper{background-color:#f2f2f2;min-height:100%;margin-bottom:-100px}.arc-object-detail{padding:20px}.page-title-text{font-size:22px;color:#000;padding:14px 0}.page-title{padding:5px 0;border-bottom:1px solid #d7d7d7}.page-actions{padding:15px 0 5px}.page-actions-bottom{padding:0 20px}.page-state,.page-state-center,.page-state-left,.page-state-right{padding:0}.content::after{content:'\\x000a0';font-size:0}.page-title /deep/ .ui-button{min-width:100px}.page-status{text-align:right;padding:18px 0}.page-status .object-status-label{color:#767676}.page-status .object-status{font-weight:700;color:#038719}.page-push{height:100px}"]
                },] },
    ];
    /** @nocollapse */
    ObjectPageWrapperComponent.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: ComponentRegistry },
        { type: PageLifeCycleService }
    ]; };
    ObjectPageWrapperComponent.propDecorators = {
        title: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        objectType: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        objectStatusLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        objectStatus: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        objectStates: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        currentState: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        header: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        hideHeader: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        footer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        hideFooter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        pageActionPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        actionsTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: ['pageActions',] }],
        notifications: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return ObjectPageWrapperComponent;
}(PageWrapper));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Page actions is a wrapper for all page actions, buttons, links, menus that interacts it with the
 * page. The wrapper use the ability to position it as needed.
 */
var PageActionsComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(PageActionsComponent, _super);
    function PageActionsComponent(element, env) {
        var _this = _super.call(this, env) || this;
        _this.element = element;
        _this.env = env;
        return _this;
    }
    PageActionsComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-page-actions',
                    template: "<div class=\"page-actions\">\n    <ng-content></ng-content>\n</div>\n",
                    styles: [".page-actions{text-align:right;padding-top:0;padding-right:0}"]
                },] },
    ];
    /** @nocollapse */
    PageActionsComponent.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] }
    ]; };
    return PageActionsComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Page content is a wrapper for page content.
 * Currently, it's pretty bare, but as we add more interactions on the page, like a side bar,
 * the page content area will likely get affected.
 */
var PageContentComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(PageContentComponent, _super);
    function PageContentComponent(element, env) {
        var _this = _super.call(this, env) || this;
        _this.element = element;
        _this.env = env;
        return _this;
    }
    PageContentComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-page-content',
                    template: '<ng-content></ng-content>',
                    styles: [':host {width: 100%; padding: 0 .5em;}']
                },] },
    ];
    /** @nocollapse */
    PageContentComponent.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] }
    ]; };
    return PageContentComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ STEPPER_COMPLETED_STEP_COLOR = '#58b957';
var /** @type {?} */ STEPPER_CURRENT_STEP_COLOR = '#0076CB';
var /** @type {?} */ STEPPER_REMAINING_STEP_COLOR = '#D7D7D7';
/**
 * Stepper component displays a list of steps for user to follow. It can be used as a checklist
 * to indicate completed, current and remaining items. It could be also be used to indicate
 * the state of an document, created, submitted, approved, etc...
 *
 *
 * Usage:
 *   1.   Use the component inside your template. provide a list of steps and the current step.
 *
 * \@Component({
 *                selector: 'aw-page' ,
 *                           template: `
 *                <aw-stepper [steps]="steps" [currentStep]="currentStep"></aw-stepper>
 *
 *                  `
 *         export class MyPageComponent implements OnInit {
 *
 *                     steps: string[] = ['Monitor', 'Add Supplier', 'Get Quote'];
 *                     currentStep: number = 1;
 *
 *                     constructor(private modalService: ModalService) {
 *                          super();
 *                       }
 *                     ngOnInit() { }
 *       }
 *
 *   2.  Override the default colors.
 *
 * \@Component({
 *                selector: 'aw-page' ,
 *                           template: `
 *                            <aw-stepper [steps]="steps" [stepColorCurrent]="'#ff9900'"
 *                                        [stepColorRemaining]="'#CC0000'"
 *                                        [stepColorCompleted]="'#97a822'"
 *                                        [currentStep]="currentStep">
 *                            </aw-stepper>
 *                  `
 */
var StepperComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(StepperComponent, _super);
    function StepperComponent(env) {
        var _this = _super.call(this, env) || this;
        _this.env = env;
        /**
         * Local variable to indicate whether to use the colors array or not.
         */
        _this.bUseColorArray = false;
        /**
         * The current step that's on. If not provided default to the first step.
         */
        _this.currentStep = 0;
        // Initial color for the different stages of steps.
        // Initial color for the different stages of steps.
        _this.stepColorCompleted = STEPPER_COMPLETED_STEP_COLOR;
        _this.stepColorCurrent = STEPPER_CURRENT_STEP_COLOR;
        _this.stepColorRemaining = STEPPER_REMAINING_STEP_COLOR;
        return _this;
    }
    /**
     * @return {?}
     */
    StepperComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // Calculate the connector width based on how many steps
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.steps) && this.steps.length > 1) {
            // (100% - 20% (side margins)) / (NumOfSteps -1)
            this.connectorWidth = Math.ceil(80 / (this.steps.length - 1)) + '%';
        }
        /**
                 * Use the color array if it's defined.
                 */
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.colors)) {
            this.bUseColorArray = true;
            if (this.colors.length !== this.steps.length) {
                throw new Error("The size of the steps and colors don't match:\n                  (steps.length = " + this.steps.length + "), (colors.length = " + this.colors.length);
            }
        }
    };
    /**
     * Getting the color of the step for the current index
     *
     * @param index
     */
    /**
     * Getting the color of the step for the current index
     *
     * @param {?} index
     * @return {?}
     */
    StepperComponent.prototype.getStepColor = /**
     * Getting the color of the step for the current index
     *
     * @param {?} index
     * @return {?}
     */
    function (index) {
        // Color Array overrides everything else.
        if (this.bUseColorArray) {
            return this.colors[index];
        }
        if (index < this.currentStep) {
            return this.stepColorCompleted;
        }
        else if (index === this.currentStep) {
            return this.stepColorCurrent;
        }
        else {
            return this.stepColorRemaining;
        }
    };
    /**
     * The connector colors are driven by the step colors.
     *
     */
    /**
     * The connector colors are driven by the step colors.
     *
     * @param {?} index
     * @return {?}
     */
    StepperComponent.prototype.getConnectorColor = /**
     * The connector colors are driven by the step colors.
     *
     * @param {?} index
     * @return {?}
     */
    function (index) {
        // Color Array overrides everything else.
        if (this.bUseColorArray) {
            return this.colors[index];
        }
        if (index < this.currentStep) {
            return this.stepColorCompleted;
        }
        else {
            return this.stepColorRemaining;
        }
    };
    /**
     * Next step.
     */
    /**
     * Next step.
     * @return {?}
     */
    StepperComponent.prototype.nextStep = /**
     * Next step.
     * @return {?}
     */
    function () {
        this.currentStep++;
    };
    /**
     * previous step.
     */
    /**
     * previous step.
     * @return {?}
     */
    StepperComponent.prototype.prevStep = /**
     * previous step.
     * @return {?}
     */
    function () {
        this.currentStep--;
    };
    StepperComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-stepper',
                    template: "<div class=\"stepper-container\">\n    <div class=\"steps\">\n        <div class=\"step-spacing\"></div>\n\n        <ng-container *ngFor=\"let step of steps; let i=index; let last=last;\">\n            <div class=\"step\">\n                <aw-step [title]=\"step\" [color]=\"getStepColor(i)\"></aw-step>\n            </div>\n            <div *ngIf=\"!last\" class=\"step-connector\" [style.width]=\"connectorWidth\">\n                <div class=\"connector\" [style.borderBottomColor]=\"getConnectorColor(i)\"></div>\n            </div>\n        </ng-container>\n\n        <div class=\"step-spacing\"></div>\n    </div>\n\n    <div class=\"step-labels\"></div>\n</div>\n\n\n",
                    styles: [".stepper-container{display:table;table-layout:fixed;width:100%}.steps{display:table-row}.step-spacing{display:table-cell;width:10%}.step{display:table-cell;width:32px}.step-connector{display:table-cell;vertical-align:middle}.connector{height:1px;border-bottom:3px solid #58b957}.step-labels{display:table-row;height:50px}"]
                },] },
    ];
    /** @nocollapse */
    StepperComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] }
    ]; };
    StepperComponent.propDecorators = {
        steps: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        colors: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        stepColorCompleted: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        stepColorCurrent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        stepColorRemaining: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        currentStep: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return StepperComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Renders html step component
 *
 *  * Usage:
 *       Straight forward to use. But mostly it would be used as part of the stepper component.
 *
 * \@Component({
 *                selector: 'aw-page' ,
 *                           template: `
 *                           <aw-step [title]="step" [color]="color"></aw-step>
 *                           `
 */
var /** @type {?} */ DEFAULT_COLOR = '#58b957';
var StepComponent = /** @class */ (function () {
    function StepComponent(env) {
        this.env = env;
    }
    /**
     * @return {?}
     */
    StepComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.color)) {
            this.color = DEFAULT_COLOR;
        }
    };
    StepComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-step',
                    template: "<div class=\"step-container\">\n    <div class=\"outer-circle\" [style.borderColor]=\"color\">\n        <div class=\"inner-circle\" [style.borderColor]=\"color\" [style.backgroundColor]=\"color\"></div>\n    </div>\n\n    <div class=\"step-title\">{{title}}</div>\n</div>\n\n",
                    styles: [".step-container{position:relative;width:32px}.outer-circle{width:26px;height:26px;border-radius:50%;background-color:#fff;border:3px solid #58b957;position:relative}.inner-circle{width:8px;height:8px;border-radius:50%;border:2px solid #58b957;background-color:#58b957;margin:0 auto;position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.step-title{position:absolute;width:150px;top:40px;left:-60px;text-align:center}"]
                },] },
    ];
    /** @nocollapse */
    StepComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] }
    ]; };
    StepComponent.propDecorators = {
        color: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        title: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return StepComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWStepperModule = /** @class */ (function () {
    function AWStepperModule() {
    }
    AWStepperModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        StepComponent,
                        StepperComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        AWCoreComponentModule,
                    ],
                    entryComponents: [
                        StepComponent,
                        StepperComponent
                    ],
                    exports: [
                        StepComponent,
                        StepperComponent
                    ],
                    providers: []
                },] },
    ];
    return AWStepperModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWPageWrapperModule = /** @class */ (function () {
    function AWPageWrapperModule() {
    }
    AWPageWrapperModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        ObjectPageWrapperComponent,
                        PageActionsComponent,
                        PageContentComponent,
                        PageFooterComponent,
                        PageHeaderComponent,
                        SidenavComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        _angular_router__WEBPACK_IMPORTED_MODULE_11__["RouterModule"],
                        AWCoreComponentModule,
                        AWStepperModule,
                        AWPageNotificationModule
                    ],
                    entryComponents: [
                        PageFooterComponent,
                        PageActionsComponent,
                        PageContentComponent,
                        PageHeaderComponent
                    ],
                    exports: [
                        ObjectPageWrapperComponent,
                        PageActionsComponent,
                        PageContentComponent,
                        PageFooterComponent,
                        PageHeaderComponent,
                        SidenavComponent
                    ],
                    providers: [PageLifeCycleService]
                },] },
    ];
    return AWPageWrapperModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {number} */
var EditorType = {
    Default: 0,
    // Default Editor supports Minimal set of functionality
    // [ bold | italic | underline | ordered | bullet | alignment]
    Full: 1,
    // The full list of functionality,
    TextFormat: 2,
    // Functionalities that affects text formatting.
    Custom: 3,
};
EditorType[EditorType.Default] = "Default";
EditorType[EditorType.Full] = "Full";
EditorType[EditorType.TextFormat] = "TextFormat";
EditorType[EditorType.Custom] = "Custom";
var /** @type {?} */ EDITOR_CONTROL_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return RichTextAreaComponent; }),
    multi: true
};
var RichTextAreaComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(RichTextAreaComponent, _super);
    function RichTextAreaComponent(env, parentContainer) {
        var _this = _super.call(this, env, parentContainer) || this;
        _this.env = env;
        _this.parentContainer = parentContainer;
        /**
         * A value used to save and read when rendering and updating this component
         */
        _this.value = '';
        /**
         * Expose editorType so that it can be used in this components template.
         */
        _this.EditorType = EditorType;
        _this.type = EditorType.Default;
        _this.styleClass = 'default-editor';
        return _this;
    }
    /**
     * @return {?}
     */
    RichTextAreaComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        _super.prototype.registerFormControl.call(this, this.value);
        this.formControl.valueChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["distinctUntilChanged"])()).subscribe(function (val) {
            _this.value = val;
            _this.onModelChanged(_this.value);
        });
    };
    /**
     * Internal. Please see ControlValueAccessor
     */
    /**
     * Internal. Please see ControlValueAccessor
     * @param {?} value
     * @return {?}
     */
    RichTextAreaComponent.prototype.writeValue = /**
     * Internal. Please see ControlValueAccessor
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== this.value) {
            this.value = value;
            this.formControl.setValue(value);
        }
    };
    RichTextAreaComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-richtextarea',
                    template: "<ng-template [ngIf]=\"editable\">\n\n    <!-- Basic editor, also the default, which the most used features enabled. -->\n    <div *ngIf=\"type === EditorType.Default\">\n        <p-editor [(ngModel)]=\"value\" [styleClass]=\"styleClass\" [style]=\"{'height':'180px'}\"\n                  [placeholder]=\"placeHolder\">\n            <p-header>\n                    <span class=\"ql-formats\">\n                        <button class=\"ql-bold\" aria-label=\"Bold\"></button>\n                        <button class=\"ql-italic\" aria-label=\"Italic\"></button>\n                        <button class=\"ql-underline\" aria-label=\"Underline\"></button>\n                    </span>\n                <span class=\"ql-formats\">\n                        <button class=\"ql-list\" value=\"ordered\"></button>\n                        <button class=\"ql-list\" value=\"bullet\"></button>\n                    </span>\n                <span class=\"ql-formats\">\n                            <button value=\"left\" selected></button>\n                            <button value=\"center\"></button>\n                            <button value=\"right\"></button>\n                            <button value=\"justify\"></button>\n                    </span>\n            </p-header>\n        </p-editor>\n    </div>\n\n    <!-- Editor with all the features enabled -->\n    <div *ngIf=\"type === EditorType.Full\">\n        <p-editor [(ngModel)]=\"value\" [styleClass]=\"styleClass\" [style]=\"{'height':'180px'}\"\n                  [placeholder]=\"placeHolder\"></p-editor>\n    </div>\n\n    <!-- Editor with all Text formatting  -->\n    <div *ngIf=\"type === EditorType.TextFormat\">\n        <p-editor [(ngModel)]=\"value\" [styleClass]=\"styleClass\" [style]=\"{'height':'180px'}\"\n                  [placeholder]=\"placeHolder\">\n            <p-header>\n            <span class=\"ql-format-group\">\n              <select title=\"Font\" class=\"ql-font\">\n                <option value=\"sans-serif\" selected=\"\">Sans Serif</option>\n                <option value=\"serif\">Serif</option>\n                <option value=\"monospace\">Monospace</option>\n              </select>\n              <select title=\"Size\" class=\"ql-size\">\n                <option value=\"10px\">Small</option>\n                <option value=\"13px\" selected=\"\">Normal</option>\n                <option value=\"18px\">Large</option>\n                <option value=\"32px\">Huge</option>\n              </select>\n            </span>\n                <span class=\"ql-formats\">\n                    <button class=\"ql-bold\" aria-label=\"Bold\"></button>\n                    <button class=\"ql-italic\" aria-label=\"Italic\"></button>\n                    <button class=\"ql-underline\" aria-label=\"Underline\"></button>\n                </span>\n                <span class=\"ql-format-group\">\n              <select title=\"Text Color\" class=\"ql-color\">\n                <option value=\"rgb(0, 0, 0)\" label=\"rgb(0, 0, 0)\" selected=\"\"></option>\n                <option value=\"rgb(230, 0, 0)\" label=\"rgb(230, 0, 0)\"></option>\n                <option value=\"rgb(255, 153, 0)\" label=\"rgb(255, 153, 0)\"></option>\n                <option value=\"rgb(255, 255, 0)\" label=\"rgb(255, 255, 0)\"></option>\n                <option value=\"rgb(0, 138, 0)\" label=\"rgb(0, 138, 0)\"></option>\n                <option value=\"rgb(0, 102, 204)\" label=\"rgb(0, 102, 204)\"></option>\n                <option value=\"rgb(153, 51, 255)\" label=\"rgb(153, 51, 255)\"></option>\n                <option value=\"rgb(255, 255, 255)\" label=\"rgb(255, 255, 255)\"></option>\n                <option value=\"rgb(250, 204, 204)\" label=\"rgb(250, 204, 204)\"></option>\n                <option value=\"rgb(255, 235, 204)\" label=\"rgb(255, 235, 204)\"></option>\n                <option value=\"rgb(255, 255, 204)\" label=\"rgb(255, 255, 204)\"></option>\n                <option value=\"rgb(204, 232, 204)\" label=\"rgb(204, 232, 204)\"></option>\n                <option value=\"rgb(204, 224, 245)\" label=\"rgb(204, 224, 245)\"></option>\n                <option value=\"rgb(235, 214, 255)\" label=\"rgb(235, 214, 255)\"></option>\n                <option value=\"rgb(187, 187, 187)\" label=\"rgb(187, 187, 187)\"></option>\n                <option value=\"rgb(240, 102, 102)\" label=\"rgb(240, 102, 102)\"></option>\n                <option value=\"rgb(255, 194, 102)\" label=\"rgb(255, 194, 102)\"></option>\n                <option value=\"rgb(255, 255, 102)\" label=\"rgb(255, 255, 102)\"></option>\n                <option value=\"rgb(102, 185, 102)\" label=\"rgb(102, 185, 102)\"></option>\n                <option value=\"rgb(102, 163, 224)\" label=\"rgb(102, 163, 224)\"></option>\n                <option value=\"rgb(194, 133, 255)\" label=\"rgb(194, 133, 255)\"></option>\n                <option value=\"rgb(136, 136, 136)\" label=\"rgb(136, 136, 136)\"></option>\n                <option value=\"rgb(161, 0, 0)\" label=\"rgb(161, 0, 0)\"></option>\n                <option value=\"rgb(178, 107, 0)\" label=\"rgb(178, 107, 0)\"></option>\n                <option value=\"rgb(178, 178, 0)\" label=\"rgb(178, 178, 0)\"></option>\n                <option value=\"rgb(0, 97, 0)\" label=\"rgb(0, 97, 0)\"></option>\n                <option value=\"rgb(0, 71, 178)\" label=\"rgb(0, 71, 178)\"></option>\n                <option value=\"rgb(107, 36, 178)\" label=\"rgb(107, 36, 178)\"></option>\n                <option value=\"rgb(68, 68, 68)\" label=\"rgb(68, 68, 68)\"></option>\n                <option value=\"rgb(92, 0, 0)\" label=\"rgb(92, 0, 0)\"></option>\n                <option value=\"rgb(102, 61, 0)\" label=\"rgb(102, 61, 0)\"></option>\n                <option value=\"rgb(102, 102, 0)\" label=\"rgb(102, 102, 0)\"></option>\n                <option value=\"rgb(0, 55, 0)\" label=\"rgb(0, 55, 0)\"></option>\n                <option value=\"rgb(0, 41, 102)\" label=\"rgb(0, 41, 102)\"></option>\n                <option value=\"rgb(61, 20, 102)\" label=\"rgb(61, 20, 102)\"></option>\n              </select>\n              <span class=\"ql-format-separator\"></span>\n              <select title=\"Background Color\" class=\"ql-background\">\n                <option value=\"rgb(0, 0, 0)\" label=\"rgb(0, 0, 0)\"></option>\n                <option value=\"rgb(230, 0, 0)\" label=\"rgb(230, 0, 0)\"></option>\n                <option value=\"rgb(255, 153, 0)\" label=\"rgb(255, 153, 0)\"></option>\n                <option value=\"rgb(255, 255, 0)\" label=\"rgb(255, 255, 0)\"></option>\n                <option value=\"rgb(0, 138, 0)\" label=\"rgb(0, 138, 0)\"></option>\n                <option value=\"rgb(0, 102, 204)\" label=\"rgb(0, 102, 204)\"></option>\n                <option value=\"rgb(153, 51, 255)\" label=\"rgb(153, 51, 255)\"></option>\n                <option value=\"rgb(255, 255, 255)\" label=\"rgb(255, 255, 255)\" selected=\"\"></option>\n                <option value=\"rgb(250, 204, 204)\" label=\"rgb(250, 204, 204)\"></option>\n                <option value=\"rgb(255, 235, 204)\" label=\"rgb(255, 235, 204)\"></option>\n                <option value=\"rgb(255, 255, 204)\" label=\"rgb(255, 255, 204)\"></option>\n                <option value=\"rgb(204, 232, 204)\" label=\"rgb(204, 232, 204)\"></option>\n                <option value=\"rgb(204, 224, 245)\" label=\"rgb(204, 224, 245)\"></option>\n                <option value=\"rgb(235, 214, 255)\" label=\"rgb(235, 214, 255)\"></option>\n                <option value=\"rgb(187, 187, 187)\" label=\"rgb(187, 187, 187)\"></option>\n                <option value=\"rgb(240, 102, 102)\" label=\"rgb(240, 102, 102)\"></option>\n                <option value=\"rgb(255, 194, 102)\" label=\"rgb(255, 194, 102)\"></option>\n                <option value=\"rgb(255, 255, 102)\" label=\"rgb(255, 255, 102)\"></option>\n                <option value=\"rgb(102, 185, 102)\" label=\"rgb(102, 185, 102)\"></option>\n                <option value=\"rgb(102, 163, 224)\" label=\"rgb(102, 163, 224)\"></option>\n                <option value=\"rgb(194, 133, 255)\" label=\"rgb(194, 133, 255)\"></option>\n                <option value=\"rgb(136, 136, 136)\" label=\"rgb(136, 136, 136)\"></option>\n                <option value=\"rgb(161, 0, 0)\" label=\"rgb(161, 0, 0)\"></option>\n                <option value=\"rgb(178, 107, 0)\" label=\"rgb(178, 107, 0)\"></option>\n                <option value=\"rgb(178, 178, 0)\" label=\"rgb(178, 178, 0)\"></option>\n                <option value=\"rgb(0, 97, 0)\" label=\"rgb(0, 97, 0)\"></option>\n                <option value=\"rgb(0, 71, 178)\" label=\"rgb(0, 71, 178)\"></option>\n                <option value=\"rgb(107, 36, 178)\" label=\"rgb(107, 36, 178)\"></option>\n                <option value=\"rgb(68, 68, 68)\" label=\"rgb(68, 68, 68)\"></option>\n                <option value=\"rgb(92, 0, 0)\" label=\"rgb(92, 0, 0)\"></option>\n                <option value=\"rgb(102, 61, 0)\" label=\"rgb(102, 61, 0)\"></option>\n                <option value=\"rgb(102, 102, 0)\" label=\"rgb(102, 102, 0)\"></option>\n                <option value=\"rgb(0, 55, 0)\" label=\"rgb(0, 55, 0)\"></option>\n                <option value=\"rgb(0, 41, 102)\" label=\"rgb(0, 41, 102)\"></option>\n                <option value=\"rgb(61, 20, 102)\" label=\"rgb(61, 20, 102)\"></option>\n              </select>\n            </span>\n                <span class=\"ql-formats\">\n                <button class=\"ql-list\" value=\"ordered\"></button>\n                <button class=\"ql-list\" value=\"bullet\"></button>\n            </span>\n                <span class=\"ql-formats\">\n                    <button value=\"left\" selected></button>\n                    <button value=\"center\"></button>\n                    <button value=\"right\"></button>\n                    <button value=\"justify\"></button>\n            </span>\n            </p-header>\n        </p-editor>\n    </div>\n\n    <!-- Custom header Text Editor -->\n    <div *ngIf=\"type === EditorType.Custom\">\n        <p-editor [(ngModel)]=\"value\" [styleClass]=\"styleClass\" [style]=\"{'height':'180px'}\"\n                  [placeholder]=\"placeHolder\">\n            <p-header>\n                <ng-content select=\"custom-header\"></ng-content>\n            </p-header>\n        </p-editor>\n    </div>\n\n</ng-template>\n\n\n<ng-template [ngIf]=\"!editable\">\n    <aw-string [value]=\"value\"></aw-string>\n</ng-template>\n",
                    styles: ["/deep/ .ui-editor-toolbar{background-color:#f5f5f5;border:1px solid #d7d7d7}/deep/ p-editor:active /deep/ .ui-editor-toolbar.ql-toolbar.ql-snow,/deep/ p-editor:focus /deep/ .ui-editor-toolbar.ql-toolbar.ql-snow,/deep/ p-editor:hover /deep/ .ui-editor-toolbar.ql-toolbar.ql-snow{border-color:#199de0}/deep/ p-editor:active /deep/ .ui-editor-content.ql-container.ql-snow,/deep/ p-editor:focus /deep/ .ui-editor-content.ql-container.ql-snow,/deep/ p-editor:hover /deep/ .ui-editor-content.ql-container.ql-snow{border-color:#199de0}"],
                    providers: [
                        EDITOR_CONTROL_VALUE_ACCESSOR,
                        { provide: BaseFormComponent, useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return RichTextAreaComponent; }) }
                    ]
                },] },
    ];
    /** @nocollapse */
    RichTextAreaComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: BaseFormComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return FormRowComponent; }),] }] }
    ]; };
    RichTextAreaComponent.propDecorators = {
        type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return RichTextAreaComponent;
}(BaseFormComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWRichTextAreaModule = /** @class */ (function () {
    function AWRichTextAreaModule() {
    }
    AWRichTextAreaModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        RichTextAreaComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["EditorModule"],
                        AWStringFieldModule
                    ],
                    entryComponents: [
                        RichTextAreaComponent
                    ],
                    exports: [
                        RichTextAreaComponent,
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"]
                    ],
                    providers: []
                },] },
    ];
    return AWRichTextAreaModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Allow developer to override default actions. Must have this declared before class when we
 * want to have this declaration inside the same file.
 */
var SectionActionsComponent = /** @class */ (function () {
    function SectionActionsComponent() {
    }
    SectionActionsComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-section-actions',
                    template: "<ng-content></ng-content> ",
                },] },
    ];
    return SectionActionsComponent;
}());
/**
 *
 * Section component that implements a section of the page. It's an outline box that
 * has the ability to expand and hide its content.
 *
 * ```ts
 * \@Component({
 *    selector: 'rfx-details' ,
 *    template: `
 *         <aw-section title="Sourcing request info" (onEdit)="onStateChange($event)"
 *                          [editable]="true">
 *
 *                <m-context [object]="rfxEntity.headerInfo"
 *                          [operation]="this.editabilityState.headerInfoOp"
 *                          layout="Inspect"
 *                          uiGroup="HeaderGeneral">
 *                   <m-include-component></m-include-component>
 *               </m-context>
 *           </aw-section>
 *
 *
 *           <aw-section #supplierSection title="Selected suppliers" (onOpen)="onOpen()"
 *                [opened]="false">
 *               <supplier-profile-card></supplier-profile-card>
 *           </aw-section>
 *
 *           <aw-section title="RFQ Details"
 *                       description="Review and update information for suppliers to respond."
 *                       [disableClose]="true">
 *
 *               <aw-subsection title="Event timeline">
 *                   <aw-form-table [useFiveZone]="false" [editable]="true">
 *
 *                       <aw-form-row [label]="'Start Date'" [name]="'startDate'" [size]="'small'"
 *                                   [highlightRow]="true">
 *                           <aw-date-time
 *                               formatName="dateTime"
 *                               name="startDate" [value]="rfxEntity.created"
 *                               [showTime]="true"></aw-date-time>
 *                       </aw-form-row>
 *                   </aw-form-table>
 *               </aw-subsection>
 *          </aw-section>
 *    `
 *    })
 *    export class MyPage
 *    {
 *
 *        constructor ()
 *        {
 *        }
 *
 *    }
 *
 * ```
 *
 * Section component also supports editability modes and if enabled it will render action buttons
 * in the footer. Developer can also override default behavior and provide custom actions.
 *
 *
 * e.g:
 *
 * ```
 *      <aw-section [title]="title" [editable]="true"
 *                          (onCancelAction)="someHandler1($event)"
 *                          (onSaveAction)="someHandler2($event)" >
 *              section content
 *
 *
 *   </aw-section>
 *
 * ```
 *
 * or custom action buttons:
 *
 *
 * ```html
 *
 *       <aw-section-actions>
 *                      <aw-button >
 *                            ButtonTest1
 *                      </aw-button>
 *                      <aw-button>
 *                            ButtonTest2
 *                      </aw-button>
 *     </aw-section-actions>
 *
 * ```
 *
 *
 * There are two edit modes
 *  # Default
 *      Renders action buttons in the footers and emit actions to the application
 *
 *  # External
 *     No action buttons are shown in the footer and behavior is handled by application. Only event
 *     is emited.
 *
 *
 *  e.g:
 *
 *  ```ts
 *
 *      <aw-section title="User Information" (onEdit)="onAddSomething($event)"
 *                  [editable]="true" [editMode]="'external'" >
 *                  <div>
 *                      Content
 *                  </div>
 *      </aw-section>
 *
 *  ```
 *
 * Note: When using editing mode you have to call at the end of the editing cycle method
 * `completeEditing()` to commit editing which changes internal state of the Section.
 *
 *
 *
 */
var SectionComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(SectionComponent, _super);
    function SectionComponent(element, env) {
        var _this = _super.call(this, env) || this;
        _this.element = element;
        _this.env = env;
        /**
         * Should this section be opened at the start. Default is opened.
         */
        _this.opened = true;
        /**
         * Whether this section can be closed or not.
         *
         */
        _this.disableClose = false;
        /**
         * Whether this section is in EditState or not.
         *
         * When in editing state and we show "Cancel / Save" button developer needs use this binding
         * to control the state.
         */
        _this.editState = false;
        /**
         * Current Editing mode. Tells the components if its its default behavior or driven by
         * application using this component.
         *
         * {\@see EditMode}
         *
         */
        _this.editMode = 'default';
        /**
         * Developer can provide custom Edit action icon that will appear in the right top corner
         */
        _this.actionIcon = 'icon-edit';
        /**
         * Event emitted when the section is fully opened.
         */
        _this.onOpen = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Event emitted when the section is fully closed.
         */
        _this.onClose = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Edit state to broadcast state of current section
         */
        _this.onEdit = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * When in editing state and default buttons are rendered on click broadcast Cancel action
         */
        _this.onCancelAction = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * When in editing state and default buttons are rendered on click broadcast Save action
         */
        _this.onSaveAction = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.onEditingComplete = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.editable = false;
        return _this;
    }
    /**
     * @return {?}
     */
    SectionComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        // If I have not header, then I can't close the section.
        if (!this.isHeaderDisplayed()) {
            this.disableClose = true;
        }
        // If I can't close the section, then it should default open.
        if (this.disableClose) {
            this.opened = true;
        }
        // initialize the expanded state.
        this.expanded = this.opened;
    };
    /**
     * Don't display header area if I don't have title and description.
     *
     * @return {?}
     */
    SectionComponent.prototype.isHeaderDisplayed = /**
     * Don't display header area if I don't have title and description.
     *
     * @return {?}
     */
    function () {
        return (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.title) || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.description));
    };
    /**
     * Css Class that control the look and feel for section component.
     */
    /**
     * Css Class that control the look and feel for section component.
     * @return {?}
     */
    SectionComponent.prototype.aClass = /**
     * Css Class that control the look and feel for section component.
     * @return {?}
     */
    function () {
        if (!this.isHeaderDisplayed()) {
            return 'section-no-header';
        }
        return '';
    };
    /**
     * Since we introduced buttons and editState the decision on when to exit editing mode
     * should be on the developer using this component therefore only startEditing
     *
     */
    /**
     * Since we introduced buttons and editState the decision on when to exit editing mode
     * should be on the developer using this component therefore only startEditing
     *
     * @param {?} $event
     * @return {?}
     */
    SectionComponent.prototype.onEditAction = /**
     * Since we introduced buttons and editState the decision on when to exit editing mode
     * should be on the developer using this component therefore only startEditing
     *
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        // when in editing make sure we dont switch state as there can be some Form errors
        // which needs to be handled by developer and only then change the editState
        if (!this.editState) {
            this.editState = !this.editState;
            var /** @type {?} */ state$$1 = (this.editState) ? 'inEdit' : 'notInEdit';
            this.onEdit.emit(state$$1);
            this.open();
        }
        // prevent the original event from bubbling up. Because the edit icon is inside
        // the header. If the click even is bubbled up, this event will cause the section to
        // expand or collapse.
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])($event.event)) {
            $event.event.stopPropagation();
            $event.event.preventDefault();
        }
    };
    /**
     * @return {?}
     */
    SectionComponent.prototype.hasDescription = /**
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.description);
    };
    /**
     * Open this section, if it's already open, will do nothing.
     */
    /**
     * Open this section, if it's already open, will do nothing.
     * @param {?=} event
     * @return {?}
     */
    SectionComponent.prototype.open = /**
     * Open this section, if it's already open, will do nothing.
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        if (!this.expanded) {
            this.accordionTab.toggle(event);
        }
    };
    /**
     * Close this section, if it's already close, will do nothing.
     */
    /**
     * Close this section, if it's already close, will do nothing.
     * @param {?} event
     * @return {?}
     */
    SectionComponent.prototype.close = /**
     * Close this section, if it's already close, will do nothing.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.expanded) {
            this.accordionTab.toggle(event);
        }
    };
    /**
     * Callback to be invoked when accordion is opened
     *
     */
    /**
     * Callback to be invoked when accordion is opened
     *
     * @param {?} event
     * @return {?}
     */
    SectionComponent.prototype.onSectionOpen = /**
     * Callback to be invoked when accordion is opened
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.expanded = true;
        this.onOpen.emit('open');
    };
    /**
     * Callback to be invoked when accordion is closed
     *
     */
    /**
     * Callback to be invoked when accordion is closed
     *
     * @param {?} event
     * @return {?}
     */
    SectionComponent.prototype.onSectionClose = /**
     * Callback to be invoked when accordion is closed
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.expanded = false;
        this.onClose.emit('close');
    };
    /**
     *
     * Tells us if we need to render application defined custom actions
     *
     */
    /**
     *
     * Tells us if we need to render application defined custom actions
     *
     * @return {?}
     */
    SectionComponent.prototype.hasCustomActions = /**
     *
     * Tells us if we need to render application defined custom actions
     *
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.customActions);
    };
    /**
     * Emit the editing state back to non-editable
     */
    /**
     * Emit the editing state back to non-editable
     * @return {?}
     */
    SectionComponent.prototype.completeEditing = /**
     * Emit the editing state back to non-editable
     * @return {?}
     */
    function () {
        this.editState = false;
        this.onEditingComplete.emit(this.editState);
    };
    SectionComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-section',
                    template: "<div class=\"ui-g-12 section-container\"\n     [class.editing]=\"editable && editState && editMode === 'default'\">\n\n    <p-accordion (onOpen)=\"onSectionOpen($event)\" (onClose)=\"onSectionClose($event)\"\n                 [styleClass]=\"aClass()\">\n        <p-accordionTab #accordionTab [selected]=\"opened\" [disabled]=\"disableClose\">\n            <p-header>\n                <!-- title and description -->\n                <div class=\"section-header-container\">\n                    <div class=\"section-title\">{{title}}</div>\n                    <div *ngIf=\"hasDescription()\" class=\"section-description\">{{description}}</div>\n\n                    <!-- actions: Hide when in editing and editMode is default -->\n                    <div *ngIf=\"(editable && !editState && editMode === 'default') ||\n                        (editable && editMode === 'external')\"\n                         class=\"section-actions\">\n                        <aw-hyperlink (action)=\"onEditAction($event)\">\n                            <i class=\"sap-icon section-edit-action\" [ngClass]=\"actionIcon\"></i>\n                        </aw-hyperlink>\n                    </div>\n                </div>\n            </p-header>\n\n            <ng-content></ng-content>\n        </p-accordionTab>\n    </p-accordion>\n    <!--\n        need to put it outside of p-accordion otherwise button will inherit different\n        color scheme\n    -->\n    <div class=\"section-footer-container\" *ngIf=\"editable && editState &&\n            editMode === 'default'\">\n        <div class=\"footer-actions\">\n\n            <ng-template [ngIf]=\"!hasCustomActions()\">\n                <aw-button [style]=\"'secondary'\" size=\"small\"\n                           (action)=\"onCancelAction.emit($event)\">\n                    Cancel\n                </aw-button>\n                <aw-button size=\"small\" (action)=\"onSaveAction.emit($event)\">\n                    Save\n                </aw-button>\n            </ng-template>\n\n            <ng-content select=\"aw-section-actions\"></ng-content>\n        </div>\n    </div>\n</div>\n",
                    styles: [".section-header-container{position:relative}.section-container{margin:10px 0;background-color:#fff;padding:.2em .5em;border:2px dashed transparent}.section-container.editing{border-color:#199de0}.section-container ::ng-deep .ui-accordion-header>a{display:flex}.section-container ::ng-deep .ui-accordion-header>a .ui-accordion-toggle-icon{flex:0 0 30px;padding-top:2px}.section-container ::ng-deep .ui-accordion-header>a p-header{flex:1 0}.section-container /deep/ .ui-accordion-header.ui-state-disabled{opacity:1}.section-title{font-size:1.1em}.section-description{font-size:.9em;padding:.6em 0 .2em}.section-footer-container{margin:1em 2em 0;padding:.8em 0 1.5em .8em;border-top:1px solid #d7d7d7}.section-footer-container .footer-actions{display:inline-block;text-align:right;width:100%}.section-actions{position:absolute;top:0;right:0;z-index:1}.section-actions /deep/ a.link,.section-actions /deep/ a.link:hover{padding:0;text-decoration:none}.section-edit-action{font-size:1.5em;position:relative;padding:.1em 0 .1em .5em;cursor:pointer}.section-edit-action.icon-edit{font-size:1.4em}.section-container /deep/ .ui-accordion-header{color:#363636;border:none;background:#fff!important;padding:0 1em}.section-container /deep/ .ui-accordion-content{border:none;padding:1em 2em}.section-container /deep/ .ui-accordion-header /deep/ a[role=tab]{padding:.75em 0;text-decoration:none}.section-container /deep/ .ui-accordion-header.ui-state-active /deep/ a[role=tab]{border-bottom:1px solid #d7d7d7;color:#363636}.section-container /deep/ .section-no-header /deep/ .ui-accordion-header{height:1px}.section-container /deep/ .section-no-header /deep/ .ui-accordion-header.ui-state-active /deep/ a[role=tab]{border-bottom:none}.section-container /deep/ .section-no-header /deep/ .ui-accordion-header .section-edit-action{cursor:pointer!important}:host /deep/ .ui-accordion-header /deep/ .pi.pi-caret-down,:host /deep/ .ui-accordion-header /deep/ .pi.pi-caret-right{font-family:\"SAP icon fonts\";font-size:1.1em;top:.8em;left:.1em;color:#767676;margin-top:0}:host /deep/ .ui-accordion-header.ui-state-disabled /deep/ .fa,:host /deep/ .ui-accordion-header.ui-state-disabled /deep/ .pi{display:none}:host /deep/ .ui-accordion-header /deep/ .pi.pi-caret-right:before{content:\"\\e1ed\"}:host /deep/ .ui-accordion-header /deep/ .pi.pi-caret-down:before{content:\"\\e1ef\"}"]
                },] },
    ];
    /** @nocollapse */
    SectionComponent.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] }
    ]; };
    SectionComponent.propDecorators = {
        title: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        description: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        opened: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        disableClose: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        editState: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        editMode: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        actionIcon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        onOpen: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        onClose: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        onEdit: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        onCancelAction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        onSaveAction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        onEditingComplete: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        accordionTab: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['accordionTab',] }],
        customActions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [SectionActionsComponent,] }]
    };
    return SectionComponent;
}(BaseComponent));
var SubSectionComponent = /** @class */ (function () {
    function SubSectionComponent() {
    }
    SubSectionComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-subsection',
                    template: "\n                    <h4 class=\"subsection-title\">{{title}}</h4>\n                    <ng-content></ng-content>\n                 ",
                    styles: ['.subsection-title {color: #363636; }']
                },] },
    ];
    SubSectionComponent.propDecorators = {
        title: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return SubSectionComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWSectionModule = /** @class */ (function () {
    function AWSectionModule() {
    }
    AWSectionModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        SectionComponent,
                        SubSectionComponent,
                        SectionActionsComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["AccordionModule"],
                        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["AribaCoreModule"],
                        AWStringFieldModule,
                        AWHyperlinkModule,
                        AWButtonModule,
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["SharedModule"]
                    ],
                    entryComponents: [
                        SectionComponent,
                        SubSectionComponent,
                        SectionActionsComponent
                    ],
                    exports: [
                        SectionComponent,
                        SectionActionsComponent,
                        SubSectionComponent,
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"]
                    ],
                    providers: []
                },] },
    ];
    return AWSectionModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * DTColumn represent single column including header and its body. Each column has its own
 * rendererTemplate which a entry to this component.
 *
 * Keeping this separate from the datatable where DT is not really aware what it is rendering,
 * it allows us more flexibility in terms of different type of column inheriting from this
 * one.. Such as:
 *  DTRowDetail  column
 *  DTSingleSelection column
 *  DTMultiSelection column
 *
 * This way we don't do IF/THEN/ELSE inside the datatable and trying to create different cases.
 *
 *  Then later on this will let us create additional logic for the pivotal layout. Because DT
 *  does know anything about the type of the column so whatever is added to the DT.columns it
 *  will be rendered.
 *
 *
 *  Columns can be also frozen meaning if the content overflows they dont scroll. To make the
 *  column frozen we need to use [frozen] binding and se it to TRUE plus it requires a [width]
 *  binding to be set (in px).
 *  We need this to be able to properly position the second table which is changed to absolute
 *  positioning.
 *
 *
 *
 */
var DTColumn2Component = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(DTColumn2Component, _super);
    function DTColumn2Component(env, domHandler) {
        var _this = _super.call(this, env) || this;
        _this.env = env;
        _this.domHandler = domHandler;
        /**
         *
         * Cell alignment. It inserts regular align attribute to the table cell
         *
         */
        _this.align = 'left';
        /**
         *
         * If false applies dt-is-hidden style that hides the column
         *
         */
        _this.isVisible = true;
        /**
         * Sorting direction
         *
         */
        _this.sortOrdering = 'descending';
        /**
         * Tells the template if whether to render a label
         *
         */
        _this.showColumnLabel = true;
        /**
         *
         * See AWDataTable
         *
         */
        _this.showSubHeader = false;
        /**
         *
         * Used together with cell selectionMode to tell which column is selectable
         *
         */
        _this.selectable = false;
        /**
         * Use globally defined HEADER template for current column
         *
         */
        _this.useGlobalHeader = true;
        /**
         * Use globally defined SubHeader template for current column
         *
         */
        _this.useGlobalSubHeader = true;
        /**
         * Use globally defined body template
         *
         */
        _this.useGlobalBody = true;
        /**
         * Tells if the column is data column  - if it is rendering data or just a label or some
         * control
         *
         * This is important when calculating a column span and we need to know which columns are or
         * will be just for selection controls and which holds data
         */
        _this.isDataColumn = true;
        /**
         * Identifies column that will not scroll horizontally with other columns. Column is
         * frozen.
         *
         * For such columns that are marked as frozen binding [width] is required.
         *
         */
        _this.frozen = false;
        _this.maxWidthPx = 0;
        _this.minWidthPx = 0;
        _this.widthPx = 0;
        _this.widestCell = 0;
        return _this;
    }
    /**
     * @return {?}
     */
    DTColumn2Component.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.key) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.label)) {
            throw new Error('Missing required binding: ' +
                '[key] or [label] bindings must be used at minimum');
        }
        // To be able to position second DT we require [width] to be set as well
        if (this.frozen && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.width)) {
            throw new Error('Missing required binding [width]: ' +
                'when [frozen]=true then [width] binding needs to be specified.');
        }
    };
    /**
     * @return {?}
     */
    DTColumn2Component.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    DTColumn2Component.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // need to deffer this and trigger change detection otherwise I get
        // value was changed after it was checked error
        // setTimeout(() =>
        // {
        // });
    };
    /**
     *
     * When cell selectionMode is enabled this method is triggered when we click on header.
     * It delegates the call to the DT where it toggles currently selected value
     *
     */
    /**
     *
     * When cell selectionMode is enabled this method is triggered when we click on header.
     * It delegates the call to the DT where it toggles currently selected value
     *
     * @param {?} event
     * @param {?} element
     * @return {?}
     */
    DTColumn2Component.prototype.handleHeaderClick = /**
     *
     * When cell selectionMode is enabled this method is triggered when we click on header.
     * It delegates the call to the DT where it toggles currently selected value
     *
     * @param {?} event
     * @param {?} element
     * @return {?}
     */
    function (event, element) {
        if (this.isHeaderSelectable()) {
            this.dt.onHeaderSelectionChange(element, this);
        }
        else if (this.sortable) {
            this.sort(event);
        }
        event.preventDefault();
    };
    /**
     *
     * Todo: Implement our own sorting mechanism once we extract the sorting logic to its component
     *
     */
    /**
     *
     * Todo: Implement our own sorting mechanism once we extract the sorting logic to its component
     *
     * @param {?} event
     * @return {?}
     */
    DTColumn2Component.prototype.sort = /**
     *
     * Todo: Implement our own sorting mechanism once we extract the sorting logic to its component
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.sortable) {
            return;
        }
        var /** @type {?} */ targetNode = event.target;
        if (this.domHandler.hasClass(targetNode, 'dt-u-sortable') ||
            this.domHandler.hasClass(targetNode, 'dt-col-title') ||
            this.domHandler.hasClass(targetNode, 'dt-col-sortable-icon')) {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.dt.sortColumn) && this.dt.sortColumn.key === this.key) {
                this.sortOrder = this.sortOrder * -1;
                this.sortOrdering = this.dt.sortOrderingForNumber(this.sortOrder);
            }
            else {
                this.dt.sortColumn = this;
            }
            this.dt.dataSource.state.sortKey = this.key;
            this.dt.dataSource.state.sortOrder = this.dt.sortOrderingForString(this.sortOrdering);
            this.dt.sortSingle();
        }
        this.dt.updateDataToRender();
    };
    /**
     * Calculated style class based on data
     *
     *
     */
    /**
     * Calculated style class based on data
     *
     *
     * @param {?} item
     * @return {?}
     */
    DTColumn2Component.prototype.dynamicBodyClass = /**
     * Calculated style class based on data
     *
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var /** @type {?} */ dynClass = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.bodyClassFn)
            ? this.bodyClassFn.apply(this.dt.context, [this, item]) : '';
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.bodyStyleClass)) {
            dynClass += ' ' + this.bodyStyleClass;
        }
        else if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.styleClass)) {
            dynClass += ' ' + this.styleClass;
        }
        return dynClass;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    DTColumn2Component.prototype.isRowSelectable = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.dt.isRowSelectable)) {
            return this.dt.isRowSelectable(item);
        }
        return false;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    DTColumn2Component.prototype.isCellSelectable = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.dt.selectionMode === 'cell' && this.isRowSelectable(item) && this.selectable;
    };
    /**
     * @return {?}
     */
    DTColumn2Component.prototype.isHeaderSelectable = /**
     * @return {?}
     */
    function () {
        return this.dt.selectionMode === 'cell' && this.selectable;
    };
    /**
     * @return {?}
     */
    DTColumn2Component.prototype.getSortOrder = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ order = 0;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.dt.sortColumn) && this.key === this.dt.sortColumn.key) {
            order = this.dt.sortColumn.sortOrder;
        }
        return order;
    };
    /**
     * @return {?}
     */
    DTColumn2Component.prototype.isSorted = /**
     * @return {?}
     */
    function () {
        if (!this.sortable) {
            return false;
        }
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.dt.sortColumn) && this.key === this.dt.sortColumn.key;
    };
    /**
     * @param {?} table
     * @return {?}
     */
    DTColumn2Component.prototype.initialize = /**
     * @param {?} table
     * @return {?}
     */
    function (table) {
        this.dt = table;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.dt.initialSortKey) && this.dt.initialSortKey === this.key) {
            this.sortable = true;
            this.sortOrder = this.dt.sortOrderingForString(this.dt.initialSortOrder);
            this.dt.sortColumn = this;
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.bodyTemplate) && this.useGlobalBody) {
            this.bodyTemplate = this.dt.bodyTemplate;
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.headerTemplate) && this.useGlobalHeader) {
            this.headerTemplate = this.dt.headerTemplate;
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.subHeaderTemplate) && this.useGlobalSubHeader) {
            this.subHeaderTemplate = this.dt.subHeaderTemplate;
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.bodyClassFn)) {
            this.bodyClassFn = this.dt.bodyClassFn;
        }
        this.maxWidthPx = this.widthToPx(this.maxWidth);
        this.minWidthPx = this.widthToPx(this.minWidth);
        this.widthPx = this.widthToPx(this.width);
    };
    /**
     * This method is called at the end of the view init cycle from the dt.ngAfterViewChecked.
     *
     * In case we use MaxWidth directive we set new width once for all columsn
     */
    /**
     * This method is called at the end of the view init cycle from the dt.ngAfterViewChecked.
     *
     * In case we use MaxWidth directive we set new width once for all columsn
     * @param {?} myIndex
     * @return {?}
     */
    DTColumn2Component.prototype.postInitialize = /**
     * This method is called at the end of the view init cycle from the dt.ngAfterViewChecked.
     *
     * In case we use MaxWidth directive we set new width once for all columsn
     * @param {?} myIndex
     * @return {?}
     */
    function (myIndex) {
        var _this = this;
        var /** @type {?} */ colIndex = myIndex + 1;
        var /** @type {?} */ table;
        if (this.dt.hasFrozenColumns()) {
            table = (/** @type {?} */ (this.dt)).el
                .nativeElement.querySelector('.dt-body-frozen table');
        }
        else {
            table = (/** @type {?} */ (this.dt)).el.nativeElement.querySelector('table');
        }
        if (this.widestCell > 0) {
            var /** @type {?} */ all = table.querySelectorAll('tr th:nth-child(' + colIndex + '), ' +
                'tr td:nth-child(' + colIndex + ')').forEach(function (node) {
                node.style.width = _this.widestCell + 'px';
            });
        }
    };
    /**
     * You either use this binding directly and say its datacolumn or when there is a [key]
     * biding we know it refers to some field.
     *
     */
    /**
     * You either use this binding directly and say its datacolumn or when there is a [key]
     * biding we know it refers to some field.
     *
     * @return {?}
     */
    DTColumn2Component.prototype.isValueColumn = /**
     * You either use this binding directly and say its datacolumn or when there is a [key]
     * biding we know it refers to some field.
     *
     * @return {?}
     */
    function () {
        return (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.isDataColumn) && _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["BooleanWrapper"].isTrue(this.isDataColumn)) ||
            Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.key);
    };
    /**
     * When we are in outline mode  we need to also indend each selection control accordingly.
     *
     * indent - 1 > only offset with
     * indent
     */
    /**
     * When we are in outline mode  we need to also indend each selection control accordingly.
     *
     * indent - 1 > only offset with
     * indent
     * @param {?} cell
     * @param {?} level
     * @return {?}
     */
    DTColumn2Component.prototype.indentForControl = /**
     * When we are in outline mode  we need to also indend each selection control accordingly.
     *
     * indent - 1 > only offset with
     * indent
     * @param {?} cell
     * @param {?} level
     * @return {?}
     */
    function (cell, level) {
        if (this.dt.isOutline() && level > 0 && cell.offsetWidth > 0
            && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(cell.nextElementSibling)) {
            var /** @type {?} */ outlineNodePadding = parseInt(getComputedStyle(cell.nextElementSibling).paddingLeft) || 0;
            // 1st level is pushed as root
            if (this.dt.pushRootSectionOnNewLine) {
                return (level === 1) ? null : (this.dt.indentationPerLevel * level)
                    - outlineNodePadding;
            }
            else {
                return (this.dt.indentationPerLevel * level) + outlineNodePadding;
            }
        }
        return null;
    };
    /**
     *
     * Internal
     * @param {?} width
     * @return {?}
     */
    DTColumn2Component.prototype.widthToPx = /**
     *
     * Internal
     * @param {?} width
     * @return {?}
     */
    function (width) {
        var /** @type {?} */ px;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(width)) {
            if (width.indexOf('%') > 0) {
                var /** @type {?} */ nonPc = parseFloat(width) / 100;
                px = nonPc * (/** @type {?} */ (this.dt)).el.nativeElement.offsetWidth;
            }
            else {
                px = parseFloat(width);
            }
        }
        return px;
    };
    DTColumn2Component.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-dt-column2',
                    template: "<!--\n    To make it more readable Each Column type has its own rendering template instead of putting\n    all this into datatable as this is more responsibility of the column. And the main goal\n    was try to be modular as possible. When There will be different types of columns\n\n    - Regular DTColumn (current implementation),\n    - SelectionColumn (Single/Multi select) - todo,\n    - DetailRow column, then pivotal collumn to render row/column/detail attributes - todo.\n\n    When implementing new column type you just inherit this DTColumnComponent and provide your\n    own rendering template and DT take care of the rest.\n\n    todo: We have SingleSelect, Multiselect rendering template that is Added programatically\n    todo: We have pivotal rendering template\n\n\n-->\n<ng-template #renderingTemplate let-isHeader let-isSubHeader=\"isSubHeader\" let-column=\"column\"\n             let-dataToRender=\"data\"\n             let-columnIndex=\"columnIndex\"\n             let-rowIndex=\"rowIndex\">\n\n    <ng-template *ngIf=\"isHeader\" [ngTemplateOutlet]=\"colHeader\"\n                 [ngTemplateOutletContext]=\"{$implicit: isSubHeader, columnIndex:columnIndex, data: dataToRender,\n                 rowIndex:rowIndex}\">\n    </ng-template>\n\n    <ng-template *ngIf=\"!isHeader\" [ngTemplateOutlet]=\"colBody\"\n                 [ngTemplateOutletContext]=\"{$implicit: column, data:dataToRender,rowIndex:rowIndex}\">\n    </ng-template>\n</ng-template>\n\n\n<!--\n    Templates for header columns. Here we are rendering two types. Header and Subheader that we\n    usually use here as some kind of summary columns. Not really having summary at the bottom like other\n    DT.\n\n    TH column and their text are usually unselectable and most of these were inherited from\n    original PrimeNg DT even not many things got left after we refactor this but the idea is the\n    same.\n\n    Each cell has its dt-cell-def class that sets default styling like font, background, alignment\n    padding, etcs..\n\n\n-->\n<ng-template #colHeader let-isSubHeader let-columnIndex=\"columnIndex\" let-data=\"data\" let-rowIndex=\"rowIndex\">\n\n    <th #headerCell1 [class]=\"headerStyleClass||styleClass\" *ngIf=\"!isSubHeader\"\n        (click)=\"handleHeaderClick($event, headerCell1)\"\n        [ngClass]=\"{'dt-is-default dt-u-unselectable-text' :true,\n                    'dt-cell-def': dt.selectionMode !== 'cell' || (!dt.isOutline() || !dt.pivotalLayout),\n                    'dt-u-sortable': sortable,\n                    'dt-is-active': isSorted(),\n                    'dt-is-hidden': !isVisible}\"\n        [attr.width]=\"width\"\n        [attr.align]=\"align\"\n        [attr.tabindex]=\"sortable ? 1 : null\"\n        [dtMaxWidth]=\"maxWidthPx\"\n    >\n\n        <ng-template [ngIf]=\"dt.headerFilterTemplate && columnIndex === 0 \">\n            <ng-container *ngTemplateOutlet=\"dt.headerFilterTemplate\">\n            </ng-container>\n        </ng-template>\n        <!--\n            when cell are selectable we need two version where one wrap the cell content in div\n        -->\n        <ng-template [ngIf]=\"isHeaderSelectable()\">\n            <ng-container *ngTemplateOutlet=\"selectableHeaderCell; context: {$implicit: this}\">\n            </ng-container>\n        </ng-template>\n\n\n        <ng-template [ngIf]=\"!isHeaderSelectable()\">\n            <ng-container *ngTemplateOutlet=\"nonSelectableHeaderCell; context: {$implicit: this}\">\n            </ng-container>\n        </ng-template>\n    </th>\n\n    <th #headerCell2 [class]=\"headerStyleClass||styleClass\" *ngIf=\"isSubHeader\"\n        [attr.width]=\"width\"\n        [attr.align]=\"align\"\n        [ngClass]=\"{'dt-is-default dt-cell-def dt-sub-header dt-u-unselectable-text':true}\"\n        [dtMaxWidth]=\"maxWidthPx\">\n\n        <span class=\"dt-col-title\" *ngIf=\"dt.showSubHeader && subHeaderTemplate\">\n            <ng-container *ngTemplateOutlet=\"subHeaderTemplate;\n                    context: {$implicit: this, rowData: data, rowIndex: rowIndex}\">\n            </ng-container>\n        </span>\n    </th>\n</ng-template>\n\n\n<!--\n    Template for the body = the TD. For the body and we might want to do the same for header we\n    allow to have calculated body class that comes from the application. So based on the data types\n    you might want to apply different class in order to apply custom styling.\n-->\n<ng-template #colBody let-data=\"data\" let-rowIndex=\"rowIndex\">\n\n    <td #cell [class]=\"dynamicBodyClass(data)\"\n        (click)=\"dt.onCellSelectionChange(cell, this, data)\"\n        [attr.width]=\"width\"\n        [attr.align]=\"align\"\n        [ngClass]=\"{ 'dt-is-default': true,\n        'dt-cell-def': !isCellSelectable(data),\n        'dt-is-hidden': !isVisible}\"\n        [dtMaxWidth]=\"maxWidthPx\"\n        >\n\n        <!--\n            Since we need to support cell selection when we need to draw border around it\n            We are wrapping such sells with div which gives us better flexibility\n        -->\n        <ng-template [ngIf]=\"isCellSelectable(data)\">\n            <ng-container *ngTemplateOutlet=\"selectableBodyCell;\n                        context: {$implicit: this, data: data, rowIndex: rowIndex }\">\n            </ng-container>\n\n        </ng-template>\n\n\n        <ng-template [ngIf]=\"!isCellSelectable(data)\">\n            <ng-container *ngTemplateOutlet=\"nonSelectableBodyCell;\n                        context: {$implicit: this, data: data, rowIndex: rowIndex}\">\n            </ng-container>\n        </ng-template>\n\n    </td>\n</ng-template>\n\n<!--\n    Todo: create better solution instead of using different template create directive that wraps\n    it with the div conditionally\n-->\n<ng-template #selectableHeaderCell let-data=\"data\" let-rowIndex=\"rowIndex\">\n\n    <div class=\"dt-cell-def-selectable\"\n         [ngClass]=\"{'dt-cell-selected': dt.isHeaderSelected(this)}\">\n        <ng-container *ngTemplateOutlet=\"headerCellContent;\n                        context: {$implicit: this, data: data, rowIndex: rowIndex}\">\n        </ng-container>\n    </div>\n</ng-template>\n\n\n<ng-template #nonSelectableHeaderCell let-data=\"data\" let-rowIndex=\"rowIndex\">\n    <ng-container *ngTemplateOutlet=\"headerCellContent;\n                        context: {$implicit: this, data: data, rowIndex: rowIndex}\">\n    </ng-container>\n</ng-template>\n\n\n<ng-template #headerCellContent let-data=\"data\" let-rowIndex=\"rowIndex\">\n    <span class=\"dt-col-title\" *ngIf=\"showColumnLabel && !headerTemplate\">\n                {{label}}\n    </span>\n\n    <span class=\"dt-col-title\" *ngIf=\"showColumnLabel && headerTemplate\">\n                    <ng-container *ngTemplateOutlet=\"headerTemplate;\n                        context: {$implicit: this, rowData: data, rowIndex: rowIndex }\">\n                    </ng-container>\n    </span>\n\n    <span class=\"dt-col-sortable-icon sap-icon icon-sort\" *ngIf=\"sortable\"\n          [ngClass]=\"{'icon-sort-descending': (getSortOrder() == -1),\n                           'icon-sort-ascending': (getSortOrder() == 1)}\">\n    </span>\n</ng-template>\n\n\n<ng-template #selectableBodyCell let-data=\"data\" let-rowIndex=\"rowIndex\">\n    <div class=\"dt-cell-def-selectable\"\n         [ngClass]=\"{'dt-cell-selected': dt.isBodyCellSelected(this, data)}\">\n        <ng-container *ngTemplateOutlet=\"bodyCellContent;\n                        context: {$implicit: this, data: data, rowIndex: rowIndex}\">\n        </ng-container>\n    </div>\n</ng-template>\n\n\n<ng-template #nonSelectableBodyCell let-data=\"data\" let-rowIndex=\"rowIndex\">\n    <ng-container *ngTemplateOutlet=\"bodyCellContent;\n                        context: {$implicit: this, data: data, rowIndex: rowIndex}\">\n    </ng-container>\n</ng-template>\n\n\n<ng-template #bodyCellContent let-data=\"data\" let-rowIndex=\"rowIndex\">\n    <!--\n           when no template is used use our FieldPath to access the object value based on the\n           key binding\n        -->\n    <span class=\"dt-col-cell-data\" *ngIf=\"!bodyTemplate\">\n            {{dt.getValue(data, key)}}\n        </span>\n\n\n    <!--\n        In case application wants to provide their own cell component they use\n        #body ng-template to do so.\n    -->\n    <span class=\"dt-col-cell-data\" *ngIf=\"bodyTemplate\">\n            <ng-container *ngTemplateOutlet=\"bodyTemplate;\n            context: {$implicit: this, rowData: data, rowIndex: rowIndex}\"></ng-container>\n        </span>\n</ng-template>\n",
                    styles: [".dt-sortable-col{cursor:pointer}.dt-col-sortable-icon{display:inline-block;margin-left:.125em}th.dt-cell-def{font-weight:400;color:#4a4a4a}th.dt-is-default{background-color:#f2f2f2;white-space:nowrap}th.dt-is-default.dt-cell-def:not(.dt-sub-header){border-bottom-color:#f2f2f2}th.dt-sub-header{background-color:#fff}th .dt-cell-selected{border-color:#58b957}td .dt-cell-selected{border-left-color:#4f9fcf}.dt-root-section .dt-selection-column,.dt-selection-column{width:46px;padding:0 12px}.dt-pivot-layout td.dt-selection-column,th.dt-selection-column{border-right-color:transparent}thead tr:first-child th{border-top-color:transparent}tbody tr:last-child:not(.dt-drag-row-bottom) td{border-bottom-color:transparent}td:first-child,th:first-child{border-left-color:transparent}td:last-child,th:last-child{border-right-color:transparent}tbody .dt-drag-row-top>td{background:linear-gradient(0deg,#fff 0,#fff 97%,#0271d2 100%)}tbody .dt-drag-row-bottom>td{background:linear-gradient(180deg,#fff 0,#fff 97%,#0271d2 100%)}tbody .dt-drag-row-both>td{background:linear-gradient(0deg,#0271d2 0,#fff 3%,#fff 97%,#0271d2 100%)}tbody .dt-row-dragging>td{background-color:#ececec;color:#b9b9b9}tbody .dt-row-dragging .ui-state-active{opacity:.5;cursor:not-allowed}"],
                    encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                    providers: [primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DomHandler"]]
                },] },
    ];
    /** @nocollapse */
    DTColumn2Component.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DomHandler"] }
    ]; };
    DTColumn2Component.propDecorators = {
        label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        key: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        align: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        bodyClassFn: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        isVisible: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        sortable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        sortOrdering: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        showColumnLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        showSubHeader: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        headerStyleClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        bodyStyleClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        selectable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        useGlobalHeader: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        useGlobalSubHeader: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        useGlobalBody: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        isDataColumn: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        frozen: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        maxWidth: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        minWidth: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        rendererTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['renderingTemplate',] }],
        headerTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: ['header',] }],
        subHeaderTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: ['subHeader',] }],
        bodyTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: ['body',] }]
    };
    return DTColumn2Component;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * An datatable header area.
 *
 * See {\@link DataTableComponent} for more explanation.
 */
var DTHeaderComponent2 = /** @class */ (function () {
    function DTHeaderComponent2() {
    }
    DTHeaderComponent2.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-dt-header2',
                    template: '<ng-content></ng-content>'
                },] },
    ];
    return DTHeaderComponent2;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *
 * Custom column implementation to render detail row spaning its column across whole table width.
 *
 *
 */
var DTDetailRowComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(DTDetailRowComponent, _super);
    function DTDetailRowComponent(env, domHandler) {
        var _this = _super.call(this, env, domHandler) || this;
        _this.env = env;
        _this.domHandler = domHandler;
        /**
         *
         * tells if we need to render a line between item row and its detail
         *
         */
        _this.showRowLine = true;
        return _this;
    }
    /**
     * @return {?}
     */
    DTDetailRowComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // just to get around the check in parent class
        this.key = '';
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * Check if we need to keep some leading TDs
     *
     */
    /**
     * Check if we need to keep some leading TDs
     *
     * @return {?}
     */
    DTDetailRowComponent.prototype.visibleLeadingCols = /**
     * Check if we need to keep some leading TDs
     *
     * @return {?}
     */
    function () {
        return this.dt.numberOfColsBeforeData - (this.dt.hasInvisibleSelectionColumn() ? 1 : 0);
    };
    /**
     *
     * Check if we can show detail row/column using either [isVisible] or [isVisibleFn] bindings.
     * Here can hook on application level custom method to decide if current item has detail row
     * or not
     *
     * Or we can use isVisible=true to tell all row have detail row
     *
     */
    /**
     *
     * Check if we can show detail row/column using either [isVisible] or [isVisibleFn] bindings.
     * Here can hook on application level custom method to decide if current item has detail row
     * or not
     *
     * Or we can use isVisible=true to tell all row have detail row
     *
     * @param {?} item
     * @return {?}
     */
    DTDetailRowComponent.prototype.showDetailRow = /**
     *
     * Check if we can show detail row/column using either [isVisible] or [isVisibleFn] bindings.
     * Here can hook on application level custom method to decide if current item has detail row
     * or not
     *
     * Or we can use isVisible=true to tell all row have detail row
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var /** @type {?} */ isVisible = this.isVisible;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.isVisibleFn)) {
            isVisible = this.isVisibleFn.apply(this.dt.context, [this, item]);
        }
        return isVisible;
    };
    /**
     * @param {?} table
     * @return {?}
     */
    DTDetailRowComponent.prototype.initialize = /**
     * @param {?} table
     * @return {?}
     */
    function (table) {
        _super.prototype.initialize.call(this, table);
        this.isVisible = !this.dt.isOutline() || !this.dt.pivotalLayout;
    };
    DTDetailRowComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-dt-detail-column',
                    template: "<!--\n    Renders application defined detail column. This template just renders a detail row and\n    not expansion control. This is implemented by different DtColumn implementation and its added\n    (will be) added programmatically during column initialization\n-->\n<ng-template #renderingTemplate let-column=\"column\" let-rowData=\"data\">\n\n    <tr #detailRowElement class=\"dt-body-row dt-detail-row\">\n\n        <td *ngIf=\"dt.hasInvisibleSelectionColumn()\" width=\"1px\"></td>\n        <td *ngIf=\"visibleLeadingCols() > 0\" colspan=\"visibleLeadingCols()\" width=\"1px\">\n            &nbsp;&nbsp;\n        </td>\n        <td [attr.colspan]=\"dt.startOfFirstDataColumn\" [class]=\"dynamicBodyClass(rowData)\"\n            [ngClass]=\"{ 'dt-is-default dt-cell-def': true}\">\n\n            <ng-container\n                *ngTemplateOutlet=\"bodyTemplate; context:{$implicit: this, rowData:rowData}\">\n            </ng-container>\n        </td>\n    </tr>\n</ng-template>\n\n",
                    styles: [""],
                    encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                    providers: [primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DomHandler"]]
                },] },
    ];
    /** @nocollapse */
    DTDetailRowComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DomHandler"] }
    ]; };
    DTDetailRowComponent.propDecorators = {
        isVisibleFn: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        showRowLine: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return DTDetailRowComponent;
}(DTColumn2Component));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *
 *
 *
 *
 */
var DTDetailRowExpanderComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(DTDetailRowExpanderComponent, _super);
    function DTDetailRowExpanderComponent(env, domHandler) {
        var _this = _super.call(this, env, domHandler) || this;
        _this.env = env;
        _this.domHandler = domHandler;
        // we dont want to show the row/column unless application says so
        // we dont want to show the row/column unless application says so
        _this.isVisible = false;
        // default width of the selection control
        // default width of the selection control
        _this.width = '45px';
        return _this;
    }
    /**
     * @return {?}
     */
    DTDetailRowExpanderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // just to get around the check in parent class
        this.key = '';
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    DTDetailRowExpanderComponent.prototype.toggleExpansion = /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    function (event, item) {
        this.dt.detailRowExpansionState.toggle(item);
        event.stopPropagation();
    };
    /**
     * @param {?} item
     * @return {?}
     */
    DTDetailRowExpanderComponent.prototype.calculateStyleClass = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.dt.detailRowExpansionState.isExpanded(item) ?
            'icon-slim-arrow-down' : 'icon-slim-arrow-right';
    };
    DTDetailRowExpanderComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-dt-detail-column-expand',
                    template: "<!--\n   Special column that renders expand/collapse control for detail row when detail row is enabled.\n\n   Just like for the other column it renders header section as well as body section with\n   expand control to toggle the expansion\n\n-->\n<ng-template #renderingTemplate let-isHeader let-isSubHeader=\"isSubHeader\" let-column=\"column\"\n             let-dataToRender=\"data\" let-columnIndex=\"columnIndex\" let-rowIndex=\"rowIndex\">\n\n\n    <ng-template [ngIf]=\"isHeader && !isSubHeader\">\n        <th #headerCell1 [class]=\"headerStyleClass||styleClass\"\n            class=\"dt-row-cell-expando\"\n            [ngClass]=\"{'dt-is-default dt-u-unselectable-text dt-cell-def' :true,\n                        'dt-det-row-expanded': dt.detailRowExpansionState.isExpanded(dataToRender)}\">\n        </th>\n\n    </ng-template>\n\n    <ng-template [ngIf]=\"!isHeader && !isSubHeader\">\n        <td #cell\n            class=\"dt-row-cell-expando\"\n            [ngClass]=\"{ 'dt-is-default': true,\n                    'dt-cell-def': !isCellSelectable(dataToRender),\n                    'dt-det-row-expanded': dt.detailRowExpansionState.isExpanded(dataToRender),\n                    'dt-det-row-with-ln' : dt.rowDetailColumn.showRowLine}\">\n\n            <span (click)=\"toggleExpansion($event, dataToRender)\"\n                  class=\"dt-det-row-expand sap-icon\"\n                  [ngClass]=\"calculateStyleClass(dataToRender)\">\n\n            </span>\n\n        </td>\n\n    </ng-template>\n\n\n</ng-template>\n\n",
                    styles: [".dt-row-cell-expando{width:14px;text-align:right;padding:17px 5px 17px 17px;border-right-color:transparent}.dt-row-cell-expando .dt-det-row-expand{cursor:pointer;line-height:21px}td.dt-det-row-expanded:not(.dt-det-row-with-ln),td.dt-det-row-expanded:not(.dt-det-row-with-ln)~td{border-bottom-color:transparent}"],
                    encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                    providers: [primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DomHandler"]]
                },] },
    ];
    /** @nocollapse */
    DTDetailRowExpanderComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DomHandler"] }
    ]; };
    return DTDetailRowExpanderComponent;
}(DTColumn2Component));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *
 * @license
 * Copyright 2017 SAP Ariba
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *
 *
 */
var /** @type {?} */ DragEvents = ['mousedown', 'dragstart', 'dragover', 'dragenter', 'dragleave',
    'drop', 'dragend'];
/** @enum {string} */
var DragDirection = {
    None: 'none',
    Up: 'dt-drag-row-top',
    Down: 'dt-drag-row-bottom',
    Middle: 'dt-drag-row-both',
};
/** @enum {string} */
var DropPosition = {
    Before: 'before',
    After: 'after',
    Into: 'into',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Concrete DataSource implementation for Datatable which defines state and column definition that
 * can programmatically modify rendered columns (if provided) and method for inserting and
 * and deleting records;
 *
 * All operations dealing with data use Observable<T> and instant() method to retrieve current
 * state is not implemented.
 *
 *
 */
var DT2DataSource = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(DT2DataSource, _super);
    function DT2DataSource(dataProviders, finders) {
        var _this = _super.call(this, dataProviders, finders) || this;
        _this.dataProviders = dataProviders;
        _this.finders = finders;
        _this.initialized = false;
        _this.state = Datatable2State.create();
        _this.debugTime = new Date().getTime();
        return _this;
    }
    /**
     * @param {...?} args
     * @return {?}
     */
    DT2DataSource.prototype.init = /**
     * @param {...?} args
     * @return {?}
     */
    function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(args) || args.length !== 1 && !isDTInitParams(args[0])) {
            throw new Error('You need to initialize DS with (DSChooserInitParams)');
        }
        var /** @type {?} */ init = args[0];
        // use existing or find best match for dataProvider
        this.dataProvider = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(init.dataProvider) ? init.dataProvider
            : this.dataProviders.find(init.obj);
        // use existing or find best match for dataFinder
        this.dataFinder = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(init.dataFinder) ? init.dataFinder
            : this.finders.find(this.dataProvider, init.queryType);
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.dataProvider) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.dataFinder), 'DataSource incorrectly initialized. (DataProvider, DataFinder) missing. ');
        this.dataFinder.lookupKey = init.lookupKey;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(init.state)) {
            this.state = new Datatable2State();
        }
        else {
            this.state = init.state;
        }
        this.initialized = true;
    };
    /**
     * Triggers async fetch data request and result is given back using dataProvider.dataChanges
     *
     */
    /**
     * Triggers async fetch data request and result is given back using dataProvider.dataChanges
     *
     * @param {?=} withParams
     * @return {?}
     */
    DT2DataSource.prototype.fetch = /**
     * Triggers async fetch data request and result is given back using dataProvider.dataChanges
     *
     * @param {?=} withParams
     * @return {?}
     */
    function (withParams) {
        var _this = this;
        var /** @type {?} */ params = null;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(withParams)) {
            params = new Map().set('offset', withParams.offset)
                .set('limit', withParams.limit)
                .set('orderby', withParams.sortKey)
                .set('selector', withParams.sortOrder);
        }
        this.dataProvider.fetch(params).subscribe(function (result) {
            if (withParams.offset > 0) {
                var /** @type {?} */ incrData = Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__spread"])(_this.dataProvider.dataChanges.getValue(), result);
                _this.dataProvider.dataChanges.next(incrData);
            }
            else {
                _this.dataProvider.dataChanges.next(result);
            }
        });
    };
    /**
     * Component uses this method to open up continuous stream to listen for any changes which
     * need to be reflected on the UI.
     *
     * Dont forget to unsubscribe when component is destroyed.
     */
    /**
     * Component uses this method to open up continuous stream to listen for any changes which
     * need to be reflected on the UI.
     *
     * Dont forget to unsubscribe when component is destroyed.
     * @template T
     * @return {?}
     */
    DT2DataSource.prototype.open = /**
     * Component uses this method to open up continuous stream to listen for any changes which
     * need to be reflected on the UI.
     *
     * Dont forget to unsubscribe when component is destroyed.
     * @template T
     * @return {?}
     */
    function () {
        return this.dataProvider.dataChanges.asObservable();
    };
    /**
     * @return {?}
     */
    DT2DataSource.prototype.close = /**
     * @return {?}
     */
    function () {
        this.dataProvider = null;
        this.dataFinder = null;
    };
    /**
     * If CRUD is enabled we delegate calls to DataProvider that is responsible to tell the
     * dataProvider.dataChanges that are new data. If not enabled we have default implementation
     * which works with local array
     *
     */
    /**
     * If CRUD is enabled we delegate calls to DataProvider that is responsible to tell the
     * dataProvider.dataChanges that are new data. If not enabled we have default implementation
     * which works with local array
     *
     * @param {?} object
     * @return {?}
     */
    DT2DataSource.prototype.insert = /**
     * If CRUD is enabled we delegate calls to DataProvider that is responsible to tell the
     * dataProvider.dataChanges that are new data. If not enabled we have default implementation
     * which works with local array
     *
     * @param {?} object
     * @return {?}
     */
    function (object) {
        if (this.dataProvider.canCRUD()) {
            this.dataProvider.insert(object);
        }
        else {
            this.dataProvider.offScreenData.push(object);
            this.dataProvider.dataChanges.next(this.dataProvider.offScreenData);
        }
    };
    /**
     * Please see {@link insert} method
     *
     */
    /**
     * Please see {\@link insert} method
     *
     * @param {?} object
     * @return {?}
     */
    DT2DataSource.prototype.remove = /**
     * Please see {\@link insert} method
     *
     * @param {?} object
     * @return {?}
     */
    function (object) {
        if (this.dataProvider.canCRUD()) {
            this.dataProvider.remove(object);
        }
        else {
            _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].removeIfExist(this.dataProvider.offScreenData, object);
            this.dataProvider.dataChanges.next(this.dataProvider.offScreenData);
        }
    };
    /**
     *
     * Provides access to DataFinder which can accept either plain string or Map.
     *
     * To be able to provide correct input we need to ask DataFinder if it supports FullText like
     * type query or Predicate. In case of Predicate we build the Map with different key/value
     * pairs
     *
     *
     */
    /**
     *
     * Provides access to DataFinder which can accept either plain string or Map.
     *
     * To be able to provide correct input we need to ask DataFinder if it supports FullText like
     * type query or Predicate. In case of Predicate we build the Map with different key/value
     * pairs
     *
     *
     * @param {?=} pattern
     * @return {?}
     */
    DT2DataSource.prototype.find = /**
     *
     * Provides access to DataFinder which can accept either plain string or Map.
     *
     * To be able to provide correct input we need to ask DataFinder if it supports FullText like
     * type query or Predicate. In case of Predicate we build the Map with different key/value
     * pairs
     *
     *
     * @param {?=} pattern
     * @return {?}
     */
    function (pattern) {
        var _this = this;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(pattern) || pattern.length === 0) {
            // if we received empty string return orginal list
            this.fetch(this.state);
            return;
        }
        var /** @type {?} */ searchParam = pattern;
        if (this.dataFinder.accepts(this.dataProvider, QueryType.Predicate)) {
            searchParam = new Map().set('query', pattern).set('limit', DT2DataSource.MaxLimit);
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.state.sortKey)) {
                searchParam.set('orderby', this.state.sortKey);
            }
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.state.sortKey)) {
                searchParam.set('selector', this.state.sortOrder);
            }
        }
        else {
            Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isString"])(pattern), 'Cannot pass non-string value to FullText Finder');
        }
        this.dataFinder.match(searchParam).subscribe(function (result) {
            _this.dataProvider.dataChanges.next(result);
        });
    };
    /**
     *
     * Data source delegates the responsibility to the given data provider which needs to implement
     * specific sorting mechanism
     *
     * Todo: Extend to sort by multiple columns
     *
     */
    /**
     *
     * Data source delegates the responsibility to the given data provider which needs to implement
     * specific sorting mechanism
     *
     * Todo: Extend to sort by multiple columns
     *
     * @param {?} key
     * @param {?} sortOrder
     * @return {?}
     */
    DT2DataSource.prototype.sort = /**
     *
     * Data source delegates the responsibility to the given data provider which needs to implement
     * specific sorting mechanism
     *
     * Todo: Extend to sort by multiple columns
     *
     * @param {?} key
     * @param {?} sortOrder
     * @return {?}
     */
    function (key, sortOrder) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.dataProvider.data()) || this.dataProvider.data().length === 0) {
            return;
        }
        this.state.sortKey = key;
        this.state.sortOrder = sortOrder;
        this.fetch(this.state);
    };
    /**
     *
     * Persist db state
     *
     */
    /**
     *
     * Persist db state
     *
     * @param {?} offset
     * @param {?} sortField
     * @param {?} sOrder
     * @return {?}
     */
    DT2DataSource.prototype.updateState = /**
     *
     * Persist db state
     *
     * @param {?} offset
     * @param {?} sortField
     * @param {?} sOrder
     * @return {?}
     */
    function (offset, sortField, sOrder) {
        this.state.offset = offset;
        this.state.sortKey = sortField;
        this.state.sortOrder = sOrder;
    };
    /**
     *
     * reshuffles current array based on new row D&D result.
     *
     * Since there is a difference if we move item from bottom or from the top and then accordingly
     * highlighting a space between rows. We need to reflect this in here as well.
     *
     * UseCase 1:
     *
     * 1. You can grab item with index 0 and move it down so that you can see a dropping line
     * between row with index 2 - 3
     *
     * 2. In this case splice() starts from position 2 and insert all elements after 2
     *      splice(start: number, deleteCount: number, ...items: T[]): T[];
     *
     * 3. no need to update newPos
     *
     * UseCase 2:
     *
     * 1. You can grab item with index 0 and move all the way down of the DT and now move the
     * row toward TOP and space between rows with index 2 - 3 is highlighted again.
     *
     * 2. Here is the difference, before we highlighted row #2 with line at the bottom, now
     * it seems the same but its highlighted row #3 with line at the TOP.
     *
     * * This is the reason whey we need to do newPos -= 1 or newPos += 1; depending our direction
     * where where the line between rows is created.
     *
     *
     * We don't need any complicated calculation trying to find out if we are on one half of the row
     * or second half and based on this try to apply certain style. This would not give so much
     * space if we want drop row into the row. And the calculation with coordinates woudl be too
     * complicated.
     *
     * We simply remember the direction we are moving and based on this we apply style to
     * to create a line at the TOP if we are going upwards or bottom otherwise.
     *
     *
     */
    /**
     *
     * reshuffles current array based on new row D&D result.
     *
     * Since there is a difference if we move item from bottom or from the top and then accordingly
     * highlighting a space between rows. We need to reflect this in here as well.
     *
     * UseCase 1:
     *
     * 1. You can grab item with index 0 and move it down so that you can see a dropping line
     * between row with index 2 - 3
     *
     * 2. In this case splice() starts from position 2 and insert all elements after 2
     *      splice(start: number, deleteCount: number, ...items: T[]): T[];
     *
     * 3. no need to update newPos
     *
     * UseCase 2:
     *
     * 1. You can grab item with index 0 and move all the way down of the DT and now move the
     * row toward TOP and space between rows with index 2 - 3 is highlighted again.
     *
     * 2. Here is the difference, before we highlighted row #2 with line at the bottom, now
     * it seems the same but its highlighted row #3 with line at the TOP.
     *
     * * This is the reason whey we need to do newPos -= 1 or newPos += 1; depending our direction
     * where where the line between rows is created.
     *
     *
     * We don't need any complicated calculation trying to find out if we are on one half of the row
     * or second half and based on this try to apply certain style. This would not give so much
     * space if we want drop row into the row. And the calculation with coordinates woudl be too
     * complicated.
     *
     * We simply remember the direction we are moving and based on this we apply style to
     * to create a line at the TOP if we are going upwards or bottom otherwise.
     *
     *
     * @param {?} origPos
     * @param {?} newPos
     * @param {?} dropPos
     * @return {?}
     */
    DT2DataSource.prototype.reorderRows = /**
     *
     * reshuffles current array based on new row D&D result.
     *
     * Since there is a difference if we move item from bottom or from the top and then accordingly
     * highlighting a space between rows. We need to reflect this in here as well.
     *
     * UseCase 1:
     *
     * 1. You can grab item with index 0 and move it down so that you can see a dropping line
     * between row with index 2 - 3
     *
     * 2. In this case splice() starts from position 2 and insert all elements after 2
     *      splice(start: number, deleteCount: number, ...items: T[]): T[];
     *
     * 3. no need to update newPos
     *
     * UseCase 2:
     *
     * 1. You can grab item with index 0 and move all the way down of the DT and now move the
     * row toward TOP and space between rows with index 2 - 3 is highlighted again.
     *
     * 2. Here is the difference, before we highlighted row #2 with line at the bottom, now
     * it seems the same but its highlighted row #3 with line at the TOP.
     *
     * * This is the reason whey we need to do newPos -= 1 or newPos += 1; depending our direction
     * where where the line between rows is created.
     *
     *
     * We don't need any complicated calculation trying to find out if we are on one half of the row
     * or second half and based on this try to apply certain style. This would not give so much
     * space if we want drop row into the row. And the calculation with coordinates woudl be too
     * complicated.
     *
     * We simply remember the direction we are moving and based on this we apply style to
     * to create a line at the TOP if we are going upwards or bottom otherwise.
     *
     *
     * @param {?} origPos
     * @param {?} newPos
     * @param {?} dropPos
     * @return {?}
     */
    function (origPos, newPos, dropPos) {
        var /** @type {?} */ array = this.dataProvider.data().slice();
        // take something from top and drag&drop under
        if (newPos > origPos && dropPos === DropPosition.Before && newPos < array.length) {
            newPos -= 1;
            // take something from bottom and drag&drop above
        }
        else if (newPos < origPos && dropPos === DropPosition.After && newPos >= 0) {
            newPos += 1;
        }
        array.splice.apply(array, Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__spread"])([newPos, 0], array.splice(origPos, 1)[0]));
        this.dataProvider.dataChanges.next(array);
    };
    DT2DataSource.MaxLimit = 100;
    return DT2DataSource;
}(DataSource));
/**
 * Keeps current datatable state the state which drivers the way while fetching the data as well
 * encapsulate set of properties that needs to be persistet in order to recover a state after e.g.
 * browser refresh
 *
 *
 * todo: Create methods to convert this state from and to JSON for easier serialization
 */
var Datatable2State = /** @class */ (function () {
    function Datatable2State() {
        /**
         * Properties for paging and fetching
         */
        this.offset = 0;
        this.limit = 0;
        /**
         * Identifies default value that is used to render N number of rows in non-fullscreen
         * mode
         *
         */
        this.displayLimit = 0;
        /**
         * Sorting order of the sort field. DataTable support sorting for multiple column but we
         * dont persist it now. Maybe in the future
         */
        this.sortOrder = Datatable2State.Ascending;
        /**
         * If we are using global filter for current datatable then save it here
         */
        this.currentSearchQuery = '';
        this.outlineState = new Map();
        this.detailRowExpandState = new Map();
    }
    /**
     * @param {?=} offset
     * @param {?=} limit
     * @param {?=} displayLimit
     * @param {?=} sortField
     * @param {?=} sOrder
     * @param {?=} searchQuery
     * @param {?=} filter
     * @param {?=} outlineState
     * @param {?=} detailRowState
     * @return {?}
     */
    Datatable2State.create = /**
     * @param {?=} offset
     * @param {?=} limit
     * @param {?=} displayLimit
     * @param {?=} sortField
     * @param {?=} sOrder
     * @param {?=} searchQuery
     * @param {?=} filter
     * @param {?=} outlineState
     * @param {?=} detailRowState
     * @return {?}
     */
    function (offset, limit, displayLimit, sortField, sOrder, searchQuery, filter, outlineState, detailRowState) {
        if (offset === void 0) { offset = 0; }
        if (limit === void 0) { limit = 15; }
        if (displayLimit === void 0) { displayLimit = 5; }
        if (sortField === void 0) { sortField = ''; }
        if (sOrder === void 0) { sOrder = 0; }
        if (outlineState === void 0) { outlineState = new Map(); }
        if (detailRowState === void 0) { detailRowState = new Map(); }
        var /** @type {?} */ s = new Datatable2State();
        s.offset = offset;
        s.limit = limit;
        s.displayLimit = displayLimit;
        s.sortKey = sortField;
        s.sortOrder = sOrder;
        s.currentSearchQuery = searchQuery;
        s.currentFilter = filter;
        s.outlineState = outlineState;
        s.detailRowExpandState = detailRowState;
        return s;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    Datatable2State.fromJSON = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var /** @type {?} */ state$$1 = JSON.parse(data);
        var /** @type {?} */ ds = new Datatable2State();
        ds.offset = state$$1.offset;
        ds.limit = state$$1.limit;
        ds.displayLimit = state$$1.displayLimit;
        ds.sortKey = state$$1.sortKey;
        ds.sortOrder = state$$1.sortOrder;
        ds.currentSearchQuery = state$$1.currentSearchQuery;
        ds.outlineState = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].createFromAnyMap(state$$1.outlineState);
        ds.detailRowExpandState = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].createFromAnyMap(state$$1.detailRowExpandState);
        return ds;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    Datatable2State.toJSON = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var /** @type {?} */ toConvert = {
            offset: data.offset,
            limit: data.limit,
            displayLimit: data.displayLimit,
            sortKey: data.sortKey,
            sortOrder: data.sortOrder,
            currentSearchQuery: data.currentSearchQuery,
            outlineState: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].toAnyMap(data.outlineState),
            detailRowExpandState: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].toAnyMap(data.detailRowExpandState)
        };
        return JSON.stringify(toConvert);
    };
    Datatable2State.Ascending = 1;
    Datatable2State.Descending = -1;
    return Datatable2State;
}());
/**
 * This needs to go to DTDataSource to keep and manage the state of the detail row. The idea is
 * simple we have a map holding item reference as a key and boolean value indicating if the
 * detail row is visible
 *
 * Todo: move this out to DS
 */
var  /**
 * This needs to go to DTDataSource to keep and manage the state of the detail row. The idea is
 * simple we have a map holding item reference as a key and boolean value indicating if the
 * detail row is visible
 *
 * Todo: move this out to DS
 */
DetailRowExpansionState = /** @class */ (function () {
    function DetailRowExpansionState(dt) {
        this.dt = dt;
    }
    Object.defineProperty(DetailRowExpansionState.prototype, "detailExpansionEnabled", {
        get: /**
         * @return {?}
         */
        function () {
            return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.expansionStates);
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this.expansionStates = new Map();
            }
            else {
                this.expansionStates = null;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} item
     * @return {?}
     */
    DetailRowExpansionState.prototype.toggle = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var /** @type {?} */ key = this.itemToKey(item);
        if (!this.isExpanded(item)) {
            this.expansionStates.set(key, true);
        }
        else {
            this.expansionStates.delete(key);
        }
        this.dt.dataSource.state.detailRowExpandState = this.expansionStates;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    DetailRowExpansionState.prototype.isExpanded = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var /** @type {?} */ key = this.itemToKey(item);
        // handle special case where we collapse parent of parent while detail row is expanded
        if (this.dt.isOutline() && !this.dt.outlineState.isExpanded(key)) {
            this.expansionStates.delete(key);
            return false;
        }
        var /** @type {?} */ isOutlineExpanded = this.dt.isOutline() ? this.dt.outlineState.isExpanded(key) : true;
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(key) && this.expansionStates.has(key);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    DetailRowExpansionState.prototype.itemToKey = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isEntity"])(item) ? (/** @type {?} */ (item)).identity() : item;
    };
    return DetailRowExpansionState;
}());
/**
 * @param {?} init
 * @return {?}
 */
function isDTInitParams(init) {
    return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(init.obj) || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(init.queryType) || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(init.entity);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *
 * Column implementation for the Multiselection where we show checkbox control
 *
 *
 */
var DTMultiSelectColumnComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(DTMultiSelectColumnComponent, _super);
    function DTMultiSelectColumnComponent(env, domHandler) {
        var _this = _super.call(this, env, domHandler) || this;
        _this.env = env;
        _this.domHandler = domHandler;
        // default width of the selection control
        // default width of the selection control
        _this.width = '45px';
        return _this;
    }
    DTMultiSelectColumnComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-dt-multi-select-column',
                    template: "<!--\n    Manages multi selection and renders checkboxes both for header in case [showSelectAll] is\n    enabled as well as each checkbox per row\n-->\n<ng-template #renderingTemplate let-isHeader let-isSubHeader=\"isSubHeader\" let-column=\"column\"\n             let-dataToRender=\"data\"\n             let-level=\"nestingLevel\"\n             let-columnIndex=\"columnIndex\"\n             let-rowIndex=\"rowIndex\">\n\n    <ng-template *ngIf=\"isHeader\" [ngTemplateOutlet]=\"colHeader\"\n                 [ngTemplateOutletContext]=\"{$implicit: isSubHeader, columnIndex:columnIndex,\n                 level:level}\">\n    </ng-template>\n\n    <ng-template *ngIf=\"!isHeader\" [ngTemplateOutlet]=\"colBody\"\n                 [ngTemplateOutletContext]=\"{$implicit: column, level:level,\n                    data:dataToRender,rowIndex:rowIndex}\">\n    </ng-template>\n</ng-template>\n\n\n<ng-template #colHeader let-isSubHeader let-columnIndex=\"columnIndex\">\n    <th [ngClass]=\"{'dt-is-default dt-u-unselectable-text dt-selection-column' :true,\n                    'dt-cell-def': true,\n                    'dt-sub-header': isSubHeader,\n                    'dt-is-hidden': !dt.showSelectionColumn}\" align=\"center\">\n\n        <ng-template [ngIf]=\"dt.showSelectAll\">\n            <aw-checkbox [type]=\"'action'\" (action)=\"dt.toggleAllColumns($event)\"\n                         [value]=\"dt.isToggleAllColumnSelected()\"\n                         [disabled]=\"dt.isToggleAllColumnDisabled()\">\n            </aw-checkbox>\n        </ng-template>\n\n        <ng-template [ngIf]=\"!dt.showSelectAll\">&nbsp;\n        </ng-template>\n    </th>\n\n</ng-template>\n\n\n<ng-template #colBody let-data=\"data\" let-rowIndex=\"rowIndex\" , let-level=\"level\">\n\n    <td #cell [class]=\"dynamicBodyClass(data)\"\n        [style.padding-left.px]=\"indentForControl(cell, level)\"\n        align=\"center\"\n        [ngClass]=\"{ 'dt-is-default dt-selection-column': true,\n        'dt-cell-def': true,\n        'dt-is-hidden': !dt.showSelectionColumn}\">\n\n        <aw-checkbox [type]=\"'action'\" [value]=\"dt.isRowSelected(data)\">\n        </aw-checkbox>\n\n    </td>\n</ng-template>\n",
                    styles: [""],
                    encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                    providers: [primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DomHandler"]]
                },] },
    ];
    /** @nocollapse */
    DTMultiSelectColumnComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DomHandler"] }
    ]; };
    return DTMultiSelectColumnComponent;
}(DTColumn2Component));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *
 * Column implementation for the SingleSelect where we show checkbox control
 *
 *
 */
var DTSingleSelectColumnComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(DTSingleSelectColumnComponent, _super);
    function DTSingleSelectColumnComponent(env, domHandler) {
        var _this = _super.call(this, env, domHandler) || this;
        _this.env = env;
        _this.domHandler = domHandler;
        // default width of the selection control
        // default width of the selection control
        _this.width = '45px';
        return _this;
    }
    DTSingleSelectColumnComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-dt-single-select-column',
                    template: "<!--\n    Manages multi selection and renders checkboxes both for header in case [showSelectAll] is\n    enabled as well as each checkbox per row\n-->\n<ng-template #renderingTemplate let-isHeader let-isSubHeader=\"isSubHeader\" let-column=\"column\"\n             let-dataToRender=\"data\"\n             let-level=\"nestingLevel\"\n             let-columnIndex=\"columnIndex\"\n             let-rowIndex=\"rowIndex\">\n\n    <ng-template *ngIf=\"isHeader\" [ngTemplateOutlet]=\"colHeader\"\n                 [ngTemplateOutletContext]=\"{$implicit: isSubHeader, columnIndex:columnIndex,\n                 level:level}\">\n    </ng-template>\n\n    <ng-template *ngIf=\"!isHeader\" [ngTemplateOutlet]=\"colBody\"\n                 [ngTemplateOutletContext]=\"{$implicit: column, level:level,\n                    data:dataToRender,rowIndex:rowIndex}\">\n    </ng-template>\n</ng-template>\n\n\n<ng-template #colHeader let-isSubHeader let-columnIndex=\"columnIndex\">\n    <th [ngClass]=\"{'dt-is-default dt-u-unselectable-text dt-selection-column' :true,\n                    'dt-cell-def': true,\n                    'dt-sub-header': isSubHeader,\n                    'dt-is-hidden': !dt.showSelectionColumn}\" align=\"center\">\n        &nbsp;\n    </th>\n\n</ng-template>\n\n\n<ng-template #colBody let-data=\"data\" let-rowIndex=\"rowIndex\" , let-level=\"level\">\n\n    <td #cell [class]=\"dynamicBodyClass(data)\"\n        [style.padding-left.px]=\"indentForControl(cell, level)\"\n        align=\"center\"\n        [ngClass]=\"{ 'dt-is-default dt-selection-column': true,\n        'dt-cell-def': true,\n        'dt-is-hidden': !dt.showSelectionColumn}\">\n\n        <aw-radiobutton [name]=\"'DTRadio'\" [value]=\"data\" [(ngModel)]=\"dt.dataSource.state.selection\">\n        </aw-radiobutton>\n    </td>\n</ng-template>\n",
                    styles: [""],
                    encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                    providers: [primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DomHandler"]]
                },] },
    ];
    /** @nocollapse */
    DTSingleSelectColumnComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DomHandler"] }
    ]; };
    return DTSingleSelectColumnComponent;
}(DTColumn2Component));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * DT component that implements the data grid that shows tabular data. Even the basic
 * structure is based on PrimeNG datatable its completely refactored into smaller pieces that
 * allows more extensibility and trying to stay as close as possible to existing AWL implementation
 *
 * There are 3 main pieces:
 *
 *  Table Wrapper - focuses on the outer structure. Container with basic datable layout plus
 *  contains any additional panels that datatable needs such as our new concept how editing will
 *  work - sliding panel from the bottom
 *
 *  Datatable Column - Instead of rendering everything inside DT I split the part that renders
 *  column into separate component. This way component column has its own renderer template which
 *  can render both header and data cells.
 *  Later on DTColumn is then extended to support other additional column types
 *  SingleSelectionColumn, MultiSelectionColumn, both responsible for rendering selection controls.
 *
 * To support pivotal layout this can be extended for other additional columns that implements their
 * own rendering templates
 *
 * Datatable - The main component that is only focus on header and body rendering and basaed on the
 * column type it will render the correct template
 * column type it will render the correct template
 *
 *
 *
 *
 *
 */
var Datatable2Component = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(Datatable2Component, _super);
    /**
     *
     * In case of outline table we are inject OutlineState which is provided in the DT component
     * definition. This is used by nested outlineFor component it set itself as reference and
     * initialize the state so it can be used later on inside OutlineControl
     *
     *
     * Each Datatable is pre-defaulted with its own version of DataSource so all the observers
     * inside are unique for this component
     *
     */
    function Datatable2Component(env, el, _defaultDS, changeDetector, factoryResolver, outlineState, zone, injector) {
        var _this = _super.call(this, env) || this;
        _this.env = env;
        _this.el = el;
        _this._defaultDS = _defaultDS;
        _this.changeDetector = changeDetector;
        _this.factoryResolver = factoryResolver;
        _this.outlineState = outlineState;
        _this.zone = zone;
        _this.injector = injector;
        /**
         *  Hides or shows table heading where we have filters and tools menus
         */
        _this.showTableHeader = true;
        /**
         * See AWDataTable
         *
         */
        _this.pivotalLayout = false;
        /**
         * See AWDataTable
         */
        _this.initialSortOrder = 'descending';
        /**
         * When DT is loaded in the page and we are not in the full screen (full page mode), this
         * is hte number of lines that DT will show
         *
         * todo: come up with better name
         */
        _this.displayRowSize = 10;
        /**
         * Used for paging on lazy loading using infinite scroller to set initial fetch limit size
         *
         * todo: come up with better name !!!
         *
         */
        _this.pageSize = 15;
        /**
         * Default message when there are no data .
         *
         * todo: Use i18n value and create resource file
         */
        _this.emptyMessage = 'No records found';
        /**
         *
         * See AWDataTable
         *
         */
        _this.selectionMode = 'none';
        /**
         *
         * Can provide custom icon. These icons are not animated divs, we used css
         * transformation to rotate them.
         *
         */
        _this.loadingIcon = 'icon-synchronize';
        /**
         * Additional indent can be added when rendering detail row
         */
        _this.indentDetailRow = false;
        /**
         * See AWDataTable
         *
         */
        _this.indentationPerLevel = 25;
        /**
         *
         *  SubHeader is used to show summary columns, which in our UX is shown at the top just under
         *  the regular table header
         *
         */
        _this.showSubHeader = false;
        /**
         * See OutlineFor - only used in the tree mode
         */
        _this.expandAll = false;
        /**
         *
         * See OutlineFor  - format - only used in the tree mode
         */
        _this.outlineFormat = 'free';
        /**
         * See AWDataTable
         */
        _this.pushRootSectionOnNewLine = true;
        /**
         * Render or hide expansion control for row detail columns. Expansion control makes sense for
         * simple table, when using this inside outline (tree table), its driven by outline control
         */
        _this.showRowDetailExpansionControl = true;
        /**
         * See AWDataTable
         *
         */
        _this.showSelectionColumn = true;
        /**
         * See AWDataTable
         *
         */
        _this.showSelectAll = true;
        /**
         * Show or hide global search term input field in the header
         */
        _this.showGlobalSearch = true;
        /**
         * Enables or disables row reordering
         *
         */
        _this.dndRowEnabled = false;
        /**
         *
         * Fires event that sorting is enabled for column and we trigger sorting
         *
         */
        _this.onSort = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Based on selection mode it triggers even
         *
         */
        _this.onRowClick = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         *
         * When multi or single selection mode is enabled it will trigger event when checkbox or
         * radio buttons is selected
         *
         * todo: implement SingleSelectionDTColumn, MultiSelectionDTColumn with their renderers
         */
        _this.onRowSelectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * When cell body selection changes we fire event
         *
         */
        _this.onCellChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * When cell header selection changes we fire event
         *
         */
        _this.onHeaderSelection = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         *
         * Triggers when items in the list are updated
         *
         */
        _this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.classList = 'w-datatable ';
        /**
         *  Indicates that columns were initialed Also used when we hide and show column to trigger
         *  change.
         *
         */
        _this.columnsChanged = false;
        /**
         * See AWDataTable
         */
        _this.numberOfColsBeforeData = 0;
        /**
         * See AWDataTable
         */
        _this.startOfFirstDataColumn = 0;
        _this.dataSource = _this._defaultDS;
        return _this;
    }
    Object.defineProperty(Datatable2Component.prototype, "state", {
        /**
         * Pushes a state out to application. Can be use as two way bindings
         *
         * [(state)]=dtState(s)
         *
         */
        get: /**
         * Pushes a state out to application. Can be use as two way bindings
         *
         * [(state)]=dtState(s)
         *
         * @return {?}
         */
        function () {
            return this.dataSource.state;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.dataSource.state = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Datatable2Component.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.list) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.destinationClass)) {
            throw new Error('You cannot use both bindings [list] and [destinationClass]!');
        }
        this.detailRowExpansionState = new DetailRowExpansionState(this);
        // init default columns
        this.rowDetailExpandColumn = this.factoryResolver
            .resolveComponentFactory(DTDetailRowExpanderComponent).create(this.injector).instance;
        this.multiSelectColumn = this.factoryResolver
            .resolveComponentFactory(DTMultiSelectColumnComponent).create(this.injector).instance;
        this.singleSelectColumn = this.factoryResolver
            .resolveComponentFactory(DTSingleSelectColumnComponent).create(this.injector).instance;
        /**
                 * If the data are not deferred and we get list directly then it creates DS. If
                 * ngOnChanges is called first we properly init DS and clean this.list
                 *
                 */
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.destinationClass) || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.list)) {
            this.initDatasource();
        }
        else if (this.dataSource.initialized) {
            this.initDatasource(false);
        }
        // since we work with references let's pass created map inside our state
        this.outlineState.expansionStates = this.state.outlineState;
    };
    /**
     * When data arrives later maybe due to REST API latency, initialize DS only when we have a
     * data, otherwise if data changed thru the bindings just trigger dataChange event
     *
     */
    /**
     * When data arrives later maybe due to REST API latency, initialize DS only when we have a
     * data, otherwise if data changed thru the bindings just trigger dataChange event
     *
     * @param {?} changes
     * @return {?}
     */
    Datatable2Component.prototype.ngOnChanges = /**
     * When data arrives later maybe due to REST API latency, initialize DS only when we have a
     * data, otherwise if data changed thru the bindings just trigger dataChange event
     *
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        _super.prototype.ngOnChanges.call(this, changes);
        if (changes['list'] && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(changes['list'].currentValue)
            && !this.dataSource.initialized) {
            this.initDatasource();
        }
        else if (this.dataSource.initialized) {
            this.dataSource.dataProvider.dataChanges.next(this.list);
        }
    };
    /**
     * @return {?}
     */
    Datatable2Component.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // make sure we init a state when detail column is present
        // todo: move this initialization to datasource
        this.detailRowExpansionState.detailExpansionEnabled = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.rowDetailColumn);
        this.initColumns();
        this.columnsSubscription = this.colsQuery.changes.subscribe(function (_) {
            _this.initColumns();
            _this.changeDetector.markForCheck();
        });
    };
    /**
     * @return {?}
     */
    Datatable2Component.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // assign it programatically as we want to have a context for the filter
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.rowDetailColumn) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.outlineState.outlineFor)) {
            this.outlineState.outlineFor.filterOut = this.skipOutlineItem.bind(this);
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.outlineState.outlineFor)) ;
        this.initialized = true;
    };
    /**
     * @return {?}
     */
    Datatable2Component.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        if (this.columnsChanged && this.el.nativeElement.offsetParent) {
            this.columnsChanged = false;
        }
        if (this.hasFrozenColumns()) {
            this.frozenColumns.forEach(function (col, index) {
                return col.postInitialize(index);
            });
        }
        else {
            this.columns.forEach(function (col, index) {
                return col.postInitialize(index);
            });
        }
    };
    /**
     * Key entry method that initialized our columns. Later on when we will support selection and
     * multiselection we will programmatically instantiate SingleSelection, MultiSelection column
     * components and add them to the list so they can be rendered.
     *
     * so the idea here is:
     *
     * When DT component initialize and we are in editing mode and we support Single/Multi selection
     * we will use ComponentFactoryResolver to create component and add it as first item to the list
     * and then it will be rendered just like anythign else.
     *
     */
    /**
     * Key entry method that initialized our columns. Later on when we will support selection and
     * multiselection we will programmatically instantiate SingleSelection, MultiSelection column
     * components and add them to the list so they can be rendered.
     *
     * so the idea here is:
     *
     * When DT component initialize and we are in editing mode and we support Single/Multi selection
     * we will use ComponentFactoryResolver to create component and add it as first item to the list
     * and then it will be rendered just like anythign else.
     *
     * @return {?}
     */
    Datatable2Component.prototype.initColumns = /**
     * Key entry method that initialized our columns. Later on when we will support selection and
     * multiselection we will programmatically instantiate SingleSelection, MultiSelection column
     * components and add them to the list so they can be rendered.
     *
     * so the idea here is:
     *
     * When DT component initialize and we are in editing mode and we support Single/Multi selection
     * we will use ComponentFactoryResolver to create component and add it as first item to the list
     * and then it will be rendered just like anythign else.
     *
     * @return {?}
     */
    function () {
        var _this = this;
        this.columns = [];
        this.frozenColumns = [];
        if (this.detailRowExpansionState.detailExpansionEnabled) {
            this.initDetailColumnExpansion();
        }
        if (this.hasLeadingSelectColumn() && this.selectionMode === 'multi') {
            this.multiSelectColumn.initialize(this);
            this.columns.push(this.multiSelectColumn);
        }
        else if (this.hasLeadingSelectColumn() && this.selectionMode === 'single') {
            this.singleSelectColumn.initialize(this);
            this.columns.push(this.singleSelectColumn);
        }
        /**
                 * Add expansion column when detail row is enabled
                 */
        if (this.detailRowExpansionState.detailExpansionEnabled && !this.isOutline()) {
            this.rowDetailExpandColumn.initialize(this);
            this.columns.push(this.rowDetailExpandColumn);
        }
        this.colsQuery
            .filter(function (col1) { return !col1.frozen; })
            .forEach(function (col) {
            col.initialize(_this);
            _this.columns.push(col);
        });
        this.initFrozenColumns();
        this.initColumnInfo();
        this.columnsChanged = true;
    };
    /**
     * Check if current column is programmatically created
     *
     */
    /**
     * Check if current column is programmatically created
     *
     * @param {?} col
     * @return {?}
     */
    Datatable2Component.prototype.isInternalColumn = /**
     * Check if current column is programmatically created
     *
     * @param {?} col
     * @return {?}
     */
    function (col) {
        return col instanceof DTSingleSelectColumnComponent ||
            col instanceof DTMultiSelectColumnComponent ||
            col instanceof DTDetailRowExpanderComponent;
    };
    /**
     * Create new Datasource based on passed values. It tries to initialize DS for first time
     * inside the ngInit but in case Data arrives later maybe due to some REST API calls this
     * can be triggered also from ngOnChanges.
     *
     */
    /**
     * Create new Datasource based on passed values. It tries to initialize DS for first time
     * inside the ngInit but in case Data arrives later maybe due to some REST API calls this
     * can be triggered also from ngOnChanges.
     *
     * @param {?=} initialize
     * @return {?}
     */
    Datatable2Component.prototype.initDatasource = /**
     * Create new Datasource based on passed values. It tries to initialize DS for first time
     * inside the ngInit but in case Data arrives later maybe due to some REST API calls this
     * can be triggered also from ngOnChanges.
     *
     * @param {?=} initialize
     * @return {?}
     */
    function (initialize) {
        var _this = this;
        if (initialize === void 0) { initialize = true; }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.state)) {
            this.state = Datatable2State.create(0, this.pageSize, this.displayRowSize, this.initialSortKey, this.sortOrderingForString(this.initialSortOrder));
        }
        else {
            this.state.limit = this.state.displayLimit = this.displayRowSize;
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.initialSortKey)) {
                this.state.sortKey = this.initialSortKey;
                this.state.sortOrder = this.sortOrderingForString(this.initialSortOrder);
            }
        }
        if (initialize) {
            var /** @type {?} */ qType = (this.isOutline() && this.outlineFormat === 'tree') ?
                QueryType.FullTextOutline : QueryType.FullText;
            this.dataSource.init({
                obj: Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.destinationClass) ? this.destinationClass : this.list,
                queryType: qType,
                state: this.state,
                multiselect: false
            });
        }
        this.dataSource.fetch(this.state);
        // reset list to make sure it comes from DataProvider, we use list  to initialize
        this.list = null;
        // This is the ENTRY point for the DATA CHANGES. All addition, edits, deletion ends up
        // here. We dont work directly with LIST. Any change is reactive and here is listener
        this.dataSource.open().subscribe(function (data) {
            _this.updateList(data);
        });
    };
    /**
     * When detailRow column is present we initialize a state holding information which item is
     * expanded.
     *
     * todo: This is temporary here and once we suport lazy loading move this to datasource.
     *
     * For example for outline tree table we need to connect a state from outline with a state in
     * here as we are using outline control to expand and collapse items
     */
    /**
     * When detailRow column is present we initialize a state holding information which item is
     * expanded.
     *
     * todo: This is temporary here and once we suport lazy loading move this to datasource.
     *
     * For example for outline tree table we need to connect a state from outline with a state in
     * here as we are using outline control to expand and collapse items
     * @return {?}
     */
    Datatable2Component.prototype.initDetailColumnExpansion = /**
     * When detailRow column is present we initialize a state holding information which item is
     * expanded.
     *
     * todo: This is temporary here and once we suport lazy loading move this to datasource.
     *
     * For example for outline tree table we need to connect a state from outline with a state in
     * here as we are using outline control to expand and collapse items
     * @return {?}
     */
    function () {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.rowDetailColumn)) {
            this.rowDetailColumn.initialize(this);
        }
        this.detailRowExpansionState.detailExpansionEnabled = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.rowDetailColumn) &&
            _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["BooleanWrapper"].isTrue(this.showRowDetailExpansionControl);
    };
    /**
     * This method is executed after we initialize all the columns in order to calculate correct
     * numbers used for indentation while rendering selection columns as well as detail row columns.
     *
     * Here we need to be aware how many columns to span
     *
     */
    /**
     * This method is executed after we initialize all the columns in order to calculate correct
     * numbers used for indentation while rendering selection columns as well as detail row columns.
     *
     * Here we need to be aware how many columns to span
     *
     * @return {?}
     */
    Datatable2Component.prototype.initColumnInfo = /**
     * This method is executed after we initialize all the columns in order to calculate correct
     * numbers used for indentation while rendering selection columns as well as detail row columns.
     *
     * Here we need to be aware how many columns to span
     *
     * @return {?}
     */
    function () {
        var _this = this;
        this.numberOfColsBeforeData = 0;
        this.columns.forEach(function (col) {
            if (!col.isValueColumn()) {
                _this.numberOfColsBeforeData++;
            }
        });
        if (this.indentDetailRow) {
            this.numberOfColsBeforeData++;
        }
        this.startOfFirstDataColumn = this.columns.length - this.numberOfColsBeforeData;
    };
    /**
     * See AWDataTable
     *
     */
    /**
     * See AWDataTable
     *
     * @param {?} cell
     * @param {?} column
     * @param {?} item
     * @return {?}
     */
    Datatable2Component.prototype.onCellSelectionChange = /**
     * See AWDataTable
     *
     * @param {?} cell
     * @param {?} column
     * @param {?} item
     * @return {?}
     */
    function (cell, column, item) {
        if (this.selectionMode !== 'cell') {
            return;
        }
        var /** @type {?} */ lookupKey = {
            col: column.key || column.label,
            item: item
        };
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.state.selection) && this.state.selection.length > 0) {
            var /** @type {?} */ foundIndex_1 = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].findIndexComplex(this.state.selection, lookupKey);
            var /** @type {?} */ isSelected = foundIndex_1 !== -1;
            if (isSelected) {
                this.state.selection = this.state.selection
                    .filter(function (val, index) { return index !== foundIndex_1; });
            }
            else {
                this.state.selection = Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__spread"])(this.state.selection, [lookupKey]);
            }
        }
        else {
            this.state.selection = [lookupKey];
        }
        this.onCellChange.emit(this.state.selection);
    };
    /**
     * See AWDataTable
     *
     */
    /**
     * See AWDataTable
     *
     * @param {?} cell
     * @param {?} column
     * @return {?}
     */
    Datatable2Component.prototype.onHeaderSelectionChange = /**
     * See AWDataTable
     *
     * @param {?} cell
     * @param {?} column
     * @return {?}
     */
    function (cell, column) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.state.headerSelection)) {
            if (this.isHeaderSelected(column)) {
                this.state.headerSelection = null;
            }
            else {
                this.state.headerSelection = column;
            }
        }
        else {
            this.state.headerSelection = column;
        }
        this.onHeaderSelection.emit(this.state.headerSelection);
    };
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    Datatable2Component.prototype.onHandleRowClicked = /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    function (event, item) {
        // special alt key modifier. When used with rows it indicates there is a D&D enabled
        if (event.altKey) {
            return;
        }
        if (this.selectionMode === 'multi') {
            this.onRowToggle(event, item);
        }
        else if (this.selectionMode === 'single') {
            this.onRowSelect(event, item);
        }
    };
    /**
     * See AWDataTable
     *
     */
    /**
     * See AWDataTable
     *
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    Datatable2Component.prototype.onRowToggle = /**
     * See AWDataTable
     *
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    function (event, item) {
        var /** @type {?} */ rowSelected = true;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.state.selection) && this.state.selection.length > 0) {
            var /** @type {?} */ foundIndex_2 = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].findIndexComplex(this.state.selection, item);
            var /** @type {?} */ isSelected = foundIndex_2 !== -1;
            if (isSelected) {
                this.state.selection = this.state.selection
                    .filter(function (val, index) { return index !== foundIndex_2; });
                rowSelected = false;
            }
            else {
                this.state.selection = Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__spread"])(this.state.selection, [item]);
            }
            // for the outline go up and down the sync with treeitems
            if (this.isOutline()) {
                this.onHandleOutlineRowToggleToChildren(item, isSelected);
                this.oHandleOutlineRowToggleToParent(item, isSelected);
            }
        }
        else {
            this.state.selection = [item];
            if (this.isOutline()) {
                this.onHandleOutlineRowToggleToChildren(item, false);
                this.oHandleOutlineRowToggleToParent(item, false);
            }
        }
        this.onRowSelectionChange.emit({
            isSelected: rowSelected,
            item: this.state.selection
        });
        event.stopPropagation();
    };
    /**
     * See AWDataTable
     *
     */
    /**
     * See AWDataTable
     *
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    Datatable2Component.prototype.onRowSelect = /**
     * See AWDataTable
     *
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    function (event, item) {
        this.state.selection = item;
        event.stopPropagation();
        this.onRowSelectionChange.emit(item);
    };
    /**
     * See AWDataTable
     *
     */
    /**
     * See AWDataTable
     *
     * @param {?} currentItem
     * @param {?} isSelected
     * @return {?}
     */
    Datatable2Component.prototype.onHandleOutlineRowToggleToChildren = /**
     * See AWDataTable
     *
     * @param {?} currentItem
     * @param {?} isSelected
     * @return {?}
     */
    function (currentItem, isSelected) {
        var /** @type {?} */ childrenForNode = this.children.apply(this.context, [currentItem]) || [];
        if (childrenForNode.length > 0) {
            // If is selected currently then toggle to other state
            if (!isSelected) {
                // when checking all from root, deselect children and add all
                this.onHandleOutlineRowToggleToChildren(currentItem, true);
                this.state.selection = Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__spread"])(this.state.selection, childrenForNode);
            }
            else {
                var _loop_1 = function (child) {
                    var /** @type {?} */ foundIndex = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].findIndexComplex(this_1.state.selection, child);
                    this_1.state.selection = this_1.state.selection
                        .filter(function (val, index) { return index !== foundIndex; });
                };
                var this_1 = this;
                try {
                    // remove each child
                    for (var childrenForNode_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__values"])(childrenForNode), childrenForNode_1_1 = childrenForNode_1.next(); !childrenForNode_1_1.done; childrenForNode_1_1 = childrenForNode_1.next()) {
                        var child = childrenForNode_1_1.value;
                        _loop_1(child);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (childrenForNode_1_1 && !childrenForNode_1_1.done && (_a = childrenForNode_1.return)) _a.call(childrenForNode_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            try {
                // apply the same for children of children
                for (var childrenForNode_2 = Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__values"])(childrenForNode), childrenForNode_2_1 = childrenForNode_2.next(); !childrenForNode_2_1.done; childrenForNode_2_1 = childrenForNode_2.next()) {
                    var child = childrenForNode_2_1.value;
                    this.onHandleOutlineRowToggleToChildren(child, isSelected);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (childrenForNode_2_1 && !childrenForNode_2_1.done && (_b = childrenForNode_2.return)) _b.call(childrenForNode_2);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        var e_1, _a, e_2, _b;
    };
    /**
     * See AWDataTable
     *
     */
    /**
     * See AWDataTable
     *
     * @param {?} currentItem
     * @param {?} isSelected
     * @return {?}
     */
    Datatable2Component.prototype.oHandleOutlineRowToggleToParent = /**
     * See AWDataTable
     *
     * @param {?} currentItem
     * @param {?} isSelected
     * @return {?}
     */
    function (currentItem, isSelected) {
        var /** @type {?} */ parent = currentItem.$$parentItem;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(parent)) {
            var /** @type {?} */ childrenForNode = this.children.apply(this.context, [parent]) || [];
            var /** @type {?} */ allSelected = true;
            try {
                for (var childrenForNode_3 = Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__values"])(childrenForNode), childrenForNode_3_1 = childrenForNode_3.next(); !childrenForNode_3_1.done; childrenForNode_3_1 = childrenForNode_3.next()) {
                    var child = childrenForNode_3_1.value;
                    allSelected = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].findIndexComplex(this.state.selection, child) !== -1
                        && allSelected;
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (childrenForNode_3_1 && !childrenForNode_3_1.done && (_a = childrenForNode_3.return)) _a.call(childrenForNode_3);
                }
                finally { if (e_3) throw e_3.error; }
            }
            if (!isSelected) {
                if (allSelected) {
                    this.state.selection.push(parent);
                }
            }
            else {
                if (!allSelected) {
                    var /** @type {?} */ parentIndex_1 = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].findIndexComplex(this.state.selection, parent);
                    this.state.selection = this.state.selection
                        .filter(function (val, index) { return index !== parentIndex_1; });
                }
            }
            this.oHandleOutlineRowToggleToParent(currentItem.$$parentItem, isSelected);
        }
        var e_3, _a;
    };
    /**
     * See AWDataTable
     *
     */
    /**
     * See AWDataTable
     *
     * @param {?} origPos
     * @param {?} newPos
     * @param {?} dropPos
     * @return {?}
     */
    Datatable2Component.prototype.onDnDRowDrop = /**
     * See AWDataTable
     *
     * @param {?} origPos
     * @param {?} newPos
     * @param {?} dropPos
     * @return {?}
     */
    function (origPos, newPos, dropPos) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.dataSource)) {
            // console.log('Dropping row #: ', origPos + ' ' + dropPos + ' row #: ' + newPos);
            this.dataSource.reorderRows(origPos, newPos, dropPos);
        }
    };
    /**
     * See AWDataTable
     *
     */
    /**
     * See AWDataTable
     *
     * @param {?} event
     * @return {?}
     */
    Datatable2Component.prototype.onOutlineExpandChange = /**
     * See AWDataTable
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ item = event.item;
        // We dont really need to store a state form outline locally as we are using the same object
        // reference
        // this.state.outlineState = this.outlineState.expansionStates;
        if (this.canUseForDetailRow(item)) {
            this.detailRowExpansionState.toggle(item);
        }
    };
    /**
     * See AWDataTable
     *
     *
     */
    /**
     * See AWDataTable
     *
     *
     * @return {?}
     */
    Datatable2Component.prototype.sortSingle = /**
     * See AWDataTable
     *
     *
     * @return {?}
     */
    function () {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.list) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.sortColumn)) {
            Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.sortColumn.key), 'Invalid column to sort');
            this.dataSource.sort(this.sortColumn.key, this.sortColumn.sortOrder);
            this.onSort.emit({
                field: this.sortColumn.key,
                order: this.sortColumn.sortOrder
            });
        }
    };
    /**
     * See AWDataTable
     *
     */
    /**
     * See AWDataTable
     *
     * @return {?}
     */
    Datatable2Component.prototype.handleDataChange = /**
     * See AWDataTable
     *
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.state.sortKey || this.sortColumn) {
            if (!this.sortColumn && this.columns) {
                this.sortColumn = this.columns.find(function (col) { return col.key === _this.state.sortKey; });
            }
        }
        this.updateDataToRender();
        this.valueChange.emit(this.list);
    };
    /**
     * @param {?=} datasource
     * @return {?}
     */
    Datatable2Component.prototype.updateDataToRender = /**
     * @param {?=} datasource
     * @return {?}
     */
    function (datasource) {
        this.dataToRender = datasource || this.list;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.children) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.dataToRender)
            && this.dataToRender.length > 0 && isOutlineNode(this.dataToRender[0])) {
            this.outlineFormat = 'tree';
        }
        // this.changeDetector.markForCheck();
        this.changeDetector.detectChanges();
    };
    /**
     * @return {?}
     */
    Datatable2Component.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.sortColumn = null;
        this.updateDataToRender();
    };
    /**
     * See AWDataTable
     */
    /**
     * See AWDataTable
     * @param {?} item
     * @return {?}
     */
    Datatable2Component.prototype.isHeaderSelected = /**
     * See AWDataTable
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.state.headerSelection)) {
            return false;
        }
        var /** @type {?} */ colMatched = item.key || item.label;
        var /** @type {?} */ currentCol = this.state.headerSelection.key || this.state.headerSelection.label;
        return colMatched === currentCol;
    };
    /**
     *
     * See AWDataTable
     *
     */
    /**
     *
     * See AWDataTable
     *
     * @param {?} column
     * @param {?} item
     * @return {?}
     */
    Datatable2Component.prototype.isBodyCellSelected = /**
     *
     * See AWDataTable
     *
     * @param {?} column
     * @param {?} item
     * @return {?}
     */
    function (column, item) {
        var /** @type {?} */ lookupKey = {
            col: column.key || column.label,
            item: item
        };
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.state.selection) &&
            _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].findIndexComplex(this.state.selection, lookupKey) !== -1;
    };
    /**
     *  See AWDataTable
     *
     */
    /**
     *  See AWDataTable
     *
     * @param {?} item
     * @return {?}
     */
    Datatable2Component.prototype.isRowSelected = /**
     *  See AWDataTable
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (this.hasLeadingSelectColumn() && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.state.selection)) {
            if (this.selectionMode === 'multi') {
                return _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].findIndexComplex(this.state.selection, item) !== -1;
            }
            else if (this.selectionMode === 'single') {
                return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["equals"])(this.state.selection, item);
            }
        }
        return false;
    };
    /**
     *
     * Do we have data to render Used inside template to tell if we should use the NoData template
     *
     */
    /**
     *
     * Do we have data to render Used inside template to tell if we should use the NoData template
     *
     * @return {?}
     */
    Datatable2Component.prototype.isEmpty = /**
     *
     * Do we have data to render Used inside template to tell if we should use the NoData template
     *
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.dataToRender) || (this.dataToRender.length === 0);
    };
    /**
     * @return {?}
     */
    Datatable2Component.prototype.hasFrozenColumns = /**
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.frozenColumns) && this.frozenColumns.length > 0;
    };
    /**
     * See AWDataTable
     */
    /**
     * See AWDataTable
     * @return {?}
     */
    Datatable2Component.prototype.hasInvisibleSelectionColumn = /**
     * See AWDataTable
     * @return {?}
     */
    function () {
        return this.hasLeadingSelectColumn() && !this.showSelectionColumn;
    };
    /**
     *
     * See AWDataTable
     *
     */
    /**
     *
     * See AWDataTable
     *
     * @return {?}
     */
    Datatable2Component.prototype.hasLeadingSelectColumn = /**
     *
     * See AWDataTable
     *
     * @return {?}
     */
    function () {
        return this.selectionMode !== 'none' && this.selectionMode !== 'cell';
    };
    /**
     * @return {?}
     */
    Datatable2Component.prototype.visibleColumns = /**
     * @return {?}
     */
    function () {
        return this.columns ? this.columns.filter(function (c) { return c.isVisible; }) : [];
    };
    /**
     * See AWDataTable
     *
     */
    /**
     * See AWDataTable
     *
     * @param {?} direction
     * @return {?}
     */
    Datatable2Component.prototype.sortOrderingForString = /**
     * See AWDataTable
     *
     * @param {?} direction
     * @return {?}
     */
    function (direction) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(direction) || direction === 'ascending') {
            return 1;
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(direction) || direction === 'descending') {
            return -1;
        }
        // todo: log bad key
        return 1;
    };
    /**
     * @param {?} direction
     * @return {?}
     */
    Datatable2Component.prototype.sortOrderingForNumber = /**
     * @param {?} direction
     * @return {?}
     */
    function (direction) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(direction) || direction === 1) {
            return 'ascending';
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(direction) || direction === -1) {
            return 'descending';
        }
        // todo: log bad key
        return 'ascending';
    };
    /**
     * See AWDataTable
     *
     */
    /**
     * See AWDataTable
     *
     * @param {?} event
     * @return {?}
     */
    Datatable2Component.prototype.toggleAllColumns = /**
     * See AWDataTable
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ currentItems = this.dataToRender || [];
        var /** @type {?} */ selectedObject = this.state.selection || [];
        if (selectedObject.length >= currentItems.length) {
            this.state.selection = [];
        }
        else {
            this.state.selection = [];
            this.state.selection = Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__spread"])(currentItems);
        }
    };
    /**
     *
     * See AWDataTable
     *
     */
    /**
     *
     * See AWDataTable
     *
     * @return {?}
     */
    Datatable2Component.prototype.isToggleAllColumnSelected = /**
     *
     * See AWDataTable
     *
     * @return {?}
     */
    function () {
        var /** @type {?} */ currentItems = this.dataToRender || [];
        var /** @type {?} */ selectedObject = this.state.selection || [];
        return currentItems.length > 0 && selectedObject.length >= currentItems.length;
    };
    /**
     * @return {?}
     */
    Datatable2Component.prototype.isToggleAllColumnDisabled = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ currentItems = this.dataToRender || [];
        return currentItems.length === 0;
    };
    /**
     *
     * Used by template to decide if we need to render DetailRow template. We need to have
     * DetailRow ContentChild and using DetailRow component [isVisibleFn] function binding we
     * check if the item that is about to be rendered is eligible for detail row
     *
     */
    /**
     *
     * Used by template to decide if we need to render DetailRow template. We need to have
     * DetailRow ContentChild and using DetailRow component [isVisibleFn] function binding we
     * check if the item that is about to be rendered is eligible for detail row
     *
     * @param {?} item
     * @return {?}
     */
    Datatable2Component.prototype.showDetailColumn = /**
     *
     * Used by template to decide if we need to render DetailRow template. We need to have
     * DetailRow ContentChild and using DetailRow component [isVisibleFn] function binding we
     * check if the item that is about to be rendered is eligible for detail row
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (this.canUseForDetailRow(item) && this.detailRowExpansionState.isExpanded(item)) {
            return true;
        }
        return false;
    };
    /**
     *
     * See AWDataTable
     *
     */
    /**
     *
     * See AWDataTable
     *
     * @return {?}
     */
    Datatable2Component.prototype.isOutline = /**
     *
     * See AWDataTable
     *
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.children) || this.outlineFormat === 'tree';
    };
    /**
     *
     * When dealing with detail column (detail row) and outline all together we need have a
     * mechanism to tell to the outline "don't render the next level of items" and use detail row.
     * So certain item type needs to be skipped.
     *
     * The way we skip those item is we use isVisibleFn condition of the detail row and look ahead
     * if we should skip next level.
     *
     */
    /**
     *
     * When dealing with detail column (detail row) and outline all together we need have a
     * mechanism to tell to the outline "don't render the next level of items" and use detail row.
     * So certain item type needs to be skipped.
     *
     * The way we skip those item is we use isVisibleFn condition of the detail row and look ahead
     * if we should skip next level.
     *
     * @param {?} item
     * @return {?}
     */
    Datatable2Component.prototype.skipOutlineItem = /**
     *
     * When dealing with detail column (detail row) and outline all together we need have a
     * mechanism to tell to the outline "don't render the next level of items" and use detail row.
     * So certain item type needs to be skipped.
     *
     * The way we skip those item is we use isVisibleFn condition of the detail row and look ahead
     * if we should skip next level.
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.canUseForDetailRow(item);
    };
    /**
     *
     * See AWDaTable
     *
     */
    /**
     *
     * See AWDaTable
     *
     * @param {?} data
     * @param {?} field
     * @return {?}
     */
    Datatable2Component.prototype.getValue = /**
     *
     * See AWDaTable
     *
     * @param {?} data
     * @param {?} field
     * @return {?}
     */
    function (data, field) {
        return _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["FieldPath"].getFieldValue(data, field);
    };
    /**
     * @return {?}
     */
    Datatable2Component.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnDestroy.call(this);
        if (this.columnsSubscription) {
            this.columnsSubscription.unsubscribe();
        }
    };
    /**
     * Makes sure that we also include programmatic column if present. Move them to the correct
     * array
     *
     * @return {?}
     */
    Datatable2Component.prototype.initFrozenColumns = /**
     * Makes sure that we also include programmatic column if present. Move them to the correct
     * array
     *
     * @return {?}
     */
    function () {
        var _this = this;
        this.colsQuery
            .filter(function (col1) { return col1.frozen; })
            .forEach(function (col) {
            col.initialize(_this);
            _this.frozenColumns.push(col);
        });
        if (this.frozenColumns.length > 0) {
            // find last index of column that is internal / programmatic
            var /** @type {?} */ lastInx = this.columns.slice()
                .reverse()
                .findIndex(function (col) { return _this.isInternalColumn(col); });
            if (lastInx !== -1) {
                var /** @type {?} */ idx = this.columns.length - 1 - lastInx;
                var /** @type {?} */ internalCols = this.columns.splice(0, idx + 1);
                this.frozenColumns = Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__spread"])(internalCols, this.frozenColumns);
            }
            var /** @type {?} */ hasValidCols = this.columns
                .findIndex(function (col) { return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(col.width); }) === -1;
            Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(hasValidCols || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.scrollWidth), 'When using [frozen] binding you need specify [width] for each ' +
                'column or [scrollWidth] on datatable!');
            Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.rowDetailColumn), 'You cannot combine aw-dt-detail-column with frozen columns!');
        }
    };
    /**
     * Updates current immutable list and trigger change detection. Need to wrap it with
     * setTimeout as the change can easily come after view checked and this would result some errors
     *
     * @param {?} newList
     * @return {?}
     */
    Datatable2Component.prototype.updateList = /**
     * Updates current immutable list and trigger change detection. Need to wrap it with
     * setTimeout as the change can easily come after view checked and this would result some errors
     *
     * @param {?} newList
     * @return {?}
     */
    function (newList) {
        var _this = this;
        setTimeout(function () {
            _this.list = newList;
            _this.handleDataChange();
        });
    };
    /**
     * @param {?} item
     * @return {?}
     */
    Datatable2Component.prototype.canUseForDetailRow = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.rowDetailColumn) &&
            (/** @type {?} */ (this.rowDetailColumn)).showDetailRow(item);
    };
    Datatable2Component.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-datatable2',
                    template: "<!--\n    This template focus only on header and body rendering.\n\n    This datatable also supports frozen column and for this rendering it is pretty much transparent\n    as it received sets of column that it needs to render from the TableWrapper.\n\n    TableWrapper in case of frozen columns calls #headerRows and #bodyRows templates twice to\n    render to separate tables where one has frozen columns and another one has the rest and its\n    scrollable\n-->\n\n<aw-dt-wrapper #dtWrapper>\n    <ng-template #headingArea>\n        <ng-content select=\"aw-dt-header2\"></ng-content>\n    </ng-template>\n\n    <ng-template #headerRows let-colsToRender let-frozenView=\"frozenColumns\">\n        <ng-container\n            *ngTemplateOutlet=\"header; context:{$implicit: colsToRender, frozen:frozenView }\">\n        </ng-container>\n    </ng-template>\n\n    <ng-template #bodyRows let-colsToRender>\n        <ng-template [ngIf]=\"isOutline()\">\n            <ng-container\n                *ngTemplateOutlet=\"bodyOutline; context:{$implicit: colsToRender}\"></ng-container>\n        </ng-template>\n        <ng-template [ngIf]=\"!isOutline()\">\n            <ng-container\n                *ngTemplateOutlet=\"bodyPlain; context:{$implicit: colsToRender}\"></ng-container>\n        </ng-template>\n    </ng-template>\n</aw-dt-wrapper>\n\n\n<!--\n    Each rendering column has its own renderTemplate which define how things should be render.\n    Based on different column types this code should be transparent as we dont care on this\n    level what kind of column we are rendering.\n\n    Later on when we will support single/multi selection, this will be just another column extending\n    DTColumn and providing its own template\n\n    We pass into this template if we are rendering header, subHeader, or data\n-->\n<ng-template #header let-colsToRender let-frozen=\"frozen\">\n    <tr>\n        <ng-template ngFor let-col [ngForOf]=\"colsToRender\" let-lastCol=\"last\"\n                     let-columnIndex=\"index\">\n\n            <ng-container *ngTemplateOutlet=\"col.rendererTemplate;\n                context:{$implicit: true, isSubHeader:false,\n                columnIndex:(frozen ? columnIndex: (columns.length + columnIndex))}\">\n            </ng-container>\n        </ng-template>\n    </tr>\n\n    <tr *ngIf=\"showSubHeader\">\n        <ng-template ngFor let-col [ngForOf]=\"colsToRender\" let-lastCol=\"last\">\n            <ng-container *ngTemplateOutlet=\"col.rendererTemplate;\n                context:{$implicit: true, isSubHeader:true}\">\n            </ng-container>\n        </ng-template>\n    </tr>\n</ng-template>\n\n\n<ng-template #bodyPlain let-colsToRender>\n\n    <tbody [ngClass]=\"{'dt-content dt-data-cells ': true, 'dt-is-hoverable-row': rowHover}\">\n\n    <ng-template ngFor let-rowData [ngForOf]=\"dataToRender\" let-even=\"even\" let-odd=\"odd\"\n                 let-rowIndex=\"index\" [ngForTrackBy]=\"rowTrackBy\">\n\n        <ng-container *ngTemplateOutlet=\"rowTemplate; context:{$implicit: rowData, even:even,\n                                          odd:odd, rowIndex:rowIndex, colsToRender:colsToRender}\">\n        </ng-container>\n\n        <ng-template [ngIf]=\"showDetailColumn(rowData)\">\n            <ng-container *ngTemplateOutlet=\"rowDetailColumn.rendererTemplate;\n                    context:{$implicit: false, data:rowData, rowIndex:(rowIndex)}\">\n            </ng-container>\n        </ng-template>\n\n    </ng-template>\n    <ng-container *ngTemplateOutlet=\"noData\"></ng-container>\n    </tbody>\n</ng-template>\n\n\n<ng-template #bodyOutline let-colsToRender>\n    <tbody #outlineFor awOutlineFor [list]=\"dataToRender\"\n           [format]=\"outlineFormat\"\n           [context]=\"context\"\n           [indentationPerLevel]=\"indentationPerLevel\"\n           [pushRootSectionOnNewLine]=\"pushRootSectionOnNewLine\"\n           [children]=\"children\" [expandAll]=\"expandAll\"\n           [state]=\"outlineState\"\n           [ngClass]=\"{'dt-content dt-data-cells ': true,\n                           'dt-is-hoverable-row': rowHover}\"\n           (onExpandChange)=\"onOutlineExpandChange($event)\">\n\n    <ng-template #outline let-rowData let-nestingLevel=\"nestingLevel\" let-rowIndex=\"rowIndex\">\n        <ng-container *ngTemplateOutlet=\"rowTemplate;\n                                context:{$implicit: rowData, nestingLevel:nestingLevel, colsToRender:colsToRender}\">\n        </ng-container>\n\n        <ng-template [ngIf]=\"showDetailColumn(rowData)\">\n            <ng-container *ngTemplateOutlet=\"rowDetailColumn.rendererTemplate;\n                    context:{$implicit: false, data:rowData, rowIndex:(rowIndex)}\">\n            </ng-container>\n        </ng-template>\n\n    </ng-template>\n    <ng-container *ngTemplateOutlet=\"noData\"></ng-container>\n    </tbody>\n</ng-template>\n\n<!--\n    Default template that is display when there are no data\n-->\n<ng-template #noData>\n    <tr *ngIf=\"isEmpty()\" class=\" dt-emptymessage-row\"\n        [style.visibility]=\"loading ? 'hidden' : 'visible'\">\n\n        <td [attr.colspan]=\"visibleColumns().length\" class=\"dt-emptymessage\">\n            <span *ngIf=\"!emptyMessageTemplate\">{{emptyMessage}}</span>\n            <ng-container *ngTemplateOutlet=\"emptyMessageTemplate\"></ng-container>\n        </td>\n    </tr>\n</ng-template>\n\n<!--\n    Template that renders actual row. Renders both header and body column. Each rendered\n    column has its own template called rendererTemplate that has all things that needs to be\n    rendered and we just tell the template if we are rendering header, subheader or body\n-->\n<ng-template #rowTemplate let-rowData let-even=\"event\" let-odd=\"odd\" let-rowIndex=\"rowIndex\"\n             let-nestingLevel=\"nestingLevel\" let-colsToRender=\"colsToRender\">\n\n\n    <tr #rowElement dtDraggableRow [dndRowIndex]=\"rowIndex\"\n        class=\"dt-body-row\"\n        (click)=\"onHandleRowClicked($event, rowData)\"\n        [attr.nestingLevel]=\"nestingLevel\"\n        [ngClass]=\"{'dt-even-row': even, 'dt-odd-row': odd,\n            'dt-row-selected': isRowSelected(rowData),\n            'dt-row-draggable': dndRowEnabled,\n            'dt-root-section': nestingLevel === 0 }\">\n\n        <ng-template ngFor let-col [ngForOf]=\"colsToRender\" let-colIndex=\"index\">\n            <ng-container *ngTemplateOutlet=\"col.rendererTemplate;\n                    context:{$implicit: false, data:rowData, rowIndex:rowIndex,\n                    nestingLevel:nestingLevel}\">\n            </ng-container>\n        </ng-template>\n    </tr>\n</ng-template>\n\n\n",
                    styles: [".w-datatable{position:relative;display:block;box-sizing:border-box}.w-datatable table{border-collapse:collapse;width:100%;table-layout:fixed}.w-datatable tbody,.w-datatable td,.w-datatable th{outline:0}.dt-cell-def,.dt-cell-def-selectable{border:1px solid transparent;padding:17px 16px;box-sizing:border-box}.dt-cell-def-selectable{cursor:pointer;width:100%;height:100%}th .dt-cell-def-selectable{border-width:4px 1px 1px;padding:14px 16px 17px}td .dt-cell-def-selectable{border-width:0 1px 0 5px;padding:17px 16px 17px 13px}.dt-data-cells tr.dt-is-highlight,.dt-data-cells tr.dt-is-hover{border-color:inherit;font-weight:inherit;cursor:pointer}.w-datatable-rtl{direction:rtl}.w-datatable-rtl.w-datatable-rtl.w-datatable thead th{text-align:right}.dt-root-section .dt-cell-def,.dt-root-section .dt-cell-def-selectable{background-color:#f3f6f8;padding:10px 16px;border-bottom-color:transparent;border-right-color:transparent}.dt-plain-layout .dt-is-active,.dt-plain-layout .dt-is-default,.dt-plain-layout .dt-is-highlight,.dt-plain-layout .dt-is-hover,.dt-plain-layout .dt-is-hoverable-row{border-right-color:transparent}.dt-is-active,.dt-is-default,.dt-is-highlight,.dt-is-hover,.dt-is-hoverable-row{border:1px solid #d7d7d7;background-color:#fff;color:#363636}.dt-row-selected td{background-color:rgba(238,255,238,.71)}.dt-is-active{border-color:#065d9c;color:#199de0}.dt-is-highlight{background-color:rgba(65,117,5,.18)}.dt-is-hidden{display:none}.dt-u-unselectable-text{-webkit-user-select:none;-moz-user-select:none;-o-user-select:none;-ms-user-select:none;user-select:none}.dt-u-sortable{cursor:pointer}"],
                    providers: [
                        primeng_components_utils_objectutils__WEBPACK_IMPORTED_MODULE_12__["ObjectUtils"],
                        OutlineState,
                        { provide: DATA_SOURCE, useClass: DT2DataSource, deps: [DataProviders, DataFinders] },
                    ],
                    encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                    changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
                },] },
    ];
    /** @nocollapse */
    Datatable2Component.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
        { type: DT2DataSource, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [DATA_SOURCE,] }] },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"] },
        { type: OutlineState },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"] }
    ]; };
    Datatable2Component.propDecorators = {
        list: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        destinationClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        tableStyleClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        bodyClassFn: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        isRowSelectable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        showTableHeader: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        pivotalLayout: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        context: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        initialSortOrder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        initialSortKey: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        displayRowSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        pageSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        dataSource: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        emptyMessage: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        rowTrackBy: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        rowHover: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        loading: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        selectionMode: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        loadingIcon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        indentDetailRow: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        indentationPerLevel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        showSubHeader: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        children: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        showExpansionControl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        expandAll: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        outlineFormat: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        pushRootSectionOnNewLine: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        showRowDetailExpansionControl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        showSelectionColumn: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        showSelectAll: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        showGlobalSearch: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        scrollWidth: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        dndRowEnabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        onSort: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        onRowClick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        onRowSelectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        onCellChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        onHeaderSelection: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        header: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [DTHeaderComponent2,] }],
        emptyMessageTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: ['noDataTempl',] }],
        headerTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: ['dtHeader',] }],
        subHeaderTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: ['dtSubHeader',] }],
        bodyTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: ['dtBody',] }],
        headerFilterTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: ['headerFilter',] }],
        colsQuery: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [DTColumn2Component,] }],
        rowDetailColumn: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [DTDetailRowComponent,] }],
        valueChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        classList: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class',] }],
        state: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return Datatable2Component;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Please see datatable for more detail description. But the main goal of this wrapper to remove
 * all the common surrounding parts around the datatable and make sure DT can focus only actual
 * header and body structure
 *
 * It is expected that wrapper also provides some code for the sliding up panel containing
 * buttons and other actions that will be used during editing
 *
 *
 * Todo: Extract the expand logic out into some directive or component or just a class
 *
 */
var DTWrapper = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(DTWrapper, _super);
    function DTWrapper(env, render, thisElement, domUtils, platformId, dt) {
        var _this = _super.call(this, env) || this;
        _this.env = env;
        _this.render = render;
        _this.thisElement = thisElement;
        _this.domUtils = domUtils;
        _this.platformId = platformId;
        _this.dt = dt;
        /**
         * Color that is used by full screen div overlay to create expanding effect which needs to have
         * little tent;
         *
         */
        _this.expandColorFrom = '#f3f3f3';
        /**
         * Color that is used to set after we are in the full screen so our overlay div hide everything
         * on the page
         *
         */
        _this.expandColorTo = '#FFFFFF';
        /**
         * In order to debounce the typing we need to use subject
         *
         */
        _this.searchTerms = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
        /**
         *  Specifies if we are in viewing/editing mode that can browse whole dataset lazily
         *
         */
        _this.isFullScreenMode = false;
        /**
         * Tells if we can support full screen mode - only available for the browser
         *
         */
        _this.supportFullScreen = true;
        return _this;
    }
    /**
     * @return {?}
     */
    DTWrapper.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        this.querySubscription = this.searchTerms.pipe(
        // wait 300ms after each keystroke before considering the term
        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["debounceTime"])(300), 
        // ignore new term if same as previous term
        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["distinctUntilChanged"])(), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["switchMap"])(function (term) { return Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["of"])(term); })).subscribe(function (term) {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(term)) {
                _this.dt.dataSource.find(term);
            }
        });
        this.loadingSub = this.dt.valueChange
            .subscribe(function (data) { return _this.loadingFinished(); });
    };
    /**
     * Iterates over all columns marked as frozen and retrieve a width so we can update
     * parent div
     *
     */
    /**
     * Iterates over all columns marked as frozen and retrieve a width so we can update
     * parent div
     *
     * @return {?}
     */
    DTWrapper.prototype.calculateFrozenWidth = /**
     * Iterates over all columns marked as frozen and retrieve a width so we can update
     * parent div
     *
     * @return {?}
     */
    function () {
        if (!this.dt.hasFrozenColumns()) {
            return null;
        }
        var /** @type {?} */ fWidth = 0;
        this.dt.frozenColumns.forEach(function (col) {
            if (col.maxWidthPx > 0) {
                fWidth += col.widestCell;
            }
            else {
                fWidth += parseInt(col.width);
            }
        });
        return fWidth;
    };
    /**
     * When having two separate tables we need to make sure that rows of the tables are aligned.
     *
     * Therefore this method takes first column from each table read the height of the rows and set
     * the max height to both rows.
     *
     *
     */
    /**
     * When having two separate tables we need to make sure that rows of the tables are aligned.
     *
     * Therefore this method takes first column from each table read the height of the rows and set
     * the max height to both rows.
     *
     *
     * @param {?} frozenView
     * @param {?} unFrozenView
     * @return {?}
     */
    DTWrapper.prototype.alignTablesHeights = /**
     * When having two separate tables we need to make sure that rows of the tables are aligned.
     *
     * Therefore this method takes first column from each table read the height of the rows and set
     * the max height to both rows.
     *
     *
     * @param {?} frozenView
     * @param {?} unFrozenView
     * @return {?}
     */
    function (frozenView, unFrozenView) {
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(frozenView) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(frozenView), 'Cant align table views as one of the view is undefined');
        var /** @type {?} */ frozenRows = frozenView.querySelectorAll('table tr');
        var /** @type {?} */ unFrozenRows = unFrozenView.querySelectorAll('table tr');
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(frozenRows.length === unFrozenRows.length, 'Frozen Column: Two tables does not much!');
        Array.from(frozenRows).forEach(function (frozen, index) {
            var /** @type {?} */ h = Math.max(frozen.offsetHeight, unFrozenRows[index].offsetHeight);
            frozen.style.height = h + 'px';
            unFrozenRows[index].style.height = h + 'px';
        });
    };
    /**
     * @return {?}
     */
    DTWrapper.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initFullScreen();
    };
    /**
     * @return {?}
     */
    DTWrapper.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        if (this.dt.hasFrozenColumns()) {
            var /** @type {?} */ frozenView = this.thisElement.nativeElement.querySelector('.dt-body-frozen');
            var /** @type {?} */ unFrozenView = this.thisElement.nativeElement.querySelector('.dt-body-unfrozen');
            var /** @type {?} */ frozenWidth = this.calculateFrozenWidth();
            frozenView.style.width = frozenWidth + 'px';
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(unFrozenView)) {
                // include border and create indent effect by having 1px white space
                unFrozenView.style.left = (frozenWidth + 2) + 'px';
                unFrozenView.style.width = unFrozenView.parentElement.offsetWidth
                    - frozenView.offsetWidth + 'px';
                this.alignTablesHeights(frozenView, unFrozenView);
            }
        }
    };
    /**
     * @return {?}
     */
    DTWrapper.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnDestroy.call(this);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.querySubscription)) {
            this.querySubscription.unsubscribe();
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.loadingSub)) {
            this.loadingSub.unsubscribe();
        }
    };
    /**
     * FULL SCREEN MODE methods
     */
    /**
     *
     * When fullscreen functionality is enabled this method switches between norml and full screen
     * mode
     *
     */
    /**
     *
     * When fullscreen functionality is enabled this method switches between norml and full screen
     * mode
     *
     * @param {?} event
     * @return {?}
     */
    DTWrapper.prototype.toggleFullScreen = /**
     *
     * When fullscreen functionality is enabled this method switches between norml and full screen
     * mode
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.isFullScreenMode) {
            this.closeFullScreen(event);
        }
        else {
            this.openFullScreen(event);
        }
    };
    /**
     * To push this component to full screen mode or maybe full page mode we need run following:
     *
     *  - Execute expand transformation, where we have additional overlay div that we slowly expand
     *  and this creates impression the DT is expanding
     *
     *  - apply full-screen class on top host element  - in this case its DataTable to switch
     *  to absolute positioning
     *
     *  - make sure we are scrolled all the way up
     *
     *  - hide all the elements on the page so their dimension don't interfere with this table.
     *
     *
     */
    /**
     * To push this component to full screen mode or maybe full page mode we need run following:
     *
     *  - Execute expand transformation, where we have additional overlay div that we slowly expand
     *  and this creates impression the DT is expanding
     *
     *  - apply full-screen class on top host element  - in this case its DataTable to switch
     *  to absolute positioning
     *
     *  - make sure we are scrolled all the way up
     *
     *  - hide all the elements on the page so their dimension don't interfere with this table.
     *
     *
     * @param {?} event
     * @return {?}
     */
    DTWrapper.prototype.openFullScreen = /**
     * To push this component to full screen mode or maybe full page mode we need run following:
     *
     *  - Execute expand transformation, where we have additional overlay div that we slowly expand
     *  and this creates impression the DT is expanding
     *
     *  - apply full-screen class on top host element  - in this case its DataTable to switch
     *  to absolute positioning
     *
     *  - make sure we are scrolled all the way up
     *
     *  - hide all the elements on the page so their dimension don't interfere with this table.
     *
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.isFullScreenMode = true;
        this.runExpandEffect();
        this.originalScrollPosition = window.pageYOffset;
        window.scroll(0, 0);
        this.toggleFullScreenOnDT(true);
        // mark my element in the path that needs to stay
        var /** @type {?} */ parentNode = this.thisElement.nativeElement.parentNode;
        while (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(parentNode) && parentNode.tagName !== 'BODY') {
            parentNode.classList.add('u-full-screen-element');
            parentNode = parentNode.parentNode;
        }
        this.hideNonFullScreenElement(document.body);
        this.dt.state.limit = Math.round(this.calculateLimit());
        this.dt.dataSource.fetch(this.dt.state);
        // once loaded set back correct page size we use when loading data
        this.dt.state.limit = this.dt.pageSize;
    };
    /**
     *
     * The same like above method (openFullScreen) but in reverse order.
     *
     */
    /**
     *
     * The same like above method (openFullScreen) but in reverse order.
     *
     * @param {?} event
     * @return {?}
     */
    DTWrapper.prototype.closeFullScreen = /**
     *
     * The same like above method (openFullScreen) but in reverse order.
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        this.isFullScreenMode = false;
        this.showNonFullScreenElement();
        this.runCollapseEffect();
        this.toggleFullScreenOnDT(false);
        this.dt.dataSource.state.limit = this.dt.dataSource.state.displayLimit;
        this.dt.dataSource.state.offset = 0;
        this.dt.dataSource.fetch(this.dt.dataSource.state);
        setTimeout(function () {
            window.scroll(0, _this.originalScrollPosition);
        }, 300);
    };
    /**
     * Applies set of set of css properties to make the DT main component on the page expand to
     * full page mode and back
     *
     * We want to make it with little delay to let other animation finish
     */
    /**
     * Applies set of set of css properties to make the DT main component on the page expand to
     * full page mode and back
     *
     * We want to make it with little delay to let other animation finish
     * @param {?} fullScreen
     * @return {?}
     */
    DTWrapper.prototype.toggleFullScreenOnDT = /**
     * Applies set of set of css properties to make the DT main component on the page expand to
     * full page mode and back
     *
     * We want to make it with little delay to let other animation finish
     * @param {?} fullScreen
     * @return {?}
     */
    function (fullScreen) {
        var _this = this;
        this.dt.el.nativeElement.style.opacity = 0;
        setTimeout(function () {
            if (fullScreen) {
                _this.dt.classList += 'dt-full-screen';
                _this.dt.el.nativeElement.style.opacity = 1;
            }
            else {
                _this.dt.classList = _this.dt.classList.replace('dt-full-screen', '');
                _this.dt.el.nativeElement.style.opacity = 1;
            }
        }, 200);
    };
    /**
     * Listen for infinite scroll event and request new data from data source
     *
     */
    /**
     * Listen for infinite scroll event and request new data from data source
     *
     * @param {?} event
     * @return {?}
     */
    DTWrapper.prototype.onLazyLoad = /**
     * Listen for infinite scroll event and request new data from data source
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.isLoad) {
            this.dt.state.offset = event.offset;
            this.dt.dataSource.fetch(this.dt.state);
        }
        else {
            var /** @type {?} */ dataProvider = this.dt.dataSource.dataProvider;
            var /** @type {?} */ data = dataProvider.dataChanges.getValue();
            dataProvider.dataChanges.next(data.slice(0, event.offset));
        }
    };
    /**
     * Creates animation effect to make it feel like the element (in this case DT) is expanding
     * from the middle to the full page mode.
     *
     * We take the dimension of the table then it is scaled slowly to the full page
     * @return {?}
     */
    DTWrapper.prototype.runExpandEffect = /**
     * Creates animation effect to make it feel like the element (in this case DT) is expanding
     * from the middle to the full page mode.
     *
     * We take the dimension of the table then it is scaled slowly to the full page
     * @return {?}
     */
    function () {
        var _this = this;
        this.dtBoundingClientRect = this.thisElement.nativeElement.getBoundingClientRect();
        this.updateElement();
        this.dtFullScreenOverlay.nativeElement.style.backgroundColor = this.expandColorFrom;
        this.dtFullScreenOverlay.nativeElement.style.opacity = 1;
        this.applyTransformation(true);
        setTimeout(function () {
            _this.dtFullScreenOverlay.nativeElement.style.backgroundColor = _this.expandColorTo;
        }, 300);
    };
    /**
     * Applies the transformation and scale the helper div (overlay) down to make it look like
     * it collapses
     * @return {?}
     */
    DTWrapper.prototype.runCollapseEffect = /**
     * Applies the transformation and scale the helper div (overlay) down to make it look like
     * it collapses
     * @return {?}
     */
    function () {
        var _this = this;
        this.updateElement();
        this.applyTransformation(false);
        setTimeout(function () {
            _this.updateElement();
            _this.dtFullScreenOverlay.nativeElement.style.opacity = 0;
        }, 200);
        setTimeout(function () {
            _this.updateElement(_this.dtBoundingClientRect.left, _this.dtBoundingClientRect.top, 0, 0);
        }, 400);
    };
    /**
     * DFS  - to go thru all the element under BODY and remove them from the page.
     *
     * @param {?} parentElement
     * @return {?}
     */
    DTWrapper.prototype.hideNonFullScreenElement = /**
     * DFS  - to go thru all the element under BODY and remove them from the page.
     *
     * @param {?} parentElement
     * @return {?}
     */
    function (parentElement) {
        if (this.thisElement.nativeElement.parentNode === parentElement) {
            return;
        }
        for (var /** @type {?} */ i = 0; i < parentElement.children.length; i++) {
            var /** @type {?} */ element = parentElement.children[i];
            if (this.needTraverseDown(element)) {
                this.hideNonFullScreenElement(element);
            }
            else if (!element.classList.contains('dt-full-screen')) {
                element.classList.add('u-fs-element-out');
            }
        }
    };
    /**
     * Put all the element that were previously removed by hideNonFullScreenElement() back
     * @return {?}
     */
    DTWrapper.prototype.showNonFullScreenElement = /**
     * Put all the element that were previously removed by hideNonFullScreenElement() back
     * @return {?}
     */
    function () {
        Array.from(document.querySelectorAll('.u-fs-element-out'))
            .forEach(function (elem) { return elem.classList.remove('u-fs-element-out'); });
    };
    /**
     * \@Internal
     *
     * @param {?} element
     * @return {?}
     */
    DTWrapper.prototype.needTraverseDown = /**
     * \@Internal
     *
     * @param {?} element
     * @return {?}
     */
    function (element) {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(element) && element.tagName !== 'SCRIPT' &&
            element.classList.contains('u-full-screen-element') &&
            !element.classList.contains('dt-full-screen');
    };
    /**
     * When we enter full screen /page mode when need to calculate how many rows to load initially
     *
     * @return {?}
     */
    DTWrapper.prototype.calculateLimit = /**
     * When we enter full screen /page mode when need to calculate how many rows to load initially
     *
     * @return {?}
     */
    function () {
        var /** @type {?} */ browserH = this.domUtils.browserDimentions().height;
        var /** @type {?} */ rowH = this.dt.el.nativeElement.querySelector('tbody tr:first-child').offsetHeight;
        return (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(rowH) && rowH > 0) ? (browserH / rowH) + 20 : 50;
    };
    /**
     * \@Internal
     *
     * @param {?=} l
     * @param {?=} t
     * @param {?=} w
     * @param {?=} h
     * @return {?}
     */
    DTWrapper.prototype.updateElement = /**
     * \@Internal
     *
     * @param {?=} l
     * @param {?=} t
     * @param {?=} w
     * @param {?=} h
     * @return {?}
     */
    function (l, t, w, h) {
        if (l === void 0) { l = this.dtBoundingClientRect.left; }
        if (t === void 0) { t = this.dtBoundingClientRect.top; }
        if (w === void 0) { w = this.dtBoundingClientRect.width; }
        if (h === void 0) { h = this.dtBoundingClientRect.height; }
        this.dtFullScreenOverlay.nativeElement.style.left = l + 'px';
        this.dtFullScreenOverlay.nativeElement.style.top = t + 'px';
        this.dtFullScreenOverlay.nativeElement.style.width = w + 'px';
        this.dtFullScreenOverlay.nativeElement.style.height = h + 'px';
    };
    /**
     * \@Internal
     *
     * @param {?} expand
     * @return {?}
     */
    DTWrapper.prototype.applyTransformation = /**
     * \@Internal
     *
     * @param {?} expand
     * @return {?}
     */
    function (expand) {
        var /** @type {?} */ x, /** @type {?} */ y, /** @type {?} */ tx, /** @type {?} */ ty;
        if (expand) {
            x = window.innerWidth / this.dtBoundingClientRect.width;
            y = window.innerHeight / this.dtBoundingClientRect.height;
            tx = (window.innerWidth / 2 - this.dtBoundingClientRect.width / 2
                - this.dtBoundingClientRect.left) / x;
            ty = (window.innerHeight / 2 - this.dtBoundingClientRect.height / 2
                - this.dtBoundingClientRect.top) / y;
        }
        else {
            x = 1;
            y = 1;
            tx = this.dtBoundingClientRect.left;
            ty = this.dtBoundingClientRect.top;
        }
        this.dtFullScreenOverlay.nativeElement.style.transform =
            'scaleX(' + x + ') scaleY(' + y + ') translate3d(' + (tx) + 'px, ' + (ty) + 'px, 0px)';
    };
    /**
     * INFINITE SCROLLING METHODS
     * @return {?}
     */
    DTWrapper.prototype.initFullScreen = /**
     * INFINITE SCROLLING METHODS
     * @return {?}
     */
    function () {
        if (!Object(_angular_common__WEBPACK_IMPORTED_MODULE_5__["isPlatformBrowser"])(this.platformId)) {
            this.supportFullScreen = false;
            return;
        }
        this.render.appendChild(document.body, this.dtFullScreenOverlay.nativeElement);
    };
    /**
     * When loading is finished mark loading icon is done so we can hide it. I am using little
     * delay to make the animation visible
     * @return {?}
     */
    DTWrapper.prototype.loadingFinished = /**
     * When loading is finished mark loading icon is done so we can hide it. I am using little
     * delay to make the animation visible
     * @return {?}
     */
    function () {
        var _this = this;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.infiniteScroll)) {
            setTimeout(function () { return _this.infiniteScroll.complete(); }, 200);
        }
    };
    DTWrapper.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-dt-wrapper',
                    template: "<div [ngClass]=\"dt.styleClass\" [class.dt-full-screen-mode]=\"isFullScreenMode\"\n     [style.width]=\"dt.width\"\n>\n    <div class=\"dt-loading-overlay\" *ngIf=\"dt.loading\"></div>\n    <div class=\"dt-loading-content\" *ngIf=\"dt.loading\">\n        <i [class]=\"'sap-icon u-dt-spin-icon ' + dt.loadingIcon\"></i>\n    </div>\n\n    <div class=\"dt-header\" *ngIf=\"dt.showTableHeader\">\n        <ng-template *ngIf=\"dt.header; then appDefinedHeader else defaultHeader\"></ng-template>\n    </div>\n\n    <!-- DT BODY with table headers and values -->\n    <div class=\"dt-body-wrapper-view\">\n        <ng-template\n            *ngIf=\"dt.hasFrozenColumns(); then dtBodyWithFrozenColumns else dtBodyNoFrozenColumns\">\n        </ng-template>\n    </div>\n\n    <!--<div class=\"dt-footer\" *ngIf=\"footer\">-->\n    <!--&lt;!&ndash; footerArea&ndash;&gt;-->\n    <!--<ng-content select=\"aw-dt-footer\"></ng-content>-->\n    <!--</div>-->\n</div>\n\n<!-- todo: dont activate this if we reached the end of list - -->\n<aw-infinite-scroll #infiniteScroll *ngIf=\"isFullScreenMode\"\n                    [distance]=\"'10%'\"\n                    [fetchSize]=\"dt.state.limit\"\n                    (onLoad)=\"onLazyLoad($event)\">\n</aw-infinite-scroll>\n\n\n<ng-template #appDefinedHeader>\n    <ng-container *ngTemplateOutlet=\"heading;\"></ng-container>\n</ng-template>\n\n<ng-template #defaultHeader>\n    <div class=\"dt-global-filter\">\n        <span class=\"sap-icon icon-filter\"></span>\n    </div>\n\n    <div class=\"dt-global-actions\">\n        <div class=\"dt-action-combo\">\n            <span *ngIf=\"supportFullScreen\" class=\"sap-icon icon-resize\"\n                  (click)=\"toggleFullScreen($event)\"></span>\n\n            <aw-input-field *ngIf=\"dt.showGlobalSearch\" styleClass=\"dt-table-search\"\n                            [(ngModel)]=\"dt.state.currentSearchQuery\"\n                            placeHolder=\"search\"\n                            icon=\"icon-search\"\n                            (ngModelChange)=\"searchTerms.next($event)\">\n            </aw-input-field>\n            <span class=\"ariba-icon icon-more\"></span>\n        </div>\n    </div>\n</ng-template>\n\n<!--\n    Each section frozen/non-frozen is calculated inside table-wrapper in the ngAfterViewChecked, where we set\n    proper width for each frame as well as left coordinates for the right one\n-->\n<ng-template #dtBodyNoFrozenColumns>\n    <!--\n        For non-frozen case we also need to set TRUE as the view is actually frozen and does not\n        scroll.\n        We use this frozenColumns flag inside DT to properly set column index on the header level\n        columnIndex:(frozen ? columnIndex: (columns.length + columnIndex))\n\n        therefore we need to set true even in this case to return real columnIndex since we dont\n        have the second table.\n    -->\n    <ng-container *ngTemplateOutlet=\"dtBody; context:{$implicit: dt.columns, frozenColumns: true }\">\n    </ng-container>\n</ng-template>\n\n<ng-template #dtBodyWithFrozenColumns>\n    <ng-container\n        *ngTemplateOutlet=\"dtBody; context:{$implicit: dt.frozenColumns, frozenColumns: true }\">\n    </ng-container>\n    <ng-container\n        *ngTemplateOutlet=\"dtBody; context:{$implicit: dt.columns, frozenColumns: false }\">\n    </ng-container>\n</ng-template>\n\n\n<ng-template #dtBody let-columns let-frozenColumns=\"frozenColumns\">\n\n    <div #dtContainer class=\"dt-body-wrapper\"\n         [style.width.px]=\"this.calculateFrozenWidth()\"\n         [class.dt-body-unfrozen]=\"dt.hasFrozenColumns() && !frozenColumns\"\n         [class.dt-body-frozen]=\"dt.hasFrozenColumns() && frozenColumns\"\n    >\n\n        <table [ngClass]=\"dt.tableStyleClass\"\n               [style.width]=\"frozenColumns ? null : dt.scrollWidth\"\n               [class.dt-pivot-layout]=\"dt.pivotalLayout\"\n               [class.dt-plain-layout]=\"!dt.pivotalLayout && !dt.isOutline()\">\n\n            <!-- Render TH header rows-->\n            <thead class=\"dt-thead\">\n            <ng-container *ngTemplateOutlet=\"headerRows; context:{$implicit: columns,frozenColumns:frozenColumns }\">\n            </ng-container>\n            </thead>\n\n            <!--\n                Render data rows. For data rows we need to keep tbody tag inside DT table\n                due to Outline\n             -->\n            <ng-container *ngTemplateOutlet=\"bodyRows; context:{$implicit: columns,  frozenColumns:frozenColumns }\">\n            </ng-container>\n        </table>\n    </div>\n</ng-template>\n\n\n<div #dtFullScreenOverlay class=\"dt-full-screen-overlay u-full-screen-element\"></div>\n",
                    styles: [".dt-footer,.dt-header{text-align:center;padding:.5em .75em;box-sizing:border-box}.dt-footer{border-top:0}.dt-thead tr{border-width:0}.dt-body-wrapper-view{position:relative}.dt-body-wrapper{overflow:hidden;border:1px solid #d7d7d7}.dt-body-wrapper.dt-body-unfrozen{border-left-color:transparent;position:absolute;top:0;overflow-x:auto}.dt-loading-overlay{position:absolute;background-color:#9b9b9b;width:100%;height:100%;opacity:.1;z-index:1}.dt-loading-content{position:absolute;left:50%;top:25%;z-index:2}.dt-header{width:100%;display:flex;flex-flow:row nowrap;justify-content:space-between;color:#363636;border-bottom:1px solid #f1f1f1;margin-bottom:30px}.dt-header .dt-global-filter{flex:0 0;align-items:flex-start;font-size:18px}.dt-header .dt-global-actions{flex:0 0;align-items:flex-end}.dt-header .dt-action-combo{display:flex;flex-flow:row nowrap;color:#7d7d7d}.dt-header .dt-action-combo .ariba-icon,.dt-header .dt-action-combo .sap-icon{margin-left:15px;font-size:20px;align-self:center;cursor:pointer}.dt-header .dt-action-combo .dt-table-search{border-top-color:transparent;border-left-color:transparent;border-right-color:transparent}.dt-header .dt-action-combo .icon-resize{color:#4a4a4a;font-size:16px;line-height:18px;margin-right:15px}.u-dt-spin-icon{display:inline-block;-webkit-animation:2s linear infinite doSpin;animation:2s linear infinite doSpin}@-webkit-keyframes doSpin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes doSpin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.dt-full-screen-overlay{position:fixed;z-index:100;-webkit-transform-origin:50% 50%;transform-origin:50% 50%;transition:all .4s ease-in-out}.dt-full-screen{width:98vw;z-index:120;position:absolute;top:15px;pointer-events:all;transition:opacity .5s ease-in-out}.u-fs-element-out{display:none}"],
                    encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None
                },] },
    ];
    /** @nocollapse */
    DTWrapper.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
        { type: DomUtilsService },
        { type: Object, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"],] }] },
        { type: Datatable2Component, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return Datatable2Component; }),] }] }
    ]; };
    DTWrapper.propDecorators = {
        expandColorFrom: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        expandColorTo: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        heading: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: ['headingArea',] }],
        headerRows: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: ['headerRows',] }],
        bodyRows: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: ['bodyRows',] }],
        footer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: ['footerArea',] }],
        dtFullScreenOverlay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['dtFullScreenOverlay',] }],
        infiniteScroll: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['infiniteScroll',] }]
    };
    return DTWrapper;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *
 * This directive is responsible for checking and setting the widest content width onto
 * Column component as the widestCell property.
 *
 * We use this directive inside dt-column.component to store a current width for each td,th
 *
 *
 */
var SetCellMaxWidthDirective = /** @class */ (function () {
    function SetCellMaxWidthDirective(element, render, td) {
        this.element = element;
        this.render = render;
        this.td = td;
    }
    /**
     * @return {?}
     */
    SetCellMaxWidthDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    SetCellMaxWidthDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // console.log('Cell Max Width: ' + this.dtMaxWidth, this.dtMaxWidth > 0);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.dtMaxWidth) && this.dtMaxWidth > 0) {
            var /** @type {?} */ inlineData = this.element.nativeElement.querySelector('.dt-col-cell-data');
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(inlineData)) {
                inlineData.style.whiteSpace = 'nowrap';
                inlineData.style.display = 'inline-block';
                var /** @type {?} */ cellWidth = inlineData.offsetWidth; // td
                inlineData.style.whiteSpace = 'normal';
                inlineData.style.display = 'inline';
                if (!this.isInThresHold(cellWidth)) {
                    return;
                }
                cellWidth += this.tdPadding();
                if (cellWidth > this.td.widthPx) {
                    if (cellWidth < this.dtMaxWidth) {
                        this.td.widestCell = cellWidth > this.td.widestCell ? cellWidth :
                            this.td.widestCell;
                    }
                    else if (cellWidth >= this.dtMaxWidth) {
                        this.td.widestCell = (this.dtMaxWidth > this.td.widestCell)
                            ? this.dtMaxWidth : this.td.widestCell;
                    }
                }
            }
        }
    };
    /**
     *
     * Is the new width the same as the one already set on the column? If yes then probably
     * new content does not differ that much. We still keep certain threshold as the new content
     * width might differ 1 or 2 pixes depending how set the css.
     *
     * To make sure we resize column only if necessary because it could be original size
     * is 400px but the new one is 401px since somewhere add some extra border we have this
     * safe threshold
     *
     */
    /**
     *
     * Is the new width the same as the one already set on the column? If yes then probably
     * new content does not differ that much. We still keep certain threshold as the new content
     * width might differ 1 or 2 pixes depending how set the css.
     *
     * To make sure we resize column only if necessary because it could be original size
     * is 400px but the new one is 401px since somewhere add some extra border we have this
     * safe threshold
     *
     * @param {?} newWidth
     * @return {?}
     */
    SetCellMaxWidthDirective.prototype.isInThresHold = /**
     *
     * Is the new width the same as the one already set on the column? If yes then probably
     * new content does not differ that much. We still keep certain threshold as the new content
     * width might differ 1 or 2 pixes depending how set the css.
     *
     * To make sure we resize column only if necessary because it could be original size
     * is 400px but the new one is 401px since somewhere add some extra border we have this
     * safe threshold
     *
     * @param {?} newWidth
     * @return {?}
     */
    function (newWidth) {
        if (this.td.widestCell > 0) {
            return Math.abs(this.td.widestCell - newWidth) > 3 && newWidth > this.td.widestCell;
        }
        return true;
    };
    /**
     * @return {?}
     */
    SetCellMaxWidthDirective.prototype.tdPadding = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ computedStyle = getComputedStyle(this.element.nativeElement);
        var /** @type {?} */ cell = parseInt(computedStyle.paddingLeft) || 0;
        cell += parseInt(computedStyle.paddingRight) || 0;
        cell += parseInt(computedStyle.borderRightWidth) || 0;
        cell += parseInt(computedStyle.borderLeftWidth) || 0;
        // plus give it some little space around the text so it nots px to px inner width of the td
        // cuz it could wrap
        cell += 5;
        return cell;
    };
    SetCellMaxWidthDirective.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                    selector: '[dtMaxWidth]'
                },] },
    ];
    /** @nocollapse */
    SetCellMaxWidthDirective.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] },
        { type: DTColumn2Component }
    ]; };
    SetCellMaxWidthDirective.propDecorators = {
        dtMaxWidth: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return SetCellMaxWidthDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Directive used inside DT in order to support table rows re-ordering. This manages all the
 * D&D necessary logic for this functionality.
 *
 * [dtDraggableRow] is used inside the `rowTemplate` like this:
 *
 *
 * ```html
 *
 * <ng-template #rowTemplate let-rowData let-even='event" let-odd="odd" let-rowIndex="rowIndex"
 *              let-nestingLevel="nestingLevel" let-colsToRender="colsToRender">
 *
 *     <tr #rowElement dtDraggableRow [dndRowIndex]="rowIndex"
 *          class="dt-body-row"
 *
 *
 *
 * ```
 *
 * which enabled or disables based on the used DT binding [dndRowEnabled]. By default its disabled.
 *
 *
 *
 */
var DTDraggableRowDirective = /** @class */ (function () {
    function DTDraggableRowDirective(element, dt, domUtils, ngZone) {
        this.element = element;
        this.dt = dt;
        this.domUtils = domUtils;
        this.ngZone = ngZone;
        /**
         *
         * Tells the directive if we enable middle row zone to create an effect that we are dropping
         * into the row. Used for outline DT mainly.
         *
         */
        this.dropIntoEnabled = false;
        /**
         * Current TR index number
         *
         */
        this.dndRowIndex = 0;
        /**
         * Holds information about our dragging direction UP and DOWN in order to assign correct style
         * that highlights the row at the top or bottom
         *
         */
        this.dragDir = DragDirection.None;
        /**
         * Indicates that we dragged our row and stopped in the middle of the other row
         *
         */
        this.inMiddle = false;
        /**
         *
         * Current drag Y coordinates which is used together with the dragDir when assinging dragging
         * direction.
         *
         */
        this.dragY = 0;
    }
    /**
     * @return {?}
     */
    DTDraggableRowDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.dt.dndRowEnabled) {
            this.setupEventListeners();
        }
    };
    /**
     * @return {?}
     */
    DTDraggableRowDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.dt.dndRowEnabled) {
            this.releaseEventListeners();
        }
    };
    /**
     * Setups listeners and returns handle to them so we can later on unsubscribe.
     * @return {?}
     */
    DTDraggableRowDirective.prototype.setupEventListeners = /**
     * Setups listeners and returns handle to them so we can later on unsubscribe.
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            _this.eventHandlers = {};
            _this.eventHandlers['mousedown'] = _this.onMouseDownEvent.bind(_this);
            _this.element.nativeElement.addEventListener('mousedown', _this.eventHandlers['mousedown']);
            _this.eventHandlers['dragstart'] = _this.onDragStartEvent.bind(_this);
            _this.element.nativeElement.addEventListener('dragstart', _this.eventHandlers['dragstart']);
            _this.eventHandlers['dragover'] = _this.onDragOverEvent.bind(_this);
            _this.element.nativeElement.addEventListener('dragover', _this.eventHandlers['dragover']);
            _this.eventHandlers['dragleave'] = _this.onDragLeaveEvent.bind(_this);
            _this.element.nativeElement.addEventListener('dragleave', _this.eventHandlers['dragleave']);
            _this.eventHandlers['drop'] = _this.onDropEvent.bind(_this);
            _this.element.nativeElement.addEventListener('drop', _this.eventHandlers['drop']);
            _this.eventHandlers['dragend'] = _this.onDragEndEvent.bind(_this);
            _this.element.nativeElement.addEventListener('dragend', _this.eventHandlers['dragend']);
        });
    };
    /**
     * Removes all the created listeners inside destroy() callback
     * @return {?}
     */
    DTDraggableRowDirective.prototype.releaseEventListeners = /**
     * Removes all the created listeners inside destroy() callback
     * @return {?}
     */
    function () {
        var _this = this;
        DragEvents.forEach(function (name) {
            document.removeEventListener('name', _this.eventHandlers[name]);
        });
    };
    /**
     *
     * This is first event where we:
     *
     *  - Mark element draggable to enable D&D
     *  - Set click position relative to the middle of the current row
     *      This is mainly needed when we are trying to calculate something for
     *      dropInto row (outline)
     *
     * event.target usually contains reference to TD element
     * @param {?} event
     * @return {?}
     */
    DTDraggableRowDirective.prototype.onMouseDownEvent = /**
     *
     * This is first event where we:
     *
     *  - Mark element draggable to enable D&D
     *  - Set click position relative to the middle of the current row
     *      This is mainly needed when we are trying to calculate something for
     *      dropInto row (outline)
     *
     * event.target usually contains reference to TD element
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.altKey && this.domUtils.hasParent(event.target, '.dt-row-draggable')) {
            this.element.nativeElement.draggable = true;
            var /** @type {?} */ elToBeDragged = this.domUtils.elementDimensions(event.target);
            this.dt.env.setValue('ddClickDeviance', (elToBeDragged.height / 2) - event.offsetY);
        }
        else {
            this.element.nativeElement.draggable = false;
        }
    };
    /**
     * This is second triggered event when the actual dragging starts. Here we need to disable
     * dragged row and save information that are common to a table.
     *
     * Marking row disabled with the style .dt-row-dragging using setTimeout is needed as
     * if we would go without it then D&D framework would create a copy of row in disabled state.
     * Now we grab a row with active state and after a 200ms delay we disable the original row.
     *
     * @param {?} event
     * @return {?}
     */
    DTDraggableRowDirective.prototype.onDragStartEvent = /**
     * This is second triggered event when the actual dragging starts. Here we need to disable
     * dragged row and save information that are common to a table.
     *
     * Marking row disabled with the style .dt-row-dragging using setTimeout is needed as
     * if we would go without it then D&D framework would create a copy of row in disabled state.
     * Now we grab a row with active state and after a 200ms delay we disable the original row.
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        setTimeout(function () {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(event.target.classList)) {
                event.target.classList.add('dt-row-dragging');
            }
        }, 200);
        this.dt.env.setValue('isDragging', true);
        this.dt.env.setValue('dndId', this.dndRowIndex);
        event.dataTransfer.setData('text', this.dndRowIndex);
    };
    /**
     *
     * This events happens anytime as we drag over rows. This event triggered after certain
     * delay. In here we calculate the mouse movement to identify if we are going UP or DOWN.
     *
     * This is mainly needed to mark a row with the correct line on TOP or BOTTOM to visually
     * show a user where we are.
     *
     * Once we know the direction and the drop target is valid we mark the row with correct class
     * that does the trick
     * @param {?} event
     * @return {?}
     */
    DTDraggableRowDirective.prototype.onDragOverEvent = /**
     *
     * This events happens anytime as we drag over rows. This event triggered after certain
     * delay. In here we calculate the mouse movement to identify if we are going UP or DOWN.
     *
     * This is mainly needed to mark a row with the correct line on TOP or BOTTOM to visually
     * show a user where we are.
     *
     * Once we know the direction and the drop target is valid we mark the row with correct class
     * that does the trick
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.dataTransfer.dropEffect = 'move';
        if (this.dragY < event.pageY) {
            this.dragDir = DragDirection.Down;
        }
        else if (this.dragY > event.pageY) {
            this.dragDir = DragDirection.Up;
        }
        // dont set again unless its different
        if (this.dragY !== event.pageY) {
            this.dragY = event.pageY;
        }
        if (this.isValidDropTarget(event)) {
            // todo test this preventDefault() so it does not create some sideeffect
            event.preventDefault();
            this.markRowWithClass(event, this.domUtils.closest(event.target, 'tr'));
        }
    };
    /**
     * This is finishing event just before D&D is done. It takes current information and
     * broadcast them to the DT so DT can do necessary row reordering
     *
     *
     * @param {?} event
     * @return {?}
     */
    DTDraggableRowDirective.prototype.onDropEvent = /**
     * This is finishing event just before D&D is done. It takes current information and
     * broadcast them to the DT so DT can do necessary row reordering
     *
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.clearClasses(event.target.parentElement);
        // event.preventDefault();
        var /** @type {?} */ origIndx = this.dt.env.getValue('dndId');
        var /** @type {?} */ dropPos = this.inMiddle ? DropPosition.Into : (this.dragDir === DragDirection.Up ? DropPosition.Before : DropPosition.After);
        this.dt.onDnDRowDrop(origIndx, this.dndRowIndex, dropPos);
        this.inMiddle = false;
        this.dragY = 0;
    };
    /**
     * Every time we drag over the element we apply some classes to the it. this method does the
     * opposite which is to remove everything so we are ready for the next row
     *
     *
     * @param {?} event
     * @return {?}
     */
    DTDraggableRowDirective.prototype.onDragLeaveEvent = /**
     * Every time we drag over the element we apply some classes to the it. this method does the
     * opposite which is to remove everything so we are ready for the next row
     *
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ tr = this.domUtils.closest(event.target, 'tr');
        this.clearClasses(tr);
        this.dt.env.deleteValue('dndOnHoldIndex');
    };
    /**
     *
     * This is last event within D&D flow. Mainly used to clean up all the resource that has not
     * been clean up already inside onDropEvent.
     *
     * @param {?} event
     * @return {?}
     */
    DTDraggableRowDirective.prototype.onDragEndEvent = /**
     *
     * This is last event within D&D flow. Mainly used to clean up all the resource that has not
     * been clean up already inside onDropEvent.
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(event.target.classList)) {
            event.target.classList.remove('dt-row-dragging');
        }
        this.clearClasses(event.target);
        this.element.nativeElement.draggable = false;
        this.dt.env.deleteValue('isDragging');
        this.dt.env.deleteValue('dndId');
        this.dt.env.deleteValue('ddClickDeviance');
    };
    /**
     * Assign CSS classes to the row to create an highlighting effect to capture current position
     * for the user.
     *
     * Based on the Drag direction we either apply
     * css class that creates a line on top or bottom.  Only for the dropInto functionality we
     * need to calculate some more to identify if we are really in the middle of the row.
     *
     * DropInto:
     * ---------
     *
     * Initially we captured a position (in mousedown) the distance to the middle of the row and
     * this we are using here with some threshold of 2 pixes so we dont have to be exactly on pixel
     * perfect.
     *
     * - let currentTrCenter = this.domUtils.elementDimensions(activeRow).height / 2;
     *      Read center of current row
     *
     * - let draggedTrCenter = event.offsetY + this.dt.env.getValue('ddClickDeviance');
     *      Read mouse coordinates relative to current row/td and add to it our deviation.
     *
     *
     * @param {?} event
     * @param {?} activeRow
     * @return {?}
     */
    DTDraggableRowDirective.prototype.markRowWithClass = /**
     * Assign CSS classes to the row to create an highlighting effect to capture current position
     * for the user.
     *
     * Based on the Drag direction we either apply
     * css class that creates a line on top or bottom.  Only for the dropInto functionality we
     * need to calculate some more to identify if we are really in the middle of the row.
     *
     * DropInto:
     * ---------
     *
     * Initially we captured a position (in mousedown) the distance to the middle of the row and
     * this we are using here with some threshold of 2 pixes so we dont have to be exactly on pixel
     * perfect.
     *
     * - let currentTrCenter = this.domUtils.elementDimensions(activeRow).height / 2;
     *      Read center of current row
     *
     * - let draggedTrCenter = event.offsetY + this.dt.env.getValue('ddClickDeviance');
     *      Read mouse coordinates relative to current row/td and add to it our deviation.
     *
     *
     * @param {?} event
     * @param {?} activeRow
     * @return {?}
     */
    function (event, activeRow) {
        this.clearClasses(activeRow);
        // Check if drag item is in the middle of other row
        var /** @type {?} */ currentTrCenter = this.domUtils.elementDimensions(activeRow).height / 2;
        var /** @type {?} */ draggedTrCenter = event.offsetY + this.dt.env.getValue('ddClickDeviance');
        if (this.dropIntoEnabled) {
            this.inMiddle = Math.abs(currentTrCenter - draggedTrCenter) < 2;
        }
        if (this.inMiddle) {
            activeRow.classList.add(DragDirection.Middle);
        }
        else {
            activeRow.classList.add(this.dragDir);
        }
    };
    /**
     *
     * Drop target must be only another TR and it cannot be the element itself the one we are
     * dragging and it does not make sense to allow to drop to the same position we started from
     *
     * @param {?} event
     * @return {?}
     */
    DTDraggableRowDirective.prototype.isValidDropTarget = /**
     *
     * Drop target must be only another TR and it cannot be the element itself the one we are
     * dragging and it does not make sense to allow to drop to the same position we started from
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ origInx = this.dt.env.getValue('dndId');
        var /** @type {?} */ siblingRow = this.dndRowIndex - origInx;
        return event.target.parentElement.tagName === 'TR' && this.dndRowIndex !== origInx &&
            !(siblingRow === 1 && this.dragDir === DragDirection.Up) &&
            !(siblingRow === -1 && this.dragDir === DragDirection.Down);
    };
    /**
     *  private
     *
     * @param {?} tr
     * @return {?}
     */
    DTDraggableRowDirective.prototype.clearClasses = /**
     *  private
     *
     * @param {?} tr
     * @return {?}
     */
    function (tr) {
        tr.classList.remove('dt-drag-row-top');
        tr.classList.remove('dt-drag-row-bottom');
        tr.classList.remove('dt-drag-row-both');
    };
    /**
     *  private
     *
     * @return {?}
     */
    DTDraggableRowDirective.prototype.dragDirToString = /**
     *  private
     *
     * @return {?}
     */
    function () {
        switch (this.dragDir) {
            case DragDirection.Up:
                return 'Up';
            case DragDirection.Down:
                return 'Down';
            default:
                return 'Not Sure';
        }
    };
    DTDraggableRowDirective.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                    selector: '[dtDraggableRow]'
                },] },
    ];
    /** @nocollapse */
    DTDraggableRowDirective.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
        { type: Datatable2Component, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return Datatable2Component; }),] }] },
        { type: DomUtilsService },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] }
    ]; };
    DTDraggableRowDirective.propDecorators = {
        dropIntoEnabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        dndRowIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return DTDraggableRowDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWDatatable2Module = /** @class */ (function () {
    function AWDatatable2Module() {
    }
    AWDatatable2Module.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        Datatable2Component,
                        DTWrapper,
                        DTColumn2Component,
                        DTHeaderComponent2,
                        DTDetailRowComponent,
                        DTDetailRowExpanderComponent,
                        DTMultiSelectColumnComponent,
                        DTSingleSelectColumnComponent,
                        DTDraggableRowDirective,
                        SetCellMaxWidthDirective
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                        AWCoreComponentModule,
                        AWCheckBoxModule,
                        AWOutlineForModule,
                        AWRadioButtonModule,
                        AWInputFieldModule
                    ],
                    entryComponents: [
                        DTDetailRowExpanderComponent,
                        DTMultiSelectColumnComponent,
                        DTSingleSelectColumnComponent
                    ],
                    exports: [
                        Datatable2Component,
                        DTColumn2Component,
                        AWOutlineForModule,
                        DTHeaderComponent2,
                        DTDetailRowComponent
                    ],
                    providers: []
                },] },
    ];
    return AWDatatable2Module;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * An confirmation header area.
 *
 * See {\@link ConfirmationComponent} for more explanation.
 */
var ConfirmationHeaderComponent = /** @class */ (function () {
    function ConfirmationHeaderComponent() {
    }
    ConfirmationHeaderComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-confirmation-header',
                    template: '<ng-content></ng-content>'
                },] },
    ];
    return ConfirmationHeaderComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * An confirmation header area.
 *
 * See {\@link ConfirmationComponent} for more explanation.
 */
var ConfirmationFooterComponent = /** @class */ (function () {
    function ConfirmationFooterComponent() {
    }
    ConfirmationFooterComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-confirmation-footer',
                    template: '<ng-content></ng-content>'
                },] },
    ];
    return ConfirmationFooterComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Confirmation Component is a specific version of the dialog where it supports confirm and cancel
 * functionality. It behaves like a dialog, is modal, and not closable by default.
 *
 * There are three types of popup.
 *   1.  a regular dialog box that has header, body and footer. It's the most customizable.
 *   2.  a confirmation box is similar to a dialog box but has accept and reject action buttons.
 *   3.  a overlay, which is a very basic popup with what you put inside.
 *       It doesn't have header and footer.
 *
 * There are two ways to use any popup component.
 *   1.  Either directly by using component, aw-dialog, aw-confirmation or aw-overlay
 *   2.  or the ModalService  service.open(<ConfirmationComponent>), service.close()
 *
 * Usage:
 *    1.  Using ModalService directly to display a modal popup. This usage is a quick way to show
 *        a confirmation to the user.
 *
 *          this.modalService.open<ConfirmationComponent>(ConfirmationComponent, {
 *                        title: 'Confirmation',
 *                        body: ` Are you sure ? `,
 *                        width: 300,
 *                        onConfirm: () => {
 *                              this.confirmAction();
 *                        },
 *                        onCancel: () => {
 *                              this.cancelAction();
 *                        }
 *           });
 *
 *
 *   2.   Use the component inside your template.
 *
 * \@Component({
 *                selector: 'aw-page' ,
 *                           template: `
 *                              <aw-confirmation [title]="'Confirmation'"
 *                                      [(visible)]="display"
 *                                     (onConfirm)="confirmAction()"
 *                                    (onCancel)="cancelAction()">
 *                                       <i class="sap-icon icon-alert"></i>
 *                                       Are you sure you want to delete your hard drive?
 *                            </aw-confirmation>
 *
 *                                   <aw-button [size]="'small'" (click)="open()">
 *                                       Open Confirmation
 *                                   </aw-button>
 *                  `
 *         export class MyPageComponent implements OnInit {
 *
 *                     display: boolean = false;
 *
 *                     confirmAction: string;
 *
 *                     constructor(private modalService: ModalService) {
 *                          super();
 *                       }
 *                     ngOnInit() { }
 *
 *                     open() {
 *                        this.display = true;
 *                     }
 *
 *                     confirmAction()  {
 *                        this.confirmAction = "confirmed";
 *                      }
 *
 *                      close() {
 *                         this.display = false;
 *                      }
 *
 *                      cancelAction() {
 *                          this.confirmAction = "canceled";
 *                      }
 *
 *       }
 *
 *
 */
var ConfirmationComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(ConfirmationComponent, _super);
    function ConfirmationComponent(env) {
        var _this = _super.call(this, env) || this;
        _this.env = env;
        /**
         * support two way data binding on visible property.
         */
        _this.visibleChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Whether there's an x at the top right that makes the dialog closable.
         */
        _this.closable = false;
        /**
         * Event fired when dialog is closed.
         */
        _this.onClose = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Event fired when the dialog is opened.
         */
        _this.onOpen = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Fired when user clicked on confirm button.
         */
        _this.onConfirm = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Fired when user clicked on cancel button.
         */
        _this.onCancel = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.width = 400;
        _this.height = 'auto';
        // Todo: internationalize.
        // Todo: internationalize.
        _this.confirmActionLabel = 'Confirm';
        _this.cancelActionLabel = 'Cancel';
        return _this;
    }
    /**
     * open confirmation.
     */
    /**
     * open confirmation.
     * @return {?}
     */
    ConfirmationComponent.prototype.open = /**
     * open confirmation.
     * @return {?}
     */
    function () {
        this.visible = true;
        this.onOpen.emit();
        this.visibleChange.emit(true);
    };
    /**
     * close confirmation.
     */
    /**
     * close confirmation.
     * @return {?}
     */
    ConfirmationComponent.prototype.close = /**
     * close confirmation.
     * @return {?}
     */
    function () {
        this.visible = false;
        this.onClose.emit();
        // Important to make sure change is set on parent binding.
        // Otherwise, the variable and dialog open/close state can be out
        // of sync and we wouldn't trigger change detection.
        this.visibleChange.emit(false);
    };
    /**
     * Does the confirmation have header content?
     */
    /**
     * Does the confirmation have header content?
     * @return {?}
     */
    ConfirmationComponent.prototype.hasHeader = /**
     * Does the confirmation have header content?
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.header);
    };
    /**
     * Does the confirmation have footer content?
     */
    /**
     * Does the confirmation have footer content?
     * @return {?}
     */
    ConfirmationComponent.prototype.hasFooter = /**
     * Does the confirmation have footer content?
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.footer);
    };
    /**
     * Confirm action.
     */
    /**
     * Confirm action.
     * @return {?}
     */
    ConfirmationComponent.prototype.confirm = /**
     * Confirm action.
     * @return {?}
     */
    function () {
        this.close();
        this.onConfirm.emit();
    };
    /**
     * Cancel action.
     */
    /**
     * Cancel action.
     * @return {?}
     */
    ConfirmationComponent.prototype.cancel = /**
     * Cancel action.
     * @return {?}
     */
    function () {
        this.close();
        this.onCancel.emit();
    };
    ConfirmationComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-confirmation',
                    template: "<aw-dialog [title]=\"title\" [(visible)]=\"visible\"\n           [modal]=\"true\" [closable]=\"closable\" [width]=\"width\" [height]=\"height\"\n           [styleClass]=\"styleClass\" [appendTo]=\"appendTo\" (onOpen)=\"open()\" (onClose)=\"close()\">\n\n    <aw-dialog-header *ngIf=\"hasHeader()\">\n        <ng-content select=\"aw-confirmation-header\"></ng-content>\n    </aw-dialog-header>\n\n    {{body}}\n    <ng-content></ng-content>\n\n\n    <aw-dialog-footer *ngIf=\"hasFooter(); else defaultFooter\">\n        <ng-content select=\"aw-confirmation-footer\"></ng-content>\n    </aw-dialog-footer>\n\n    <ng-template #defaultFooter>\n        <aw-dialog-footer>\n            <aw-button name=\"confirm\" [style]=\"'primary'\" (action)=\"confirm()\">\n                {{confirmActionLabel}}\n            </aw-button>\n\n            <aw-button name=\"cancel\" [style]=\"'secondary'\" (action)=\"cancel()\">\n                {{cancelActionLabel}}\n            </aw-button>\n\n        </aw-dialog-footer>\n    </ng-template>\n\n</aw-dialog>\n",
                    styles: [".confirmation-footer-separator{border-top:1px solid #d7d7d7;height:14px}"]
                },] },
    ];
    /** @nocollapse */
    ConfirmationComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] }
    ]; };
    ConfirmationComponent.propDecorators = {
        title: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        body: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        confirmActionLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        cancelActionLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        visibleChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        closable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        appendTo: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        onClose: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        onOpen: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        onConfirm: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        onCancel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        header: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [ConfirmationHeaderComponent,] }],
        footer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [ConfirmationFooterComponent,] }]
    };
    return ConfirmationComponent;
}(ModalContainer));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWConfirmationModule = /** @class */ (function () {
    function AWConfirmationModule() {
    }
    AWConfirmationModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        ConfirmationComponent,
                        ConfirmationHeaderComponent,
                        ConfirmationFooterComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        AWCoreComponentModule,
                        AWDialogModule,
                        AWButtonModule
                    ],
                    entryComponents: [
                        ModalComponent,
                        ConfirmationComponent,
                        ConfirmationHeaderComponent,
                        ConfirmationFooterComponent
                    ],
                    exports: [
                        ConfirmationComponent,
                        ConfirmationHeaderComponent,
                        ConfirmationFooterComponent
                    ],
                    providers: []
                },] },
    ];
    return AWConfirmationModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *
 * Container panel providing scrolling functionality for its children. You can configure this
 * container to let it to scroll its content either horizontally, vertically or let the content
 * wrap.
 *
 *
 * Usage is pretty simple:
 *
 *  ### Example using horizontal scroll (default behavior):
 *
 *  ```
 *            <aw-scrollable>
 *                  <w-demo-card> Card 1</w-demo-card>
 *                  <w-demo-card> Card 2</w-demo-card>
 *                  <w-demo-card> Card 3</w-demo-card>
 *                  <w-demo-card> Card 4</w-demo-card>
 *                  <w-demo-card> Card 5</w-demo-card>
 *                  <w-demo-card> Card 6</w-demo-card>
 *                  <w-demo-card> Card 7</w-demo-card>
 *                  <w-demo-card> Card 8</w-demo-card>
 *                  <w-demo-card> Card 9</w-demo-card>
 *              </aw-scrollable>
 *
 *  ```
 *
 *  ### Example using vertical scroll:
 *
 *  ```
 *            <aw-scrollable [direction]="'vertical'" [height]="'40vh'">
 *                  <w-demo-card> Card 1</w-demo-card>
 *                  <w-demo-card> Card 2</w-demo-card>
 *                  <w-demo-card> Card 3</w-demo-card>
 *                  <w-demo-card> Card 4</w-demo-card>
 *                  <w-demo-card> Card 5</w-demo-card>
 *                  <w-demo-card> Card 6</w-demo-card>
 *                  <w-demo-card> Card 7</w-demo-card>
 *                  <w-demo-card> Card 8</w-demo-card>
 *                  <w-demo-card> Card 9</w-demo-card>
 *              </aw-scrollable>
 *
 * ```
 *
 *  ### Example scrolling is disabled and content wraps and centers:
 *
 *  ```
 *            <aw-scrollable [direction]="'none'" [alignment]="'center'">
 *                  <w-demo-card> Card 1</w-demo-card>
 *                  <w-demo-card> Card 2</w-demo-card>
 *                  <w-demo-card> Card 3</w-demo-card>
 *                  <w-demo-card> Card 4</w-demo-card>
 *                  <w-demo-card> Card 5</w-demo-card>
 *                  <w-demo-card> Card 6</w-demo-card>
 *                  <w-demo-card> Card 7</w-demo-card>
 *                  <w-demo-card> Card 8</w-demo-card>
 *                  <w-demo-card> Card 9</w-demo-card>
 *              </aw-scrollable>
 *  ```
 *
 * ### Height property:
 *
 * When using "horizontal scrolling" it set "flexbox-direction" to "row" where height
 * is set automatically based on its content. The height should be always 100% when using
 * this in parent container.
 *
 * If "vertical scrolling" is used you need to make sure that:
 *   - your parent container sets the boundaries with correctly set width and height
 *   otherwise it will use 100% of the viewport
 *   - if used as standalone you need to limit the height otherwise it will expand to 100% of
 *   the document
 *
 *
 *
 *
 */
var ScrollableContainerComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(ScrollableContainerComponent, _super);
    function ScrollableContainerComponent(env, elementRef) {
        var _this = _super.call(this, env) || this;
        _this.env = env;
        _this.elementRef = elementRef;
        /**
         * Defines scrolling direction of the container meaning tells which overflow axies will be
         * disabled or enabled.
         *
         * Default value is "horizontal": Here we lock overflow-y and overflow-x set to auto.
         *
         * When scrolling direction is "vertical" please make sure you maintain correct height and
         * width.
         *
         */
        _this.direction = 'horizontal';
        /**
         * Defines how flexbox container items should be aligned. Default behavior is LEFT
         *
         */
        _this.alignment = 'left';
        _this.height = '100%';
        _this.width = '100%';
        return _this;
    }
    /**
     * @return {?}
     */
    ScrollableContainerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initDefault();
    };
    /**
     * Make sure we re-initialize default when Input Bindings changes
     *
     */
    /**
     * Make sure we re-initialize default when Input Bindings changes
     *
     * @param {?} changes
     * @return {?}
     */
    ScrollableContainerComponent.prototype.ngOnChanges = /**
     * Make sure we re-initialize default when Input Bindings changes
     *
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.initDefault();
    };
    /**
     * Initialize default values and Calculates layout and alignment class. The reason for using
     * these utility classes is that we can change the behavior anytime as compared to using
     * directly [style.xxx] bindings.
     *
     * ### Direction flow class:
     *  - u-scrollable-f<direction>
     *
     * ### Alignment class:
     *  - u-scrollable-a<alignment>
     *
     * @return {?}
     */
    ScrollableContainerComponent.prototype.initDefault = /**
     * Initialize default values and Calculates layout and alignment class. The reason for using
     * these utility classes is that we can change the behavior anytime as compared to using
     * directly [style.xxx] bindings.
     *
     * ### Direction flow class:
     *  - u-scrollable-f<direction>
     *
     * ### Alignment class:
     *  - u-scrollable-a<alignment>
     *
     * @return {?}
     */
    function () {
        this.layoutClass = 'u-scrollable-fh';
        if (this.direction === 'vertical') {
            this.layoutClass = 'u-scrollable-fv';
        }
        if (this.direction === 'vertical-row') {
            this.layoutClass = 'u-scrollable-fv-row';
        }
        else if (this.direction === 'both') {
            this.layoutClass = 'u-scrollable-fb';
        }
        else if (this.direction === 'none') {
            this.layoutClass = 'u-scrollable-fn';
        }
        this.layoutClass += ' u-scrollable-a' + this.alignment.substring(0, 1);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.styleClass)) {
            this.layoutClass += " " + this.styleClass;
        }
        // make sure we default width and height to some value in case somebody passes null
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.width)) {
            this.width = '100%';
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.height)) {
            this.height = '100%';
        }
    };
    /**
     * Tells if the horizontal scrollbar is visible
     *
     */
    /**
     * Tells if the horizontal scrollbar is visible
     *
     * @return {?}
     */
    ScrollableContainerComponent.prototype.hasHorizontalScroll = /**
     * Tells if the horizontal scrollbar is visible
     *
     * @return {?}
     */
    function () {
        var /** @type {?} */ scrollContainer = this.elementRef.nativeElement.querySelector('.w-scrollable');
        return scrollContainer.scrollWidth > scrollContainer.clientWidth;
    };
    /**
     * Tells if the vertical scrollbar is visible
     *
     */
    /**
     * Tells if the vertical scrollbar is visible
     *
     * @return {?}
     */
    ScrollableContainerComponent.prototype.hasVerticalScroll = /**
     * Tells if the vertical scrollbar is visible
     *
     * @return {?}
     */
    function () {
        var /** @type {?} */ scrollContainer = this.elementRef.nativeElement.querySelector('.w-scrollable');
        return scrollContainer.scrollHeight > scrollContainer.clientHeight;
    };
    ScrollableContainerComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-scrollable',
                    template: "<div class=\"w-scrollable\" [ngClass]=\"layoutClass\" [style.width]=\"width\"\n     [style.height]=\"height\">\n    <ng-content></ng-content>\n</div>\n",
                    styles: [".w-scrollable{display:flex;display:-webkit-flex;backface-visibility:hidden;-webkit-backface-visibility:hidden;will-change:overflow}.w-scrollable /deep/>*{flex:0 0 auto;-webkit-flex:0 0 auto;-ms-flex:0 0 auto;margin:10px}.u-scrollable-fh{flex-flow:row nowrap;overflow-x:auto;overflow-y:hidden}.u-scrollable-fv{flex-flow:column nowrap;overflow-x:hidden;overflow-y:auto}.u-scrollable-fb{flex-flow:row nowrap;overflow-x:auto;overflow-y:auto}.u-scrollable-fv-row{flex-flow:row wrap;overflow-x:hidden;overflow-y:auto}.u-scrollable-fn{flex-flow:row wrap}.u-scrollable-al{justify-content:flex-start;-webkit-justify-content:flex-start}.u-scrollable-ar{justify-content:flex-end;-webkit-justify-content:flex-end}.u-scrollable-ac{justify-content:center;-webkit-justify-content:center}.u-scrollable-aj,.u-scrollable-aj-around{justify-content:space-between;-webkit-justify-content:space-between}"]
                },] },
    ];
    /** @nocollapse */
    ScrollableContainerComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
    ]; };
    ScrollableContainerComponent.propDecorators = {
        direction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        alignment: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return ScrollableContainerComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWScrollableContainerModule = /** @class */ (function () {
    function AWScrollableContainerModule() {
    }
    AWScrollableContainerModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        ScrollableContainerComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"]
                    ],
                    entryComponents: [
                        ScrollableContainerComponent
                    ],
                    exports: [
                        ScrollableContainerComponent
                    ],
                    providers: []
                },] },
    ];
    return AWScrollableContainerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ LB_CONTROL_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return ListComponent; }),
    multi: true
};
/**
 *
 * The List component represent a structure which contains a list of selectable items. Items
 * selection can be configured in single-selection, multi-selection or multi-selection with visible
 * checkboxes mode.
 * In addition it can display data inside 3 zones LEFT, MIDDLE and RIGHT in order to provide
 * easy way for application developer to layout its own custom content or even change out of box
 * behavior.
 *
 *
 *  ### Examples
 *
 *  1. Render simple single selection list
 *
 *  ```html
 *
 *      <aw-list [list]="list"></aw-list>
 *
 *  ```
 *  2. Render list - multi selection with custom RIGHT content to show a CheckMark when item
 *  is selected
 *
 *  ```html
 *
 *   <aw-list #awlist [list]="list"
 *                       height="150px"
 *                       width="250px"
 *                       [selectionMode]="'multi'">
 *
 *                  <ng-template #right let-item>
 *
 *                      <span class="sap-icon"
 *                            [ngClass]="{'icon-accept': awlist.pListBox.isSelected(item),
 *                            '': !awlist.pListBox.isSelected(item)}">
 *
 *                      </span>
 *                  </ng-template>
 *   </aw-list>
 *
 *  ```
 *
 * 3. Render list - multi selection with visible checkboxes and custom MIDDLE content to change
 *  the way item name is rendered
 *
 *
 *
 *  ```html
 *
 *   <aw-list [list]="list" height="180px"
 *                       width="200px"
 *                       [selection]="selection"
 *                       [selectionMode]="'multiWithCheckbox'">
 *
 *                  <ng-template #middle let-item>
 *                      XX-{{item.value}}
 *                  </ng-template>
 *    </aw-list>
 *
 *  ```
 *
 *
 *
 */
var ListComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(ListComponent, _super);
    function ListComponent(env, parentContainer) {
        var _this = _super.call(this, env, parentContainer) || this;
        _this.env = env;
        _this.parentContainer = parentContainer;
        /**
         * Component recognizes 3 modes: single, multi, multi with visible checkboxes
         */
        _this.selectionMode = 'single';
        /**
         * Don't render Listbox border. Used for embedding this inside other components
         *
         */
        _this.borderless = false;
        /**
         * Triggered when we double click on the list Item
         *
         */
        _this.action = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Event fired when user select a item
         *
         */
        _this.onSelection = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.listStyle = {};
        _this.isMultiple = false;
        _this.showCheckbox = false;
        return _this;
    }
    /**
     * @return {?}
     */
    ListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.isMultiple = this.selectionMode === 'multi' ||
            this.selectionMode === 'multiWithCheckbox';
        this.showCheckbox = this.selectionMode === 'multiWithCheckbox';
        // cannot have both either we use field to get display value or valueTransformer
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.field) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.valueTransformer)) {
            throw new Error('You can have either [field] or [valueTransformer].');
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.list)) {
            this.initList();
        }
        else {
            throw new Error('Missing [list] binding.');
        }
        // Also add overflowY to make sure it can scroll and does not expand based on its content
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.height)) {
            this.listStyle['height'] = this.height;
            this.listStyle['overflow-y'] = 'auto';
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.width)) {
            this.listStyle['width'] = this.width;
        }
        if (this.borderless) {
            this.listStyle['border-color'] = 'transparent';
        }
        if (this.isStandalone) {
            _super.prototype.registerFormControl.call(this, this.selection);
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.selection)) {
                this.selection = this.formControl.value;
            }
        }
    };
    /**
     *
     * Since we are using <aw-checkbox> we need to have custom handling both when clicking on the
     * checkbox as well as item text.
     *
     *
     */
    /**
     *
     * Since we are using <aw-checkbox> we need to have custom handling both when clicking on the
     * checkbox as well as item text.
     *
     *
     * @param {?} event
     * @param {?} item
     * @param {?} checkbox
     * @return {?}
     */
    ListComponent.prototype.itemClicked = /**
     *
     * Since we are using <aw-checkbox> we need to have custom handling both when clicking on the
     * checkbox as well as item text.
     *
     *
     * @param {?} event
     * @param {?} item
     * @param {?} checkbox
     * @return {?}
     */
    function (event, item, checkbox) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(checkbox)) {
            this.pListBox.onCheckboxClick(event, item);
        }
        else if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.pListBox)) {
            this.pListBox.onOptionClick(event, item);
            event.stopPropagation();
            event.preventDefault();
        }
    };
    /**
     * Internal
     *
     */
    /**
     * Internal
     *
     * @return {?}
     */
    ListComponent.prototype.hasRightTempl = /**
     * Internal
     *
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.rZoneTempl);
    };
    /**
     * @return {?}
     */
    ListComponent.prototype.hasLeftTempl = /**
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.lZoneTempl);
    };
    /**
     * @return {?}
     */
    ListComponent.prototype.hasMiddleTempl = /**
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.mZoneTempl);
    };
    /**
     *
     * Triggered by p-listbox component when item is selected. When state is managed internally
     * we also update FormControl model.
     *
     */
    /**
     *
     * Triggered by p-listbox component when item is selected. When state is managed internally
     * we also update FormControl model.
     *
     * @param {?} event
     * @return {?}
     */
    ListComponent.prototype.onItemSelected = /**
     *
     * Triggered by p-listbox component when item is selected. When state is managed internally
     * we also update FormControl model.
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(event.value)) {
            return;
        }
        this.onSelection.emit(event.value);
        if (this.isStandalone) {
            this.formControl.setValue(event.value, { emitEvent: true });
        }
        this.onModelChanged(event.value);
    };
    /**
     * Internal. Please see ControlValueAccessor
     *
     */
    /**
     * Internal. Please see ControlValueAccessor
     *
     * @param {?} value
     * @return {?}
     */
    ListComponent.prototype.writeValue = /**
     * Internal. Please see ControlValueAccessor
     *
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["equals"])(value, this.selection)) {
            this.selection = value;
            if (this.isStandalone) {
                this.formControl.setValue(value);
            }
        }
    };
    /**
     * Translates external form of the list into PrimeNG expected format where it uses
     * SelectionItem interface
     * @return {?}
     */
    ListComponent.prototype.initList = /**
     * Translates external form of the list into PrimeNG expected format where it uses
     * SelectionItem interface
     * @return {?}
     */
    function () {
        var _this = this;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.list)) {
            this.internalList = this.list.map(function (item) {
                return { label: _this.displayValue(item), value: item };
            });
        }
    };
    /**
     *  Generates label value for the list box.
     *
     * @param {?} item
     * @return {?}
     */
    ListComponent.prototype.displayValue = /**
     *  Generates label value for the list box.
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(item)) {
            return '';
        }
        var /** @type {?} */ val = item.toString();
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.field)) {
            val = item[this.field];
        }
        else if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.valueTransformer)) {
            val = this.valueTransformer(item);
        }
        return val;
    };
    ListComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-list',
                    template: "<p-listbox #listbox [options]=\"internalList\" [multiple]=\"isMultiple\" [checkbox]=\"showCheckbox\"\n           [(ngModel)]=\"selection\" [disabled]=\"disabled\" [style]=\"listStyle\" [showToggleAll]=\"false\"\n           (onChange)=\"onItemSelected($event)\" (onDblClick)=\"action.emit($event.value)\"\n           [styleClass]=\"styleClass\">\n\n\n    <ng-template let-item pTemplate=\"item\">\n        <div class=\"w-li-wrapper\">\n            <div class=\"w-li-left\">\n                <ng-template *ngIf=\"hasLeftTempl(); else defaultLeft\"\n                             [ngTemplateOutlet]=\"lZoneTempl\"\n                             [ngTemplateOutletContext]=\"{$implicit: item}\"></ng-template>\n\n\n                <ng-template #defaultLeft>\n                    <aw-checkbox #check *ngIf=\"isMultiple && showCheckbox\"\n                                 [isStandalone]=\"false\"\n                                 [value]=\"listbox.isSelected(item)\"\n                                 type=\"action\"\n                                 (action)=\"itemClicked($event, item, check)\">\n                    </aw-checkbox>\n                </ng-template>\n            </div>\n\n            <div class=\"w-li-middle\" (click)=\"itemClicked($event, item, null)\">\n\n                <ng-template *ngIf=\"hasMiddleTempl(); else defaultMiddle\"\n                             [ngTemplateOutlet]=\"mZoneTempl\"\n                             [ngTemplateOutletContext]=\"{$implicit: item}\"></ng-template>\n\n                <ng-template #defaultMiddle>\n                    {{item.label}}\n                </ng-template>\n\n            </div>\n\n            <div class=\"w-li-right\" *ngIf=\"hasRightTempl()\">\n                <ng-template [ngTemplateOutlet]=\"rZoneTempl\"\n                             [ngTemplateOutletContext]=\"{$implicit: item}\">\n                </ng-template>\n\n            </div>\n        </div>\n    </ng-template>\n</p-listbox>\n",
                    styles: ["::ng-deep .ui-listbox-item>.ui-chkbox{display:none}::ng-deep .ui-listbox-item .ui-chkbox{margin-right:1em}.w-li-wrapper{display:flex;align-items:flex-start}.w-li-wrapper .w-li-left,.w-li-wrapper .w-li-right{flex:0 1 auto}.w-li-wrapper .w-li-middle{flex:1 1 auto}"],
                    providers: [
                        LB_CONTROL_VALUE_ACCESSOR,
                        { provide: BaseFormComponent, useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return ListComponent; }) }
                    ]
                },] },
    ];
    /** @nocollapse */
    ListComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: BaseFormComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () { return BaseFormComponent; }),] }] }
    ]; };
    ListComponent.propDecorators = {
        list: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        selection: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        selectionMode: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        valueTransformer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        field: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        borderless: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        action: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        onSelection: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        pListBox: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['listbox',] }],
        lZoneTempl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: ['left',] }],
        mZoneTempl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: ['middle',] }],
        rZoneTempl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: ['right',] }]
    };
    return ListComponent;
}(BaseFormComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWListModule = /** @class */ (function () {
    function AWListModule() {
    }
    AWListModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        ListComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ListboxModule"],
                        AWCheckBoxModule
                    ],
                    entryComponents: [
                        ListComponent
                    ],
                    exports: [
                        ListComponent,
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"]
                    ],
                    providers: []
                },] },
    ];
    return AWListModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var WizardProgressComponent = /** @class */ (function () {
    function WizardProgressComponent() {
        this.currentStep = 0;
        this.stepChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.totalSteps = 0;
    }
    /**
     * @return {?}
     */
    WizardProgressComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.steps) {
            var /** @type {?} */ currentIndex = this.steps.indexOf(this.steps.filter(function (step) { return step.current; })[0]);
            this.totalSteps = this.steps.length;
            this.setCurrentStep(~currentIndex ? currentIndex : 0);
        }
    };
    /**
     * @param {?=} index
     * @return {?}
     */
    WizardProgressComponent.prototype.setCurrentStep = /**
     * @param {?=} index
     * @return {?}
     */
    function (index) {
        if (index === void 0) { index = 0; }
        this.steps[index].current = true;
        this.currentStep = index;
        this.stepChanged.emit({ current: this.currentStep });
    };
    /**
     * @param {?} index
     * @return {?}
     */
    WizardProgressComponent.prototype.goToStep = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (!this.steps[index].complete) {
            return;
        }
        var /** @type {?} */ currentIndex = this.steps.indexOf(this.steps.filter(function (step) { return step.current; })[0]);
        this.steps[currentIndex].current = false;
        this.setCurrentStep(index);
    };
    WizardProgressComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-wizard-progress',
                    template: "<div class=\"step-indicator\">{{currentStep + 1}}/{{totalSteps}}</div>\n<div class=\"aw-step-progress\">\n    <div class=\"aw-step-progress__item\" *ngFor=\"let step of steps; let i = index;\"\n         [ngClass]=\"{ 'aw-step-progress__item--is-active': step.current === true }\"\n         (click)=\"goToStep(i);\">\n    </div>\n</div>\n",
                    styles: [":host{display:block}.step-indicator{width:100%;text-align:center;font-size:14px;font-weight:600;padding-bottom:.3rem}.aw-step-progress{display:flex;flex-direction:row;padding:.2rem;justify-content:center}.aw-step-progress__item{cursor:pointer;list-style:none;width:1.2rem;margin:0 .2rem;border-radius:.3rem;height:.4rem;background-color:#eaeaea}.aw-step-progress__item:last-child{margin-right:0}.aw-step-progress__item:first-child{margin-left:0}.aw-step-progress__item--is-active{background-color:#09a7af}"]
                },] },
    ];
    /** @nocollapse */
    WizardProgressComponent.ctorParameters = function () { return []; };
    WizardProgressComponent.propDecorators = {
        steps: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        currentStep: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        stepChanged: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
    };
    return WizardProgressComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var WizardProgressModule = /** @class */ (function () {
    function WizardProgressModule() {
    }
    WizardProgressModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        WizardProgressComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"]
                    ],
                    entryComponents: [
                        WizardProgressComponent
                    ],
                    exports: [
                        WizardProgressComponent
                    ],
                    providers: []
                },] },
    ];
    return WizardProgressModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Renders a Toggle Switch
 *
 * ### Example
 *
 * ```typescript
 *
 * \@Component({
 *          selector: 'myToggleSection' ,
 *          template: '<aw-toggle [model]="inputValue" [labelText]="labelText" >
 *              </aw-toggle>'
 *      })
 *      export class MyNoteComponent
 *      {
 *          inputValue: boolean = false;
 *          labelText: string = 'my label';
 *      }
 *
 * ```
 */
var ToggleSwitchComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(ToggleSwitchComponent, _super);
    function ToggleSwitchComponent(env) {
        var _this = _super.call(this, env) || this;
        _this.env = env;
        /**
         * toggle model
         */
        _this.model = false;
        return _this;
    }
    /**
     * click handler for toggle
     */
    /**
     * click handler for toggle
     * @return {?}
     */
    ToggleSwitchComponent.prototype.changeHandler = /**
     * click handler for toggle
     * @return {?}
     */
    function () {
        this.model = !this.model;
    };
    ToggleSwitchComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-toggle',
                    template: "<div class=\"w-toggle\">\n    <label class=\"w-toggle__label\" *ngIf=\"labelText\">\n        {{ labelText }}\n    </label>\n    <div class=\"slider\" (click)=\"changeHandler()\">\n        <div class=\"slider__button\" [ngClass]=\"{ 'slider__button--is-active': model === true }\"></div>\n    </div>\n</div>\n",
                    styles: [":host{display:block}.w-toggle input{display:none}.w-toggle__label{color:#999;margin-right:.2rem}.w-toggle .slider{position:relative;height:.6rem;width:1.5rem;background-color:#d8d8d8;border-radius:.9rem;display:inline-block;border-top:1px solid #7e7e7e;border-left:1px solid #b5b5b5;border-right:1px solid #b5b5b5}.w-toggle .slider__button{left:-.1rem;transition:left .1s ease-out;cursor:pointer;position:absolute;height:1rem;width:1rem;border-radius:50%;background-color:#eaeaea;top:-.2rem}.w-toggle .slider__button--is-active{left:calc(100% - .8rem);background-color:#09a7af}"]
                },] },
    ];
    /** @nocollapse */
    ToggleSwitchComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] }
    ]; };
    ToggleSwitchComponent.propDecorators = {
        model: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        labelText: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return ToggleSwitchComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ToggleSwitchModule = /** @class */ (function () {
    function ToggleSwitchModule() {
    }
    ToggleSwitchModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        ToggleSwitchComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"]
                    ],
                    entryComponents: [
                        ToggleSwitchComponent
                    ],
                    exports: [
                        ToggleSwitchComponent
                    ],
                    providers: []
                },] },
    ];
    return ToggleSwitchModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Overlay Component is a simple version of the dialog where there's only content.
 * Overlay will appear at the position where the action performed trigger an overlay.
 *
 * There are three types of popup.
 *   1.  a regular dialog box that has header, body and footer. It's the most customizable.
 *   2.  a confirmation box is similar to a dialog box but has accept and reject action buttons.
 *   3.  a overlay, which is a very basic popup with what you put inside.
 *       It doesn't have header and footer.
 *
 * There are two ways to use any popup component.
 *   1.  Either directly by using component, aw-dialog, aw-confirmation or aw-overlay
 *   2.  or the ModalService  service.open(<OverlayComponent>), service.close()
 *
 * Usage:
 *    1.  Using ModalService directly to display a modal popup. The usage is a little tricky
 *        because angular currently doesn't support dynamic content projection.
 *
 *          let overlay = this.modalService.open<OverlayComponent>(OverlayComponent, {});
 *
 *            // Add content. There's not support for dynamic content projection yet.
 *            // So have add content directly.
 *            // This is probably not the best way.
 *          overlay.instance.overlay.el.nativeElement.querySelector(".ui-overlaypanel-content")
 *               .innerHTML = `<img style='width:300px;' src="sales.png" alt="Sales Chart" />`;
 *
 *          // delay the opening after ng lifecycle has been initialized.
 *          setTimeout(() => { overlay.instance.open(event); }, 1);
 *
 *
 *   2.   Use the component inside your template.
 *
 * \@Component({
 *                selector: 'aw-page' ,
 *                           template: `
 *                                <aw-overlay #overlay (onOpen)="overlayAction='open'"
 *                                                     (onClose)="overlayAction='close'">
 *                                      <img src="sales.png" alt="Chart"/>
 *                                </aw-overlay>
 *
 *                                <aw-button [size]="'small'" (click)="overlay.open($event)">
 *                                    Open Overlay
 *                                </aw-button>
 *                  `
 *         export class MyPageComponent implements OnInit {
 *
 *                     overlayAction: string;
 *
 *                     constructor(private modalService: ModalService) {
 *                          super();
 *                       }
 *                     ngOnInit() { }
 *       }
 *
 *
 */
var OverlayComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(OverlayComponent, _super);
    function OverlayComponent(env) {
        var _this = _super.call(this, env) || this;
        _this.env = env;
        /**
         * Enables hide overlay when outside is clicked.
         */
        _this.dismissable = true;
        /**
         * displays the close icon 'x' at top of right corner.
         */
        _this.showCloseIcon = false;
        /**
         * Event fired when overlay is closed.
         */
        _this.onClose = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Event fired when the overlay is opened.
         */
        _this.onOpen = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        return _this;
    }
    /**
     * @return {?}
     */
    OverlayComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * Open Overlay
     * @param event
     */
    /**
     * Open Overlay
     * @param {?} event
     * @return {?}
     */
    OverlayComponent.prototype.open = /**
     * Open Overlay
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.overlay.show(event);
        this.onOpened(null);
    };
    /**
     * Close Overlay
     */
    /**
     * Close Overlay
     * @return {?}
     */
    OverlayComponent.prototype.close = /**
     * Close Overlay
     * @return {?}
     */
    function () {
        this.overlay.hide();
    };
    /**
     * toggle open and close.
     * @param event
     */
    /**
     * toggle open and close.
     * @param {?} event
     * @return {?}
     */
    OverlayComponent.prototype.toggle = /**
     * toggle open and close.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.overlay.toggle(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    OverlayComponent.prototype.onOpened = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onOpen.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    OverlayComponent.prototype.onClosed = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onClose.emit(event);
    };
    OverlayComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-overlay',
                    template: "<p-overlayPanel [dismissable]=\"dismissable\" [showCloseIcon]=\"showCloseIcon\"\n                [styleClass]=\"styleClass\" [appendTo]=\"appendTo\"\n                (onAfterHide)=\"onClosed($event)\">\n    <ng-content></ng-content>\n</p-overlayPanel>\n",
                    styles: ["::ng-deep .ui-overlaypanel{border:1px solid #d7d7d7;box-shadow:0 2px 4px 0 rgba(0,0,0,.2)}::ng-deep .ui-overlaypanel-content{padding:2em 3.4em .6em 1.43em}::ng-deep .ui-overlaypanel-close{border-radius:0;top:.5em;right:.5em}::ng-deep .ui-overlaypanel-close.ui-state-default{border:none}"]
                },] },
    ];
    /** @nocollapse */
    OverlayComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] }
    ]; };
    OverlayComponent.propDecorators = {
        dismissable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        showCloseIcon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        appendTo: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        onClose: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        onOpen: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        overlay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["OverlayPanel"],] }]
    };
    return OverlayComponent;
}(ModalContainer));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {number} */
var HCCardPosition = {
    top: 0,
    bottom: 1,
    none: 2,
};
HCCardPosition[HCCardPosition.top] = "top";
HCCardPosition[HCCardPosition.bottom] = "bottom";
HCCardPosition[HCCardPosition.none] = "none";
/** @enum {number} */
var HCCardAlignment = {
    left: 0,
    paddedLeft: 1,
    right: 2,
    paddedRight: 3,
    default: 4,
};
HCCardAlignment[HCCardAlignment.left] = "left";
HCCardAlignment[HCCardAlignment.paddedLeft] = "paddedLeft";
HCCardAlignment[HCCardAlignment.right] = "right";
HCCardAlignment[HCCardAlignment.paddedRight] = "paddedRight";
HCCardAlignment[HCCardAlignment.default] = "default";
/**
 * Maps position to styles that are applied to the Card container. This is just to make it easier
 * as we are working with enumerations and have already enum type.
 *
 * u-hc-arrow-b: Arrow will appear at the bottom
 * u-hc-arrow-t: Arrow will appear at the top
 *
 * u-hc-shadow-t: Border shadow will appear at the top
 * u-hc-shadow-b: Border shadow will appear at the bottom
 */
var /** @type {?} */ PositionToStyle = {
    top: ' w-hc-panel-arrow u-hc-arrow-b u-hc-shadow-t',
    bottom: ' w-hc-panel-arrow u-hc-arrow-t u-hc-shadow-b',
    none: ''
};
/**
 *
 * Maps aligned Card container to custom styles in order to apply correct arrow
 *
 * -ll: Stands for Large Left (large: there is plenty of space around )
 * -lr: Stands for Large right
 * -sl: Stands for Small left (Small and resized screen where we try to fit card container
 * somewhere in between)
 * -sr: Stands for Large right
 *
 */
var /** @type {?} */ AlignmentToStyle = {
    left: ' u-hc-arrow-ll',
    right: ' u-hc-arrow-lr',
    paddedLeft: ' u-hc-arrow-sl',
    paddedRight: ' u-hc-arrow-sr',
    default: ' u-hc-arrow-ll',
};
/**
 * The HoverCard components adds hover behavior to text, the specified content is loaded
 * on the left or right side of the element.
 *
 * Todo: extends so we can wrap any element and any element can be triggering this. Not only
 * linkTitle
 *
 *
 * ### Example:
 *
 * ```
 *
 *   <aw-hover-card [linkTitle]="'Frank kolar'">
 *       <h3>My Card Title</h3>
 *       <div>
 *
 *           This is my contents
 *
 *       </div>
 *
 *
 *    </aw-hover-card>
 * ```
 *
 * By default there is [forceClose]=true which forces the user to use X close icon
 *
 *
 *
 */
var HoverCardComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(HoverCardComponent, _super);
    function HoverCardComponent(elem, env, cd) {
        var _this = _super.call(this, env) || this;
        _this.elem = elem;
        _this.env = env;
        _this.cd = cd;
        /**
         * Should we keep the hover card open and force user to manually close
         *
         */
        _this.forceClose = true;
        /**
         *
         * This current workaround until we find better solution. PrimeNG overlays operates within
         * its relative element so if the overlay is wrapped inside some other relative container
         * the overlay content is croped by its parent and content is not visible.
         *
         * They have [appendTo] binding which we need to use for this purpose
         *
         */
        _this.appendContentToBody = true;
        /**
         *
         * Internal style class to use to apply additional styles when it needs to show a Arrow on the
         * card
         *
         */
        _this.arrowClass = '';
        _this.opening = false;
        _this.currrentPosition = HCCardPosition.none;
        return _this;
    }
    /**
     * @return {?}
     */
    HoverCardComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.linkTitle), 'You must provide [linkTitle] binding !');
        // make sure there is open HC when we start new component
        this.env.deleteValue('hc-open');
        if (!this.appendContentToBody) {
            this.appendTo = null;
        }
    };
    /**
     * As of Angular 5 we have to introduce this ViewChecked as PrimeNG does final calculation
     * during this phase.
     *
     * So now its broken down into two parts:
     *   - Apply class styles
     *   - Position it.
     */
    /**
     * As of Angular 5 we have to introduce this ViewChecked as PrimeNG does final calculation
     * during this phase.
     *
     * So now its broken down into two parts:
     *   - Apply class styles
     *   - Position it.
     * @return {?}
     */
    HoverCardComponent.prototype.ngAfterViewChecked = /**
     * As of Angular 5 we have to introduce this ViewChecked as PrimeNG does final calculation
     * during this phase.
     *
     * So now its broken down into two parts:
     *   - Apply class styles
     *   - Position it.
     * @return {?}
     */
    function () {
        if (this.opening) {
            var /** @type {?} */ container = this.awOverlay.overlay.container;
            var /** @type {?} */ cntRect = container.getBoundingClientRect();
            if (this.currrentPosition !== HCCardPosition.none) {
                this.adjustCard(container, cntRect, this.awOverlay.overlay);
            }
            else {
                this.arrowClass = '';
            }
            this.opening = false;
        }
    };
    /**
     * Init elements BoundingClientRect that we use for calculation
     *
     */
    /**
     * Init elements BoundingClientRect that we use for calculation
     *
     * @return {?}
     */
    HoverCardComponent.prototype.initElements = /**
     * Init elements BoundingClientRect that we use for calculation
     *
     * @return {?}
     */
    function () {
        var /** @type {?} */ titleElem = this.elem.nativeElement.querySelector('.w-hc-title');
        var /** @type {?} */ triggerElem = this.elem.nativeElement.querySelector('.sap-icon');
        this.titleAreaRect = titleElem.getBoundingClientRect();
        this.trigRect = triggerElem.getBoundingClientRect();
        this.trigIconMiddle = this.trigRect.width / 2;
    };
    /**
     *
     * Fires when user mouse over the triggering icon and opens up overlay component. To make sure
     * only one Card is opened at the time it uses Environment to save extra information for it
     *
     *
     */
    /**
     *
     * Fires when user mouse over the triggering icon and opens up overlay component. To make sure
     * only one Card is opened at the time it uses Environment to save extra information for it
     *
     *
     * @param {?} event
     * @return {?}
     */
    HoverCardComponent.prototype.openCard = /**
     *
     * Fires when user mouse over the triggering icon and opens up overlay component. To make sure
     * only one Card is opened at the time it uses Environment to save extra information for it
     *
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.awOverlay) && !this.env.hasValue('hc-open')) {
            this.awOverlay.open(event);
            this.env.setValue('hc-open', true);
        }
    };
    /**
     *
     * Fired at the end of the opening cycle when all is initialized and the card is about to
     * fade in.
     *
     * This method first simulates displaying card by setting display:block and
     * domHandler.absolutePosition so we can read dimensions and then later on position the card
     * accordingly.
     *
     */
    /**
     *
     * Fired at the end of the opening cycle when all is initialized and the card is about to
     * fade in.
     *
     * This method first simulates displaying card by setting display:block and
     * domHandler.absolutePosition so we can read dimensions and then later on position the card
     * accordingly.
     *
     * @param {?} event
     * @return {?}
     */
    HoverCardComponent.prototype.cardOpened = /**
     *
     * Fired at the end of the opening cycle when all is initialized and the card is about to
     * fade in.
     *
     * This method first simulates displaying card by setting display:block and
     * domHandler.absolutePosition so we can read dimensions and then later on position the card
     * accordingly.
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ container = this.awOverlay.overlay.container;
        var /** @type {?} */ target = this.awOverlay.overlay.target;
        this.openForAdjustments(container);
        // pre-run positioning so we can calculate new coordinates
        this.awOverlay.overlay.domHandler.absolutePosition(container, target);
        var /** @type {?} */ cntRect = container.getBoundingClientRect();
        this.currrentPosition = this.positionForCard(container, cntRect);
        this.applyStyleClass(container, cntRect, this.awOverlay.overlay);
        this.closeForAdjustments(container);
        this.opening = true;
    };
    /**
     *
     * When card is closed we need to release it and delete all the references from Environment
     *
     *
     */
    /**
     *
     * When card is closed we need to release it and delete all the references from Environment
     *
     *
     * @param {?} event
     * @return {?}
     */
    HoverCardComponent.prototype.cardClosed = /**
     *
     * When card is closed we need to release it and delete all the references from Environment
     *
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.env.deleteValue('hc-open');
    };
    /**
     *
     * Applies style.TOP and style.LEFT to the container in order to reposition it and add
     * extra arrow.
     *
     * First based on the initial position we apply style.TOP and depending if its on the
     * top or bottom we apply either -HoverCardComponent.ArrowPad or +HoverCardComponent.ArrowPad.
     *
     * Then for positioning horizontally we use two types.
     *  - When there is allot of space the arrow is 25% from the edge
     *
     *    -----^------------   or       -----------^----
     *
     *
     *  - When there is less or none space we have only 10% far away form the edge
     *
     *    --^------------   or       -----------^--
     *
     *  Once we pick the correct positioning (25%, 10%) we need to recalculate and shift the card
     *  either to the left or right.
     *
     */
    /**
     *
     * Applies style.TOP and style.LEFT to the container in order to reposition it and add
     * extra arrow.
     *
     * First based on the initial position we apply style.TOP and depending if its on the
     * top or bottom we apply either -HoverCardComponent.ArrowPad or +HoverCardComponent.ArrowPad.
     *
     * Then for positioning horizontally we use two types.
     *  - When there is allot of space the arrow is 25% from the edge
     *
     *    -----^------------   or       -----------^----
     *
     *
     *  - When there is less or none space we have only 10% far away form the edge
     *
     *    --^------------   or       -----------^--
     *
     *  Once we pick the correct positioning (25%, 10%) we need to recalculate and shift the card
     *  either to the left or right.
     *
     * @param {?} container
     * @param {?} containerRect
     * @param {?} modalContainer
     * @return {?}
     */
    HoverCardComponent.prototype.adjustCard = /**
     *
     * Applies style.TOP and style.LEFT to the container in order to reposition it and add
     * extra arrow.
     *
     * First based on the initial position we apply style.TOP and depending if its on the
     * top or bottom we apply either -HoverCardComponent.ArrowPad or +HoverCardComponent.ArrowPad.
     *
     * Then for positioning horizontally we use two types.
     *  - When there is allot of space the arrow is 25% from the edge
     *
     *    -----^------------   or       -----------^----
     *
     *
     *  - When there is less or none space we have only 10% far away form the edge
     *
     *    --^------------   or       -----------^--
     *
     *  Once we pick the correct positioning (25%, 10%) we need to recalculate and shift the card
     *  either to the left or right.
     *
     * @param {?} container
     * @param {?} containerRect
     * @param {?} modalContainer
     * @return {?}
     */
    function (container, containerRect, modalContainer) {
        var /** @type {?} */ diff = (this.currrentPosition === HCCardPosition.bottom) ? 1 : -1;
        var /** @type {?} */ scrollTop = modalContainer.domHandler.getWindowScrollTop();
        var /** @type {?} */ posWithScroll = containerRect.top + scrollTop;
        container.style.top = (posWithScroll + (HoverCardComponent.ArrowPad * diff)) + 'px';
        var /** @type {?} */ alignment = this.alignmentForCard(containerRect, modalContainer);
        container.style.left = this.calcLeftForAlignment(containerRect, alignment) + 'px';
    };
    /**
     * @param {?} container
     * @param {?} containerRect
     * @param {?} modalContainer
     * @return {?}
     */
    HoverCardComponent.prototype.applyStyleClass = /**
     * @param {?} container
     * @param {?} containerRect
     * @param {?} modalContainer
     * @return {?}
     */
    function (container, containerRect, modalContainer) {
        if (this.currrentPosition !== HCCardPosition.none) {
            var /** @type {?} */ alignment = this.alignmentForCard(containerRect, modalContainer);
            this.arrowClass = (/** @type {?} */ (PositionToStyle))[(/** @type {?} */ (HCCardPosition))[this.currrentPosition]];
            this.arrowClass += (/** @type {?} */ (AlignmentToStyle))[(/** @type {?} */ (HCCardAlignment))[alignment]];
        }
        else {
            this.arrowClass = '';
        }
    };
    /**
     *
     * Detects if the card is going to be shown on the top of the Link label or under. Or if
     * its covering it.
     *
     */
    /**
     *
     * Detects if the card is going to be shown on the top of the Link label or under. Or if
     * its covering it.
     *
     * @param {?} container
     * @param {?} boundingRect
     * @return {?}
     */
    HoverCardComponent.prototype.positionForCard = /**
     *
     * Detects if the card is going to be shown on the top of the Link label or under. Or if
     * its covering it.
     *
     * @param {?} container
     * @param {?} boundingRect
     * @return {?}
     */
    function (container, boundingRect) {
        // secure this in case of IE returning undefined
        var /** @type {?} */ borderWidth = getComputedStyle(container).borderWidth;
        var /** @type {?} */ cntWidth = parseFloat(borderWidth || '0');
        var /** @type {?} */ pos = HCCardPosition.none;
        if (this.trigRect.bottom < boundingRect.top) {
            pos = HCCardPosition.bottom;
        }
        else if (this.trigRect.top > (boundingRect.bottom - cntWidth)) {
            pos = HCCardPosition.top;
        }
        return pos;
    };
    /**
     *
     * Detect horizontal alignment.
     *
     * @param {?} boundingRect
     * @param {?} modalContainer
     * @return {?}
     */
    HoverCardComponent.prototype.alignmentForCard = /**
     *
     * Detect horizontal alignment.
     *
     * @param {?} boundingRect
     * @param {?} modalContainer
     * @return {?}
     */
    function (boundingRect, modalContainer) {
        var /** @type {?} */ alignment = HCCardAlignment.left;
        var /** @type {?} */ viewPort = modalContainer.domHandler.getViewport();
        if (this.trigRect.left.toFixed(0) === boundingRect.left.toFixed(0) &&
            boundingRect.left > HoverCardComponent.SpacingLimit) {
            alignment = HCCardAlignment.left;
        }
        else if (boundingRect.left < HoverCardComponent.SpacingLimit) {
            alignment = HCCardAlignment.paddedLeft;
        }
        else if ((viewPort.width - boundingRect.right) < HoverCardComponent.SpacingLimit) {
            alignment = HCCardAlignment.paddedRight;
        }
        else if (this.trigRect.right.toFixed(0) === boundingRect.right.toFixed(0) ||
            (viewPort.width - boundingRect.right) > HoverCardComponent.SpacingLimit) {
            alignment = HCCardAlignment.right;
        }
        else {
            alignment = HCCardAlignment.default;
        }
        return alignment;
    };
    /**
     *
     * Turn on temporary display to BLOCK so we can read dimensions
     *
     */
    /**
     *
     * Turn on temporary display to BLOCK so we can read dimensions
     *
     * @param {?} container
     * @return {?}
     */
    HoverCardComponent.prototype.openForAdjustments = /**
     *
     * Turn on temporary display to BLOCK so we can read dimensions
     *
     * @param {?} container
     * @return {?}
     */
    function (container) {
        container.style.visibility = 'hidden';
        container.style.display = 'block';
        this.initElements();
    };
    /**
     *
     * Turn off display back NONE
     *
     */
    /**
     *
     * Turn off display back NONE
     *
     * @param {?} container
     * @return {?}
     */
    HoverCardComponent.prototype.closeForAdjustments = /**
     *
     * Turn off display back NONE
     *
     * @param {?} container
     * @return {?}
     */
    function (container) {
        container.style.visibility = 'visible';
        // container.style.display = 'none';
    };
    /**
     *
     * Calculates positioning for style.LEFT. As already said they are two types of triangles that
     * are applies for these case:
     *
     *
     * a) Large left, Large right
     *
     *  PrimeNG aligns the card with either the right side or left side of the triggering icon
     *
     *
     *  V                                                                V
     *  ......^........................ or  .......................^......
     *
     *
     *
     *
     *  b) Small left , small right
     *
     *  This is for cases where there is not enough space and PrimeNG position the card off to the
     *  triggering icons, so even primeNg does not have space to align it with the V
     *
     *
     *     V                                                      V
     *  ....^........................ or  .......................^....
     *
     *
     * c)Aligned with the edge of browser
     *
     * On the right side this is problem as we cannot calculate full future width of the card.
     * but we applly for this case #b (arrow 10% )
     *
     *
     *
     * @param {?} boundingRect
     * @param {?} alignment
     * @return {?}
     */
    HoverCardComponent.prototype.calcLeftForAlignment = /**
     *
     * Calculates positioning for style.LEFT. As already said they are two types of triangles that
     * are applies for these case:
     *
     *
     * a) Large left, Large right
     *
     *  PrimeNG aligns the card with either the right side or left side of the triggering icon
     *
     *
     *  V                                                                V
     *  ......^........................ or  .......................^......
     *
     *
     *
     *
     *  b) Small left , small right
     *
     *  This is for cases where there is not enough space and PrimeNG position the card off to the
     *  triggering icons, so even primeNg does not have space to align it with the V
     *
     *
     *     V                                                      V
     *  ....^........................ or  .......................^....
     *
     *
     * c)Aligned with the edge of browser
     *
     * On the right side this is problem as we cannot calculate full future width of the card.
     * but we applly for this case #b (arrow 10% )
     *
     *
     *
     * @param {?} boundingRect
     * @param {?} alignment
     * @return {?}
     */
    function (boundingRect, alignment) {
        // width for which we need to shift card. 25% or 10% of the container width
        var /** @type {?} */ wLargeTriangle = boundingRect.width * 0.25;
        var /** @type {?} */ wSmallTriangle = boundingRect.width * 0.10;
        switch (alignment) {
            case HCCardAlignment.right:
                var /** @type {?} */ shiftRight = boundingRect.left + wLargeTriangle;
                var /** @type {?} */ trigRight = this.trigRect.right - this.trigIconMiddle;
                return shiftRight - (boundingRect.right - trigRight);
            case HCCardAlignment.paddedRight:
                var /** @type {?} */ shiftRightS = boundingRect.left + wSmallTriangle;
                var /** @type {?} */ trigRightS = this.trigRect.right - this.trigIconMiddle;
                return shiftRightS - (boundingRect.right - trigRightS);
            case HCCardAlignment.paddedLeft:
                var /** @type {?} */ shiftLeftPad = boundingRect.left - wSmallTriangle;
                return shiftLeftPad + this.trigIconMiddle;
            case HCCardAlignment.left:
            default:
                var /** @type {?} */ shiftLeft = boundingRect.left - wLargeTriangle;
                return shiftLeft + this.trigIconMiddle;
        }
    };
    /**
     * Default padding representing a height of the Arrow for which we need to vertically adjust
     * Card container
     *
     */
    HoverCardComponent.ArrowPad = 10;
    /**
     * Defines safe threshold where there might not be enough space around or Card is aligned with
     * the left or right edge of the viewport for which we need to position the Arrow closer to the
     * side of the card
     *
     */
    HoverCardComponent.SpacingLimit = 50;
    HoverCardComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'aw-hover-card',
                    template: "<span class=\"w-hc\">\n    <span class=\"w-hc-title\">\n        <aw-string [value]=\"linkTitle\"></aw-string>\n        <span class=\"sap-icon icon-slim-arrow-down\" (mouseover)=\"openCard($event)\"></span>\n    </span>\n\n    <div class=\"w-hc-body\">\n\n         <aw-overlay #overlay [showCloseIcon]=\"forceClose\" [dismissable]=\"!forceClose\"\n                     [styleClass]=\"arrowClass\"\n                     [appendTo]=\"appendTo\"\n                     (onOpen)=\"cardOpened($event)\"\n                     (onClose)=\"cardClosed($event)\">\n\n        <!-- this is workaround to create a _ngcontent-INDEX reference so we can\n        refer to this ng-content. Angular does not have any way right now to track this\n        -->\n        <span class=\"u-ngcontent\">\n                <ng-content></ng-content>\n            </span>\n\n    </aw-overlay>\n\n    </div>\n</span>\n\n\n<!--<ng-template #contentToBody>-->\n    <!--<aw-overlay #overlay [showCloseIcon]=\"forceClose\" [dismissable]=\"!forceClose\"-->\n                <!--[styleClass]=\"arrowClass\"-->\n                <!--[appendTo]=\"appendTo\"-->\n                <!--(onOpen)=\"cardOpened($event)\"-->\n                <!--(onClose)=\"cardClosed($event)\">-->\n\n        <!--&lt;!&ndash; this is workaround to create a _ngcontent-INDEX reference so we can-->\n        <!--refer to this ng-content. Angular does not have any way right now to track this-->\n        <!--&ndash;&gt;-->\n        <!--<span class=\"u-ngcontent\">-->\n                <!--<ng-content></ng-content>-->\n            <!--</span>-->\n\n    <!--</aw-overlay>-->\n\n<!--</ng-template>-->\n\n\n<!--<ng-template #contentToOverlay>-->\n\n    <!--<aw-overlay #overlay [showCloseIcon]=\"forceClose\" [dismissable]=\"!forceClose\"-->\n                <!--[styleClass]=\"arrowClass\"-->\n                <!--(onOpen)=\"cardOpened($event)\"-->\n                <!--(onClose)=\"cardClosed($event)\">-->\n\n        <!--&lt;!&ndash; this is workaround to create a _ngcontent-INDEX reference so we can-->\n        <!--refer to this ng-content. Angular does not have any way right now to track this-->\n        <!--&ndash;&gt;-->\n        <!--<span class=\"u-ngcontent\">-->\n                <!--<ng-content></ng-content>-->\n            <!--</span>-->\n\n    <!--</aw-overlay>-->\n<!--</ng-template>-->\n\n\n",
                    styles: [".w-hc-title{padding-right:1.4em;position:relative;white-space:nowrap}.w-hc-title .sap-icon{font-size:1em;color:#00679e;position:absolute;padding-top:.2em;right:0}::ng-deep .w-hc-panel-arrow.u-hc-shadow-b{box-shadow:0 2px 4px 0 rgba(0,0,0,.2)}::ng-deep .w-hc-panel-arrow.u-hc-shadow-t{box-shadow:0 -2px 4px 0 rgba(0,0,0,.2)}::ng-deep .w-hc-panel-arrow:after,::ng-deep .w-hc-panel-arrow:before{left:25%;border:solid transparent;content:\" \";height:0;width:0;position:absolute;pointer-events:none}::ng-deep .w-hc-panel-arrow:after{border-color:rgba(136,183,213,0);border-width:.7em;margin-left:-.7em}::ng-deep .w-hc-panel-arrow:before{border-color:rgba(255,136,56,0);border-width:.8em;margin-left:-.8em}::ng-deep .u-hc-arrow-ll:after,::ng-deep .u-hc-arrow-ll:before{left:25%}::ng-deep .u-hc-arrow-lr:after,::ng-deep .u-hc-arrow-lr:before{left:75%}::ng-deep .u-hc-arrow-sl:after,::ng-deep .u-hc-arrow-sl:before{left:10%}::ng-deep .u-hc-arrow-sr:after,::ng-deep .u-hc-arrow-sr:before{left:90%}::ng-deep .u-hc-arrow-t:after,::ng-deep .u-hc-arrow-t:before{bottom:100%}::ng-deep .u-hc-arrow-t:after{border-bottom-color:#fff}::ng-deep .u-hc-arrow-t:before{border-bottom-color:#d7d7d7}::ng-deep .u-hc-arrow-b:after,::ng-deep .u-hc-arrow-b:before{top:100%}::ng-deep .u-hc-arrow-b:after{border-top-color:#fff}::ng-deep .u-hc-arrow-b:before{border-top-color:#d7d7d7}"]
                },] },
    ];
    /** @nocollapse */
    HoverCardComponent.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
    ]; };
    HoverCardComponent.propDecorators = {
        linkTitle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        forceClose: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        appendContentToBody: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        awOverlay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['overlay',] }]
    };
    return HoverCardComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Spy lifecycle directive is used for debugging purposes to track lifecycle callback
 *
 * ###Usage
 *
 * ```
 *   <my-directive spyhooks><my-directive>
 *
 * ```
 */
var SpyLifeCycleHooksDirective = /** @class */ (function () {
    function SpyLifeCycleHooksDirective(elementRef) {
        this.elementRef = elementRef;
    }
    /**
     * @return {?}
     */
    SpyLifeCycleHooksDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.logIt('onInit');
    };
    /**
     * @return {?}
     */
    SpyLifeCycleHooksDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.logIt('onDestroy');
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    SpyLifeCycleHooksDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.logIt('ngOnChanges = ' + changes);
    };
    /**
     * @return {?}
     */
    SpyLifeCycleHooksDirective.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.logIt('ngDoCheck');
    };
    /**
     * @return {?}
     */
    SpyLifeCycleHooksDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.logIt('ngAfterContentInit');
    };
    /**
     * @return {?}
     */
    SpyLifeCycleHooksDirective.prototype.ngAfterContentChecked = /**
     * @return {?}
     */
    function () {
        this.logIt('ngAfterContentChecked');
    };
    /**
     * @return {?}
     */
    SpyLifeCycleHooksDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.logIt('ngAfterViewInit');
    };
    /**
     * @return {?}
     */
    SpyLifeCycleHooksDirective.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        this.logIt('ngAfterViewChecked');
    };
    /**
     * @param {?} msg
     * @return {?}
     */
    SpyLifeCycleHooksDirective.prototype.logIt = /**
     * @param {?} msg
     * @return {?}
     */
    function (msg) {
        var /** @type {?} */ level = 0;
        var /** @type {?} */ me = this.elementRef.nativeElement;
        var /** @type {?} */ tagBody = me;
        while ((tagBody = tagBody.parentNode) != null) {
            level++;
            if (tagBody.tagName === 'APP-ROOT' || level === 6) {
                break;
            }
        }
        var /** @type {?} */ indent = '';
        var /** @type {?} */ indentNumber = level;
        while (level > 0) {
            indent += '\t';
            level--;
        }
        var /** @type {?} */ params = '';
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(me.attributes)) {
            for (var /** @type {?} */ i = 0; i < me.attributes.length; i++) {
                var /** @type {?} */ attr = me.attributes.item(i);
                if (this.ignore(attr.name.toLowerCase())) {
                    continue;
                }
                params += '(' + attr.name + '=' + attr.value + '),  ';
            }
        }
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["print"])(indent + me.tagName + '(' + indentNumber + '): ' + msg + ' => ' + params);
    };
    /**
     * @param {?} name
     * @return {?}
     */
    SpyLifeCycleHooksDirective.prototype.ignore = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return name.indexOf('_ng') > -1 ||
            name.indexOf('ng-') > -1 ||
            name.indexOf('spyhooks') > -1;
    };
    SpyLifeCycleHooksDirective.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: '[spyHooks]' },] },
    ];
    /** @nocollapse */
    SpyLifeCycleHooksDirective.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
    ]; };
    return SpyLifeCycleHooksDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var components = /*#__PURE__*/Object.freeze({
    AWCoreComponentModule: AWCoreComponentModule,
    ErrorMessagesComponent: ErrorMessagesComponent,
    ModalContainer: ModalContainer,
    ModalService: ModalService,
    ModalComponent: ModalComponent,
    CurrencyFormatPipe: CurrencyFormatPipe,
    BaseComponent: BaseComponent,
    BaseFormComponent: BaseFormComponent,
    WidgetSizeColumns: WidgetSizeColumns,
    DomUtilsService: DomUtilsService,
    EmbeddedItemDirective: EmbeddedItemDirective,
    EmbededItem: EmbededItem,
    ErrorManagerService: ErrorManagerService,
    GenericContainerComponent: GenericContainerComponent,
    IncludeComponentDirective: IncludeComponentDirective,
    ComponentRegistry: ComponentRegistry,
    DataTypeProviderRegistry: DataTypeProviderRegistry,
    DataProviders: DataProviders,
    DataFinders: DataFinders,
    DataFinder: DataFinder,
    FullTextArrayDataFinder: FullTextArrayDataFinder,
    QueryType: QueryType,
    DATA_SOURCE: DATA_SOURCE,
    DataProvider: DataProvider,
    ArrayDataProvider: ArrayDataProvider,
    NgForSetDirective: NgForSetDirective,
    AwNameDirective: AwNameDirective,
    AwNameStore: AwNameStore,
    FormTableComponent: FormTableComponent,
    AWFormTableModule: AWFormTableModule,
    FormRowComponent: FormRowComponent,
    TopZoneComponent: TopZoneComponent,
    LeftZoneComponent: LeftZoneComponent,
    MiddleZoneComponent: MiddleZoneComponent,
    RightZoneComponent: RightZoneComponent,
    BottomZoneComponent: BottomZoneComponent,
    AWInputFieldModule: AWInputFieldModule,
    AWStringFieldModule: AWStringFieldModule,
    AWBasicNavigatorModule: AWBasicNavigatorModule,
    AWButtonModule: AWButtonModule,
    AWCardModule: AWCardModule,
    AWCheckBoxModule: AWCheckBoxModule,
    AWCheckBoxListModule: AWCheckBoxListModule,
    AWHyperlinkModule: AWHyperlinkModule,
    AWChooserModule: AWChooserModule,
    AWDropdownModule: AWDropdownModule,
    AWCurrencyModule: AWCurrencyModule,
    AWDateAndTimeModule: AWDateAndTimeModule,
    AWDialogModule: AWDialogModule,
    AWGenericChooserModule: AWGenericChooserModule,
    AWRadioButtonModule: AWRadioButtonModule,
    AWRadioButtonListModule: AWRadioButtonListModule,
    AWOutlineForModule: AWOutlineForModule,
    AWTextAreaModule: AWTextAreaModule,
    AWPageNotificationModule: AWPageNotificationModule,
    AWPageWrapperModule: AWPageWrapperModule,
    AWRichTextAreaModule: AWRichTextAreaModule,
    AWSectionModule: AWSectionModule,
    AWStepperModule: AWStepperModule,
    AWDatatable2Module: AWDatatable2Module,
    AWConfirmationModule: AWConfirmationModule,
    AWScrollableContainerModule: AWScrollableContainerModule,
    AWListModule: AWListModule,
    WizardProgressModule: WizardProgressModule,
    ToggleSwitchModule: ToggleSwitchModule,
    BasicNavigatorComponent: BasicNavigatorComponent,
    ButtonComponent: ButtonComponent,
    CheckBoxListComponent: CheckBoxListComponent,
    CHOOSER_CONTROL_VALUE_ACCESSOR: CHOOSER_CONTROL_VALUE_ACCESSOR,
    ChooserComponent: ChooserComponent,
    ChooserState: ChooserState,
    DefaultSelectionState: DefaultSelectionState,
    ChooserSelectionState: ChooserSelectionState,
    ChooserDataSource: ChooserDataSource,
    isDSChooserInitParams: isDSChooserInitParams,
    CURRENCY_CONTROL_VALUE_ACCESSOR: CURRENCY_CONTROL_VALUE_ACCESSOR,
    CurrencyComponent: CurrencyComponent,
    Money: Money,
    DateAndTimeComponent: DateAndTimeComponent,
    DATETIME_CONTROL_VALUE_ACCESSOR: DATETIME_CONTROL_VALUE_ACCESSOR,
    DialogComponent: DialogComponent,
    DialogHeaderComponent: DialogHeaderComponent,
    DialogFooterComponent: DialogFooterComponent,
    ConfirmationComponent: ConfirmationComponent,
    ConfirmationHeaderComponent: ConfirmationHeaderComponent,
    ConfirmationFooterComponent: ConfirmationFooterComponent,
    OverlayComponent: OverlayComponent,
    DD_CONTROL_VALUE_ACCESSOR: DD_CONTROL_VALUE_ACCESSOR,
    DropdownComponent: DropdownComponent,
    GCChooserState: GCChooserState,
    GenericChooserComponent: GenericChooserComponent,
    HyperlinkComponent: HyperlinkComponent,
    INPUT_CONTROL_VALUE_ACCESSOR: INPUT_CONTROL_VALUE_ACCESSOR,
    InputFieldComponent: InputFieldComponent,
    RadioButtonListComponent: RadioButtonListComponent,
    StringComponent: StringComponent,
    TEXTAREA_CONTROL_VALUE_ACCESSOR: TEXTAREA_CONTROL_VALUE_ACCESSOR,
    TextAreaComponent: TextAreaComponent,
    CardComponent: CardComponent,
    CardZoneTitleComponent: CardZoneTitleComponent,
    CardZoneTopComponent: CardZoneTopComponent,
    CardZoneBottomComponent: CardZoneBottomComponent,
    OutlineForComponent: OutlineForComponent,
    OutlineControlComponent: OutlineControlComponent,
    OutlineState: OutlineState,
    isOutlineNode: isOutlineNode,
    PageContentComponent: PageContentComponent,
    PageNotificationComponent: PageNotificationComponent,
    PageNotification: PageNotification,
    PageInitialized: PageInitialized,
    PageDestroyed: PageDestroyed,
    PageWrapper: PageWrapper,
    PageLifeCycleService: PageLifeCycleService,
    ObjectPageWrapperComponent: ObjectPageWrapperComponent,
    PageHeaderComponent: PageHeaderComponent,
    PageMenuItem: PageMenuItem,
    UserNotification: UserNotification,
    PageFooterComponent: PageFooterComponent,
    SidenavComponent: SidenavComponent,
    PageActionsComponent: PageActionsComponent,
    SectionComponent: SectionComponent,
    SubSectionComponent: SubSectionComponent,
    SectionActionsComponent: SectionActionsComponent,
    EditorType: EditorType,
    RichTextAreaComponent: RichTextAreaComponent,
    CheckboxComponent: CheckboxComponent,
    RadioButtonComponent: RadioButtonComponent,
    StepperComponent: StepperComponent,
    StepComponent: StepComponent,
    ScrollableContainerComponent: ScrollableContainerComponent,
    HoverCardComponent: HoverCardComponent,
    ListComponent: ListComponent,
    Datatable2Component: Datatable2Component,
    DTHeaderComponent2: DTHeaderComponent2,
    DTColumn2Component: DTColumn2Component,
    DTDetailRowComponent: DTDetailRowComponent,
    Datatable2State: Datatable2State,
    isDTInitParams: isDTInitParams,
    DT2DataSource: DT2DataSource,
    DetailRowExpansionState: DetailRowExpansionState,
    DTMultiSelectColumnComponent: DTMultiSelectColumnComponent,
    WizardProgressComponent: WizardProgressComponent,
    ToggleSwitchComponent: ToggleSwitchComponent,
    DomHandler: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DomHandler"],
    TreeDragDropService: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TreeDragDropService"],
    ConfirmationService: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ConfirmationService"],
    Header: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Header"],
    Footer: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Footer"],
    PrimeTemplate: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["PrimeTemplate"],
    Column: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Column"],
    Row: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Row"],
    HeaderColumnGroup: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["HeaderColumnGroup"],
    FooterColumnGroup: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["FooterColumnGroup"],
    SharedModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["SharedModule"],
    AccordionTab: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["AccordionTab"],
    Accordion: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Accordion"],
    AccordionModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["AccordionModule"],
    AUTOCOMPLETE_VALUE_ACCESSOR: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["AUTOCOMPLETE_VALUE_ACCESSOR"],
    AutoComplete: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["AutoComplete"],
    AutoCompleteModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["AutoCompleteModule"],
    BlockUI: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["BlockUI"],
    BlockUIModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["BlockUIModule"],
    Breadcrumb: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Breadcrumb"],
    BreadcrumbModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["BreadcrumbModule"],
    ButtonDirective: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ButtonDirective"],
    Button: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Button"],
    ButtonModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ButtonModule"],
    Captcha: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Captcha"],
    CaptchaModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["CaptchaModule"],
    CALENDAR_VALUE_ACCESSOR: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["CALENDAR_VALUE_ACCESSOR"],
    Calendar: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Calendar"],
    CalendarModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["CalendarModule"],
    Card: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Card"],
    CardModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["CardModule"],
    Carousel: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Carousel"],
    CarouselModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["CarouselModule"],
    UIChart: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["UIChart"],
    ChartModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ChartModule"],
    CHECKBOX_VALUE_ACCESSOR: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["CHECKBOX_VALUE_ACCESSOR"],
    Checkbox: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Checkbox"],
    CheckboxModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["CheckboxModule"],
    CHIPS_VALUE_ACCESSOR: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["CHIPS_VALUE_ACCESSOR"],
    Chips: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Chips"],
    ChipsModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ChipsModule"],
    CodeHighlighter: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["CodeHighlighter"],
    CodeHighlighterModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["CodeHighlighterModule"],
    COLORPICKER_VALUE_ACCESSOR: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["COLORPICKER_VALUE_ACCESSOR"],
    ColorPicker: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ColorPicker"],
    ColorPickerModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ColorPickerModule"],
    ConfirmDialog: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ConfirmDialog"],
    ConfirmDialogModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ConfirmDialogModule"],
    ContextMenuSub: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ContextMenuSub"],
    ContextMenu: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ContextMenu"],
    ContextMenuModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ContextMenuModule"],
    DataGrid: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DataGrid"],
    DataGridModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DataGridModule"],
    DataList: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DataList"],
    DataListModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DataListModule"],
    DataScroller: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DataScroller"],
    DataScrollerModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DataScrollerModule"],
    DTRadioButton: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DTRadioButton"],
    DTCheckbox: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DTCheckbox"],
    ColumnHeaders: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ColumnHeaders"],
    ColumnFooters: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ColumnFooters"],
    TableBody: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TableBody"],
    ScrollableView: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ScrollableView"],
    DataTable: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DataTable"],
    DataTableModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DataTableModule"],
    DeferredLoader: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DeferredLoader"],
    DeferModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DeferModule"],
    Dialog: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Dialog"],
    DialogModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DialogModule"],
    Draggable: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Draggable"],
    Droppable: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Droppable"],
    DragDropModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DragDropModule"],
    DROPDOWN_VALUE_ACCESSOR: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DROPDOWN_VALUE_ACCESSOR"],
    Dropdown: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Dropdown"],
    DropdownModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DropdownModule"],
    EDITOR_VALUE_ACCESSOR: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["EDITOR_VALUE_ACCESSOR"],
    Editor: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Editor"],
    EditorModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["EditorModule"],
    Fieldset: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Fieldset"],
    FieldsetModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["FieldsetModule"],
    FileUpload: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["FileUpload"],
    FileUploadModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["FileUploadModule"],
    Galleria: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Galleria"],
    GalleriaModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["GalleriaModule"],
    GMap: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["GMap"],
    GMapModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["GMapModule"],
    Growl: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Growl"],
    GrowlModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["GrowlModule"],
    InplaceDisplay: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["InplaceDisplay"],
    InplaceContent: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["InplaceContent"],
    Inplace: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Inplace"],
    InplaceModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["InplaceModule"],
    INPUTMASK_VALUE_ACCESSOR: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["INPUTMASK_VALUE_ACCESSOR"],
    InputMask: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["InputMask"],
    InputMaskModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["InputMaskModule"],
    INPUTSWITCH_VALUE_ACCESSOR: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["INPUTSWITCH_VALUE_ACCESSOR"],
    InputSwitch: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["InputSwitch"],
    InputSwitchModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["InputSwitchModule"],
    InputText: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["InputText"],
    InputTextModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["InputTextModule"],
    InputTextarea: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["InputTextarea"],
    InputTextareaModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["InputTextareaModule"],
    KEYFILTER_VALIDATOR: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["KEYFILTER_VALIDATOR"],
    KeyFilter: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["KeyFilter"],
    KeyFilterModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["KeyFilterModule"],
    Lightbox: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Lightbox"],
    LightboxModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["LightboxModule"],
    LISTBOX_VALUE_ACCESSOR: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["LISTBOX_VALUE_ACCESSOR"],
    Listbox: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Listbox"],
    ListboxModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ListboxModule"],
    MegaMenu: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["MegaMenu"],
    MegaMenuModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["MegaMenuModule"],
    MenuItemContent: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["MenuItemContent"],
    Menu: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Menu"],
    MenuModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["MenuModule"],
    MenubarSub: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["MenubarSub"],
    Menubar: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Menubar"],
    MenubarModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["MenubarModule"],
    Messages: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Messages"],
    MessagesModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["MessagesModule"],
    UIMessage: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["UIMessage"],
    MessageModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["MessageModule"],
    MULTISELECT_VALUE_ACCESSOR: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["MULTISELECT_VALUE_ACCESSOR"],
    MultiSelect: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["MultiSelect"],
    MultiSelectModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["MultiSelectModule"],
    OrderList: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["OrderList"],
    OrderListModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["OrderListModule"],
    OrganizationChartNode: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["OrganizationChartNode"],
    OrganizationChart: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["OrganizationChart"],
    OrganizationChartModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["OrganizationChartModule"],
    OverlayPanel: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["OverlayPanel"],
    OverlayPanelModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["OverlayPanelModule"],
    Paginator: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Paginator"],
    PaginatorModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["PaginatorModule"],
    Panel: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Panel"],
    PanelModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["PanelModule"],
    BasePanelMenuItem: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["BasePanelMenuItem"],
    PanelMenuSub: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["PanelMenuSub"],
    PanelMenu: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["PanelMenu"],
    PanelMenuModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["PanelMenuModule"],
    Password: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Password"],
    PasswordModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["PasswordModule"],
    PickList: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["PickList"],
    PickListModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["PickListModule"],
    ProgressBar: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ProgressBar"],
    ProgressBarModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ProgressBarModule"],
    ProgressSpinner: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ProgressSpinner"],
    ProgressSpinnerModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ProgressSpinnerModule"],
    RADIO_VALUE_ACCESSOR: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["RADIO_VALUE_ACCESSOR"],
    RadioButton: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["RadioButton"],
    RadioButtonModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["RadioButtonModule"],
    RATING_VALUE_ACCESSOR: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["RATING_VALUE_ACCESSOR"],
    Rating: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Rating"],
    RatingModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["RatingModule"],
    Schedule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Schedule"],
    ScheduleModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ScheduleModule"],
    ScrollPanel: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ScrollPanel"],
    ScrollPanelModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ScrollPanelModule"],
    SELECTBUTTON_VALUE_ACCESSOR: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["SELECTBUTTON_VALUE_ACCESSOR"],
    SelectButton: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["SelectButton"],
    SelectButtonModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["SelectButtonModule"],
    SlideMenuSub: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["SlideMenuSub"],
    SlideMenu: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["SlideMenu"],
    SlideMenuModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["SlideMenuModule"],
    SLIDER_VALUE_ACCESSOR: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["SLIDER_VALUE_ACCESSOR"],
    Slider: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Slider"],
    SliderModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["SliderModule"],
    Sidebar: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Sidebar"],
    SidebarModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["SidebarModule"],
    SPINNER_VALUE_ACCESSOR: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["SPINNER_VALUE_ACCESSOR"],
    Spinner: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Spinner"],
    SpinnerModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["SpinnerModule"],
    SplitButton: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["SplitButton"],
    SplitButtonModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["SplitButtonModule"],
    Steps: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Steps"],
    StepsModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["StepsModule"],
    TabViewNav: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TabViewNav"],
    TabPanel: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TabPanel"],
    TabView: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TabView"],
    TabViewModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TabViewModule"],
    TabMenu: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TabMenu"],
    TabMenuModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TabMenuModule"],
    Terminal: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Terminal"],
    TerminalModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TerminalModule"],
    TieredMenuSub: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TieredMenuSub"],
    TieredMenu: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TieredMenu"],
    TieredMenuModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TieredMenuModule"],
    TOGGLEBUTTON_VALUE_ACCESSOR: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TOGGLEBUTTON_VALUE_ACCESSOR"],
    ToggleButton: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ToggleButton"],
    ToggleButtonModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ToggleButtonModule"],
    Toolbar: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Toolbar"],
    ToolbarModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ToolbarModule"],
    Tooltip: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Tooltip"],
    TooltipModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TooltipModule"],
    UITreeNode: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["UITreeNode"],
    Tree: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Tree"],
    TreeModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TreeModule"],
    TreeTableService: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TreeTableService"],
    TreeTable: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TreeTable"],
    TTBody: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TTBody"],
    TTScrollableView: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TTScrollableView"],
    TTSortableColumn: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TTSortableColumn"],
    TTSortIcon: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TTSortIcon"],
    TTResizableColumn: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TTResizableColumn"],
    TTReorderableColumn: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TTReorderableColumn"],
    TTSelectableRow: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TTSelectableRow"],
    TTSelectableRowDblClick: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TTSelectableRowDblClick"],
    TTContextMenuRow: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TTContextMenuRow"],
    TTCheckbox: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TTCheckbox"],
    TTHeaderCheckbox: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TTHeaderCheckbox"],
    TTEditableColumn: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TTEditableColumn"],
    TreeTableCellEditor: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TreeTableCellEditor"],
    TreeTableToggler: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TreeTableToggler"],
    TreeTableModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TreeTableModule"],
    TRISTATECHECKBOX_VALUE_ACCESSOR: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TRISTATECHECKBOX_VALUE_ACCESSOR"],
    TriStateCheckbox: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TriStateCheckbox"],
    TriStateCheckboxModule: primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TriStateCheckboxModule"]
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWOverlayModule = /** @class */ (function () {
    function AWOverlayModule() {
    }
    AWOverlayModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        OverlayComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        AWCoreComponentModule,
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["OverlayPanelModule"]
                    ],
                    entryComponents: [
                        OverlayComponent
                    ],
                    exports: [
                        OverlayComponent,
                        AWCoreComponentModule
                    ],
                    providers: []
                },] },
    ];
    return AWOverlayModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWHoverCardModule = /** @class */ (function () {
    function AWHoverCardModule() {
    }
    AWHoverCardModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    declarations: [
                        HoverCardComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        AWOverlayModule,
                        AWStringFieldModule
                    ],
                    entryComponents: [
                        HoverCardComponent
                    ],
                    exports: [
                        HoverCardComponent
                    ],
                    providers: []
                },] },
    ];
    return AWHoverCardModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Component module is core module for the common layouts and widgets libraries.
 *
 * todo: There are some things that I still need to resolve - please see and notices \@Duplicates
 * jsdoc I want to keep this there to remind me that I need to refactor this as of now there are
 * not much option with angular.
 *
 */
var AribaComponentsModule = /** @class */ (function () {
    function AribaComponentsModule() {
    }
    /**
     * @return {?}
     */
    AribaComponentsModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: AribaComponentsModule,
            providers: [
                ModalService,
                ComponentRegistry,
                ErrorManagerService,
                DomUtilsService,
                DataTypeProviderRegistry,
                DataProviders,
                DataFinders,
                AwNameStore,
                {
                    provide: _angular_core__WEBPACK_IMPORTED_MODULE_0__["APP_INITIALIZER"],
                    useFactory: registerComponents,
                    deps: [ComponentRegistry],
                    multi: true,
                }
            ]
        };
    };
    AribaComponentsModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    imports: [
                        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["AribaCoreModule"],
                        _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        AWCoreComponentModule,
                        AWBasicNavigatorModule,
                        AWCardModule,
                        AWCheckBoxListModule,
                        AWCheckBoxModule,
                        AWChooserModule,
                        AWConfirmationModule,
                        AWCurrencyModule,
                        AWDateAndTimeModule,
                        AWDialogModule,
                        AWDropdownModule,
                        AWGenericChooserModule,
                        AWHyperlinkModule,
                        AWInputFieldModule,
                        AWOutlineForModule,
                        AWOverlayModule,
                        AWPageNotificationModule,
                        AWPageWrapperModule,
                        AWRadioButtonModule,
                        AWRadioButtonListModule,
                        AWRichTextAreaModule,
                        AWScrollableContainerModule,
                        AWSectionModule,
                        AWStepperModule,
                        AWStringFieldModule,
                        AWTextAreaModule,
                        AWFormTableModule,
                        AWButtonModule,
                        AWHoverCardModule,
                        AWListModule,
                        AWDatatable2Module,
                        WizardProgressModule,
                        ToggleSwitchModule,
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["PanelModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ButtonModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ToolbarModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["InputTextModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["InputTextareaModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["AutoCompleteModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DropdownModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["CalendarModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["CheckboxModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["RadioButtonModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["SharedModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DialogModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["MenuModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TabMenuModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["AccordionModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["EditorModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DataTableModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["PaginatorModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["OverlayPanelModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TreeModule"]
                    ],
                    declarations: [
                        SpyLifeCycleHooksDirective,
                    ],
                    bootstrap: [],
                    entryComponents: [
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Checkbox"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["Dialog"]
                    ],
                    exports: [
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                        SpyLifeCycleHooksDirective,
                        AWCoreComponentModule,
                        AWBasicNavigatorModule,
                        AWCardModule,
                        AWCheckBoxListModule,
                        AWCheckBoxModule,
                        AWChooserModule,
                        AWConfirmationModule,
                        AWCurrencyModule,
                        AWDateAndTimeModule,
                        AWDialogModule,
                        AWDropdownModule,
                        AWGenericChooserModule,
                        AWHyperlinkModule,
                        AWInputFieldModule,
                        AWOutlineForModule,
                        AWOverlayModule,
                        AWPageNotificationModule,
                        AWPageWrapperModule,
                        AWRadioButtonModule,
                        AWRadioButtonListModule,
                        AWRichTextAreaModule,
                        AWScrollableContainerModule,
                        AWSectionModule,
                        AWStepperModule,
                        AWStringFieldModule,
                        AWTextAreaModule,
                        AWFormTableModule,
                        EmbeddedItemDirective,
                        AWButtonModule,
                        AWHoverCardModule,
                        AWListModule,
                        AWDatatable2Module,
                        WizardProgressModule,
                        ToggleSwitchModule,
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["SharedModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["PanelModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ButtonModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["ToolbarModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["InputTextModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["InputTextareaModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["AutoCompleteModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DropdownModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["CalendarModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["CheckboxModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["RadioButtonModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DialogModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["MenuModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["TabMenuModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["EditorModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["DataTableModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["PaginatorModule"],
                        primeng_primeng__WEBPACK_IMPORTED_MODULE_9__["OverlayPanelModule"]
                    ]
                },] },
    ];
    return AribaComponentsModule;
}());
/**
 * @param {?} compRegistry
 * @return {?}
 */
function registerComponents(compRegistry) {
    return compRegistry.initialize.bind(compRegistry, components);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *
 * This module is used mainly for tests as importing a module with all the components and you
 * use only 1 or two has a big impact on the performance execution. e.g. from executing couple
 * tests under 1 sec can go up to 10sec if you import all the things that you are not using.
 *
 * I havent noticed anything similar in application its only jasmine/karma that needs to init
 * components for every test.
 *
 */
var AribaComponentsTestProviderModule = /** @class */ (function () {
    function AribaComponentsTestProviderModule() {
    }
    /**
     * @return {?}
     */
    AribaComponentsTestProviderModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: AribaComponentsTestProviderModule,
            providers: [
                ModalService,
                ComponentRegistry,
                ErrorManagerService,
                DomUtilsService,
                DataTypeProviderRegistry,
                DataProviders,
                DataFinders,
                AwNameStore,
                {
                    provide: _angular_core__WEBPACK_IMPORTED_MODULE_0__["APP_INITIALIZER"],
                    useFactory: registerComponents$1,
                    deps: [ComponentRegistry],
                    multi: true,
                }
            ]
        };
    };
    AribaComponentsTestProviderModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    imports: []
                },] },
    ];
    return AribaComponentsTestProviderModule;
}());
/**
 * @param {?} compRegistry
 * @return {?}
 */
function registerComponents$1(compRegistry) {
    return compRegistry.initialize.bind(compRegistry, components);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */



//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../dist/@aribaui/core/fesm5/aribaui-core.js":
/*!***********************************************************************************************************!*\
  !*** /Users/i304804/Documents/ariba/projects/Open Source/MetaUI/dist/@aribaui/core/fesm5/aribaui-core.js ***!
  \***********************************************************************************************************/
/*! exports provided: AppConfig, makeConfig, Environment, Resource, DefaultRestBuilder, isEntity, isValue, ActionSegment, RestAction, ResourceSegment, RestSegmentType, UrlSegment, ContextSegment, HostSegment, IdentifierSegment, OfParentSegment, RestUrlGroup, MapWrapper, StringMapWrapper, ListWrapper, isListLikeIterable, areIterablesEqual, iterateListLike, findLast, getTypeNameForDebugging, unimplemented, isPresent, isBlank, isBoolean, isNumber, isString, isFunction, isType, isStringMap, isStrictStringMap, isPromise, isArray, isDate, isWindow, isRegExp, noop, stringify, className, applyMixins, StringWrapper, StringJoiner, NumberWrapper, FunctionWrapper, looseIdentical, getMapKey, normalizeBlank, normalizeBool, isJsObject, print, warn, assert, checksum, crc32, Json, DateWrapper, BooleanWrapper, getSymbolIterator, evalExpression, evalExpressionWithCntx, isPrimitive, hasConstructor, escape, escapeRegExp, hashCode, objectToName, equals, shiftLeft, shiftRight, Extensible, readGlobalParam, decamelize, nonPrivatePrefix, hasGetter, uuid, objectValues, NotFoundComponent, RoutingService, AribaCoreModule, FieldPath, AribaApplication, Notifications, ɵc, ɵa, ɵb, ɵe, ɵd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppConfig", function() { return AppConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeConfig", function() { return makeConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Environment", function() { return Environment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Resource", function() { return Resource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultRestBuilder", function() { return DefaultRestBuilder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isEntity", function() { return isEntity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isValue", function() { return isValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActionSegment", function() { return ActionSegment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RestAction", function() { return RestAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResourceSegment", function() { return ResourceSegment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RestSegmentType", function() { return RestSegmentType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UrlSegment", function() { return UrlSegment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContextSegment", function() { return ContextSegment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HostSegment", function() { return HostSegment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IdentifierSegment", function() { return IdentifierSegment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OfParentSegment", function() { return OfParentSegment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RestUrlGroup", function() { return RestUrlGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MapWrapper", function() { return MapWrapper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StringMapWrapper", function() { return StringMapWrapper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListWrapper", function() { return ListWrapper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isListLikeIterable", function() { return isListLikeIterable$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "areIterablesEqual", function() { return areIterablesEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iterateListLike", function() { return iterateListLike; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findLast", function() { return findLast; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTypeNameForDebugging", function() { return getTypeNameForDebugging; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unimplemented", function() { return unimplemented; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPresent", function() { return isPresent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isBlank", function() { return isBlank; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isBoolean", function() { return isBoolean; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNumber", function() { return isNumber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isString", function() { return isString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFunction", function() { return isFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isType", function() { return isType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isStringMap", function() { return isStringMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isStrictStringMap", function() { return isStrictStringMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPromise", function() { return isPromise; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isArray", function() { return isArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDate", function() { return isDate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isWindow", function() { return isWindow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isRegExp", function() { return isRegExp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "noop", function() { return noop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stringify", function() { return stringify; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "className", function() { return className; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyMixins", function() { return applyMixins; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StringWrapper", function() { return StringWrapper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StringJoiner", function() { return StringJoiner; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumberWrapper", function() { return NumberWrapper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FunctionWrapper", function() { return FunctionWrapper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "looseIdentical", function() { return looseIdentical; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMapKey", function() { return getMapKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalizeBlank", function() { return normalizeBlank; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalizeBool", function() { return normalizeBool; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isJsObject", function() { return isJsObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "print", function() { return print; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "warn", function() { return warn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assert", function() { return assert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "checksum", function() { return checksum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "crc32", function() { return crc32; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Json", function() { return Json; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateWrapper", function() { return DateWrapper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BooleanWrapper", function() { return BooleanWrapper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSymbolIterator", function() { return getSymbolIterator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "evalExpression", function() { return evalExpression; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "evalExpressionWithCntx", function() { return evalExpressionWithCntx; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPrimitive", function() { return isPrimitive; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasConstructor", function() { return hasConstructor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "escape", function() { return escape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "escapeRegExp", function() { return escapeRegExp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hashCode", function() { return hashCode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "objectToName", function() { return objectToName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shiftLeft", function() { return shiftLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shiftRight", function() { return shiftRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Extensible", function() { return Extensible; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readGlobalParam", function() { return readGlobalParam; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decamelize", function() { return decamelize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nonPrivatePrefix", function() { return nonPrivatePrefix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasGetter", function() { return hasGetter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uuid", function() { return uuid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "objectValues", function() { return objectValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NotFoundComponent", function() { return NotFoundComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RoutingService", function() { return RoutingService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AribaCoreModule", function() { return AribaCoreModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FieldPath", function() { return FieldPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AribaApplication", function() { return AribaApplication; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Notifications", function() { return Notifications; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function() { return AribaCoreRoutingModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function() { return UserConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function() { return makeHttpClientHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function() { return GlobalErrorHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function() { return HttpMockInterceptor; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var big_integer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! big-integer */ "../../node_modules/big-integer/BigInteger.js");
/* harmony import */ var big_integer__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(big_integer__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var typescript_collections__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! typescript-collections */ "../../node_modules/typescript-collections/dist/lib/index.js");
/* harmony import */ var typescript_collections__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(typescript_collections__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ "../../node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common/http */ "../../node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/router */ "../../node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/_esm5/index.js");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/platform-browser */ "../../node_modules/@angular/platform-browser/fesm5/platform-browser.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/common */ "../../node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var object_path__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! object-path */ "../../node_modules/object-path/index.js");
/* harmony import */ var object_path__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(object_path__WEBPACK_IMPORTED_MODULE_10__);












/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ bigInt = big_integer__WEBPACK_IMPORTED_MODULE_1__;
/**
 *  Set of reusable globals. This is taken from the Angular 2 since its not exported API. And there
 *  is a need for such common functions and wrappers
 *
 */
var /** @type {?} */ __window = typeof window !== 'undefined' && window;
var /** @type {?} */ _global = __window;
/**
 * @param {?} varName
 * @return {?}
 */
function readGlobalParam(varName) {
    return _global[varName];
}
/**
 * @param {?} type
 * @return {?}
 */
function getTypeNameForDebugging(type) {
    if (type['name']) {
        return type['name'];
    }
    return typeof type;
}
/**
 * @return {?}
 */
function unimplemented() {
    throw new Error('unimplemented');
}
/**
 * @param {?} obj
 * @return {?}
 */
function isPresent(obj) {
    return obj !== undefined && obj !== null;
}
/**
 * @param {?} obj
 * @return {?}
 */
function isBlank(obj) {
    return obj === undefined || obj === null;
}
/**
 * @param {?} obj
 * @return {?}
 */
function isBoolean(obj) {
    return typeof obj === 'boolean';
}
/**
 * @param {?} obj
 * @return {?}
 */
function isNumber(obj) {
    return typeof obj === 'number';
}
/**
 * @param {?} obj
 * @return {?}
 */
function isString(obj) {
    return typeof obj === 'string';
}
/**
 * @param {?} obj
 * @return {?}
 */
function isFunction(obj) {
    return typeof obj === 'function';
}
/**
 * @param {?} obj
 * @return {?}
 */
function isType(obj) {
    return isFunction(obj);
}
/**
 * @param {?} obj
 * @return {?}
 */
function isStringMap(obj) {
    return typeof obj === 'object' && obj !== null;
}
var /** @type {?} */ STRING_MAP_PROTO = Object.getPrototypeOf({});
/**
 * @param {?} obj
 * @return {?}
 */
function isStrictStringMap(obj) {
    return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
}
/**
 * @param {?} obj
 * @return {?}
 */
function isPromise(obj) {
    // allow any Promise/A+ compliant thenable.
    // It's up to the caller to ensure that obj.then conforms to the spec
    return isPresent(obj) && isFunction(obj.then);
}
/**
 * @param {?} obj
 * @return {?}
 */
function isArray(obj) {
    return Array.isArray(obj);
}
/**
 * @param {?} obj
 * @return {?}
 */
function isDate(obj) {
    return (obj instanceof Date && !isNaN(obj.valueOf())) ||
        (isPresent(obj) && isFunction(obj.now));
}
/**
 * Checks if `obj` is a window object.
 *
 * @param {?} obj
 * @return {?}
 */
function isWindow(obj) {
    return obj && obj.window === obj;
}
/**
 * Determines if a value is a regular expression object.
 *
 * @param {?} value
 * @return {?}
 */
function isRegExp(value) {
    return Object.prototype.toString.call(value) === '[object RegExp]';
}
/**
 * @return {?}
 */
function noop() {
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function shiftLeft(a, b) {
    return bigInt(a).shiftLeft(b).valueOf();
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function shiftRight(a, b) {
    return bigInt(a).shiftRight(b).valueOf();
}
/**
 * @param {?} token
 * @return {?}
 */
function stringify(token) {
    if (typeof token === 'string') {
        return token;
    }
    if (token === undefined || token === null) {
        return '' + token;
    }
    if (token.overriddenName) {
        return token.overriddenName;
    }
    if (token.name) {
        return token.name;
    }
    var /** @type {?} */ res = token.toString();
    var /** @type {?} */ newLineIndex = res.indexOf('\n');
    return (newLineIndex === -1) ? res : res.substring(0, newLineIndex);
}
/**
 * @param {?} clazz
 * @return {?}
 */
function className(clazz) {
    if (isPresent(clazz.constructor)) {
        var /** @type {?} */ classN = clazz.constructor.toString();
        classN = classN.substr('function '.length);
        return classN.substr(0, classN.indexOf('('));
    }
    return clazz;
}
/**
 *  Source: https://www.typescriptlang.org/docs/handbook/mixins.html
 *
 *  Function that copies properties of the baseCtors to derivedCtor.
 *  Can be used to achieve multiple inheritance.
 * @param {?} derivedCtor
 * @param {?} baseCtors
 * @return {?}
 */
function applyMixins(derivedCtor, baseCtors) {
    baseCtors.forEach(function (baseCtor) {
        Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {
            derivedCtor.prototype[name]
                = baseCtor.prototype[name];
        });
    });
}
var StringWrapper = /** @class */ (function () {
    function StringWrapper() {
    }
    /**
     * @param {?} code
     * @return {?}
     */
    StringWrapper.fromCharCode = /**
     * @param {?} code
     * @return {?}
     */
    function (code) {
        return String.fromCharCode(code);
    };
    /**
     * @param {?} s
     * @param {?} index
     * @return {?}
     */
    StringWrapper.charCodeAt = /**
     * @param {?} s
     * @param {?} index
     * @return {?}
     */
    function (s, index) {
        return s.charCodeAt(index);
    };
    /**
     * @param {?} s
     * @param {?} regExp
     * @return {?}
     */
    StringWrapper.split = /**
     * @param {?} s
     * @param {?} regExp
     * @return {?}
     */
    function (s, regExp) {
        return s.split(regExp);
    };
    /**
     * @param {?} s
     * @param {?} s2
     * @return {?}
     */
    StringWrapper.equals = /**
     * @param {?} s
     * @param {?} s2
     * @return {?}
     */
    function (s, s2) {
        return s === s2;
    };
    /**
     * @param {?} s
     * @param {?} charVal
     * @return {?}
     */
    StringWrapper.stripLeft = /**
     * @param {?} s
     * @param {?} charVal
     * @return {?}
     */
    function (s, charVal) {
        if (s && s.length) {
            var /** @type {?} */ pos = 0;
            for (var /** @type {?} */ i = 0; i < s.length; i++) {
                if (s[i] !== charVal) {
                    break;
                }
                pos++;
            }
            s = s.substring(pos);
        }
        return s;
    };
    /**
     * @param {?} s
     * @param {?} charVal
     * @return {?}
     */
    StringWrapper.stripRight = /**
     * @param {?} s
     * @param {?} charVal
     * @return {?}
     */
    function (s, charVal) {
        if (s && s.length) {
            var /** @type {?} */ pos = s.length;
            for (var /** @type {?} */ i = s.length - 1; i >= 0; i--) {
                if (s[i] !== charVal) {
                    break;
                }
                pos--;
            }
            s = s.substring(0, pos);
        }
        return s;
    };
    /**
     * @param {?} s
     * @param {?} from
     * @param {?} replace
     * @return {?}
     */
    StringWrapper.replace = /**
     * @param {?} s
     * @param {?} from
     * @param {?} replace
     * @return {?}
     */
    function (s, from, replace) {
        return s.replace(from, replace);
    };
    /**
     * @param {?} s
     * @param {?} from
     * @param {?} replace
     * @return {?}
     */
    StringWrapper.replaceAll = /**
     * @param {?} s
     * @param {?} from
     * @param {?} replace
     * @return {?}
     */
    function (s, from, replace) {
        return s.replace(from, replace);
    };
    /**
     * @template T
     * @param {?} s
     * @param {?=} from
     * @param {?=} to
     * @return {?}
     */
    StringWrapper.slice = /**
     * @template T
     * @param {?} s
     * @param {?=} from
     * @param {?=} to
     * @return {?}
     */
    function (s, from, to) {
        if (from === void 0) { from = 0; }
        if (to === void 0) { to = null; }
        return s.slice(from, to === null ? undefined : to);
    };
    /**
     * @param {?} s
     * @param {?} substr
     * @return {?}
     */
    StringWrapper.contains = /**
     * @param {?} s
     * @param {?} substr
     * @return {?}
     */
    function (s, substr) {
        return s.indexOf(substr) !== -1;
    };
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    StringWrapper.compare = /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        if (a < b) {
            return -1;
        }
        else if (a > b) {
            return 1;
        }
        else {
            return 0;
        }
    };
    /**
     * @param {?} subject
     * @param {?} searchString
     * @param {?=} position
     * @return {?}
     */
    StringWrapper.endsWidth = /**
     * @param {?} subject
     * @param {?} searchString
     * @param {?=} position
     * @return {?}
     */
    function (subject, searchString, position) {
        if (position === void 0) { position = 0; }
        if (!String.prototype.endsWith) {
            String.prototype.endsWith = function (sstring, pos) {
                if (pos === void 0) { pos = 0; }
                var /** @type {?} */ subjectString = this.toString();
                if (typeof pos !== 'number' || !isFinite(pos) || Math.floor(pos) !== pos || pos
                    >
                        subjectString.length) {
                    pos = subjectString.length;
                }
                pos -= sstring.length;
                var /** @type {?} */ lastIndex = subjectString.indexOf(sstring, pos);
                return lastIndex !== -1 && lastIndex === pos;
            };
        }
        return subject.endsWith(searchString);
    };
    /**
     * @param {?} subject
     * @param {?} searchString
     * @return {?}
     */
    StringWrapper.startsWidth = /**
     * @param {?} subject
     * @param {?} searchString
     * @return {?}
     */
    function (subject, searchString) {
        return subject.indexOf(searchString) === 0;
    };
    return StringWrapper;
}());
var StringJoiner = /** @class */ (function () {
    function StringJoiner(parts) {
        if (parts === void 0) { parts = []; }
        this.parts = parts;
    }
    /**
     * @param {?} part
     * @return {?}
     */
    StringJoiner.prototype.add = /**
     * @param {?} part
     * @return {?}
     */
    function (part) {
        this.parts.push(part);
        return this;
    };
    /**
     * @return {?}
     */
    StringJoiner.prototype.last = /**
     * @return {?}
     */
    function () {
        return this.parts[this.parts.length - 1];
    };
    /**
     * @return {?}
     */
    StringJoiner.prototype.toString = /**
     * @return {?}
     */
    function () {
        return this.parts.join('');
    };
    return StringJoiner;
}());
var NumberWrapper = /** @class */ (function () {
    function NumberWrapper() {
    }
    /**
     * @param {?} n
     * @param {?} fractionDigits
     * @return {?}
     */
    NumberWrapper.toFixed = /**
     * @param {?} n
     * @param {?} fractionDigits
     * @return {?}
     */
    function (n, fractionDigits) {
        return n.toFixed(fractionDigits);
    };
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    NumberWrapper.equal = /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        return a === b;
    };
    /**
     * @param {?} text
     * @return {?}
     */
    NumberWrapper.parseIntAutoRadix = /**
     * @param {?} text
     * @return {?}
     */
    function (text) {
        var /** @type {?} */ result = parseInt(text);
        if (isNaN(result)) {
            throw new Error('Invalid integer literal when parsing ' + text);
        }
        return result;
    };
    /**
     * @param {?} text
     * @param {?} radix
     * @return {?}
     */
    NumberWrapper.parseInt = /**
     * @param {?} text
     * @param {?} radix
     * @return {?}
     */
    function (text, radix) {
        if (radix === 10) {
            if (/^(\-|\+)?[0-9]+$/.test(text)) {
                return parseInt(text, radix);
            }
        }
        else if (radix === 16) {
            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
                return parseInt(text, radix);
            }
        }
        else {
            var /** @type {?} */ result = parseInt(text, radix);
            if (!isNaN(result)) {
                return result;
            }
        }
        throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);
    };
    // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.
    /**
     * @param {?} text
     * @return {?}
     */
    NumberWrapper.parseFloat = /**
     * @param {?} text
     * @return {?}
     */
    function (text) {
        return parseFloat(text);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NumberWrapper.isNumeric = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return !isNaN(value - parseFloat(value));
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NumberWrapper.isNaN = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return isNaN(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NumberWrapper.isInteger = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return Number.isInteger(value);
    };
    return NumberWrapper;
}());
var FunctionWrapper = /** @class */ (function () {
    function FunctionWrapper() {
    }
    /**
     * @param {?} fn
     * @param {?} posArgs
     * @return {?}
     */
    FunctionWrapper.apply = /**
     * @param {?} fn
     * @param {?} posArgs
     * @return {?}
     */
    function (fn, posArgs) {
        return fn.apply(null, posArgs);
    };
    /**
     * @param {?} fn
     * @param {?} scope
     * @return {?}
     */
    FunctionWrapper.bind = /**
     * @param {?} fn
     * @param {?} scope
     * @return {?}
     */
    function (fn, scope) {
        return fn.bind(scope);
    };
    return FunctionWrapper;
}());
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function looseIdentical(a, b) {
    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
}
/**
 * @template T
 * @param {?} value
 * @return {?}
 */
function getMapKey(value) {
    return value;
}
/**
 * @param {?} obj
 * @return {?}
 */
function normalizeBlank(obj) {
    return isBlank(obj) ? null : obj;
}
/**
 * @param {?} obj
 * @return {?}
 */
function normalizeBool(obj) {
    return isBlank(obj) ? false : obj;
}
/**
 * @param {?} o
 * @return {?}
 */
function isJsObject(o) {
    return o !== null && (typeof o === 'function' || typeof o === 'object');
}
/**
 * @param {?} obj
 * @return {?}
 */
function print(obj) {
    console.log(obj);
}
/**
 * @param {?} obj
 * @return {?}
 */
function warn(obj) {
    console.warn(obj);
}
/**
 * @param {?} condition
 * @param {?} msg
 * @return {?}
 */
function assert(condition, msg) {
    if (!condition) {
        throw new Error(msg);
    }
}
/**
 * @param {?} s
 * @return {?}
 */
function checksum(s) {
    var /** @type {?} */ chk = 0x12345678;
    var /** @type {?} */ len = s.length;
    for (var /** @type {?} */ i = 0; i < len; i++) {
        chk += (s.charCodeAt(i) * (i + 1));
    }
    return (chk & 0xffffffff).toString(16);
}
/**
 * @param {?} crc
 * @param {?} anInt
 * @return {?}
 */
function crc32(crc, anInt) {
    /* tslint:disable */
    var /** @type {?} */ table = '00000000 77073096 EE0E612C 990951BA 076DC419 706AF48F E963A535 9E6495A3 0EDB8832 79DCB8A4 E0D5E91E 97D2D988 09B64C2B 7EB17CBD E7B82D07 90BF1D91 1DB71064 6AB020F2 F3B97148 84BE41DE 1ADAD47D 6DDDE4EB F4D4B551 83D385C7 136C9856 646BA8C0 FD62F97A 8A65C9EC 14015C4F 63066CD9 FA0F3D63 8D080DF5 3B6E20C8 4C69105E D56041E4 A2677172 3C03E4D1 4B04D447 D20D85FD A50AB56B 35B5A8FA 42B2986C DBBBC9D6 ACBCF940 32D86CE3 45DF5C75 DCD60DCF ABD13D59 26D930AC 51DE003A C8D75180 BFD06116 21B4F4B5 56B3C423 CFBA9599 B8BDA50F 2802B89E 5F058808 C60CD9B2 B10BE924 2F6F7C87 58684C11 C1611DAB B6662D3D 76DC4190 01DB7106 98D220BC EFD5102A 71B18589 06B6B51F 9FBFE4A5 E8B8D433 7807C9A2 0F00F934 9609A88E E10E9818 7F6A0DBB 086D3D2D 91646C97 E6635C01 6B6B51F4 1C6C6162 856530D8 F262004E 6C0695ED 1B01A57B 8208F4C1 F50FC457 65B0D9C6 12B7E950 8BBEB8EA FCB9887C 62DD1DDF 15DA2D49 8CD37CF3 FBD44C65 4DB26158 3AB551CE A3BC0074 D4BB30E2 4ADFA541 3DD895D7 A4D1C46D D3D6F4FB 4369E96A 346ED9FC AD678846 DA60B8D0 44042D73 33031DE5 AA0A4C5F DD0D7CC9 5005713C 270241AA BE0B1010 C90C2086 5768B525 206F85B3 B966D409 CE61E49F 5EDEF90E 29D9C998 B0D09822 C7D7A8B4 59B33D17 2EB40D81 B7BD5C3B C0BA6CAD EDB88320 9ABFB3B6 03B6E20C 74B1D29A EAD54739 9DD277AF 04DB2615 73DC1683 E3630B12 94643B84 0D6D6A3E 7A6A5AA8 E40ECF0B 9309FF9D 0A00AE27 7D079EB1 F00F9344 8708A3D2 1E01F268 6906C2FE F762575D 806567CB 196C3671 6E6B06E7 FED41B76 89D32BE0 10DA7A5A 67DD4ACC F9B9DF6F 8EBEEFF9 17B7BE43 60B08ED5 D6D6A3E8 A1D1937E 38D8C2C4 4FDFF252 D1BB67F1 A6BC5767 3FB506DD 48B2364B D80D2BDA AF0A1B4C 36034AF6 41047A60 DF60EFC3 A867DF55 316E8EEF 4669BE79 CB61B38C BC66831A 256FD2A0 5268E236 CC0C7795 BB0B4703 220216B9 5505262F C5BA3BBE B2BD0B28 2BB45A92 5CB36A04 C2D7FFA7 B5D0CF31 2CD99E8B 5BDEAE1D 9B64C2B0 EC63F226 756AA39C 026D930A 9C0906A9 EB0E363F 72076785 05005713 95BF4A82 E2B87A14 7BB12BAE 0CB61B38 92D28E9B E5D5BE0D 7CDCEFB7 0BDBDF21 86D3D2D4 F1D4E242 68DDB3F8 1FDA836E 81BE16CD F6B9265B 6FB077E1 18B74777 88085AE6 FF0F6A70 66063BCA 11010B5C 8F659EFF F862AE69 616BFFD3 166CCF45 A00AE278 D70DD2EE 4E048354 3903B3C2 A7672661 D06016F7 4969474D 3E6E77DB AED16A4A D9D65ADC 40DF0B66 37D83BF0 A9BCAE53 DEBB9EC5 47B2CF7F 30B5FFE9 BDBDF21C CABAC28A 53B39330 24B4A3A6 BAD03605 CDD70693 54DE5729 23D967BF B3667A2E C4614AB8 5D681B02 2A6F2B94 B40BBE37 C30C8EA1 5A05DF1B 2D02EF8D';
    /* tslint:enable */
    var /** @type {?} */ x = 0;
    var /** @type {?} */ y = 0;
    for (var /** @type {?} */ i = 0; i < 4; i++) {
        y = (crc ^ anInt) & 0xFF;
        x = Number('0x' + table.substr(y * 9, 8));
        crc = (crc >>> 8) ^ x;
    }
    return crc ^ (-1);
}
var Json = /** @class */ (function () {
    function Json() {
    }
    /**
     * @param {?} s
     * @return {?}
     */
    Json.parse = /**
     * @param {?} s
     * @return {?}
     */
    function (s) {
        return JSON.parse(s);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    Json.stringify = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        // Dart doesn't take 3 arguments
        return JSON.stringify(data, null, 2);
    };
    return Json;
}());
var DateWrapper = /** @class */ (function () {
    function DateWrapper() {
    }
    /**
     * @param {?} year
     * @param {?=} month
     * @param {?=} day
     * @param {?=} hour
     * @param {?=} minutes
     * @param {?=} seconds
     * @param {?=} milliseconds
     * @return {?}
     */
    DateWrapper.create = /**
     * @param {?} year
     * @param {?=} month
     * @param {?=} day
     * @param {?=} hour
     * @param {?=} minutes
     * @param {?=} seconds
     * @param {?=} milliseconds
     * @return {?}
     */
    function (year, month, day, hour, minutes, seconds, milliseconds) {
        if (month === void 0) { month = 1; }
        if (day === void 0) { day = 1; }
        if (hour === void 0) { hour = 0; }
        if (minutes === void 0) { minutes = 0; }
        if (seconds === void 0) { seconds = 0; }
        if (milliseconds === void 0) { milliseconds = 0; }
        return new Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
    };
    /**
     * @param {?} str
     * @return {?}
     */
    DateWrapper.fromISOString = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return new Date(str);
    };
    /**
     * @param {?} ms
     * @return {?}
     */
    DateWrapper.fromMillis = /**
     * @param {?} ms
     * @return {?}
     */
    function (ms) {
        return new Date(ms);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    DateWrapper.toMillis = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return date.getTime();
    };
    /**
     * @return {?}
     */
    DateWrapper.now = /**
     * @return {?}
     */
    function () {
        return new Date();
    };
    /**
     * @param {?} date
     * @return {?}
     */
    DateWrapper.toJson = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return date.toJSON();
    };
    return DateWrapper;
}());
var BooleanWrapper = /** @class */ (function () {
    function BooleanWrapper() {
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    BooleanWrapper.boleanValue = /**
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = false; }
        if (value && isString(value)) {
            return value === 'true';
        }
        return value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    BooleanWrapper.isFalse = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value && isString(value)) {
            return value === 'false';
        }
        else if (isStringMap(value)) {
            return false;
        }
        else if (isBoolean(value)) {
            return (value === false) ? true : false;
        }
        return value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    BooleanWrapper.isTrue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value && isString(value)) {
            return value === 'true';
        }
        else if (isStringMap(value)) {
            return false;
        }
        else if (isBoolean(value)) {
            return (value === true) ? true : false;
        }
        return value;
    };
    return BooleanWrapper;
}());
var /** @type {?} */ _symbolIterator = null;
/**
 * @return {?}
 */
function getSymbolIterator() {
    if (isBlank(_symbolIterator)) {
        if (isPresent(Symbol.iterator)) {
            _symbolIterator = Symbol.iterator;
        }
        else {
            // es6-shim specific logic
            var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);
            for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
                var /** @type {?} */ key = keys[i];
                if (key !== 'entries' && key !== 'size' &&
                    (/** @type {?} */ (Map)).prototype[key] === Map.prototype['entries']) {
                    _symbolIterator = key;
                }
            }
        }
    }
    return _symbolIterator;
}
var /** @type {?} */ ReservedKeyword = ['class'];
/**
 * @param {?} expr
 * @param {?} declarations
 * @param {?} lets
 * @return {?}
 */
function evalExpression(expr, declarations, lets) {
    var /** @type {?} */ fnBody = declarations + "\n\treturn " + expr + "\n//# sourceURL=AribaExpression";
    var /** @type {?} */ fnArgNames = [];
    var /** @type {?} */ fnArgValues = [];
    for (var /** @type {?} */ argName in lets) {
        if (StringWrapper.contains(expr, argName)) {
            fnArgNames.push(argName);
            fnArgValues.push(lets[argName]);
        }
    }
    if (lets instanceof Extensible) {
        var /** @type {?} */ extValues = lets;
        extValues.extendedFields().forEach(function (value, key) {
            if (StringWrapper.contains(expr, key) &&
                fnArgNames.indexOf(key) === -1 && ReservedKeyword.indexOf(key) === -1) {
                fnArgNames.push(key);
                fnArgValues.push(value);
            }
        });
    }
    // fnArgNames.push('this');
    // fnArgValues.push(lets);
    return new (Function.bind.apply(Function, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"])([void 0], fnArgNames.concat(fnBody))))().apply(void 0, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"])(fnArgValues));
}
/**
 * @param {?} expr
 * @param {?} declarations
 * @param {?} lets
 * @param {?} thisContext
 * @return {?}
 */
function evalExpressionWithCntx(expr, declarations, lets, thisContext) {
    var /** @type {?} */ fnBody = declarations + "\n\treturn " + expr + "\n//# sourceURL=AribaExpression";
    var /** @type {?} */ fnArgNames = [];
    var /** @type {?} */ fnArgValues = [];
    for (var /** @type {?} */ argName in lets) {
        if (StringWrapper.contains(expr, argName)) {
            fnArgNames.push(argName);
            fnArgValues.push(lets[argName]);
        }
    }
    if (lets instanceof Extensible) {
        var /** @type {?} */ extValues = lets;
        extValues.extendedFields().forEach(function (value, key) {
            if (StringWrapper.contains(expr, key) &&
                fnArgNames.indexOf(key) === -1 && ReservedKeyword.indexOf(key) === -1) {
                fnArgNames.push(key);
                fnArgValues.push(value);
            }
        });
    }
    // fnArgNames.push('this');
    // fnArgValues.push(lets);
    var /** @type {?} */ fn = new (Function.bind.apply(Function, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"])([void 0], fnArgNames.concat(fnBody))))();
    assert(isPresent(fn), 'Cannot evaluate expression. FN is not defined');
    var /** @type {?} */ fnBound = fn.bind(thisContext);
    return fnBound.apply(void 0, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"])(fnArgValues));
}
/**
 * @param {?} obj
 * @return {?}
 */
function isPrimitive(obj) {
    return !isJsObject(obj);
}
/**
 * @param {?} value
 * @param {?} type
 * @return {?}
 */
function hasConstructor(value, type) {
    return value.constructor === type;
}
/**
 * @param {?} s
 * @return {?}
 */
function escape(s) {
    return encodeURI(s);
}
/**
 * @param {?} s
 * @return {?}
 */
function escapeRegExp(s) {
    return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
}
/**
 * @param {?} str
 * @return {?}
 */
function hashCode(str) {
    var /** @type {?} */ hash = 0;
    var /** @type {?} */ char;
    if (str.length === 0) {
        return hash;
    }
    for (var /** @type {?} */ i = 0; i < str.length; i++) {
        char = str.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash;
    }
    return hash;
}
/**
 * @param {?} obj
 * @return {?}
 */
function objectValues(obj) {
    return Object.keys(obj).map(function (key) { return obj[key]; });
}
/**
 *
 * Converts object to a name;
 *
 * @param {?} target
 * @return {?}
 */
function objectToName(target) {
    if (isBlank(target) || (!isStringMap(target) && !isType(target))) {
        throw new Error(' Cannot convert. Uknown object');
    }
    return isType(target) ? target.prototype.constructor.name : target.constructor.name;
}
/**
 *
 * Basic function to generate UUID taken from W3C from one of the examples
 *
 * @return {?}
 */
function uuid() {
    var /** @type {?} */ dt = new Date().getTime();
    var /** @type {?} */ proto = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var /** @type {?} */ r = (dt + Math.random() * 16) % 16 | 0;
        dt = Math.floor(dt / 16);
        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
    });
    return proto;
}
/**
 * Check object equality derived from angular.equals 1.5 implementation
 *
 * @param {?} o1
 * @param {?} o2
 * @return {?}
 */
function equals(o1, o2) {
    if (o1 === o2) {
        return true;
    }
    if (o1 === null || o2 === null) {
        return false;
    }
    // eslint-disable-next-line no-self-compare
    if (o1 !== o1 && o2 !== o2) {
        return true; // NaN === NaN
    }
    var /** @type {?} */ t1 = typeof o1, /** @type {?} */ t2 = typeof o2, /** @type {?} */ length, /** @type {?} */ key, /** @type {?} */ keySet;
    if (t1 === t2 && t1 === 'object') {
        if (isArray(o1)) {
            if (!isArray(o2)) {
                return false;
            }
            if ((length = o1.length) === o2.length) {
                for (key = 0; key < length; key++) {
                    if (!equals(o1[key], o2[key])) {
                        return false;
                    }
                }
                return true;
            }
        }
        else if (isDate(o1)) {
            if (!isDate(o2)) {
                return false;
            }
            return equals(o1.getTime(), o2.getTime());
        }
        else if (isRegExp(o1)) {
            if (!isRegExp(o2)) {
                return false;
            }
            return o1.toString() === o2.toString();
        }
        else {
            if (isWindow(o1) || isWindow(o2) ||
                isArray(o2) || isDate(o2) || isRegExp(o2)) {
                return false;
            }
            keySet = new Map();
            // using Object.keys as iterating thru object stop working in NG6, TS2.7
            var /** @type {?} */ keys = Object.keys(o2);
            for (key in keys) {
                if (keys[key].charAt(0) === '$' || isFunction(o1[keys[key]])) {
                    continue;
                }
                if (!equals(o1[keys[key]], o2[keys[key]])) {
                    return false;
                }
                keySet.set(keys[key], true);
            }
            keys = Object.keys(o2);
            try {
                for (var keys_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                    key = keys_1_1.value;
                    if (!(keySet.has(key)) && key.charAt(0) !== '$'
                        && isPresent(o2[key]) && !isFunction(o2[key])) {
                        return false;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return true;
        }
    }
    return false;
    var e_1, _a;
}
/**
 * transform a string into decamel. form. Mostly used when reading class names or field names
 * such firstName and we want to create a label First Name
 *
 *
 * @param {?} string
 * @param {?=} separator
 * @param {?=} initialCaps
 * @return {?}
 */
function decamelize(string, separator, initialCaps) {
    if (separator === void 0) { separator = ' '; }
    if (initialCaps === void 0) { initialCaps = true; }
    if (isBlank(string)) {
        return '';
    }
    var /** @type {?} */ lastUCIndex = -1;
    var /** @type {?} */ allCaps = true;
    var /** @type {?} */ splitOnUC = !StringWrapper.contains(string, '_');
    var /** @type {?} */ buf = '';
    var /** @type {?} */ inWord = 0;
    for (var /** @type {?} */ i = string.length; inWord < i; ++inWord) {
        var /** @type {?} */ c = string[inWord];
        if (c.toUpperCase() === c) {
            if ((inWord - 1) !== lastUCIndex && splitOnUC) {
                buf += separator;
            }
            lastUCIndex = inWord;
            if (!initialCaps) {
                c = c.toLowerCase();
            }
        }
        else if (c.toLowerCase() === c) {
            if (inWord === 0 && initialCaps) {
                c = c.toUpperCase();
            }
            allCaps = false;
        }
        else if (c !== '_') {
            c = separator;
        }
        buf += c;
    }
    if (allCaps) {
        for (var /** @type {?} */ i = 0, /** @type {?} */ c = buf.length; i < c; i++) {
            var /** @type {?} */ ch = buf[i];
            if (ch.toLowerCase() !== ch.toUpperCase()) {
                if (inWord && ch === ch.toUpperCase()) {
                    buf = buf.substr(0, i) + ch.toLowerCase() + buf.substr(i + 1);
                }
            }
        }
    }
    return buf;
}
/**
 * @param {?} input
 * @return {?}
 */
function nonPrivatePrefix(input) {
    return input[0] === '_' ? StringWrapper.stripLeft(input, '_') : input;
}
/**
 *
 * This considers currently only 1 form which when we have getter we have this form for
 * declaration _<name> and get <name>(). I do not check any other forms now.
 *
 *
 * @param {?} instance
 * @param {?} field
 * @return {?}
 */
function hasGetter(instance, field) {
    if (isBlank(field)) {
        return false;
    }
    return (field[0] === '_' && isPresent(nonPrivatePrefix(field)));
}
/**
 * The Extensible interface can be implemented when a given class
 * wants to provide dynamically added fields.  Once this is implemented
 * to return a Map, the FieldValue system will be able to look in
 * the Map to see if the desired field exists.
 *
 *
 * @abstract
 */
var  /**
 * The Extensible interface can be implemented when a given class
 * wants to provide dynamically added fields.  Once this is implemented
 * to return a Map, the FieldValue system will be able to look in
 * the Map to see if the desired field exists.
 *
 *
 * @abstract
 */
Extensible = /** @class */ (function () {
    function Extensible() {
    }
    /**
     *  Returns the Map in which the dynamically added fields reside.
     *
     */
    /**
     *  Returns the Map in which the dynamically added fields reside.
     *
     * @return {?}
     */
    Extensible.prototype.extendedFields = /**
     *  Returns the Map in which the dynamically added fields reside.
     *
     * @return {?}
     */
    function () {
        return unimplemented();
    };
    return Extensible;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ _clearValues = (function () {
    if ((/** @type {?} */ ((new Map()).keys())).next) {
        return function _clearValuesInner(m) {
            var /** @type {?} */ keyIterator = m.keys();
            var /** @type {?} */ k /** TODO #???? */;
            while (!((k = (/** @type {?} */ (keyIterator)).next()).done)) {
                m.set(k.value, null);
            }
        };
    }
    else {
        return function _clearValuesWithForeEach(m) {
            m.forEach(function (v, k) {
                m.set(k, null);
            });
        };
    }
})();
var MapWrapper = /** @class */ (function () {
    function MapWrapper() {
    }
    /**
     * @template K, V
     * @return {?}
     */
    MapWrapper.createEmpty = /**
     * @template K, V
     * @return {?}
     */
    function () {
        return new Map();
    };
    /**
     * @template K, V
     * @param {?} m
     * @return {?}
     */
    MapWrapper.clone = /**
     * @template K, V
     * @param {?} m
     * @return {?}
     */
    function (m) {
        try {
            if (new Map(/** @type {?} */ (new Map()))) {
                return new Map(/** @type {?} */ (m));
            }
        }
        catch (/** @type {?} */ e) {
        }
        var /** @type {?} */ map$$1 = new Map();
        m.forEach(function (v, k) {
            map$$1.set(k, v);
        });
        return map$$1;
    };
    /**
     * @template T
     * @param {?} stringMap
     * @return {?}
     */
    MapWrapper.createFromStringMap = /**
     * @template T
     * @param {?} stringMap
     * @return {?}
     */
    function (stringMap) {
        var /** @type {?} */ result = new Map();
        for (var /** @type {?} */ key in stringMap) {
            result.set(key, stringMap[key]);
        }
        return result;
    };
    /**
     * @template T
     * @param {?} stringMap
     * @return {?}
     */
    MapWrapper.createFromAnyMap = /**
     * @template T
     * @param {?} stringMap
     * @return {?}
     */
    function (stringMap) {
        var /** @type {?} */ result = new Map();
        for (var /** @type {?} */ key in stringMap) {
            result.set(key, stringMap[key]);
        }
        return result;
    };
    /**
     * @template T
     * @param {?} stringMap
     * @param {?} resolve
     * @return {?}
     */
    MapWrapper.createFromStringMapWithResolve = /**
     * @template T
     * @param {?} stringMap
     * @param {?} resolve
     * @return {?}
     */
    function (stringMap, resolve) {
        var /** @type {?} */ result = new Map();
        for (var /** @type {?} */ key in stringMap) {
            var /** @type {?} */ updatedValue = resolve(key, stringMap[key]);
            result.set(key, updatedValue);
        }
        return result;
    };
    /**
     * @template T
     * @param {?} m
     * @return {?}
     */
    MapWrapper.toStringMap = /**
     * @template T
     * @param {?} m
     * @return {?}
     */
    function (m) {
        var /** @type {?} */ r = {};
        m.forEach(function (v, k) { return r[k] = v; });
        return r;
    };
    /**
     * @template T
     * @param {?} m
     * @return {?}
     */
    MapWrapper.toAnyMap = /**
     * @template T
     * @param {?} m
     * @return {?}
     */
    function (m) {
        var /** @type {?} */ r = {};
        if (isPresent(m)) {
            m.forEach(function (v, k) { return (/** @type {?} */ (r))[k] = v; });
        }
        return r;
    };
    /**
     * @param {?} m
     * @param {?=} inner
     * @return {?}
     */
    MapWrapper.toString = /**
     * @param {?} m
     * @param {?=} inner
     * @return {?}
     */
    function (m, inner) {
        if (inner === void 0) { inner = false; }
        var /** @type {?} */ sj = new StringJoiner(['']);
        if (!inner) {
            sj.add('{');
        }
        m.forEach(function (v, k) {
            if (v instanceof Map) {
                sj.add(MapWrapper.toString(v, true));
            }
            else {
                sj.add(k);
                sj.add('=');
                sj.add(v);
            }
            sj.add(', ');
        });
        if (!inner) {
            sj.add('} ');
        }
        return sj.toString();
    };
    /**
     * @param {?} m
     * @return {?}
     */
    MapWrapper.clearValues = /**
     * @param {?} m
     * @return {?}
     */
    function (m) {
        _clearValues(m);
    };
    /**
     * @template T
     * @param {?} m
     * @return {?}
     */
    MapWrapper.iterable = /**
     * @template T
     * @param {?} m
     * @return {?}
     */
    function (m) {
        return m;
    };
    /**
     * @param {?} dest
     * @param {?} source
     * @param {?} overwriteMismatched
     * @return {?}
     */
    MapWrapper.mergeMapIntoMapWithObject = /**
     * @param {?} dest
     * @param {?} source
     * @param {?} overwriteMismatched
     * @return {?}
     */
    function (dest, source, overwriteMismatched) {
        var /** @type {?} */ keys = Array.from(source.keys());
        try {
            for (var keys_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                var key = keys_1_1.value;
                var /** @type {?} */ sourceValue = source.get(key);
                var /** @type {?} */ destValue = dest.get(key);
                if (isBlank(destValue)) {
                    dest.set(key, ListWrapper.copyValue(sourceValue));
                    continue;
                }
                else if (destValue instanceof Map && sourceValue instanceof Map) {
                    dest.set(key, MapWrapper.mergeMapIntoMapWithObject(MapWrapper.clone(destValue), sourceValue, overwriteMismatched));
                }
                else if (destValue instanceof Map && isArray(sourceValue)) {
                    if (ListWrapper.allElementsAreStrings(sourceValue)) {
                        dest.set(key, MapWrapper.mergeMapIntoMapWithObject(MapWrapper.clone(destValue), MapWrapper.convertListToMap(sourceValue), overwriteMismatched));
                    }
                    else {
                        var /** @type {?} */ sourceVect = ListWrapper.clone(sourceValue);
                        ListWrapper.addElementIfAbsent(sourceVect, destValue);
                        dest.set(key, sourceVect);
                    }
                }
                else if (isArray(destValue) && sourceValue instanceof Map) {
                    if (ListWrapper.allElementsAreStrings(destValue)) {
                        dest.set(key, MapWrapper.mergeMapIntoMapWithObject(MapWrapper.convertListToMap(destValue), sourceValue, overwriteMismatched));
                    }
                    else {
                        // todo: can we really match this values with indexOf
                        ListWrapper.addElementIfAbsent(destValue, MapWrapper.clone(sourceValue));
                    }
                }
                else if (destValue instanceof Map && isString(sourceValue)) {
                    var /** @type {?} */ destValueMap = MapWrapper.clone(destValue);
                    if (isBlank(destValueMap.get(sourceValue))) {
                        destValue.set(sourceValue, MapWrapper.createEmpty());
                    }
                }
                else if (isString(destValue) && sourceValue instanceof Map) {
                    var /** @type {?} */ sourceHash = MapWrapper.clone(sourceValue);
                    if (isBlank(sourceHash.get(destValue))) {
                        sourceHash.set(destValue, MapWrapper.createEmpty());
                    }
                    dest.set(key, sourceHash);
                }
                else if (isArray(destValue) && isArray(sourceValue)) {
                    dest.set(key, sourceValue);
                }
                else if (isArray(destValue) && isString(sourceValue)) {
                    ListWrapper.addElementIfAbsent(destValue, sourceValue);
                }
                else if (isString(destValue) && isArray(sourceValue)) {
                    var /** @type {?} */ sourceVect = ListWrapper.clone(sourceValue);
                    ListWrapper.addElementIfAbsent(sourceVect, destValue);
                    dest.set(key, sourceVect);
                }
                else if (isString(destValue) && isString(sourceValue)) {
                    dest.set(key, sourceValue);
                }
                else if (overwriteMismatched) {
                    dest.set(key, sourceValue);
                }
                else {
                    var /** @type {?} */ destClass = className(destValue);
                    var /** @type {?} */ sourceClass = className(sourceValue);
                    if (destClass === sourceClass) {
                        dest.set(key, sourceValue);
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return dest;
        var e_1, _a;
    };
    /**
     * @param {?} keys
     * @return {?}
     */
    MapWrapper.convertListToMap = /**
     * @param {?} keys
     * @return {?}
     */
    function (keys) {
        var /** @type {?} */ map$$1 = new Map();
        for (var /** @type {?} */ i = 0; i < keys.length; i++) {
            map$$1.set(keys[i], MapWrapper.createEmpty());
        }
        return map$$1;
    };
    /**
     * @template K
     * @param {?} items
     * @param {?} groupByKey
     * @return {?}
     */
    MapWrapper.groupBy = /**
     * @template K
     * @param {?} items
     * @param {?} groupByKey
     * @return {?}
     */
    function (items, groupByKey) {
        var /** @type {?} */ result = items.reduce(function (groupResult, currentValue) {
            var /** @type {?} */ gKey = groupByKey(currentValue);
            (groupResult[gKey] = groupResult[gKey] || []).push(currentValue);
            return groupResult;
        }, {});
        var /** @type {?} */ grouped = new Map();
        Object.keys(result).forEach(function (key) {
            grouped.set(key, result[key]);
        });
        return grouped;
    };
    return MapWrapper;
}());
/**
 * Wraps Javascript Objects
 */
var  /**
 * Wraps Javascript Objects
 */
StringMapWrapper = /** @class */ (function () {
    function StringMapWrapper() {
    }
    /**
     * @return {?}
     */
    StringMapWrapper.create = /**
     * @return {?}
     */
    function () {
        // Note: We are not using Object.create(null) here due to
        // performance!
        // http://jsperf.com/ng2-object-create-null
        return {};
    };
    /**
     * @param {?} map
     * @param {?} key
     * @return {?}
     */
    StringMapWrapper.contains = /**
     * @param {?} map
     * @param {?} key
     * @return {?}
     */
    function (map$$1, key) {
        return map$$1.hasOwnProperty(key);
    };
    /**
     * @template V
     * @param {?} map
     * @param {?} key
     * @return {?}
     */
    StringMapWrapper.get = /**
     * @template V
     * @param {?} map
     * @param {?} key
     * @return {?}
     */
    function (map$$1, key) {
        return map$$1.hasOwnProperty(key) ? map$$1[key] : undefined;
    };
    /**
     * @template V
     * @param {?} map
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    StringMapWrapper.set = /**
     * @template V
     * @param {?} map
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (map$$1, key, value) {
        map$$1[key] = value;
    };
    /**
     * @param {?} map
     * @return {?}
     */
    StringMapWrapper.isEmpty = /**
     * @param {?} map
     * @return {?}
     */
    function (map$$1) {
        for (var /** @type {?} */ prop in map$$1) {
            return false;
        }
        return true;
    };
    /**
     * @param {?} map
     * @param {?} key
     * @return {?}
     */
    StringMapWrapper.delete = /**
     * @param {?} map
     * @param {?} key
     * @return {?}
     */
    function (map$$1, key) {
        delete map$$1[key];
    };
    /**
     * @template K, V
     * @param {?} map
     * @param {?} callback
     * @return {?}
     */
    StringMapWrapper.forEach = /**
     * @template K, V
     * @param {?} map
     * @param {?} callback
     * @return {?}
     */
    function (map$$1, callback) {
        try {
            for (var _a = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(Object.keys(map$$1)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var k = _b.value;
                callback(map$$1[k], k);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        var e_2, _c;
    };
    /**
     * @template V
     * @param {?} m1
     * @param {?} m2
     * @return {?}
     */
    StringMapWrapper.merge = /**
     * @template V
     * @param {?} m1
     * @param {?} m2
     * @return {?}
     */
    function (m1, m2) {
        var /** @type {?} */ m = {};
        try {
            for (var _a = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(Object.keys(m1)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var k = _b.value;
                m[k] = m1[k];
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        try {
            for (var _d = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(Object.keys(m2)), _e = _d.next(); !_e.done; _e = _d.next()) {
                var k = _e.value;
                m[k] = m2[k];
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_f = _d.return)) _f.call(_d);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return m;
        var e_3, _c, e_4, _f;
    };
    /**
     * @template V
     * @param {?} m1
     * @param {?} m2
     * @return {?}
     */
    StringMapWrapper.equals = /**
     * @template V
     * @param {?} m1
     * @param {?} m2
     * @return {?}
     */
    function (m1, m2) {
        var /** @type {?} */ k1 = Object.keys(m1);
        var /** @type {?} */ k2 = Object.keys(m2);
        if (k1.length !== k2.length) {
            return false;
        }
        var /** @type {?} */ key /** TODO #???? */;
        for (var /** @type {?} */ i = 0; i < k1.length; i++) {
            key = k1[i];
            if (m1[key] !== m2[key]) {
                return false;
            }
        }
        return true;
    };
    return StringMapWrapper;
}());
var ListWrapper = /** @class */ (function () {
    function ListWrapper() {
    }
    // JS has no way to express a statically fixed size list, but dart does so we
    // keep both methods.
    /**
     * @param {?} size
     * @return {?}
     */
    ListWrapper.createFixedSize = /**
     * @param {?} size
     * @return {?}
     */
    function (size) {
        return new Array(size);
    };
    /**
     * @param {?} size
     * @return {?}
     */
    ListWrapper.createGrowableSize = /**
     * @param {?} size
     * @return {?}
     */
    function (size) {
        return new Array(size);
    };
    /**
     * @template T
     * @param {?} array
     * @return {?}
     */
    ListWrapper.clone = /**
     * @template T
     * @param {?} array
     * @return {?}
     */
    function (array) {
        return array.slice(0);
    };
    /**
     * @template T
     * @param {?} array
     * @param {?} fn
     * @return {?}
     */
    ListWrapper.forEachWithIndex = /**
     * @template T
     * @param {?} array
     * @param {?} fn
     * @return {?}
     */
    function (array, fn) {
        for (var /** @type {?} */ i = 0; i < array.length; i++) {
            fn(array[i], i);
        }
    };
    /**
     * @template T
     * @param {?} array
     * @return {?}
     */
    ListWrapper.first = /**
     * @template T
     * @param {?} array
     * @return {?}
     */
    function (array) {
        if (!array) {
            return null;
        }
    };
    /**
     * @template T
     * @param {?} array
     * @return {?}
     */
    ListWrapper.last = /**
     * @template T
     * @param {?} array
     * @return {?}
     */
    function (array) {
        if (!array || array.length === 0) {
            return null;
        }
        return array[array.length - 1];
    };
    /**
     * @template T
     * @param {?} array
     * @param {?} value
     * @param {?=} startIndex
     * @return {?}
     */
    ListWrapper.indexOf = /**
     * @template T
     * @param {?} array
     * @param {?} value
     * @param {?=} startIndex
     * @return {?}
     */
    function (array, value, startIndex) {
        if (startIndex === void 0) { startIndex = 0; }
        return array.indexOf(value, startIndex);
    };
    /**
     * @template T
     * @param {?} list
     * @param {?} el
     * @return {?}
     */
    ListWrapper.contains = /**
     * @template T
     * @param {?} list
     * @param {?} el
     * @return {?}
     */
    function (list, el) {
        return list.indexOf(el) !== -1;
    };
    /**
     * @template T
     * @param {?} list
     * @param {?} els
     * @return {?}
     */
    ListWrapper.containsAll = /**
     * @template T
     * @param {?} list
     * @param {?} els
     * @return {?}
     */
    function (list, els) {
        return els.map(function (needle) {
            return list.indexOf(needle);
        }).indexOf(-1) === -1;
    };
    /**
     * @param {?} list
     * @param {?} item
     * @return {?}
     */
    ListWrapper.containsComplex = /**
     * @param {?} list
     * @param {?} item
     * @return {?}
     */
    function (list, item) {
        return list.findIndex(function (el) {
            return equals(el, item);
        }) > -1;
    };
    /**
     * @param {?} list
     * @param {?} item
     * @return {?}
     */
    ListWrapper.findIndexComplex = /**
     * @param {?} list
     * @param {?} item
     * @return {?}
     */
    function (list, item) {
        var /** @type {?} */ index = list.findIndex(function (el) {
            return equals(el, item);
        });
        return index;
    };
    /**
     * @param {?} list
     * @param {?} item
     * @return {?}
     */
    ListWrapper.removeIfExist = /**
     * @param {?} list
     * @param {?} item
     * @return {?}
     */
    function (list, item) {
        var /** @type {?} */ index = list.findIndex(function (el) {
            return equals(el, item);
        });
        if (index !== -1) {
            ListWrapper.removeAt(list, index);
        }
    };
    /**
     * @template T
     * @param {?} array
     * @return {?}
     */
    ListWrapper.reversed = /**
     * @template T
     * @param {?} array
     * @return {?}
     */
    function (array) {
        var /** @type {?} */ a = ListWrapper.clone(array);
        return a.reverse();
    };
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    ListWrapper.concat = /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        return a.concat(b);
    };
    /**
     * @template T
     * @param {?} list
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    ListWrapper.insert = /**
     * @template T
     * @param {?} list
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    function (list, index, value) {
        list.splice(index, 0, value);
    };
    /**
     * @template T
     * @param {?} list
     * @param {?} index
     * @return {?}
     */
    ListWrapper.removeAt = /**
     * @template T
     * @param {?} list
     * @param {?} index
     * @return {?}
     */
    function (list, index) {
        var /** @type {?} */ res = list[index];
        list.splice(index, 1);
        return res;
    };
    /**
     * @template T
     * @param {?} list
     * @param {?} items
     * @return {?}
     */
    ListWrapper.removeAll = /**
     * @template T
     * @param {?} list
     * @param {?} items
     * @return {?}
     */
    function (list, items) {
        for (var /** @type {?} */ i = 0; i < items.length; ++i) {
            var /** @type {?} */ index = list.indexOf(items[i]);
            list.splice(index, 1);
        }
    };
    /**
     * @template T
     * @param {?} list
     * @param {?} el
     * @return {?}
     */
    ListWrapper.remove = /**
     * @template T
     * @param {?} list
     * @param {?} el
     * @return {?}
     */
    function (list, el) {
        var /** @type {?} */ index = list.indexOf(el);
        if (index > -1) {
            list.splice(index, 1);
            return true;
        }
        return false;
    };
    /**
     * @template T
     * @param {?} array
     * @return {?}
     */
    ListWrapper.removeLast = /**
     * @template T
     * @param {?} array
     * @return {?}
     */
    function (array) {
        if (!array || array.length === 0) {
            return null;
        }
        array.splice(array.length - 1);
    };
    /**
     * @param {?} list
     * @return {?}
     */
    ListWrapper.clear = /**
     * @param {?} list
     * @return {?}
     */
    function (list) {
        list.length = 0;
    };
    /**
     * @param {?} list
     * @return {?}
     */
    ListWrapper.isEmpty = /**
     * @param {?} list
     * @return {?}
     */
    function (list) {
        return list.length === 0;
    };
    /**
     * @param {?} list
     * @param {?} value
     * @param {?=} start
     * @param {?=} end
     * @return {?}
     */
    ListWrapper.fill = /**
     * @param {?} list
     * @param {?} value
     * @param {?=} start
     * @param {?=} end
     * @return {?}
     */
    function (list, value, start, end) {
        if (start === void 0) { start = 0; }
        if (end === void 0) { end = null; }
        list.fill(value, start, end === null ? list.length : end);
    };
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    ListWrapper.equals = /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        if (a.length !== b.length) {
            return false;
        }
        for (var /** @type {?} */ i = 0; i < a.length; ++i) {
            if (a[i] !== b[i]) {
                return false;
            }
        }
        return true;
    };
    /**
     * @template T
     * @param {?} l
     * @param {?=} from
     * @param {?=} to
     * @return {?}
     */
    ListWrapper.slice = /**
     * @template T
     * @param {?} l
     * @param {?=} from
     * @param {?=} to
     * @return {?}
     */
    function (l, from, to) {
        if (from === void 0) { from = 0; }
        if (to === void 0) { to = null; }
        return l.slice(from, to === null ? undefined : to);
    };
    /**
     * @template T
     * @param {?} l
     * @param {?} from
     * @param {?} length
     * @return {?}
     */
    ListWrapper.splice = /**
     * @template T
     * @param {?} l
     * @param {?} from
     * @param {?} length
     * @return {?}
     */
    function (l, from, length) {
        return l.splice(from, length);
    };
    /**
     * @template T
     * @param {?} l
     * @param {?=} compareFn
     * @return {?}
     */
    ListWrapper.sort = /**
     * @template T
     * @param {?} l
     * @param {?=} compareFn
     * @return {?}
     */
    function (l, compareFn) {
        if (isPresent(compareFn)) {
            l.sort(compareFn);
        }
        else {
            l.sort();
        }
    };
    /**
     * @param {?} toSort
     * @param {?} pattern
     * @return {?}
     */
    ListWrapper.sortByExample = /**
     * @param {?} toSort
     * @param {?} pattern
     * @return {?}
     */
    function (toSort, pattern) {
        toSort.sort(function (a, b) {
            var /** @type {?} */ indexA = pattern.indexOf(a) === -1 ? 10 : pattern.indexOf(a);
            var /** @type {?} */ indexB = pattern.indexOf(b) === -1 ? 10 : pattern.indexOf(b);
            return indexA - indexB;
        });
    };
    /**
     * @template T
     * @param {?} l
     * @return {?}
     */
    ListWrapper.toString = /**
     * @template T
     * @param {?} l
     * @return {?}
     */
    function (l) {
        var /** @type {?} */ out = '';
        try {
            for (var l_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(l), l_1_1 = l_1.next(); !l_1_1.done; l_1_1 = l_1.next()) {
                var item = l_1_1.value;
                out += item.toString() + ',  ';
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (l_1_1 && !l_1_1.done && (_a = l_1.return)) _a.call(l_1);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return out;
        var e_5, _a;
    };
    /**
     * @template T
     * @param {?} l
     * @return {?}
     */
    ListWrapper.toJSON = /**
     * @template T
     * @param {?} l
     * @return {?}
     */
    function (l) {
        return JSON.stringify(l);
    };
    /**
     * @template T
     * @param {?} list
     * @param {?} predicate
     * @return {?}
     */
    ListWrapper.maximum = /**
     * @template T
     * @param {?} list
     * @param {?} predicate
     * @return {?}
     */
    function (list, predicate) {
        if (list.length === 0) {
            return null;
        }
        var /** @type {?} */ solution = null;
        var /** @type {?} */ maxValue = -Infinity;
        for (var /** @type {?} */ index = 0; index < list.length; index++) {
            var /** @type {?} */ candidate = list[index];
            if (isBlank(candidate)) {
                continue;
            }
            var /** @type {?} */ candidateValue = predicate(candidate);
            if (candidateValue > maxValue) {
                solution = candidate;
                maxValue = candidateValue;
            }
        }
        return solution;
    };
    /**
     * @template T
     * @param {?} list
     * @return {?}
     */
    ListWrapper.flatten = /**
     * @template T
     * @param {?} list
     * @return {?}
     */
    function (list) {
        var /** @type {?} */ target = [];
        _flattenArray(list, target);
        return target;
    };
    /**
     * @template T
     * @param {?} list
     * @return {?}
     */
    ListWrapper.allElementsAreStrings = /**
     * @template T
     * @param {?} list
     * @return {?}
     */
    function (list) {
        var /** @type {?} */ target = ListWrapper.flatten(list);
        try {
            for (var target_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(target), target_1_1 = target_1.next(); !target_1_1.done; target_1_1 = target_1.next()) {
                var element = target_1_1.value;
                if (!isString(element)) {
                    return false;
                }
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (target_1_1 && !target_1_1.done && (_a = target_1.return)) _a.call(target_1);
            }
            finally { if (e_6) throw e_6.error; }
        }
        return true;
        var e_6, _a;
    };
    /**
     * @template T
     * @param {?} list
     * @param {?} source
     * @return {?}
     */
    ListWrapper.addAll = /**
     * @template T
     * @param {?} list
     * @param {?} source
     * @return {?}
     */
    function (list, source) {
        for (var /** @type {?} */ i = 0; i < source.length; i++) {
            list.push(source[i]);
        }
    };
    // todo: check if this handles objects with contains
    /**
     * @template T
     * @param {?} list
     * @param {?} element
     * @return {?}
     */
    ListWrapper.addElementIfAbsent = /**
     * @template T
     * @param {?} list
     * @param {?} element
     * @return {?}
     */
    function (list, element) {
        var /** @type {?} */ contains = typescript_collections__WEBPACK_IMPORTED_MODULE_2__["arrays"].contains(list, element, function (item1, item2) {
            if (item1['equalsTo']) {
                return item1['equalsTo'](item2);
            }
            return item1 === item2;
        });
        if (!contains) {
            list.push(element);
        }
    };
    /**
     * @template T
     * @param {?} list
     * @param {?} elements
     * @return {?}
     */
    ListWrapper.addElementsIfAbsent = /**
     * @template T
     * @param {?} list
     * @param {?} elements
     * @return {?}
     */
    function (list, elements) {
        if (isBlank(elements)) {
            return;
        }
        try {
            for (var elements_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(elements), elements_1_1 = elements_1.next(); !elements_1_1.done; elements_1_1 = elements_1.next()) {
                var elem = elements_1_1.value;
                var /** @type {?} */ contains = typescript_collections__WEBPACK_IMPORTED_MODULE_2__["arrays"].contains(list, elem, function (item1, item2) {
                    if (item1['equalsTo'] && item2['equalsTo']) {
                        return item1['equalsTo'](item2);
                    }
                    return item1 === item2;
                });
                if (!contains) {
                    list.push(elem);
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (elements_1_1 && !elements_1_1.done && (_a = elements_1.return)) _a.call(elements_1);
            }
            finally { if (e_7) throw e_7.error; }
        }
        var e_7, _a;
    };
    /**
     * @template T
     * @param {?} value
     * @return {?}
     */
    ListWrapper.copyValue = /**
     * @template T
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value instanceof Map) {
            return MapWrapper.clone(value);
        }
        else if (isArray(value)) {
            return ListWrapper.clone(value);
        }
        return value;
    };
    return ListWrapper;
}());
/**
 * @param {?} source
 * @param {?} target
 * @return {?}
 */
function _flattenArray(source, target) {
    if (isPresent(source)) {
        for (var /** @type {?} */ i = 0; i < source.length; i++) {
            var /** @type {?} */ item = source[i];
            if (isArray(item)) {
                _flattenArray(item, target);
            }
            else {
                target.push(item);
            }
        }
    }
    return target;
}
/**
 * @param {?} obj
 * @return {?}
 */
function isListLikeIterable$1(obj) {
    if (!isJsObject(obj)) {
        return false;
    }
    return isArray(obj) ||
        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]
            // JS Map are iterables but return entries as [k, v]
            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} comparator
 * @return {?}
 */
function areIterablesEqual(a, b, comparator) {
    var /** @type {?} */ iterator1 = a[getSymbolIterator()]();
    var /** @type {?} */ iterator2 = b[getSymbolIterator()]();
    while (true) {
        var /** @type {?} */ item1 = iterator1.next();
        var /** @type {?} */ item2 = iterator2.next();
        if (item1.done && item2.done) {
            return true;
        }
        if (item1.done || item2.done) {
            return false;
        }
        if (!comparator(item1.value, item2.value)) {
            return false;
        }
    }
}
/**
 * @param {?} obj
 * @param {?} fn
 * @return {?}
 */
function iterateListLike(obj, fn) {
    if (isArray(obj)) {
        for (var /** @type {?} */ i = 0; i < obj.length; i++) {
            fn(obj[i]);
        }
    }
    else {
        var /** @type {?} */ iterator = obj[getSymbolIterator()]();
        var /** @type {?} */ item = void 0 /** TODO #???? */;
        while (!((item = iterator.next()).done)) {
            fn(item.value);
        }
    }
}
/**
 * @template T
 * @param {?} arr
 * @param {?} condition
 * @return {?}
 */
function findLast(arr, condition) {
    for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {
        if (condition(arr[i])) {
            return arr[i];
        }
    }
    return null;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Since on enterprise level we need to support all available locales as user might change
 * to different lang anytime we need to import all expected locales that we want to support.
 *
 * Note:  Remember when you want to support more locales you need to import them and register
 * them using registerLocaleData
 */
var /** @type {?} */ AppConfigToken = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('App.Config');
var /** @type {?} */ SuportedLanguages = ['en', 'fr'];
/**
 * Simple Configuration implementation  which let us configure application during a bootstrap
 * phase. You can pass values in 3 different ways
 *
 * 1) Using import - at the time you import your module
 * 2) injected as service and you can set values
 * 3) From Script tag or globally defined VAR during a deployment
 *
 *
 * There is also from URL option that is for now temporary disabled.
 *
 */
var AppConfig = /** @class */ (function () {
    function AppConfig(injector, environment) {
        this.injector = injector;
        this.environment = environment;
        // we expect there will be always window available.
        this.values = new Map();
        // this.queryValues = new Map<string,  any>();
    }
    /**
     *
     * Called by factory method to initialize this config class
     *
     */
    /**
     *
     * Called by factory method to initialize this config class
     *
     * @param {?} config
     * @return {?}
     */
    AppConfig.prototype.init = /**
     *
     * Called by factory method to initialize this config class
     *
     * @param {?} config
     * @return {?}
     */
    function (config) {
        var _this = this;
        this.initDefaults();
        if (isPresent(config)) {
            var /** @type {?} */ values = MapWrapper.createFromStringMap(config);
            values.forEach(function (v, k) { return _this.set(k, v); });
        }
        this.environment.setValue(AppConfig.AssetFolder, this.get(AppConfig.AssetFolder));
        var /** @type {?} */ location = window.location.pathname + window.location.search;
        if (this.environment.inTest) {
            location = this.get(AppConfig.InTestUrl);
        }
        // if (isPresent(location)) {
        //     this.parseQueryParms(location);
        // }
    };
    /**
     * This will read globally inserted scripts to initialize application from the server side.
     * The script can directly declare the variables :
     *
     * ```js
     *   <script>
     *      var AppConfigGlobal = {
     *               'app.pro1': 'value1',
     *               'app.pro2': 'value2',
     *               'lang': 'ch'
     *      };
     *  </script>
     * ```
     *
     *   or it can be included on the index.html page during build time.
     *
     *   We expect that will find the `AppConfigGlobal`
     *
     *
     */
    /**
     * This will read globally inserted scripts to initialize application from the server side.
     * The script can directly declare the variables :
     *
     * ```js
     *   <script>
     *      var AppConfigGlobal = {
     *               'app.pro1': 'value1',
     *               'app.pro2': 'value2',
     *               'lang': 'ch'
     *      };
     *  </script>
     * ```
     *
     *   or it can be included on the index.html page during build time.
     *
     *   We expect that will find the `AppConfigGlobal`
     *
     *
     * @return {?}
     */
    AppConfig.prototype.parseGlobalParams = /**
     * This will read globally inserted scripts to initialize application from the server side.
     * The script can directly declare the variables :
     *
     * ```js
     *   <script>
     *      var AppConfigGlobal = {
     *               'app.pro1': 'value1',
     *               'app.pro2': 'value2',
     *               'lang': 'ch'
     *      };
     *  </script>
     * ```
     *
     *   or it can be included on the index.html page during build time.
     *
     *   We expect that will find the `AppConfigGlobal`
     *
     *
     * @return {?}
     */
    function () {
        var /** @type {?} */ globalConfig = readGlobalParam(AppConfig.AppConfigGlobalVar);
        if (isPresent(globalConfig)) {
            for (var /** @type {?} */ key in globalConfig) {
                this.values.set(key.toLowerCase(), globalConfig[key]);
            }
        }
    };
    /**
     * Sets values to configuration. to make sure we will not run into case-sensitive problems we
     * are converting all keys into lowercase
     *
     */
    /**
     * Sets values to configuration. to make sure we will not run into case-sensitive problems we
     * are converting all keys into lowercase
     *
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    AppConfig.prototype.set = /**
     * Sets values to configuration. to make sure we will not run into case-sensitive problems we
     * are converting all keys into lowercase
     *
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        this.values.set(key.toLowerCase(), value);
        if (key.toLowerCase() === AppConfig.InTest) {
            this.environment.inTest = value;
        }
    };
    /**
     * Sets values to configuration
     * todo: dont do all this with this hacky way. just if you need to check case sensitivity, then
     * simply map keys from this.values into lowercase and then check if it has a key
     */
    /**
     * Sets values to configuration
     * todo: dont do all this with this hacky way. just if you need to check case sensitivity, then
     * simply map keys from this.values into lowercase and then check if it has a key
     * @param {?} key
     * @return {?}
     */
    AppConfig.prototype.get = /**
     * Sets values to configuration
     * todo: dont do all this with this hacky way. just if you need to check case sensitivity, then
     * simply map keys from this.values into lowercase and then check if it has a key
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (this.values.has(key.toLowerCase())) {
            return this.values.get(key.toLowerCase());
        }
        return null;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    AppConfig.prototype.getNumber = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var /** @type {?} */ val = this.get(key);
        return NumberWrapper.parseIntAutoRadix(val);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    AppConfig.prototype.getBoolean = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var /** @type {?} */ val = this.get(key);
        return BooleanWrapper.boleanValue(val);
    };
    /**
     * @return {?}
     */
    AppConfig.prototype.initDefaults = /**
     * @return {?}
     */
    function () {
        this.set(AppConfig.IsDevMode, Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["isDevMode"])());
        this.set(AppConfig.UserAgent, window.navigator.userAgent);
        this.set(AppConfig.Direction, document.documentElement.dir);
        this.set(AppConfig.NavPlatform, window.navigator.platform);
        this.set(AppConfig.ContentType, 'application/json; charset=utf-8');
        this.set(AppConfig.ConnectionRetryInterval, 500);
        this.set(AppConfig.ConnectionUseMockServer, false);
        this.set(AppConfig.ConnectionMockServerPath, '/mock-routing');
        this.set(AppConfig.i18nEnabled, true);
        this.set(AppConfig.InTest, false);
        this.set(AppConfig.DomainUniqueName, 'uniqueName');
        this.set(AppConfig.DomainQuery, 'q');
        if (this.environment.inTest) {
            this.set(AppConfig.ConnectionAbortTimeout, 500);
        }
        else {
            this.set(AppConfig.ConnectionAbortTimeout, 8000);
        }
        this.set(AppConfig.AssetFolder, 'assets');
        if (!this.values.has(AppConfig.Lang)) {
            this.set(AppConfig.Lang, window.navigator.language);
        }
        if (!this.values.has(AppConfig.SupportedLangs)) {
            this.set(AppConfig.SupportedLangs, SuportedLanguages);
        }
    };
    /**
     * @param {?} entity
     * @param {?=} isNested
     * @return {?}
     */
    AppConfig.prototype.getRestApiContextUrl = /**
     * @param {?} entity
     * @param {?=} isNested
     * @return {?}
     */
    function (entity, isNested) {
        if (isNested === void 0) { isNested = false; }
        var /** @type {?} */ nestedFlag = isNested ? '$' : '';
        var /** @type {?} */ withEntity = AppConfig.RestApiContextUrl + "." + nestedFlag + entity;
        var /** @type {?} */ url = this.get(withEntity) || this.get(AppConfig.RestApiContextUrl);
        if (isPresent(url)) {
            if (/\/$/g.test(url)) {
                url = url.substring(0, url.length - 1);
            }
            return url;
        }
        throw new Error('Rest APIUri is not configured');
    };
    /**
     * @return {?}
     */
    AppConfig.prototype.getRestApiContext = /**
     * @return {?}
     */
    function () {
        return this.get(AppConfig.RestApiContextUrl) || '';
    };
    /**
     * @return {?}
     */
    AppConfig.prototype.getRestApiHost = /**
     * @return {?}
     */
    function () {
        return this.get(AppConfig.RestApiHostUrl) || '';
    };
    /**
     * @return {?}
     */
    AppConfig.prototype.isProductionMode = /**
     * @return {?}
     */
    function () {
        return !this.getBoolean(AppConfig.IsDevMode);
    };
    /**
     * @return {?}
     */
    AppConfig.prototype.getBaseUrl = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ isMocked = this.getBoolean(AppConfig.ConnectionUseMockServer);
        var /** @type {?} */ cnx = this.getRestApiContext();
        var /** @type {?} */ host = this.getRestApiHost() || '';
        if (isMocked) {
            var /** @type {?} */ prefix = this.get(AppConfig.AssetFolder);
            return "" + prefix + (cnx || '/');
        }
        var /** @type {?} */ url = "" + host + (cnx || '/');
        return url;
    };
    /**
     * Used by factory method insider APP_INITIALIZER to pre-load i18n support
     *
     */
    /**
     * Used by factory method insider APP_INITIALIZER to pre-load i18n support
     *
     * @return {?}
     */
    AppConfig.prototype.initializeI18n = /**
     * Used by factory method insider APP_INITIALIZER to pre-load i18n support
     *
     * @return {?}
     */
    function () {
        var /** @type {?} */ promise = new Promise(function (resolve) {
            resolve(true);
        });
        return promise;
    };
    /**
     * This is not regular env. param we use this to query global var that can be attached to
     * window to read env. settings that can be injected by server
     *
     */
    AppConfig.AppConfigGlobalVar = 'AppConfigGlobal';
    AppConfig.IsDevMode = 'devmode.enabled';
    AppConfig.UserAgent = 'useragent';
    AppConfig.Lang = 'lang';
    AppConfig.SupportedLangs = 'supportedlang';
    AppConfig.Direction = 'dir';
    AppConfig.NavPlatform = 'platform';
    AppConfig.i18nEnabled = 'i18n.enabled';
    AppConfig.AppTitle = 'app.title';
    AppConfig.RestApiContextUrl = 'restapi.context';
    AppConfig.RestApiHostUrl = 'restapi.host';
    AppConfig.ContentType = 'content-type';
    AppConfig.ConnectionRetryInterval = 'connection.retry';
    AppConfig.ConnectionAbortTimeout = 'connection.abort-timeout';
    AppConfig.ConnectionUseMockServer = 'connection.mock-server.enabled';
    AppConfig.ConnectionMockServerPath = 'connection.mock-server.path';
    AppConfig.ConnectionMockServerRoutes = 'connection.mock-server.routes';
    AppConfig.DomainUniqueName = 'domain.uniquename';
    AppConfig.DomainQuery = 'domain.uniquename';
    AppConfig.AssetFolder = 'asset-folder';
    AppConfig.InTest = 'env.test';
    /**
     * Since we unable to change and simulate URL during ng test but still we need to be able to
     * test this URL parsing logic then just for a Test purposes this `env.test.url` property
     * will be used to pass url during a test.
     */
    AppConfig.InTestUrl = 'env.test.url';
    return AppConfig;
}());
/**
 * Factory method used by CoreModule in order to instantiate AppConfig provider
 *
 * @param {?} config
 * @param {?} injector
 * @param {?} env
 * @return {?}
 */
function makeConfig(config, injector, env) {
    // when empty we asume we are in Test. Application should always have some basic initialization
    // todo: Need to get back to this as this is temporary.
    var /** @type {?} */ conf = new AppConfig(injector, env);
    conf.init(config);
    return conf;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Environment is sharable state between components and its injected at the root level and
 * the same instance accessible down the component tree.
 *
 */
var Environment = /** @class */ (function () {
    function Environment() {
        /**
         * Helper properties for debugging and testing purposes
         *
         */
        this.isPseudoLocalized = false;
        this.inTest = false;
        /**
         * An EventEmitter to listen to locale change events
         */
        this.onLocaleChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
        this.isProduction = false;
        this._locale = 'en';
        this.envVariables = new Map();
        this.stacksVariables = new Map();
    }
    /**
     * @param {?} key
     * @return {?}
     */
    Environment.prototype.getValue = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (this.envVariables.has(key)) {
            return this.envVariables.get(key);
        }
        return null;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    Environment.prototype.setValue = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        this.envVariables.set(key, value);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    Environment.prototype.deleteValue = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (this.hasValue(key)) {
            this.envVariables.delete(key);
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    Environment.prototype.hasValue = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.envVariables.has(key);
    };
    /**
     * @return {?}
     */
    Environment.prototype.allVariables = /**
     * @return {?}
     */
    function () {
        return this.envVariables;
    };
    Object.defineProperty(Environment.prototype, "locale", {
        get: /**
         * @return {?}
         */
        function () {
            return this._locale;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._locale = value;
            // Emit locale changed event
            this.onLocaleChange.emit(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    Environment.prototype.peak = /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var /** @type {?} */ stack = this.stacksVariables.get(key) || [];
        return ListWrapper.last(stack);
    };
    /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    Environment.prototype.pop = /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var /** @type {?} */ stack = this.stacksVariables.get(key) || [];
        assert(stack.length > 0, ' Attempt to get value from empty stack');
        return ListWrapper.removeAt(stack, stack.length - 1);
    };
    /**
     * @template T
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    Environment.prototype.push = /**
     * @template T
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        var /** @type {?} */ stack = this.stacksVariables.get(key) || [];
        stack.push(value);
        this.stacksVariables.set(key, stack);
    };
    Environment.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"] },
    ];
    /** @nocollapse */
    Environment.ctorParameters = function () { return []; };
    return Environment;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} entity
 * @return {?}
 */
function isEntity(entity) {
    return isPresent(entity) && isPresent((/** @type {?} */ (entity)).identity);
}
/**
 * @param {?} val
 * @return {?}
 */
function isValue(val) {
    return isPresent(val) && isPresent((/** @type {?} */ (val)).clone);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {number} */
var RestSegmentType = {
    Host: 0,
    Context: 1,
    Action: 2,
    Resource: 3,
    Identifier: 4,
    OfParent: 5,
};
RestSegmentType[RestSegmentType.Host] = "Host";
RestSegmentType[RestSegmentType.Context] = "Context";
RestSegmentType[RestSegmentType.Action] = "Action";
RestSegmentType[RestSegmentType.Resource] = "Resource";
RestSegmentType[RestSegmentType.Identifier] = "Identifier";
RestSegmentType[RestSegmentType.OfParent] = "OfParent";
/** @enum {number} */
var RestAction = {
    Load: 0,
    Query: 1,
    Save: 2,
    Do: 3,
};
RestAction[RestAction.Load] = "Load";
RestAction[RestAction.Query] = "Query";
RestAction[RestAction.Save] = "Save";
RestAction[RestAction.Do] = "Do";
/**
 * Set of AST like classes to keep the fluent API grammar in the abstract format to give developers
 * changes to provide their own implementation
 *
 * Todo: Expose Builder as a service
 *
 * @abstract
 */
var  /**
 * Set of AST like classes to keep the fluent API grammar in the abstract format to give developers
 * changes to provide their own implementation
 *
 * Todo: Expose Builder as a service
 *
 * @abstract
 */
UrlSegment = /** @class */ (function () {
    function UrlSegment(type, value, params, rank) {
        if (rank === void 0) { rank = -1; }
        this.type = type;
        this.value = value;
        this.params = params;
        this.rank = rank;
    }
    /**
     * @param {?} prevSegment
     * @return {?}
     */
    UrlSegment.prototype.assertSegment = /**
     * @param {?} prevSegment
     * @return {?}
     */
    function (prevSegment) {
    };
    /**
     * @return {?}
     */
    UrlSegment.prototype.assertMsg = /**
     * @return {?}
     */
    function () {
        return 'Wrong Rest Segment order';
    };
    return UrlSegment;
}());
var HostSegment = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(HostSegment, _super);
    function HostSegment(value, params) {
        var _this = _super.call(this, RestSegmentType.Host, value, params, 5) || this;
        _this.value = value;
        _this.params = params;
        return _this;
    }
    /**
     * @param {?} prevSegment
     * @return {?}
     */
    HostSegment.prototype.assertSegment = /**
     * @param {?} prevSegment
     * @return {?}
     */
    function (prevSegment) {
        assert(prevSegment == null, this.assertMsg());
    };
    /**
     * @return {?}
     */
    HostSegment.prototype.assertMsg = /**
     * @return {?}
     */
    function () {
        return _super.prototype.assertMsg.call(this) + ". . Host segment must be first!";
    };
    return HostSegment;
}(UrlSegment));
var ContextSegment = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ContextSegment, _super);
    function ContextSegment(value, params) {
        var _this = _super.call(this, RestSegmentType.Context, value, params, 10) || this;
        _this.value = value;
        _this.params = params;
        return _this;
    }
    /**
     * @param {?} prevSegment
     * @return {?}
     */
    ContextSegment.prototype.assertSegment = /**
     * @param {?} prevSegment
     * @return {?}
     */
    function (prevSegment) {
        assert(prevSegment === RestSegmentType.Host, this.assertMsg());
    };
    /**
     * @return {?}
     */
    ContextSegment.prototype.assertMsg = /**
     * @return {?}
     */
    function () {
        return _super.prototype.assertMsg.call(this) + ". . Context segment must follow Host!";
    };
    return ContextSegment;
}(UrlSegment));
var ActionSegment = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ActionSegment, _super);
    function ActionSegment(action, data, params) {
        var _this = _super.call(this, RestSegmentType.Action, action, params, 0) || this;
        _this.action = action;
        _this.data = data;
        _this.params = params;
        // save it to local property for easier comparision
        // save it to local property for easier comparision
        _this.actionType = action;
        return _this;
    }
    /**
     * @param {?} prevSegment
     * @return {?}
     */
    ActionSegment.prototype.assertSegment = /**
     * @param {?} prevSegment
     * @return {?}
     */
    function (prevSegment) {
        assert(prevSegment === RestSegmentType.Context, this.assertMsg());
    };
    /**
     * @return {?}
     */
    ActionSegment.prototype.assertMsg = /**
     * @return {?}
     */
    function () {
        return _super.prototype.assertMsg.call(this) + ". . Action must follow Context segment!";
    };
    return ActionSegment;
}(UrlSegment));
var ResourceSegment = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ResourceSegment, _super);
    function ResourceSegment(value, params) {
        var _this = _super.call(this, RestSegmentType.Resource, value, params, 15) || this;
        _this.value = value;
        _this.params = params;
        _this.resourceName = objectToName(_this.value).toLowerCase() + "s";
        return _this;
    }
    /**
     * @param {?} prevSegment
     * @return {?}
     */
    ResourceSegment.prototype.assertSegment = /**
     * @param {?} prevSegment
     * @return {?}
     */
    function (prevSegment) {
        assert((prevSegment === RestSegmentType.Action || prevSegment === RestSegmentType.OfParent), this.assertMsg());
    };
    /**
     * @return {?}
     */
    ResourceSegment.prototype.assertMsg = /**
     * @return {?}
     */
    function () {
        return _super.prototype.assertMsg.call(this) + ". . Resource must follow either Action or Of!";
    };
    return ResourceSegment;
}(UrlSegment));
var IdentifierSegment = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(IdentifierSegment, _super);
    function IdentifierSegment(value, params) {
        var _this = _super.call(this, RestSegmentType.Identifier, value, params, 20) || this;
        _this.value = value;
        _this.params = params;
        return _this;
    }
    /**
     * @param {?} prevSegment
     * @return {?}
     */
    IdentifierSegment.prototype.assertSegment = /**
     * @param {?} prevSegment
     * @return {?}
     */
    function (prevSegment) {
        assert(prevSegment === RestSegmentType.Resource, this.assertMsg());
    };
    /**
     * @return {?}
     */
    IdentifierSegment.prototype.assertMsg = /**
     * @return {?}
     */
    function () {
        return _super.prototype.assertMsg.call(this) + ". . Identifier must follow Resource!";
    };
    return IdentifierSegment;
}(UrlSegment));
var OfParentSegment = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(OfParentSegment, _super);
    function OfParentSegment() {
        var _this = _super.call(this, RestSegmentType.OfParent) || this;
        _this.rank = 2;
        return _this;
    }
    /**
     * @param {?} prevSegment
     * @return {?}
     */
    OfParentSegment.prototype.assertSegment = /**
     * @param {?} prevSegment
     * @return {?}
     */
    function (prevSegment) {
        assert(prevSegment === RestSegmentType.Resource ||
            prevSegment === RestSegmentType.Identifier, this.assertMsg());
    };
    /**
     * @return {?}
     */
    OfParentSegment.prototype.assertMsg = /**
     * @return {?}
     */
    function () {
        return _super.prototype.assertMsg.call(this) + ". . Of must follow Resource!";
    };
    return OfParentSegment;
}(UrlSegment));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Default implementation that reads abstract URL structure and assembles correct URL.
 */
var  /**
 * Default implementation that reads abstract URL structure and assembles correct URL.
 */
DefaultRestBuilder = /** @class */ (function () {
    function DefaultRestBuilder(urlGroup) {
        this.urlGroup = urlGroup;
        this.sorted = false;
    }
    /**
     * @param {?} isMocked
     * @return {?}
     */
    DefaultRestBuilder.prototype.assembleUrl = /**
     * @param {?} isMocked
     * @return {?}
     */
    function (isMocked) {
        this.validate();
        var /** @type {?} */ sortedSegments = this.adjustRank(this.urlGroup.segments);
        var /** @type {?} */ url = new StringJoiner();
        for (var /** @type {?} */ i = 1; i < sortedSegments.length; i++) {
            switch (sortedSegments[i].type) {
                case RestSegmentType.Action:
                case RestSegmentType.OfParent:
                    break;
                case RestSegmentType.Resource:
                    var /** @type {?} */ resSegment = /** @type {?} */ (sortedSegments[i]);
                    if (isMocked) {
                        url.add('mocked').add('/');
                    }
                    url.add(resSegment.resourceName);
                    this.addSlash(url, i !== (sortedSegments.length - 1));
                    break;
                default:
                    url.add(sortedSegments[i].value);
                    this.addSlash(url, isPresent(sortedSegments[i].value) &&
                        sortedSegments[i].value.toString().length > 0 &&
                        i !== (sortedSegments.length - 1));
            }
        }
        if ((/** @type {?} */ (sortedSegments[0])).value === RestAction.Do) {
            url.add('/').add('actions').add('/').add((/** @type {?} */ (sortedSegments[0])).data);
        }
        return url.toString();
    };
    /**
     * @param {?} url
     * @param {?} shouldAdd
     * @return {?}
     */
    DefaultRestBuilder.prototype.addSlash = /**
     * @param {?} url
     * @param {?} shouldAdd
     * @return {?}
     */
    function (url, shouldAdd) {
        if (shouldAdd) {
            url.add('/');
        }
    };
    /**
     * @return {?}
     */
    DefaultRestBuilder.prototype.validate = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ action = /** @type {?} */ (this.urlGroup.lookup(RestSegmentType.Action));
        switch (action.actionType) {
            case RestAction.Save:
            case RestAction.Do:
                // make sure we have a Identifier
                var /** @type {?} */ withIdCount = this.urlGroup.count(RestSegmentType.Identifier);
                var /** @type {?} */ of$$1 = this.urlGroup.lookup(RestSegmentType.OfParent);
                assert(withIdCount >= 1, 'Missing withId(<IDENTIFIER>) call!');
                break;
        }
    };
    /**
     *
     * Check to see if we have OF segment where we refer to parent resource. In such case we
     * need move all before OF at the end. Either after parent RESOURCE or IDENTIFIER
     *
     *
     * ```
     *   service
     *      .load()
     *      .resource(LineItem)
     *      .of
     *      .resource(Requisition)
     *      .withId('123');
     *  ```
     *
     *
     *
     * Find the OF segment and go back until we reach Resource and adjust rank of these adn
     * then
     * sort
     *
     *
     *
     *
     *
     *
     *
     * @param {?} segments
     * @return {?}
     */
    DefaultRestBuilder.prototype.adjustRank = /**
     *
     * Check to see if we have OF segment where we refer to parent resource. In such case we
     * need move all before OF at the end. Either after parent RESOURCE or IDENTIFIER
     *
     *
     * ```
     *   service
     *      .load()
     *      .resource(LineItem)
     *      .of
     *      .resource(Requisition)
     *      .withId('123');
     *  ```
     *
     *
     *
     * Find the OF segment and go back until we reach Resource and adjust rank of these adn
     * then
     * sort
     *
     *
     *
     *
     *
     *
     *
     * @param {?} segments
     * @return {?}
     */
    function (segments) {
        var /** @type {?} */ ofIndex = segments
            .findIndex(function (s) { return s.type === RestSegmentType.OfParent; });
        if (ofIndex !== -1) {
            var /** @type {?} */ of$$1 = segments[ofIndex];
            var /** @type {?} */ segment = void 0;
            do {
                segment = segments[--ofIndex];
                segment.rank *= of$$1.rank;
            } while (segment.type !== RestSegmentType.Resource);
        }
        return segments.sort(function (a, b) { return a.rank - b.rank; });
    };
    return DefaultRestBuilder;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *
 * This class just aggregates and provides convient apit to to work with UrlSegments
 *
 */
var  /**
 *
 * This class just aggregates and provides convient apit to to work with UrlSegments
 *
 */
RestUrlGroup = /** @class */ (function () {
    function RestUrlGroup(_segments) {
        this._segments = _segments;
        if (isBlank(this._segments)) {
            this._segments = [];
        }
    }
    /**
     *
     * Every push is validated againts UrlSegment assert methods to make sure the order of the
     * method calls is correct
     *
     */
    /**
     *
     * Every push is validated againts UrlSegment assert methods to make sure the order of the
     * method calls is correct
     *
     * @param {?} segment
     * @return {?}
     */
    RestUrlGroup.prototype.push = /**
     *
     * Every push is validated againts UrlSegment assert methods to make sure the order of the
     * method calls is correct
     *
     * @param {?} segment
     * @return {?}
     */
    function (segment) {
        segment.assertSegment((this._segments.length > 0) ? this.peak().type : null);
        if (isString(segment.value)) {
            segment.value = segment.value.replace(/^\/|\/$/g, '');
        }
        this._segments.push(segment);
    };
    /**
     * Stack like API
     *
     */
    /**
     * Stack like API
     *
     * @return {?}
     */
    RestUrlGroup.prototype.peak = /**
     * Stack like API
     *
     * @return {?}
     */
    function () {
        return ListWrapper.last(this._segments);
    };
    /**
     * @return {?}
     */
    RestUrlGroup.prototype.pop = /**
     * @return {?}
     */
    function () {
        assert(this._segments.length > 0, ' Attempt to get value from empty segments stack');
        return ListWrapper.removeAt(this._segments, this._segments.length - 1);
    };
    /**
     * @param {?} segmentType
     * @param {?} data
     * @return {?}
     */
    RestUrlGroup.prototype.updateSegment = /**
     * @param {?} segmentType
     * @param {?} data
     * @return {?}
     */
    function (segmentType, data) {
        var /** @type {?} */ urlSegment = this.lookup(segmentType);
        urlSegment.value = data;
    };
    /**
     *
     * Based on the enum Segment Type  it will retrieve correct segment from the stack
     *
     */
    /**
     *
     * Based on the enum Segment Type  it will retrieve correct segment from the stack
     *
     * @param {?} segment
     * @param {?=} byResource
     * @return {?}
     */
    RestUrlGroup.prototype.lookup = /**
     *
     * Based on the enum Segment Type  it will retrieve correct segment from the stack
     *
     * @param {?} segment
     * @param {?=} byResource
     * @return {?}
     */
    function (segment, byResource) {
        if (isBlank(this.segments)) {
            return null;
        }
        var /** @type {?} */ ss = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"])(this.segments);
        ss = ss.reverse();
        return ss.find((function (s) {
            var /** @type {?} */ hasMatch = s.type === segment;
            if (segment === RestSegmentType.Resource) {
                if (isPresent(byResource)) {
                    return hasMatch && (/** @type {?} */ (s)).value === byResource;
                }
                else {
                    return hasMatch;
                }
            }
            return hasMatch;
        }));
    };
    /**
     *
     * Counts number of segments of certain type
     *
     */
    /**
     *
     * Counts number of segments of certain type
     *
     * @param {?} segment
     * @return {?}
     */
    RestUrlGroup.prototype.count = /**
     *
     * Counts number of segments of certain type
     *
     * @param {?} segment
     * @return {?}
     */
    function (segment) {
        var /** @type {?} */ segments = this.segments.filter(function (s) { return segment === s.type; });
        return isPresent(segments) ? segments.length : 0;
    };
    Object.defineProperty(RestUrlGroup.prototype, "segments", {
        get: /**
         * @return {?}
         */
        function () {
            return this._segments;
        },
        enumerable: true,
        configurable: true
    });
    return RestUrlGroup;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *
 * To simplify work with current HttpClient the Resource provides fluent API on top of it. You dont
 * assemble URL traditional way rather more fluent and functional way, working with real data types
 * such a Value and Entity.
 *
 * Entity and Value are two main key interfaces that all domain objects should inherit from if they
 * want to leverage this functionality.
 *
 * ###Example
 *
 * 1.  to simply assemble following URL http://api.ariba.com/myService/v1/requisitions/123 and
 *  and fetch Requisition data:
 *
 * ```ts
 *  let r: Resource
 *
 *  r.load()
 *   .resource(Requisition)
 *   .withId('123')
 *   .asEntity<Requisition>((r: Requisition) => receivedR = r);
 *
 * ```
 * You you can simply read it: load resource Requisition with ID 123 and return this as Entity
 *
 * 2. Current fluent API also support partial updates and subcontext resource
 *  to load data from this REST API endpoint
 *      http://api.ariba.com/myService/v1/requisitions/123/suppliers
 * ```ts
 *  let r: Resource
 *
 *  r.load()
 *   .resource(Supplier)
 *   .of
 *   .resource(Requisition)
 *   .withId('123')
 *   .asEntity<Supplier>((r:  Supplier[]) => receivedR = r);
 *
 * ```
 *
 *  You can read above: Load all from resource Supplier of Requisition (or supplier belongs to
 *  Requisition)  with ID 123 and return this as Entity.
 *
 *
 * 3. To save data you follow the same syntax
 *      Save requisition so we are PUTting data to following URL
 *      http://api.ariba.com/myService/v1/requisitions/123
 *
 * ```ts
 *  let r: Resource
 *
 *          r
 *        .save()
 *        .resource(Requisition)
 *        .withId('123')
 *        .withData(pr)
 *        .asEntity<Requisition>((r: Requisition) => receivedR = r);
 *
 *
 * ```
 *
 *  You can read above: Save resource Requisition with ID 123 and with Data .... and return it as
 *  a Entity
 *
 *
 *  4. API can also for you assemble and execute actions sometimes called interaction. Not all is
 *  about CRUD. Our current syntax for actions is
 *
 *                       http://api.ariba.com/myService/v1/requisitions/123/actions/approve
 *
 * ```ts
 *  let r: Resource
 *
 *        r
 *        .do('approve')
 *        .resource(Requisition)
 *        .withId('123')
 *        .asEntity<Requisition>((r: Requisition) => receivedR = r);
 *
 *
 * ```
 *
 * To make it easily extensible they are 3 main pieces
 *  - Resource: This class just put together abstract structure URLSegment
 *  - URLSegments: More like AST style to assemble the URL
 *  - builder: that read this AST to assemble the URL
 *
 *
 * Later on we might want to expose builder as a provider and you can have your own implementation
 *
 *
 *
 *
 */
var Resource = /** @class */ (function () {
    function Resource(http, appConfig) {
        this.http = http;
        this.appConfig = appConfig;
    }
    /**
     * Identifies GET operation
     *
     */
    /**
     * Identifies GET operation
     *
     * @return {?}
     */
    Resource.prototype.load = /**
     * Identifies GET operation
     *
     * @return {?}
     */
    function () {
        this.init();
        this.urlGroup.push(new ActionSegment(RestAction.Load));
        return this;
    };
    /**
     * Identifies PUT or POST operation. Depending on the object. If the object has already
     * populated its identifier, then we use PUT, otherwise POST
     *
     */
    /**
     * Identifies PUT or POST operation. Depending on the object. If the object has already
     * populated its identifier, then we use PUT, otherwise POST
     *
     * @return {?}
     */
    Resource.prototype.save = /**
     * Identifies PUT or POST operation. Depending on the object. If the object has already
     * populated its identifier, then we use PUT, otherwise POST
     *
     * @return {?}
     */
    function () {
        this.init();
        this.urlGroup.push(new ActionSegment(RestAction.Save));
        return this;
    };
    /**
     * Identifies interaction. For this we use POST
     *
     */
    /**
     * Identifies interaction. For this we use POST
     *
     * @param {?} action
     * @return {?}
     */
    Resource.prototype.do = /**
     * Identifies interaction. For this we use POST
     *
     * @param {?} action
     * @return {?}
     */
    function (action) {
        this.init();
        this.urlGroup.push(new ActionSegment(RestAction.Do, action));
        return this;
    };
    /**
     *
     * TODO: Since query API is not yet implemented on the server side => TBD
     *
     * There where should be able to accepts individual query grammar. Similar style like rxjs
     * operators.
     *
     *  e.g.: Resource.prototype.contains = ....
     *        Resource.prototype.eq = ....
     *
     * You should be able to add dynamically let;s call it QuerySpecification
     *
     *      res
     *      .query()
     *      .resource(Requsition)
     *      .where( contains<string>(reqEntity.title(), '*asdf*' )
     *
     *  so it could look like something like:
     *
     *
     *  contains<T>(title: string, value: T): T
     *
     *  But since all these Specification would have a way to translate this key|value to the
     *  query so the where, would just list all the specification to bulid
     *  the query
     *
     *
     */
    /**
     *
     * TODO: Since query API is not yet implemented on the server side => TBD
     *
     * There where should be able to accepts individual query grammar. Similar style like rxjs
     * operators.
     *
     *  e.g.: Resource.prototype.contains = ....
     *        Resource.prototype.eq = ....
     *
     * You should be able to add dynamically let;s call it QuerySpecification
     *
     *      res
     *      .query()
     *      .resource(Requsition)
     *      .where( contains<string>(reqEntity.title(), '*asdf*' )
     *
     *  so it could look like something like:
     *
     *
     *  contains<T>(title: string, value: T): T
     *
     *  But since all these Specification would have a way to translate this key|value to the
     *  query so the where, would just list all the specification to bulid
     *  the query
     *
     *
     * @return {?}
     */
    Resource.prototype.query = /**
     *
     * TODO: Since query API is not yet implemented on the server side => TBD
     *
     * There where should be able to accepts individual query grammar. Similar style like rxjs
     * operators.
     *
     *  e.g.: Resource.prototype.contains = ....
     *        Resource.prototype.eq = ....
     *
     * You should be able to add dynamically let;s call it QuerySpecification
     *
     *      res
     *      .query()
     *      .resource(Requsition)
     *      .where( contains<string>(reqEntity.title(), '*asdf*' )
     *
     *  so it could look like something like:
     *
     *
     *  contains<T>(title: string, value: T): T
     *
     *  But since all these Specification would have a way to translate this key|value to the
     *  query so the where, would just list all the specification to bulid
     *  the query
     *
     *
     * @return {?}
     */
    function () {
        this.init();
        throw new Error('Not implemented');
    };
    /**
     * @return {?}
     */
    Resource.prototype.where = /**
     * @return {?}
     */
    function () {
        this.init();
        throw new Error('Not implemented');
    };
    /**
     *
     * Identifies ResourceSegment with specific type that must be either Entity or Value
     *
     */
    /**
     *
     * Identifies ResourceSegment with specific type that must be either Entity or Value
     *
     * @template T
     * @param {?} type
     * @return {?}
     */
    Resource.prototype.resource = /**
     *
     * Identifies ResourceSegment with specific type that must be either Entity or Value
     *
     * @template T
     * @param {?} type
     * @return {?}
     */
    function (type) {
        this.urlGroup.push(new ResourceSegment(type));
        return this;
    };
    /**
     * Identifier IdentifierSegment
     *
     */
    /**
     * Identifier IdentifierSegment
     *
     * @param {?} identifier
     * @return {?}
     */
    Resource.prototype.withId = /**
     * Identifier IdentifierSegment
     *
     * @param {?} identifier
     * @return {?}
     */
    function (identifier) {
        this.urlGroup.push(new IdentifierSegment(identifier));
        return this;
    };
    /**
     * When we are saving data this method is used to insert a payload to the ActionSegment
     *
     */
    /**
     * When we are saving data this method is used to insert a payload to the ActionSegment
     *
     * @template T
     * @param {?} data
     * @return {?}
     */
    Resource.prototype.withData = /**
     * When we are saving data this method is used to insert a payload to the ActionSegment
     *
     * @template T
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var /** @type {?} */ urlSegment = this.urlGroup.lookup(RestSegmentType.Action);
        var /** @type {?} */ isSave = (/** @type {?} */ (urlSegment)).actionType === RestAction.Save;
        assert(isSave, 'withData can be used with SAVE operation only!');
        (/** @type {?} */ (urlSegment)).data = data;
        return this;
    };
    Object.defineProperty(Resource.prototype, "of", {
        /**
         * OF is just a syntactic suggar for better readability and to easier work with sub resources.
         * using OF we are able to tell that some resource belongs to other resource
         *
         */
        get: /**
         * OF is just a syntactic suggar for better readability and to easier work with sub resources.
         * using OF we are able to tell that some resource belongs to other resource
         *
         * @return {?}
         */
        function () {
            this.urlGroup.push(new OfParentSegment());
            return this;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     * Once tell what you want this is the last call you want to make to return resources as actual
     * Entities or Values.
     *
     * Todo: Maybe rename a method name as we can return both Entity and Value.
     *
     * You have also option to insert HttpOption
     *
     */
    /**
     *
     * Once tell what you want this is the last call you want to make to return resources as actual
     * Entities or Values.
     *
     * Todo: Maybe rename a method name as we can return both Entity and Value.
     *
     * You have also option to insert HttpOption
     *
     * @template T
     * @param {?} subscriber
     * @param {?=} options
     * @return {?}
     */
    Resource.prototype.asEntity = /**
     *
     * Once tell what you want this is the last call you want to make to return resources as actual
     * Entities or Values.
     *
     * Todo: Maybe rename a method name as we can return both Entity and Value.
     *
     * You have also option to insert HttpOption
     *
     * @template T
     * @param {?} subscriber
     * @param {?=} options
     * @return {?}
     */
    function (subscriber, options) {
        var _this = this;
        if (options === void 0) { options = { observe: 'body' }; }
        var /** @type {?} */ segment = /** @type {?} */ (this.urlGroup.lookup(RestSegmentType.Action));
        assert(isPresent(segment), 'Missing Http method. Not sure how to handle this!');
        var /** @type {?} */ observable;
        var /** @type {?} */ actionType = segment.value;
        switch (actionType) {
            case RestAction.Load:
                observable = this.http.get(this.url, options);
                break;
            case RestAction.Do:
                observable = this.http.post(this.url, {}, options);
                break;
            case RestAction.Save:
                // we dont have right now other usecase subcontext resource will be always some
                // array
                if (isEntity(segment.data)) {
                    if (isBlank((/** @type {?} */ (segment.data)).identity())) {
                        observable = this.http.post(this.url, segment.data, options);
                    }
                    else {
                        observable = this.http.put(this.url, segment.data, options);
                    }
                }
                else if (isValue(segment.data)) {
                    // we expect value will be always pushed
                    observable = this.http.put(this.url, segment.data, options);
                }
                break;
        }
        return observable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (res) { return _this.convertToComposite(res, true, false); })).subscribe(subscriber);
    };
    /**
     * @template T
     * @param {?} subscriber
     * @param {?=} error
     * @param {?=} options
     * @return {?}
     */
    Resource.prototype.asHttpResponse = /**
     * @template T
     * @param {?} subscriber
     * @param {?=} error
     * @param {?=} options
     * @return {?}
     */
    function (subscriber, error, options) {
        var _this = this;
        if (options === void 0) { options = { observe: 'response' }; }
        var /** @type {?} */ segment = /** @type {?} */ (this.urlGroup.lookup(RestSegmentType.Action));
        assert(isPresent(segment), 'Missing Http method. Not sure how to handle this!');
        var /** @type {?} */ observable;
        var /** @type {?} */ actionType = segment.value;
        switch (actionType) {
            case RestAction.Load:
                observable = this.http.get(this.url, options);
                break;
            case RestAction.Do:
                observable = this.http.post(this.url, {}, options);
                break;
            case RestAction.Save:
                // we dont have right now other usecase subcontext resource will be always some
                // array
                if (isEntity(segment.data)) {
                    if (isBlank((/** @type {?} */ (segment.data)).identity())) {
                        observable = this.http.post(this.url, segment.data, options);
                    }
                    else {
                        observable = this.http.put(this.url, segment.data, options);
                    }
                }
                else if (isValue(segment.data)) {
                    // we expect value will be always pushed
                    observable = this.http.put(this.url, segment.data, options);
                }
                break;
        }
        var /** @type {?} */ hasProgress = options.reportProgress || false;
        return observable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (res) { return _this.convertToComposite(res, false, hasProgress); }))
            .subscribe(subscriber, error);
    };
    Object.defineProperty(Resource.prototype, "url", {
        /**
         *
         * Return assebled URL AST -> string
         *
         */
        get: /**
         *
         * Return assebled URL AST -> string
         *
         * @return {?}
         */
        function () {
            if (isBlank(this._url)) {
                var /** @type {?} */ isMocked = this.appConfig.getBoolean(AppConfig.ConnectionUseMockServer);
                this._url = this._urlBuilder.assembleUrl(isMocked);
            }
            return this._url;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Resource.prototype, "urlGroup", {
        /**
         * private
         *
         */
        get: /**
         * private
         *
         * @return {?}
         */
        function () {
            return this._urlGroup;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Resource.prototype, "urlBuilder", {
        /**
         * private
         *
         */
        get: /**
         * private
         *
         * @return {?}
         */
        function () {
            return this._urlBuilder;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * private
     *
     * @return {?}
     */
    Resource.prototype.init = /**
     * private
     *
     * @return {?}
     */
    function () {
        this._urlGroup = new RestUrlGroup();
        this._urlBuilder = new DefaultRestBuilder(this._urlGroup);
        this._url = null;
        this.urlGroup.push(new HostSegment(this.appConfig.getRestApiHost()));
        this.urlGroup.push(new ContextSegment(this.appConfig.getRestApiContext()));
    };
    /**
     * Used inside .map to map JSON response or HttpResponse.body to actual type
     *
     * @template T
     * @param {?} res
     * @param {?} isComposite
     * @param {?} hasProgress
     * @return {?}
     */
    Resource.prototype.convertToComposite = /**
     * Used inside .map to map JSON response or HttpResponse.body to actual type
     *
     * @template T
     * @param {?} res
     * @param {?} isComposite
     * @param {?} hasProgress
     * @return {?}
     */
    function (res, isComposite, hasProgress) {
        if (hasProgress) {
            return res;
        }
        // unsorted segments will have have our target resource as first one
        var /** @type {?} */ sgm = /** @type {?} */ (this.urlGroup.lookup(RestSegmentType.Resource));
        if (isComposite) {
            return this.deserialize((/** @type {?} */ (res)).payload, sgm.value);
        }
        else {
            var /** @type {?} */ httpRes = /** @type {?} */ (res);
            var /** @type {?} */ myResp = {
                payload: this.deserialize(httpRes.body.payload, sgm.value)
            };
            return httpRes.clone({ body: myResp });
        }
    };
    /**
     * @template T
     * @param {?} data
     * @return {?}
     */
    Resource.prototype.serialize = /**
     * @template T
     * @param {?} data
     * @return {?}
     */
    function (data) {
        return JSON.stringify(data);
    };
    /**
     *
     * Converts JSON object to actual Type. We don't care about primitive types as we dont have to
     * do anything with them. We do instantiate objects or complex types only.
     *
     *
     */
    /**
     *
     * Converts JSON object to actual Type. We don't care about primitive types as we dont have to
     * do anything with them. We do instantiate objects or complex types only.
     *
     *
     * @param {?} json
     * @param {?} clazz
     * @return {?}
     */
    Resource.prototype.deserialize = /**
     *
     * Converts JSON object to actual Type. We don't care about primitive types as we dont have to
     * do anything with them. We do instantiate objects or complex types only.
     *
     *
     * @param {?} json
     * @param {?} clazz
     * @return {?}
     */
    function (json, clazz) {
        if (isArray(json)) {
            var /** @type {?} */ instances = [];
            for (var /** @type {?} */ item in json) {
                instances.push(this.deserialize(json[item], clazz));
            }
            return instances;
        }
        else {
            var /** @type {?} */ instance = void 0;
            if (clazz === String) {
                instance = json.toString();
            }
            else if (clazz === Number) {
                instance = json;
            }
            else if (clazz === Boolean) {
                instance = json;
            }
            else {
                instance = new clazz();
                var /** @type {?} */ types = instance.getTypes();
                for (var /** @type {?} */ prop in json) {
                    if (!json.hasOwnProperty(prop)) {
                        continue;
                    }
                    if (isPresent(types[prop]) && isPresent(json[prop]) && types[prop] !== Date) {
                        instance[prop] = this.deserialize(json[prop], types[prop]);
                    }
                    else if (isDate(types[prop])) {
                        instance[prop] = new types[prop](json[prop]);
                    }
                    else {
                        instance[prop] = json[prop];
                    }
                    // else if (isString(json[prop]) && isEntity(instance)
                    //     && prop === (<Entity>instance).identity()) {
                    //
                    //     const idString = (<Entity>instance).identity();
                    //     (<any>instance)[idString] = <string>json[prop];
                    //
                    // }
                }
            }
            return instance;
        }
    };
    Resource.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"] },
    ];
    /** @nocollapse */
    Resource.ctorParameters = function () { return [
        { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_5__["HttpClient"] },
        { type: AppConfig }
    ]; };
    return Resource;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NotFoundComponent = /** @class */ (function () {
    function NotFoundComponent() {
    }
    /**
     * @return {?}
     */
    NotFoundComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    NotFoundComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{
                    template: "<div class=\"page-container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"error-template\">\n                <h1> Oops!</h1>\n                <h2> 404 Not Found</h2>\n                <div class=\"error-details\"> Sorry, an error has occured, Requested page not found!\n                </div>\n\n            </div>\n        </div>\n    </div>\n</div>\n",
                    styles: [".error-template{padding:40px 15px;text-align:center}.error-actions{margin-top:15px;margin-bottom:15px}.error-actions .btn{margin-right:10px}"]
                },] },
    ];
    /** @nocollapse */
    NotFoundComponent.ctorParameters = function () { return []; };
    return NotFoundComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Basic wrapper around Angular's ROUTE service to simplify temporary state caching as well
 * navigation. This service listen for Routing events such as NavigationStart as well,
 * NavigationEnds and when the routing Enters, We check if there any state which needs to be cached
 * if yes then we save it into the stateCacheHistory which maps final URL to the actual STATE
 * object, and when we are navigate back to the same URL We check if there is any saved state.
 *
 * This service was originally created as a response that angular always destroyes and recreates
 * components when navigating aways and then back to it. By a of angular 4.2.0+ this might be
 * obsolete.
 *
 */
var RoutingService = /** @class */ (function () {
    function RoutingService(router) {
        var _this = this;
        this.router = router;
        /**
         * Stack keeping active Routes so we can go back/redirect back
         *
         */
        this.routingState = [];
        /*
             * Event object for registering listeners to save a certain state as well as broadcasting back
             * when state needs to be retrieved back to the Page
             *
             */
        this.stateCache = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
        /**
         *
         * This is our cache which maps URL => to = >STATE. Any page can save any state using
         * observable object which will be retrieved back.
         *
         */
        this.stateCacheHistory = new Map();
        this.router.events.subscribe(function (event) { return _this.subscribeToRoutingEvents(event); });
    }
    /**
     *
     * Here is the main routing logic that proceses every routing events.
     *
     */
    /**
     *
     * Here is the main routing logic that proceses every routing events.
     *
     * @param {?} event
     * @return {?}
     */
    RoutingService.prototype.subscribeToRoutingEvents = /**
     *
     * Here is the main routing logic that proceses every routing events.
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event instanceof _angular_router__WEBPACK_IMPORTED_MODULE_6__["NavigationEnd"]) {
            var /** @type {?} */ url = event.url;
            if (this.stateCacheHistory.has(url)) {
                this.stateCache.next(this.stateCacheHistory.get(url));
                this.stateCacheHistory.delete(url);
            }
            this.routingState.push(event);
        }
        if (event instanceof _angular_router__WEBPACK_IMPORTED_MODULE_6__["NavigationStart"]) {
            var /** @type {?} */ itemBeforeRoute = ListWrapper.last(this.routingState);
            if (isPresent(this.currentStateFrom) && isPresent(itemBeforeRoute) && isPresent(this.currentStateFrom) && itemBeforeRoute instanceof _angular_router__WEBPACK_IMPORTED_MODULE_6__["NavigationEnd"] ||
                itemBeforeRoute instanceof _angular_router__WEBPACK_IMPORTED_MODULE_6__["NavigationStart"]) {
                this.stateCacheHistory.set(itemBeforeRoute.url, this.currentStateFrom);
                this.currentStateFrom = null;
            }
            else if (isPresent(this.currentStateTo)) {
                this.stateCacheHistory.set(event.url, this.currentStateTo);
                this.currentStateTo = null;
            }
        }
    };
    /**
     * Convenient GO BACK method. which takes you to previous route along with the URL change.
     *
     *
     */
    /**
     * Convenient GO BACK method. which takes you to previous route along with the URL change.
     *
     *
     * @param {?=} numOfSteps
     * @return {?}
     */
    RoutingService.prototype.goBack = /**
     * Convenient GO BACK method. which takes you to previous route along with the URL change.
     *
     *
     * @param {?=} numOfSteps
     * @return {?}
     */
    function (numOfSteps) {
        if (numOfSteps === void 0) { numOfSteps = 1; }
        // we are starting from -1 as we need to also remove current route
        var /** @type {?} */ steps = -1;
        var /** @type {?} */ navigateUrl = '/404';
        while (steps !== numOfSteps) {
            var /** @type {?} */ popState = this.routingState.pop();
            if (popState instanceof _angular_router__WEBPACK_IMPORTED_MODULE_6__["NavigationEnd"] || popState instanceof _angular_router__WEBPACK_IMPORTED_MODULE_6__["NavigationStart"]) {
                navigateUrl = popState.url;
                steps++;
            }
        }
        this.router.navigateByUrl(navigateUrl);
    };
    /**
     *
     * When navigating to a new Page you can use directly router or if you want to remember some
     * state tne this method can be used as well.
     *
     */
    /**
     *
     * When navigating to a new Page you can use directly router or if you want to remember some
     * state tne this method can be used as well.
     *
     * @template T
     * @param {?} commands
     * @param {?=} state
     * @param {?=} extras
     * @return {?}
     */
    RoutingService.prototype.navigate = /**
     *
     * When navigating to a new Page you can use directly router or if you want to remember some
     * state tne this method can be used as well.
     *
     * @template T
     * @param {?} commands
     * @param {?=} state
     * @param {?=} extras
     * @return {?}
     */
    function (commands, state, extras) {
        this.currentStateFrom = state;
        this.router.navigate(commands, extras);
    };
    /**
     *
     * When navigating to a new Page you can use directly router or if you want to remember some
     * state tne this method can be used as well.
     *
     */
    /**
     *
     * When navigating to a new Page you can use directly router or if you want to remember some
     * state tne this method can be used as well.
     *
     * @template T
     * @param {?} route
     * @param {?=} params
     * @param {?=} state
     * @param {?=} extras
     * @return {?}
     */
    RoutingService.prototype.navigateWithRoute = /**
     *
     * When navigating to a new Page you can use directly router or if you want to remember some
     * state tne this method can be used as well.
     *
     * @template T
     * @param {?} route
     * @param {?=} params
     * @param {?=} state
     * @param {?=} extras
     * @return {?}
     */
    function (route, params, state, extras) {
        this.currentStateTo = state;
        this.router.navigate([route.path, params], extras);
    };
    /**
     *
     * Entry method for broadcasting stateCache and sending saved State back to the page
     *
     *
     */
    /**
     *
     * Entry method for broadcasting stateCache and sending saved State back to the page
     *
     *
     * @template T
     * @param {?} listener
     * @return {?}
     */
    RoutingService.prototype.bindStateCache = /**
     *
     * Entry method for broadcasting stateCache and sending saved State back to the page
     *
     *
     * @template T
     * @param {?} listener
     * @return {?}
     */
    function (listener) {
        this.stateCache.asObservable().subscribe(function (stateItem) { return listener(stateItem); });
    };
    /**
     * Utility method so check extra parameters which are passed using Matrix notation
     *
     *
     */
    /**
     * Utility method so check extra parameters which are passed using Matrix notation
     *
     *
     * @param {?} route
     * @return {?}
     */
    RoutingService.prototype.operation = /**
     * Utility method so check extra parameters which are passed using Matrix notation
     *
     *
     * @param {?} route
     * @return {?}
     */
    function (route) {
        var /** @type {?} */ operation = route.snapshot.params['o'];
        return isBlank(operation) || (operation !== 'view' && operation !== 'create' && operation !== 'edit')
            ? 'view' : operation;
    };
    /**
     * Assembles a path based on the current route.
     *
     */
    /**
     * Assembles a path based on the current route.
     *
     * @param {?} pageName
     * @param {?} pathName
     * @return {?}
     */
    RoutingService.prototype.pathForPage = /**
     * Assembles a path based on the current route.
     *
     * @param {?} pageName
     * @param {?} pathName
     * @return {?}
     */
    function (pageName, pathName) {
        return this.router.routerState.snapshot.url + "/" + pathName;
    };
    /**
     *
     * Search top level routes and return Route that has component name equal to pageName
     *
     *
     */
    /**
     *
     * Search top level routes and return Route that has component name equal to pageName
     *
     *
     * @param {?} pageName
     * @param {?=} pathName
     * @param {?=} activatedPath
     * @return {?}
     */
    RoutingService.prototype.routeForPage = /**
     *
     * Search top level routes and return Route that has component name equal to pageName
     *
     *
     * @param {?} pageName
     * @param {?=} pathName
     * @param {?=} activatedPath
     * @return {?}
     */
    function (pageName, pathName, activatedPath) {
        var /** @type {?} */ nextRoute;
        // we need this as we need to lookup if there is any route with given pageName as
        // child route, if not search for global onces
        var /** @type {?} */ normalizedPath = activatedPath.indexOf('/') === 0 ? activatedPath.substring(1) :
            activatedPath;
        var /** @type {?} */ currentRoute = this.router.config.find(function (r) {
            var /** @type {?} */ routePath = r.path.indexOf('/') === 0 ? r.path.substring(1) :
                r.path;
            return isPresent(normalizedPath) && normalizedPath === routePath;
        });
        // try to match the path and expected pageName
        if (isPresent(pathName) && isPresent(currentRoute) && currentRoute.children.length > 0) {
            nextRoute = currentRoute.children.find(function (r) {
                var /** @type {?} */ componentName = r.component.prototype.constructor.name;
                return pathName === r.path && pageName === componentName;
            });
        }
        else if (isPresent(pageName)) {
            nextRoute = this.router.config.find(function (r) {
                var /** @type {?} */ componentName = r.component.prototype.constructor.name;
                return pathName === r.path && pageName === componentName;
            });
        }
        // path not found then check only if we find anywhere in the path pageNae
        if (isBlank(nextRoute)) {
            this.router.config.forEach(function (r) {
                if (isPresent(r.component)) {
                    var /** @type {?} */ componentName = r.component.prototype.constructor.name;
                    if (pageName === componentName) {
                        nextRoute = r;
                    }
                }
            });
        }
        return nextRoute;
    };
    RoutingService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"] },
    ];
    /** @nocollapse */
    RoutingService.ctorParameters = function () { return [
        { type: _angular_router__WEBPACK_IMPORTED_MODULE_6__["Router"] }
    ]; };
    return RoutingService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Notifications service is a implementation of the publish/subscribe event bus for publishing
 * and listening for application level events.
 *
 * To subscribe to specific event e.g. User Logged In where topic is called user:signedIn
 *
 *
 * ```ts
 *
 * \@Component({
 *         selector: 'my-comp',
 *         template: `
 *                 Hello
 *             `
 *     })
 *     class MyComponent implements OnDestroy
 *     {
 *
 *        subscr: Subscription;
 *
 *         constructor(private notifications: Notifications) {
 *
 *              this.subscr = notifications.subscribe('user:signedIn', (message: any) =>
 *              {
 *                  // load user profile
 *              });
 *         }
 *
 *          ngOnDestroy(): void
 *          {
 *             this.subscr.unsubscribe();
 *          }
 *
 *
 *
 *     }
 *
 *
 * ```
 *
 * To publish event:
 *
 * ```
 *     let notifications: Notification;
 *     notifications.publish('user:signedIn', 'User just signed in');
 *
 * ```
 *
 * You can create and listen for your own application level events or you can also listen for all
 * the topics in the application if you use  `*` as application topic
 *
 * Unsubscribing is responsibility  of each subscriber
 *
 */
var Notifications = /** @class */ (function () {
    function Notifications() {
        this.events = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
    }
    /**
     *
     * Subscribe to specific listener based on given topic.
     *
     */
    /**
     *
     * Subscribe to specific listener based on given topic.
     *
     * @param {?} topic
     * @param {?} subscriber
     * @return {?}
     */
    Notifications.prototype.subscribe = /**
     *
     * Subscribe to specific listener based on given topic.
     *
     * @param {?} topic
     * @param {?} subscriber
     * @return {?}
     */
    function (topic, subscriber) {
        var /** @type {?} */ toAll = Notifications.AllTopics;
        return this.events.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["filter"])(function (msg) { return msg.topic === topic || topic === toAll; }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (msg) { return msg.content; })).subscribe(subscriber);
    };
    /**
     *
     * Publish new event to a topic
     *
     */
    /**
     *
     * Publish new event to a topic
     *
     * @param {?} topic
     * @param {?} message
     * @return {?}
     */
    Notifications.prototype.publish = /**
     *
     * Publish new event to a topic
     *
     * @param {?} topic
     * @param {?} message
     * @return {?}
     */
    function (topic, message) {
        var /** @type {?} */ msg = { topic: topic, content: message };
        this.events.next(msg);
    };
    /**
     * When this is used as a topic subscriber receives all messages
     *
     */
    Notifications.AllTopics = '*';
    Notifications.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"] },
    ];
    /** @nocollapse */
    Notifications.ctorParameters = function () { return []; };
    return Notifications;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var GlobalErrorHandler = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(GlobalErrorHandler, _super);
    function GlobalErrorHandler(notifications) {
        var _this = _super.call(this) || this;
        _this.notifications = notifications;
        return _this;
    }
    /**
     * @param {?} error
     * @return {?}
     */
    GlobalErrorHandler.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        if (isPresent(this.notifications)) {
            this.notifications.publish('app:error', error);
        }
    };
    GlobalErrorHandler.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"] },
    ];
    /** @nocollapse */
    GlobalErrorHandler.ctorParameters = function () { return [
        { type: Notifications }
    ]; };
    return GlobalErrorHandler;
}(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ErrorHandler"]));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ routes = [
    { path: 'not-found', component: NotFoundComponent }
];
var AribaCoreRoutingModule = /** @class */ (function () {
    function AribaCoreRoutingModule() {
    }
    AribaCoreRoutingModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                    imports: [
                        _angular_router__WEBPACK_IMPORTED_MODULE_6__["RouterModule"].forChild(routes)
                    ],
                    exports: [_angular_router__WEBPACK_IMPORTED_MODULE_6__["RouterModule"]],
                    providers: []
                },] },
    ];
    return AribaCoreRoutingModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Interceptor providing Mock Server functionality and is inserted only and if mock server is
 * enabled using AppConfig's connection.mock-server.enabled bootstrap property
 *
 *
 */
var HttpMockInterceptor = /** @class */ (function () {
    function HttpMockInterceptor(appConfig) {
        this.appConfig = appConfig;
        /**
         * Stores loaded routes by given entity name.
         *
         */
        this.routesByEntity = new Map();
    }
    /**
     *
     * If route is found returned Mock resuled defined in the JSON files, otherwise pass
     * the request to the next interceptor.
     *
     *
     */
    /**
     *
     * If route is found returned Mock resuled defined in the JSON files, otherwise pass
     * the request to the next interceptor.
     *
     *
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    HttpMockInterceptor.prototype.intercept = /**
     *
     * If route is found returned Mock resuled defined in the JSON files, otherwise pass
     * the request to the next interceptor.
     *
     *
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var /** @type {?} */ mockedResp = this.makeRes(req);
        if (isPresent(mockedResp)) {
            if (mockedResp.status >= 200 && mockedResp.status < 300) {
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_7__["of"])(/** @type {?} */ (mockedResp));
            }
            else {
                var /** @type {?} */ errror = new _angular_common_http__WEBPACK_IMPORTED_MODULE_5__["HttpErrorResponse"]({
                    error: mockedResp.body,
                    status: mockedResp.status,
                    statusText: mockedResp.statusText,
                    url: req.urlWithParams
                });
                Object(rxjs__WEBPACK_IMPORTED_MODULE_7__["throwError"])(errror);
            }
        }
        return next.handle(req);
    };
    /**
     * Based on user configuration we load all the available routes and register them into
     * `this.routesByEntity`
     *
     */
    /**
     * Based on user configuration we load all the available routes and register them into
     * `this.routesByEntity`
     *
     * @return {?}
     */
    HttpMockInterceptor.prototype.loadRoutes = /**
     * Based on user configuration we load all the available routes and register them into
     * `this.routesByEntity`
     *
     * @return {?}
     */
    function () {
        var /** @type {?} */ routes = this.appConfig.get(AppConfig.ConnectionMockServerRoutes);
        try {
            for (var routes_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(routes), routes_1_1 = routes_1.next(); !routes_1_1.done; routes_1_1 = routes_1.next()) {
                var routeName = routes_1_1.value;
                var /** @type {?} */ req = this.makeReq(routeName);
                // let's make quick and dirty async call to load our routes before anything else
                var /** @type {?} */ mocked = this.requestForRoutes(req);
                this.routesByEntity.set(mocked.resource, mocked.routes);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (routes_1_1 && !routes_1_1.done && (_a = routes_1.return)) _a.call(routes_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var e_1, _a;
    };
    /**
     *
     * Returns configuration based on mock JSON files.
     *
     * @param {?} req
     * @return {?}
     */
    HttpMockInterceptor.prototype.requestForRoutes = /**
     *
     * Returns configuration based on mock JSON files.
     *
     * @param {?} req
     * @return {?}
     */
    function (req) {
        var /** @type {?} */ xmlHttpReq = new XMLHttpRequest();
        xmlHttpReq.open(req.method, req.urlWithParams, false);
        req.headers.keys().forEach(function (key) {
            var /** @type {?} */ all = req.headers.getAll(key);
            xmlHttpReq.setRequestHeader(name, all.join(','));
        });
        xmlHttpReq.setRequestHeader('Accept', 'application/json, text/plain, */*');
        xmlHttpReq.send(null);
        var /** @type {?} */ body = isBlank(xmlHttpReq.response) ? xmlHttpReq.responseText :
            xmlHttpReq.response;
        if (xmlHttpReq.status < 200 && xmlHttpReq.status >= 300) {
            throw new Error('Cannot load Mock server configuration. Please make sure that you' +
                ' have a mock-routing/ folder under your assets');
        }
        return isString(body) ? JSON.parse(body) : body;
    };
    /**
     *
     * Create a requests to load routes
     *
     * @param {?} routeName
     * @return {?}
     */
    HttpMockInterceptor.prototype.makeReq = /**
     *
     * Create a requests to load routes
     *
     * @param {?} routeName
     * @return {?}
     */
    function (routeName) {
        var /** @type {?} */ assetFolder = this.appConfig.get(AppConfig.AssetFolder);
        var /** @type {?} */ path = this.appConfig.get(AppConfig.ConnectionMockServerPath);
        return new _angular_common_http__WEBPACK_IMPORTED_MODULE_5__["HttpRequest"]('GET', "" + assetFolder + path + "/" + routeName + ".json", {
            responseType: 'json'
        });
    };
    /**
     *
     * When we are creating a response we always expect two things:
     * 1) We are dealing with Entity
     * 2) REST API is handled using Resource which prepend /mocked/
     *
     * @param {?} req
     * @return {?}
     */
    HttpMockInterceptor.prototype.makeRes = /**
     *
     * When we are creating a response we always expect two things:
     * 1) We are dealing with Entity
     * 2) REST API is handled using Resource which prepend /mocked/
     *
     * @param {?} req
     * @return {?}
     */
    function (req) {
        var /** @type {?} */ responseOp;
        var /** @type {?} */ path = req.urlWithParams.substring(req.url.indexOf('mocked') + 6);
        var /** @type {?} */ resource = path.substring(1);
        if (resource.indexOf('/') !== -1) {
            resource = resource.substring(0, resource.indexOf('/'));
        }
        if (this.routesByEntity.has(resource)) {
            responseOp = this.doHandleRequest(req, path, resource);
        }
        if (isBlank(responseOp) && this.appConfig.getBoolean(AppConfig.InTest)) {
            return new _angular_common_http__WEBPACK_IMPORTED_MODULE_5__["HttpResponse"]({
                body: {}, status: 404, statusText: 'Not Found',
                url: req.urlWithParams
            });
        }
        return responseOp;
    };
    /**
     *
     * This will get the content from the routes -> route as it as and return it as a
     * response
     *
     * @param {?} req
     * @param {?} path
     * @param {?} resource
     * @return {?}
     */
    HttpMockInterceptor.prototype.doHandleRequest = /**
     *
     * This will get the content from the routes -> route as it as and return it as a
     * response
     *
     * @param {?} req
     * @param {?} path
     * @param {?} resource
     * @return {?}
     */
    function (req, path, resource) {
        var /** @type {?} */ routes = this.routesByEntity.get(resource);
        var /** @type {?} */ matchedRoute = routes.findIndex(function (el) {
            return req.method.toLowerCase() === el.method.toLowerCase() && el.path === path;
        });
        if (matchedRoute !== -1) {
            var /** @type {?} */ route = routes[matchedRoute];
            var /** @type {?} */ payload = {
                payload: route.data
            };
            return new _angular_common_http__WEBPACK_IMPORTED_MODULE_5__["HttpResponse"]({
                body: payload,
                status: route.responseCode,
                statusText: route.responseText,
                url: route.path
            });
        }
        return null;
    };
    HttpMockInterceptor.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"] },
    ];
    /** @nocollapse */
    HttpMockInterceptor.ctorParameters = function () { return [
        { type: AppConfig }
    ]; };
    return HttpMockInterceptor;
}());
/**
 * Default implementation of the HttpHandler so we can have custom behavior to HTTPClient
 */
var /**
 * Default implementation of the HttpHandler so we can have custom behavior to HTTPClient
 */
MockInterceptorHandler = /** @class */ (function () {
    function MockInterceptorHandler(next, interceptor) {
        this.next = next;
        this.interceptor = interceptor;
    }
    /**
     * @param {?} req
     * @return {?}
     */
    MockInterceptorHandler.prototype.handle = /**
     * @param {?} req
     * @return {?}
     */
    function (req) {
        return this.interceptor.intercept(req, this.next);
    };
    return MockInterceptorHandler;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ UserConfig = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('UserConfig');
/**
 * Core mode includes all shared logic accross whole application
 */
var AribaCoreModule = /** @class */ (function () {
    function AribaCoreModule(parentModule, conf) {
        this.conf = conf;
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    AribaCoreModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        if (config === void 0) { config = {}; }
        return {
            ngModule: AribaCoreModule,
            providers: [
                _angular_platform_browser__WEBPACK_IMPORTED_MODULE_8__["Title"],
                _angular_platform_browser__WEBPACK_IMPORTED_MODULE_8__["Meta"],
                Environment,
                Notifications,
                HttpMockInterceptor,
                Resource,
                { provide: UserConfig, useValue: config },
                {
                    provide: AppConfig, useFactory: makeConfig,
                    deps: [UserConfig, _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injector"], Environment]
                },
                {
                    provide: _angular_common_http__WEBPACK_IMPORTED_MODULE_5__["HttpHandler"],
                    useFactory: makeHttpClientHandler,
                    deps: [
                        _angular_common_http__WEBPACK_IMPORTED_MODULE_5__["HttpBackend"], AppConfig, HttpMockInterceptor,
                        [new _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"](_angular_common_http__WEBPACK_IMPORTED_MODULE_5__["HTTP_INTERCEPTORS"])]
                    ],
                },
                { provide: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ErrorHandler"], useClass: GlobalErrorHandler, deps: [Notifications] },
                { provide: RoutingService, useClass: RoutingService, deps: [_angular_router__WEBPACK_IMPORTED_MODULE_6__["Router"]] }
            ]
        };
    };
    AribaCoreModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_9__["CommonModule"],
                        _angular_common_http__WEBPACK_IMPORTED_MODULE_5__["HttpClientModule"],
                        AribaCoreRoutingModule
                    ],
                    declarations: [NotFoundComponent],
                    bootstrap: []
                },] },
    ];
    /** @nocollapse */
    AribaCoreModule.ctorParameters = function () { return [
        { type: AribaCoreModule, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["SkipSelf"] }] },
        { type: AppConfig }
    ]; };
    return AribaCoreModule;
}());
/**
 *
 * Add custom Mock functionality only and if we enabled this in the settings. I dont really want to
 * have NoopIntercepter in the chain
 *
 * @param {?} ngBackend
 * @param {?} config
 * @param {?} mockInterceptor
 * @param {?=} interceptors
 * @return {?}
 */
function makeHttpClientHandler(ngBackend, config, mockInterceptor, interceptors) {
    if (interceptors === void 0) { interceptors = []; }
    if (config.getBoolean(AppConfig.ConnectionUseMockServer)) {
        mockInterceptor.loadRoutes();
        interceptors = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"])(interceptors, [mockInterceptor]);
    }
    if (!interceptors) {
        return ngBackend;
    }
    return interceptors.reduceRight(function (next, interceptor) { return new MockInterceptorHandler(next, interceptor); }, ngBackend);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * The FieldPath is utility class for representing of a dotted fieldPath.
 *
 * A String such as "foo.bar.baz" can be used to access a value on a target object.
 *
 */
var  /**
 * The FieldPath is utility class for representing of a dotted fieldPath.
 *
 * A String such as "foo.bar.baz" can be used to access a value on a target object.
 *
 */
FieldPath = /** @class */ (function () {
    function FieldPath(_path) {
        this._path = _path;
        this._fieldPaths = isBlank(_path) ? [] : _path.split('.');
        this.objectPathInstance = Object(object_path__WEBPACK_IMPORTED_MODULE_10__["create"])({ includeInheritedProps: true });
    }
    /**
     *
     * Sets a value to target objects
     *
     */
    /**
     *
     * Sets a value to target objects
     *
     * @param {?} target
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    FieldPath.setFieldValue = /**
     *
     * Sets a value to target objects
     *
     * @param {?} target
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    function (target, field, value) {
        var /** @type {?} */ fp = new FieldPath(field);
        fp.setFieldValue(target, value);
    };
    /**
     * Reads a value from target objects
     */
    /**
     * Reads a value from target objects
     * @param {?} target
     * @param {?} field
     * @return {?}
     */
    FieldPath.getFieldValue = /**
     * Reads a value from target objects
     * @param {?} target
     * @param {?} field
     * @return {?}
     */
    function (target, field) {
        var /** @type {?} */ fp = new FieldPath(field);
        var /** @type {?} */ value = fp.getFieldValue(target);
        if (field === '$toString') {
            return value();
        }
        return value;
    };
    /**
     *  One of the main reason why I have this is not only to iterate thru dotted field path but
     * mainly to be able to set naturally value into a nested maps like :
     *
     *  fieldName.fieldNameMap.fieldKey => it will access fieldName on the target, from there it
     * reads FieldNameMap since fieldName nested objects and sets a new value identified by Map key
     * fieldKey
     *
     *  ```
     *  class MyClass {
     *      fieldName:NestedObject
     *
     *  }
     *
     *  class NestedObject {
     *      fieldNameMap:Map<key, value>;
     *  }
     *
     *  ```
     * use field value for assignment so keys of form "a.b.c" will go in nested Maps
     */
    /**
     *  One of the main reason why I have this is not only to iterate thru dotted field path but
     * mainly to be able to set naturally value into a nested maps like :
     *
     *  fieldName.fieldNameMap.fieldKey => it will access fieldName on the target, from there it
     * reads FieldNameMap since fieldName nested objects and sets a new value identified by Map key
     * fieldKey
     *
     *  ```
     *  class MyClass {
     *      fieldName:NestedObject
     *
     *  }
     *
     *  class NestedObject {
     *      fieldNameMap:Map<key, value>;
     *  }
     *
     *  ```
     * use field value for assignment so keys of form "a.b.c" will go in nested Maps
     * @param {?} target
     * @param {?} value
     * @return {?}
     */
    FieldPath.prototype.setFieldValue = /**
     *  One of the main reason why I have this is not only to iterate thru dotted field path but
     * mainly to be able to set naturally value into a nested maps like :
     *
     *  fieldName.fieldNameMap.fieldKey => it will access fieldName on the target, from there it
     * reads FieldNameMap since fieldName nested objects and sets a new value identified by Map key
     * fieldKey
     *
     *  ```
     *  class MyClass {
     *      fieldName:NestedObject
     *
     *  }
     *
     *  class NestedObject {
     *      fieldNameMap:Map<key, value>;
     *  }
     *
     *  ```
     * use field value for assignment so keys of form "a.b.c" will go in nested Maps
     * @param {?} target
     * @param {?} value
     * @return {?}
     */
    function (target, value) {
        // implement the same thing what we have on the get, if Map set field into map
        if (this._fieldPaths.length > 1 && !(target instanceof Map)) {
            var /** @type {?} */ path = this._fieldPaths.slice(0, this._fieldPaths.length - 1).join('.');
            var /** @type {?} */ objectToBeUpdated = this.objectPathInstance.get(target, path);
            if (objectToBeUpdated instanceof Map) {
                objectToBeUpdated.set(this._fieldPaths[this._fieldPaths.length - 1], value);
            }
            else {
                this.objectPathInstance.set(target, this._path, value);
            }
        }
        if (target instanceof Map) {
            var /** @type {?} */ mapTarget = target;
            // handle Nested Map
            if (this._fieldPaths.length > 1) {
                var /** @type {?} */ path = this._fieldPaths.splice(0, 1);
                var /** @type {?} */ nestedMap = mapTarget.get(path[0]);
                if (isBlank(nestedMap)) {
                    nestedMap = new Map();
                    mapTarget.set(path[0], nestedMap);
                }
                this.setFieldValue(nestedMap, value);
            }
            else {
                target.set(this._fieldPaths[0], value);
            }
        }
        else {
            this.objectPathInstance.set(target, this._path, value);
        }
    };
    /**
     * The same reason as for SetFieldValue. Need to be able to read value by dotted path as well
     * as ready value from Maps.
     *
     * todo: this is quick and dirty implementation - need to write better solution
     */
    /**
     * The same reason as for SetFieldValue. Need to be able to read value by dotted path as well
     * as ready value from Maps.
     *
     * todo: this is quick and dirty implementation - need to write better solution
     * @param {?} target
     * @return {?}
     */
    FieldPath.prototype.getFieldValue = /**
     * The same reason as for SetFieldValue. Need to be able to read value by dotted path as well
     * as ready value from Maps.
     *
     * todo: this is quick and dirty implementation - need to write better solution
     * @param {?} target
     * @return {?}
     */
    function (target) {
        var /** @type {?} */ value;
        for (var /** @type {?} */ i = 0; i < this._fieldPaths.length; i++) {
            if ((isStringMap(target) || isString(target)) && !(target instanceof Map)) {
                value = this.objectPathInstance.get(target, this._fieldPaths[i]);
                target = value;
            }
            else if (target instanceof Map) {
                var /** @type {?} */ targetMap = target;
                value = targetMap.get(this._fieldPaths[i]);
            }
            // just tweak to be able to access maps field.someMapField.mapKey
            // I want this to get the element from the map
            if (value instanceof Map && (i + 1) < this._fieldPaths.length) {
                var /** @type {?} */ mapValue = /** @type {?} */ (value);
                return mapValue.get(this._fieldPaths[i + 1]);
            }
        }
        return value;
    };
    Object.defineProperty(FieldPath.prototype, "path", {
        get: /**
         * @return {?}
         */
        function () {
            return this._path;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FieldPath.prototype.toString = /**
     * @return {?}
     */
    function () {
        return this._path;
    };
    return FieldPath;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Notion of having `AribaApplication` class came from  a simple requirement that every single
 * application needs a common way how to initialize.
 *
 * We want to be more application specific therefore we don't want to have generic names such as
 * `app.component or app.module`, the root component should be named based on what it is doing
 * or what is real application name e.g.: TodoApp, SourcingApp, etcs. and these application will
 * inherit from `AribaApplication` to get some common behavior.
 *
 * Specific application types will extends this class to add more behavior.
 *
 * There are two types of bootstrapping and passing environment parameters to the application:
 *
 * -  During AribaCoreUI import:
 *
 * ### example
 *
 * ```ts
 *      AribaCoreModule.forRoot({
 *                  'app.title': 'Playground Application',
 *                  'asset-folder': 'playground/assets',
 *                  'metaui.rules.file-names': ['Application', 'Layout'],
 *                  'restapi.context': '/myService/',
 *                  'connection.mock-server.enabled': true,
 *                  'connection.mock-server.routes': ['users'],
 *              }),
 *
 * ```
 *  Use this to pass some static properties.
 *
 *
 * -  From AribaApplication :
 *
 *  When you have specific type of applications that needs more settings you inherit from this
 *  class to extend its behavior and then use it for your applications to share common behavior
 *
 * ### example
 *
 *  ```ts
 *
 *     export class FacebookApplication extends AribaApplication {
 *
 *         protected appId: string = '.....';
 *
 *
 *          protected initialize(): void
 *          {
 *              super.initialize();
 *
 *              this.appId = readAppIdfromEnv();
 *
 *              this.appConfig.set('facebook.appId', this.appId );
 *
 *              this.registerFBAuthenticator();
 *
 *          }
 *
 *     }
 *
 *  ```
 *  Once you defined your type of application, then you can start creating applications that inherit
 *  from this `FacebookApplication`. Root App component
 *
 *
 * ```ts
 * \@Component({...})
 *      export PictureAppComponent extends FacebookApplication {
 *             ...
 *
 *      }
 *
 *
 *
 * \@NgModule({ bootstrap: [PictureAppComponent] })
 *     export class PictureAppModule {
 *
 *     }
 *
 *
 * ```
 *
 */
var  /**
 * Notion of having `AribaApplication` class came from  a simple requirement that every single
 * application needs a common way how to initialize.
 *
 * We want to be more application specific therefore we don't want to have generic names such as
 * `app.component or app.module`, the root component should be named based on what it is doing
 * or what is real application name e.g.: TodoApp, SourcingApp, etcs. and these application will
 * inherit from `AribaApplication` to get some common behavior.
 *
 * Specific application types will extends this class to add more behavior.
 *
 * There are two types of bootstrapping and passing environment parameters to the application:
 *
 * -  During AribaCoreUI import:
 *
 * ### example
 *
 * ```ts
 *      AribaCoreModule.forRoot({
 *                  'app.title': 'Playground Application',
 *                  'asset-folder': 'playground/assets',
 *                  'metaui.rules.file-names': ['Application', 'Layout'],
 *                  'restapi.context': '/myService/',
 *                  'connection.mock-server.enabled': true,
 *                  'connection.mock-server.routes': ['users'],
 *              }),
 *
 * ```
 *  Use this to pass some static properties.
 *
 *
 * -  From AribaApplication :
 *
 *  When you have specific type of applications that needs more settings you inherit from this
 *  class to extend its behavior and then use it for your applications to share common behavior
 *
 * ### example
 *
 *  ```ts
 *
 *     export class FacebookApplication extends AribaApplication {
 *
 *         protected appId: string = '.....';
 *
 *
 *          protected initialize(): void
 *          {
 *              super.initialize();
 *
 *              this.appId = readAppIdfromEnv();
 *
 *              this.appConfig.set('facebook.appId', this.appId );
 *
 *              this.registerFBAuthenticator();
 *
 *          }
 *
 *     }
 *
 *  ```
 *  Once you defined your type of application, then you can start creating applications that inherit
 *  from this `FacebookApplication`. Root App component
 *
 *
 * ```ts
 * \@Component({...})
 *      export PictureAppComponent extends FacebookApplication {
 *             ...
 *
 *      }
 *
 *
 *
 * \@NgModule({ bootstrap: [PictureAppComponent] })
 *     export class PictureAppModule {
 *
 *     }
 *
 *
 * ```
 *
 */
AribaApplication = /** @class */ (function () {
    function AribaApplication(appConfig) {
        this.appConfig = appConfig;
        this.metaTags = this.appConfig.injector.get(_angular_platform_browser__WEBPACK_IMPORTED_MODULE_8__["Meta"]);
        this.title = this.appConfig.injector.get(_angular_platform_browser__WEBPACK_IMPORTED_MODULE_8__["Title"]);
    }
    /**
     * @return {?}
     */
    AribaApplication.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initialize();
    };
    /**
     * Current default behavior just sets a title for the application
     */
    /**
     * Current default behavior just sets a title for the application
     * @return {?}
     */
    AribaApplication.prototype.initialize = /**
     * Current default behavior just sets a title for the application
     * @return {?}
     */
    function () {
        var /** @type {?} */ title = this.appConfig.get(AppConfig.AppTitle);
        if (isBlank(title)) {
            title = 'Ariba Application';
        }
        this.title.setTitle(title);
    };
    return AribaApplication;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */



//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../dist/@aribaui/metaui/fesm5/aribaui-metaui.js":
/*!***************************************************************************************************************!*\
  !*** /Users/i304804/Documents/ariba/projects/Open Source/MetaUI/dist/@aribaui/metaui/fesm5/aribaui-metaui.js ***!
  \***************************************************************************************************************/
/*! exports provided: Activation, Assignment, AssignmentSnapshot, Context, DeferredAssignment, ObjectMetaContext, PropertyAccessor, Snapshot, StaticRec, UIContext, ItemProperties, Match, MatchResult, MatchWithUnion, UnionMatchResult, Meta, KeyValueCount, PropertyManager, OverrideValue, KeyData, PropertyMap, PropertyMergerDynamic, PropertyMerger_Overwrite, PropertyMerger_List, PropertyMergerDeclareList, PropertyMergerDeclareListForTrait, PropertyMerger_And, PropertyMerger_Valid, RuleSet, ValueMatches, MultiMatchValue, KeyValueTransformer_KeyPresent, isPropertyMapAwaking, NestedMap, FieldTypeIntrospectionMetaProvider, IntrospectionMetaProvider, ObjectMeta, ObjectMetaPropertyMap, OMPropertyMerger_Valid, SystemPersistenceRules, DynamicPropertyValue, StaticallyResolvable, StaticDynamicWrapper, StaticallyResolvableWrapper, ContextFieldPath, isDynamicSettable, Expr, DeferredOperationChain, ValueConverter, Rule, RuleWrapper, Selector, RuleLoaderService, LocalizedString, UIMeta, SystemRules, ModuleInfo, AWMetaCoreModule, MetaUIActionEvent, MetaContentPageComponent, MetaFormComponent, MetaFormRowComponent, MetaFormTableComponent, NoMetaComponent, MetaIncludeComponentDirective, MetaBaseComponent, MetaElementListComponent, MetaHomePageComponent, AWMetaLayoutModule, MetaSectionsComponent, MetaObjectDetailComponent, MetaContextComponent, AribaMetaUIModule, initMetaUI, AribaMetaUIRoutingModule, ɵa, ɵb, ɵc */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Activation", function() { return Activation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Assignment", function() { return Assignment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AssignmentSnapshot", function() { return AssignmentSnapshot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Context", function() { return Context; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeferredAssignment", function() { return DeferredAssignment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectMetaContext", function() { return ObjectMetaContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyAccessor", function() { return PropertyAccessor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Snapshot", function() { return Snapshot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StaticRec", function() { return StaticRec; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UIContext", function() { return UIContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ItemProperties", function() { return ItemProperties; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Match", function() { return Match; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatchResult", function() { return MatchResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatchWithUnion", function() { return MatchWithUnion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnionMatchResult", function() { return UnionMatchResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Meta", function() { return Meta; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyValueCount", function() { return KeyValueCount; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyManager", function() { return PropertyManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverrideValue", function() { return OverrideValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyData", function() { return KeyData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyMap", function() { return PropertyMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyMergerDynamic", function() { return PropertyMergerDynamic; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyMerger_Overwrite", function() { return PropertyMerger_Overwrite; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyMerger_List", function() { return PropertyMerger_List; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyMergerDeclareList", function() { return PropertyMergerDeclareList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyMergerDeclareListForTrait", function() { return PropertyMergerDeclareListForTrait; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyMerger_And", function() { return PropertyMerger_And; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyMerger_Valid", function() { return PropertyMerger_Valid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuleSet", function() { return RuleSet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValueMatches", function() { return ValueMatches; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiMatchValue", function() { return MultiMatchValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyValueTransformer_KeyPresent", function() { return KeyValueTransformer_KeyPresent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPropertyMapAwaking", function() { return isPropertyMapAwaking; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NestedMap", function() { return NestedMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FieldTypeIntrospectionMetaProvider", function() { return FieldTypeIntrospectionMetaProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntrospectionMetaProvider", function() { return IntrospectionMetaProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectMeta", function() { return ObjectMeta; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectMetaPropertyMap", function() { return ObjectMetaPropertyMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OMPropertyMerger_Valid", function() { return OMPropertyMerger_Valid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SystemPersistenceRules", function() { return SystemPersistenceRules; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DynamicPropertyValue", function() { return DynamicPropertyValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StaticallyResolvable", function() { return StaticallyResolvable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StaticDynamicWrapper", function() { return StaticDynamicWrapper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StaticallyResolvableWrapper", function() { return StaticallyResolvableWrapper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContextFieldPath", function() { return ContextFieldPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDynamicSettable", function() { return isDynamicSettable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Expr", function() { return Expr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeferredOperationChain", function() { return DeferredOperationChain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValueConverter", function() { return ValueConverter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Rule", function() { return Rule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuleWrapper", function() { return RuleWrapper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Selector", function() { return Selector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuleLoaderService", function() { return RuleLoaderService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LocalizedString", function() { return LocalizedString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UIMeta", function() { return UIMeta; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SystemRules", function() { return SystemRules; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModuleInfo", function() { return ModuleInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWMetaCoreModule", function() { return AWMetaCoreModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetaUIActionEvent", function() { return MetaUIActionEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetaContentPageComponent", function() { return MetaContentPageComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetaFormComponent", function() { return MetaFormComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetaFormRowComponent", function() { return MetaFormRowComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetaFormTableComponent", function() { return MetaFormTableComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoMetaComponent", function() { return NoMetaComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetaIncludeComponentDirective", function() { return MetaIncludeComponentDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetaBaseComponent", function() { return MetaBaseComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetaElementListComponent", function() { return MetaElementListComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetaHomePageComponent", function() { return MetaHomePageComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AWMetaLayoutModule", function() { return AWMetaLayoutModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetaSectionsComponent", function() { return MetaSectionsComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetaObjectDetailComponent", function() { return MetaObjectDetailComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetaContextComponent", function() { return MetaContextComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AribaMetaUIModule", function() { return AribaMetaUIModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initMetaUI", function() { return initMetaUI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AribaMetaUIRoutingModule", function() { return AribaMetaUIRoutingModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function() { return MetaActionListComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function() { return MetaDashboardLayoutComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function() { return MetaLayout; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _aribaui_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aribaui/core */ "../../dist/@aribaui/core/fesm5/aribaui-core.js");
/* harmony import */ var typescript_collections__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! typescript-collections */ "../../node_modules/typescript-collections/dist/lib/index.js");
/* harmony import */ var typescript_collections__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(typescript_collections__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _aribaui_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aribaui/components */ "../../dist/@aribaui/components/fesm5/aribaui-components.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ "../../node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ "../../node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/router */ "../../node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/platform-browser */ "../../node_modules/@angular/platform-browser/fesm5/platform-browser.js");










/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Represents a set of matching rules resulting from looking up a set of key/values
 *  against the Meta rule base.
 *
 * Instances of the Match superclass are simply immutable snapshots of previous matches
 * (used as keys in Match -> Properties lookup caches).
 * The more meaty class is its static inner subclass, Match.MatchResult.
 */
var Match = /** @class */ (function () {
    function Match(_matches, _keysMatchedMask, _matchPathCRC) {
        if (_matchPathCRC === void 0) { _matchPathCRC = 0; }
        this._matches = _matches;
        this._keysMatchedMask = _keysMatchedMask;
        this._matchPathCRC = _matchPathCRC;
    }
    // Word lists are int arrays with the first element holding the length
    /**
     * @param {?} intArr
     * @param {?} val
     * @return {?}
     */
    Match.addInt = /**
     * @param {?} intArr
     * @param {?} val
     * @return {?}
     */
    function (intArr, val) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(intArr)) {
            var /** @type {?} */ r = new Array(4);
            r[0] = 1;
            r[1] = val;
            return r;
        }
        var /** @type {?} */ newPos = intArr[0];
        if (intArr[newPos++] === val) {
            return intArr;
        } // already here...
        if (newPos >= intArr.length) {
            var /** @type {?} */ a = new Array(newPos * 2);
            a = intArr.slice(0, newPos);
            intArr = a;
        }
        intArr[newPos] = val;
        intArr[0] = newPos;
        return intArr;
    };
    // only rules that use only the activated (queried) keys
    /**
     * @param {?} rules
     * @param {?} arr
     * @param {?} usesMask
     * @return {?}
     */
    Match.filterMustUse = /**
     * @param {?} rules
     * @param {?} arr
     * @param {?} usesMask
     * @return {?}
     */
    function (rules, arr, usesMask) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(arr)) {
            return null;
        }
        var /** @type {?} */ result;
        var /** @type {?} */ count = arr[0];
        for (var /** @type {?} */ i = 0; i < count; i++) {
            var /** @type {?} */ r = arr[i + 1];
            var /** @type {?} */ rule = rules[r];
            if ((rule.keyMatchesMask & usesMask) !== 0) {
                result = Match.addInt(result, r);
            }
        }
        return result;
    };
    /**
     * Intersects two rulevecs.  This is not a traditional intersection where only items in both
     * inputs are included in the result: we only intersect rules that match on common keys;
     * others are unioned.
     *
     * For instance, say we have the following inputs:
     *      a:  [matched on: class, layout]  (class=Foo, layout=Inspect)
     *          1) class=Foo layout=Inspect { ... }
     *          2) class=Foo operation=edit { ... }
     *          3) layout=Inspect operation=view { ... }
     *
     *      b:  [matched on: operation]  (operation=view)
     *          3) layout=Inspect operation=view { ... }
     *          4) operation=view type=String { ... }
     *          5) operation=view layout=Tabs { ... }
     *
     * The result should be: 1, 3, 4
     * I.e.: items that appear in both (#3 above) are included, as are items that appear in just
     * one,
     * *but don't match on the keys in the other* (#1 and #4 above).
     *
     * @param allRules the full rule base
     * @param a first vector of rule indexes
     * @param b second vector of rule indexes
     * @param aMask mask indicating the keys against which the first rule vectors items have
     *     already been matched
     * @param bMask mask indicating the keys against which the second rule vectors items have
     *     already been matched
     * @return rule vector for the matches
     */
    /**
     * Intersects two rulevecs.  This is not a traditional intersection where only items in both
     * inputs are included in the result: we only intersect rules that match on common keys;
     * others are unioned.
     *
     * For instance, say we have the following inputs:
     *      a:  [matched on: class, layout]  (class=Foo, layout=Inspect)
     *          1) class=Foo layout=Inspect { ... }
     *          2) class=Foo operation=edit { ... }
     *          3) layout=Inspect operation=view { ... }
     *
     *      b:  [matched on: operation]  (operation=view)
     *          3) layout=Inspect operation=view { ... }
     *          4) operation=view type=String { ... }
     *          5) operation=view layout=Tabs { ... }
     *
     * The result should be: 1, 3, 4
     * I.e.: items that appear in both (#3 above) are included, as are items that appear in just
     * one,
     * *but don't match on the keys in the other* (#1 and #4 above).
     *
     * @param {?} allRules the full rule base
     * @param {?} a first vector of rule indexes
     * @param {?} b second vector of rule indexes
     * @param {?} aMask mask indicating the keys against which the first rule vectors items have
     *     already been matched
     * @param {?} bMask mask indicating the keys against which the second rule vectors items have
     *     already been matched
     * @return {?} rule vector for the matches
     */
    Match.intersect = /**
     * Intersects two rulevecs.  This is not a traditional intersection where only items in both
     * inputs are included in the result: we only intersect rules that match on common keys;
     * others are unioned.
     *
     * For instance, say we have the following inputs:
     *      a:  [matched on: class, layout]  (class=Foo, layout=Inspect)
     *          1) class=Foo layout=Inspect { ... }
     *          2) class=Foo operation=edit { ... }
     *          3) layout=Inspect operation=view { ... }
     *
     *      b:  [matched on: operation]  (operation=view)
     *          3) layout=Inspect operation=view { ... }
     *          4) operation=view type=String { ... }
     *          5) operation=view layout=Tabs { ... }
     *
     * The result should be: 1, 3, 4
     * I.e.: items that appear in both (#3 above) are included, as are items that appear in just
     * one,
     * *but don't match on the keys in the other* (#1 and #4 above).
     *
     * @param {?} allRules the full rule base
     * @param {?} a first vector of rule indexes
     * @param {?} b second vector of rule indexes
     * @param {?} aMask mask indicating the keys against which the first rule vectors items have
     *     already been matched
     * @param {?} bMask mask indicating the keys against which the second rule vectors items have
     *     already been matched
     * @return {?} rule vector for the matches
     */
    function (allRules, a, b, aMask, bMask) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(a)) {
            return b;
        }
        var /** @type {?} */ result;
        var /** @type {?} */ iA = 1, /** @type {?} */ sizeA = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(a[0]) ? a[0] : 0, /** @type {?} */ iB = 1, /** @type {?} */ sizeB = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(b[0]) ? b[0] : 0;
        Match._Debug_ElementProcessCount += sizeA + sizeB;
        while (iA <= sizeA || iB <= sizeB) {
            var /** @type {?} */ iAMask = (iA <= sizeA) ? allRules[a[iA]].keyIndexedMask : 0;
            var /** @type {?} */ iBMask = (iB <= sizeB) ? allRules[b[iB]].keyIndexedMask : 0;
            var /** @type {?} */ c = (iA > sizeA ? 1 : (iB > sizeB ? -1 : (a[iA] - b[iB])));
            if (c === 0) {
                result = Match.addInt(result, a[iA]);
                iA++;
                iB++;
            }
            else if (c < 0) {
                // If A not in B, but A doesn't filter on B's mask, then add it
                if ((iAMask & bMask) === 0) {
                    result = Match.addInt(result, a[iA]);
                }
                iA++;
            }
            else {
                if ((iBMask & aMask) === 0) {
                    result = Match.addInt(result, b[iB]);
                }
                iB++;
            }
        }
        return result;
    };
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    Match.union = /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(a)) {
            return b;
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(b)) {
            return a;
        }
        var /** @type {?} */ sizeA = a[0], /** @type {?} */ sizeB = b[0];
        if (sizeA === 0) {
            return b;
        }
        if (sizeB === 0) {
            return a;
        }
        Match._Debug_ElementProcessCount += (sizeA + sizeB);
        var /** @type {?} */ result;
        var /** @type {?} */ iA = 1, /** @type {?} */ vA = a[1], /** @type {?} */ iB = 1, /** @type {?} */ vB = b[1];
        while (iA <= sizeA || iB <= sizeB) {
            var /** @type {?} */ c = vA - vB;
            result = Match.addInt(result, ((c <= 0) ? vA : vB));
            if (c <= 0) {
                iA++;
                vA = (iA <= sizeA) ? a[iA] : Number.MAX_VALUE;
            }
            if (c >= 0) {
                iB++;
                vB = (iB <= sizeB) ? b[iB] : Number.MAX_VALUE;
            }
        }
        return result;
    };
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    Match._arrayEq = /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        if (a === b) {
            return true;
        }
        if (a === null || b === null) {
            return false;
        }
        var /** @type {?} */ count = a[0];
        if (count !== b[0]) {
            return false;
        }
        for (var /** @type {?} */ i = 1; i <= count; i++) {
            if (a[i] !== b[i]) {
                return false;
            }
        }
        return true;
    };
    /**
     * Filter a partially matched set of rules down to the actual matches.
     * The input set of rules, matchesArr, is based on a *partial* match, and so includes rules
     * that were touched by some of the queried keys, but that may also require *additional* keys
     * that we have not matched on -- these must now be removed. Also, when 'partial indexing',
     * rules are indexed on a subset of their keys, so matchesArr will contain rules that need to
     * be evaluated against those MatchValues upon which they were not indexed (and therefore not
     * intersected / filtered on in the lookup process).
     */
    /**
     * Filter a partially matched set of rules down to the actual matches.
     * The input set of rules, matchesArr, is based on a *partial* match, and so includes rules
     * that were touched by some of the queried keys, but that may also require *additional* keys
     * that we have not matched on -- these must now be removed. Also, when 'partial indexing',
     * rules are indexed on a subset of their keys, so matchesArr will contain rules that need to
     * be evaluated against those MatchValues upon which they were not indexed (and therefore not
     * intersected / filtered on in the lookup process).
     * @param {?} allRules
     * @param {?} maxRule
     * @param {?} matchesArr
     * @param {?} queriedMask
     * @param {?} matchArray
     * @return {?}
     */
    Match.prototype.filter = /**
     * Filter a partially matched set of rules down to the actual matches.
     * The input set of rules, matchesArr, is based on a *partial* match, and so includes rules
     * that were touched by some of the queried keys, but that may also require *additional* keys
     * that we have not matched on -- these must now be removed. Also, when 'partial indexing',
     * rules are indexed on a subset of their keys, so matchesArr will contain rules that need to
     * be evaluated against those MatchValues upon which they were not indexed (and therefore not
     * intersected / filtered on in the lookup process).
     * @param {?} allRules
     * @param {?} maxRule
     * @param {?} matchesArr
     * @param {?} queriedMask
     * @param {?} matchArray
     * @return {?}
     */
    function (allRules, maxRule, matchesArr, queriedMask, matchArray) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(matchesArr)) {
            return null;
        }
        // print('\n## Filtering matching: ' + matchesArr[0] + ', Queried Mask: ' + queriedMask);
        //
        // for (let i = 1; i <= matchesArr[0]; i++) {
        //     print('## ' + matchesArr[i] + '): ' + allRules[matchesArr[i]].toString());
        // }
        var /** @type {?} */ result;
        var /** @type {?} */ count = matchesArr[0];
        for (var /** @type {?} */ i = 0; i < count; i++) {
            var /** @type {?} */ r = matchesArr[i + 1];
            if (r >= maxRule) {
                continue;
            }
            var /** @type {?} */ rule = allRules[r];
            if (rule.disabled() || (rule.keyAntiMask & queriedMask) !== 0) {
                continue;
            }
            // Must have matched on (activate) all match keys for this rule, *and*
            // if have any non-indexed rules, need to check match on those
            if (((rule.keyMatchesMask & ~queriedMask) === 0) &&
                ((rule.keyMatchesMask === rule.keyIndexedMask)
                    ||
                        (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(matchArray) && rule.matches(matchArray)))) {
                if (Meta._DebugDoubleCheckMatches && !(matchArray != null && rule.matches(matchArray))) {
                    Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(false, 'Inconsistent (negative) match on rule: ' + rule);
                }
                result = Match.addInt(result, r);
            }
            else if (Meta._DebugDoubleCheckMatches && (matchArray != null && rule.matches(matchArray))) ;
        }
        // if (isPresent(result) && result.length > 0) {
        //     print('\n\n\n #### Filtering RESULT: ' + result[0]);
        //
        //     for (let i = 1; i <= result[0]; i++) {
        //         print('## ' + result[i] + '): ' + allRules[result[i]].toString());
        //     }
        // }
        return result;
    };
    /**
     * @return {?}
     */
    Match.prototype.hashCode = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ ret = this._keysMatchedMask * 31 + this._matchPathCRC;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._matches)) {
            for (var /** @type {?} */ i = 0, /** @type {?} */ c = this._matches[0]; i < c; i++) {
                ret = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["crc32"])(ret, this._matches[i + 1]);
            }
        }
        return ret;
    };
    Object.defineProperty(Match.prototype, "keysMatchedMask", {
        get: /**
         * @return {?}
         */
        function () {
            return this._keysMatchedMask;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} o
     * @return {?}
     */
    Match.prototype.equalsTo = /**
     * @param {?} o
     * @return {?}
     */
    function (o) {
        return ((o instanceof Match) && this._keysMatchedMask === o._keysMatchedMask) &&
            this._matchPathCRC === o._matchPathCRC &&
            Match._arrayEq(this._matches, o._matches);
    };
    /**
     * @return {?}
     */
    Match.prototype.toString = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ buf = new _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["StringJoiner"]([]);
        buf.add('_matches');
        buf.add((Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._matches) ? this._matches.length : 0) + '');
        buf.add('_keysMatchedMask');
        buf.add(this._keysMatchedMask + '');
        buf.add('_keysMatchedMask');
        buf.add(this._matchPathCRC + '');
        buf.add('hashcode');
        buf.add(this.hashCode() + '');
        return buf.toString();
    };
    Match.EmptyMatchArray = [];
    Match._Debug_ElementProcessCount = 0;
    return Match;
}());
/**
 *  An Match which includes a UnionMatchResult part (which is used by Context to
 * represent the set of overridden key/values up the stack)
 */
var  /**
 *  An Match which includes a UnionMatchResult part (which is used by Context to
 * represent the set of overridden key/values up the stack)
 */
MatchWithUnion = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatchWithUnion, _super);
    function MatchWithUnion(_matches, _keysMatchedMask, _matchPathCRC, _overUnionMatch) {
        if (_matchPathCRC === void 0) { _matchPathCRC = 0; }
        var _this = _super.call(this, _matches, _keysMatchedMask, _matchPathCRC) || this;
        _this._matches = _matches;
        _this._keysMatchedMask = _keysMatchedMask;
        _this._matchPathCRC = _matchPathCRC;
        _this._overUnionMatch = _overUnionMatch;
        return _this;
    }
    /**
     * @param {?} o
     * @return {?}
     */
    MatchWithUnion.prototype.equalsTo = /**
     * @param {?} o
     * @return {?}
     */
    function (o) {
        return _super.prototype.equalsTo.call(this, o) && ((this._overUnionMatch === o._overUnionMatch) ||
            ((Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._overUnionMatch)) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(o._overUnionMatch) && this._overUnionMatch.equalsTo(o._overUnionMatch)));
    };
    return MatchWithUnion;
}(Match));
/**
 *  MatchResult represents the result of computing the set of matching rules
 *  based on the key/value on this instance, and the other key/value pairs
 * on its predecessor chain.  I.e. to find the matching rules for the context keys
 * {operation=edit; layout=Inspect; class=Foo}, first a MatchResult is created for
 * 'operation=edit' and passed as the 'prev' to the creation of another for 'layout=Inspect',
 * and so on.  In this way the MatchResults form a *(sharable) partial-match tree.*
 *
 * The ability to result previous partial match 'paths' is an important optimization:
 * the primary client of MatchResult (and of rule matching in general) is the Context, when each
 * assignment pushes a record on a stack that (roughly) extends the Match from the previous
 * assignment.  By caching MatchResult instances on the _Assignment records, matching is limited
 *  to the *incremental* matching on just the new assignment, not a full match on all keys in the
 *  context.
 *
 * Further, a MatchResult caches the *property map* resulting from the application of the rules
 *  that it matches.  By caching MatchResult objects (and caching the map from
 *  Rule vector (AKA Match) -> MatchResult -> PropertyMap), redudant rule application (and creation
 * of additional property maps) is avoided.
 */
var  /**
 *  MatchResult represents the result of computing the set of matching rules
 *  based on the key/value on this instance, and the other key/value pairs
 * on its predecessor chain.  I.e. to find the matching rules for the context keys
 * {operation=edit; layout=Inspect; class=Foo}, first a MatchResult is created for
 * 'operation=edit' and passed as the 'prev' to the creation of another for 'layout=Inspect',
 * and so on.  In this way the MatchResults form a *(sharable) partial-match tree.*
 *
 * The ability to result previous partial match 'paths' is an important optimization:
 * the primary client of MatchResult (and of rule matching in general) is the Context, when each
 * assignment pushes a record on a stack that (roughly) extends the Match from the previous
 * assignment.  By caching MatchResult instances on the _Assignment records, matching is limited
 *  to the *incremental* matching on just the new assignment, not a full match on all keys in the
 *  context.
 *
 * Further, a MatchResult caches the *property map* resulting from the application of the rules
 *  that it matches.  By caching MatchResult objects (and caching the map from
 *  Rule vector (AKA Match) -> MatchResult -> PropertyMap), redudant rule application (and creation
 * of additional property maps) is avoided.
 */
MatchResult = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatchResult, _super);
    // Meta meta, Meta.KeyData keyData, Object value, MatchResult prev)
    function MatchResult(_meta, _keyData, _value, _prevMatch) {
        var _this = _super.call(this, null, null, 0, (_prevMatch != null) ? _prevMatch._overUnionMatch : null) || this;
        _this._meta = _meta;
        _this._keyData = _keyData;
        _this._value = _value;
        _this._prevMatch = _prevMatch;
        _this._metaGeneration = 0;
        _this._initMatch();
        return _this;
    }
    /**
     * @param {?} over
     * @return {?}
     */
    MatchResult.prototype.setOverridesMatch = /**
     * @param {?} over
     * @return {?}
     */
    function (over) {
        this._overUnionMatch = over;
    };
    /**
     * @return {?}
     */
    MatchResult.prototype.matches = /**
     * @return {?}
     */
    function () {
        this._invalidateIfStale();
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._matches)) {
            this._initMatch();
        }
        return this._matches;
    };
    /**
     * @return {?}
     */
    MatchResult.prototype.filterResult = /**
     * @return {?}
     */
    function () {
        return this.filter(this._meta._rules, this._meta._ruleCount, this.matches(), this._keysMatchedMask, null);
    };
    /**
     * Fill in matchArray with MatchValues to use in Selector matching
     * @param matchArray
     */
    /**
     * Fill in matchArray with MatchValues to use in Selector matching
     * @param {?} matchArray
     * @return {?}
     */
    MatchResult.prototype.initMatchValues = /**
     * Fill in matchArray with MatchValues to use in Selector matching
     * @param {?} matchArray
     * @return {?}
     */
    function (matchArray) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._prevMatch)) {
            this._prevMatch.initMatchValues(matchArray);
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._overUnionMatch)) {
            this._overUnionMatch.initMatchValues(matchArray);
        }
        this._meta.matchArrayAssign(matchArray, this._keyData, this._keyData.matchValue(this._value));
    };
    /**
     * @return {?}
     */
    MatchResult.prototype.filteredMatches = /**
     * @return {?}
     */
    function () {
        // shouldn't this be cached?!?
        var /** @type {?} */ matches = this.matches();
        var /** @type {?} */ keysMatchedMask = this._keysMatchedMask | (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._overUnionMatch) ? this._overUnionMatch._keysMatchedMask : 0);
        var /** @type {?} */ overrideMatches;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._overUnionMatch) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])((overrideMatches = this._overUnionMatch.matches()))) {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(matches)) {
                matches = overrideMatches;
            }
            else {
                matches = Match.intersect(this._meta._rules, matches, overrideMatches, this._keysMatchedMask, this._overUnionMatch._keysMatchedMask);
            }
        }
        var /** @type {?} */ matchArray;
        if (Meta._UsePartialIndexing) {
            matchArray = this._meta.newMatchArray();
            this.initMatchValues(matchArray);
        }
        return this.filter(this._meta._rules, this._meta._ruleCount, matches, keysMatchedMask, matchArray);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    MatchResult.prototype.valueForKey = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return (this._keyData._key === key) ? this._value :
            (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._prevMatch) ? this._prevMatch.valueForKey(key) : null);
    };
    /**
     * @return {?}
     */
    MatchResult.prototype.immutableCopy = /**
     * @return {?}
     */
    function () {
        this._invalidateIfStale();
        return new MatchWithUnion(this.matches(), this._keysMatchedMask, this._matchPathCRC, this._overUnionMatch);
    };
    /**
     * @return {?}
     */
    MatchResult.prototype._invalidateIfStale = /**
     * @return {?}
     */
    function () {
        if (this._metaGeneration < this._meta.ruleSetGeneration) {
            this._initMatch();
        }
    };
    /**
     * @param {?} a
     * @param {?} b
     * @param {?} aMask
     * @param {?} bMask
     * @return {?}
     */
    MatchResult.prototype.join = /**
     * @param {?} a
     * @param {?} b
     * @param {?} aMask
     * @param {?} bMask
     * @return {?}
     */
    function (a, b, aMask, bMask) {
        return Match.intersect(this._meta._rules, a, b, aMask, bMask);
    };
    /**
     * @return {?}
     */
    MatchResult.prototype._initMatch = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ keyMask = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["shiftLeft"])(1, this._keyData._id);
        // get vec for this key/value -- if value is list, compute the union
        var /** @type {?} */ newArr;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(this._value)) {
            try {
                for (var _a = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(this._value), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var v = _b.value;
                    var /** @type {?} */ a = this._keyData.lookup(this._meta, v);
                    newArr = Match.union(a, newArr);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            newArr = this._keyData.lookup(this._meta, this._value);
        }
        var /** @type {?} */ prevMatches = (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._prevMatch)) ? null : this._prevMatch.matches();
        this._keysMatchedMask = (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._prevMatch)) ? keyMask : (keyMask | this._prevMatch._keysMatchedMask);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(prevMatches)) {
            this._matches = newArr;
            // Todo: not clear why this is needed, but without it we end up failing to filter
            // certain matches that should be filtered (resulting in bad matches)
            if (!Meta._UsePartialIndexing) {
                this._keysMatchedMask = keyMask;
            }
        }
        else {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(newArr)) {
                newArr = Match.EmptyMatchArray;
            }
            // Join
            this._matches = this.join(newArr, prevMatches, keyMask, this._prevMatch._keysMatchedMask);
        }
        // compute path CRC
        this._matchPathCRC = -1;
        for (var /** @type {?} */ mr = this; mr != null; mr = mr._prevMatch) {
            this._matchPathCRC = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["crc32"])(this._matchPathCRC, mr._keyData._key.length);
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(mr._value)) {
                var /** @type {?} */ value = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(mr._value) ? mr._value.join(',') : mr._value;
                this._matchPathCRC = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["crc32"])(this._matchPathCRC, Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["hashCode"])(value));
            }
        }
        if (this._matchPathCRC === 0) {
            this._matchPathCRC = 1;
        }
        this._metaGeneration = this._meta.ruleSetGeneration;
        this._properties = null;
        var e_1, _c;
    };
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    MatchResult.prototype._logMatchDiff = /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        var /** @type {?} */ iA = 1, /** @type {?} */ sizeA = a[0], /** @type {?} */ iB = 1, /** @type {?} */ sizeB = b[0];
        while (iA <= sizeA || iB <= sizeB) {
            var /** @type {?} */ c = (iA > sizeA ? 1 : (iB > sizeB ? -1 : (a[iA] - b[iB])));
            if (c === 0) {
                iA++;
                iB++;
            }
            else if (c < 0) {
                // If A not in B, but A doesn't filter on B's mask, then add it
                Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["print"])('  -- Only in A: ' + this._meta._rules[a[iA]]);
                iA++;
            }
            else {
                Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["print"])('  -- Only in B: ' + this._meta._rules[b[iB]]);
                iB++;
            }
        }
    };
    /**
     * @return {?}
     */
    MatchResult.prototype.properties = /**
     * @return {?}
     */
    function () {
        this._invalidateIfStale();
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._properties)) {
            this._properties = this._meta.propertiesForMatch(this);
        }
        return this._properties;
    };
    /**
     * @return {?}
     */
    MatchResult.prototype.debugString = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ sj = new _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["StringJoiner"](['Match Result path: \n']);
        this._appendPrevPath(sj);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._overUnionMatch)) {
            sj.add('\nOverrides path: ');
            this._overUnionMatch._appendPrevPath(sj);
        }
        return sj.toString();
    };
    /**
     * @param {?} buf
     * @return {?}
     */
    MatchResult.prototype._appendPrevPath = /**
     * @param {?} buf
     * @return {?}
     */
    function (buf) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._prevMatch)) {
            this._prevMatch._appendPrevPath(buf);
            buf.add(' -> ');
        }
        buf.add(this._keyData._key);
        buf.add('=');
        buf.add(this._value);
    };
    /**
     * @param {?} values
     * @param {?} meta
     * @return {?}
     */
    MatchResult.prototype._checkMatch = /**
     * @param {?} values
     * @param {?} meta
     * @return {?}
     */
    function (values, meta) {
        var /** @type {?} */ arr = this.filterResult();
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(arr)) {
            return;
        }
        // first entry is count
        var /** @type {?} */ count = arr[0];
        for (var /** @type {?} */ i = 0; i < count; i++) {
            var /** @type {?} */ r = this._meta._rules[arr[i + 1]];
            r._checkRule(values, meta);
        }
    };
    /**
     * @param {?} o
     * @return {?}
     */
    MatchResult.prototype.equalsTo = /**
     * @param {?} o
     * @return {?}
     */
    function (o) {
        return (o instanceof MatchResult) && _super.prototype.equalsTo.call(this, o) && (o._metaGeneration === this._metaGeneration) &&
            o._properties.size === this._properties.size;
    };
    return MatchResult;
}(MatchWithUnion));
var UnionMatchResult = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(UnionMatchResult, _super);
    function UnionMatchResult(meta, keyData, value, prevMatch) {
        return _super.call(this, meta, keyData, value, prevMatch) || this;
    }
    /**
     * @param {?} a
     * @param {?} b
     * @param {?} aMask
     * @param {?} bMask
     * @return {?}
     */
    UnionMatchResult.prototype.join = /**
     * @param {?} a
     * @param {?} b
     * @param {?} aMask
     * @param {?} bMask
     * @return {?}
     */
    function (a, b, aMask, bMask) {
        return Match.union(a, b);
    };
    return UnionMatchResult;
}(MatchResult));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * A map that masks on top of an (immutable) parent map
 * @template K, V
 */
var NestedMap = /** @class */ (function () {
    function NestedMap(_parent, _map) {
        this._parent = _parent;
        this._map = _map;
        this._overrideCount = 0;
        this._size = 0;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(_map)) {
            this._map = new Map();
        }
    }
    /**
     * @param {?} iteratorResult
     * @return {?}
     */
    NestedMap.toMapEntry = /**
     * @param {?} iteratorResult
     * @return {?}
     */
    function (iteratorResult) {
        var /** @type {?} */ value = iteratorResult.value;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(value) && NestedMap.isMapEntry(value)) {
            return value;
        }
        var /** @type {?} */ entry = {
            key: (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(iteratorResult.value)) ? iteratorResult.value[0] : iteratorResult.value,
            value: (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(iteratorResult.value)) ? iteratorResult.value[1] : iteratorResult.value,
            hasNext: !iteratorResult.done
        };
        return entry;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NestedMap.isMapEntry = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(value) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(value.hasNext);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NestedMap.isNMNullMarker = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(value) && value['nesnullmarker'];
    };
    /**
     * @return {?}
     */
    NestedMap.prototype.toMap = /**
     * @return {?}
     */
    function () {
        return this._parent;
    };
    /**
     * @param {?} newParent
     * @return {?}
     */
    NestedMap.prototype.reparentedMap = /**
     * @param {?} newParent
     * @return {?}
     */
    function (newParent) {
        var /** @type {?} */ newMap = new NestedMap(newParent, this._map);
        newMap._overrideCount = this._overrideCount;
        return newMap;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    NestedMap.prototype.get = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var /** @type {?} */ val = this._map.has(key) ? this._map.get(key) : this._parent.get(key);
        return NestedMap.isNMNullMarker(val) ? null : val;
    };
    /**
     * @return {?}
     */
    NestedMap.prototype.keys = /**
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["unimplemented"])();
    };
    /**
     * @return {?}
     */
    NestedMap.prototype.values = /**
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["unimplemented"])();
    };
    /**
     * @return {?}
     */
    NestedMap.prototype.clear = /**
     * @return {?}
     */
    function () {
        this._parent.clear();
        this._map.clear();
    };
    /**
     * @param {?} key
     * @param {?=} value
     * @return {?}
     */
    NestedMap.prototype.set = /**
     * @param {?} key
     * @param {?=} value
     * @return {?}
     */
    function (key, value) {
        var /** @type {?} */ orig = this._map.get(key);
        if ((NestedMap.isNMNullMarker(orig) || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(orig)) && this._parent.has(key)) {
            this._overrideCount += (NestedMap.isNMNullMarker(orig) ? -1 : 1);
        }
        this._map.set(key, value);
        return this;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    NestedMap.prototype.delete = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var /** @type {?} */ returnVal = false;
        var /** @type {?} */ orig = null;
        if (this._map.has(key)) {
            orig = this._map.delete(key);
            returnVal = true;
            // print('Removing: ' , orig);
            if (this._parent.has(key)) {
                this._map.set(key, NestedMap._NullMarker);
                // _overrideCount--;
                this._overrideCount++;
            }
        }
        else if (this._parent.has(key)) {
            // we're "removing" a value we don't have (but that our parent does)
            // we need to store a null override
            orig = this._parent.get(key);
            // print('Removing: ' , orig);
            this._map.set(key, NestedMap._NullMarker);
            this._overrideCount += 2;
        }
        return returnVal;
    };
    /**
     * @param {?} callbackfn
     * @param {?=} thisArg
     * @return {?}
     */
    NestedMap.prototype.forEach = /**
     * @param {?} callbackfn
     * @param {?=} thisArg
     * @return {?}
     */
    function (callbackfn, thisArg) {
        var /** @type {?} */ entries = this.entries();
        var /** @type {?} */ nextEntry;
        while ((nextEntry = NestedMap.toMapEntry(entries.next())) && nextEntry.hasNext) {
            callbackfn(nextEntry.value, nextEntry.key, this._parent);
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    NestedMap.prototype.has = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this._map.has(key) ? (!NestedMap.isNMNullMarker(this._map.get(key))) : this._parent.has(key);
    };
    /**
     * @return {?}
     */
    NestedMap.prototype[Symbol.iterator] = /**
     * @return {?}
     */
    function () {
        return new NestedEntryIterator(this);
    };
    /**
     * @return {?}
     */
    NestedMap.prototype.entries = /**
     * @return {?}
     */
    function () {
        return new NestedEntryIterator(this);
    };
    Object.defineProperty(NestedMap.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._parent.size + this._map.size - this._overrideCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NestedMap.prototype, "map", {
        get: /**
         * @return {?}
         */
        function () {
            return this._map;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NestedMap.prototype, "parent", {
        get: /**
         * @return {?}
         */
        function () {
            return this._parent;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NestedMap.prototype.toString = /**
     * @return {?}
     */
    function () {
        return 'NestedMap';
    };
    NestedMap._NullMarker = { nesnullmarker: true };
    return NestedMap;
}());
/**
 * @template K, V
 */
var /**
 * @template K, V
 */
NestedEntryIterator = /** @class */ (function () {
    function NestedEntryIterator(_nestedMap) {
        this._nestedMap = _nestedMap;
        this._parentIterator = _nestedMap.parent.entries();
        this._nestedIterator = _nestedMap.map.entries();
        this.advanceToNext();
    }
    /**
     * @return {?}
     */
    NestedEntryIterator.prototype.next = /**
     * @return {?}
     */
    function () {
        // assert(isPresent(this._nextEntry) , 'next() when no more elements"');
        this._currentEntry = this._nextEntry;
        this.advanceToNext();
        var /** @type {?} */ next = {
            value: this._currentEntry,
            done: !this._currentEntry.hasNext
        };
        return next;
    };
    /**
     * @return {?}
     */
    NestedEntryIterator.prototype[Symbol.iterator] = /**
     * @return {?}
     */
    function () {
        return this;
    };
    /**
     * @return {?}
     */
    NestedEntryIterator.prototype.advanceToNext = /**
     * @return {?}
     */
    function () {
        this._fromNested = false;
        // Note: we need to skip nulls (masked values)
        while (!this._fromNested && (this._currentNestedEntry = NestedMap.toMapEntry(this._nestedIterator.next())) && this._currentNestedEntry.hasNext) {
            this._nextEntry = this._currentNestedEntry;
            if (!NestedMap.isNMNullMarker(this._nextEntry.value)) {
                this._fromNested = true;
            }
        }
        if (!this._fromNested) {
            while ((this._currentParentEntry = NestedMap.toMapEntry(this._parentIterator.next())) && this._currentParentEntry.hasNext) {
                this._nextEntry = this._currentParentEntry;
                if (!this._nestedMap.map.has(this._nextEntry.key)) {
                    return;
                }
            }
            this._nextEntry = this._currentParentEntry;
        }
    };
    return NestedEntryIterator;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
var  /**
 * @abstract
 */
DynamicPropertyValue = /** @class */ (function () {
    function DynamicPropertyValue() {
    }
    /**
     * @param {?} context
     * @return {?}
     */
    DynamicPropertyValue.prototype.evaluate = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["unimplemented"])();
    };
    /**
     * @param {?} context
     * @return {?}
     */
    DynamicPropertyValue.prototype.bind = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["unimplemented"])();
    };
    return DynamicPropertyValue;
}());
/**
 * ;marker; interface for DynamicPropertyValues that depend only on their match context and
 * therefore can be computed and cached statically in the Context Activation tree
 */
var  /**
 * ;marker; interface for DynamicPropertyValues that depend only on their match context and
 * therefore can be computed and cached statically in the Context Activation tree
 */
StaticallyResolvable = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(StaticallyResolvable, _super);
    function StaticallyResolvable() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return StaticallyResolvable;
}(DynamicPropertyValue));
var StaticDynamicWrapper = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(StaticDynamicWrapper, _super);
    function StaticDynamicWrapper(_orig) {
        var _this = _super.call(this) || this;
        _this._orig = _orig;
        _this.propertyAwaking = true;
        return _this;
    }
    /**
     * @return {?}
     */
    StaticDynamicWrapper.prototype.getDynamicValue = /**
     * @return {?}
     */
    function () {
        return this._orig;
    };
    /**
     * @param {?} map
     * @return {?}
     */
    StaticDynamicWrapper.prototype.awakeForPropertyMap = /**
     * @param {?} map
     * @return {?}
     */
    function (map) {
        // copy ourselves so there's a fresh copy for each context in which is appears
        var /** @type {?} */ origaw = (isPropertyMapAwaking(this._orig)) ? /** @type {?} */ ((/** @type {?} */ (this._orig)).awakeForPropertyMap(map)) : this._orig;
        return new StaticDynamicWrapper(origaw);
    };
    /**
     * @param {?} context
     * @return {?}
     */
    StaticDynamicWrapper.prototype.evaluate = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        // we lazily static evaluate our value and cache the result
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._cached)) {
            this._cached = context.staticallyResolveValue(this._orig);
        }
        return this._cached;
    };
    /**
     * @return {?}
     */
    StaticDynamicWrapper.prototype.toString = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ sj = new _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["StringJoiner"](['StaticDynamicWrapper']);
        sj.add('(');
        sj.add(((Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._cached)) ? this._cached : this._orig));
        sj.add(((Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._cached)) ? ' unevaluated' : ''));
        sj.add(')');
        return sj.toString();
    };
    return StaticDynamicWrapper;
}(StaticallyResolvable));
var StaticallyResolvableWrapper = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(StaticallyResolvableWrapper, _super);
    function StaticallyResolvableWrapper(_orig) {
        var _this = _super.call(this) || this;
        _this._orig = _orig;
        return _this;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    StaticallyResolvableWrapper.prototype.evaluate = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        return this._orig.evaluate(context);
    };
    /**
     * @return {?}
     */
    StaticallyResolvableWrapper.prototype.toString = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ sj = new _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["StringJoiner"](['StaticallyResolvableWrapper']);
        sj.add('(');
        sj.add(this._orig.toString());
        sj.add(')');
        return sj.toString();
    };
    return StaticallyResolvableWrapper;
}(StaticallyResolvable));
var ContextFieldPath = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ContextFieldPath, _super);
    function ContextFieldPath(path) {
        var _this = _super.call(this) || this;
        _this.settable = true;
        _this.fieldPath = new _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["FieldPath"](path);
        return _this;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    ContextFieldPath.prototype.evaluate = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        return this.fieldPath.getFieldValue(context);
    };
    /**
     * @param {?} context
     * @param {?} value
     * @return {?}
     */
    ContextFieldPath.prototype.evaluateSet = /**
     * @param {?} context
     * @param {?} value
     * @return {?}
     */
    function (context, value) {
        this.fieldPath.setFieldValue(context, value);
    };
    return ContextFieldPath;
}(DynamicPropertyValue));
/**
 * @param {?} arg
 * @return {?}
 */
function isDynamicSettable(arg) {
    return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(arg.settable);
}
var Expr = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Expr, _super);
    function Expr(_expressionString) {
        var _this = _super.call(this) || this;
        _this._expressionString = _expressionString;
        _this._extendedObjects = new Map();
        _this.addTypeToContext('Meta', Meta);
        _this.addTypeToContext('FieldPath', _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["FieldPath"]);
        return _this;
    }
    /**
     * @param {?} name
     * @param {?} context
     * @return {?}
     */
    Expr.prototype.addTypeToContext = /**
     * @param {?} name
     * @param {?} context
     * @return {?}
     */
    function (name, context) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(context)) {
            this._extendedObjects.set(name, context);
        }
    };
    /**
     * @param {?} context
     * @return {?}
     */
    Expr.prototype.evaluate = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        var _this = this;
        var /** @type {?} */ index = 0;
        this._extendedObjects.forEach(function (v, k) {
            var /** @type {?} */ typeName = "DynObj" + index++;
            (/** @type {?} */ (context))[typeName] = v;
            if (_this._expressionString.indexOf(k + ".") !== -1) {
                _this._expressionString = _this._expressionString.replace(k + ".", typeName + ".");
            }
        });
        var /** @type {?} */ result = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["evalExpressionWithCntx"])(this._expressionString, '', context, context);
        index = 0;
        this._extendedObjects.forEach(function (v, k) {
            var /** @type {?} */ typeName = "DynObj" + index++;
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])((/** @type {?} */ (context))[typeName])) {
                delete (/** @type {?} */ (context))[typeName];
                // check if we can use undefined. Delete is pretty slow
            }
        });
        return result;
    };
    /**
     * @return {?}
     */
    Expr.prototype.toString = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ sj = new _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["StringJoiner"](['expr:']);
        sj.add('(');
        sj.add(this._expressionString);
        sj.add(')');
        return sj.toString();
    };
    return Expr;
}(DynamicPropertyValue));
var DeferredOperationChain = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(DeferredOperationChain, _super);
    function DeferredOperationChain(_merger, _orig, _override) {
        var _this = _super.call(this) || this;
        _this._merger = _merger;
        _this._orig = _orig;
        _this._override = _override;
        _this.propertyAwaking = true;
        return _this;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    DeferredOperationChain.prototype.evaluate = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        return this._merger.merge(context.resolveValue(this._override), context.resolveValue(this._orig), context.isDeclare());
    };
    /**
     * @param {?} map
     * @return {?}
     */
    DeferredOperationChain.prototype.awakeForPropertyMap = /**
     * @param {?} map
     * @return {?}
     */
    function (map) {
        var /** @type {?} */ orig = this._orig;
        var /** @type {?} */ over = this._override;
        if (isPropertyMapAwaking(orig)) {
            orig = (/** @type {?} */ (orig)).awakeForPropertyMap(map);
        }
        if (isPropertyMapAwaking(over)) {
            over = (/** @type {?} */ (over)).awakeForPropertyMap(map);
        }
        if (orig !== this._orig || over !== this._override) {
            return new DeferredOperationChain(this._merger, orig, over);
        }
        return this;
    };
    /**
     * @return {?}
     */
    DeferredOperationChain.prototype.toString = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ sj = new _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["StringJoiner"](['Chain']);
        sj.add('<');
        sj.add(this._merger.toString());
        sj.add('>');
        sj.add(': ');
        sj.add(this._override);
        sj.add(' => ');
        sj.add(this._orig);
        return sj.toString();
    };
    return DeferredOperationChain;
}(DynamicPropertyValue));
var ValueConverter = /** @class */ (function () {
    function ValueConverter() {
    }
    /**
     * @param {?} toType
     * @param {?} value
     * @return {?}
     */
    ValueConverter.value = /**
     * @param {?} toType
     * @param {?} value
     * @return {?}
     */
    function (toType, value) {
        if (toType === 'String') {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(value) || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isString"])(value)) {
                return value;
            }
            return value.toString();
        }
        else if (toType === 'Boolean') {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(value) || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBoolean"])(value)) {
                return value;
            }
            return _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["BooleanWrapper"].boleanValue(value);
        }
        else if (toType === 'Number') {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(value) || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isNumber"])(value)) {
                return value;
            }
            // ignore dec. points for now
            return parseInt(value.toString());
        }
        return value;
    };
    return ValueConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *
 * Context represents a stack of assignments (e.g. class=User, field=birthDay, operation=edit)
 *  The current set of assignments can be retrieved via values().
 *
 * The current values are run against the Meta rule set to compute the effective PropertyMap
 * (e.g. visible:true, editable:true, component:AWTextField).
 * Some rule evaluations result in *chaining* -- where additional assignments that are
 * 'implied' by the current assignments are applied, (resulting in a revised computation
 * of the current PropertyMap, and possible further chaining).
 * (e.g. field=birthDay may result in type=Date which may result in component:DatePicker)
 *
 * Assignments can be scoped and popped (push(), set(key, value); ...; pop()).
 *
 * The actual computation of rule matches is cached so once a 'path' down the context
 * tree has been exercized subsequent matching traversals (even by other threads/users)
 * is fast.
 *
 *
 * examples of property maps for different scope key
 *
 * <code>
 *     {
 * 'visible': true,
 * 'class_trait': 'fiveZones',
 * 'editable': true,
 * 'bindings': {
 * 'value': 'Default Title'
 * },
 * 'field_trait': 'required',
 * 'label': 'Title',
 * 'type': 'string',
 * 'required': true,
 * 'editing': true,
 * 'valid': '{{(value && value.length > 0) ? true : \'Answer required\'}}',
 * 'component': 'InputFieldComponent',
 * 'field': 'title',
 * 'layout_trait': 'Form',
 * 'trait': 'required',
 * 'rank': 20,
 * 'after': 'zLeft',
 * 'class': 'CheckRequest1'
 * }
 *
 * </code>
 *
 *
 *
 * <code>
 *     {
 * 'visible': true,
 * 'class_trait': 'fiveZones',
 * 'label': 'Check Request1',
 * 'zones': [
 * 'zLeft',
 * 'zRight',
 * 'zTop',
 * 'zBottom',
 * 'zDetail'
 * ],
 * 'editing': true,
 * 'layout': '*',
 * 'component': 'MetaFormComponent',
 * 'layout_trait': 'Form',
 * 'fiveZoneLayout': true,
 * 'trait': 'fiveZones',
 * 'layoutsByZone': {
 * },
 * 'class': 'CheckRequest1',
 * 'fieldsByZone': {
 * 'zLeft': [
 * 'title',
 * 'name'
 * ],
 * 'zNone': [
 * 'fullName'
 * ]
 * }
 * }
 *
 * </code>
 *
 *
 *
 */
var Context = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Context, _super);
    function Context(_meta, nested) {
        if (nested === void 0) { nested = false; }
        var _this = _super.call(this) || this;
        _this._meta = _meta;
        _this.nested = nested;
        _this._values = new Map();
        _this._entries = [];
        _this._frameStarts = [];
        _this._recPool = [];
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(Context.EmptyMap)) {
            Context.EmptyMap = new PropertyMap();
        }
        Context._Debug_SetsCount = 0;
        _this._accessor = new PropertyAccessor(_this);
        _this._currentActivation = Context.getActivationTree(_meta);
        _this._rootNode = _this._currentActivation;
        _this.isNested = nested;
        return _this;
    }
    /**
     * Implementation notes:
     *
     * Context maintains a stack (_entries) of _ContextRecs (one per assignment) as well as
     * as _frameStack recording the stack positions for each push()/pop().

     * Performance through aggressive global caching of all statically computatble data:
     * - The static (reusable/immutable) part of a ContextRec is factored into _StaticRec
     * - StaticRecs represent individual assignments (context key = value) and cache the
     *      resulting Meta.MatchResult (and associated PropertyMap)
     * - The sub-stack (of forward chained) records associated with each external set()
     *      (or chained *dynamic* value) is recorded in an Activation.
     * - Process-global tree of Activations
     *      - each activation keeps list of its ContextKey/Value-keyed decended Activations
     *
     * Property Contexts.
     *      The notion of a 'PropertyContext' makes the going tricky...
     *       A 'PropertyContextKey' is a key for an 'entity' that properties describe.
     *       (e.g. class, field, action, and layout are property context keys, but editing,
     *       operation, ... are not)
     *       E.g. On an assignment stack with module=Admin class=Foo, field=name, editable=false,
     *       we want the property 'label' to be the label for the *field*, not the class or module
     *       -- i.e. the *top-most* assignment of a PropertyContextKey determines which property
     *       context rules are active.
     *
     *  These rules are activated via a synthetic context key of like 'field_p' or 'class_p'.
     *  Logically, after each assigment we need to figure of which context key should be in
     *  affect an set it on the context, but then automatically pop it off upon the next
     *  assignment (and then recompute again).
     *
     *  Of course, actually pushing and popping context key assignment on every set()
     *  would be expensive so instead we cache the 'propertyActivation' associated with
     *  each activation, and use its values and properties rather than those on the
     *  activation.
     */
    /**
     * Implementation notes:
     *
     * Context maintains a stack (_entries) of _ContextRecs (one per assignment) as well as
     * as _frameStack recording the stack positions for each push()/pop().
     * Performance through aggressive global caching of all statically computatble data:
     * - The static (reusable/immutable) part of a ContextRec is factored into _StaticRec
     * - StaticRecs represent individual assignments (context key = value) and cache the
     *      resulting Meta.MatchResult (and associated PropertyMap)
     * - The sub-stack (of forward chained) records associated with each external set()
     *      (or chained *dynamic* value) is recorded in an Activation.
     * - Process-global tree of Activations
     *      - each activation keeps list of its ContextKey/Value-keyed decended Activations
     *
     * Property Contexts.
     *      The notion of a 'PropertyContext' makes the going tricky...
     *       A 'PropertyContextKey' is a key for an 'entity' that properties describe.
     *       (e.g. class, field, action, and layout are property context keys, but editing,
     *       operation, ... are not)
     *       E.g. On an assignment stack with module=Admin class=Foo, field=name, editable=false,
     *       we want the property 'label' to be the label for the *field*, not the class or module
     *       -- i.e. the *top-most* assignment of a PropertyContextKey determines which property
     *       context rules are active.
     *
     *  These rules are activated via a synthetic context key of like 'field_p' or 'class_p'.
     *  Logically, after each assigment we need to figure of which context key should be in
     *  affect an set it on the context, but then automatically pop it off upon the next
     *  assignment (and then recompute again).
     *
     *  Of course, actually pushing and popping context key assignment on every set()
     *  would be expensive so instead we cache the 'propertyActivation' associated with
     *  each activation, and use its values and properties rather than those on the
     *  activation.
     * @param {?} meta
     * @return {?}
     */
    Context.getActivationTree = /**
     * Implementation notes:
     *
     * Context maintains a stack (_entries) of _ContextRecs (one per assignment) as well as
     * as _frameStack recording the stack positions for each push()/pop().
     * Performance through aggressive global caching of all statically computatble data:
     * - The static (reusable/immutable) part of a ContextRec is factored into _StaticRec
     * - StaticRecs represent individual assignments (context key = value) and cache the
     *      resulting Meta.MatchResult (and associated PropertyMap)
     * - The sub-stack (of forward chained) records associated with each external set()
     *      (or chained *dynamic* value) is recorded in an Activation.
     * - Process-global tree of Activations
     *      - each activation keeps list of its ContextKey/Value-keyed decended Activations
     *
     * Property Contexts.
     *      The notion of a 'PropertyContext' makes the going tricky...
     *       A 'PropertyContextKey' is a key for an 'entity' that properties describe.
     *       (e.g. class, field, action, and layout are property context keys, but editing,
     *       operation, ... are not)
     *       E.g. On an assignment stack with module=Admin class=Foo, field=name, editable=false,
     *       we want the property 'label' to be the label for the *field*, not the class or module
     *       -- i.e. the *top-most* assignment of a PropertyContextKey determines which property
     *       context rules are active.
     *
     *  These rules are activated via a synthetic context key of like 'field_p' or 'class_p'.
     *  Logically, after each assigment we need to figure of which context key should be in
     *  affect an set it on the context, but then automatically pop it off upon the next
     *  assignment (and then recompute again).
     *
     *  Of course, actually pushing and popping context key assignment on every set()
     *  would be expensive so instead we cache the 'propertyActivation' associated with
     *  each activation, and use its values and properties rather than those on the
     *  activation.
     * @param {?} meta
     * @return {?}
     */
    function (meta) {
        // todo: check the syntax Actionvation contructor name.
        var /** @type {?} */ name = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["objectToName"])(Activation);
        var /** @type {?} */ root = meta.identityCache.getValue(name);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(root)) {
            root = new Activation();
            meta.identityCache.setValue(name, root);
        }
        return root;
    };
    /**
     * @return {?}
     */
    Context.prototype.push = /**
     * @return {?}
     */
    function () {
        this._frameStarts.push(this._entries.length);
    };
    Object.defineProperty(Context.prototype, "meta", {
        get: /**
         * @return {?}
         */
        function () {
            return this._meta;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Context.prototype.pop = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ size = this._frameStarts.length;
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(size > 0, 'Popping empty stack');
        var /** @type {?} */ pos = this._frameStarts.pop();
        var /** @type {?} */ entriesSize;
        while ((entriesSize = this._entries.length) > pos) {
            var /** @type {?} */ recIdx = entriesSize - 1;
            var /** @type {?} */ rec = this._entries.splice(recIdx, 1)[0];
            if (rec.srec.lastAssignmentIdx === -1) {
                this._values.delete(rec.srec.key);
            }
            else {
                this._undoOverride(rec, recIdx);
            }
            this._currentActivation = (recIdx > 0)
                ? this._entries[recIdx - 1].srec.activation
                : this._rootNode;
            this.assertContextConsistent();
            // check rec back into pool for reuse
            rec.reset();
            this._recPool.push(rec);
        }
        this._currentProperties = null;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    Context.prototype.set = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        var _this = this;
        this._set(key, value, false, false);
        // implement default toString for our object so we can retrieve objectTitle
        if (key === ObjectMeta.KeyObject) {
            var /** @type {?} */ toCheck = this._values.get(ObjectMeta.KeyObject);
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(toCheck['$toString'])) {
                toCheck['$toString'] = function () {
                    var /** @type {?} */ clazz = _this.values.get(ObjectMeta.KeyClass);
                    return UIMeta.beautifyClassName(clazz);
                };
            }
        }
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    Context.prototype.merge = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        this._set(key, value, true, false);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    Context.prototype.setScopeKey = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(this._meta.keyData(key).isPropertyScope, key + ' is not a valid context key');
        var /** @type {?} */ current = this._currentPropertyScopeKey();
        // Assert.that(current != null, 'Can't set %s as context key when no context key on stack',
        // key); TODO: if current key isChaining then we need to set again to get a non-chaining
        // assignment
        if (!(key === current)) {
            var /** @type {?} */ val = this.values.get(key);
            // Assert.that(val != null, 'Can't set %s as context key when it has no value already
            // on the context', key);
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(val)) {
                val = Meta.KeyAny;
            }
            this.set(key, val);
        }
    };
    Object.defineProperty(Context.prototype, "values", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ propVals;
            return (_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].isEmpty(this._entries) ||
                Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(propVals = (_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].last(this._entries)).propertyLocalValues(this))) ? this._values : propVals;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Context.prototype, "properties", {
        get: /**
         * @return {?}
         */
        function () {
            return this._accessor;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} key
     * @return {?}
     */
    Context.prototype.propertyForKey = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var /** @type {?} */ val = this.allProperties().get(key);
        return this.resolveValue(val);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    Context.prototype.listPropertyForKey = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var /** @type {?} */ val = this.propertyForKey(key);
        return (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(val)) ? [] : (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(val)) ? val : [val];
    };
    /**
     * @param {?} key
     * @param {?} defaultVal
     * @return {?}
     */
    Context.prototype.booleanPropertyForKey = /**
     * @param {?} key
     * @param {?} defaultVal
     * @return {?}
     */
    function (key, defaultVal) {
        var /** @type {?} */ val = this.propertyForKey(key);
        return (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(val)) ? defaultVal : _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["BooleanWrapper"].boleanValue(val);
    };
    /**
     * @return {?}
     */
    Context.prototype.allProperties = /**
     * @return {?}
     */
    function () {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._currentProperties)) {
            var /** @type {?} */ m = this.lastMatch();
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(m)) {
                this._currentProperties = m.properties();
            }
        }
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._currentProperties) ? this._currentProperties : Context.EmptyMap;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Context.prototype.resolveValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var /** @type {?} */ lastValue;
        while (value !== lastValue && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(value) && value instanceof DynamicPropertyValue) {
            lastValue = value;
            var /** @type {?} */ propValue = value;
            if (propValue instanceof Expr) {
                propValue.addTypeToContext('UIMeta', UIMeta);
            }
            value = propValue.evaluate(this);
        }
        return value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Context.prototype.staticallyResolveValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var /** @type {?} */ lastValue = null;
        while (value !== lastValue && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(value) && value instanceof StaticallyResolvable) {
            lastValue = value;
            value = value.evaluate(this);
        }
        return value;
    };
    /**
     * @param {?} contextVals
     * @param {?} propertyKey
     * @param {?} staticResolve
     * @return {?}
     */
    Context.prototype.pushAndResolveStatic = /**
     * @param {?} contextVals
     * @param {?} propertyKey
     * @param {?} staticResolve
     * @return {?}
     */
    function (contextVals, propertyKey, staticResolve) {
        var _this = this;
        var /** @type {?} */ scopeKey;
        this.push();
        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].iterable(contextVals).forEach(function (value, key) {
            if ('*' === value) {
                scopeKey = key;
            }
            else {
                _this.set(key, value);
            }
        });
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(scopeKey)) {
            this.setScopeKey(scopeKey);
        }
        var /** @type {?} */ val = this.allProperties().get(propertyKey);
        val = staticResolve ? this.staticallyResolveValue(val) : this.resolveValue(val);
        this.pop();
        return val;
    };
    /**
     * @param {?} contextVals
     * @param {?} propertyKey
     * @return {?}
     */
    Context.prototype.pushAndResolve = /**
     * @param {?} contextVals
     * @param {?} propertyKey
     * @return {?}
     */
    function (contextVals, propertyKey) {
        return this.pushAndResolveStatic(contextVals, propertyKey, false);
    };
    // a (usable) snapshot of the current state of the context
    /**
     * @return {?}
     */
    Context.prototype.snapshot = /**
     * @return {?}
     */
    function () {
        return new Snapshot(this);
    };
    /**
     * Represent current active assignment list meaning it will not include any entries which
     * were overwritten by some late entry having the same key.
     *
     * It does not include entries that were pushed to stack from any Property -> Selector
     * propagation. This creates shell copy and ignoring all last Matches which could be from
     * some previous assignments that are now replaced with some new ones
     *
     */
    /**
     * Represent current active assignment list meaning it will not include any entries which
     * were overwritten by some late entry having the same key.
     *
     * It does not include entries that were pushed to stack from any Property -> Selector
     * propagation. This creates shell copy and ignoring all last Matches which could be from
     * some previous assignments that are now replaced with some new ones
     *
     * @return {?}
     */
    Context.prototype.activeAssignments = /**
     * Represent current active assignment list meaning it will not include any entries which
     * were overwritten by some late entry having the same key.
     *
     * It does not include entries that were pushed to stack from any Property -> Selector
     * propagation. This creates shell copy and ignoring all last Matches which could be from
     * some previous assignments that are now replaced with some new ones
     *
     * @return {?}
     */
    function () {
        var /** @type {?} */ list = new Array();
        for (var /** @type {?} */ i = 0, /** @type {?} */ c = this._entries.length; i < c; i++) {
            var /** @type {?} */ rec = this._entries[i];
            if (rec.maskedByIdx === 0 && !rec.srec.fromChaining) {
                var /** @type {?} */ a = new AssignmentSnapshot();
                a.key = rec.srec.key;
                a.value = rec.val;
                a.salience = rec.srec.salience;
                list.push(a);
            }
        }
        return list;
    };
    /**
     *
     * Similar as <code>activeAssignments</code> but do include also those that were replaced later
     * on with assignments having the same key.
     *
     * This is needed for cases where we need to have deep copy of current state along with
     * all properties.
     *
     */
    /**
     *
     * Similar as <code>activeAssignments</code> but do include also those that were replaced later
     * on with assignments having the same key.
     *
     * This is needed for cases where we need to have deep copy of current state along with
     * all properties.
     *
     * @return {?}
     */
    Context.prototype.allAssignments = /**
     *
     * Similar as <code>activeAssignments</code> but do include also those that were replaced later
     * on with assignments having the same key.
     *
     * This is needed for cases where we need to have deep copy of current state along with
     * all properties.
     *
     * @return {?}
     */
    function () {
        var /** @type {?} */ list = new Array();
        for (var /** @type {?} */ i = 0, /** @type {?} */ c = this._entries.length; i < c; i++) {
            var /** @type {?} */ rec = this._entries[i];
            if (!rec.srec.fromChaining) {
                var /** @type {?} */ a = new AssignmentSnapshot();
                a.key = rec.srec.key;
                a.value = rec.val;
                a.salience = rec.srec.salience;
                list.push(a);
            }
        }
        return list;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @param {?} merge
     * @param {?} chaining
     * @return {?}
     */
    Context.prototype._set = /**
     * @param {?} key
     * @param {?} value
     * @param {?} merge
     * @param {?} chaining
     * @return {?}
     */
    function (key, value, merge, chaining) {
        var /** @type {?} */ sval = this._meta.transformValue(key, value);
        var /** @type {?} */ didSet = false;
        var /** @type {?} */ registry = (/** @type {?} */ (this.meta)).componentRegistry;
        if (key === ObjectMeta.KeyObject && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(registry)) {
            registry.registerType(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["className"])(value), value.constructor);
        }
        var /** @type {?} */ activation = this._currentActivation.getChildActivation(key, sval, chaining);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(activation)) {
            didSet = this._createNewFrameForSet(key, sval, value, merge, chaining);
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(activation)) {
            didSet = this._applyActivation(activation, value);
        }
        if (didSet) {
            this.awakeCurrentActivation();
        }
    };
    /**
     * @return {?}
     */
    Context.prototype.newContextRec = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ count = this._recPool.length;
        return (count > 0) ? this._recPool.splice(count - 1, 1)[0] : new Assignment();
    };
    /**
     * Cached case: apply a previously computed Activation
     */
    /**
     * Cached case: apply a previously computed Activation
     * @param {?} activation
     * @param {?} firstVal
     * @return {?}
     */
    Context.prototype._applyActivation = /**
     * Cached case: apply a previously computed Activation
     * @param {?} activation
     * @param {?} firstVal
     * @return {?}
     */
    function (activation, firstVal) {
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(activation._parent === this._currentActivation, 'Attempt to apply activation on mismatched parent');
        if (this._entries.length !== activation._origEntryCount) {
            Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(false, 'Mismatched context stack size (%s) from when activation was popped ' +
                this._entries.length + ' ' + activation._origEntryCount);
        }
        var /** @type {?} */ count = activation._recs.length;
        if (count === 0) {
            return false;
        }
        for (var /** @type {?} */ i = 0; i < count; i++) {
            var /** @type {?} */ srec = activation._recs[i];
            var /** @type {?} */ rec = this.newContextRec();
            rec.srec = srec;
            // Apply masking for any property that we mask out
            if (srec.lastAssignmentIdx !== -1) {
                this._prepareForOverride(this._entries.length, srec.lastAssignmentIdx);
            }
            rec.val = (i === 0 && !this.meta.isNullMarker(firstVal)) ? firstVal : srec.val;
            this._values.set(srec.key, rec.val);
            this._entries.push(rec);
        }
        this._currentActivation = activation;
        this._currentProperties = null;
        return true;
    };
    /**
     * @return {?}
     */
    Context.prototype.awakeCurrentActivation = /**
     * @return {?}
     */
    function () {
        // See if this activation requires further chaining
        var /** @type {?} */ currentActivation = this._currentActivation;
        var /** @type {?} */ deferredAssignments = currentActivation.deferredAssignments;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(deferredAssignments)) {
            this.applyDeferredAssignments(deferredAssignments);
        }
    };
    /**
     * @param {?} deferredAssignments
     * @return {?}
     */
    Context.prototype.applyDeferredAssignments = /**
     * @param {?} deferredAssignments
     * @return {?}
     */
    function (deferredAssignments) {
        try {
            for (var deferredAssignments_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(deferredAssignments), deferredAssignments_1_1 = deferredAssignments_1.next(); !deferredAssignments_1_1.done; deferredAssignments_1_1 = deferredAssignments_1.next()) {
                var da = deferredAssignments_1_1.value;
                // verify that deferred value still applies
                var /** @type {?} */ currentPropValue = this.staticallyResolveValue(this.allProperties().get(da.key));
                if (da.value === currentPropValue) {
                    var /** @type {?} */ resolvedValue = this.resolveValue(da.value);
                    this._set(da.key, resolvedValue, false, true);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (deferredAssignments_1_1 && !deferredAssignments_1_1.done && (_a = deferredAssignments_1.return)) _a.call(deferredAssignments_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var e_1, _a;
    };
    /**
     * @return {?}
     */
    Context.prototype._inDeclare = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ match = this.lastMatchWithoutContextProps();
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(match) && (match._keysMatchedMask & this._meta.declareKeyMask) !== 0;
    };
    /**
     Non-cached access: create a new activation
     */
    /**
     * Non-cached access: create a new activation
     * @param {?} key
     * @param {?} svalue
     * @param {?} value
     * @param {?} merge
     * @param {?} chaining
     * @return {?}
     */
    Context.prototype._createNewFrameForSet = /**
     * Non-cached access: create a new activation
     * @param {?} key
     * @param {?} svalue
     * @param {?} value
     * @param {?} merge
     * @param {?} chaining
     * @return {?}
     */
    function (key, svalue, value, merge, chaining) {
        var /** @type {?} */ lastActivation = this._currentActivation;
        var /** @type {?} */ newActivation = new Activation(lastActivation);
        newActivation._origEntryCount = this._entries.length;
        this._currentActivation = newActivation;
        // set this value
        var /** @type {?} */ didSet = this._set2(key, svalue, value, merge, chaining);
        // mirror properties
        if (didSet) {
            while (this._checkApplyProperties()) {
                /* repeat */
            }
        }
        // Remember for the future
        if (Context._CacheActivations) {
            lastActivation.cacheChildActivation(key, svalue, newActivation, chaining);
        }
        this._currentActivation = (didSet) ? newActivation : lastActivation;
        return this._currentActivation !== lastActivation;
    };
    /**
     * Called lazily to compute the property activation for this activation
     * Compute the static part of the property activation
     * we accumulate the property settings on a side activation off the main stack
     * and apply it virtually if our parent is not covered
     *  (that way we don't have to apply and unapply all the time)
     */
    /**
     * Called lazily to compute the property activation for this activation
     * Compute the static part of the property activation
     * we accumulate the property settings on a side activation off the main stack
     * and apply it virtually if our parent is not covered
     *  (that way we don't have to apply and unapply all the time)
     * @param {?} parentActivation
     * @return {?}
     */
    Context.prototype._createNewPropertyContextActivation = /**
     * Called lazily to compute the property activation for this activation
     * Compute the static part of the property activation
     * we accumulate the property settings on a side activation off the main stack
     * and apply it virtually if our parent is not covered
     *  (that way we don't have to apply and unapply all the time)
     * @param {?} parentActivation
     * @return {?}
     */
    function (parentActivation) {
        this.push();
        var /** @type {?} */ propActivation = new Activation(parentActivation);
        propActivation._origEntryCount = this._entries.length;
        this._currentActivation = propActivation;
        var /** @type {?} */ origValues = this._values;
        var /** @type {?} */ nestedMap = new NestedMap(origValues);
        this._values = nestedMap;
        this.applyPropertyContextAndChain();
        if (propActivation._recs.length > 0 || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(propActivation.deferredAssignments)) {
            propActivation._nestedValues = nestedMap;
            this._values = Context.EmptyRemoveMap; // hack -- empty map so that undo is noop --
            // ((NestedMap)_values).dup();
        }
        else {
            propActivation = null;
        }
        this.pop();
        this._values = origValues;
        this._currentActivation = parentActivation;
        return propActivation;
    };
    /**
     * @param {?} propActivation
     * @param {?} rec
     * @return {?}
     */
    Context.prototype._applyPropertyActivation = /**
     * @param {?} propActivation
     * @param {?} rec
     * @return {?}
     */
    function (propActivation, rec) {
        var /** @type {?} */ propValues = this._values;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(propActivation._nestedValues)) {
            propValues = propActivation._nestedValues.reparentedMap(propValues);
        }
        // set up propLocal results
        // Now, see if we need to compute a dynamic property activation as well
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(propActivation.deferredAssignments)) {
            this.push();
            // nest a dynamic nested map on our static nested map (which is on our last dynamic
            // nested map...)
            var /** @type {?} */ origValues = this._values;
            this._values = new NestedMap(propValues);
            this._applyActivation(propActivation, Meta.NullMarker);
            this.applyDeferredAssignments(propActivation.deferredAssignments);
            rec._propertyLocalValues = this._values;
            rec._propertyLocalSrec = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].last(this._entries).srec;
            this._values = Context.EmptyRemoveMap; // hack -- empty map so that undo is noop --
            // ((NestedMap)_values).dup();
            this.pop();
            this._values = origValues;
        }
        else {
            // can use static versions
            rec._propertyLocalValues = propValues;
            rec._propertyLocalSrec = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].last(propActivation._recs);
        }
    };
    // todo: any equals old va === new val
    /**
     * @param {?} oldVal
     * @param {?} newVal
     * @return {?}
     */
    Context.prototype._isNewValue = /**
     * @param {?} oldVal
     * @param {?} newVal
     * @return {?}
     */
    function (oldVal, newVal) {
        return (oldVal !== newVal && (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(oldVal) ||
            (!oldVal === newVal && (!Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(oldVal)) || !(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].contains(oldVal, newVal)))));
    };
    /**
     * @return {?}
     */
    Context.prototype.isDeclare = /**
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.propertyForKey(Meta.KeyDeclare));
    };
    /**
     * @return {?}
     */
    Context.prototype.assertContextConsistent = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!Context._ExpensiveContextConsistencyChecksEnabled) {
            return;
        }
        // Verify that each value in context has matching (enabled) context record
        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].iterable(this._values).forEach(function (value, key) {
            var /** @type {?} */ lastAssignmentIdx = _this.findLastAssignmentOfKey(key);
            Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(lastAssignmentIdx >= 0, 'Value in context but no assignment record found ' +
                key + ' = ' + value);
            var /** @type {?} */ contextVal = _this._entries[lastAssignmentIdx].val;
            Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(value === contextVal || (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(value) && value === contextVal), 'Value in context  doesnt match value on stack ' + value + ' / ' + contextVal);
        });
        // check entries for proper relationship with any previous records that they override
        for (var /** @type {?} */ i = this._entries.length - 1; i >= 0; i--) {
            var /** @type {?} */ r = this._entries[i];
            var /** @type {?} */ foundFirst = false;
            for (var /** @type {?} */ j = i - 1; j >= 0; j--) {
                var /** @type {?} */ pred = this._entries[j];
                if (pred.srec.key === r.srec.key) {
                    // Predecessors must be masked
                    Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])((!foundFirst && pred.maskedByIdx === i) ||
                        ((foundFirst || pred.srec.fromChaining) && pred.maskedByIdx > 0), 'Predecessor A does not have matching maskedByIdx B  for override C:' +
                        pred.srec.key + ' = ' + pred.val + ', ' + pred.maskedByIdx + ', ' +
                        i + ' = ' + r.val);
                    Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(((!foundFirst && r.srec.lastAssignmentIdx === j) || foundFirst ||
                        pred.srec.fromChaining), 'Override A1=A2 does not have proper lastAssignmentIdx B1!=B2 ' +
                        'for predecessor C' +
                        pred.srec.key + ' = ' + pred.val + ', ' + r.srec.lastAssignmentIdx + ' = ' +
                        j + ', ' + pred.val);
                    foundFirst = true;
                }
            }
        }
    };
    /**
     * @param {?} key
     * @param {?} svalue
     * @param {?} value
     * @param {?} merge
     * @param {?} isChaining
     * @return {?}
     */
    Context.prototype._set2 = /**
     * @param {?} key
     * @param {?} svalue
     * @param {?} value
     * @param {?} merge
     * @param {?} isChaining
     * @return {?}
     */
    function (key, svalue, value, merge, isChaining) {
        Context._Debug_SetsCount++;
        // print('Setting key/vale onto stack: ' + key + '=' + value);
        var /** @type {?} */ hasOldValue = this._values.has(key) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._values.get(key));
        var /** @type {?} */ oldVal = hasOldValue ? this._values.get(key) : null;
        var /** @type {?} */ isNewValue = !hasOldValue || this._isNewValue(oldVal, value);
        var /** @type {?} */ matchingPropKeyAssignment = !isNewValue && !isChaining &&
            ((this._meta.keyData(key).isPropertyScope) &&
                key !== this._currentPropertyScopeKey());
        if (isNewValue || matchingPropKeyAssignment) {
            var /** @type {?} */ lastMatch = void 0;
            var /** @type {?} */ newMatch = void 0;
            var /** @type {?} */ salience = this._frameStarts.length;
            var /** @type {?} */ lastAssignmentIdx = -1;
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(oldVal)) {
                lastMatch = this.lastMatchWithoutContextProps();
            }
            else {
                // We recompute that match up to this point by recomputing forward
                // from the point of the last assignment to this key (skipping it), then
                // match against the array of our value and the old
                var /** @type {?} */ recIdx = this._entries.length;
                lastAssignmentIdx = this.findLastAssignmentOfKey(key);
                Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(lastAssignmentIdx >= 0, 'Value in context but no assignment record found ' + key + ' = ' + oldVal);
                if (matchingPropKeyAssignment) {
                    // cheap version of masking for a matching set:
                    this._entries[lastAssignmentIdx].maskedByIdx = recIdx;
                    lastMatch = this.lastMatchWithoutContextProps();
                }
                else {
                    // be able to override a non-chaining assignment.  Our problem is, though, if
                    // the developer wanted to force a re-assignment in the new frame, we'd filter
                    // it out as a duplicate assignment above.  Now, we could allow that assignment
                    // through, but it would then break inletiants when searching back to mask a
                    // key (we wouldn't realize that we need to go further back to find the
                    // original one).
                    var /** @type {?} */ oldRec = this._entries[lastAssignmentIdx];
                    if (oldRec.srec.salience === salience) {
                        var /** @type {?} */ prev = this.findLastAssignmentOfKeyWithValue(key, value);
                        if (prev !== -1 && this._entries[prev].srec.salience === salience) {
                            return false;
                        }
                    }
                    if (isChaining &&
                        (oldRec.srec.salience > salience || !oldRec.srec.fromChaining)) {
                        // print('Set of key skipped (salience %s <= %s)' + key + ', ' + oldVal +
                        // ', ' + value + ', ' + salience + ', ' + oldRec.srec.salience);
                        return false;
                    }
                    var /** @type {?} */ firstAssignmentIdx = this._prepareForOverride(recIdx, lastAssignmentIdx);
                    newMatch = this._rematchForOverride(key, svalue, recIdx, firstAssignmentIdx);
                    if (merge) {
                        value = Meta.PropertyMerger_List.merge(oldVal, value, this.isDeclare());
                    }
                }
            }
            Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(this._entries.length <= Context.MaxContextStackSize, 'MetaUI context stack exceeded max size -- likely infinite chaining: ' +
                this._entries.length);
            var /** @type {?} */ srec = new StaticRec();
            srec.key = key;
            // todo: conversion
            srec.val = svalue;
            srec.lastAssignmentIdx = lastAssignmentIdx;
            srec.salience = salience;
            srec.fromChaining = isChaining;
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(newMatch)) {
                newMatch = (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(value)) ? this._meta.match(key, svalue, lastMatch) : lastMatch;
            }
            srec.match = newMatch;
            srec.activation = this._currentActivation;
            this._currentActivation._recs.push(srec);
            var /** @type {?} */ rec = this.newContextRec();
            rec.srec = srec;
            rec.val = value;
            this._entries.push(rec);
            this._currentProperties = null;
            this._values.set(key, value);
            // console.log( this.debugName + ' => ' +
            //     'Push(' + key + ', ' + svalue + '): ' + 'Matches: ' + newMatch.matches().length
            //     + ', PropMap: ' + srec.properties().size);
            if (Context._DebugRuleMatches) {
                this._checkMatch(srec.match, key, value);
            }
            this.assertContextConsistent();
            return true;
        }
        else {
            // print('Context skipped assignment of matching property value %s = %s (isChaining ==
            // %s, isPropKey == %s)', key, value, isChaining,
            // (this._meta.keyData(key).isPropertyScope));
            if (!isChaining && this.meta.keyData(key).isPropertyScope) ;
        }
        return false;
    };
    Object.defineProperty(Context.prototype, "frameStarts", {
        get: /**
         * @return {?}
         */
        function () {
            return this._frameStarts;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} rec
     * @return {?}
     */
    Context.prototype._undoRecValue = /**
     * @param {?} rec
     * @return {?}
     */
    function (rec) {
        if (rec.srec.lastAssignmentIdx === -1 ||
            this._entries[rec.srec.lastAssignmentIdx].maskedByIdx > 0) {
            this._values.delete(rec.srec.key);
        }
        else {
            this._values.set(rec.srec.key, this._entries[rec.srec.lastAssignmentIdx].val);
        }
    };
    // Undoes and masks assignments invalidated by override of given record
    // Returns stack index for first assignment (i.e. where match recomputation must start)
    /**
     * @param {?} overrideIndex
     * @param {?} lastAssignmentIdx
     * @return {?}
     */
    Context.prototype._prepareForOverride = /**
     * @param {?} overrideIndex
     * @param {?} lastAssignmentIdx
     * @return {?}
     */
    function (overrideIndex, lastAssignmentIdx) {
        // if we're overriding a prop context override of a matching value, back up further
        var /** @type {?} */ lastLastIdx = 0;
        while (((lastLastIdx = this._entries[lastAssignmentIdx].srec.lastAssignmentIdx) !== -1) &&
            (this._entries[lastAssignmentIdx].maskedByIdx <= 0)) {
            // mark it! (we'll pick it up below...)
            this._entries[lastAssignmentIdx].maskedByIdx = -1;
            lastAssignmentIdx = lastLastIdx;
        }
        // undo all conflicting or dervied assignments (and mark them)
        for (var /** @type {?} */ i = this._entries.length - 1; i >= lastAssignmentIdx; i--) {
            var /** @type {?} */ r = this._entries[i];
            // we need to undo (and mask) any record that conflict or are derived
            // NOTE: We are skipping the remove all chained records, because this can result in
            // undoing derived state totally unrelated to this key.  Ideally we'd figure out what
            // depended on what...
            if (r.maskedByIdx <= 0 && (i === lastAssignmentIdx || r.maskedByIdx === -1)) {
                // || r.srec.fromChaining
                // mark and undo it
                r.maskedByIdx = overrideIndex;
                this._undoRecValue(r);
            }
        }
        return lastAssignmentIdx;
    };
    /**
     * @param {?} key
     * @param {?} svalue
     * @param {?} overrideIndex
     * @param {?} firstAssignmentIdx
     * @return {?}
     */
    Context.prototype._rematchForOverride = /**
     * @param {?} key
     * @param {?} svalue
     * @param {?} overrideIndex
     * @param {?} firstAssignmentIdx
     * @return {?}
     */
    function (key, svalue, overrideIndex, firstAssignmentIdx) {
        // start from the top down looking for that last unmasked record
        var /** @type {?} */ lastMatch;
        var /** @type {?} */ i = 0;
        for (; i < firstAssignmentIdx; i++) {
            var /** @type {?} */ rec = this._entries[i];
            if (rec.maskedByIdx !== 0) {
                break;
            }
            lastMatch = rec.srec.match;
        }
        var /** @type {?} */ overridesMatch;
        // Rematch skipping over the last assignment of this property
        // and all assignments from chainging
        for (var /** @type {?} */ end = this._entries.length; i < end; i++) {
            var /** @type {?} */ r = this._entries[i];
            // rematch on any unmasked records
            if (r.maskedByIdx === 0) {
                lastMatch = this._meta.match(r.srec.key, r.srec.val, lastMatch);
            }
            else {
                // accumulate masked ('_o') match
                overridesMatch = this._meta.unionOverrideMatch(r.srec.key, r.srec.val, overridesMatch);
            }
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(svalue) || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(lastMatch)) {
            lastMatch = this._meta.match(key, svalue, lastMatch);
        }
        lastMatch.setOverridesMatch(overridesMatch);
        return lastMatch;
    };
    /**
     * @param {?} rec
     * @param {?} recIdx
     * @return {?}
     */
    Context.prototype._undoOverride = /**
     * @param {?} rec
     * @param {?} recIdx
     * @return {?}
     */
    function (rec, recIdx) {
        var /** @type {?} */ lastAssignmentIdx = rec.srec.lastAssignmentIdx;
        var /** @type {?} */ lastLastIdx;
        // bastick up further if necessary
        while (((lastLastIdx = this._entries[lastAssignmentIdx].srec.lastAssignmentIdx) !== -1) &&
            (this._entries[lastLastIdx].maskedByIdx === recIdx)) {
            lastAssignmentIdx = lastLastIdx;
        }
        for (var /** @type {?} */ i = lastAssignmentIdx, /** @type {?} */ c = this._entries.length; i < c; i++) {
            var /** @type {?} */ r = this._entries[i];
            if (r.maskedByIdx === recIdx) {
                this._values.set(r.srec.key, r.val);
                r.maskedByIdx = 0;
            }
        }
    };
    /**
     * @param {?} match
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    Context.prototype._checkMatch = /**
     * @param {?} match
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (match, key, value) {
        match._checkMatch(this._values, this._meta);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    Context.prototype.findLastAssignmentOfKey = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        for (var /** @type {?} */ i = this._entries.length - 1; i >= 0; i--) {
            var /** @type {?} */ rec = this._entries[i];
            if (rec.srec.key === key && rec.maskedByIdx === 0) {
                return i;
            }
        }
        return -1;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    Context.prototype.findLastAssignmentOfKeyWithValue = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        for (var /** @type {?} */ i = this._entries.length - 1; i >= 0; i--) {
            var /** @type {?} */ rec = this._entries[i];
            if (rec.srec.key === key && !this._isNewValue(rec.val, value)) {
                return i;
            }
        }
        return -1;
    };
    /**
     * Check if we have value mirroring (property to context) to do Dynamic property mirroring will
     * be added to the currentActivation deferredAssignment list
     *
     */
    /**
     * Check if we have value mirroring (property to context) to do Dynamic property mirroring will
     * be added to the currentActivation deferredAssignment list
     *
     * @return {?}
     */
    Context.prototype._checkApplyProperties = /**
     * Check if we have value mirroring (property to context) to do Dynamic property mirroring will
     * be added to the currentActivation deferredAssignment list
     *
     * @return {?}
     */
    function () {
        var /** @type {?} */ didSet = false;
        var /** @type {?} */ numEntries = 0;
        var /** @type {?} */ lastSize = 0;
        var /** @type {?} */ declareKey = this._inDeclare() ? this._values.get(Meta.KeyDeclare) : null;
        while ((numEntries = this._entries.length) > lastSize) {
            lastSize = numEntries;
            var /** @type {?} */ rec = this._entries[numEntries - 1];
            var /** @type {?} */ properties = rec.srec.properties();
            var /** @type {?} */ contextKeys = properties.contextKeysUpdated;
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(contextKeys)) {
                for (var /** @type {?} */ i = 0, /** @type {?} */ c = contextKeys.length; i < c; i++) {
                    var /** @type {?} */ propMgr = contextKeys[i];
                    var /** @type {?} */ key = propMgr._name;
                    if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(declareKey) && key === declareKey) {
                        continue;
                    }
                    // ToDo: applying resolved value -- need to defer resolution on true dynamic
                    // values Suppress chained assignment if: 1) Our parent will assign this
                    // property (has a deferred activation for it), or 2) There's already a
                    // matching assignment with higher salience
                    var /** @type {?} */ newVal = this.staticallyResolveValue(properties.get(key));
                    var /** @type {?} */ prevProps = void 0;
                    var /** @type {?} */ suppress = (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(prevProps) && prevProps.has(key)
                        && !this._isNewValue(this.staticallyResolveValue(prevProps.get(key)), newVal)) ||
                        (this._currentActivation._parent.hasDeferredAssignmentForKey(key));
                    if (!suppress) {
                        var /** @type {?} */ mirrorKey = propMgr._keyDataToSet._key;
                        if (newVal instanceof DynamicPropertyValue) {
                            // print('(deferred) chaining key: ' , propMgr._keyDataToSet._key);
                            this._currentActivation.addDeferredAssignment(mirrorKey, newVal);
                        }
                        else {
                            // compare this value to the value from the end of the last frame
                            // print('chaining key: ' , propMgr._keyDataToSet._key);
                            if (this._set2(mirrorKey, newVal, newVal, false, true)) {
                                didSet = true;
                            }
                        }
                    }
                }
            }
        }
        return didSet;
    };
    /**
     * @return {?}
     */
    Context.prototype.applyPropertyContextAndChain = /**
     * @return {?}
     */
    function () {
        if (this._checkPropertyContext()) {
            while (this._checkApplyProperties()) {
                /* repeat */
            }
        }
    };
    /**
     * @return {?}
     */
    Context.prototype._currentPropertyScopeKey = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ foundKey;
        var /** @type {?} */ foundActivation;
        for (var /** @type {?} */ i = this._entries.length - 1; i >= 0; i--) {
            var /** @type {?} */ rec = this._entries[i];
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(foundActivation) && rec.srec.activation !== foundActivation) {
                break;
            }
            if (this._meta.keyData(rec.srec.key).isPropertyScope) {
                if (!rec.srec.fromChaining) {
                    return rec.srec.key;
                }
                // for chaining assignments, we keep looking until we exhaust the first
                // non-chaining activation Todo: broken -- disabling set of context key from
                // chaining if (foundKey === null) foundKey = scopeKey;
            }
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(foundKey) && !rec.srec.fromChaining) {
                foundActivation = rec.srec.activation;
            }
        }
        return foundKey;
    };
    // Apply a 'property context' property (e.g. field_p for field) to the context if necessary
    /**
     * @return {?}
     */
    Context.prototype._checkPropertyContext = /**
     * @return {?}
     */
    function () {
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(this._values instanceof NestedMap, 'Property assignment on base map?');
        var /** @type {?} */ scopeKey = this._currentPropertyScopeKey();
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(scopeKey)) {
            return this._set2(Meta.ScopeKey, scopeKey, scopeKey, false, false);
        }
        return false;
    };
    /**
     * @return {?}
     */
    Context.prototype.debug = /**
     * @return {?}
     */
    function () {
        // set debugger breakpoint here
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["print"])('******  Debug Call ******');
        this._logContext();
    };
    /**
     * @return {?}
     */
    Context.prototype.debugString = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ buffer = new _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["StringJoiner"](['<b>Context:</b>&nbsp;']);
        buffer.add('(&nbsp;');
        buffer.add(this._entries.length + '');
        buffer.add(' entries');
        buffer.add('&nbsp;)<br/>');
        for (var /** @type {?} */ i = 0, /** @type {?} */ c = this._entries.length; i < c; i++) {
            var /** @type {?} */ sp = i;
            while (sp-- > 0) {
                buffer.add('&nbsp;');
            }
            var /** @type {?} */ r = this._entries[i];
            buffer.add('&nbsp;');
            buffer.add(r.srec.key);
            buffer.add('&nbsp;&nbsp;:&nbsp;');
            buffer.add(r.srec.val);
            buffer.add((r.srec.fromChaining ? ' ^' : ''));
            buffer.add((r.maskedByIdx !== 0 ? ' X' : ''));
            buffer.add('<br/>');
        }
        var /** @type {?} */ propertyActivation = this.currentActivation._propertyActivation;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(propertyActivation)) {
            var /** @type {?} */ srecs = propertyActivation._recs;
            buffer.add('&nbsp;&nbsp;&nbsp;<b>PropertyActivation...</b><br/>');
            for (var /** @type {?} */ i = 0, /** @type {?} */ c = srecs.length; i < c; i++) {
                var /** @type {?} */ sp = i + this._entries.length + 1;
                while (sp-- > 0) {
                    buffer.add('&nbsp;&nbsp;');
                }
                var /** @type {?} */ r = srecs[i];
                buffer.add(r.key);
                buffer.add('&nbsp;&nbsp;:&nbsp;');
                buffer.add(r.val);
                buffer.add((r.fromChaining ? '&nbsp;&nbsp;' : '&nbsp;&nbsp;!'));
                buffer.add('<br/>');
            }
        }
        buffer.add('&nbsp;<br/><b>Props:</b><br/>');
        this.writeProperties(buffer, this.allProperties(), 1, false);
        return buffer.toString();
    };
    /**
     * @return {?}
     */
    Context.prototype._logContext = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ debugString = this.debugString();
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["print"])(debugString);
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["print"])('\n');
    };
    /**
     * @param {?} buf
     * @param {?} properties
     * @param {?} level
     * @param {?} singleLine
     * @return {?}
     */
    Context.prototype.writeProperties = /**
     * @param {?} buf
     * @param {?} properties
     * @param {?} level
     * @param {?} singleLine
     * @return {?}
     */
    function (buf, properties, level, singleLine) {
        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].iterable(properties).forEach(function (value, key) {
            if (!singleLine) {
                while (level-- > 0) {
                    buf.add('&nbsp;&nbsp;&nbsp;');
                }
            }
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(value)) {
                buf.add(key);
                buf.add(' :null');
                buf.add(singleLine ? ';&nbsp;&nbsp;' : ';<br/>');
            }
            else {
                buf.add('&nbsp;&nbsp;&nbsp;');
                buf.add(key);
                buf.add(':');
                if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isString"])(value) || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isNumber"])(value)) {
                    buf.add('&nbsp;&nbsp;');
                    buf.add(value);
                    buf.add('&nbsp;&nbsp;');
                }
                else if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isStringMap"])(value)) {
                    buf.add('{');
                    buf.add(value);
                    buf.add('}');
                }
                else if (value instanceof Expr) {
                    buf.add(value.toString());
                }
                else if (value instanceof Map) {
                    buf.add(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].toString(value));
                }
                else if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(value)) {
                    _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].toString(value);
                }
                else if (value instanceof OverrideValue) {
                    buf.add(value.toString());
                }
                else if (value instanceof _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["FieldPath"]) {
                    buf.add('$');
                    buf.add(value.toString());
                }
                if (singleLine) {
                    buf.add(';');
                }
                else {
                    buf.add('<br/>');
                }
            }
        });
    };
    /**
     * @return {?}
     */
    Context.prototype.lastMatchWithoutContextProps = /**
     * @return {?}
     */
    function () {
        return _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].isEmpty(this._entries) ? null : this._entries[this._entries.length - 1].srec.match;
    };
    /**
     * @return {?}
     */
    Context.prototype.lastMatch = /**
     * @return {?}
     */
    function () {
        if (_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].isEmpty(this._entries)) {
            return null;
        }
        var /** @type {?} */ match = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].last(this._entries)
            .propertyLocalMatches(this);
        return (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(match)) ? match : this.lastMatchWithoutContextProps();
    };
    /**
     * @return {?}
     */
    Context.prototype.lastStaticRec = /**
     * @return {?}
     */
    function () {
        if (_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].isEmpty(this._entries)) {
            return null;
        }
        var /** @type {?} */ rec = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].last(this._entries).propertyLocalStaticRec(this);
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(rec) ? rec : _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].last(this._entries).srec;
    };
    Object.defineProperty(Context.prototype, "recPool", {
        get: /**
         * @return {?}
         */
        function () {
            return this._recPool;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Context.prototype, "currentActivation", {
        get: /**
         * @return {?}
         */
        function () {
            return this._currentActivation;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Context.prototype.extendedFields = /**
     * @return {?}
     */
    function () {
        return this.values;
    };
    Context._CacheActivations = false;
    Context._ExpensiveContextConsistencyChecksEnabled = false;
    Context._DebugRuleMatches = false;
    Context._Debug_SetsCount = 0;
    Context.MaxContextStackSize = 200;
    Context.EmptyMap = null;
    Context.EmptyRemoveMap = new Map();
    return Context;
}(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Extensible"]));
/**
 * A sharable/re-applicable block of setScopeKeyAssignment _StaticRecs.  An Activation contains
 * the list of assignment records resulting from (chaining from) a single original
 * assignment (as well as _DeferredAssignment records for dynamic values that cannot
 * be statically resolved to records).  Activations form a shared/cached tree, based
 * on context assignment paths previously traversed via assignments to some Context.
 * Subsequent traversals of these paths (likely by different Context instances)
 * are greatly optimized: an existing Activation is retrieved and its records appended
 * to the context's _entries stack; all of the traditional computation of rule match lookups,
 * chained assignments and override indexes is bypassed.
 * Activation gives special treatment to the 'propertyActivation', i.e. the activation
 * resulting from the application of the 'scopeKey' to the current context.  Property lookup
 * following and context assignment require application of the scopeKey, but then the scope key
 * must immediately be popped for the next context assignment.  To avoid this constant push/pop
 * on the bottom of the stack, _Activations cache a side activation (the propertyActivation)
 * for the result of applying the scopeKey to the current activation.  This stack (and its
 * properties) are cached on the side, and can be accessed without actually modifying the main
 * context stack.
 */
var  /**
 * A sharable/re-applicable block of setScopeKeyAssignment _StaticRecs.  An Activation contains
 * the list of assignment records resulting from (chaining from) a single original
 * assignment (as well as _DeferredAssignment records for dynamic values that cannot
 * be statically resolved to records).  Activations form a shared/cached tree, based
 * on context assignment paths previously traversed via assignments to some Context.
 * Subsequent traversals of these paths (likely by different Context instances)
 * are greatly optimized: an existing Activation is retrieved and its records appended
 * to the context's _entries stack; all of the traditional computation of rule match lookups,
 * chained assignments and override indexes is bypassed.
 * Activation gives special treatment to the 'propertyActivation', i.e. the activation
 * resulting from the application of the 'scopeKey' to the current context.  Property lookup
 * following and context assignment require application of the scopeKey, but then the scope key
 * must immediately be popped for the next context assignment.  To avoid this constant push/pop
 * on the bottom of the stack, _Activations cache a side activation (the propertyActivation)
 * for the result of applying the scopeKey to the current activation.  This stack (and its
 * properties) are cached on the side, and can be accessed without actually modifying the main
 * context stack.
 */
Activation = /** @class */ (function () {
    function Activation(_parent) {
        this._parent = _parent;
        this._recs = new Array();
        this._origEntryCount = 0;
    }
    /**
     * @param {?} contextKey
     * @param {?} value
     * @param {?} chaining
     * @return {?}
     */
    Activation.prototype.getChildActivation = /**
     * @param {?} contextKey
     * @param {?} value
     * @param {?} chaining
     * @return {?}
     */
    function (contextKey, value, chaining) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(value)) {
            value = Meta.NullMarker;
        }
        var /** @type {?} */ byKey = (chaining)
            ? this._valueNodeMapByContextKeyChaining :
            this._valueNodeMapByContextKey;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(byKey)) {
            return null;
        }
        var /** @type {?} */ byVal = byKey.get(contextKey);
        return (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(byVal)) ? null : byVal.getValue(value);
    };
    /**
     * @param {?} contextKey
     * @param {?} value
     * @param {?} activation
     * @param {?} chaining
     * @return {?}
     */
    Activation.prototype.cacheChildActivation = /**
     * @param {?} contextKey
     * @param {?} value
     * @param {?} activation
     * @param {?} chaining
     * @return {?}
     */
    function (contextKey, value, activation, chaining) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(value)) {
            value = Meta.NullMarker;
        }
        var /** @type {?} */ byKey;
        if (chaining) {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])((byKey = this._valueNodeMapByContextKeyChaining))) {
                byKey = this._valueNodeMapByContextKeyChaining
                    = new Map();
            }
        }
        else {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])((byKey = this._valueNodeMapByContextKey))) {
                byKey = this._valueNodeMapByContextKey
                    = new Map();
            }
        }
        var /** @type {?} */ byVal = byKey.get(contextKey);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(byVal)) {
            byVal = new typescript_collections__WEBPACK_IMPORTED_MODULE_2__["Dictionary"]();
            byKey.set(contextKey, byVal);
        }
        byVal.setValue(value, activation);
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    Activation.prototype.addDeferredAssignment = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        var /** @type {?} */ newDa;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.deferredAssignments)) {
            this.deferredAssignments = new Array();
        }
        else {
            try {
                for (var _a = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(this.deferredAssignments), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var da = _b.value;
                    if (da.key === key) {
                        newDa = da;
                        break;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(newDa)) {
            newDa = new DeferredAssignment();
            newDa.key = key;
            this.deferredAssignments.push(newDa);
        }
        newDa.value = value;
        var e_2, _c;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    Activation.prototype.hasDeferredAssignmentForKey = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.deferredAssignments)) {
            try {
                for (var _a = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(this.deferredAssignments), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var da = _b.value;
                    if (da.key === key) {
                        return true;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        return false;
        var e_3, _c;
    };
    /**
     * @param {?} context
     * @return {?}
     */
    Activation.prototype.propertyActivation = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(context.currentActivation === this, 'PropertyActivation sought on non top of stack activation');
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._propertyActivation)) {
            this._propertyActivation = context._createNewPropertyContextActivation(this);
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._propertyActivation)) {
                this._propertyActivation = this;
            } // this as null marker
        }
        return this._propertyActivation !== this ? this._propertyActivation : null;
    };
    /**
     * @return {?}
     */
    Activation.prototype.findExistingPropertyActivation = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ activation = this;
        while (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(activation)) {
            var /** @type {?} */ propertyActivation = activation._propertyActivation;
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(propertyActivation) && propertyActivation !== activation
                && !(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(propertyActivation._recs) || _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].isEmpty(propertyActivation._recs))) {
                return propertyActivation;
            }
            activation = activation._parent;
        }
        return null;
    };
    // todo: better better to string for hashing
    /**
     * @return {?}
     */
    Activation.prototype.toString = /**
     * @return {?}
     */
    function () {
        return typescript_collections__WEBPACK_IMPORTED_MODULE_2__["util"].makeString(this);
    };
    return Activation;
}());
var DeferredAssignment = /** @class */ (function () {
    function DeferredAssignment() {
    }
    return DeferredAssignment;
}());
var AssignmentSnapshot = /** @class */ (function () {
    function AssignmentSnapshot() {
    }
    return AssignmentSnapshot;
}());
var Assignment = /** @class */ (function () {
    function Assignment() {
        this.maskedByIdx = 0;
        this._didInitPropContext = false;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    Assignment.prototype.propertyLocalMatches = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        if (!this._didInitPropContext) {
            this.initPropContext(context);
        }
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._propertyLocalSrec) ? this._propertyLocalSrec.match : null;
    };
    /**
     * @param {?} context
     * @return {?}
     */
    Assignment.prototype.propertyLocalStaticRec = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        if (!this._didInitPropContext) {
            this.initPropContext(context);
        }
        return this._propertyLocalSrec;
    };
    /**
     * @param {?} context
     * @return {?}
     */
    Assignment.prototype.propertyLocalValues = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        if (!this._didInitPropContext) {
            this.initPropContext(context);
        }
        return this._propertyLocalValues;
    };
    /**
     * @param {?} context
     * @return {?}
     */
    Assignment.prototype.initPropContext = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        this._didInitPropContext = true;
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(!Context._ExpensiveContextConsistencyChecksEnabled || _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].last(context._entries) === this, 'initing prop context on record not on top of stack');
        // Todo: base it on whether we've tries yet to process them.
        var /** @type {?} */ propActivation = (this.srec.activation.propertyActivation(context));
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(propActivation)) {
            context._applyPropertyActivation(propActivation, this);
        }
    };
    /**
     * @return {?}
     */
    Assignment.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.srec = null;
        this.val = null;
        this.maskedByIdx = 0;
        this._didInitPropContext = false;
        this._propertyLocalSrec = null;
        this._propertyLocalValues = null;
    };
    return Assignment;
}());
/**
 * The 'static' (sharable) part of a context value assignment record.
 * Theses are created by the first _Assignment that needs them
 * and then cached for re-application in their _Activation
 *  (which, in turn, is stored in the global activation tree)
 */
var  /**
 * The 'static' (sharable) part of a context value assignment record.
 * Theses are created by the first _Assignment that needs them
 * and then cached for re-application in their _Activation
 *  (which, in turn, is stored in the global activation tree)
 */
StaticRec = /** @class */ (function () {
    function StaticRec() {
        this.salience = 0;
        this.lastAssignmentIdx = 0;
    }
    /**
     * @return {?}
     */
    StaticRec.prototype.properties = /**
     * @return {?}
     */
    function () {
        return (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.match)) ? this.match.properties() : Context.EmptyMap;
    };
    Object.defineProperty(StaticRec.prototype, "key", {
        get: /**
         * @return {?}
         */
        function () {
            return this._key;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._key = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StaticRec.prototype, "val", {
        get: /**
         * @return {?}
         */
        function () {
            return this._val;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._val = value;
        },
        enumerable: true,
        configurable: true
    });
    return StaticRec;
}());
var PropertyAccessor = /** @class */ (function () {
    function PropertyAccessor(context) {
        this.context = context;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    PropertyAccessor.prototype.get = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.context.propertyForKey(key);
    };
    /**
     * @return {?}
     */
    PropertyAccessor.prototype.toString = /**
     * @return {?}
     */
    function () {
        return _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].toString(this.context.allProperties());
    };
    return PropertyAccessor;
}());
/**
 * Snapshot is the way how to capture a current state of the context and then replay it back so.
 * for cases when we need to run some rule execution outside of the push/pop cycle
 */
var  /**
 * Snapshot is the way how to capture a current state of the context and then replay it back so.
 * for cases when we need to run some rule execution outside of the push/pop cycle
 */
Snapshot = /** @class */ (function () {
    function Snapshot(_context) {
        this._context = _context;
        this._meta = _context.meta;
        this._origClass = _context.constructor.name;
        this._assignments = _context.activeAssignments();
        this._allAssignments = _context.allAssignments();
        this._isNested = _context.isNested;
    }
    /**
     * @param {?=} shellCopy
     * @return {?}
     */
    Snapshot.prototype.hydrate = /**
     * @param {?=} shellCopy
     * @return {?}
     */
    function (shellCopy) {
        if (shellCopy === void 0) { shellCopy = true; }
        var /** @type {?} */ assignments = (shellCopy) ? this._assignments : this._allAssignments;
        var /** @type {?} */ newContext = this._meta.newContext();
        newContext.push();
        var /** @type {?} */ lastCnxGeneration = 1;
        try {
            for (var assignments_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(assignments), assignments_1_1 = assignments_1.next(); !assignments_1_1.done; assignments_1_1 = assignments_1.next()) {
                var a = assignments_1_1.value;
                if (lastCnxGeneration < a.salience) {
                    newContext.push();
                }
                newContext.set(a.key, a.value);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (assignments_1_1 && !assignments_1_1.done && (_a = assignments_1.return)) _a.call(assignments_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        newContext.isNested = this._isNested;
        return newContext;
        var e_4, _a;
    };
    return Snapshot;
}());
var ObjectMetaContext = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ObjectMetaContext, _super);
    function ObjectMetaContext(_meta, nested) {
        if (nested === void 0) { nested = false; }
        return _super.call(this, _meta, nested) || this;
    }
    Object.defineProperty(ObjectMetaContext.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ obj = this.object;
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(obj)) {
                return null;
            }
            var /** @type {?} */ fieldPath = this.fieldPath();
            return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(fieldPath) ? fieldPath.getFieldValue(obj) : this.propertyForKey('value');
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            var /** @type {?} */ fieldPath = this.fieldPath();
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(fieldPath)) {
                Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.object), 'Call to setValue() with no current object');
                fieldPath.setFieldValue(this.object, val);
            }
            else {
                var /** @type {?} */ value = this.allProperties().get(ObjectMeta.KeyValue);
                Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(isDynamicSettable(value), 'Cant set derived property: ' + value);
                var /** @type {?} */ settable = value;
                ((/** @type {?} */ (value))).evaluateSet(this, val);
                settable.evaluateSet(this, val);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ObjectMetaContext.prototype, "object", {
        get: /**
         * @return {?}
         */
        function () {
            return this.values.get(ObjectMeta.KeyObject);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ObjectMetaContext.prototype, "formatters", {
        get: /**
         * @return {?}
         */
        function () {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._formatters)) {
                this._formatters = new Map();
            }
            return this._formatters;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ObjectMetaContext.prototype.fieldPath = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ propMap = /** @type {?} */ (this.allProperties());
        return propMap.fieldPath;
    };
    /**
     * @return {?}
     */
    ObjectMetaContext.prototype.locale = /**
     * @return {?}
     */
    function () {
        return ObjectMetaContext.DefaultLocale;
    };
    /**
     * @return {?}
     */
    ObjectMetaContext.prototype.timezone = /**
     * @return {?}
     */
    function () {
        return new Date().getTimezoneOffset();
    };
    ObjectMetaContext.DefaultLocale = 'en';
    return ObjectMetaContext;
}(Context));
var UIContext = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(UIContext, _super);
    function UIContext(_meta, nested) {
        if (nested === void 0) { nested = false; }
        return _super.call(this, _meta, nested) || this;
    }
    // user values from user settings/locales
    /**
     * @return {?}
     */
    UIContext.prototype.locale = /**
     * @return {?}
     */
    function () {
        return _super.prototype.locale.call(this);
    };
    /**
     * @return {?}
     */
    UIContext.prototype.timezone = /**
     * @return {?}
     */
    function () {
        return _super.prototype.timezone.call(this);
    };
    return UIContext;
}(ObjectMetaContext));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * A Selector defines a sort of key/value predicate that must be satisfied for a
 * rule to apply.
 */
var  /**
 * A Selector defines a sort of key/value predicate that must be satisfied for a
 * rule to apply.
 */
Selector = /** @class */ (function () {
    function Selector(_key, _value, isDecl) {
        if (isDecl === void 0) { isDecl = false; }
        this._key = _key;
        this._value = _value;
        this.isDecl = isDecl;
        this._matchArrayIdx = 0;
    }
    /**
     * @param {?} values
     * @return {?}
     */
    Selector.fromMap = /**
     * @param {?} values
     * @return {?}
     */
    function (values) {
        var /** @type {?} */ result = new Array();
        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].iterable(values).forEach(function (value, key) {
            result.push(new Selector(key, value, false));
        });
        return result;
    };
    Object.defineProperty(Selector.prototype, "key", {
        get: /**
         * @return {?}
         */
        function () {
            return this._key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Selector.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} keyData
     * @return {?}
     */
    Selector.prototype.bindToKeyData = /**
     * @param {?} keyData
     * @return {?}
     */
    function (keyData) {
        this._matchArrayIdx = keyData._id;
        this._matchValue = keyData.matchValue(this._value);
    };
    /**
     * @param {?} matchArray
     * @return {?}
     */
    Selector.prototype.matches = /**
     * @param {?} matchArray
     * @return {?}
     */
    function (matchArray) {
        // If we haven't been initialized with a matchValue, then we were indexed and don't need to
        // match
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._matchValue)) {
            return true;
        }
        var /** @type {?} */ other = matchArray[this._matchArrayIdx];
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(other) ? other.matches(this._matchValue) : false;
    };
    /**
     * @return {?}
     */
    Selector.prototype.toString = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ sj = new _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["StringJoiner"]([]);
        sj.add(this.key);
        sj.add('=');
        sj.add(this._value.toString());
        sj.add('(');
        sj.add(this.isDecl + '');
        sj.add(')');
        sj.add('[ ');
        sj.add(this._matchArrayIdx + ']');
        return sj.toString();
    };
    return Selector;
}());
/**
 * A Rule defines a map of properties that should apply in the event that a set of Selectors
 * are matched.  Given a rule base (Meta) and a set of asserted values (Context) a list of matching
 * rules can be computed (by matching their selectors against the values) and by successively (in
 * rank / priority order) applying (merging) their property maps a set of effective properties can
 * be computed.
 *
 */
var  /**
 * A Rule defines a map of properties that should apply in the event that a set of Selectors
 * are matched.  Given a rule base (Meta) and a set of asserted values (Context) a list of matching
 * rules can be computed (by matching their selectors against the values) and by successively (in
 * rank / priority order) applying (merging) their property maps a set of effective properties can
 * be computed.
 *
 */
Rule = /** @class */ (function () {
    function Rule(_selectors, _properties, _rank, _lineNumber) {
        if (_rank === void 0) { _rank = -1; }
        if (_lineNumber === void 0) { _lineNumber = -1; }
        this._selectors = _selectors;
        this._properties = _properties;
        this._rank = _rank;
        this._lineNumber = _lineNumber;
        this.keyMatchesMask = 0;
        this.keyIndexedMask = 0;
        this.keyAntiMask = 0;
    }
    /**
     * @param {?} meta
     * @param {?} src
     * @param {?} dest
     * @param {?} declareKey
     * @return {?}
     */
    Rule.merge = /**
     * @param {?} meta
     * @param {?} src
     * @param {?} dest
     * @param {?} declareKey
     * @return {?}
     */
    function (meta, src, dest, declareKey) {
        var /** @type {?} */ updatedMask = 0;
        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].iterable(src).forEach(function (value, key) {
            var /** @type {?} */ propManager = meta.managerForProperty(key);
            var /** @type {?} */ orig = dest.get(key);
            var /** @type {?} */ isDeclare = (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(declareKey) && key === declareKey);
            var /** @type {?} */ newVal = propManager.mergeProperty(key, orig, value, isDeclare);
            if (newVal !== orig) {
                dest.set(key, newVal);
                var /** @type {?} */ keyData = propManager._keyDataToSet;
                if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(keyData)) {
                    var /** @type {?} */ keymask = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["shiftLeft"])(1, keyData._id);
                    if ((keymask & updatedMask) === 0 &&
                        (dest instanceof PropertyMap)) {
                        updatedMask |= keymask;
                        (/** @type {?} */ (dest)).addContextKey(propManager);
                    }
                }
            }
        });
        return updatedMask;
    };
    /**
     * @param {?} matchArray
     * @return {?}
     */
    Rule.prototype.matches = /**
     * @param {?} matchArray
     * @return {?}
     */
    function (matchArray) {
        try {
            for (var _a = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(this._selectors), _b = _a.next(); !_b.done; _b = _a.next()) {
                var sel = _b.value;
                if (!sel.matches(matchArray)) {
                    return false;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return true;
        var e_1, _c;
    };
    /**
     * returns context keys modified
     */
    /**
     * returns context keys modified
     * @param {?} meta
     * @param {?} properties
     * @param {?} declareKey
     * @return {?}
     */
    Rule.prototype.apply = /**
     * returns context keys modified
     * @param {?} meta
     * @param {?} properties
     * @param {?} declareKey
     * @return {?}
     */
    function (meta, properties, declareKey) {
        if (this._rank === Number.MIN_VALUE) {
            return 0;
        }
        return Rule.merge(meta, this._properties, properties, declareKey);
    };
    /**
     * @return {?}
     */
    Rule.prototype.disable = /**
     * @return {?}
     */
    function () {
        this._rank = Number.MIN_VALUE;
    };
    /**
     * @return {?}
     */
    Rule.prototype.disabled = /**
     * @return {?}
     */
    function () {
        return this._rank === Number.MIN_VALUE;
    };
    Object.defineProperty(Rule.prototype, "lineNumber", {
        get: /**
         * @return {?}
         */
        function () {
            return this._lineNumber;
        },
        set: /**
         * @param {?} lineNumber
         * @return {?}
         */
        function (lineNumber) {
            this._lineNumber = lineNumber;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Rule.prototype.location = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ path = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._ruleSet) ? this._ruleSet.filePath : 'Unknow';
        return (this._lineNumber >= 0) ? (new _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["StringJoiner"]([
            path, ':', this._lineNumber + ''
        ])).toString() : path;
    };
    Object.defineProperty(Rule.prototype, "selectors", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectors;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._selectors = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Rule.prototype, "properties", {
        get: /**
         * @return {?}
         */
        function () {
            return this._properties;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._properties = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Rule.prototype, "rank", {
        get: /**
         * @return {?}
         */
        function () {
            return this._rank;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._rank = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Rule.prototype, "ruleSet", {
        get: /**
         * @return {?}
         */
        function () {
            return this._ruleSet;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._ruleSet = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Rule.prototype, "id", {
        get: /**
         * @return {?}
         */
        function () {
            return this._id;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._id = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Rule.prototype.isEditable = /**
     * @return {?}
     */
    function () {
        return (this._ruleSet !== null) && (this._ruleSet.editableStart > 0) &&
            (this._id >= this._ruleSet.editableStart);
    };
    /**
     * @return {?}
     */
    Rule.prototype.createDecl = /**
     * @return {?}
     */
    function () {
        /*
                 @field=dyno { value:${ some expr} } becomes
                 declare { field:dyno }
                 field=dyno { field:dyno; value:${ some expr} }
                 */
        // add rule for declaration
        var /** @type {?} */ selectors = this._selectors;
        var /** @type {?} */ declPred = selectors[selectors.length - 1];
        var /** @type {?} */ prePreds = this.convertKeyOverrides(selectors.slice(0, selectors.length - 1));
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._properties)) {
            this._properties = new Map();
        }
        try {
            for (var selectors_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(selectors), selectors_1_1 = selectors_1.next(); !selectors_1_1.done; selectors_1_1 = selectors_1.next()) {
                var p = selectors_1_1.value;
                if (!(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(p.value))) {
                    this._properties.set(p.key, p.value);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (selectors_1_1 && !selectors_1_1.done && (_a = selectors_1.return)) _a.call(selectors_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        // Flag the declaring rule as a property
        this._properties.set(Meta.DeclRule, new RuleWrapper(this));
        // check for override scope
        var /** @type {?} */ hasOverrideScope = false;
        try {
            for (var prePreds_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(prePreds), prePreds_1_1 = prePreds_1.next(); !prePreds_1_1.done; prePreds_1_1 = prePreds_1.next()) {
                var p = prePreds_1_1.value;
                if (p.key === declPred.key) {
                    hasOverrideScope = true;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (prePreds_1_1 && !prePreds_1_1.done && (_b = prePreds_1.return)) _b.call(prePreds_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        // if decl key isn't scoped, then select on no scope
        if (!hasOverrideScope) {
            var /** @type {?} */ overrideKey = Meta.overrideKeyForKey(declPred.key);
            prePreds.unshift(new Selector(overrideKey, Meta.NullMarker));
        }
        // The decl rule...
        prePreds.push(new Selector(Meta.KeyDeclare, declPred.key));
        var /** @type {?} */ m = new Map();
        m.set(declPred.key, declPred.value);
        return new Rule(prePreds, m, 0, -1);
        var e_2, _a, e_3, _b;
    };
    /**
     *  rewrite any selector of the form "layout=L1, class=c, layout=L2" to
     *  "layout_o=L1 class=c, layout=L2"
     */
    /**
     *  rewrite any selector of the form "layout=L1, class=c, layout=L2" to
     *  "layout_o=L1 class=c, layout=L2"
     * @param {?} orig
     * @return {?}
     */
    Rule.prototype.convertKeyOverrides = /**
     *  rewrite any selector of the form "layout=L1, class=c, layout=L2" to
     *  "layout_o=L1 class=c, layout=L2"
     * @param {?} orig
     * @return {?}
     */
    function (orig) {
        var /** @type {?} */ result = orig;
        var /** @type {?} */ count = orig.length;
        for (var /** @type {?} */ i = 0; i < count; i++) {
            var /** @type {?} */ p = orig[i];
            // See if overridded by same key later in selector
            for (var /** @type {?} */ j = i + 1; j < count; j++) {
                var /** @type {?} */ pNext = orig[j];
                if (pNext.key === p.key) {
                    // if we're overridden, we drop ours, and replace the next collision
                    // with one with our prefix
                    // make a copy if we haven't already
                    if (result === orig) {
                        result = orig.slice(0, i);
                    }
                    p = new Selector(Meta.overrideKeyForKey(p.key), p.value);
                    break;
                }
            }
            if (result !== orig) {
                result.push(p);
            }
        }
        return result;
    };
    /**
     * @return {?}
     */
    Rule.prototype.toString = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ sj = new _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["StringJoiner"](['<Rule [']);
        sj.add(this._rank + '] ');
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.selectors)) {
            sj.add('null, null --> null >');
        }
        else {
            sj.add(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].toString(this._selectors));
            sj.add(' -> ');
            if (!this._properties) {
                sj.add('[,]' + ' >');
            }
            else {
                if (this._properties.has('declRule')) ;
                sj.add(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].toString(this._properties) + ' >');
            }
            sj.add('[ ');
            sj.add(this.keyIndexedMask + ', ');
            sj.add(this.keyAntiMask + ', ');
            sj.add(this.keyMatchesMask + '');
            sj.add(' ]');
        }
        return sj.toString();
    };
    /**
     * @param {?} values
     * @param {?} meta
     * @return {?}
     */
    Rule.prototype._checkRule = /**
     * @param {?} values
     * @param {?} meta
     * @return {?}
     */
    function (values, meta) {
        var _this = this;
        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].forEachWithIndex(this.selectors, function (p, i) {
            var /** @type {?} */ contextValue = values.get(p.key);
            var /** @type {?} */ keyData = meta.keyData(p.key);
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(keyData._transformer)) {
                contextValue = keyData._transformer.tranformForMatch(contextValue);
            }
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(contextValue) &&
                ((Meta.KeyAny === p.value && _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["BooleanWrapper"].boleanValue(contextValue) ||
                    Meta.objectEquals(contextValue, p.value) ||
                    (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(p.value) && p.value.indexOf(contextValue) > -1) ||
                    (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(p.value) && contextValue.indexOf(p.value) > -1)))) ;
            else {
                Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["print"])('Possible bad rule match!  Rule: %s; selector: %s, context val: %s' + _this +
                    ' ' + p + ' ' + contextValue);
            }
        });
    };
    return Rule;
}());
var RuleWrapper = /** @class */ (function () {
    function RuleWrapper(rule) {
        this.rule = rule;
    }
    return RuleWrapper;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Meta is the core class in MetaUI.  An instance of meta represents a 'Rule Base' (a repository
 * rules), and this rule base is used to compute property maps based on a series of key/value
 * constraints (typically based on the current values in a Context instance).
 *
 * Meta works in concert with Match.MatchResult to cache partial matches (match trees) with cached
 * computed property maps. Meta is generally used by way of its subclasses ObjectMeta and UIMeta
 * (which extend Meta with behaviors around auto-creating rules for references Typescripts classes
 * and dynamic properties for field and layout zoning)
 *
 *
 */
var Meta = /** @class */ (function () {
    function Meta() {
        this._rules = new Array();
        this._ruleCount = 0;
        this._testRules = new Map();
        this._nextKeyId = 0;
        this._ruleSetGeneration = 0;
        this._keyData = new Map();
        this._keyDatasById = new Array(Meta.MaxKeyDatas);
        this._MatchToPropsCache = new typescript_collections__WEBPACK_IMPORTED_MODULE_2__["Dictionary"]();
        this._PropertyMapUniquer = new typescript_collections__WEBPACK_IMPORTED_MODULE_2__["Dictionary"]();
        this._identityCache = new typescript_collections__WEBPACK_IMPORTED_MODULE_2__["Dictionary"]();
        this._managerForProperty = new Map();
        this._declareKeyMask = 0;
        Meta.PropertyMerger_DeclareList = new PropertyMergerDeclareList();
        Meta.PropertyMerger_Traits = new PropertyMergerDeclareListForTrait();
        Meta.PropertyMerger_List = new PropertyMerger_List();
        Meta.Transformer_KeyPresent = new KeyValueTransformer_KeyPresent();
        this._declareKeyMask = this.keyData(Meta.KeyDeclare).maskValue();
        this.registerPropertyMerger(Meta.KeyTrait, Meta.PropertyMerger_Traits);
        var /** @type {?} */ nooprule = new Rule(null, null, 0, 0);
        nooprule.disable();
        this._rules[0] = nooprule;
        this._ruleCount = 1;
    }
    /*
     A few handy utilities (for which we probably already have superior versions elsewhere)
     */
    /**
     * @param {?} value
     * @return {?}
     */
    Meta.booleanValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["BooleanWrapper"].boleanValue(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Meta.toList = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(value)) ? value : [value];
    };
    /**
     * @param {?} one
     * @param {?} two
     * @return {?}
     */
    Meta.objectEquals = /**
     * @param {?} one
     * @param {?} two
     * @return {?}
     */
    function (one, two) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(one) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(two)) {
            return true;
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(one) || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(two)) {
            return false;
        }
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["equals"])(one, two);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    Meta.overrideKeyForKey = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return key + '_o';
    };
    /**
     * @param {?} traits
     * @param {?} map
     * @return {?}
     */
    Meta.addTraits = /**
     * @param {?} traits
     * @param {?} map
     * @return {?}
     */
    function (traits, map) {
        var /** @type {?} */ current = map.get(Meta.KeyTrait);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(current)) {
            map.set(Meta.KeyTrait, traits);
        }
        else {
            _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].addAll(current, traits);
            map.set(Meta.KeyTrait, current);
        }
    };
    /**
     * @param {?} trait
     * @param {?} map
     * @return {?}
     */
    Meta.addTrait = /**
     * @param {?} trait
     * @param {?} map
     * @return {?}
     */
    function (trait, map) {
        var /** @type {?} */ current = map.get(Meta.KeyTrait);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(current)) {
            map.set(Meta.KeyTrait, Meta.toList(trait));
        }
        else {
            current.push(trait);
            map.set(Meta.KeyTrait, current);
        }
    };
    /**
     * @param {?} object
     * @return {?}
     */
    Meta.className = /**
     * @param {?} object
     * @return {?}
     */
    function (object) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isStringMap"])(object) && (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isEntity"])(object) || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isValue"])(object))) {
            return (/** @type {?} */ (object)).className();
        }
        else if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isStringMap"])(object)) {
            return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["objectToName"])(object);
        }
        else if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(object)) {
            return object.name;
        }
        return object;
    };
    /**
     * @param {?} loader
     * @return {?}
     */
    Meta.prototype.registerLoader = /**
     * @param {?} loader
     * @return {?}
     */
    function (loader) {
        this._ruleLoader = loader;
    };
    /**
     * @param {?} rule
     * @return {?}
     */
    Meta.prototype.addRule = /**
     * @param {?} rule
     * @return {?}
     */
    function (rule) {
        var /** @type {?} */ selectors = rule.selectors;
        if (selectors.length > 0 && selectors[selectors.length - 1].isDecl) {
            var /** @type {?} */ decl = rule.createDecl();
            this._addRule(decl, true);
        }
        // we allow null to enable creation of a decl, but otherwise this rule has no effect
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(rule.properties)) {
            // After we've captured the decl, do the collapse
            rule._selectors = rule.convertKeyOverrides(rule._selectors);
            this._addRule(rule, true);
        }
    };
    /**
     * @param {?} rule
     * @param {?} pos
     * @return {?}
     */
    Meta.prototype._addToRules = /**
     * @param {?} rule
     * @param {?} pos
     * @return {?}
     */
    function (rule, pos) {
        this._rules[pos] = rule;
    };
    // todo: TEST unit test this
    /**
     * @param {?} rule
     * @param {?} checkPropScope
     * @return {?}
     */
    Meta.prototype._addRule = /**
     * @param {?} rule
     * @param {?} checkPropScope
     * @return {?}
     */
    function (rule, checkPropScope) {
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._currentRuleSet), 'Attempt to add rule without current RuleSet');
        var /** @type {?} */ selectors = rule._selectors;
        var /** @type {?} */ entryId = this._currentRuleSet.allocateNextRuleEntry();
        rule.id = entryId;
        if (rule.rank === 0) {
            rule.rank = this._currentRuleSet._rank++;
        }
        rule.ruleSet = this._currentRuleSet;
        this._addToRules(rule, entryId);
        // index it
        var /** @type {?} */ lastScopeKeyData;
        var /** @type {?} */ declKey;
        var /** @type {?} */ declMask = this.declareKeyMask;
        var /** @type {?} */ matchMask = 0, /** @type {?} */ indexedMask = 0, /** @type {?} */ antiMask = 0;
        var /** @type {?} */ count = selectors.length;
        var /** @type {?} */ indexOnlySelector = Meta._UsePartialIndexing ? this.bestSelectorToIndex(selectors) : null;
        for (var /** @type {?} */ i = count - 1; i >= 0; i--) {
            var /** @type {?} */ p = selectors[i];
            var /** @type {?} */ shouldIndex = (indexOnlySelector === null || p === indexOnlySelector);
            var /** @type {?} */ data = this.keyData(p.key);
            var /** @type {?} */ dataMask = data.maskValue();
            if (!this.isNullMarker(p.value)) {
                if (shouldIndex || Meta._DebugDoubleCheckMatches) {
                    if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(p.value)) {
                        try {
                            for (var _a = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(p.value), _b = _a.next(); !_b.done; _b = _a.next()) {
                                var v = _b.value;
                                data.addEntry(v, entryId);
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                    }
                    else {
                        data.addEntry(p.value, entryId);
                    }
                    if (shouldIndex) {
                        indexedMask |= Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["shiftLeft"])(1, data.id);
                    }
                }
                if (!shouldIndex) {
                    // prepare selector for direct evaluation
                    p.bindToKeyData(data);
                }
                matchMask |= dataMask;
                if (data.isPropertyScope && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(lastScopeKeyData)) {
                    lastScopeKeyData = data;
                }
                if ((dataMask & declMask) !== 0) {
                    declKey = p.value;
                }
            }
            else {
                antiMask |= dataMask;
            }
        }
        var /** @type {?} */ isDecl = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(declKey);
        var /** @type {?} */ nonScopeKeyDecl = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(declKey) && !this.keyData(declKey).isPropertyScope;
        if (!isDecl || nonScopeKeyDecl) {
            // all non-decl rules don't apply outside decl context
            if (!isDecl) {
                antiMask |= declMask;
            }
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(lastScopeKeyData) && checkPropScope) {
                var /** @type {?} */ traitVal = rule.properties.get(Meta.KeyTrait);
                if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(traitVal)) {
                    var /** @type {?} */ traitKey = lastScopeKeyData._key + '_trait';
                    var /** @type {?} */ properties = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].createEmpty();
                    properties.set(traitKey, traitVal);
                    var /** @type {?} */ traitRule = new Rule(rule._selectors, properties, rule.rank, rule.lineNumber);
                    this._addRule(traitRule, false);
                }
                rule._selectors = selectors.slice(0);
                var /** @type {?} */ scopeSel = new Selector(Meta.ScopeKey, lastScopeKeyData.key);
                rule.selectors.push(scopeSel);
                var /** @type {?} */ data = this.keyData(Meta.ScopeKey);
                if (!Meta._UsePartialIndexing || Meta._DebugDoubleCheckMatches) {
                    data.addEntry(lastScopeKeyData._key, entryId);
                    indexedMask |= Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["shiftLeft"])(1, data._id);
                }
                scopeSel.bindToKeyData(data);
                matchMask |= Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["shiftLeft"])(1, data._id);
            }
        }
        rule.keyMatchesMask = matchMask;
        rule.keyIndexedMask = indexedMask;
        rule.keyAntiMask = antiMask;
        var e_1, _c;
    };
    /**
     * @param {?} selectors
     * @return {?}
     */
    Meta.prototype.bestSelectorToIndex = /**
     * @param {?} selectors
     * @return {?}
     */
    function (selectors) {
        var /** @type {?} */ best;
        var /** @type {?} */ bestRank = Number.MIN_VALUE;
        var /** @type {?} */ pos = 0;
        try {
            for (var selectors_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(selectors), selectors_1_1 = selectors_1.next(); !selectors_1_1.done; selectors_1_1 = selectors_1.next()) {
                var sel = selectors_1_1.value;
                var /** @type {?} */ rank = this.selectivityRank(sel) + pos++;
                if (rank > bestRank) {
                    best = sel;
                    bestRank = rank;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (selectors_1_1 && !selectors_1_1.done && (_a = selectors_1.return)) _a.call(selectors_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return best;
        var e_2, _a;
    };
    /**
     * @param {?} selector
     * @return {?}
     */
    Meta.prototype.selectivityRank = /**
     * @param {?} selector
     * @return {?}
     */
    function (selector) {
        // Score selectors: good if property scope, key !== '*' or bool
        // '*' is particularly bad, since these are inherited by all others
        var /** @type {?} */ score = 1;
        var /** @type {?} */ value = selector.value;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(value) && !(Meta.KeyAny === value)) {
            score += (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBoolean"])(value) ? 1 : 9);
        }
        var /** @type {?} */ keyData = this.keyData(selector.key);
        if (keyData.isPropertyScope) {
            score *= 5;
        }
        // Todo: we could score based on # of entries in KeyData
        return score;
    };
    /**
     * if addition of this rule results in addition of extra rules, those are returned
     * (null otherwise)
     */
    /**
     * if addition of this rule results in addition of extra rules, those are returned
     * (null otherwise)
     * @return {?}
     */
    Meta.prototype._editingRuleEnd = /**
     * if addition of this rule results in addition of extra rules, those are returned
     * (null otherwise)
     * @return {?}
     */
    function () {
        return Math.max(this._currentRuleSet.end, this._ruleCount);
    };
    /**
     * @param {?} rule
     * @return {?}
     */
    Meta.prototype._addRuleAndReturnExtras = /**
     * @param {?} rule
     * @return {?}
     */
    function (rule) {
        var /** @type {?} */ start = this._editingRuleEnd();
        var /** @type {?} */ extras;
        this.addRule(rule);
        // Return any extra rules created by addition of this one
        for (var /** @type {?} */ i = start, /** @type {?} */ c = this._editingRuleEnd(); i < c; i++) {
            var /** @type {?} */ r = this._rules[i];
            if (r !== rule) {
                if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(extras)) {
                    extras = new Array();
                }
                extras.push(r);
            }
        }
        return extras;
    };
    // Icky method to replace an exited rule in place
    /**
     * @param {?} rule
     * @param {?} extras
     * @return {?}
     */
    Meta.prototype._updateEditedRule = /**
     * @param {?} rule
     * @param {?} extras
     * @return {?}
     */
    function (rule, extras) {
        // in place replace existing rule with NoOp
        var /** @type {?} */ nooprule = new Rule(null, null, 0, 0);
        nooprule.disable();
        this._rules[rule.id] = nooprule;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(extras)) {
            try {
                for (var extras_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(extras), extras_1_1 = extras_1.next(); !extras_1_1.done; extras_1_1 = extras_1.next()) {
                    var r = extras_1_1.value;
                    r.disable();
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (extras_1_1 && !extras_1_1.done && (_a = extras_1.return)) _a.call(extras_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        // Since this rule has already been mutated (the first time it was added) we need to
        // reverse the addition of the scopeKey
        var /** @type {?} */ preds = rule.selectors;
        if ((Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(preds) && preds.length > 0) && _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].last(preds).key === Meta.ScopeKey) {
            _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].removeAt(preds, preds.length);
        }
        // now (re)-add it and invalidate
        extras = this._addRuleAndReturnExtras(rule);
        this.invalidateRules();
        return extras;
        var e_3, _a;
    };
    /**
     * @param {?} preds
     * @return {?}
     */
    Meta.prototype.scopeKeyForSelector = /**
     * @param {?} preds
     * @return {?}
     */
    function (preds) {
        for (var /** @type {?} */ i = preds.length - 1; i >= 0; i--) {
            var /** @type {?} */ pred = preds[i];
            var /** @type {?} */ data = this.keyData(pred.key);
            if (data.isPropertyScope) {
                return pred.key;
            }
        }
        return null;
    };
    /**
     * @param {?} selectorMap
     * @param {?} propertyMap
     * @return {?}
     */
    Meta.prototype.addRuleFromSelectorMap = /**
     * @param {?} selectorMap
     * @param {?} propertyMap
     * @return {?}
     */
    function (selectorMap, propertyMap) {
        this.addRuleFromSelectorMapWithRank(selectorMap, propertyMap, 0);
    };
    /**
     * @param {?} selectorMap
     * @param {?} propertyMap
     * @param {?} rank
     * @return {?}
     */
    Meta.prototype.addRuleFromSelectorMapWithRank = /**
     * @param {?} selectorMap
     * @param {?} propertyMap
     * @param {?} rank
     * @return {?}
     */
    function (selectorMap, propertyMap, rank) {
        var /** @type {?} */ rule = new Rule(Selector.fromMap(selectorMap), propertyMap, 0, -1);
        if (rank !== 0) {
            rule.rank = rank;
        }
        this.addRule(rule);
    };
    /**
     * @param {?} ruleSet
     * @param {?} selectors
     * @return {?}
     */
    Meta.prototype.addRules = /**
     * @param {?} ruleSet
     * @param {?} selectors
     * @return {?}
     */
    function (ruleSet, selectors) {
        // Special keys:  'props, 'rules'.  Everthing else is a selector
        var /** @type {?} */ props;
        var /** @type {?} */ rules;
        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].iterable(ruleSet).forEach(function (value, key) {
            if (key === 'props') {
                props = value;
            }
            else if (key === 'rules') {
                rules = value;
            }
            else {
                selectors.push(new Selector(key, value));
            }
        });
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(props)) {
            this.addRule(new Rule(selectors, props, 0));
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(rules)) {
            try {
                for (var rules_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(rules), rules_1_1 = rules_1.next(); !rules_1_1.done; rules_1_1 = rules_1.next()) {
                    var r = rules_1_1.value;
                    this.addRules(r, selectors);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (rules_1_1 && !rules_1_1.done && (_a = rules_1.return)) _a.call(rules_1);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        var e_4, _a;
    };
    // this one expect that we already opened the ruleset
    /**
     * @param {?=} ruleText
     * @param {?=} module
     * @param {?=} editable
     * @return {?}
     */
    Meta.prototype._loadRules = /**
     * @param {?=} ruleText
     * @param {?=} module
     * @param {?=} editable
     * @return {?}
     */
    function (ruleText, module, editable) {
        var _this = this;
        if (module === void 0) { module = 'system'; }
        if (editable === void 0) { editable = true; }
        try {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._ruleLoader)) {
                this._ruleLoader.loadRules(this, ruleText, module, function (rule) { return _this.addRule(rule); });
            }
        }
        catch (/** @type {?} */ e) {
            this.endRuleSet().disableRules();
            throw new Error('Error loading rule: ' + e);
        }
    };
    /**
     * @param {?=} ruleText
     * @return {?}
     */
    Meta.prototype.loadRules = /**
     * @param {?=} ruleText
     * @return {?}
     */
    function (ruleText) {
        this._loadRulesWithRuleSet('StringLiteral', ruleText, 0);
        this.endRuleSet();
    };
    /**
     * @param {?} filename
     * @param {?} ruleText
     * @param {?} rank
     * @return {?}
     */
    Meta.prototype._loadRulesWithRuleSet = /**
     * @param {?} filename
     * @param {?} ruleText
     * @param {?} rank
     * @return {?}
     */
    function (filename, ruleText, rank) {
        this.beginRuleSetWithRank(rank, filename);
        try {
            this._loadRules(ruleText);
        }
        catch (/** @type {?} */ e) {
            this.endRuleSet().disableRules();
            throw new Error('Error loading rule: ' + e);
        }
    };
    /**
     * @param {?} source
     * @param {?} userClass
     * @return {?}
     */
    Meta.prototype.loadUserRule = /**
     * @param {?} source
     * @param {?} userClass
     * @return {?}
     */
    function (source, userClass) {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["unimplemented"])();
    };
    /**
     * @param {?} propString
     * @param {?} propertyMap
     * @return {?}
     */
    Meta.prototype.parsePropertyAssignment = /**
     * @param {?} propString
     * @param {?} propertyMap
     * @return {?}
     */
    function (propString, propertyMap) {
        // todo: implement this
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["unimplemented"])();
    };
    /**
     * @return {?}
     */
    Meta.prototype.clearCaches = /**
     * @return {?}
     */
    function () {
        this._MatchToPropsCache = new typescript_collections__WEBPACK_IMPORTED_MODULE_2__["Dictionary"]();
        this._PropertyMapUniquer = new typescript_collections__WEBPACK_IMPORTED_MODULE_2__["Dictionary"]();
        this._identityCache = new typescript_collections__WEBPACK_IMPORTED_MODULE_2__["Dictionary"]();
    };
    /**
     * @param {?} rule
     * @return {?}
     */
    Meta.prototype.isTraitExportRule = /**
     * @param {?} rule
     * @return {?}
     */
    function (rule) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(rule.properties) || rule || rule.properties.size === 1) {
            var /** @type {?} */ key = Array.from(rule.properties.keys())[0];
            return _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["StringWrapper"].endsWidth(key, '_trait');
        }
        return false;
    };
    /**
     * @param {?} identificator
     * @return {?}
     */
    Meta.prototype.beginRuleSet = /**
     * @param {?} identificator
     * @return {?}
     */
    function (identificator) {
        this.beginRuleSetWithRank(this._ruleCount, identificator);
    };
    /**
     * @param {?} rank
     * @param {?} filePath
     * @return {?}
     */
    Meta.prototype.beginRuleSetWithRank = /**
     * @param {?} rank
     * @param {?} filePath
     * @return {?}
     */
    function (rank, filePath) {
        try {
            Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._currentRuleSet), 'Can t start new rule set while one in progress');
            this._currentRuleSet = new RuleSet(this);
            this._currentRuleSet._start = this._ruleCount;
            this._currentRuleSet._end = this._ruleCount;
            this._currentRuleSet._rank = rank;
            this._currentRuleSet._filePath = filePath;
        }
        catch (/** @type {?} */ e) {
            throw e;
        }
    };
    /**
     * @param {?} orig
     * @return {?}
     */
    Meta.prototype.beginReplacementRuleSet = /**
     * @param {?} orig
     * @return {?}
     */
    function (orig) {
        var /** @type {?} */ origRank = orig.startRank();
        this.beginRuleSetWithRank(this._ruleCount, orig._filePath);
        this._currentRuleSet._rank = origRank;
    };
    /**
     * @return {?}
     */
    Meta.prototype.endRuleSet = /**
     * @return {?}
     */
    function () {
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._currentRuleSet), 'No rule set progress');
        var /** @type {?} */ result = this._currentRuleSet;
        if (this._ruleCount < result._end) {
            this._ruleCount = result._end;
        }
        this._currentRuleSet = null;
        this._ruleSetGeneration++;
        return result;
    };
    Object.defineProperty(Meta.prototype, "ruleSetGeneration", {
        get: /**
         * @return {?}
         */
        function () {
            return this._ruleSetGeneration;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Meta.prototype.invalidateRules = /**
     * @return {?}
     */
    function () {
        this._ruleSetGeneration++;
        this.clearCaches();
    };
    /**
     * @return {?}
     */
    Meta.prototype.newContext = /**
     * @return {?}
     */
    function () {
        return new Context(this);
    };
    Object.defineProperty(Meta.prototype, "declareKeyMask", {
        get: /**
         * @return {?}
         */
        function () {
            return this._declareKeyMask;
        },
        enumerable: true,
        configurable: true
    });
    // Touch a key/value to force pre-loading/registration of associated rule files
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    Meta.prototype.touch = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        var /** @type {?} */ context = this.newContext();
        context.push();
        context.set(key, value);
        context.allProperties();
        context.pop();
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    Meta.prototype.transformValue = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        var /** @type {?} */ keyData = this._keyData.get(key);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(keyData) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(keyData._transformer)) {
            value = keyData._transformer.tranformForMatch(value);
        }
        return value;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @param {?} intermediateResult
     * @return {?}
     */
    Meta.prototype.match = /**
     * @param {?} key
     * @param {?} value
     * @param {?} intermediateResult
     * @return {?}
     */
    function (key, value, intermediateResult) {
        var /** @type {?} */ keyData = this._keyData.get(key);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(keyData)) {
            return intermediateResult;
        }
        var /** @type {?} */ keyMask = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["shiftLeft"])(1, keyData._id);
        // Does our result already include this key?  Then no need to join again
        // if (intermediateResult !== null && (intermediateResult._keysMatchedMask & keyMask) !==
        // 0) return intermediateResult;
        return new MatchResult(this, keyData, value, intermediateResult);
    };
    /**
     * @param {?} key
     * @param {?} value
     * @param {?} intermediateResult
     * @return {?}
     */
    Meta.prototype.unionOverrideMatch = /**
     * @param {?} key
     * @param {?} value
     * @param {?} intermediateResult
     * @return {?}
     */
    function (key, value, intermediateResult) {
        var /** @type {?} */ keyData = this._keyData.get(Meta.overrideKeyForKey(key));
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(keyData)) {
            return intermediateResult;
        }
        return new UnionMatchResult(this, keyData, value, intermediateResult);
    };
    /**
     * @return {?}
     */
    Meta.prototype.newPropertiesMap = /**
     * @return {?}
     */
    function () {
        return new PropertyMap();
    };
    /**
     * @param {?} matchResult
     * @return {?}
     */
    Meta.prototype.propertiesForMatch = /**
     * @param {?} matchResult
     * @return {?}
     */
    function (matchResult) {
        var /** @type {?} */ properties = this._MatchToPropsCache.getValue(matchResult);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(properties)) {
            return properties;
        }
        properties = this.newPropertiesMap();
        var /** @type {?} */ arr = matchResult.filteredMatches();
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(arr)) {
            return properties;
        }
        // first entry is count
        var /** @type {?} */ count = arr[0];
        var /** @type {?} */ rules = new Array(count);
        for (var /** @type {?} */ i = 0; i < count; i++) {
            rules[i] = this._rules[arr[i + 1]];
        }
        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].sort(rules, function (o1, o2) { return o1.rank - o2.rank; });
        var /** @type {?} */ modifiedMask = 0;
        var /** @type {?} */ declareKey = ((this._declareKeyMask & matchResult.keysMatchedMask) !== 0)
            ? matchResult.valueForKey(Meta.KeyDeclare) : null;
        for (var /** @type {?} */ r in rules) {
            modifiedMask |= rules[r].apply(this, properties, declareKey);
        }
        properties.awakeProperties();
        this._MatchToPropsCache.setValue(matchResult.immutableCopy(), properties);
        return properties;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    Meta.prototype.keyData = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var /** @type {?} */ data = this._keyData.get(key);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(data)) {
            var /** @type {?} */ id = this._nextKeyId;
            if (id >= Meta.MaxKeyDatas - 1) {
                Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["print"])('Exceeded maximum number of context keys');
            }
            this._nextKeyId++;
            data = new KeyData(key, id);
            this._keyDatasById[id] = data;
            this._keyData.set(key, data);
        }
        return data;
    };
    /**
     * @param {?} mask
     * @return {?}
     */
    Meta.prototype._keysInMask = /**
     * @param {?} mask
     * @return {?}
     */
    function (mask) {
        var /** @type {?} */ matches = [];
        var /** @type {?} */ pos = 0;
        while (mask !== 0) {
            if ((mask & 1) !== 0) {
                matches.push(this._keyDatasById[pos]._key);
            }
            pos++;
            mask = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["shiftRight"])(mask, 1);
        }
        return matches;
    };
    /**
     * @param {?} key
     * @param {?} o
     * @return {?}
     */
    Meta.prototype.registerKeyInitObserver = /**
     * @param {?} key
     * @param {?} o
     * @return {?}
     */
    function (key, o) {
        this.keyData(key).addObserver(o);
    };
    /**
     * @param {?} key
     * @param {?} transformer
     * @return {?}
     */
    Meta.prototype.registerValueTransformerForKey = /**
     * @param {?} key
     * @param {?} transformer
     * @return {?}
     */
    function (key, transformer) {
        this.keyData(key)._transformer = transformer;
    };
    Object.defineProperty(Meta.prototype, "identityCache", {
        get: /**
         * @return {?}
         */
        function () {
            return this._identityCache;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Meta.prototype.newMatchArray = /**
     * @return {?}
     */
    function () {
        return [];
    };
    /**
     * @param {?} array
     * @param {?} keyData
     * @param {?} matchValue
     * @return {?}
     */
    Meta.prototype.matchArrayAssign = /**
     * @param {?} array
     * @param {?} keyData
     * @param {?} matchValue
     * @return {?}
     */
    function (array, keyData, matchValue) {
        var /** @type {?} */ idx = keyData._id;
        var /** @type {?} */ curr = array[idx];
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(curr)) {
            matchValue = curr.updateByAdding(matchValue);
        }
        array[idx] = matchValue;
    };
    /**
     * @param {?} propertyName
     * @param {?} origValue
     * @return {?}
     */
    Meta.prototype.propertyWillDoMerge = /**
     * @param {?} propertyName
     * @param {?} origValue
     * @return {?}
     */
    function (propertyName, origValue) {
        var /** @type {?} */ merger = this.mergerForProperty(propertyName);
        return this.isPropertyMergerIsChaining(merger) || (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(origValue) && (origValue instanceof Map));
    };
    /**
     * @param {?} name
     * @return {?}
     */
    Meta.prototype.managerForProperty = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        var /** @type {?} */ manager = this._managerForProperty.get(name);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(manager)) {
            manager = new PropertyManager(name);
            this._managerForProperty.set(name, manager);
        }
        return manager;
    };
    /**
     * @param {?} propertyName
     * @param {?} contextKey
     * @return {?}
     */
    Meta.prototype.mirrorPropertyToContext = /**
     * @param {?} propertyName
     * @param {?} contextKey
     * @return {?}
     */
    function (propertyName, contextKey) {
        var /** @type {?} */ keyData = this.keyData(contextKey);
        var /** @type {?} */ manager = this.managerForProperty(propertyName);
        manager._keyDataToSet = keyData;
    };
    /**
     * @param {?} contextKey
     * @return {?}
     */
    Meta.prototype.defineKeyAsPropertyScope = /**
     * @param {?} contextKey
     * @return {?}
     */
    function (contextKey) {
        var /** @type {?} */ keyData = this.keyData(contextKey);
        keyData.isPropertyScope = true;
        var /** @type {?} */ traitKey = contextKey + '_trait';
        this.mirrorPropertyToContext(traitKey, traitKey);
        this.registerPropertyMerger(traitKey, Meta.PropertyMerger_DeclareList);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    Meta.prototype.isPropertyScopeKey = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return Meta.ScopeKey === key;
    };
    /**
     * @param {?} propertyName
     * @param {?} merger
     * @return {?}
     */
    Meta.prototype.registerPropertyMerger = /**
     * @param {?} propertyName
     * @param {?} merger
     * @return {?}
     */
    function (propertyName, merger) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(merger._meta)) {
            merger._meta = this;
        }
        var /** @type {?} */ manager = this.managerForProperty(propertyName);
        manager._merger = merger;
    };
    /**
     * @param {?} propertyName
     * @return {?}
     */
    Meta.prototype.mergerForProperty = /**
     * @param {?} propertyName
     * @return {?}
     */
    function (propertyName) {
        var /** @type {?} */ manager = this.managerForProperty(propertyName);
        return manager._merger;
    };
    /**
     * @param {?} val
     * @return {?}
     */
    Meta.prototype.isPropertyMergerIsChaining = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(val.isPropMergerIsChainingMark) && val.isPropMergerIsChainingMark;
    };
    /**
     * @param {?} trait
     * @return {?}
     */
    Meta.prototype.groupForTrait = /**
     * @param {?} trait
     * @return {?}
     */
    function (trait) {
        return 'default';
    };
    /**
     * @return {?}
     */
    Meta.prototype._logRuleStats = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ total = 0;
        var /** @type {?} */ values = this._keyData.keys();
        var /** @type {?} */ counts = [];
        try {
            for (var _a = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(Array.from(values)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var id = _b.value;
                var /** @type {?} */ keyData = this._keyData.get(id);
                var /** @type {?} */ valuess = keyData.ruleVecs.values();
                try {
                    for (var valuess_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(valuess), valuess_1_1 = valuess_1.next(); !valuess_1_1.done; valuess_1_1 = valuess_1.next()) {
                        var vm = valuess_1_1.value;
                        var /** @type {?} */ kvc = new KeyValueCount(keyData._key, (/** @type {?} */ (vm))['_value'], Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(vm._arr) ? vm._arr[0] : 0);
                        total += kvc.count;
                        counts.push(kvc);
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (valuess_1_1 && !valuess_1_1.done && (_c = valuess_1.return)) _c.call(valuess_1);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_6) throw e_6.error; }
        }
        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].sort(counts, function (o1, o2) { return o2.count - o1.count; });
        var /** @type {?} */ buf = new _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["StringJoiner"]([]);
        var /** @type {?} */ c = Math.min(10, counts.length);
        buf.add('Total index entries comparisons performed: ' + Match._Debug_ElementProcessCount);
        buf.add('\nTotal index entries: ' + total);
        buf.add('\nTop  keys/values: ' + c);
        for (var /** @type {?} */ i = 0; i < c; i++) {
            var /** @type {?} */ kvc = counts[i];
            buf.add('     ' + kvc.key + '  = ' + kvc.value + ' : ' + kvc.count + ' entries');
            buf.add('\n');
        }
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["print"])(buf.toString());
        var e_6, _d, e_5, _c;
    };
    /**
     * @return {?}
     */
    Meta.prototype.toString = /**
     * @return {?}
     */
    function () {
        return 'Meta';
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Meta.prototype.isNullMarker = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(value) && value['markernull'];
    };
    /**
     * @param {?} testRuleName
     * @param {?} source
     * @return {?}
     */
    Meta.prototype.addTestUserRule = /**
     * @param {?} testRuleName
     * @param {?} source
     * @return {?}
     */
    function (testRuleName, source) {
        this._testRules.set(testRuleName, source);
    };
    Meta.KeyAny = '*';
    Meta.KeyDeclare = 'declare';
    Meta.KeyTrait = 'trait';
    Meta.LowRulePriority = -100000;
    Meta.SystemRulePriority = -200000;
    Meta.ClassRulePriority = -100000;
    Meta.TemplateRulePriority = 100000;
    Meta.EditorRulePriority = 200000;
    Meta.MaxKeyDatas = 64;
    Meta.NullMarker = { markernull: true };
    Meta.ScopeKey = 'scopeKey';
    Meta.DeclRule = 'declRule';
    /**
     *
     * PartialIndexing indexes each rule by a single (well chosen) key and evaluates other parts of
     * the selector on the index-filtered matches (generally this is a  win since may selectors are
     * not selective, resulting in huge rule vectors)
     *
     */
    Meta._UsePartialIndexing = true;
    Meta._DebugDoubleCheckMatches = false;
    Meta.PropertyMerger_DeclareList = null;
    Meta.PropertyMerger_Traits = null;
    Meta.PropertyMerger_List = null;
    Meta.Transformer_KeyPresent = null;
    return Meta;
}());
var KeyValueCount = /** @class */ (function () {
    function KeyValueCount(key, value, count) {
        this.key = key;
        this.value = value;
        this.count = count;
    }
    return KeyValueCount;
}());
/**
 * Store of policy information for particular properties -- most significantly, how
 * successive values of this property are to be *merged* during rule application.
 * (See Meta.registerPropertyMerger).  E.g. 'visible', 'trait', and 'valid' all have unique
 * merge policies.
 */
var  /**
 * Store of policy information for particular properties -- most significantly, how
 * successive values of this property are to be *merged* during rule application.
 * (See Meta.registerPropertyMerger).  E.g. 'visible', 'trait', and 'valid' all have unique
 * merge policies.
 */
PropertyManager = /** @class */ (function () {
    function PropertyManager(_name) {
        this._name = _name;
    }
    /**
     * @param {?} propertyName
     * @param {?} orig
     * @param {?} newValue
     * @param {?} isDeclare
     * @return {?}
     */
    PropertyManager.prototype.mergeProperty = /**
     * @param {?} propertyName
     * @param {?} orig
     * @param {?} newValue
     * @param {?} isDeclare
     * @return {?}
     */
    function (propertyName, orig, newValue, isDeclare) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(orig)) {
            return newValue;
        }
        if (newValue instanceof OverrideValue) {
            return (/** @type {?} */ (newValue)).value();
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._merger)) {
            // Perhaps should have a data-type-based merger registry?
            if (orig instanceof Map) {
                if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(newValue) && newValue instanceof Map) {
                    // merge maps
                    // todo: TEST check outcome of the merge and compare
                    var /** @type {?} */ origClone = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].clone(orig);
                    newValue = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].mergeMapIntoMapWithObject(origClone, newValue, true);
                }
            }
            return newValue;
        }
        if (!(this._merger instanceof PropertyMergerDynamic) &&
            (orig instanceof DynamicPropertyValue || newValue instanceof DynamicPropertyValue)) {
            return new DeferredOperationChain(this._merger, orig, newValue);
        }
        return this._merger.merge(orig, newValue, isDeclare);
    };
    return PropertyManager;
}());
/**
 * Wrapper for a value that should, in rule application, override any previous value for its
 * property.  This can be used to override default property value merge policy, for instance
 * allowing the 'visible' property to be forced from false to true.
 */
var  /**
 * Wrapper for a value that should, in rule application, override any previous value for its
 * property.  This can be used to override default property value merge policy, for instance
 * allowing the 'visible' property to be forced from false to true.
 */
OverrideValue = /** @class */ (function () {
    function OverrideValue(_value) {
        this._value = _value;
    }
    /**
     * @return {?}
     */
    OverrideValue.prototype.value = /**
     * @return {?}
     */
    function () {
        return this._value === 'null' ? null : this._value;
    };
    /**
     * @return {?}
     */
    OverrideValue.prototype.toString = /**
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._value) ? this._value.toString() + '!' : 'null' + '!';
    };
    return OverrideValue;
}());
/**
 * KeyData is the primary structure for representing information about context keys
 * (e.g. 'class', 'layout', 'operation', 'field', ...), including an index of rules
 * that match on particular values of that key (_ValueMatches).
 *
 * Note that every context key has a small integer ID (0-63) and these are uses in
 * (long) masks for certain rule matching operations.
 */
var  /**
 * KeyData is the primary structure for representing information about context keys
 * (e.g. 'class', 'layout', 'operation', 'field', ...), including an index of rules
 * that match on particular values of that key (_ValueMatches).
 *
 * Note that every context key has a small integer ID (0-63) and these are uses in
 * (long) masks for certain rule matching operations.
 */
KeyData = /** @class */ (function () {
    function KeyData(_key, _id) {
        this._key = _key;
        this._id = _id;
        this._isPropertyScope = false;
        this._ruleVecs = new typescript_collections__WEBPACK_IMPORTED_MODULE_2__["Dictionary"]();
        this._any = this.get(Meta.KeyAny);
    }
    /**
     * @return {?}
     */
    KeyData.prototype.maskValue = /**
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["shiftLeft"])(1, this._id);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    KeyData.prototype.get = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(value)) {
            value = Meta.NullMarker;
        }
        else if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._transformer)) {
            value = this._transformer.tranformForMatch(value);
        }
        var /** @type {?} */ matches = this._ruleVecs.getValue(value);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(matches)) {
            matches = new ValueMatches(value);
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(value) && !_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["BooleanWrapper"].isFalse(value)) {
                matches._parent = this._any;
            }
            this._ruleVecs.setValue(value, matches);
        }
        return matches;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    KeyData.prototype.matchValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(value)) {
            var /** @type {?} */ list = value;
            if (list.length === 1) {
                return this.get(list[0]);
            }
            var /** @type {?} */ multi_1 = new MultiMatchValue();
            _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].forEachWithIndex(list, function (v, i) {
                multi_1.data.push(_this.get(v));
            });
            return multi_1;
        }
        else {
            return this.get(value);
        }
    };
    /**
     * @param {?} value
     * @param {?} id
     * @return {?}
     */
    KeyData.prototype.addEntry = /**
     * @param {?} value
     * @param {?} id
     * @return {?}
     */
    function (value, id) {
        var /** @type {?} */ matches = this.get(value);
        var /** @type {?} */ before = matches._arr;
        var /** @type {?} */ after = Match.addInt(before, id);
        if (before !== after) {
            matches._arr = after;
        }
    };
    /**
     * @param {?} owner
     * @param {?} value
     * @return {?}
     */
    KeyData.prototype.lookup = /**
     * @param {?} owner
     * @param {?} value
     * @return {?}
     */
    function (owner, value) {
        var _this = this;
        var /** @type {?} */ matches = this.get(value);
        if (!matches._read && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._observers)) {
            try {
                if (!matches._read) {
                    // notify
                    if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(value)) {
                        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].forEachWithIndex(this._observers, function (v, i) {
                            v.notify(owner, _this._key, value);
                        });
                    }
                }
                matches._read = true;
            }
            finally {
            }
        }
        // check if parent has changed and need to union in parent data
        matches.checkParent();
        return matches._arr;
    };
    /**
     * @param {?} value
     * @param {?} parentValue
     * @return {?}
     */
    KeyData.prototype.setParent = /**
     * @param {?} value
     * @param {?} parentValue
     * @return {?}
     */
    function (value, parentValue) {
        var /** @type {?} */ parent = this.get(parentValue);
        var /** @type {?} */ child = this.get(value);
        child._parent = parent;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    KeyData.prototype.parent = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var /** @type {?} */ child = this.get(value);
        return child._parent._value;
    };
    /**
     * @param {?} o
     * @return {?}
     */
    KeyData.prototype.addObserver = /**
     * @param {?} o
     * @return {?}
     */
    function (o) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._observers)) {
            this._observers = new Array();
        }
        this._observers.push(o);
    };
    Object.defineProperty(KeyData.prototype, "isPropertyScope", {
        // If this key defines a scope for properties (e.g. field, class, action)
        // this this returns the name of the selector key for those properties
        // (e.g. field_p, class_p)
        get: /**
         * @return {?}
         */
        function () {
            return this._isPropertyScope;
        },
        set: /**
         * @param {?} yn
         * @return {?}
         */
        function (yn) {
            this._isPropertyScope = yn;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KeyData.prototype, "ruleVecs", {
        get: /**
         * @return {?}
         */
        function () {
            return this._ruleVecs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KeyData.prototype, "key", {
        get: /**
         * @return {?}
         */
        function () {
            return this._key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KeyData.prototype, "id", {
        get: /**
         * @return {?}
         */
        function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KeyData.prototype, "observers", {
        get: /**
         * @return {?}
         */
        function () {
            return this._observers;
        },
        enumerable: true,
        configurable: true
    });
    return KeyData;
}());
/**
 * Store of policy information for particular properties -- most significantly, how
 * successive values of this property are to be *merged* during rule application.
 * (See Meta.registerPropertyMerger).  E.g. 'visible', 'trait', and 'valid' all have unique
 * merge policies.
 */
var  /**
 * Store of policy information for particular properties -- most significantly, how
 * successive values of this property are to be *merged* during rule application.
 * (See Meta.registerPropertyMerger).  E.g. 'visible', 'trait', and 'valid' all have unique
 * merge policies.
 */
PropertyMap = /** @class */ (function () {
    function PropertyMap(entries) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(entries)) {
            this._map = new Map(entries);
        }
        else {
            this._map = new Map();
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    PropertyMap.prototype.get = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this._map.get(key);
    };
    /**
     * @return {?}
     */
    PropertyMap.prototype.keys = /**
     * @return {?}
     */
    function () {
        return this._map.keys();
    };
    /**
     * @return {?}
     */
    PropertyMap.prototype.values = /**
     * @return {?}
     */
    function () {
        return this._map.values();
    };
    /**
     * @return {?}
     */
    PropertyMap.prototype.clear = /**
     * @return {?}
     */
    function () {
        this._map.clear();
    };
    /**
     * @param {?} key
     * @param {?=} value
     * @return {?}
     */
    PropertyMap.prototype.set = /**
     * @param {?} key
     * @param {?=} value
     * @return {?}
     */
    function (key, value) {
        return this._map.set(key, value);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    PropertyMap.prototype.delete = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this._map.delete(key);
    };
    /**
     * @param {?} callbackfn
     * @param {?=} thisArg
     * @return {?}
     */
    PropertyMap.prototype.forEach = /**
     * @param {?} callbackfn
     * @param {?=} thisArg
     * @return {?}
     */
    function (callbackfn, thisArg) {
        this._map.forEach(callbackfn);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    PropertyMap.prototype.has = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this._map.has(key);
    };
    /**
     * @return {?}
     */
    PropertyMap.prototype[Symbol.iterator] = /**
     * @return {?}
     */
    function () {
        return this._map[Symbol.iterator]();
    };
    /**
     * @return {?}
     */
    PropertyMap.prototype.entries = /**
     * @return {?}
     */
    function () {
        return this._map.entries();
    };
    Object.defineProperty(PropertyMap.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._map.size;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PropertyMap.prototype.awakeProperties = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].iterable(this).forEach(function (value, key) {
            if (isPropertyMapAwaking(value)) {
                var /** @type {?} */ newValue = value.awakeForPropertyMap(_this);
                if (newValue !== value) {
                    _this.set(key, newValue);
                }
            }
        });
    };
    /**
     * @param {?} key
     * @return {?}
     */
    PropertyMap.prototype.addContextKey = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._contextPropertiesUpdated)) {
            this._contextPropertiesUpdated = new Array();
        }
        this._contextPropertiesUpdated.push(key);
    };
    Object.defineProperty(PropertyMap.prototype, "contextKeysUpdated", {
        get: /**
         * @return {?}
         */
        function () {
            return this._contextPropertiesUpdated;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PropertyMap.prototype.toString = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // todo: find better way for the string. thsi is also used as key for the dictionary
        // not really efficient
        var /** @type {?} */ sj = new _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["StringJoiner"](['PropertyMap:']);
        sj.add(this.size + ',');
        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].iterable(this).forEach(function (value, key) {
            if (isPropertyMapAwaking(value)) {
                var /** @type {?} */ newValue = value.awakeForPropertyMap(_this);
                if (newValue !== value) {
                    sj.add(key + ':' + value);
                    sj.add(', ');
                }
            }
        });
        return sj.toString();
    };
    return PropertyMap;
}());
/**
 * @abstract
 */
var  /**
 * @abstract
 */
PropertyMergerDynamic = /** @class */ (function () {
    function PropertyMergerDynamic() {
    }
    /**
     * @param {?} orig
     * @param {?} override
     * @param {?} isDeclare
     * @return {?}
     */
    PropertyMergerDynamic.prototype.merge = /**
     * @param {?} orig
     * @param {?} override
     * @param {?} isDeclare
     * @return {?}
     */
    function (orig, override, isDeclare) {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["unimplemented"])();
    };
    /**
     * @return {?}
     */
    PropertyMergerDynamic.prototype.toString = /**
     * @return {?}
     */
    function () {
        return 'PropertyMergerDynamic';
    };
    return PropertyMergerDynamic;
}());
var PropertyMerger_Overwrite = /** @class */ (function () {
    function PropertyMerger_Overwrite() {
    }
    /**
     * @param {?} orig
     * @param {?} override
     * @param {?} isDeclare
     * @return {?}
     */
    PropertyMerger_Overwrite.prototype.merge = /**
     * @param {?} orig
     * @param {?} override
     * @param {?} isDeclare
     * @return {?}
     */
    function (orig, override, isDeclare) {
        return override;
    };
    /**
     * @return {?}
     */
    PropertyMerger_Overwrite.prototype.toString = /**
     * @return {?}
     */
    function () {
        return 'OVERWRITE';
    };
    return PropertyMerger_Overwrite;
}());
/**
 * PropertyMerger for properties the should be unioned as lists
 */
var  /**
 * PropertyMerger for properties the should be unioned as lists
 */
PropertyMerger_List = /** @class */ (function () {
    function PropertyMerger_List() {
    }
    /**
     * @param {?} orig
     * @param {?} override
     * @param {?} isDeclare
     * @return {?}
     */
    PropertyMerger_List.prototype.merge = /**
     * @param {?} orig
     * @param {?} override
     * @param {?} isDeclare
     * @return {?}
     */
    function (orig, override, isDeclare) {
        if (!(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(orig)) && !(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(override)) && Meta.objectEquals(orig, override)) {
            return orig;
        }
        var /** @type {?} */ l1 = Meta.toList(orig);
        var /** @type {?} */ l2 = Meta.toList(override);
        var /** @type {?} */ result = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].clone(l1);
        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].addElementsIfAbsent(result, l2);
        return result;
    };
    return PropertyMerger_List;
}());
/**
 * PropertyMerger for properties the should override normally, but return lists when
 * in declare mode (e.g. 'class', 'field', 'layout', ...)
 */
var  /**
 * PropertyMerger for properties the should override normally, but return lists when
 * in declare mode (e.g. 'class', 'field', 'layout', ...)
 */
PropertyMergerDeclareList = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyMergerDeclareList, _super);
    function PropertyMergerDeclareList() {
        return _super.call(this) || this;
    }
    /**
     * @param {?} orig
     * @param {?} override
     * @param {?} isDeclare
     * @return {?}
     */
    PropertyMergerDeclareList.prototype.merge = /**
     * @param {?} orig
     * @param {?} override
     * @param {?} isDeclare
     * @return {?}
     */
    function (orig, override, isDeclare) {
        if (!isDeclare) {
            return override;
        }
        if (!(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(orig)) && !(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(override)) && Meta.objectEquals(orig, override)) {
            return orig;
        }
        var /** @type {?} */ result = [];
        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].addElementsIfAbsent(result, Meta.toList(orig));
        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].addElementsIfAbsent(result, Meta.toList(override));
        return result;
    };
    /**
     * @return {?}
     */
    PropertyMergerDeclareList.prototype.toString = /**
     * @return {?}
     */
    function () {
        return 'PropertyMergerDeclareList';
    };
    return PropertyMergerDeclareList;
}(PropertyMergerDynamic));
/**
 * PropertyMerger for the 'trait' property.  Generally, traits are unioned, except for traits
 * from the same 'traitGroup', which override (i.e. only one trait from each traitGroup should
 * survive).
 */
var  /**
 * PropertyMerger for the 'trait' property.  Generally, traits are unioned, except for traits
 * from the same 'traitGroup', which override (i.e. only one trait from each traitGroup should
 * survive).
 */
PropertyMergerDeclareListForTrait = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyMergerDeclareListForTrait, _super);
    function PropertyMergerDeclareListForTrait() {
        return _super.call(this) || this;
    }
    /**
     * @param {?} orig
     * @param {?} override
     * @param {?} isDeclare
     * @return {?}
     */
    PropertyMergerDeclareListForTrait.prototype.merge = /**
     * @param {?} orig
     * @param {?} override
     * @param {?} isDeclare
     * @return {?}
     */
    function (orig, override, isDeclare) {
        if (isDeclare) {
            return _super.prototype.merge.call(this, orig, override, isDeclare);
        }
        // if we're override a single element with itself, don't go List...
        if (!Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(orig) && !Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(override) && Meta.objectEquals(orig, override)) {
            return orig;
        }
        var /** @type {?} */ origL = Meta.toList(orig);
        var /** @type {?} */ overrideL = Meta.toList(override);
        var /** @type {?} */ result = [];
        try {
            for (var origL_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(origL), origL_1_1 = origL_1.next(); !origL_1_1.done; origL_1_1 = origL_1.next()) {
                var trait = origL_1_1.value;
                if (trait instanceof OverrideValue) {
                    trait = (/** @type {?} */ (trait)).value();
                }
                var /** @type {?} */ canAdd = true;
                var /** @type {?} */ group = this._meta.groupForTrait(trait);
                if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(group)) {
                    try {
                        for (var overrideL_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(overrideL), overrideL_1_1 = overrideL_1.next(); !overrideL_1_1.done; overrideL_1_1 = overrideL_1.next()) {
                            var overrideTrait = overrideL_1_1.value;
                            if (overrideTrait instanceof OverrideValue) {
                                overrideTrait = (/** @type {?} */ (overrideTrait)).value();
                            }
                            if (group === this._meta.groupForTrait(overrideTrait)) {
                                canAdd = false;
                                break;
                            }
                        }
                    }
                    catch (e_7_1) { e_7 = { error: e_7_1 }; }
                    finally {
                        try {
                            if (overrideL_1_1 && !overrideL_1_1.done && (_a = overrideL_1.return)) _a.call(overrideL_1);
                        }
                        finally { if (e_7) throw e_7.error; }
                    }
                }
                if (canAdd) {
                    result.push(trait);
                }
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (origL_1_1 && !origL_1_1.done && (_b = origL_1.return)) _b.call(origL_1);
            }
            finally { if (e_8) throw e_8.error; }
        }
        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].addElementsIfAbsent(result, overrideL);
        return result;
        var e_8, _b, e_7, _a;
    };
    /**
     * @return {?}
     */
    PropertyMergerDeclareListForTrait.prototype.toString = /**
     * @return {?}
     */
    function () {
        return 'PropertyMergerDeclareListForTrait';
    };
    return PropertyMergerDeclareListForTrait;
}(PropertyMergerDeclareList));
/**
 * PropertyMerger implementing AND semantics -- i.e. false trumps true.
 * (Used, for instance, for the properties 'visible' and 'editable')
 */
var  /**
 * PropertyMerger implementing AND semantics -- i.e. false trumps true.
 * (Used, for instance, for the properties 'visible' and 'editable')
 */
PropertyMerger_And = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyMerger_And, _super);
    function PropertyMerger_And() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isPropMergerIsChainingMark = true;
        return _this;
    }
    /**
     * @param {?} orig
     * @param {?} override
     * @param {?} isDeclare
     * @return {?}
     */
    PropertyMerger_And.prototype.merge = /**
     * @param {?} orig
     * @param {?} override
     * @param {?} isDeclare
     * @return {?}
     */
    function (orig, override, isDeclare) {
        // null will reset (so that it can be overridden to true subsequently
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(override)) {
            return null;
        }
        // If we can evaluate statically, do it now
        if ((Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBoolean"])(orig) && !(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["BooleanWrapper"].boleanValue(orig))) ||
            (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBoolean"])(override) && !(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["BooleanWrapper"].boleanValue(override)))) {
            return false;
        }
        // ANDing with true is a noop -- return new value
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBoolean"])(orig) && _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["BooleanWrapper"].boleanValue(orig)) {
            return (override instanceof DynamicPropertyValue) ? override
                : _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["BooleanWrapper"].boleanValue(override);
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBoolean"])(override) && _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["BooleanWrapper"].boleanValue(override)) {
            return (orig instanceof DynamicPropertyValue) ? orig : _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["BooleanWrapper"].boleanValue(override);
        }
        // if one of our values is dynamic, defer
        if ((orig instanceof DynamicPropertyValue || override instanceof DynamicPropertyValue)) {
            return new DeferredOperationChain(this, orig, override);
        }
        return _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["BooleanWrapper"].boleanValue(orig) && _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["BooleanWrapper"].boleanValue(override);
    };
    /**
     * @return {?}
     */
    PropertyMerger_And.prototype.toString = /**
     * @return {?}
     */
    function () {
        return 'AND';
    };
    return PropertyMerger_And;
}(PropertyMergerDynamic));
var PropertyMerger_Valid = /** @class */ (function () {
    function PropertyMerger_Valid() {
        this.isPropMergerIsChainingMark = true;
    }
    /**
     * @param {?} orig
     * @param {?} override
     * @param {?} isDeclare
     * @return {?}
     */
    PropertyMerger_Valid.prototype.merge = /**
     * @param {?} orig
     * @param {?} override
     * @param {?} isDeclare
     * @return {?}
     */
    function (orig, override, isDeclare) {
        /**
                 *
                 *
                 return (isString(override) || ( isBoolean(override) &&
                 !(BooleanWrapper.boleanValue(override)))) ? override : orig;
                 */
        // if first is error (error message or false, it wins), otherwise second
        return (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isString"])(override) || (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBoolean"])(override) && _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["BooleanWrapper"].isFalse(override)))
            ? override : orig;
    };
    /**
     * @return {?}
     */
    PropertyMerger_Valid.prototype.toString = /**
     * @return {?}
     */
    function () {
        return 'VALIDATE';
    };
    return PropertyMerger_Valid;
}());
/**
 * A group of rules originating from a common source.
 * All rules must be added to the rule base as part of a RuleSet.
 */
var  /**
 * A group of rules originating from a common source.
 * All rules must be added to the rule base as part of a RuleSet.
 */
RuleSet = /** @class */ (function () {
    function RuleSet(_meta) {
        this._meta = _meta;
        this._start = 0;
        this._end = 0;
        this._editableStart = -1;
        this._rank = 0;
    }
    /**
     * @return {?}
     */
    RuleSet.prototype.disableRules = /**
     * @return {?}
     */
    function () {
        for (var /** @type {?} */ i = this._start; i < this._end; i++) {
            this._meta._rules[i].disable();
        }
        this._meta.clearCaches();
    };
    Object.defineProperty(RuleSet.prototype, "filePath", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filePath;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} editableOnly
     * @return {?}
     */
    RuleSet.prototype.rules = /**
     * @param {?} editableOnly
     * @return {?}
     */
    function (editableOnly) {
        var /** @type {?} */ result = [];
        var /** @type {?} */ i = (editableOnly) ? (this._editableStart === -1 ? this._end : this._editableStart)
            : this._start;
        for (; i < this._end; i++) {
            var /** @type {?} */ r = this._meta._rules[i];
            if (!r.disabled() && !this._meta.isTraitExportRule(r)) {
                result.push(r);
            }
        }
        return result;
    };
    /**
     * @return {?}
     */
    RuleSet.prototype.startRank = /**
     * @return {?}
     */
    function () {
        return (this._start < this._meta._ruleCount)
            ? this._meta._rules[this._start].rank
            : this._rank - (this._end - this._start);
    };
    /**
     * @return {?}
     */
    RuleSet.prototype.allocateNextRuleEntry = /**
     * @return {?}
     */
    function () {
        return (this._meta._ruleCount > this._end) ? this._meta._ruleCount++ : this._end++;
    };
    Object.defineProperty(RuleSet.prototype, "start", {
        get: /**
         * @return {?}
         */
        function () {
            return this._start;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RuleSet.prototype, "end", {
        get: /**
         * @return {?}
         */
        function () {
            return this._end;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RuleSet.prototype, "editableStart", {
        get: /**
         * @return {?}
         */
        function () {
            return this._editableStart;
        },
        enumerable: true,
        configurable: true
    });
    return RuleSet;
}());
/**
 *
 * Uniquely represents a particular key/value in the Meta scope, and indexes all rules
 * with (indexed) Selectors matching that key/value.
 * ValueMatches also models *inheritance* by allowing one key/value to have another
 * as its 'parent' and thereby match on any Selector (and rule) that its parent would.
 *
 * For instance, this enables a rule on class=Number to apply to class=Integer and
 * class=BigDecimal, and one on class=* to apply to any.
 *
 * The utility of 'parent' is not limited, of course, to the key 'class': all keys
 * take advantage of the parent '*' to support unqualified matches on that key, and
 * keys like 'operation' define a value hierarchy ( 'inspect' -> {'view', 'search'},
 * 'search' -> {'keywordSearch', 'textSearch'})
 */
var  /**
 *
 * Uniquely represents a particular key/value in the Meta scope, and indexes all rules
 * with (indexed) Selectors matching that key/value.
 * ValueMatches also models *inheritance* by allowing one key/value to have another
 * as its 'parent' and thereby match on any Selector (and rule) that its parent would.
 *
 * For instance, this enables a rule on class=Number to apply to class=Integer and
 * class=BigDecimal, and one on class=* to apply to any.
 *
 * The utility of 'parent' is not limited, of course, to the key 'class': all keys
 * take advantage of the parent '*' to support unqualified matches on that key, and
 * keys like 'operation' define a value hierarchy ( 'inspect' -> {'view', 'search'},
 * 'search' -> {'keywordSearch', 'textSearch'})
 */
ValueMatches = /** @class */ (function () {
    function ValueMatches(value) {
        this._read = false;
        this._parentSize = 0;
        this._value = value;
    }
    /**
     * @return {?}
     */
    ValueMatches.prototype.checkParent = /**
     * @return {?}
     */
    function () {
        // todo: performance: keep a rule set version # and only do this when the rule set has
        // reloaded
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._parent)) {
            this._parent.checkParent();
            var /** @type {?} */ parentArr = this._parent._arr;
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(parentArr) && parentArr[0] !== this._parentSize) {
                this._arr = Match.union(this._arr, parentArr);
                this._parentSize = parentArr[0];
            }
        }
    };
    /**
     * @param {?} other
     * @return {?}
     */
    ValueMatches.prototype.matches = /**
     * @param {?} other
     * @return {?}
     */
    function (other) {
        if (!(other instanceof ValueMatches)) {
            return other.matches(this);
        }
        // we recurse up parent chain to do superclass matches
        return (other === this) || (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._parent) && this._parent.matches(other));
    };
    /**
     * @param {?} other
     * @return {?}
     */
    ValueMatches.prototype.updateByAdding = /**
     * @param {?} other
     * @return {?}
     */
    function (other) {
        var /** @type {?} */ multi = new MultiMatchValue();
        multi.data.push(this);
        return multi.updateByAdding(other);
    };
    return ValueMatches;
}());
var MultiMatchValue = /** @class */ (function () {
    function MultiMatchValue() {
        this.data = [];
    }
    /**
     * @param {?} other
     * @return {?}
     */
    MultiMatchValue.prototype.matches = /**
     * @param {?} other
     * @return {?}
     */
    function (other) {
        if (other instanceof MultiMatchValue) {
            // list / list comparison: any combo can match
            for (var /** @type {?} */ i = 0; i < this.data.length; i++) {
                if (other.matches(this.data[i])) {
                    return true;
                }
            }
        }
        else {
            // single value against array: one must match
            for (var /** @type {?} */ i = 0; i < this.data.length; i++) {
                if (this.data[i].matches(other)) {
                    return true;
                }
            }
        }
        return false;
    };
    /**
     * @param {?} other
     * @return {?}
     */
    MultiMatchValue.prototype.updateByAdding = /**
     * @param {?} other
     * @return {?}
     */
    function (other) {
        if (other instanceof MultiMatchValue) {
            var /** @type {?} */ matchValue = /** @type {?} */ (other);
            _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].addAll(this.data, matchValue.data);
        }
        else {
            this.data.push(other);
        }
        return this;
    };
    return MultiMatchValue;
}());
var KeyValueTransformer_KeyPresent = /** @class */ (function () {
    function KeyValueTransformer_KeyPresent() {
    }
    /**
     * @param {?} o
     * @return {?}
     */
    KeyValueTransformer_KeyPresent.prototype.tranformForMatch = /**
     * @param {?} o
     * @return {?}
     */
    function (o) {
        return (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(o) && !(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["BooleanWrapper"].isFalse(o))) ? true : false;
    };
    return KeyValueTransformer_KeyPresent;
}());
/**
 * @param {?} arg
 * @return {?}
 */
function isPropertyMapAwaking(arg) {
    return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(arg) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(arg.propertyAwaking);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright 2017 SAP Ariba
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Based on original work: MetaUI: Craig Federighi (2008)
 *
 */
var ItemProperties = /** @class */ (function () {
    function ItemProperties(name, properties, hidden) {
        this.name = name;
        this.properties = properties;
        this.hidden = hidden;
    }
    return ItemProperties;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * ObjectMeta is resposible for setting up everything related to class, field, actions
 *
 */
var ObjectMeta = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ObjectMeta, _super);
    // todo: implement new decorators in typescript if we want ot annotate _annotationProcessors
    function ObjectMeta() {
        var _this = _super.call(this) || this;
        _this._traitToGroupGeneration = -1;
        _this.registerKeyInitObserver(ObjectMeta.KeyClass, new IntrospectionMetaProvider());
        _this.registerKeyInitObserver(ObjectMeta.KeyType, new FieldTypeIntrospectionMetaProvider());
        // These keys define scopes for their properties
        // These keys define scopes for their properties
        _this.defineKeyAsPropertyScope(ObjectMeta.KeyField);
        _this.defineKeyAsPropertyScope(ObjectMeta.KeyAction);
        _this.defineKeyAsPropertyScope(ObjectMeta.KeyActionCategory);
        _this.defineKeyAsPropertyScope(ObjectMeta.KeyClass);
        // policies for chaining certain well known properties
        // policies for chaining certain well known properties
        _this.registerPropertyMerger(ObjectMeta.KeyVisible, new PropertyMerger_And());
        _this.registerPropertyMerger(ObjectMeta.KeyEditable, new PropertyMerger_And());
        _this.registerPropertyMerger(ObjectMeta.KeyValid, new OMPropertyMerger_Valid());
        _this.registerPropertyMerger(ObjectMeta.KeyClass, Meta.PropertyMerger_DeclareList);
        _this.registerPropertyMerger(ObjectMeta.KeyField, Meta.PropertyMerger_DeclareList);
        _this.registerPropertyMerger(ObjectMeta.KeyAction, Meta.PropertyMerger_DeclareList);
        _this.registerPropertyMerger(ObjectMeta.KeyActionCategory, Meta.PropertyMerger_DeclareList);
        _this.registerPropertyMerger(ObjectMeta.KeyTraitGroup, Meta.PropertyMerger_DeclareList);
        _this.mirrorPropertyToContext(ObjectMeta.KeyClass, ObjectMeta.KeyClass);
        _this.mirrorPropertyToContext(ObjectMeta.KeyType, ObjectMeta.KeyType);
        _this.mirrorPropertyToContext(ObjectMeta.KeyElementType, ObjectMeta.KeyElementType);
        _this.mirrorPropertyToContext(ObjectMeta.KeyTrait, Meta.KeyTrait);
        _this.mirrorPropertyToContext(ObjectMeta.KeyEditable, ObjectMeta.KeyEditable);
        _this.registerValueTransformerForKey(ObjectMeta.KeyObject, Meta.Transformer_KeyPresent);
        // todo: try to support decorators and how we can put meta data into object @Traits,
        // @Properties, @Action
        return _this;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    ObjectMeta.validationError = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        var /** @type {?} */ error = context.propertyForKey(ObjectMeta.KeyValid);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(error)) {
            return null;
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBoolean"])(error)) {
            return _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["BooleanWrapper"].boleanValue(error) ? null : 'Invalid entry';
        }
        return error.toString();
    };
    /*
     *  Provide subclass context with conveniences for getting object field values
     */
    /**
     * @return {?}
     */
    ObjectMeta.prototype.newContext = /**
     * @return {?}
     */
    function () {
        return new ObjectMetaContext(this, false);
    };
    // Use a special map subsclass for our Properties
    /**
     * @return {?}
     */
    ObjectMeta.prototype.newPropertiesMap = /**
     * @return {?}
     */
    function () {
        return new ObjectMetaPropertyMap();
    };
    /**
     * @param {?} context
     * @param {?} key
     * @return {?}
     */
    ObjectMeta.prototype.itemNames = /**
     * @param {?} context
     * @param {?} key
     * @return {?}
     */
    function (context, key) {
        context.push();
        context.set(ObjectMeta.KeyDeclare, key);
        var /** @type {?} */ itemsNames = context.listPropertyForKey(key);
        context.pop();
        return itemsNames;
    };
    /**
     * @param {?} context
     * @param {?} key
     * @param {?} filterHidden
     * @return {?}
     */
    ObjectMeta.prototype.itemProperties = /**
     * @param {?} context
     * @param {?} key
     * @param {?} filterHidden
     * @return {?}
     */
    function (context, key, filterHidden) {
        return this.itemPropertiesForNames(context, key, this.itemNames(context, key), filterHidden);
    };
    /**
     * @param {?} context
     * @param {?} key
     * @param {?} itemNames
     * @param {?} filterHidden
     * @return {?}
     */
    ObjectMeta.prototype.itemPropertiesForNames = /**
     * @param {?} context
     * @param {?} key
     * @param {?} itemNames
     * @param {?} filterHidden
     * @return {?}
     */
    function (context, key, itemNames, filterHidden) {
        var /** @type {?} */ result = [];
        try {
            for (var itemNames_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(itemNames), itemNames_1_1 = itemNames_1.next(); !itemNames_1_1.done; itemNames_1_1 = itemNames_1.next()) {
                var itemName = itemNames_1_1.value;
                context.push();
                context.set(key, itemName);
                var /** @type {?} */ isVisible = context.allProperties().get(ObjectMeta.KeyVisible);
                var /** @type {?} */ visible = context.staticallyResolveValue(isVisible);
                var /** @type {?} */ isHidden = (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(visible)) || _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["BooleanWrapper"].isFalse(visible);
                if (!isHidden || !filterHidden) {
                    result.push(new ItemProperties(itemName, context.allProperties(), isHidden));
                }
                context.pop();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (itemNames_1_1 && !itemNames_1_1.done && (_a = itemNames_1.return)) _a.call(itemNames_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return result;
        var e_1, _a;
    };
    /**
     * @param {?} trait
     * @return {?}
     */
    ObjectMeta.prototype.groupForTrait = /**
     * @param {?} trait
     * @return {?}
     */
    function (trait) {
        if (this._traitToGroup == null || this._traitToGroupGeneration < this.ruleSetGeneration) {
            this._traitToGroupGeneration = this.ruleSetGeneration;
            this._traitToGroup = new Map();
            var /** @type {?} */ context = this.newContext();
            try {
                for (var _a = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(this.itemNames(context, ObjectMeta.KeyTraitGroup)), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var group = _b.value;
                    context.push();
                    context.set(ObjectMeta.KeyTraitGroup, group);
                    try {
                        for (var _c = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(this.itemNames(context, ObjectMeta.KeyTrait)), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var name_1 = _d.value;
                            this._traitToGroup.set(name_1, group);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_e = _c.return)) _e.call(_c);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    context.pop();
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_f = _a.return)) _f.call(_a);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        return this._traitToGroup.get(trait);
        var e_3, _f, e_2, _e;
    };
    Object.defineProperty(ObjectMeta.prototype, "injector", {
        get: /**
         * @return {?}
         */
        function () {
            return this._injector;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._injector = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ObjectMeta.prototype, "componentRegistry", {
        get: /**
         * @return {?}
         */
        function () {
            return this._componentRegistry;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._componentRegistry = value;
        },
        enumerable: true,
        configurable: true
    });
    ObjectMeta.KeyClass = 'class';
    ObjectMeta.KeyField = 'field';
    ObjectMeta.KeyAction = 'action';
    ObjectMeta.KeyActionCategory = 'actionCategory';
    ObjectMeta.KeyObject = 'object';
    ObjectMeta.KeyValue = 'value';
    ObjectMeta.KeyType = 'type';
    ObjectMeta.KeyElementType = 'elementType';
    ObjectMeta.KeyTraitGroup = 'traitGroup';
    ObjectMeta.KeyVisible = 'visible';
    ObjectMeta.KeyEditable = 'editable';
    ObjectMeta.KeyValid = 'valid';
    ObjectMeta.KeyRank = 'rank';
    ObjectMeta.DefaultActionCategory = 'General';
    ObjectMeta._FieldPathNullMarker = new _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["FieldPath"]('null');
    return ObjectMeta;
}(Meta));
/**
 * When a class is pushed either directly or indirectly (using deffered rules) we receive a
 * ValueQueriedObserver notification in order to register  types for the object. Trying to achieve
 * at least some kind of introspection we need to implement $proto method inside the object that
 * instantiates all types which we can query.
 *
 * Ideally we want to use decorators when dealing with client side typescript class. but for cases
 * where Rules will be loaded using Rest API along with the object instance its impossible.
 */
var  /**
 * When a class is pushed either directly or indirectly (using deffered rules) we receive a
 * ValueQueriedObserver notification in order to register  types for the object. Trying to achieve
 * at least some kind of introspection we need to implement $proto method inside the object that
 * instantiates all types which we can query.
 *
 * Ideally we want to use decorators when dealing with client side typescript class. but for cases
 * where Rules will be loaded using Rest API along with the object instance its impossible.
 */
IntrospectionMetaProvider = /** @class */ (function () {
    function IntrospectionMetaProvider() {
    }
    /**
     * @param {?} meta
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    IntrospectionMetaProvider.prototype.notify = /**
     * @param {?} meta
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (meta, key, value) {
        this._meta = meta;
        var /** @type {?} */ myObject;
        var /** @type {?} */ componentRegistry = (/** @type {?} */ (this._meta)).componentRegistry;
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(componentRegistry), 'Component registry is not initialized');
        var /** @type {?} */ clazz = null;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isString"])(value) && (clazz = componentRegistry.nameToType.get(value))
            && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(clazz)) {
            myObject = new clazz();
        }
        else if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(clazz)) {
            return;
        }
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(Meta.className(myObject) === value, 'Trying to process and register a class that does not exists on Context');
        this.registerRulesForClass(myObject, value);
    };
    /**
     * @param {?} object
     * @param {?} className
     * @return {?}
     */
    IntrospectionMetaProvider.prototype.registerRulesForClass = /**
     * @param {?} object
     * @param {?} className
     * @return {?}
     */
    function (object, className$$1) {
        this._meta.keyData(ObjectMeta.KeyClass).setParent(className$$1, 'Object');
        this._meta.beginRuleSet(className$$1);
        try {
            var /** @type {?} */ selectors = [new Selector(ObjectMeta.KeyClass, className$$1)];
            var /** @type {?} */ propertyMap = this._meta.newPropertiesMap();
            selectors[0].isDecl = true;
            var /** @type {?} */ rule = new Rule(selectors, propertyMap, ObjectMeta.ClassRulePriority);
            this._meta.addRule(rule);
            this.registerRulesForFields(object, className$$1);
        }
        finally {
            this._meta.endRuleSet();
        }
    };
    /**
     * @param {?} object
     * @param {?} className
     * @return {?}
     */
    IntrospectionMetaProvider.prototype.registerRulesForFields = /**
     * @param {?} object
     * @param {?} className
     * @return {?}
     */
    function (object, className$$1) {
        // todo: Can we somehow utilize decorators? Maybe for local typescript defined object, but
        // not objects loaded as json from rest API
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(object['$proto']), 'Cannot register fields without a $proto method that will expose all the fields');
        var /** @type {?} */ instance = object['$proto']();
        var /** @type {?} */ fieldNames = Object.keys(instance);
        var /** @type {?} */ rank = 0;
        try {
            for (var fieldNames_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(fieldNames), fieldNames_1_1 = fieldNames_1.next(); !fieldNames_1_1.done; fieldNames_1_1 = fieldNames_1.next()) {
                var name_2 = fieldNames_1_1.value;
                // todo: check=>  can we rely on this ?
                var /** @type {?} */ type = instance[name_2].constructor.name;
                var /** @type {?} */ properties = new Map();
                properties.set(ObjectMeta.KeyField, name_2);
                properties.set(ObjectMeta.KeyType, type);
                properties.set(ObjectMeta.KeyVisible, true);
                if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(instance[name_2])) {
                    Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(instance[name_2].length > 0, ' Cannot register type[array] and its type without properly initialized ' +
                        'prototype');
                    var /** @type {?} */ item = instance[name_2][0];
                    var /** @type {?} */ collectionElementType = item.constructor.name;
                    properties.set(ObjectMeta.KeyElementType, collectionElementType);
                }
                var /** @type {?} */ selectorList = [
                    new Selector(ObjectMeta.KeyClass, className$$1),
                    new Selector(ObjectMeta.KeyField, name_2),
                ];
                selectorList[1].isDecl = true;
                properties.set(ObjectMeta.KeyRank, (rank++ + 1) * 10);
                var /** @type {?} */ rule = new Rule(selectorList, properties, ObjectMeta.ClassRulePriority);
                this._meta.addRule(rule);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (fieldNames_1_1 && !fieldNames_1_1.done && (_a = fieldNames_1.return)) _a.call(fieldNames_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        var e_4, _a;
    };
    return IntrospectionMetaProvider;
}());
/**
 * Registers specials types that we are read during introspections
 */
var  /**
 * Registers specials types that we are read during introspections
 */
FieldTypeIntrospectionMetaProvider = /** @class */ (function () {
    function FieldTypeIntrospectionMetaProvider() {
    }
    /**
     * @param {?} meta
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    FieldTypeIntrospectionMetaProvider.prototype.notify = /**
     * @param {?} meta
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (meta, key, value) {
        // print('FieldTypeIntrospectionMetaProvider notified of first use of field:  ' , value);
    };
    return FieldTypeIntrospectionMetaProvider;
}());
var ObjectMetaPropertyMap = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ObjectMetaPropertyMap, _super);
    function ObjectMetaPropertyMap() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ObjectMetaPropertyMap.prototype, "fieldPath", {
        get: /**
         * @return {?}
         */
        function () {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._fieldPath)) {
                var /** @type {?} */ value = this.get(ObjectMeta.KeyValue);
                var /** @type {?} */ fieldName = this.get(ObjectMeta.KeyField);
                this._fieldPath = (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(fieldName) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(value))
                    ? new _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["FieldPath"](fieldName)
                    : ObjectMeta._FieldPathNullMarker;
            }
            var /** @type {?} */ isNullPath = this._fieldPath === ObjectMeta._FieldPathNullMarker;
            return isNullPath ? null : this._fieldPath;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    ObjectMetaPropertyMap.prototype.isFieldNullMarker = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(value) && value.path === 'null';
    };
    return ObjectMetaPropertyMap;
}(PropertyMap));
var OMPropertyMerger_Valid = /** @class */ (function () {
    function OMPropertyMerger_Valid() {
        this.isPropMergerIsChainingMark = true;
    }
    /**
     * @param {?} orig
     * @param {?} override
     * @param {?} isDeclare
     * @return {?}
     */
    OMPropertyMerger_Valid.prototype.merge = /**
     * @param {?} orig
     * @param {?} override
     * @param {?} isDeclare
     * @return {?}
     */
    function (orig, override, isDeclare) {
        // if first is error (error message or false, it wins), otherwise second
        return (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isString"])(override) || (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBoolean"])(override) && _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["BooleanWrapper"].isFalse(override))) ? override : orig;
    };
    /**
     * @return {?}
     */
    OMPropertyMerger_Valid.prototype.toString = /**
     * @return {?}
     */
    function () {
        return 'VALIDATE';
    };
    return OMPropertyMerger_Valid;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *  This is generated file. Do not edit !!
 *
 * \@formatter:off
 *
 */
var /** @type {?} */ SystemRules = {
    oss: [
        {
            '_selectors': [
                {
                    '_key': 'object',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'class': {
                    't': 'Expr',
                    'v': 'Meta.className(object)'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'object',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'declare',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'class': {
                    't': 'Expr',
                    'v': 'Meta.className(object)'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'operation',
                    '_value': 'search',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'class': {
                    't': 'Expr',
                    'v': 'values.get("class")'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'operation',
                    '_value': [
                        'edit',
                        'create',
                        'search'
                    ],
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'operation',
                    '_value': [
                        'edit',
                        'create',
                        'search'
                    ],
                    '_isDecl': false
                },
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'editing': true
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'operation',
                    '_value': [
                        'edit',
                        'create',
                        'search'
                    ],
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'operation',
                    '_value': [
                        'edit',
                        'create',
                        'search'
                    ],
                    '_isDecl': false
                },
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'editing': true
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'operation',
                    '_value': [
                        'edit',
                        'create',
                        'search'
                    ],
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'operation',
                    '_value': [
                        'edit',
                        'create',
                        'search'
                    ],
                    '_isDecl': false
                },
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'editing': true
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'operation',
                    '_value': [
                        'edit',
                        'create',
                        'search'
                    ],
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'operation',
                    '_value': [
                        'edit',
                        'create',
                        'search'
                    ],
                    '_isDecl': false
                },
                {
                    '_key': 'action',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'editing': true
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'operation',
                    '_value': [
                        'edit',
                        'create',
                        'search'
                    ],
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'operation',
                    '_value': [
                        'view',
                        'list'
                    ],
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'operation',
                    '_value': [
                        'view',
                        'list'
                    ],
                    '_isDecl': false
                },
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'editing': false
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'operation',
                    '_value': [
                        'view',
                        'list'
                    ],
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'operation',
                    '_value': [
                        'view',
                        'list'
                    ],
                    '_isDecl': false
                },
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'editing': false
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'operation',
                    '_value': [
                        'view',
                        'list'
                    ],
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'operation',
                    '_value': [
                        'view',
                        'list'
                    ],
                    '_isDecl': false
                },
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'editing': false
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'operation',
                    '_value': [
                        'view',
                        'list'
                    ],
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'operation',
                    '_value': [
                        'view',
                        'list'
                    ],
                    '_isDecl': false
                },
                {
                    '_key': 'action',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'editing': false
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'operation',
                    '_value': [
                        'view',
                        'list'
                    ],
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'visible': {
                    't': 'SDW',
                    'v': '!properties.get("hidden")'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'editing',
                    '_value': true,
                    '_isDecl': false
                }
            ],
            '_properties': {
                'editable': true
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'editing',
                    '_value': false,
                    '_isDecl': false
                }
            ],
            '_properties': {
                'editable': false
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'fiveZones',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'fiveZoneLayout': true,
                'zones': [
                    'zLeft',
                    'zMiddle',
                    'zRight',
                    'zTop',
                    'zBottom',
                    'zDetail'
                ]
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'oneZone',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'zones': [
                    'zLeft',
                    'zDetail'
                ]
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'tableZones',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'zones': [
                    'zMain',
                    'zLeft',
                    'zRight',
                    'zTop',
                    'zBottom',
                    'zDetail'
                ]
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'operation',
                    '_value': [
                        'create',
                        'edit',
                        'view',
                        'search'
                    ],
                    '_isDecl': false
                }
            ],
            '_properties': {
                'trait': 'fiveZones'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'operation',
                    '_value': 'list',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'trait': 'tableZones'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'FormZones',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'FormZones',
                    '_isDecl': true
                },
                {
                    '_key': 'trait',
                    '_value': 'fiveZones',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'FormZones',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'FormZones',
                    '_isDecl': true
                },
                {
                    '_key': 'trait',
                    '_value': 'oneZone',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'FormZones',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'component': 'StringComponent',
                'bindings': {
                    'value': {
                        't': 'CFP',
                        'v': 'value'
                    }
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'boolean',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'boolean',
                    '_isDecl': false
                },
                {
                    '_key': 'editable',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'component': 'Checkbox'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'boolean',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'Number',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'bindings': {
                    'formatter': {
                        't': 'CFP',
                        'v': 'formatters.integer'
                    }
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'Number',
                    '_isDecl': false
                },
                {
                    '_key': 'editable',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'component': 'InputFieldComponent'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'Number',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'Number',
                    '_isDecl': false
                },
                {
                    '_key': 'operation',
                    '_value': 'search',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'bindings': {
                    'formatter': {
                        't': 'CFP',
                        'v': 'formatters.blankNull.integer'
                    }
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'Number',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'Date',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'component': 'DateAndTimeComponent',
                'bindings': {
                    'formatter': 'shortDate',
                    'showTime': false
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'Date',
                    '_isDecl': false
                },
                {
                    '_key': 'fiveZoneLayout',
                    '_value': true,
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'Date',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'Date',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'dateTime',
                    '_isDecl': true
                },
                {
                    '_key': 'editable',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'bindings': {
                    'formatter': 'dateTime',
                    'showTime': true
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'Date',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'java.lang.Enum',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'java.lang.Enum',
                    '_isDecl': false
                },
                {
                    '_key': 'editable',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'component': 'GenericChooserComponent',
                'bindings': {
                    'destinationClass': {
                        't': 'Expr',
                        'v': 'type'
                    },
                    'displayKey': 'name',
                    'formatter': {
                        't': 'CFP',
                        'v': 'formatters.identifier'
                    },
                    'key': {
                        't': 'Expr',
                        'v': 'field'
                    },
                    'object': {
                        't': 'Expr',
                        'v': 'object'
                    }
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'java.lang.Enum',
                    '_isDecl': false
                },
                {
                    '_key': 'editable',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'operation',
                    '_value': [
                        'search',
                        'list'
                    ],
                    '_isDecl': false
                }
            ],
            '_properties': {
                'bindings': {
                    'type': 'Popup'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'java.lang.Enum',
                    '_isDecl': false
                },
                {
                    '_key': 'editable',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'java.lang.Enum',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': [
                        'Array',
                        'Set'
                    ],
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': [
                        'Array',
                        'Set'
                    ],
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'enum',
                    '_isDecl': true
                },
                {
                    '_key': 'editable',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'component': 'GenericChooserComponent',
                'bindings': {
                    'multiselect': true,
                    'destinationClass': {
                        't': 'Expr',
                        'v': 'properties.get("enumClass")'
                    },
                    'displayKey': 'name',
                    'formatter': {
                        't': 'CFP',
                        'v': 'formatters.identifier'
                    },
                    'key': {
                        't': 'Expr',
                        'v': 'field'
                    },
                    'object': {
                        't': 'Expr',
                        'v': 'object'
                    }
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': [
                        'Array',
                        'Set'
                    ],
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': [
                        'Array',
                        'Set'
                    ],
                    '_isDecl': false
                },
                {
                    '_key': 'operation',
                    '_value': [
                        'search',
                        'list'
                    ],
                    '_isDecl': false
                }
            ],
            '_properties': {
                'visible': false
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': [
                        'Array',
                        'Set'
                    ],
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': [
                        'Array',
                        'Set'
                    ],
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'ownedToMany',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'component': 'MetaDetailTable',
                'after': 'zDetail'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': [
                        'Array',
                        'Set'
                    ],
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': '[B',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': '[B',
                    '_isDecl': false
                },
                {
                    '_key': 'editable',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'component': 'FileUploadChooser',
                'bindings': {
                    'bytes': {
                        't': 'CFP',
                        'v': 'value'
                    }
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': '[B',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': '[B',
                    '_isDecl': false
                },
                {
                    '_key': 'editable',
                    '_value': false,
                    '_isDecl': false
                }
            ],
            '_properties': {
                'bindings': {
                    'value': {
                        't': 'Expr',
                        'v': 'value ? ("" + value.length + " bytes") : "(none)"'
                    }
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': '[B',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'File',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'File',
                    '_isDecl': false
                },
                {
                    '_key': 'editable',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'component': 'FileUploadChooser',
                'bindings': {
                    'file': {
                        't': 'CFP',
                        'v': 'value'
                    }
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'File',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'File',
                    '_isDecl': false
                },
                {
                    '_key': 'editable',
                    '_value': false,
                    '_isDecl': false
                }
            ],
            '_properties': {
                'bindings': {
                    'value': {
                        't': 'Expr',
                        'v': 'value ? value.name : "(none)"'
                    }
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'File',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                },
                {
                    '_key': 'editable',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'component': 'InputFieldComponent'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'longtext',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'after': 'zBottom'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'longtext',
                    '_isDecl': true
                },
                {
                    '_key': 'editable',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'component': 'TextAreaComponent',
                'bindings': {
                    'rows': 10,
                    'cols': 60
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'longtext',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'longtext',
                    '_isDecl': true
                },
                {
                    '_key': 'operation',
                    '_value': [
                        'search',
                        'list'
                    ],
                    '_isDecl': false
                }
            ],
            '_properties': {
                'visible': false
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'longtext',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'richtext',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'bindings': {
                    'escapeUnsafeHtml': true
                },
                'after': 'zBottom'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'richtext',
                    '_isDecl': true
                },
                {
                    '_key': 'editable',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'component': 'RichTextArea',
                'bindings': {
                    'rows': 10,
                    'cols': 60
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'richtext',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'richtext',
                    '_isDecl': true
                },
                {
                    '_key': 'operation',
                    '_value': 'search',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'after': 'zNone'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'richtext',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'richtext',
                    '_isDecl': true
                },
                {
                    '_key': 'operation',
                    '_value': 'list',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'editable': false,
                'after': 'zDetail'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'richtext',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'secret',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'bindings': {
                    'formatter': {
                        't': 'CFP',
                        'v': 'formatters.hiddenPassword'
                    }
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'secret',
                    '_isDecl': true
                },
                {
                    '_key': 'editable',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'component': 'AWPasswordField',
                'bindings': {}
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'secret',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'secret',
                    '_isDecl': true
                },
                {
                    '_key': 'operation',
                    '_value': [
                        'search',
                        'list'
                    ],
                    '_isDecl': false
                }
            ],
            '_properties': {
                'visible': false
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'secret',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'truncated',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'component': 'TruncateString',
                'bindings': {
                    'size': 10
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'String',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'Binary',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'Binary',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'imageData',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'contentType': 'image/jpeg'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'Binary',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'imageData',
                    '_isDecl': true
                },
                {
                    '_key': 'editable',
                    '_value': false,
                    '_isDecl': false
                }
            ],
            '_properties': {
                'component': 'AWImageData',
                'bindings': {
                    'bytes': {
                        't': 'CFP',
                        'v': 'value'
                    },
                    'contentType': {
                        't': 'Expr',
                        'v': 'ContentTypeUtils.contentTypeNamed(properties.get("contentType"))'
                    }
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'Binary',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'imageData',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'Binary',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'imageData',
                    '_isDecl': true
                },
                {
                    '_key': 'editable',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'bindings': {
                    'awcontentLayouts': {
                        '_main': '_imgUploadPreview'
                    }
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'Binary',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'imageData',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'Binary',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'type',
                    '_value': 'Money',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'component': 'CurrencyComponent',
                'bindings': {
                    'money': {
                        't': 'CFP',
                        'v': 'value'
                    },
                    'currencies': {
                        't': 'Expr',
                        'v': 'properties.get("currencies")'
                    }
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'layout',
                    '_value': '_imgUploadPreview',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'wrapperComponent': 'MetaContext',
                'component': 'AWImageData',
                'wrapperBindings': {
                    'scopeKey': 'field'
                },
                'bindings': {
                    'bytes': {
                        't': 'CFP',
                        'v': 'value'
                    },
                    'style': 'width:100px',
                    'contentType': {
                        't': 'Expr',
                        'v': 'ContentTypeUtils.contentTypeNamed(properties.get("contentType"))'
                    }
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'derived',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'editable': false
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'derived',
                    '_isDecl': true
                },
                {
                    '_key': 'editing',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'after': 'zNone'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'derived',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'searchable',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'searchable',
                    '_isDecl': true
                },
                {
                    '_key': 'operation',
                    '_value': 'search',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'visible': true,
                'editable': {
                    't': 'OV',
                    'v': 'true'
                },
                'after': {
                    't': 'OV',
                    'v': 'null'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'searchable',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'required',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'required',
                    '_isDecl': true
                },
                {
                    '_key': 'operation',
                    '_value': [
                        'edit',
                        'create'
                    ],
                    '_isDecl': false
                }
            ],
            '_properties': {
                'required': true
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'required',
                    '_isDecl': true
                },
                {
                    '_key': 'operation',
                    '_value': [
                        'edit',
                        'create'
                    ],
                    '_isDecl': false
                },
                {
                    '_key': 'object',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'valid': {
                    't': 'Expr',
                    'v': '((value != undefined) && (value != null)) ? true : "Answer required"'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'required',
                    '_isDecl': true
                },
                {
                    '_key': 'operation',
                    '_value': [
                        'edit',
                        'create'
                    ],
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'required',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'list',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'list',
                    '_isDecl': true
                },
                {
                    '_key': 'editable',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'component': 'GenericChooserComponent',
                'bindings': {
                    'list': {
                        't': 'Expr',
                        'v': 'properties.get("choices")'
                    },
                    'type': {
                        't': 'Expr',
                        'v': 'properties.get("chooserStyle")'
                    },
                    'key': {
                        't': 'Expr',
                        'v': 'properties.get("field")'
                    },
                    'object': {
                        't': 'Expr',
                        'v': 'object'
                    }
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'list',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'withHoverDetails',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'withHoverDetails',
                    '_isDecl': true
                },
                {
                    '_key': 'editable',
                    '_value': false,
                    '_isDecl': false
                }
            ],
            '_properties': {
                'component': 'HoverCardComponent',
                'bindings': {
                    'linkTitle': {
                        't': 'CFP',
                        'v': 'value'
                    },
                    'appendContentToBody': false,
                    'ngcontentLayout': 'Content'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'withHoverDetails',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'layout',
                    '_value': 'Content',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'component': 'MetaObjectDetailComponent',
                'bindings': {
                    'layout': 'Inspect',
                    'object': {
                        't': 'CFP',
                        'v': 'value'
                    }
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'noCreate',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'noCreate',
                    '_isDecl': true
                },
                {
                    '_key': 'operation',
                    '_value': 'create',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'visible': false
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'noCreate',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'noSearch',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'noSearch',
                    '_isDecl': true
                },
                {
                    '_key': 'operation',
                    '_value': 'search',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'visible': false
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'noSearch',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'component',
                    '_value': 'GenericChooserComponent',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'component',
                    '_value': 'GenericChooserComponent',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'Popup',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'bindings': {
                    'type': 'Dropdown'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'component',
                    '_value': 'GenericChooserComponent',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'component',
                    '_value': 'GenericChooserComponent',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'PopupControl',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'bindings': {
                    'type': 'PopupControl'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'component',
                    '_value': 'GenericChooserComponent',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'component',
                    '_value': 'GenericChooserComponent',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'Chooser',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'bindings': {
                    'type': 'Chooser'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'component',
                    '_value': 'GenericChooserComponent',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'component',
                    '_value': 'GenericChooserComponent',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'PostOnChange',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'bindings': {}
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'component',
                    '_value': 'GenericChooserComponent',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'component',
                    '_value': [
                        'StringComponent',
                        'AWHyperlink',
                        'PopupMenuLink'
                    ],
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'component',
                    '_value': [
                        'StringComponent',
                        'AWHyperlink',
                        'PopupMenuLink'
                    ],
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'bold',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'wrapperComponent': 'GenericContainerComponent',
                'wrapperBindings': {
                    'tagName': 'b'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'component',
                    '_value': [
                        'StringComponent',
                        'AWHyperlink',
                        'PopupMenuLink'
                    ],
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'component',
                    '_value': [
                        'StringComponent',
                        'AWHyperlink',
                        'PopupMenuLink'
                    ],
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'italic',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'wrapperComponent': 'GenericContainerComponent',
                'wrapperBindings': {
                    'tagName': 'i'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'component',
                    '_value': [
                        'StringComponent',
                        'AWHyperlink',
                        'PopupMenuLink'
                    ],
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'component',
                    '_value': [
                        'StringComponent',
                        'AWHyperlink',
                        'PopupMenuLink'
                    ],
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'heading1',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'wrapperComponent': 'GenericContainerComponent',
                'wrapperBindings': {
                    'tagName': 'h1'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'component',
                    '_value': [
                        'StringComponent',
                        'AWHyperlink',
                        'PopupMenuLink'
                    ],
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'component',
                    '_value': [
                        'StringComponent',
                        'AWHyperlink',
                        'PopupMenuLink'
                    ],
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'heading2',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'wrapperComponent': 'GenericContainerComponent',
                'wrapperBindings': {
                    'tagName': 'h2'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'component',
                    '_value': [
                        'StringComponent',
                        'AWHyperlink',
                        'PopupMenuLink'
                    ],
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'component',
                    '_value': [
                        'StringComponent',
                        'AWHyperlink',
                        'PopupMenuLink'
                    ],
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'heading3',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'wrapperComponent': 'GenericContainerComponent',
                'wrapperBindings': {
                    'tagName': 'h3'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'component',
                    '_value': [
                        'StringComponent',
                        'AWHyperlink',
                        'PopupMenuLink'
                    ],
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'FieldType',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'FieldType',
                    '_isDecl': true
                },
                {
                    '_key': 'trait',
                    '_value': 'longtext',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'FieldType',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'FieldType',
                    '_isDecl': true
                },
                {
                    '_key': 'trait',
                    '_value': 'richtext',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'FieldType',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'FieldType',
                    '_isDecl': true
                },
                {
                    '_key': 'trait',
                    '_value': 'secret',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'FieldType',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'ChooserType',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'ChooserType',
                    '_isDecl': true
                },
                {
                    '_key': 'trait',
                    '_value': 'Popup',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'ChooserType',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'ChooserType',
                    '_isDecl': true
                },
                {
                    '_key': 'trait',
                    '_value': 'PopupControl',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'ChooserType',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'ChooserType',
                    '_isDecl': true
                },
                {
                    '_key': 'trait',
                    '_value': 'Chooser',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'ChooserType',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'WrapperStyle',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'WrapperStyle',
                    '_isDecl': true
                },
                {
                    '_key': 'trait',
                    '_value': 'bold',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'WrapperStyle',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'WrapperStyle',
                    '_isDecl': true
                },
                {
                    '_key': 'trait',
                    '_value': 'italic',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'WrapperStyle',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'WrapperStyle',
                    '_isDecl': true
                },
                {
                    '_key': 'trait',
                    '_value': 'heading1',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'WrapperStyle',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'WrapperStyle',
                    '_isDecl': true
                },
                {
                    '_key': 'trait',
                    '_value': 'heading2',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'WrapperStyle',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'WrapperStyle',
                    '_isDecl': true
                },
                {
                    '_key': 'trait',
                    '_value': 'heading3',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'WrapperStyle',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'action',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'visible': {
                    't': 'SDW',
                    'v': '!properties.get("hidden")'
                },
                'enabled': true
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'action',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'pageAction',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'actionResults': {
                    't': 'Expr',
                    'v': 'meta.routingService.routeForPage(properties.get("pageName"))'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'action',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'action',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'modalComponentPage',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'pageBindings': {
                    'componentName': {
                        't': 'Expr',
                        'v': 'properties.get("componentName")'
                    },
                    'title': {
                        't': 'Expr',
                        'v': 'properties.get("title")'
                    }
                },
                'actionResults': {
                    't': 'Expr',
                    'v': 'meta.compPageWithName("MetaModalPage")'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'action',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'action',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'modalComponentPanel',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'pageBindings': {
                    'clientPanel': true,
                    'componentName': {
                        't': 'Expr',
                        'v': 'properties.get("componentName")'
                    },
                    'title': {
                        't': 'Expr',
                        'v': 'properties.get("title")'
                    }
                },
                'actionResults': {
                    't': 'Expr',
                    'v': 'meta.compPageWithName("MetaModalPage")'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'action',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'action',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'messageResults',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'actionResults': {
                    't': 'Expr',
                    'v': 'var o = (properties.isInstanceAction ? object : ariba.ui.aribaweb.util.AWUtil.classForName(properties.class)), var v = ariba.util.fieldvalue.FieldValue.getFieldValue(o, properties.action), var m = ariba.util.core.Fmt.S(properties.message, v), ariba.ui.widgets.AribaPageContent.setMessage(m, requestContext.session()), null'
                },
                'message': 'Action Performed: %s'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'action',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'action',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'instance',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'isInstanceAction': true,
                'enabled': {
                    't': 'Expr',
                    'v': 'object != null'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'action',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'action',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'filterActions',
                    '_value': 'instance',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'visible': {
                    't': 'Expr',
                    'v': 'properties.get("isInstanceAction") == true'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'action',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'action',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'filterActions',
                    '_value': 'static',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'visible': {
                    't': 'Expr',
                    'v': '!properties.get("isInstanceAction")'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'action',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'zones': [
                    'zMain'
                ]
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'ActionButtons',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'component': 'MetaActionListComponent',
                'visible': true,
                'bindings': {
                    'defaultStyle': 'primary',
                    'renderAs': 'buttons',
                    'align': 'right'
                },
                'elementClass': 'l-action-buttons'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'ActionLinks',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'component': 'MetaActionListComponent',
                'visible': true,
                'bindings': {
                    'renderAs': 'links',
                    'align': 'right'
                },
                'elementClass': 'l-action-buttons'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'ActionMenu',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'component': 'MetaActionListComponent',
                'visible': true,
                'bindings': {
                    'renderAs': 'menu',
                    'align': 'right'
                },
                'elementClass': 'l-action-buttons'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'InstanceActionButtons',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'component': 'MetaActionListComponent',
                'visible': true,
                'bindings': {
                    'filterActions': 'instance',
                    'renderAs': 'buttons',
                    'align': 'right'
                },
                'elementClass': 'l-action-buttons'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'StaticActionButtons',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'component': 'MetaActionListComponent',
                'visible': true,
                'bindings': {
                    'filterActions': 'static',
                    'renderAs': 'buttons',
                    'align': 'right'
                },
                'elementClass': 'l-action-buttons'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'Tabs',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'component': 'MetaTabs',
                'visible': true
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'Sections',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'component': 'MetaSectionsComponent',
                'visible': true
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'Form',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'component': 'MetaFormComponent',
                'visible': true
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'Stack',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'component': 'MetaElementListComponent',
                'visible': true
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'OwnZone',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'zonePath': {
                    't': 'Expr',
                    'v': 'layout'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'pad8',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'wrapperComponent': 'GenericContainerComponent',
                'wrapperBindings': {
                    'style': 'padding:8px',
                    'tagName': 'div'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'component',
                    '_value': 'MetaFormComponent',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'labelsOnTop',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'layout_trait',
                    '_value': 'labelsOnTop',
                    '_isDecl': false
                },
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'bindings': {
                    'showLabelsAboveControls': true
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'LayoutGrouping',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'LayoutGrouping',
                    '_isDecl': true
                },
                {
                    '_key': 'trait',
                    '_value': 'Tabs',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'LayoutGrouping',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'LayoutGrouping',
                    '_isDecl': true
                },
                {
                    '_key': 'trait',
                    '_value': 'Sections',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'LayoutGrouping',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'LayoutGrouping',
                    '_isDecl': true
                },
                {
                    '_key': 'trait',
                    '_value': 'Form',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'LayoutGrouping',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'LayoutGrouping',
                    '_isDecl': true
                },
                {
                    '_key': 'trait',
                    '_value': 'Stack',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'LayoutGrouping',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'layout',
                    '_value': [
                        'Inspect',
                        'SearchForm'
                    ],
                    '_isDecl': false
                }
            ],
            '_properties': {
                'trait': 'Form',
                'label': {
                    't': 'Expr',
                    'v': 'UIMeta.beautifyClassName(values.class)'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': {},
                    '_isDecl': false
                },
                {
                    '_key': 'layout',
                    '_value': [
                        'Inspect',
                        'SearchForm'
                    ],
                    '_isDecl': false
                }
            ],
            '_properties': {
                'component': 'StringComponent',
                'bindings': {}
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': 'InspectWithActions',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'trait': 'Stack'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': 'InspectWithActions',
                    '_isDecl': false
                },
                {
                    '_key': 'layout',
                    '_value': 'Actions',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'trait': 'ActionMenu'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': 'InspectWithActions',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': 'InspectWithActions',
                    '_isDecl': false
                },
                {
                    '_key': 'layout',
                    '_value': 'Inspect',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'trait': 'Form'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': 'InspectWithActions',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': 'ButtonArea',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'trait': 'StaticActionButtons'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': 'SelectionButtonArea',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'trait': 'InstanceActionButtons'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': 'Links',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'trait': 'ActionLinks'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': 'LabelField',
                    '_isDecl': false
                },
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'visible': false
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': 'LabelField',
                    '_isDecl': false
                },
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'labelField',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'visible': {
                    't': 'OV',
                    'v': 'true'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': 'LabelField',
                    '_isDecl': false
                },
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': [
                        'Table',
                        'DetailTable'
                    ],
                    '_isDecl': false
                },
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'component': 'MetaTable',
                'bindings': {
                    'enableScrolling': true,
                    'showSelectionColumn': false,
                    'displayGroup': {
                        't': 'CFP',
                        'v': 'displayGroup'
                    },
                    'title': {
                        't': 'Expr',
                        'v': 'properties.get("label")'
                    },
                    'submitOnSelectionChange': true,
                    'singleSelect': true
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': 'ListItem',
                    '_isDecl': false
                },
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'component': 'StringComponent',
                'bindings': {
                    'value': {
                        't': 'Expr',
                        'v': 'properties.get("objectTitle")'
                    }
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'object',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'objectTitle': {
                    't': 'Expr',
                    'v': 'FieldPath.getFieldValue(object, meta.displayKeyForClass(values.get("class")))'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'object',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'objectTitle': {
                    't': 'Expr',
                    'v': 'FieldPath.getFieldValue(object, meta.displayKeyForClass(values.get("class")))'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'module',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'pageBindings': {
                    't': 'Expr',
                    'v': '(properties.get("homePage") == "MetaHomePageComponent") ? new Map().set("module", values.get("module")) : null'
                },
                'component': 'MetaDashboardLayoutComponent',
                'visible': {
                    't': 'SDW',
                    'v': '!properties.get("hidden")'
                },
                'homePage': 'MetaHomePageComponent'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'module',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'layout',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'visible': true
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'module',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'module',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'ActionTOC',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'module',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'ActionTOC',
                    '_isDecl': true
                },
                {
                    '_key': 'layout',
                    '_value': 'Actions',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'component': 'MetaActionListComponent',
                'label': 'Actions',
                'after': 'zToc'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'module',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'ActionTOC',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'module',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'actionCategory',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'visible': {
                    't': 'SDW',
                    'v': '!properties.get("hidden")'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'actionCategory',
                    '_value': 'General',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'after': 'zMain',
                'label': {
                    't': 'i18n',
                    'v': {
                        'key': 'a001',
                        'defVal': 'General'
                    }
                }
            },
            '_rank': 0
        }
    ]
};
/* tslint:disable */
/**
 *  @formatter:on
 *
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *  This is generated file. Do not edit !!
 *
 * \@formatter:off
 *
 */
var /** @type {?} */ SystemPersistenceRules = {
    oss: [
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'displayKey': 'toString',
                'searchOperation': 'search'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'Searchable',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'textSearchSupported': true,
                'searchOperation': 'keywordSearch'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'operation',
                    '_value': 'keywordSearch',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'useTextIndex': true
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'operation',
                    '_value': 'keywordSearch',
                    '_isDecl': false
                },
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'visible': false
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'operation',
                    '_value': 'keywordSearch',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'operation',
                    '_value': 'keywordSearch',
                    '_isDecl': false
                },
                {
                    '_key': 'field',
                    '_value': 'keywords',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'visible': {
                    't': 'OV',
                    'v': 'true'
                },
                'bindings': {
                    'size': 30
                },
                'trait': 'SearchableProperty',
                'rank': 0,
                'after': 'zTop',
                'type': 'java.lang.String'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'operation',
                    '_value': 'keywordSearch',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'operation',
                    '_value': 'textSearch',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'operation',
                    '_value': 'textSearch',
                    '_isDecl': false
                },
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'operation',
                    '_value': 'textSearch',
                    '_isDecl': false
                },
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'SearchableProperty',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'visible': {
                    't': 'OV',
                    'v': 'true'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'operation',
                    '_value': 'textSearch',
                    '_isDecl': false
                },
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'operation',
                    '_value': 'textSearch',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'toOneRelationship',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'toOneRelationship',
                    '_isDecl': false
                },
                {
                    '_key': 'editable',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'component': 'GenericChooserComponent',
                'bindings': {
                    'destinationClass': {
                        't': 'Expr',
                        'v': 'elementType'
                    },
                    'multiselect': false,
                    'displayKey': {
                        't': 'Expr',
                        'v': 'meta.displayLabel(type, properties.get("labelField"))'
                    },
                    'type': 'Dropdown',
                    'key': {
                        't': 'Expr',
                        'v': 'field'
                    },
                    'object': {
                        't': 'Expr',
                        'v': 'object'
                    }
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'toOneRelationship',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'toManyChooser',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'toManyChooser',
                    '_isDecl': false
                },
                {
                    '_key': 'editable',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'component': 'GenericChooserComponent',
                'bindings': {
                    'destinationClass': {
                        't': 'Expr',
                        'v': 'elementType'
                    },
                    'multiselect': true,
                    'displayKey': {
                        't': 'Expr',
                        'v': 'meta.displayLabel(type, properties.get("labelField"))'
                    },
                    'type': 'Chooser',
                    'key': {
                        't': 'Expr',
                        'v': 'field'
                    },
                    'object': {
                        't': 'Expr',
                        'v': 'object'
                    }
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'toManyChooser',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'trait',
                    '_value': 'toManyLink',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'component': 'AWHyperlink',
                'bindings': {
                    'omitTags': {
                        't': 'Expr',
                        'v': '!value || (value.size() == 0)'
                    },
                    'awcontent': {
                        't': 'Expr',
                        'v': 'value ? ("" + value.size() + " items") : "(none)"'
                    },
                    'action': {
                        't': 'Expr',
                        'v': 'set("object", value), set("actionCategory", "General"), set("action", "Inspect"), ariba.ui.meta.core.UIMeta.getInstance().fireAction(this, requestContext)'
                    }
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'RelViewers',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'RelViewers',
                    '_isDecl': true
                },
                {
                    '_key': 'trait',
                    '_value': 'toOneRelationship',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'RelViewers',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'RelViewers',
                    '_isDecl': true
                },
                {
                    '_key': 'trait',
                    '_value': 'toManyChooser',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'RelViewers',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'RelViewers',
                    '_isDecl': true
                },
                {
                    '_key': 'trait',
                    '_value': 'toManyLink',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'traitGroup',
                    '_value': 'RelViewers',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'action',
                    '_value': 'Inspect',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'pageBindings': {
                    'layout': 'Inspect',
                    'clientPanel': true,
                    'operation': 'view',
                    'object': {
                        't': 'Expr',
                        'v': 'object'
                    }
                },
                'visible': true,
                'trait': 'pageAction',
                'pageName': 'MetaContentPageComponent'
            },
            '_rank': 0
        }
    ]
};
/* tslint:disable */
/**
 *  @formatter:on
 *
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * UIMeta is responsible setting layouts and all around this. We can either use this as a singleton
 * or use it as a service using Angular \@Inject()
 * Right now we use still singleton as we need this class as a library for some other projects
 *
 *
 * todo: Convert to Injectable
 */
var UIMeta = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(UIMeta, _super);
    function UIMeta() {
        var _this = _super.call(this) || this;
        // if (isPresent(loader)) {
        //     this.registerLoader(loader);
        // }
        try {
            _this.beginRuleSet('UIMeta');
            _this.registerKeyInitObserver(UIMeta.KeyClass, new UserMetaDataProvider());
            // These keys define scopes for their properties
            // defineKeyAsPropertyScope(KeyArea);
            // These keys define scopes for their properties
            // defineKeyAsPropertyScope(KeyArea);
            _this.defineKeyAsPropertyScope(UIMeta.KeyLayout);
            _this.defineKeyAsPropertyScope(UIMeta.KeyModule);
            // Default rule for converting field name to label
            // Default rule for converting field name to label
            _this.registerDefaultLabelGeneratorForKey(UIMeta.KeyClass);
            _this.registerDefaultLabelGeneratorForKey(UIMeta.KeyField);
            _this.registerDefaultLabelGeneratorForKey(UIMeta.KeyLayout);
            _this.registerDefaultLabelGeneratorForKey(UIMeta.KeyModule);
            _this.registerDefaultLabelGeneratorForKey(UIMeta.KeyAction);
            _this.registerDefaultLabelGeneratorForKey(UIMeta.KeyActionCategory);
            // policies for chaining certain well known properties
            // policies for chaining certain well known properties
            _this.registerPropertyMerger(UIMeta.KeyArea, Meta.PropertyMerger_DeclareList);
            _this.registerPropertyMerger(UIMeta.KeyLayout, Meta.PropertyMerger_DeclareList);
            _this.registerPropertyMerger(UIMeta.KeyModule, Meta.PropertyMerger_DeclareList);
            _this.mirrorPropertyToContext(UIMeta.KeyEditing, UIMeta.KeyEditing);
            _this.mirrorPropertyToContext(UIMeta.KeyLayout, UIMeta.KeyLayout);
            _this.mirrorPropertyToContext(UIMeta.KeyComponentName, UIMeta.KeyComponentName);
            _this.registerPropertyMerger(UIMeta.KeyEditing, new PropertyMerger_And());
            // this.registerValueTransformerForKey('requestContext', UIMeta.Transformer_KeyPresent);
            // this.registerValueTransformerForKey('displayGroup', UIMeta.Transformer_KeyPresent);
            // define operation hierarchy
            // this.registerValueTransformerForKey('requestContext', UIMeta.Transformer_KeyPresent);
            // this.registerValueTransformerForKey('displayGroup', UIMeta.Transformer_KeyPresent);
            // define operation hierarchy
            _this.keyData(UIMeta.KeyOperation).setParent('view', 'inspect');
            _this.keyData(UIMeta.KeyOperation).setParent('print', 'view');
            _this.keyData(UIMeta.KeyOperation).setParent('edit', 'inspect');
            _this.keyData(UIMeta.KeyOperation).setParent('search', 'inspect');
            _this.keyData(UIMeta.KeyOperation).setParent('keywordSearch', 'search');
            _this.keyData(UIMeta.KeyOperation).setParent('textSearch', 'keywordSearch');
            _this.registerStaticallyResolvable(UIMeta.PropFieldsByZone, new PropFieldsByZoneResolver(), UIMeta.KeyClass);
            _this.registerStaticallyResolvable(UIMeta.PropFieldPropertyList, new PropFieldPropertyListResolver(), UIMeta.KeyClass);
            _this.registerStaticallyResolvable(UIMeta.PropLayoutsByZone, new PropLayoutsByZoneResolver(), UIMeta.KeyLayout);
            // this.registerStaticallyResolvable(UIMeta.PropLayoutsByZone , new
            // PropLayoutsByZoneResolver() , UIMeta.KeyLayout);
            // registerStaticallyResolvable('bindingsDictionary' , dyn , KeyField);
            // registerStaticallyResolvable('bindingsDictionary' , dyn , KeyLayout);
            // registerStaticallyResolvable('bindingsDictionary' , dyn , KeyClass);
            // registerStaticallyResolvable('bindingsDictionary' , dyn , KeyModule);
        }
        finally {
            _this.endRuleSet();
        }
        return _this;
    }
    /**
     * @return {?}
     */
    UIMeta.getInstance = /**
     * @return {?}
     */
    function () {
        return this._instance || (this._instance = new this());
    };
    /**
     * @param {?} fieldName
     * @return {?}
     */
    UIMeta.defaultLabelForIdentifier = /**
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldName) {
        var /** @type {?} */ lastDot = fieldName.lastIndexOf('.');
        if (lastDot !== -1 && lastDot !== fieldName.length - 1) {
            fieldName = fieldName.substring(lastDot + 1);
        }
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["decamelize"])(fieldName);
    };
    /**
     * @param {?} className
     * @return {?}
     */
    UIMeta.beautifyClassName = /**
     * @param {?} className
     * @return {?}
     */
    function (className$$1) {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["decamelize"])(className$$1, ' ');
    };
    /**
     * @param {?} field
     * @return {?}
     */
    UIMeta.beautifyFileName = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["decamelize"])(field, ' ');
    };
    /**
     * @param {?} context
     * @return {?}
     */
    UIMeta.prototype.zones = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        var /** @type {?} */ zones = context.propertyForKey('zones');
        return (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(zones)) ? Meta.toList(UIMeta.ZoneMain) : zones;
    };
    /**
     * @param {?} context
     * @return {?}
     */
    UIMeta.prototype.zonePath = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        var /** @type {?} */ zonePath;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(context.values.get(UIMeta.KeyLayout))) {
            context.push();
            context.setScopeKey(UIMeta.KeyLayout);
            zonePath = context.propertyForKey(UIMeta.KeyZonePath);
            context.pop();
        }
        return zonePath;
    };
    /**
     * @param {?=} isNested
     * @return {?}
     */
    UIMeta.prototype.newContext = /**
     * @param {?=} isNested
     * @return {?}
     */
    function (isNested) {
        if (isNested === void 0) { isNested = false; }
        return new UIContext(this, isNested);
    };
    // Load system rules
    /**
     * @param {?=} references
     * @return {?}
     */
    UIMeta.prototype.loadDefaultRuleFiles = /**
     * @param {?=} references
     * @return {?}
     */
    function (references) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(SystemRules.oss)) {
            this.beginRuleSetWithRank(Meta.SystemRulePriority, 'system');
            try {
                this._loadRules(SystemRules.oss, 'system', false);
            }
            finally {
                this.endRuleSet();
            }
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(SystemPersistenceRules.oss)) {
            this.beginRuleSetWithRank(Meta.SystemRulePriority + 2000, 'system-persistence');
            try {
                this._loadRules(SystemPersistenceRules.oss, 'system-persistence', false);
            }
            finally {
                this.endRuleSet();
            }
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(references)) {
            this.registerComponents(references);
        }
        return false;
    };
    /**
     * loads application level rules. Application level rules are global rules
     */
    /**
     * loads application level rules. Application level rules are global rules
     * @return {?}
     */
    UIMeta.prototype.loadApplicationRules = /**
     * loads application level rules. Application level rules are global rules
     * @return {?}
     */
    function () {
        var /** @type {?} */ aRules;
        var /** @type {?} */ userReferences;
        var /** @type {?} */ appRuleFiles = ['Application'];
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.appConfig)) {
            appRuleFiles = this.appConfig.get(UIMeta.AppConfigRuleFilesParam) || ['Application'];
            userReferences = this.appConfig.get(UIMeta.AppConfigUserRulesParam);
            // make sure we have always Application and make it more additive.
            if (!_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].contains(appRuleFiles, 'Application')) {
                appRuleFiles.unshift('Application');
            }
        }
        try {
            for (var appRuleFiles_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(appRuleFiles), appRuleFiles_1_1 = appRuleFiles_1.next(); !appRuleFiles_1_1.done; appRuleFiles_1_1 = appRuleFiles_1.next()) {
                var ruleFile = appRuleFiles_1_1.value;
                var /** @type {?} */ rule = ruleFile + 'Rule';
                if (this._testRules.has(rule)) {
                    // since we are in development mode and test mode is on we can check extra
                    // repository used by tests, we need to check if we are not running unittest
                    // and a class is not defined but unittest
                    if (this._testRules.has(rule) &&
                        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._testRules.get(rule).oss)) {
                        aRules = this._testRules.get(rule).oss;
                        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(aRules)) {
                            this.beginRuleSetWithRank(Meta.LowRulePriority, ruleFile.toLowerCase());
                            try {
                                this._loadRules(aRules, ruleFile.toLowerCase(), false);
                            }
                            finally {
                                this.endRuleSet();
                            }
                        }
                    }
                }
                else {
                    for (var /** @type {?} */ i in userReferences) {
                        var /** @type {?} */ userRule = userReferences[i];
                        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(userRule)) {
                            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(userRule[rule]) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(userRule[rule].oss)) {
                                aRules = userRule[rule].oss;
                            }
                        }
                        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(aRules)) {
                            this.beginRuleSetWithRank(Meta.LowRulePriority, ruleFile.toLowerCase());
                            try {
                                this._loadRules(aRules, ruleFile.toLowerCase(), false);
                            }
                            finally {
                                this.endRuleSet();
                            }
                        }
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (appRuleFiles_1_1 && !appRuleFiles_1_1.done && (_a = appRuleFiles_1.return)) _a.call(appRuleFiles_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var e_1, _a;
    };
    /**
     * @param {?} source
     * @param {?} userClass
     * @return {?}
     */
    UIMeta.prototype.loadUserRule = /**
     * @param {?} source
     * @param {?} userClass
     * @return {?}
     */
    function (source, userClass) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(source)) {
            this.beginRuleSetWithRank(this._ruleCount, 'user:' + userClass);
            try {
                this._loadRules(source, 'user', false);
            }
            finally {
                this.endRuleSet();
            }
        }
        return false;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    UIMeta.prototype.defaultLabelGeneratorForKey = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return new _DefaultLabelGenerator(key);
    };
    /**
     * @param {?} propKey
     * @param {?} dynamicValue
     * @param {?} contextKey
     * @param {?} contextValue
     * @return {?}
     */
    UIMeta.prototype.registerDerivedValue = /**
     * @param {?} propKey
     * @param {?} dynamicValue
     * @param {?} contextKey
     * @param {?} contextValue
     * @return {?}
     */
    function (propKey, dynamicValue, contextKey, contextValue) {
        var /** @type {?} */ m = new Map();
        m.set(propKey, dynamicValue);
        this.addRule(new Rule(Meta.toList(new Selector(contextKey, contextValue)), m, Meta.SystemRulePriority));
    };
    /**
     * @param {?} propKey
     * @param {?} dynamicValue
     * @param {?} contextKey
     * @return {?}
     */
    UIMeta.prototype.registerStaticallyResolvable = /**
     * @param {?} propKey
     * @param {?} dynamicValue
     * @param {?} contextKey
     * @return {?}
     */
    function (propKey, dynamicValue, contextKey) {
        this.registerDerivedValue(propKey, new StaticDynamicWrapper(dynamicValue), contextKey, Meta.KeyAny);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    UIMeta.prototype.registerDefaultLabelGeneratorForKey = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        this.registerDerivedValue(UIMeta.KeyLabel, new LocalizedLabelString(this), key, UIMeta.KeyAny);
    };
    /**
     * @param {?} context
     * @return {?}
     */
    UIMeta.prototype.fieldList = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        return this.itemList(context, UIMeta.KeyField, UIMeta.ZonesTLRMB);
    };
    /**
     * @param {?} context
     * @return {?}
     */
    UIMeta.prototype.fieldsByZones = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        return this.itemsByZones(context, UIMeta.KeyField, UIMeta.ZonesTLRMB);
    };
    /**
     * @param {?} context
     * @param {?} key
     * @param {?} zones
     * @return {?}
     */
    UIMeta.prototype.itemNamesByZones = /**
     * @param {?} context
     * @param {?} key
     * @param {?} zones
     * @return {?}
     */
    function (context, key, zones) {
        var /** @type {?} */ itemsByZones = this.itemsByZones(context, key, zones);
        return this.mapItemPropsToNames(itemsByZones);
    };
    /**
     * @param {?} itemsByZones
     * @return {?}
     */
    UIMeta.prototype.mapItemPropsToNames = /**
     * @param {?} itemsByZones
     * @return {?}
     */
    function (itemsByZones) {
        var _this = this;
        var /** @type {?} */ namesByZones = new Map();
        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].iterable(itemsByZones).forEach(function (value, key) {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(value) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(value)) {
                var /** @type {?} */ names = [];
                try {
                    for (var value_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                        var item = value_1_1.value;
                        if (item instanceof ItemProperties) {
                            names.push((/** @type {?} */ (item)).name);
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                namesByZones.set(key, names);
            }
            else {
                namesByZones.set(key, _this.mapItemPropsToNames(value));
            }
            var e_2, _a;
        });
        return namesByZones;
    };
    /**
     * @param {?} context
     * @param {?} key
     * @param {?} defaultPredecessor
     * @return {?}
     */
    UIMeta.prototype.predecessorMap = /**
     * @param {?} context
     * @param {?} key
     * @param {?} defaultPredecessor
     * @return {?}
     */
    function (context, key, defaultPredecessor) {
        var /** @type {?} */ fieldInfos = this.itemProperties(context, key, false);
        var /** @type {?} */ predecessors = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].groupBy(fieldInfos, function (item) {
            var /** @type {?} */ pred = item.properties.get(UIMeta.KeyAfter);
            return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(pred) ? pred : defaultPredecessor;
        });
        return predecessors;
    };
    /**
     * @param {?} context
     * @param {?} key
     * @param {?} zones
     * @return {?}
     */
    UIMeta.prototype.itemList = /**
     * @param {?} context
     * @param {?} key
     * @param {?} zones
     * @return {?}
     */
    function (context, key, zones) {
        var /** @type {?} */ predecessors = this.predecessorMap(context, key, zones[0]);
        var /** @type {?} */ result = [];
        try {
            for (var zones_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(zones), zones_1_1 = zones_1.next(); !zones_1_1.done; zones_1_1 = zones_1.next()) {
                var zone = zones_1_1.value;
                this.accumulatePrecessors(predecessors, zone, result);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (zones_1_1 && !zones_1_1.done && (_a = zones_1.return)) _a.call(zones_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return result;
        var e_3, _a;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    UIMeta.prototype.isZoneReference = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        // keys of the form 'z<Name>' and 'foo.bar.z<Name>' are considered zone keys
        var /** @type {?} */ lastDot = key.lastIndexOf('.');
        var /** @type {?} */ suffix = (lastDot === -1) ? key : key.substring(lastDot + 1);
        return (suffix.length > 1) && (suffix[0] === 'z') && (suffix[1].toUpperCase() === suffix[1] // is uppercase ?s
        );
    };
    /**
     * @param {?} context
     * @param {?} property
     * @param {?} zones
     * @return {?}
     */
    UIMeta.prototype.itemsByZones = /**
     * @param {?} context
     * @param {?} property
     * @param {?} zones
     * @return {?}
     */
    function (context, property, zones) {
        var _this = this;
        var /** @type {?} */ predecessors = this.predecessorMap(context, property, zones[0]);
        var /** @type {?} */ byZone = new Map();
        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].iterable(predecessors).forEach(function (value, zone) {
            if (_this.isZoneReference(zone)) {
                var /** @type {?} */ list = [];
                _this.accumulatePrecessors(predecessors, zone, list);
                _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["FieldPath"].setFieldValue(byZone, zone, list);
            }
        });
        return byZone;
    };
    // recursive decent of predecessor tree...
    /**
     * @param {?} predecessors
     * @param {?} key
     * @param {?} result
     * @return {?}
     */
    UIMeta.prototype.accumulatePrecessors = /**
     * @param {?} predecessors
     * @param {?} key
     * @param {?} result
     * @return {?}
     */
    function (predecessors, key, result) {
        var /** @type {?} */ items = predecessors.get(key);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(items)) {
            return;
        }
        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].sort(items, function (o1, o2) {
            var /** @type {?} */ r1 = o1.properties.get(UIMeta.KeyRank);
            var /** @type {?} */ r2 = o2.properties.get(UIMeta.KeyRank);
            if (r1 === null) {
                r1 = 100;
            }
            if (r2 === null) {
                r2 = 100;
            }
            return (r1 === r2) ? 0 : (r1 === null) ? 1 : (r2 === null) ? -1 : (r1 - r2);
        });
        try {
            for (var items_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                var item = items_1_1.value;
                if (!item.hidden) {
                    result.push(item);
                }
                this.accumulatePrecessors(predecessors, item.name, result);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        var e_4, _a;
    };
    /**
     * Called by Parser to handle decls like 'zLeft => lastName#required'
     *
     */
    /**
     * Called by Parser to handle decls like 'zLeft => lastName#required'
     *
     * @param {?} itemName
     * @param {?} contextPreds
     * @param {?} predecessor
     * @param {?} traits
     * @param {?} lineNumber
     * @return {?}
     */
    UIMeta.prototype.addPredecessorRule = /**
     * Called by Parser to handle decls like 'zLeft => lastName#required'
     *
     * @param {?} itemName
     * @param {?} contextPreds
     * @param {?} predecessor
     * @param {?} traits
     * @param {?} lineNumber
     * @return {?}
     */
    function (itemName, contextPreds, predecessor, traits, lineNumber) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(predecessor) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(traits)) {
            return null;
        }
        var /** @type {?} */ key = this.scopeKeyForSelector(contextPreds);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(key) || key === UIMeta.KeyClass) {
            key = UIMeta.KeyField;
        }
        var /** @type {?} */ selector = new Array();
        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].addAll(selector, contextPreds);
        selector.push(new Selector(key, itemName));
        var /** @type {?} */ props = new Map();
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(predecessor)) {
            props.set(UIMeta.KeyAfter, predecessor);
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(traits)) {
            props.set(UIMeta.KeyTrait, traits);
        }
        var /** @type {?} */ rule = new Rule(selector, props, 0, lineNumber);
        this.addRule(rule);
        return rule;
    };
    /**
     * @param {?} fieldsByZones
     * @param {?} zoneList
     * @param {?} key
     * @param {?} context
     * @return {?}
     */
    UIMeta.prototype.flattenVisible = /**
     * @param {?} fieldsByZones
     * @param {?} zoneList
     * @param {?} key
     * @param {?} context
     * @return {?}
     */
    function (fieldsByZones, zoneList, key, context) {
        var /** @type {?} */ result = [];
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(fieldsByZones)) {
            try {
                for (var zoneList_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(zoneList), zoneList_1_1 = zoneList_1.next(); !zoneList_1_1.done; zoneList_1_1 = zoneList_1.next()) {
                    var zone = zoneList_1_1.value;
                    var /** @type {?} */ fields = fieldsByZones.get(zone);
                    if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(fields)) {
                        continue;
                    }
                    try {
                        for (var fields_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(fields), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
                            var field = fields_1_1.value;
                            context.push();
                            context.set(key, field);
                            if (context.booleanPropertyForKey(UIMeta.KeyVisible, false)) {
                                result.push(field);
                            }
                            context.pop();
                        }
                    }
                    catch (e_5_1) { e_5 = { error: e_5_1 }; }
                    finally {
                        try {
                            if (fields_1_1 && !fields_1_1.done && (_a = fields_1.return)) _a.call(fields_1);
                        }
                        finally { if (e_5) throw e_5.error; }
                    }
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (zoneList_1_1 && !zoneList_1_1.done && (_b = zoneList_1.return)) _b.call(zoneList_1);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        return result;
        var e_6, _b, e_5, _a;
    };
    /**
     * @param {?} className
     * @return {?}
     */
    UIMeta.prototype.displayKeyForClass = /**
     * @param {?} className
     * @return {?}
     */
    function (className$$1) {
        // performance: should use registerDerivedValue('...', new Context.StaticDynamicWrapper
        // to get cached resolution here...
        var /** @type {?} */ context = this.newContext();
        context.set(UIMeta.KeyLayout, 'LabelField');
        context.set(UIMeta.KeyClass, className$$1);
        var /** @type {?} */ fields = this.itemProperties(context, UIMeta.KeyField, true);
        return _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].isEmpty(fields) ? '$toString' : fields[0].name;
    };
    /**
     * @param {?} className
     * @param {?} propertiesValue
     * @return {?}
     */
    UIMeta.prototype.displayLabel = /**
     * @param {?} className
     * @param {?} propertiesValue
     * @return {?}
     */
    function (className$$1, propertiesValue) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(propertiesValue)) {
            return propertiesValue;
        }
        return this.displayKeyForClass(className$$1);
    };
    /**
     * @param {?} key
     * @param {?} defaultValue
     * @return {?}
     */
    UIMeta.prototype.createLocalizedString = /**
     * @param {?} key
     * @param {?} defaultValue
     * @return {?}
     */
    function (key, defaultValue) {
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._currentRuleSet), 'Attempt to create localized string without currentRuleSet in place');
        return new LocalizedString(this, this._currentRuleSet.filePath, key, defaultValue);
    };
    Object.defineProperty(UIMeta.prototype, "routingService", {
        get: /**
         * @return {?}
         */
        function () {
            return (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._injector)) ? this._injector.get(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["RoutingService"]) : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UIMeta.prototype, "env", {
        get: /**
         * @return {?}
         */
        function () {
            return (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._injector)) ? this._injector.get(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"]) : new _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"]();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UIMeta.prototype, "appConfig", {
        get: /**
         * @return {?}
         */
        function () {
            return (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._injector)) ? this._injector.get(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["AppConfig"]) : null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Registers framework level components and listen for user level rules to be registered.
     * After we register user level rules it will load application.oss.
     *
     *
     * @param {?} sysReferences
     * @return {?}
     */
    UIMeta.prototype.registerComponents = /**
     * Registers framework level components and listen for user level rules to be registered.
     * After we register user level rules it will load application.oss.
     *
     *
     * @param {?} sysReferences
     * @return {?}
     */
    function (sysReferences) {
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.injector), 'Cannot register components without Injector in order' +
            ' to get access to ComponentRegistry Service');
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(this.env.inTest || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.appConfig.get(UIMeta.AppConfigUserRulesParam)), 'Unable to initialize MetaUI as user rules are missing. please use:' +
            ' metaui.rules.user-rules configuration param');
        this.componentRegistry = this.injector.get(_aribaui_components__WEBPACK_IMPORTED_MODULE_3__["ComponentRegistry"]);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.componentRegistry)) {
            this.componentRegistry.registerTypes(sysReferences);
            if (!this.env.inTest) {
                var /** @type {?} */ userReferences = this.appConfig.get(UIMeta.AppConfigUserRulesParam);
                try {
                    for (var userReferences_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(userReferences), userReferences_1_1 = userReferences_1.next(); !userReferences_1_1.done; userReferences_1_1 = userReferences_1.next()) {
                        var uRule = userReferences_1_1.value;
                        this.componentRegistry.registerTypes(uRule);
                    }
                }
                catch (e_7_1) { e_7 = { error: e_7_1 }; }
                finally {
                    try {
                        if (userReferences_1_1 && !userReferences_1_1.done && (_a = userReferences_1.return)) _a.call(userReferences_1);
                    }
                    finally { if (e_7) throw e_7.error; }
                }
                this.loadApplicationRules();
            }
        }
        else if (!this.env.inTest) {
            Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["warn"])('UIMeta.registerComponents() No components were registered !');
        }
        var e_7, _a;
    };
    /**
     *
     * Just need to call it different than the other fireAction as I can not do any method
     * overloading here.
     *
     */
    /**
     *
     * Just need to call it different than the other fireAction as I can not do any method
     * overloading here.
     *
     * @param {?} action
     * @param {?} context
     * @return {?}
     */
    UIMeta.prototype.fireActionFromProps = /**
     *
     * Just need to call it different than the other fireAction as I can not do any method
     * overloading here.
     *
     * @param {?} action
     * @param {?} context
     * @return {?}
     */
    function (action, context) {
        context.push();
        var /** @type {?} */ actionCategory = action.properties.get(ObjectMeta.KeyActionCategory);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(actionCategory)) {
            actionCategory = ObjectMeta.DefaultActionCategory;
        }
        context.set(ObjectMeta.KeyActionCategory, actionCategory);
        context.set(ObjectMeta.KeyAction, action.name);
        this._fireAction(context, false);
        context.pop();
    };
    /**
     * @param {?} context
     * @param {?=} withBackAction
     * @return {?}
     */
    UIMeta.prototype.fireAction = /**
     * @param {?} context
     * @param {?=} withBackAction
     * @return {?}
     */
    function (context, withBackAction) {
        if (withBackAction === void 0) { withBackAction = false; }
        context.push();
        this._fireAction(context, withBackAction);
        context.pop();
    };
    /**
     * @param {?} context
     * @param {?} withBackAction
     * @return {?}
     */
    UIMeta.prototype._fireAction = /**
     * @param {?} context
     * @param {?} withBackAction
     * @return {?}
     */
    function (context, withBackAction) {
        var /** @type {?} */ actionResults = context.propertyForKey('actionResults');
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(actionResults) || !this.isRoute(actionResults)) {
            return;
        }
        this.naviateToPage(context, actionResults, withBackAction);
    };
    /**
     * @param {?} context
     * @param {?} route
     * @param {?} withBackAction
     * @return {?}
     */
    UIMeta.prototype.naviateToPage = /**
     * @param {?} context
     * @param {?} route
     * @param {?} withBackAction
     * @return {?}
     */
    function (context, route, withBackAction) {
        var /** @type {?} */ params = this.prepareRoute(context, withBackAction);
        var /** @type {?} */ uiContex = /** @type {?} */ (context);
        this.routingService.navigateWithRoute(route, params, uiContex.object);
    };
    /**
     * @param {?} context
     * @param {?} withBackAction
     * @return {?}
     */
    UIMeta.prototype.prepareRoute = /**
     * @param {?} context
     * @param {?} withBackAction
     * @return {?}
     */
    function (context, withBackAction) {
        var /** @type {?} */ params = {};
        var /** @type {?} */ pageBindings = context.propertyForKey('pageBindings');
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(pageBindings)) {
            pageBindings.forEach(function (v, k) {
                if (k !== ObjectMeta.KeyObject) {
                    (/** @type {?} */ (params))[k] = context.resolveValue(v);
                }
            });
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(withBackAction)) {
                (/** @type {?} */ (params))['b'] = withBackAction;
            }
        }
        return params;
    };
    /**
     * @param {?} component
     * @param {?} context
     * @param {?} withBackAction
     * @return {?}
     */
    UIMeta.prototype.prepareRouteForComponent = /**
     * @param {?} component
     * @param {?} context
     * @param {?} withBackAction
     * @return {?}
     */
    function (component, context, withBackAction) {
        var /** @type {?} */ params = {};
        var /** @type {?} */ pageBindings = context.propertyForKey('pageBindings');
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(pageBindings)) {
            pageBindings.forEach(function (v, k) {
                component[k] = v;
            });
        }
        return params;
    };
    /**
     * @param {?} module
     * @param {?=} activatedPath
     * @return {?}
     */
    UIMeta.prototype.gotoModule = /**
     * @param {?} module
     * @param {?=} activatedPath
     * @return {?}
     */
    function (module, activatedPath) {
        this.env.deleteValue(ACTIVE_CNTX);
        var /** @type {?} */ context = this.newContext();
        context.push();
        context.set(UIMeta.KeyModule, module.name);
        var /** @type {?} */ pageName = context.propertyForKey(UIMeta.KeyHomePage);
        var /** @type {?} */ route = this.routingService.routeForPage(pageName, module.name.toLowerCase(), activatedPath);
        if (activatedPath === '/') {
            activatedPath = '';
        }
        var /** @type {?} */ path = activatedPath + "/" + route.path;
        var /** @type {?} */ params = this.prepareRoute(context, null);
        context.pop();
        this.routingService.navigate([path, params], { skipLocationChange: true });
    };
    /**
     * @param {?} actionResult
     * @return {?}
     */
    UIMeta.prototype.isRoute = /**
     * @param {?} actionResult
     * @return {?}
     */
    function (actionResult) {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isStringMap"])(actionResult) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(actionResult['path']);
    };
    /**
     * @param {?} name
     * @return {?}
     */
    UIMeta.prototype.compPageWithName = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        var /** @type {?} */ currType = this.componentRegistry.nameToType.get(name);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(currType)) {
            Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(false, name + ' component does not exists. Create Dummy Component instead of' +
                ' throwing this error');
            return;
        }
        return currType;
    };
    // caller must push/pop!
    /**
     * @param {?} context
     * @param {?} result
     * @param {?} zones
     * @return {?}
     */
    UIMeta.prototype.actionsByCategory = /**
     * @param {?} context
     * @param {?} result
     * @param {?} zones
     * @return {?}
     */
    function (context, result, zones) {
        var /** @type {?} */ catNames = [];
        var /** @type {?} */ actionCategories = this.itemList(context, ObjectMeta.KeyActionCategory, zones);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(actionCategories)) {
            actionCategories.forEach(function (item) { return catNames.push(item.name); });
        }
        this.addActionsForCategories(context, result, catNames);
        return actionCategories;
    };
    /**
     * @param {?} context
     * @param {?} result
     * @param {?} catNames
     * @return {?}
     */
    UIMeta.prototype.addActionsForCategories = /**
     * @param {?} context
     * @param {?} result
     * @param {?} catNames
     * @return {?}
     */
    function (context, result, catNames) {
        try {
            for (var catNames_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(catNames), catNames_1_1 = catNames_1.next(); !catNames_1_1.done; catNames_1_1 = catNames_1.next()) {
                var cat = catNames_1_1.value;
                context.push();
                if (cat !== ObjectMeta.DefaultActionCategory) {
                    context.set(ObjectMeta.KeyActionCategory, cat);
                }
                this.collectActionsByCategory(context, result, cat);
                context.pop();
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (catNames_1_1 && !catNames_1_1.done && (_a = catNames_1.return)) _a.call(catNames_1);
            }
            finally { if (e_8) throw e_8.error; }
        }
        var e_8, _a;
    };
    /**
     * @param {?} context
     * @param {?} result
     * @param {?} targetCat
     * @return {?}
     */
    UIMeta.prototype.collectActionsByCategory = /**
     * @param {?} context
     * @param {?} result
     * @param {?} targetCat
     * @return {?}
     */
    function (context, result, targetCat) {
        var /** @type {?} */ actionInfos = this.itemProperties(context, ObjectMeta.KeyAction, true);
        try {
            for (var actionInfos_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(actionInfos), actionInfos_1_1 = actionInfos_1.next(); !actionInfos_1_1.done; actionInfos_1_1 = actionInfos_1.next()) {
                var actionInfo = actionInfos_1_1.value;
                context.push();
                context.set(ObjectMeta.KeyAction, actionInfo.name);
                var /** @type {?} */ visible = context.booleanPropertyForKey(ObjectMeta.KeyVisible, true);
                context.pop();
                if (visible) {
                    var /** @type {?} */ category = actionInfo.properties.get(ObjectMeta.KeyActionCategory);
                    if (category == null) {
                        category = ObjectMeta.DefaultActionCategory;
                    }
                    if (targetCat !== category) {
                        continue;
                    }
                    var /** @type {?} */ forCategory = result.get(category);
                    if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(forCategory)) {
                        forCategory = [];
                        result.set(category, forCategory);
                    }
                    forCategory.push(actionInfo);
                }
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (actionInfos_1_1 && !actionInfos_1_1.done && (_a = actionInfos_1.return)) _a.call(actionInfos_1);
            }
            finally { if (e_9) throw e_9.error; }
        }
        var e_9, _a;
    };
    /**
     * @param {?=} context
     * @param {?=} checkVisibility
     * @return {?}
     */
    UIMeta.prototype.computeModuleInfo = /**
     * @param {?=} context
     * @param {?=} checkVisibility
     * @return {?}
     */
    function (context, checkVisibility) {
        if (context === void 0) { context = this.newContext(); }
        if (checkVisibility === void 0) { checkVisibility = true; }
        var /** @type {?} */ moduleInfo = new ModuleInfo();
        moduleInfo.modules = [];
        var /** @type {?} */ allModuleProps = this.itemList(context, UIMeta.KeyModule, UIMeta.ActionZones);
        moduleInfo.moduleNames = [];
        moduleInfo.moduleByNames = new Map();
        try {
            for (var allModuleProps_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(allModuleProps), allModuleProps_1_1 = allModuleProps_1.next(); !allModuleProps_1_1.done; allModuleProps_1_1 = allModuleProps_1.next()) {
                var module = allModuleProps_1_1.value;
                context.push();
                context.set(UIMeta.KeyModule, module.name);
                if (checkVisibility && !context.booleanPropertyForKey(UIMeta.KeyVisible, true)) {
                    context.pop();
                    continue;
                }
                moduleInfo.moduleNames.push(module.name);
                // // todo: create typescript anotation
                // context.push();
                // context.set("homeForClasses", true);
                // let homeClasses: Array<string> = this.itemNames(context, UIMeta.KeyClass);
                // context.pop();
                var /** @type {?} */ modProperties = new ItemProperties(module.name, context.allProperties(), false);
                moduleInfo.modules.push(modProperties);
                moduleInfo.moduleByNames.set(module.name, modProperties);
                context.pop();
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (allModuleProps_1_1 && !allModuleProps_1_1.done && (_a = allModuleProps_1.return)) _a.call(allModuleProps_1);
            }
            finally { if (e_10) throw e_10.error; }
        }
        context.push();
        context.set(UIMeta.KeyModule, moduleInfo.moduleNames);
        moduleInfo.actionsByCategory = new Map();
        moduleInfo.actionCategories = this.actionsByCategory(context, moduleInfo.actionsByCategory, UIMeta.ModuleActionZones);
        context.pop();
        return moduleInfo;
        var e_10, _a;
    };
    /**
     * @param {?} moduleName
     * @param {?=} context
     * @return {?}
     */
    UIMeta.prototype.currentModuleLabel = /**
     * @param {?} moduleName
     * @param {?=} context
     * @return {?}
     */
    function (moduleName, context) {
        if (context === void 0) { context = this.newContext(); }
        context.push();
        context.set(UIMeta.KeyModule, moduleName);
        var /** @type {?} */ label = context.propertyForKey(UIMeta.KeyLabel);
        context.pop();
        return label;
    };
    UIMeta.KeyOperation = 'operation';
    UIMeta.KeyModule = 'module';
    UIMeta.KeyLayout = 'layout';
    UIMeta.KeyArea = 'area';
    UIMeta.KeyEditing = 'editing';
    UIMeta.KeyAfter = 'after';
    UIMeta.KeyHidden = 'hidden';
    UIMeta.KeyLabel = 'label';
    UIMeta.KeyComponentName = 'component';
    UIMeta.KeyBindings = 'bindings';
    UIMeta.KeyHomePage = 'homePage';
    UIMeta.KeyZonePath = 'zonePath';
    UIMeta.PropFieldsByZone = 'fieldsByZone';
    UIMeta.PropIsFieldsByZone = 'fiveZoneLayout';
    UIMeta.PropActionsByCategory = 'actionsByCategory';
    UIMeta.PropActionCategories = 'actionCategories';
    UIMeta.PropFieldPropertyList = 'fieldPropertyList';
    UIMeta.PropLayoutsByZone = 'layoutsByZone';
    UIMeta.KeyWrapperComponent = 'wrapperComponent';
    UIMeta.KeyWrapperBinding = 'wrapperBindings';
    UIMeta.RootPredecessorKey = '_root';
    UIMeta.ZoneMain = 'zMain';
    UIMeta.ZoneTop = 'zTop';
    UIMeta.ZoneLeft = 'zLeft';
    UIMeta.ZoneMiddle = 'zMiddle';
    UIMeta.ZoneRight = 'zRight';
    UIMeta.ZoneBottom = 'zBottom';
    UIMeta.ZoneDetail = 'zDetail';
    UIMeta.AppConfigRuleFilesParam = 'metaui.rules.file-names';
    UIMeta.AppConfigUserRulesParam = 'metaui.rules.user-rules';
    UIMeta.ZonesTLRMB = [
        UIMeta.ZoneTop, UIMeta.ZoneLeft, UIMeta.ZoneMiddle,
        UIMeta.ZoneRight, UIMeta.ZoneBottom
    ];
    UIMeta.ZonesMTLRB = [
        UIMeta.ZoneMain, UIMeta.ZoneTop, UIMeta.ZoneLeft, UIMeta.ZoneRight, UIMeta.ZoneBottom
    ];
    UIMeta.ZonesDetail = [UIMeta.ZoneDetail];
    UIMeta._instance = null;
    UIMeta.ModuleActionZones = ['zNav', 'zGlobal'];
    UIMeta.ActionZones = ['zGlobal', 'zMain', 'zGeneral'];
    return UIMeta;
}(ObjectMeta));
var ModuleInfo = /** @class */ (function () {
    function ModuleInfo() {
    }
    return ModuleInfo;
}());
var LocalizedString = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(LocalizedString, _super);
    function LocalizedString(meta, _module, _key, _defaultValue) {
        var _this = _super.call(this) || this;
        _this.meta = meta;
        _this._module = _module;
        _this._key = _key;
        _this._defaultValue = _defaultValue;
        return _this;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    LocalizedString.prototype.evaluate = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        // let clazz = context.values.get('class');
        // if (isPresent(this._key) && isPresent(this.meta.i18nService)) {
        //     let i18nKey = clazz + '.' + this._key;
        //     localizedString = this.meta.i18nService.instant(i18nKey);
        //
        //     // when it return the same string most likely it means there is no
        //     // translation so default it to null
        //     localizedString = (localizedString === i18nKey) ? null : localizedString;
        // }
        // if (isBlank(localizedString) || this._key === ObjectMeta.KeyField) {
        //     return this._defaultValue;
        // }
        return this._defaultValue;
    };
    /**
     * @return {?}
     */
    LocalizedString.prototype.toString = /**
     * @return {?}
     */
    function () {
        return 'LocaledString: {' + this._key + ' - ' + this._defaultValue + ' }';
    };
    return LocalizedString;
}(DynamicPropertyValue));
var LocalizedLabelString = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(LocalizedLabelString, _super);
    function LocalizedLabelString(meta) {
        var _this = _super.call(this, meta, LocalizedLabelString.DefaultModule, null, null) || this;
        _this.meta = meta;
        _this.propertyAwaking = true;
        return _this;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    LocalizedLabelString.prototype.evaluate = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._key)) {
            var /** @type {?} */ scopeKey = context.values.get(Meta.ScopeKey);
            var /** @type {?} */ scopeVal = context.values.get(scopeKey);
            this._defaultValue = UIMeta.defaultLabelForIdentifier(scopeVal);
            this._key = scopeKey;
        }
        return _super.prototype.evaluate.call(this, context);
    };
    /**
     * @param {?} map
     * @return {?}
     */
    LocalizedLabelString.prototype.awakeForPropertyMap = /**
     * @param {?} map
     * @return {?}
     */
    function (map) {
        return new LocalizedLabelString(this.meta);
    };
    LocalizedLabelString.DefaultModule = 'default';
    return LocalizedLabelString;
}(LocalizedString));
var PropFieldsByZoneResolver = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropFieldsByZoneResolver, _super);
    function PropFieldsByZoneResolver() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    PropFieldsByZoneResolver.prototype.evaluate = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        var /** @type {?} */ m = (/** @type {?} */ (context.meta)).itemNamesByZones(context, UIMeta.KeyField, (/** @type {?} */ (context.meta)).zones(context));
        var /** @type {?} */ zonePath = (/** @type {?} */ (context.meta)).zonePath(context);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(zonePath)) {
            m = /** @type {?} */ (_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["FieldPath"].getFieldValue(m, zonePath));
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(m)) {
                m = new Map();
            }
        }
        return m;
    };
    return PropFieldsByZoneResolver;
}(StaticallyResolvable));
var PropFieldPropertyListResolver = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropFieldPropertyListResolver, _super);
    function PropFieldPropertyListResolver() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    PropFieldPropertyListResolver.prototype.evaluate = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        return (/** @type {?} */ (context.meta)).fieldList(context);
    };
    return PropFieldPropertyListResolver;
}(StaticallyResolvable));
var PropLayoutsByZoneResolver = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropLayoutsByZoneResolver, _super);
    function PropLayoutsByZoneResolver() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    PropLayoutsByZoneResolver.prototype.evaluate = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        return (/** @type {?} */ (context.meta)).itemNamesByZones(context, UIMeta.KeyLayout, (/** @type {?} */ (context.meta)).zones(context));
    };
    return PropLayoutsByZoneResolver;
}(StaticallyResolvable));
var _DefaultLabelGenerator = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(_DefaultLabelGenerator, _super);
    function _DefaultLabelGenerator(_key) {
        var _this = _super.call(this) || this;
        _this._key = _key;
        return _this;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    _DefaultLabelGenerator.prototype.evaluate = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        var /** @type {?} */ fieldName = context.values.get(this._key);
        return (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(fieldName) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isString"])(fieldName)) ?
            UIMeta.defaultLabelForIdentifier(fieldName) : null;
    };
    return _DefaultLabelGenerator;
}(StaticallyResolvable));
/**
 * Load User defined meta data. This class is triggered as soon as we create a context and
 * pass an object into it. Based on the object we notify different Observers passing name
 * of the class and here we search if we have any Rules available for current className and
 * try to load the Rule.
 */
var /**
 * Load User defined meta data. This class is triggered as soon as we create a context and
 * pass an object into it. Based on the object we notify different Observers passing name
 * of the class and here we search if we have any Rules available for current className and
 * try to load the Rule.
 */
UserMetaDataProvider = /** @class */ (function () {
    function UserMetaDataProvider() {
    }
    /**
     * @param {?} meta
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    UserMetaDataProvider.prototype.notify = /**
     * @param {?} meta
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (meta, key, value) {
        var /** @type {?} */ aRules;
        var /** @type {?} */ uiMeta = /** @type {?} */ (meta);
        if (uiMeta._testRules.has(value + 'Rule')) {
            // since we are in development mode and test mode is on we can check extra repository
            // used by tests, we need to check if we are not running unittest and a class is not
            // application defined but unittest defined rule
            if (uiMeta._testRules.has(value + 'Rule') &&
                Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(uiMeta._testRules.get(value + 'Rule').oss)) {
                aRules = uiMeta._testRules.get(value + 'Rule').oss;
            }
            meta.loadUserRule(aRules, value);
        }
        else if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(uiMeta.appConfig) &&
            uiMeta.appConfig.get(UIMeta.AppConfigUserRulesParam)) {
            var /** @type {?} */ userReferences = uiMeta.appConfig.get(UIMeta.AppConfigUserRulesParam);
            for (var /** @type {?} */ i in userReferences) {
                if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(userReferences[i][value + 'Rule']) &&
                    Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(userReferences[i][value + 'Rule'].oss)) {
                    aRules = userReferences[i][value + 'Rule'].oss;
                }
            }
            meta.loadUserRule(aRules, value);
        }
    };
    return UserMetaDataProvider;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Constant represent current active and mainly latest Context
 *
 */
var /** @type {?} */ ACTIVE_CNTX = 'CurrentMC';
// define set of properties which will be skipped as they are defined as inputs or  added by
// angular
var /** @type {?} */ IMPLICIT_PROPERTIES = [
    'module', 'layout', 'operation', 'class', 'object', 'actionCategory', 'action', 'field',
    'pushNewContext'
];
var /** @type {?} */ IMMUTABLE_PROPERTIES = [
    'module', 'layout', 'operation', 'class', 'action', 'field', 'pushNewContext'
];
var MetaContextComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MetaContextComponent, _super);
    function MetaContextComponent(elementRef, env, parentContainer) {
        var _this = _super.call(this, env, null) || this;
        _this.elementRef = elementRef;
        _this.env = env;
        _this.parentContainer = parentContainer;
        _this.beforeContextSet = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        _this.onContextChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        _this.afterContextSet = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        _this.onAction = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        /**
         * Flag that tells us that component is fully rendered
         *
         */
        _this.viewInitialized = false;
        /**
         *
         * Marks MetaContext or the root MetaContext that created a new Context
         *
         */
        _this.contextCreated = false;
        _this.bindingKeys = [];
        return _this;
    }
    /**
     * @return {?}
     */
    MetaContextComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initBindings();
        this.hasObject = this._hasObject();
        // MetaContextComponent.stackDepth++;
        // console.log(this.indent() + '=> ngOnInit:', this.contextKey());
        // Initial push, when component is first initialized the rest is done based on changes.
        this.pushPop(true);
        if (!this.env.hasValue('parent-cnx')) {
            this.env.setValue('parent-cnx', this);
        }
    };
    /**
     * For any other immutable object detect changes here and refresh the context stack
     *
     * @param changes
     */
    /**
     * For any other immutable object detect changes here and refresh the context stack
     *
     * @param {?} changes
     * @return {?}
     */
    MetaContextComponent.prototype.ngOnChanges = /**
     * For any other immutable object detect changes here and refresh the context stack
     *
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // console.log(this.indent() + '    => ngOnChanges', this.contextKey());
        try {
            // console.log(this.indent() + '    => ngOnChanges', this.contextKey());
            for (var IMMUTABLE_PROPERTIES_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(IMMUTABLE_PROPERTIES), IMMUTABLE_PROPERTIES_1_1 = IMMUTABLE_PROPERTIES_1.next(); !IMMUTABLE_PROPERTIES_1_1.done; IMMUTABLE_PROPERTIES_1_1 = IMMUTABLE_PROPERTIES_1.next()) {
                var name_1 = IMMUTABLE_PROPERTIES_1_1.value;
                if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(changes[name_1])
                    && (changes[name_1].currentValue !== changes[name_1].previousValue)) {
                    this.initBindings();
                    break;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (IMMUTABLE_PROPERTIES_1_1 && !IMMUTABLE_PROPERTIES_1_1.done && (_a = IMMUTABLE_PROPERTIES_1.return)) _a.call(IMMUTABLE_PROPERTIES_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // in case object is coming late e.g. from some reactive API like REST then we
        // do not get it into ngInit but it will be here.
        if (this.viewInitialized && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(changes['object']) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.object)) {
            this.initBindings();
        }
        var e_1, _a;
    };
    /**
     * Ng check is trigged after view is fully inialized and we want to push everything new
     * properties to the context and evaluate everything.
     *
     *
     */
    /**
     * Ng check is trigged after view is fully inialized and we want to push everything new
     * properties to the context and evaluate everything.
     *
     *
     * @return {?}
     */
    MetaContextComponent.prototype.ngDoCheck = /**
     * Ng check is trigged after view is fully inialized and we want to push everything new
     * properties to the context and evaluate everything.
     *
     *
     * @return {?}
     */
    function () {
        if (this.viewInitialized) {
            this.hasObject = this._hasObject();
            // MetaContextComponent.stackDepth++;
            this.pushPop(true);
            // console.log(this.indent() + '=> ngDoCheck(CHANGED)', this.contextKey());
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.object) && !Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["equals"])(this.prevObject, this.object)) {
                this.updateModel();
            }
        }
    };
    /**
     * We want to start detecting changes only after view is fully checked
     */
    /**
     * We want to start detecting changes only after view is fully checked
     * @return {?}
     */
    MetaContextComponent.prototype.ngAfterViewInit = /**
     * We want to start detecting changes only after view is fully checked
     * @return {?}
     */
    function () {
        if (!this.viewInitialized) {
            // console.log(this.indent() + '=> ngAfterViewInit:', this.contextKey());
            // MetaContextComponent.stackDepth--;
            this.pushPop(false);
        }
    };
    /**
     * @return {?}
     */
    MetaContextComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        if (this.viewInitialized) {
            // console.log(this.indent() + '=> ngAfterViewChecked:', this.contextKey());
            // MetaContextComponent.stackDepth--;
            this.pushPop(false);
        }
        else {
            this.viewInitialized = true;
        }
    };
    /**
     *
     * This is our key method that triggers all the interaction inside MetaUI world. Here we
     * push context keys and their values to the stack and this is the thing that triggers
     * rule recalculation which give us updated  properties. Those are then used by
     * MetaIncludeComponent to render the UI.
     *
     * myContext is current context for this MetaContext Component.
     *
     * @param {?} isPush identifies if we are pushing or popping to context stack
     * @return {?}
     */
    MetaContextComponent.prototype.pushPop = /**
     *
     * This is our key method that triggers all the interaction inside MetaUI world. Here we
     * push context keys and their values to the stack and this is the thing that triggers
     * rule recalculation which give us updated  properties. Those are then used by
     * MetaIncludeComponent to render the UI.
     *
     * myContext is current context for this MetaContext Component.
     *
     * @param {?} isPush identifies if we are pushing or popping to context stack
     * @return {?}
     */
    function (isPush) {
        // console.log(this.indent() + '=> pushPop: isPush' + isPush, this.contextKey());
        var /** @type {?} */ activeContext = this.activeContext();
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(isPush || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(activeContext), 'pop(): Missing context');
        var /** @type {?} */ forceCreate = isPush && (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.pushNewContext) && this.pushNewContext);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(activeContext) || forceCreate) {
            var /** @type {?} */ metaUI = UIMeta.getInstance();
            activeContext = metaUI.newContext(forceCreate);
            this.contextCreated = true;
            this.env.push(ACTIVE_CNTX, activeContext);
        }
        if (isPush) {
            activeContext.push();
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._scopeBinding) && this.hasObject) {
                this.beforeContextSet.emit(this._scopeBinding);
                activeContext.setScopeKey(this._scopeBinding);
                this.afterContextSet.emit(this._scopeBinding);
            }
            else {
                for (var /** @type {?} */ index = 0; index < this.bindingKeys.length; index++) {
                    var /** @type {?} */ key = this.bindingKeys[index];
                    var /** @type {?} */ value = this.bindingsMap.get(key);
                    this.beforeContextSet.emit(value);
                    activeContext.set(key, value);
                    this.afterContextSet.emit(value);
                }
            }
            // Save created content to local MetaContext
            this._myContext = activeContext.snapshot().hydrate(false);
        }
        else {
            activeContext.pop();
            if (this.contextCreated) {
                this.env.pop(ACTIVE_CNTX);
            }
        }
    };
    /**
     * Just for troubleshooting to print current context and assignments
     *
     */
    /**
     * Just for troubleshooting to print current context and assignments
     *
     * @return {?}
     */
    MetaContextComponent.prototype.debugString = /**
     * Just for troubleshooting to print current context and assignments
     *
     * @return {?}
     */
    function () {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._myContext)) {
            return this._myContext.debugString();
        }
    };
    /**
     * For debugging to identify current key
     */
    // contextKey(): string
    // {
    //     let cnxKey = '';
    //     if (isPresent(this.bindingKeys) && this.bindingKeys.length > 0) {
    //         this.bindingKeys.forEach((name) =>
    //         {
    //             if (name === 'object') {
    //                 cnxKey += name;
    //             } else {
    //                 cnxKey += name + this.bindingsMap.get(name);
    //             }
    //
    //
    //         });
    //     } else if (isPresent(this._scopeBinding)) {
    //         cnxKey += this._scopeBinding;
    //     }
    //     return cnxKey;
    // }
    /**
     *
     * Every meta context component which pushing certain properties to stack has its own context
     * that lives until component is destroyed
     *
     */
    /**
     *
     * Every meta context component which pushing certain properties to stack has its own context
     * that lives until component is destroyed
     *
     * @return {?}
     */
    MetaContextComponent.prototype.myContext = /**
     *
     * Every meta context component which pushing certain properties to stack has its own context
     * that lives until component is destroyed
     *
     * @return {?}
     */
    function () {
        return this._myContext;
        // let cnxKey = this.contextKey();
        // return this.env.getValue(cnxKey);
    };
    /**
     * We keep the most current and latest context to environment to be read by any Child
     * MetaContext for purpose of creation new context and it needs info what was already pushed
     * onto the stack.
     *
     */
    /**
     * We keep the most current and latest context to environment to be read by any Child
     * MetaContext for purpose of creation new context and it needs info what was already pushed
     * onto the stack.
     *
     * @return {?}
     */
    MetaContextComponent.prototype.activeContext = /**
     * We keep the most current and latest context to environment to be read by any Child
     * MetaContext for purpose of creation new context and it needs info what was already pushed
     * onto the stack.
     *
     * @return {?}
     */
    function () {
        return this.env.peak(ACTIVE_CNTX);
    };
    /**
     * Let's clean up and destroy pushed context
     */
    /**
     * Let's clean up and destroy pushed context
     * @return {?}
     */
    MetaContextComponent.prototype.ngOnDestroy = /**
     * Let's clean up and destroy pushed context
     * @return {?}
     */
    function () {
        if (this.env.hasValue('parent-cnx')) {
            this.env.deleteValue('parent-cnx');
        }
    };
    /**
     * Ideally we do not need this method if Angular would support to pass variable number of
     * bindings without a need to have backup property for each of the bindings or expression./
     *
     * Once they support. we can remove this. Since this check what are known bindings passed,
     * meaning the ones decorated with \@Input and the rest
     *
     * @return {?}
     */
    MetaContextComponent.prototype.initBindings = /**
     * Ideally we do not need this method if Angular would support to pass variable number of
     * bindings without a need to have backup property for each of the bindings or expression./
     *
     * Once they support. we can remove this. Since this check what are known bindings passed,
     * meaning the ones decorated with \@Input and the rest
     *
     * @return {?}
     */
    function () {
        var _this = this;
        this.bindingsMap = new Map();
        var /** @type {?} */ nativeElement = this.elementRef.nativeElement;
        this.initImplicitBindings();
        for (var /** @type {?} */ i = 0; i < nativeElement.attributes.length; i++) {
            var /** @type {?} */ attr = nativeElement.attributes.item(i);
            if (this.ignoreBinding(attr)) {
                continue;
            }
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(attr.name) && attr.name.toLowerCase() === 'scopekey') {
                this._scopeBinding = attr.value;
            }
            else {
                this.bindingsMap.set(attr.name, attr.value);
            }
        }
        this.bindingKeys = [];
        this.bindingsMap.forEach(function (value, key) {
            _this.bindingKeys.push(key);
        });
        // Sort them by their importance or rank
        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].sortByExample(this.bindingKeys, IMPLICIT_PROPERTIES);
    };
    /**
     * The thing we want is to pass variable number of bindings and resolve them programmatically.
     * Currently in Angular we cannot do this we have these set of properties where we expect
     * some expression, some dynamic properties. For the rest we expect only string literal to be
     * passed in therefore we can resolve them with nativeElement.attributes
     *
     * @return {?}
     */
    MetaContextComponent.prototype.initImplicitBindings = /**
     * The thing we want is to pass variable number of bindings and resolve them programmatically.
     * Currently in Angular we cannot do this we have these set of properties where we expect
     * some expression, some dynamic properties. For the rest we expect only string literal to be
     * passed in therefore we can resolve them with nativeElement.attributes
     *
     * @return {?}
     */
    function () {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.module)) {
            this.bindingsMap.set('module', this.module);
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.layout)) {
            this.bindingsMap.set('layout', this.layout);
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.operation)) {
            this.bindingsMap.set('operation', this.operation);
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.class)) {
            this.bindingsMap.set('class', this.class);
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.object)) {
            this.bindingsMap.set('object', this.object);
            this.prevObject = Object.assign({}, this.object);
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.actionCategory)) {
            this.bindingsMap.set('actionCategory', this.actionCategory);
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.action)) {
            this.bindingsMap.set('action', this.action);
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.field)) {
            this.bindingsMap.set('field', this.field);
        }
    };
    /**
     *
     * Since we are going thru the element' attributes we want to skip anything that has nothign
     * to do with us.
     *
     * @param {?} attr
     * @return {?}
     */
    MetaContextComponent.prototype.ignoreBinding = /**
     *
     * Since we are going thru the element' attributes we want to skip anything that has nothign
     * to do with us.
     *
     * @param {?} attr
     * @return {?}
     */
    function (attr) {
        return IMPLICIT_PROPERTIES.indexOf(attr.name) !== -1 ||
            _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["StringWrapper"].contains(attr.name, '_ng') ||
            _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["StringWrapper"].contains(attr.name, 'ng-') ||
            _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["StringWrapper"].contains(attr.name, '(') ||
            (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(attr.value) || attr.value.length === 0);
    };
    /**
     * If object is changed we need to also update our angular model to reflect user changes. All
     * changes and updates in metaui use object references
     * @return {?}
     */
    MetaContextComponent.prototype.updateModel = /**
     * If object is changed we need to also update our angular model to reflect user changes. All
     * changes and updates in metaui use object references
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ fields = Object.keys(this.object);
        fields.forEach(function (field) {
            var /** @type {?} */ control = /** @type {?} */ (_this.formGroup.get(field));
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(control)) {
                control.patchValue(_this.object[field], { onlySelf: false, emitEvent: true });
            }
        });
        this.prevObject = Object.assign({}, this.object);
    };
    /**
     * @return {?}
     */
    MetaContextComponent.prototype._hasObject = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ context = this.activeContext();
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(context)) {
            return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])((/** @type {?} */ (context)).object);
        }
        return false;
    };
    MetaContextComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"], args: [{
                    selector: 'm-context',
                    template: '<ng-content></ng-content>',
                    changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectionStrategy"].OnPush,
                    providers: [
                        { provide: _aribaui_components__WEBPACK_IMPORTED_MODULE_3__["BaseFormComponent"], useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["forwardRef"])(function () { return MetaContextComponent; }) }
                    ]
                },] },
    ];
    /** @nocollapse */
    MetaContextComponent.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ElementRef"] },
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: _aribaui_components__WEBPACK_IMPORTED_MODULE_3__["BaseFormComponent"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["SkipSelf"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["forwardRef"])(function () { return _aribaui_components__WEBPACK_IMPORTED_MODULE_3__["BaseFormComponent"]; }),] }] }
    ]; };
    MetaContextComponent.propDecorators = {
        module: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
        layout: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
        operation: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
        class: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
        object: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
        actionCategory: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
        action: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
        field: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
        pushNewContext: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
        beforeContextSet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }],
        onContextChanged: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }],
        afterContextSet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }],
        onAction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }]
    };
    return MetaContextComponent;
}(_aribaui_components__WEBPACK_IMPORTED_MODULE_3__["BaseFormComponent"]));
/**
 *
 * Defines format for the broadcasted action event. MetaUI can also execute actions which needs to
 * be handled by application or actual component using this m-context.
 *
 */
var  /**
 *
 * Defines format for the broadcasted action event. MetaUI can also execute actions which needs to
 * be handled by application or actual component using this m-context.
 *
 */
MetaUIActionEvent = /** @class */ (function () {
    function MetaUIActionEvent(component, eventName, cnxName, data) {
        this.component = component;
        this.eventName = eventName;
        this.cnxName = cnxName;
        this.data = data;
    }
    return MetaUIActionEvent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWMetaCoreModule = /** @class */ (function () {
    function AWMetaCoreModule() {
    }
    AWMetaCoreModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["NgModule"], args: [{
                    declarations: [
                        MetaContextComponent
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_5__["ReactiveFormsModule"]
                    ],
                    entryComponents: [
                        MetaContextComponent
                    ],
                    exports: [
                        MetaContextComponent,
                        _angular_forms__WEBPACK_IMPORTED_MODULE_5__["ReactiveFormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormsModule"]
                    ],
                    providers: []
                },] },
    ];
    return AWMetaCoreModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var RuleLoaderService = /** @class */ (function () {
    function RuleLoaderService() {
    }
    Object.defineProperty(RuleLoaderService.prototype, "uiMeta", {
        get: /**
         * @return {?}
         */
        function () {
            return this._uiMeta;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._uiMeta = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} meta
     * @param {?} source
     * @param {?} module
     * @param {?} onRule
     * @return {?}
     */
    RuleLoaderService.prototype.loadRules = /**
     * @param {?} meta
     * @param {?} source
     * @param {?} module
     * @param {?} onRule
     * @return {?}
     */
    function (meta, source, module, onRule) {
        var _this = this;
        this._uiMeta = /** @type {?} */ (meta);
        source.forEach(function (val, index) {
            var /** @type {?} */ rule = _this.readRule(val, module);
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(onRule)) {
                onRule(rule);
            }
        });
    };
    /**
     * @param {?} source
     * @param {?} module
     * @return {?}
     */
    RuleLoaderService.prototype.loadRulesWithReturn = /**
     * @param {?} source
     * @param {?} module
     * @return {?}
     */
    function (source, module) {
        var _this = this;
        var /** @type {?} */ rules = new Array();
        source.forEach(function (val, index) {
            var /** @type {?} */ rule = _this.readRule(val, module);
            rules.push(rule);
        });
        return rules;
    };
    /**
     * @param {?} jsonRule
     * @param {?} module
     * @return {?}
     */
    RuleLoaderService.prototype.readRule = /**
     * @param {?} jsonRule
     * @param {?} module
     * @return {?}
     */
    function (jsonRule, module) {
        var _this = this;
        var /** @type {?} */ selectors = new Array();
        try {
            for (var _a = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(jsonRule._selectors), _b = _a.next(); !_b.done; _b = _a.next()) {
                var item = _b.value;
                if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(item._value) && item._value.constructor === Object && Object.keys(item._value).length === 0) {
                    item._value = Meta.NullMarker;
                }
                var /** @type {?} */ selector = new Selector(item._key, item._value, item._isDecl);
                selectors.push(selector);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var /** @type {?} */ properties = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].createFromStringMapWithResolve(jsonRule._properties, function (k, v) {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isStringMap"])(v) &&
                Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(v['t'])) {
                return _this.resoveValue(v['t'], v, module);
            }
            else if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isStringMap"])(v) && !Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(v)) {
                // we have some
                // other sub level
                // of object
                // literal - lets
                // convert this
                // into Map.
                return _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].createFromStringMapWithResolve(v, function (key, val) {
                    return _this.resoveValue(val['t'], val, module);
                });
            }
            else if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isArray"])(v)) {
                // let convert with
                // typings as well
                return _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["ListWrapper"].clone(v);
            }
            return v;
        });
        var /** @type {?} */ props = properties.size === 0 ? undefined : properties;
        var /** @type {?} */ rule = new Rule(selectors, props, jsonRule._rank);
        return rule;
        var e_1, _c;
    };
    /**
     * @param {?} type
     * @param {?} value
     * @param {?} module
     * @return {?}
     */
    RuleLoaderService.prototype.resoveValue = /**
     * @param {?} type
     * @param {?} value
     * @param {?} module
     * @return {?}
     */
    function (type, value, module) {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(value)) {
            return null;
        }
        if (type === 'Expr') {
            return new Expr(value['v']);
        }
        else if (type === 'SDW') {
            var /** @type {?} */ expr = new Expr(value['v']);
            return new StaticDynamicWrapper(new StaticallyResolvableWrapper(expr));
        }
        else if (type === 'CFP') {
            return new ContextFieldPath(value['v']);
        }
        else if (type === 'OV') {
            return new OverrideValue(value['v']);
        }
        else if (type === 'i18n' && value['v']['key']) {
            var /** @type {?} */ locKey = value['v']['key'];
            return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._uiMeta) ? this._uiMeta.createLocalizedString(locKey, value['v']['defVal'])
                :
                    new LocalizedString(null, module, locKey, value['v']['defVal']);
        }
        return value;
    };
    RuleLoaderService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Injectable"] },
    ];
    /** @nocollapse */
    RuleLoaderService.ctorParameters = function () { return []; };
    return RuleLoaderService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NoMetaComponent = /** @class */ (function () {
    function NoMetaComponent() {
    }
    /**
     * @return {?}
     */
    NoMetaComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    NoMetaComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"], args: [{
                    selector: 'app-no-meta',
                    template: "\n        <h2>MetaIncludeComponentDirective Error:</h2>\n                No componentName property resolved in Context<br/>\n    ",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    NoMetaComponent.ctorParameters = function () { return []; };
    return NoMetaComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *  MetaIncludeComponentDirective is (along with MetaContext) the key element for binding MetaUI
 * into AngularJs user interfaces. You can think of it such GLUE.
 *
 *  MetaIncludeComponentDirective dynamically switches in a Angular's component based on the
 * current MetaContext's
 * 'component' property and sets its bindings from the 'bindings' property.  This alone enables
 * almost any existing Angular's widget to be specified for use for a particular field or layout
 * using rules -- without any additional glue code .
 *
 *  component using 'wrapperComponent' and 'wrapperBindings', binding component content using the
 * bindings 'ngcontent', ngcontentLayout and 'ngcontentelElement', and event binding named Content
 * templates using an
 * 'awcontentLayouts' map binding. Without this we will not be able to use complex layouts.
 *
 */
var MetaIncludeComponentDirective = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MetaIncludeComponentDirective, _super);
    function MetaIncludeComponentDirective(metaContext, viewContainer, factoryResolver, env, cd, compRegistry, domUtils) {
        var _this = _super.call(this, viewContainer, factoryResolver, cd, compRegistry) || this;
        _this.metaContext = metaContext;
        _this.viewContainer = viewContainer;
        _this.factoryResolver = factoryResolver;
        _this.env = env;
        _this.cd = cd;
        _this.compRegistry = compRegistry;
        _this.domUtils = domUtils;
        return _this;
    }
    /**
     * First we simply render the a component in the ngOnInit() and then every time something
     * changes.
     */
    /**
     * First we simply render the a component in the ngOnInit() and then every time something
     * changes.
     * @return {?}
     */
    MetaIncludeComponentDirective.prototype.ngDoCheck = /**
     * First we simply render the a component in the ngOnInit() and then every time something
     * changes.
     * @return {?}
     */
    function () {
        // console.log('MetaInclude(ngDoCheck):', this.name);
        var /** @type {?} */ context = this.metaContext.myContext();
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(context) || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.currentComponent)) {
            // console.log('No context/ component for ' + this.name);
            return;
        }
        var /** @type {?} */ newComponent = context.propertyForKey('component');
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(newComponent) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.name) && (this.name !== newComponent)) {
            this.viewContainer.clear();
            this.doRenderComponent();
            // console.log('MetaInclude(ngDoCheck- rerender ):', this.name);
            this.createWrapperElementIfAny();
            this.createContentElementIfAny();
        }
        else {
            // we might not skip component instantiation but we still need to update bindings
            // as properties could change
            var /** @type {?} */ editable = context.propertyForKey(ObjectMeta.KeyEditable);
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(editable)) {
                editable = context.propertyForKey(UIMeta.KeyEditing);
            }
            var /** @type {?} */ metaBindings = context.propertyForKey(UIMeta.KeyBindings);
            var /** @type {?} */ type = context.propertyForKey(ObjectMeta.KeyType);
            var /** @type {?} */ inputs = this.componentReference().metadata.inputs;
            // re-apply Inputs
            // maybe we should diff properties and only if they changed re-apply
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(metaBindings) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(inputs)) {
                this.applyInputs(this.currentComponent, type, metaBindings, inputs, editable);
            }
        }
    };
    /*
     * Retrieves component Name from the Context.
     */
    /**
     * @return {?}
     */
    MetaIncludeComponentDirective.prototype.resolveComponentType = /**
     * @return {?}
     */
    function () {
        this.name = this.metaContext.myContext().propertyForKey(UIMeta.KeyComponentName);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.name)) {
            return NoMetaComponent;
        }
        return _super.prototype.resolveComponentType.call(this);
    };
    /*
     * If there is a NG content as part of the bindings apply it and remove it from the list. In
     * the MetaUI world it can appear if we want to insert a text content into the element:
     *
     *
     *  trait=toManyLink {
     *         component:AWHyperlink;
     *         bindings: {
     *             action: ${
     *                this.set("object", value);
     *                this.set("actionCategory", "General");
     *                this.set("action", "Inspect");
     *                 meta.fireAction(this, true)
     *             };
     *             awcontent: "Click Me";
     *         }
     *     }
     *
     *
     */
    /**
     * @return {?}
     */
    MetaIncludeComponentDirective.prototype.ngContent = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ cntValue;
        var /** @type {?} */ bindings = this.metaContext.myContext().propertyForKey(UIMeta.KeyBindings);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(bindings) &&
            Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(cntValue = bindings.get(_aribaui_components__WEBPACK_IMPORTED_MODULE_3__["IncludeComponentDirective"].NgContent))) {
            cntValue = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isString"])(cntValue) ? cntValue :
                this.metaContext.myContext().resolveValue(cntValue);
        }
        return cntValue;
    };
    /**
     * @return {?}
     */
    MetaIncludeComponentDirective.prototype.ngContentElement = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ cntValue;
        var /** @type {?} */ bindings = this.metaContext.myContext().propertyForKey(UIMeta.KeyBindings);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(bindings) &&
            Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(cntValue = bindings.get(_aribaui_components__WEBPACK_IMPORTED_MODULE_3__["IncludeComponentDirective"].NgContentElement))) {
            cntValue = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isString"])(cntValue) ? cntValue :
                this.metaContext.myContext().resolveValue(cntValue);
        }
        return cntValue;
    };
    /**
     * Implement custom behavior of adding ngcontentLayout described above (where the constant
     * is defined)
     *
     */
    /**
     * Implement custom behavior of adding ngcontentLayout described above (where the constant
     * is defined)
     *
     * @return {?}
     */
    MetaIncludeComponentDirective.prototype.createContentElementIfAny = /**
     * Implement custom behavior of adding ngcontentLayout described above (where the constant
     * is defined)
     *
     * @return {?}
     */
    function () {
        var /** @type {?} */ detectChanges = false;
        var /** @type {?} */ bindings = this.metaContext.myContext().propertyForKey(UIMeta.KeyBindings);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(bindings) && bindings.has(MetaIncludeComponentDirective.NgContentLayout)) {
            var /** @type {?} */ layoutName = bindings.get(MetaIncludeComponentDirective.NgContentLayout);
            var /** @type {?} */ context = this.metaContext.myContext();
            context.push();
            context.set(UIMeta.KeyLayout, layoutName);
            var /** @type {?} */ componentName = context.propertyForKey('component');
            var /** @type {?} */ compType = this.compRegistry.nameToType.get(componentName);
            var /** @type {?} */ componentFactory = this.factoryResolver
                .resolveComponentFactory(compType);
            var /** @type {?} */ componentMeta = this.resolveDirective(componentFactory);
            var /** @type {?} */ ngComponent = this.viewContainer.createComponent(componentFactory, 0);
            var /** @type {?} */ cReference = {
                metadata: componentMeta,
                resolvedCompFactory: componentFactory,
                componentType: compType,
                componentName: componentName
            };
            this.applyBindings(cReference, ngComponent, context.propertyForKey(UIMeta.KeyBindings), false);
            this.domUtils.insertIntoParentNgContent(this.currentComponent.location.nativeElement, ngComponent.location.nativeElement);
            context.pop();
            detectChanges = true;
        }
        else {
            detectChanges = _super.prototype.createContentElementIfAny.call(this);
        }
        if (detectChanges) {
            // console.log('MetaInclude(createContentElementIfAny):', this.name);
            this.cd.detectChanges();
        }
        return detectChanges;
    };
    /**
     * Meta placeTheComponent needs to account for wrapper component. If wrapper component
     * is present. It needs to inject the wrapper component on the page and add this component
     * inside the wrapper component.
     */
    /**
     * Meta placeTheComponent needs to account for wrapper component. If wrapper component
     * is present. It needs to inject the wrapper component on the page and add this component
     * inside the wrapper component.
     * @return {?}
     */
    MetaIncludeComponentDirective.prototype.createWrapperElementIfAny = /**
     * Meta placeTheComponent needs to account for wrapper component. If wrapper component
     * is present. It needs to inject the wrapper component on the page and add this component
     * inside the wrapper component.
     * @return {?}
     */
    function () {
        var /** @type {?} */ wrapperName = this.metaContext.myContext().propertyForKey(UIMeta.KeyWrapperComponent);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(wrapperName)) {
            return;
        }
        // Now we have wrapperComponent. We do the following:
        // 1.  Create wrapper component.
        var /** @type {?} */ wrapperType = this.compRegistry.nameToType.get(wrapperName);
        var /** @type {?} */ componentFactory = this.factoryResolver
            .resolveComponentFactory(wrapperType);
        var /** @type {?} */ componentMeta = this.resolveDirective(wrapperType);
        var /** @type {?} */ wrapperComponent = this.viewContainer.createComponent(componentFactory);
        // 2. Add wrapper bindings to wrapper component.
        var /** @type {?} */ wrapperBindings = this.metaContext.myContext().propertyForKey(UIMeta.KeyWrapperBinding);
        (/** @type {?} */ (wrapperComponent.instance))['bindings'] = wrapperBindings;
        // 3. Apply the bindings. Get the wrapper metadata, look through it's input - output
        // bindings. and apply the wrapperBindings to these bindings.
        var /** @type {?} */ wrapperComponentRef = {
            metadata: componentMeta,
            resolvedCompFactory: componentFactory,
            componentType: wrapperType,
            componentName: wrapperName
        };
        this.applyBindings(wrapperComponentRef, wrapperComponent, wrapperBindings);
        this.domUtils.insertIntoParentNgContent(wrapperComponent.location.nativeElement, this.currentComponent.location.nativeElement);
    };
    /**
     * ApplyBindings reads the @Inputs from ComponentMetadata and check if there exists a binding
     * coming from MetaRules. If there is we assign it to the input.
     */
    /**
     * ApplyBindings reads the \@Inputs from ComponentMetadata and check if there exists a binding
     * coming from MetaRules. If there is we assign it to the input.
     * @param {?} cRef
     * @param {?} component
     * @param {?} bindings
     * @param {?=} bUseMetaBindings
     * @return {?}
     */
    MetaIncludeComponentDirective.prototype.applyBindings = /**
     * ApplyBindings reads the \@Inputs from ComponentMetadata and check if there exists a binding
     * coming from MetaRules. If there is we assign it to the input.
     * @param {?} cRef
     * @param {?} component
     * @param {?} bindings
     * @param {?=} bUseMetaBindings
     * @return {?}
     */
    function (cRef, component, bindings, bUseMetaBindings) {
        if (bUseMetaBindings === void 0) { bUseMetaBindings = true; }
        _super.prototype.applyBindings.call(this, cRef, component, bindings);
        var /** @type {?} */ inputs = cRef.metadata.inputs;
        var /** @type {?} */ outputs = cRef.metadata.outputs;
        var /** @type {?} */ metaBindings = this.metaContext.myContext().propertyForKey(UIMeta.KeyBindings);
        var /** @type {?} */ editable = this.metaContext.myContext().propertyForKey(ObjectMeta.KeyEditable);
        var /** @type {?} */ type = this.metaContext.myContext().propertyForKey(ObjectMeta.KeyType);
        // There are cases where we want to use the bindings passed into this function.
        // For example, the wrapperBindings.
        if (!bUseMetaBindings) {
            metaBindings = bindings;
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(metaBindings) || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(inputs)) {
            return;
        }
        var /** @type {?} */ currenBindings = _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["MapWrapper"].clone(metaBindings);
        this.applyInputs(component, type, currenBindings, inputs, editable);
        this.applyOutputs(component, currenBindings, outputs);
    };
    /**
     * @param {?} component
     * @param {?} type
     * @param {?} bindings
     * @param {?} inputs
     * @param {?} editable
     * @param {?=} compToBeRendered
     * @return {?}
     */
    MetaIncludeComponentDirective.prototype.applyInputs = /**
     * @param {?} component
     * @param {?} type
     * @param {?} bindings
     * @param {?} inputs
     * @param {?} editable
     * @param {?=} compToBeRendered
     * @return {?}
     */
    function (component, type, bindings, inputs, editable, compToBeRendered) {
        if (compToBeRendered === void 0) { compToBeRendered = true; }
        // propagate a field type to bindings.
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(type) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(component.instance.canSetType) &&
            component.instance.canSetType()) {
            bindings.set(ObjectMeta.KeyType, type);
        }
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(editable) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(component.instance['editable'])) {
            component.instance['editable'] = editable;
        }
        try {
            for (var inputs_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(inputs), inputs_1_1 = inputs_1.next(); !inputs_1_1.done; inputs_1_1 = inputs_1.next()) {
                var key = inputs_1_1.value;
                var /** @type {?} */ publicKey = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["nonPrivatePrefix"])(key);
                var /** @type {?} */ value = bindings.get(publicKey);
                // Handle special case where we do not pass explicitly or inherit from parent @Input
                // name for the component
                if (key === 'name' && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(value)) {
                    value = this.metaContext.myContext().propertyForKey(ObjectMeta.KeyField);
                }
                if (this.skipInput(key, value)) {
                    continue;
                }
                // compToBeRendered = only first time
                if (compToBeRendered && value instanceof ContextFieldPath) {
                    this.applyDynamicInputBindings(component.instance, bindings, inputs, key, value, editable);
                }
                else if (compToBeRendered && value instanceof DynamicPropertyValue) {
                    var /** @type {?} */ dynval = value;
                    var /** @type {?} */ newValue = dynval.evaluate(this.metaContext.myContext());
                    component.instance[publicKey] = newValue;
                }
                else {
                    /**
                                     * when re-applying Inputs skip all expressions above and only work with regular
                                     * types
                                     *
                                     * set it only if it changes so it will not trigger necessary `value changed
                                     * aftter check`
                                     */
                    if (!Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["equals"])(component.instance[publicKey], value)) {
                        component.instance[publicKey] = value;
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (inputs_1_1 && !inputs_1_1.done && (_a = inputs_1.return)) _a.call(inputs_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // apply Formatter that can be specified in the oss
        // temporary disabled untill angular will support runtime i18n
        // if (bindings.has(MetaIncludeComponentDirective.FormatterBinding)) {
        //     let transform = this.formatters
        //         .get(bindings.get(MetaIncludeComponentDirective.FormatterBinding));
        //     component.instance[MetaIncludeComponentDirective.FormatterBinding] = transform;
        // }
        var e_1, _a;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    MetaIncludeComponentDirective.prototype.skipInput = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(value) || key === _aribaui_components__WEBPACK_IMPORTED_MODULE_3__["IncludeComponentDirective"].NgContent ||
            key === MetaIncludeComponentDirective.NgContentLayout;
    };
    /**
     * @param {?} component
     * @param {?} bindings
     * @param {?} outputs
     * @return {?}
     */
    MetaIncludeComponentDirective.prototype.applyOutputs = /**
     * @param {?} component
     * @param {?} bindings
     * @param {?} outputs
     * @return {?}
     */
    function (component, bindings, outputs) {
        var _this = this;
        var _loop_1 = function (key) {
            var /** @type {?} */ publicKey = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["nonPrivatePrefix"])(key);
            var /** @type {?} */ value = bindings.get(publicKey);
            if (key === _aribaui_components__WEBPACK_IMPORTED_MODULE_3__["IncludeComponentDirective"].NgContent) {
                return "continue";
            }
            var /** @type {?} */ eventEmitter = component.instance[publicKey];
            if (value instanceof DynamicPropertyValue) {
                this_1.applyDynamicOutputBinding(eventEmitter, value, this_1.metaContext.myContext());
            }
            else {
                // just trigger event outside
                eventEmitter.subscribe(function (val) {
                    if (_this.env.hasValue('parent-cnx')) {
                        var /** @type {?} */ event_1 = val;
                        var /** @type {?} */ cnx = _this.env.getValue('parent-cnx');
                        if (!(val instanceof MetaUIActionEvent)) {
                            event_1 = new MetaUIActionEvent(component.instance, publicKey, publicKey, val);
                        }
                        cnx.onAction.emit(event_1);
                    }
                });
            }
        };
        var this_1 = this;
        try {
            for (var outputs_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(outputs), outputs_1_1 = outputs_1.next(); !outputs_1_1.done; outputs_1_1 = outputs_1.next()) {
                var key = outputs_1_1.value;
                _loop_1(key);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (outputs_1_1 && !outputs_1_1.done && (_a = outputs_1.return)) _a.call(outputs_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        var e_2, _a;
    };
    /**
     * @param {?} emitter
     * @param {?} value
     * @param {?} context
     * @return {?}
     */
    MetaIncludeComponentDirective.prototype.applyDynamicOutputBinding = /**
     * @param {?} emitter
     * @param {?} value
     * @param {?} context
     * @return {?}
     */
    function (emitter, value, context) {
        emitter.asObservable().subscribe(function (val) {
            var /** @type {?} */ dynval = value;
            context.resolveValue(dynval);
        });
    };
    /**
     * @param {?} me
     * @param {?} bindings
     * @param {?} inputs
     * @param {?} key
     * @param {?} value
     * @param {?} editable
     * @return {?}
     */
    MetaIncludeComponentDirective.prototype.applyDynamicInputBindings = /**
     * @param {?} me
     * @param {?} bindings
     * @param {?} inputs
     * @param {?} key
     * @param {?} value
     * @param {?} editable
     * @return {?}
     */
    function (me, bindings, inputs, key, value, editable) {
        var _this = this;
        var /** @type {?} */ publicKey = Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["nonPrivatePrefix"])(key);
        var /** @type {?} */ cnxtPath = value;
        var /** @type {?} */ metaContext = this.metaContext;
        /**
                 * captured also current context snapshot so we can replay ContextFieldPath.evaluate() if
                 * called outside of push/pop cycle.
                 *
                 * todo: check if we can replace this with Custom value accessor
                 */
        Object.defineProperty(me, publicKey, {
            get: function () {
                var /** @type {?} */ context = _this.metaContext.myContext();
                return cnxtPath.evaluate(context);
            },
            set: function (val) {
                var /** @type {?} */ context = _this.metaContext.myContext();
                var /** @type {?} */ editing = context.propertyForKey(ObjectMeta.KeyEditable)
                    || context.propertyForKey(UIMeta.KeyEditing);
                if (editing && !_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["StringWrapper"].equals(val, me[publicKey])) {
                    var /** @type {?} */ type = context.propertyForKey(ObjectMeta.KeyType);
                    cnxtPath.evaluateSet(context, ValueConverter.value(type, val));
                }
            },
            enumerable: true,
            configurable: true
        });
    };
    /**
     * Just a constant use to access Environment where we store current context for current render
     * lifecycle
     *
     */
    MetaIncludeComponentDirective.FormatterBinding = 'formatter';
    /**
     *
     * In metaU we can also insert into the element not only ngcontent but new instantiated
     * component which is defined by layout
     *
     * ```
     * field trait=ObjectDetail {
     * 	editable=false {
     * 		component: HoverCardComponnet;
     * 		bindings: {
     * 			ngcontentLayout: Content;
     * 			linkTitle:${properties.get("label")};
     * 		}
     * 	}
     *
     * \@layout=Content {
     * 		component: MetaContextObject;
     * 		bindings: {
     * 			object: $value;
     * 			layout:DetailLayout
     * 			operation:"view";
     * 		}
     * 	}
     * }
     * ```
     *
     */
    MetaIncludeComponentDirective.NgContentLayout = 'ngcontentLayout';
    MetaIncludeComponentDirective.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Directive"], args: [{
                    selector: 'm-include-component'
                },] },
    ];
    /** @nocollapse */
    MetaIncludeComponentDirective.ctorParameters = function () { return [
        { type: MetaContextComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["forwardRef"])(function () { return MetaContextComponent; }),] }] },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewContainerRef"] },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ComponentFactoryResolver"] },
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectorRef"] },
        { type: _aribaui_components__WEBPACK_IMPORTED_MODULE_3__["ComponentRegistry"] },
        { type: _aribaui_components__WEBPACK_IMPORTED_MODULE_3__["DomUtilsService"] }
    ]; };
    MetaIncludeComponentDirective.propDecorators = {
        context: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }]
    };
    return MetaIncludeComponentDirective;
}(_aribaui_components__WEBPACK_IMPORTED_MODULE_3__["IncludeComponentDirective"]));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * This is just a wrapper component around meta-form-table as we need every single context push to
 * happen before the child content start to render.
 *
 * In this case I would like to wrap wrap my content with m-context in the way:
 *
 *  <m-context scopeKey="class">
 *        <!-- lets process one zone now and four we can deal later-->
 *        <ng-template [ngIf]="isFiveZoneLayout">
 *              <aw-form-table [isEditable]="isEditable" [labelsOnTop]="labelsOnTop"
 * (onSubmit)="onSaveAction($event)">
 *                  <ng-template ngFor let-curentField [ngForOf]="zLeft()">
 *                      <m-context [field]="curentField">
 *                           <m-form-row [field]="curentField"></m-form-row>
 *                      </m-context>
 *                  </ng-template>
 *          </aw-form-table>
 *        </ng-template>
 *  </m-context>
 *
 *
 *
 */
var MetaFormComponent = /** @class */ (function () {
    function MetaFormComponent(environment) {
        this.environment = environment;
    }
    MetaFormComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"], args: [{
                    selector: 'm-form',
                    template: "<m-context #cnx scopeKey=\"class\">\n    <!-- Dont try to render if the object is not set yet -->\n    <m-form-table *ngIf=\"cnx.hasObject\"></m-form-table>\n</m-context>\n",
                },] },
    ];
    /** @nocollapse */
    MetaFormComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] }
    ]; };
    return MetaFormComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Common component to setup the context and also create context snapshot for later user.
 * @abstract
 */
var  /**
 * Common component to setup the context and also create context snapshot for later user.
 * @abstract
 */
MetaBaseComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MetaBaseComponent, _super);
    function MetaBaseComponent(env, _metaContext) {
        var _this = _super.call(this, env, _metaContext) || this;
        _this.env = env;
        _this._metaContext = _metaContext;
        return _this;
    }
    /**
     * @return {?}
     */
    MetaBaseComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.updateMeta();
    };
    /**
     * @return {?}
     */
    MetaBaseComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.updateMeta();
    };
    /**
     * @return {?}
     */
    MetaBaseComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    MetaBaseComponent.prototype.updateMeta = /**
     * @return {?}
     */
    function () {
        this.editing = this.context.booleanPropertyForKey(UIMeta.KeyEditing, false);
        if (this.editing) {
            this.object = this.context.values.get(ObjectMeta.KeyObject);
            this.contextSnapshot = this.context.snapshot();
        }
        this.doUpdate();
    };
    /**
     * Placeholder to be implemented by subclass. this method is triggered when we detect any
     * changes on the MetaContext
     */
    /**
     * Placeholder to be implemented by subclass. this method is triggered when we detect any
     * changes on the MetaContext
     * @return {?}
     */
    MetaBaseComponent.prototype.doUpdate = /**
     * Placeholder to be implemented by subclass. this method is triggered when we detect any
     * changes on the MetaContext
     * @return {?}
     */
    function () {
    };
    Object.defineProperty(MetaBaseComponent.prototype, "context", {
        /**
         * Get the last saved context from the MetaContext component
         *
         */
        get: /**
         * Get the last saved context from the MetaContext component
         *
         * @return {?}
         */
        function () {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._metaContext) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this._metaContext.myContext())) {
                return this._metaContext.myContext();
            }
            Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(false, 'Should always have metaContext available');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MetaBaseComponent.prototype.isNestedContext = /**
     * @return {?}
     */
    function () {
        return this.context.isNested;
    };
    // remove this ugly solution once I figure out custom value accessor that I can
    // provide as a expression
    /**
     * @param {?} key
     * @param {?=} defValue
     * @return {?}
     */
    MetaBaseComponent.prototype.properties = /**
     * @param {?} key
     * @param {?=} defValue
     * @return {?}
     */
    function (key, defValue) {
        if (defValue === void 0) { defValue = null; }
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.context) ? this.context.propertyForKey(key) : defValue;
    };
    /**
     * Retrieves active context's properties
     *
     */
    /**
     * Retrieves active context's properties
     *
     * @param {?} me
     * @param {?} key
     * @param {?=} defValue
     * @return {?}
     */
    MetaBaseComponent.prototype.aProperties = /**
     * Retrieves active context's properties
     *
     * @param {?} me
     * @param {?} key
     * @param {?=} defValue
     * @return {?}
     */
    function (me, key, defValue) {
        if (defValue === void 0) { defValue = null; }
        var /** @type {?} */ activeContext = this._metaContext.activeContext();
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(me) ? me.propertyForKey(key) : defValue;
    };
    return MetaBaseComponent;
}(_aribaui_components__WEBPACK_IMPORTED_MODULE_3__["BaseFormComponent"]));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * This is a wrapper around FormtTable to render data based on current MetaContext.
 */
var MetaFormTableComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MetaFormTableComponent, _super);
    /**
     * Active zones passed to the FormTable.
     *
     * Note: I could not find better way without having this property. When using FormTable I dont
     * want to tell what zones are active. The form table should figure out byitself just from the
     * ng-contented sections.
     *
     * The other approach is the wrap these into component and probably better
     *
     *e.g.
     *
     * ```html
     *  <aw-form-table ...>
     *    <aw-form-zone name='top'>
     *        <aw-form-row>...</aw-form-row>
     *     <aw-form-zone>
     *
     *
     *    ...
     *  </aw-form-table ...>
     * ```
     *
     */
    function MetaFormTableComponent(_context, env) {
        var _this = _super.call(this, env, _context) || this;
        _this._context = _context;
        _this.env = env;
        return _this;
    }
    /**
     * @param {?} zone
     * @return {?}
     */
    MetaFormTableComponent.prototype.canShowZone = /**
     * @param {?} zone
     * @return {?}
     */
    function (zone) {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.fieldsByZone) && this.fieldsByZone.has(zone);
    };
    /**
     * @return {?}
     */
    MetaFormTableComponent.prototype.doUpdate = /**
     * @return {?}
     */
    function () {
        _super.prototype.doUpdate.call(this);
        this.fieldsByZone = this.context.propertyForKey(UIMeta.PropFieldsByZone);
        this.isFiveZoneLayout = this.context.propertyForKey(UIMeta.PropIsFieldsByZone);
        var /** @type {?} */ bindings = this.context.propertyForKey(UIMeta.KeyBindings);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(bindings)) {
            this.showLabelsAboveControls = bindings.get('showLabelsAboveControls');
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.showLabelsAboveControls)) {
                this.showLabelsAboveControls = false;
            }
        }
        this.initForm();
    };
    /**
     * @return {?}
     */
    MetaFormTableComponent.prototype.zLeft = /**
     * @return {?}
     */
    function () {
        return this.fieldsByZone.get(UIMeta.ZoneLeft);
    };
    /**
     * @return {?}
     */
    MetaFormTableComponent.prototype.zMiddle = /**
     * @return {?}
     */
    function () {
        return this.fieldsByZone.get(UIMeta.ZoneMiddle);
    };
    /**
     * @return {?}
     */
    MetaFormTableComponent.prototype.zRight = /**
     * @return {?}
     */
    function () {
        return this.fieldsByZone.get(UIMeta.ZoneRight);
    };
    /**
     * @return {?}
     */
    MetaFormTableComponent.prototype.zTop = /**
     * @return {?}
     */
    function () {
        return this.fieldsByZone.get(UIMeta.ZoneTop);
    };
    /**
     * @return {?}
     */
    MetaFormTableComponent.prototype.zBottom = /**
     * @return {?}
     */
    function () {
        return this.fieldsByZone.get(UIMeta.ZoneBottom);
    };
    /**
     * Need to initialize FormGroup with all the available fields based on the given object. Its
     * hard to manage a state where we dynamically render different number of fields per operation.
     *
     * *
     * @return {?}
     */
    MetaFormTableComponent.prototype.initForm = /**
     * Need to initialize FormGroup with all the available fields based on the given object. Its
     * hard to manage a state where we dynamically render different number of fields per operation.
     *
     * *
     * @return {?}
     */
    function () {
        var _this = this;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.form)) {
            this.form.editable = this.editable;
        }
        var /** @type {?} */ obj = (/** @type {?} */ (this.context)).object;
        if (Object.keys(this.formGroup.value).length !== Object.keys(obj).length) {
            Object.keys(obj).forEach(function (key) {
                _this.doRegister(key, obj[key]);
            });
        }
    };
    MetaFormTableComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"], args: [{
                    selector: 'm-form-table',
                    template: "<ng-template [ngIf]=\"isFiveZoneLayout\">\n\n    <aw-form-table #metaFormTable [editable]=\"editing\" [useFiveZone]=\"isFiveZoneLayout\"\n                   [omitPadding]=\"isNestedContext()\"\n                   [editabilityCheck]=\"false\"\n                   [labelsOnTop]=\"showLabelsAboveControls\">\n\n\n        <aw-top *ngIf=\"canShowZone('zTop')\">\n            <ng-template ngFor let-curentField [ngForOf]=\"zTop()\">\n                <m-context [field]=\"curentField\">\n                    <m-form-row [field]=\"curentField\" [editable]=\"editing\"\n                                [initialSize]=\"'x-large'\"></m-form-row>\n                </m-context>\n            </ng-template>\n        </aw-top>\n\n\n        <aw-left *ngIf=\"canShowZone('zLeft')\">\n\n            <ng-template ngFor let-curentField [ngForOf]=\"zLeft()\">\n                <m-context [field]=\"curentField\">\n                    <m-form-row [field]=\"curentField\" [editable]=\"editing\"></m-form-row>\n                </m-context>\n            </ng-template>\n        </aw-left>\n\n\n        <aw-middle *ngIf=\"canShowZone('zMiddle')\">\n            <ng-template ngFor let-curentField [ngForOf]=\"zMiddle()\">\n                <m-context [field]=\"curentField\">\n                    <m-form-row [field]=\"curentField\" [editable]=\"editing\"></m-form-row>\n                </m-context>\n            </ng-template>\n        </aw-middle>\n\n        <aw-right *ngIf=\"canShowZone('zRight')\">\n            <ng-template ngFor let-curentField [ngForOf]=\"zRight()\">\n                <m-context [field]=\"curentField\">\n                    <m-form-row [field]=\"curentField\" [editable]=\"editing\"></m-form-row>\n                </m-context>\n            </ng-template>\n        </aw-right>\n\n\n        <aw-bottom *ngIf=\"canShowZone('zBottom')\">\n            <ng-template ngFor let-curentField [ngForOf]=\"zBottom()\">\n                <m-context [field]=\"curentField\">\n                    <m-form-row [field]=\"curentField\" [editable]=\"editing\"\n                                [initialSize]=\"'x-large'\"></m-form-row>\n                </m-context>\n            </ng-template>\n        </aw-bottom>\n    </aw-form-table>\n</ng-template>\n",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    MetaFormTableComponent.ctorParameters = function () { return [
        { type: MetaContextComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Host"] }] },
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] }
    ]; };
    MetaFormTableComponent.propDecorators = {
        form: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewChild"], args: ['metaFormTable',] }]
    };
    return MetaFormTableComponent;
}(MetaBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Component responsible for rendering a row using MetaIncludeComponent.
 * What I am still not sure, if I want to use fully validation from MetaRule and if I cannot
 * leverage basic validation from angular.
 *
 * Meaning I might remove default valid::** rule from WidgetsRules and when its required insert
 * default Required validation from angular.
 *
 */
var MetaFormRowComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MetaFormRowComponent, _super);
    function MetaFormRowComponent(_metaContext, env) {
        var _this = _super.call(this, env, _metaContext) || this;
        _this._metaContext = _metaContext;
        _this.env = env;
        /**
         * There could be special cases when we are layout component that we want to extends the row
         * 100%.
         */
        _this.initialSize = 'medium';
        return _this;
    }
    /**
     * @return {?}
     */
    MetaFormRowComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.validators = this.createValidators();
    };
    /**
     * @param {?} key
     * @return {?}
     */
    MetaFormRowComponent.prototype.bindingBoolProperty = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var /** @type {?} */ bindings = this.context.propertyForKey(UIMeta.KeyBindings);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(bindings) && bindings.has(key)) {
            var /** @type {?} */ value = bindings.get(key);
            return _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["BooleanWrapper"].boleanValue(value);
        }
        return false;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    MetaFormRowComponent.prototype.bindingStringProperty = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var /** @type {?} */ bindings = this.context.propertyForKey(UIMeta.KeyBindings);
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(bindings) && bindings.has(key)) {
            return bindings.get(key);
        }
        return null;
    };
    Object.defineProperty(MetaFormRowComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ bindings = this.context.propertyForKey(UIMeta.KeyBindings);
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(bindings) && bindings.has('size')) {
                return bindings.get('size');
            }
            return this.initialSize;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.initialSize = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates angular based Validator which for a current field executes validation rules real
     * time as use type. At the bottom of the file there is example of async validator
     *
     * @return {?}
     */
    MetaFormRowComponent.prototype.createValidators = /**
     * Creates angular based Validator which for a current field executes validation rules real
     * time as use type. At the bottom of the file there is example of async validator
     *
     * @return {?}
     */
    function () {
        var /** @type {?} */ that = this;
        var /** @type {?} */ metaValidator = function (control) {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(_angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].required(control)) || !control.touched) {
                return null;
            }
            var /** @type {?} */ errorMsg = UIMeta.validationError(that.context);
            return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(errorMsg) ? {
                'metavalid': { 'msg': errorMsg }
            } : null;
        };
        return [metaValidator];
    };
    /**
     * @return {?}
     */
    MetaFormRowComponent.prototype.isRequired = /**
     * @return {?}
     */
    function () {
        return (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.editing) && this.context.booleanPropertyForKey('required', false));
    };
    MetaFormRowComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"], args: [{
                    selector: 'm-form-row',
                    template: "<aw-form-row\n    [editable]=\"editable\"\n    [customValidators]=\"validators\"\n    [size]=\"size\"\n    [hidden]=\"!properties('visible')\"\n    [styleClass]=\"bindingStringProperty('styleClass')\"\n    [name]=\"properties('field')\"\n    [required]=\"isRequired()\"\n    [label]=\"properties('label')\"\n    [noLabelLayout]=\"bindingBoolProperty('useNoLabelLayout')\">\n\n    <m-include-component></m-include-component>\n</aw-form-row>\n\n",
                    styles: [""],
                    providers: [
                        { provide: _aribaui_components__WEBPACK_IMPORTED_MODULE_3__["FormRowComponent"], useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["forwardRef"])(function () { return MetaFormRowComponent; }) }
                    ]
                },] },
    ];
    /** @nocollapse */
    MetaFormRowComponent.ctorParameters = function () { return [
        { type: MetaContextComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Host"] }] },
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] }
    ]; };
    MetaFormRowComponent.propDecorators = {
        field: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
        initialSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }]
    };
    return MetaFormRowComponent;
}(MetaBaseComponent));
/*

 return new Promise((resolve) => {
 setTimeout (()=>{

 let context: UIContext = <UIContext> this._contextSnapshot.hydrate();
 context.value = control.value;

 let errorMsg = UIMeta.validationError(context);


 if(isPresent(errorMsg)) {
 resolve({metavalid: {msg: errorMsg}});
 } else{
 resolve(null);
 }

 }, 700);
 });


 */
// metaValid (): AsyncValidatorFn[]
// {
//     let metaValidator = (control: AbstractControl): {[key: string]: any} =>
//     {
//         return new Promise((resolve) =>
//         {
//             setTimeout(()=>
//             {
//                 let context: UIContext = <UIContext> this._contextSnapshot.hydrate();
//                 context.value = control.value;
//
//                 let errorMsg = UIMeta.validationError(context);
//
//
//                 if (isPresent(errorMsg)) {
//                     resolve({metavalid: {msg: errorMsg}});
//                 } else {
//                     resolve(null);
//                 }
//
//             } , 400);
//         });
//     };
//     return [metaValidator];
// }

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * MetaContentPage  component is used from MetaRules and universal component rendering different
 * operation modes.
 *
 *
 */
var MetaContentPageComponent = /** @class */ (function () {
    function MetaContentPageComponent(route, routingService) {
        this.route = route;
        this.routingService = routingService;
        this.newContext = true;
        this.isInspectAction = false;
        this.okLabel = 'Back';
    }
    /**
     * @return {?}
     */
    MetaContentPageComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.layout = this.route.snapshot.params['layout'];
        this.operation = this.route.snapshot.params['operation'];
        var /** @type {?} */ url = '/' + this.route.snapshot.url[0].toString();
        if (this.routingService.stateCacheHistory.has(url)) {
            this.object = this.routingService.stateCacheHistory.get(url);
            this.objectName = UIMeta.defaultLabelForIdentifier(this.object.constructor.name);
        }
        var /** @type {?} */ withBackAction = this.route.snapshot.params['b'];
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(withBackAction) && _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["BooleanWrapper"].isTrue(withBackAction)) {
            this.isInspectAction = true;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MetaContentPageComponent.prototype.onBack = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.routingService.goBack();
    };
    MetaContentPageComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"], args: [{
                    selector: 'm-content-page',
                    template: "<!-- TODO: impplement dynamic title based on the operation and object as well as updates buttons-->\n\n<m-context [pushNewContext]=\"newContext\" [object]=\"object\" [operation]=\"operation\"\n           [layout]=\"layout\">\n\n    <aw-basic-navigator (onOKAction)=\"onBack($event)\" [okActionLabel]=\"okLabel\"\n                        [showCancelButton]=\"!isInspectAction\">\n\n\n        <div class=\"page-container \">\n            <br/>\n            <h3>{{objectName}} details:</h3>\n\n            <m-include-component></m-include-component>\n        </div>\n    </aw-basic-navigator>\n\n</m-context>\n",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    MetaContentPageComponent.ctorParameters = function () { return [
        { type: _angular_router__WEBPACK_IMPORTED_MODULE_7__["ActivatedRoute"] },
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["RoutingService"] }
    ]; };
    return MetaContentPageComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * MetaLayout represent a high level rule that aggregates defined layout. When we iterate thru the
 * different layout we need to remember both current rendered context as well as ItemProperties.
 *
 *
 *
 */
var  /**
 * MetaLayout represent a high level rule that aggregates defined layout. When we iterate thru the
 * different layout we need to remember both current rendered context as well as ItemProperties.
 *
 *
 *
 */
MetaLayout = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MetaLayout, _super);
    function MetaLayout(_metaContext, env) {
        var _this = _super.call(this, env, _metaContext) || this;
        _this._metaContext = _metaContext;
        _this.env = env;
        /**
         * Layout definitions by its name
         *
         */
        _this.nameToLayout = new Map();
        /**
         * A map linking the name of the layout to the actual context. We need this when we need
         * to access current content.
         *
         */
        _this.contextMap = new Map();
        return _this;
    }
    /**
     * Can be called by m-content to @Output when context properties are pushed to stack
     *
     */
    /**
     * Can be called by m-content to \@Output when context properties are pushed to stack
     *
     * @param {?} layoutName
     * @return {?}
     */
    MetaLayout.prototype.afterContextSet = /**
     * Can be called by m-content to \@Output when context properties are pushed to stack
     *
     * @param {?} layoutName
     * @return {?}
     */
    function (layoutName) {
        this.layoutContext = this.activeContext;
        this.contextMap.set(layoutName, this.layoutContext.snapshot().hydrate(false));
    };
    /**
     * Can be called by m-content to @Output after context properties are pushed to stack
     *
     */
    /**
     * Can be called by m-content to \@Output after context properties are pushed to stack
     *
     * @param {?} layoutName
     * @return {?}
     */
    MetaLayout.prototype.beforeContextSet = /**
     * Can be called by m-content to \@Output after context properties are pushed to stack
     *
     * @param {?} layoutName
     * @return {?}
     */
    function (layoutName) {
        this.layout = this.nameToLayout.get(layoutName);
    };
    Object.defineProperty(MetaLayout.prototype, "activeContext", {
        get: /**
         * @return {?}
         */
        function () {
            return this._metaContext.activeContext();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MetaLayout.prototype, "allLayouts", {
        /**
         * Retrieves all available and active layouts for zones defined by subclasses
         *
         */
        get: /**
         * Retrieves all available and active layouts for zones defined by subclasses
         *
         * @return {?}
         */
        function () {
            var _this = this;
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._allLayouts)) {
                var /** @type {?} */ meta = /** @type {?} */ (this.activeContext.meta);
                this._allLayouts = meta.itemList(this.activeContext, UIMeta.KeyLayout, this.zones());
                this.nameToLayout.clear();
                this._allLayouts.forEach(function (item) {
                    return _this.nameToLayout.set(item.name, item);
                });
            }
            return this._allLayouts;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MetaLayout.prototype, "layoutsByZones", {
        /**
         * Retrieves all available and active layouts and aggregate them their name
         *
         */
        get: /**
         * Retrieves all available and active layouts and aggregate them their name
         *
         * @return {?}
         */
        function () {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._layoutsByZones)) {
                var /** @type {?} */ meta = /** @type {?} */ (this.activeContext.meta);
                this._layoutsByZones = meta.itemsByZones(this.activeContext, UIMeta.KeyLayout, this.zones());
            }
            return this._layoutsByZones;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MetaLayout.prototype, "layout", {
        get: /**
         * @return {?}
         */
        function () {
            return this._layout;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._layout = value;
            this._propertyMap = null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MetaLayout.prototype, "propertyMap", {
        // todo: should this be for current layout?
        get: /**
         * @return {?}
         */
        function () {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._propertyMap)) {
                this.activeContext.push();
                this._propertyMap = this.activeContext.allProperties();
                this.activeContext.pop();
            }
            return this._propertyMap;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MetaLayout.prototype.label = /**
     * @return {?}
     */
    function () {
        return this.activeContext.resolveValue(this.propertyMap.get(UIMeta.KeyLabel));
    };
    /**
     * @param {?} name
     * @return {?}
     */
    MetaLayout.prototype.labelForContext = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        var /** @type {?} */ context = this.contextMap.get(name);
        return _super.prototype.aProperties.call(this, context, UIMeta.KeyLabel);
    };
    /**
     * @return {?}
     */
    MetaLayout.prototype.zones = /**
     * @return {?}
     */
    function () {
        return UIMeta.ZonesTLRMB;
    };
    // remove this ugly solution once I figure out custom value accessor
    /**
     * @param {?} key
     * @param {?=} defValue
     * @return {?}
     */
    MetaLayout.prototype.properties = /**
     * @param {?} key
     * @param {?=} defValue
     * @return {?}
     */
    function (key, defValue) {
        if (defValue === void 0) { defValue = null; }
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.activeContext) ? this.activeContext.propertyForKey(key) : defValue;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    MetaLayout.prototype.debugString = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        var /** @type {?} */ context = this.contextMap.get(name);
        Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["assert"])(Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(context), 'Trying to retrive debugString on non-existing context');
        return context.debugString();
    };
    /**
     * @return {?}
     */
    MetaLayout.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.layoutContext = null;
        this.contextMap.clear();
        this.contextMap = null;
    };
    return MetaLayout;
}(MetaBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * MetaElementList is implementation of Stack Layout where the content is rendered as list (stacked)
 * You do not use this layout directly as it is instantiated dynamically using MetaIncludeComponent.
 *
 * For more detail please checkout WidgetRules.oss the part bellow where create new trait
 * that can be applied to any layout.
 *
 * ```
 *
 * layout {
 *
 * \@trait=Stack { visible:true; component:MetaElementListComponent }
 *
 * }
 *
 * ```
 *
 * Actual usage could be :
 *
 *
 * ```
 *  layout=Inspect2#Stack {
 * \@layout=First#Form {
 *           elementStyle:"padding-bottom:100px";
 *       }
 * \@layout=Second#Form { zonePath:Second; }
 *   }
 *
 *
 *
 *    class=User {
 *       zNone => *;
 *       zLeft => firstName => lastName => age => department;
 *       Second.zLeft => email;
 *
 *   }
 *
 * ```
 *
 */
var MetaElementListComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MetaElementListComponent, _super);
    function MetaElementListComponent(_metaContext, env, sanitizer) {
        var _this = _super.call(this, _metaContext, env) || this;
        _this._metaContext = _metaContext;
        _this.env = env;
        _this.sanitizer = sanitizer;
        return _this;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    MetaElementListComponent.prototype.styleString = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        var /** @type {?} */ lContext = this.contextMap.get(name);
        // return isPresent(lContext) && isPresent(lContext.propertyForKey('elementStyle')) ?
        //     this.sanitizer.bypassSecurityTrustStyle(lContext.propertyForKey('elementStyle')) :
        // null;
        return null;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    MetaElementListComponent.prototype.classString = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        var /** @type {?} */ lContext = this.contextMap.get(name);
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(lContext) ? lContext.propertyForKey('elementClass') : null;
    };
    MetaElementListComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"], args: [{
                    template: "<!--<b>MetaElementList: {{allLayouts}} </b>-->\n<!--<pre [innerHTML]=\"context.debugString()\"></pre>-->\n\n<ng-template ngFor [ngForOf]=\"allLayouts\" let-cLayout>\n\n    <m-context [layout]=\"cLayout.name\" (afterContextSet)=\"afterContextSet($event)\"\n               (beforeContextSet)=\"beforeContextSet($event)\">\n\n        <!--<b>MetaElementList: layout {{cLayout.name}} </b>-->\n        <!--<pre [innerHTML]=\"debugString(cLayout.name)\"></pre>-->\n\n        <div class=\"ui-g \">\n            <div class=\"ui-g-12 ui-g-nopad\" [ngClass]=\"classString(cLayout.name)\"\n                 [ngStyle]=\"styleString(cLayout.name)\"\n            >\n                <m-include-component></m-include-component>\n            </div>\n        </div>\n    </m-context>\n\n</ng-template>\n\n",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    MetaElementListComponent.ctorParameters = function () { return [
        { type: MetaContextComponent },
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_8__["DomSanitizer"] }
    ]; };
    return MetaElementListComponent;
}(MetaLayout));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * MetaActionList provides a way how to attach actions to the screen. We can use \@action declaration
 * to define new action and their actionResults. actionResults is an expression that is executed
 * and either redirect you to different page or some logic is executed.
 *
 * Actions can be organized into action categories but if we do not provide any action category
 * default one is used.
 *
 * This way we define placeholder using a layout where actions are inserted
 *
 *
 * ```html
 *
 *    layout=Inspect2#Stack {
 * \@layout=MenuTop#ActionButtons {
 *       }
 *
 * \@layout=First#Form {
 *     }
 *
 * \@layout=Second#Form { zonePath:Second; }
 *  }
 *
 *
 * ```
 *
 * And this is how we define actions for current page/class/object
 *
 * ```
 * \@action=update {
 *             actionResults:${ object.firstName = "Mr." +  object.firstName };
 *             visible: ${ properties.editing };
 *    }
 *
 *
 * \@action=Save {
 *             label: "My Save";
 *             actionResults:${ object.firstName = "Ms." +  object.firstName };
 *             visible: ${ properties.editing };
 *             buttonStyle:info;
 *    }
 * ```
 *
 *
 *
 *
 *
 *
 *
 */
var MetaActionListComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MetaActionListComponent, _super);
    function MetaActionListComponent(_metaContext, env) {
        var _this = _super.call(this, env, _metaContext) || this;
        _this._metaContext = _metaContext;
        _this.env = env;
        /**
         *
         * Defines type of components that renders our actions. We have 3 types:
         * Buttons, Links and Popup Menu
         *
         */
        _this.renderAs = 'buttons';
        /**
         * Default style used for the buttons if none is specified
         *
         */
        _this.defaultStyle = 'info';
        /**
         * Tells us if the action should be rendered on the left or right side
         *
         */
        _this.align = 'right';
        /**
         * Map linking the name of the layout to the actual context. We need this when we need
         * to access current content.
         *
         */
        _this._contextMap = new Map();
        return _this;
    }
    // protected updateMeta(): any
    // {
    //     // todo: replace it with EventEmmitter.
    //     this._actionsByCategory = null;
    //     this._actionsByName = null;
    //     return super.updateMeta();
    // }
    /**
     * Read and stores current action categories available to current Context
     *
     */
    /**
     * Read and stores current action categories available to current Context
     *
     * @return {?}
     */
    MetaActionListComponent.prototype.actionCategories = /**
     * Read and stores current action categories available to current Context
     *
     * @return {?}
     */
    function () {
        var _this = this;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._actionsByCategory) || Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this._actionsByName)) {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.filterActions)) {
                this.context.set('filterActions', this.filterActions);
            }
            var /** @type {?} */ meta = /** @type {?} */ (this.context.meta);
            this.context.push();
            this.menuModel = [];
            this._actionsByCategory = new Map();
            this._actionsByName = new Map();
            this.categories = meta.actionsByCategory(this.context, this._actionsByCategory, UIMeta.ActionZones);
            this.context.pop();
            this._actionsByCategory.forEach(function (v, k) {
                v.forEach(function (item) { return _this._actionsByName.set(item.name, item); });
            });
        }
        return this.categories;
    };
    /**
     *
     * Action belonging to current category..
     *
     */
    /**
     *
     * Action belonging to current category..
     *
     * @param {?} category
     * @return {?}
     */
    MetaActionListComponent.prototype.actions = /**
     *
     * Action belonging to current category..
     *
     * @param {?} category
     * @return {?}
     */
    function (category) {
        return this._actionsByCategory.get(category.name);
    };
    /**
     *
     * When action clicked this method delegates it into meta layer to be executed.
     *
     */
    /**
     *
     * When action clicked this method delegates it into meta layer to be executed.
     *
     * @param {?} action
     * @return {?}
     */
    MetaActionListComponent.prototype.actionClicked = /**
     *
     * When action clicked this method delegates it into meta layer to be executed.
     *
     * @param {?} action
     * @return {?}
     */
    function (action) {
        var /** @type {?} */ context = this._contextMap.get(action);
        var /** @type {?} */ meta = /** @type {?} */ (context.meta);
        meta.fireActionFromProps(this._actionsByName.get(action), /** @type {?} */ (context));
    };
    /**
     * A hook used to store the most current context for each action.
     *
     */
    /**
     * A hook used to store the most current context for each action.
     *
     * @param {?} actionName
     * @return {?}
     */
    MetaActionListComponent.prototype.onAfterContextSet = /**
     * A hook used to store the most current context for each action.
     *
     * @param {?} actionName
     * @return {?}
     */
    function (actionName) {
        var /** @type {?} */ aContext = this._metaContext.activeContext().snapshot().hydrate(false);
        this._contextMap.set(actionName, aContext);
        if (this.renderAs === 'menu') {
            this.populateMenu(actionName);
        }
    };
    /**
     * A hook used to store the most current context for each action.
     *
     */
    /**
     * A hook used to store the most current context for each action.
     *
     * @param {?} change
     * @return {?}
     */
    MetaActionListComponent.prototype.onContextChanged = /**
     * A hook used to store the most current context for each action.
     *
     * @param {?} change
     * @return {?}
     */
    function (change) {
        console.log('Changed = ' + change);
    };
    /**
     * @param {?} actionName
     * @return {?}
     */
    MetaActionListComponent.prototype.label = /**
     * @param {?} actionName
     * @return {?}
     */
    function (actionName) {
        var /** @type {?} */ context = this._contextMap.get(actionName);
        return _super.prototype.aProperties.call(this, context, UIMeta.KeyLabel);
    };
    /**
     * @param {?} actionName
     * @return {?}
     */
    MetaActionListComponent.prototype.isActionDisabled = /**
     * @param {?} actionName
     * @return {?}
     */
    function (actionName) {
        var /** @type {?} */ context = this._contextMap.get(actionName);
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(context) ? !context.booleanPropertyForKey('enabled', false) : true;
    };
    /**
     * @return {?}
     */
    MetaActionListComponent.prototype.alignRight = /**
     * @return {?}
     */
    function () {
        return this.align === 'right';
    };
    /**
     * @param {?} actionName
     * @return {?}
     */
    MetaActionListComponent.prototype.style = /**
     * @param {?} actionName
     * @return {?}
     */
    function (actionName) {
        var /** @type {?} */ context = this._contextMap.get(actionName);
        var /** @type {?} */ style = _super.prototype.aProperties.call(this, context, 'buttonStyle');
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(style) ? style : this.defaultStyle;
    };
    /**
     * @param {?} actionName
     * @return {?}
     */
    MetaActionListComponent.prototype.populateMenu = /**
     * @param {?} actionName
     * @return {?}
     */
    function (actionName) {
        var _this = this;
        var /** @type {?} */ label = this.label(actionName);
        var /** @type {?} */ index = this.menuModel.findIndex(function (item) { return item.actionName === actionName; });
        var /** @type {?} */ itemCommand = {
            label: label,
            actionName: actionName,
            disabled: this.isActionDisabled(actionName),
            command: function (event) {
                _this.actionClicked(event.item.actionName);
            }
        };
        if (index === -1) {
            this.menuModel.push(itemCommand);
        }
        else {
            this.menuModel[index] = itemCommand;
        }
    };
    MetaActionListComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"], args: [{
                    template: "<span [class.u-flr]=\"alignRight()\">\n    <m-context *ngIf=\"renderAs === 'buttons'\">\n        <ng-template ngFor [ngForOf]=\"actionCategories()\" let-category>\n            <m-context [actionCategory]=\"category.name\">\n                <ng-template ngFor [ngForOf]=\"actions(category)\" let-action>\n                    <m-context [action]=\"action.name\"\n                               (onContextChanged)=\"onContextChanged($event)\"\n                               (afterContextSet)=\"onAfterContextSet($event)\">\n                        <aw-button (action)=\"actionClicked(action.name)\"\n                                   [style]=\"style(action.name)\"\n                                   [disabled]=\"isActionDisabled(action.name)\">\n\n                        {{ label(action.name) }}\n                        </aw-button>\n                    </m-context>\n                </ng-template>\n            </m-context>\n\n        </ng-template>\n    </m-context>\n\n    <m-context *ngIf=\"renderAs === 'links'\">\n        <ng-template ngFor [ngForOf]=\"actionCategories()\" let-category>\n            <m-context [actionCategory]=\"category.name\">\n                <ng-template ngFor [ngForOf]=\"actions(category)\" let-action>\n                    <m-context [action]=\"action.name\"\n                               (onContextChanged)=\"onContextChanged($event)\"\n                               (afterContextSet)=\"onAfterContextSet($event)\">\n                        <aw-button (action)=\"actionClicked(action.name)\"\n                                   [style]=\"'link'\"\n                                   [disabled]=\"isActionDisabled(action.name)\">\n\n                        {{ label(action.name) }}\n                        </aw-button>\n                    </m-context>\n                </ng-template>\n            </m-context>\n\n        </ng-template>\n    </m-context>\n\n    <m-context *ngIf=\"renderAs === 'menu'\">\n        <ng-template ngFor [ngForOf]=\"actionCategories()\" let-category>\n            <m-context [actionCategory]=\"category.name\">\n\n                <ng-template ngFor [ngForOf]=\"actions(category)\" let-action>\n                    <m-context [action]=\"action.name\"\n                               (onContextChanged)=\"onContextChanged($event)\"\n                               (afterContextSet)=\"onAfterContextSet($event)\">\n                    </m-context>\n                </ng-template>\n            </m-context>\n        </ng-template>\n\n        <p-menu #menu popup=\"popup\" [model]=\"menuModel\"></p-menu>\n\n        <!-- todo: extend button to support icons -->\n        <aw-button (action)=\"menu.toggle($event)\">\n            Actions\n        </aw-button>\n\n    </m-context>\n</span>\n\n\n\n\n\n",
                    styles: [".m-action-list{width:100%}"]
                },] },
    ];
    /** @nocollapse */
    MetaActionListComponent.ctorParameters = function () { return [
        { type: MetaContextComponent },
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] }
    ]; };
    MetaActionListComponent.propDecorators = {
        renderAs: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
        defaultStyle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
        align: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
        filterActions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }]
    };
    return MetaActionListComponent;
}(MetaBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Default homePage implementation for a Module. Just like on the example bellow when we define a
 * module without a homePage this MetaHomePageComponent will be used.
 *
 * ```
 *
 * \@module=Home {
 *       label:"My Home";
 *       pageTitle:"You are now on Homepage";
 *
 * \@layout=Today {
 *          after:zTop;
 *          label: "Sales Graph";
 *          component:SalesGraphComponent;
 *     }
 *  }
 *
 * ```
 * Or you can decide not to use this MetaHomePage and Provide your own e.g:
 *
 * ```
 * \@module=Products {
 *      label:"Products for Somethig";
 *      pageTitle:"You are now on Products";
 *      homePage:ProductContentComponent;
 *  }
 *
 * ```
 *
 *
 */
var MetaHomePageComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MetaHomePageComponent, _super);
    function MetaHomePageComponent(env, activatedRoute) {
        var _this = _super.call(this, env) || this;
        _this.env = env;
        _this.activatedRoute = activatedRoute;
        return _this;
    }
    /**
     *
     * This page is triggered by router and we expect a module to be passed in by routing
     * params
     *
     */
    /**
     *
     * This page is triggered by router and we expect a module to be passed in by routing
     * params
     *
     * @return {?}
     */
    MetaHomePageComponent.prototype.ngOnInit = /**
     *
     * This page is triggered by router and we expect a module to be passed in by routing
     * params
     *
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        var /** @type {?} */ routeParams = this.activatedRoute.snapshot.params;
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(routeParams) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(routeParams[UIMeta.KeyModule])) {
            this.module = routeParams[UIMeta.KeyModule];
        }
    };
    /**
     * @return {?}
     */
    MetaHomePageComponent.prototype.hasModule = /**
     * @return {?}
     */
    function () {
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(this.module);
    };
    MetaHomePageComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"], args: [{
                    selector: 'm-home-page',
                    template: "<div class=\"m-page\" *ngIf=\"hasModule()\">\n    <m-context [module]=\"module\">\n        <m-include-component></m-include-component>\n    </m-context>\n\n</div>\n\n\n",
                    styles: [".m-page{width:100%;margin:0 auto;padding:5px}.m-page:after{content:\".\";display:block;height:0;clear:both;visibility:hidden}.module-footer{clear:both}"]
                },] },
    ];
    /** @nocollapse */
    MetaHomePageComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] },
        { type: _angular_router__WEBPACK_IMPORTED_MODULE_7__["ActivatedRoute"] }
    ]; };
    MetaHomePageComponent.propDecorators = {
        module: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }]
    };
    return MetaHomePageComponent;
}(_aribaui_components__WEBPACK_IMPORTED_MODULE_3__["BaseComponent"]));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *
 * Defines 4 sizes for the portlet size
 *
 */
var /** @type {?} */ PortletSizes = {
    'small': 'ui-md-3',
    'medium': 'ui-md-4',
    'wide': 'ui-md-6',
    'large': 'ui-md-12'
};
/**
 * Simple Dashboard implementation for the homePage. Just like we support inside MetaFormTable
 * different zones and distribute fields to them, we do the same with defined layouts.
 *
 * This dashboard supports 3 zones.
 *
 *    zToc: This is the place where usually all the actions or 2nd level navigation will go
 *    zTop,zBottom: is where the portlets are rendered.
 *
 *
 * To distribute layouts to different zones :
 *
 * ```
 * \@module=Home {
 *           label:"My Home";
 *           pageTitle:"You are now on Homepage";
 *
 *
 * \@layout=Today {
 *              after:zTop;
 *              label: "Sales Graph";
 *              component:SalesGraphComponent;
 *
 *           }
 *
 * \@layout=Sport {
 *              after:Today;
 *              label: "Sport today!";
 *              component:StringComponent;
 *              bindings:{value:"The Texas Tech quarterback arrived at  " }
 *
 *           }
 *
 * ```
 *
 *  or Push actions to the zToc zone:
 *
 * ```
 * \@module=Home {
 *           label:"My Home";
 *           pageTitle:"You are now on Homepage";
 *
 *
 * \@layout=Today {
 *              after:zTop;
 *              label: "Sales Graph";
 *              component:SalesGraphComponent;
 *
 *           }
 *
 * \@layout=Actions#ActionLinks {
 *               label:$[a004]Actions;
 *                after:zToc;
 *            }
 *
 *
 * \@actionCategory=Create {
 * \@action=NewBlog#pageAction { pageName:blogPage;}
 * \@action=NewChart#pageAction { pageName:chartPage;}
 *           }
 *
 * }
 *
 *
 *
 */
var MetaDashboardLayoutComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MetaDashboardLayoutComponent, _super);
    function MetaDashboardLayoutComponent(metaContext, env) {
        var _this = _super.call(this, metaContext, env) || this;
        /**
         * Defines if sidebar is collapsed or expanded
         *
         */
        _this.activeMenu = false;
        /**
         * Current Module name
         *
         */
        _this.dashboardName = '';
        return _this;
    }
    /**
     * @return {?}
     */
    MetaDashboardLayoutComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.dashboardName = this.label();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MetaDashboardLayoutComponent.prototype.toggleMenu = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.activeMenu = !this.activeMenu;
    };
    /**
     * @return {?}
     */
    MetaDashboardLayoutComponent.prototype.zones = /**
     * @return {?}
     */
    function () {
        return MetaDashboardLayoutComponent.ZonesTB;
    };
    /**
     * @return {?}
     */
    MetaDashboardLayoutComponent.prototype.topLayouts = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ tops = this.layoutsByZones.get(UIMeta.ZoneTop);
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(tops) ? tops : [];
    };
    /**
     * @param {?} name
     * @return {?}
     */
    MetaDashboardLayoutComponent.prototype.portletWidth = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        var /** @type {?} */ lContext = this.contextMap.get(name);
        var /** @type {?} */ width = lContext.propertyForKey('portletWidth');
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(width) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(PortletSizes[width]) ? PortletSizes[width] :
            'ui-md-4';
    };
    /**
     * @return {?}
     */
    MetaDashboardLayoutComponent.prototype.bottomLayouts = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ bottom = this.layoutsByZones.get(UIMeta.ZoneBottom);
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(bottom) ? bottom : [];
    };
    /**
     * @return {?}
     */
    MetaDashboardLayoutComponent.prototype.zTocLayouts = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ bottom = this.layoutsByZones.get(MetaDashboardLayoutComponent.ZoneToc);
        return Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(bottom) ? bottom : [];
    };
    /**
     * New defined zone for Actions
     *
     */
    MetaDashboardLayoutComponent.ZoneToc = 'zToc';
    MetaDashboardLayoutComponent.ZonesTB = [
        MetaDashboardLayoutComponent.ZoneToc, UIMeta.ZoneTop,
        UIMeta.ZoneBottom
    ];
    MetaDashboardLayoutComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"], args: [{
                    template: "<div>\n    <span class=\"m-dashbord-name\">{{dashboardName}} </span>\n    <span class=\"m-dashbord-lbl\"> Dashboard</span>\n</div>\n\n\n<div id=\"m-toggle-bar\" *ngIf=\"zTocLayouts().length > 0\">\n    <aw-hyperlink (action)=\"toggleMenu($event)\" [size]=\"'large'\">\n        <i class=\"fa fa-bars\"></i>\n    </aw-hyperlink>\n</div>\n<div id=\"m-toc\" [class.active]=\"activeMenu\" *ngIf=\"zTocLayouts().length > 0\">\n    <div class=\"ui-g \">\n        <m-context *ngFor=\"let layout of zTocLayouts()\"\n                   [layout]=\"layout.name\" (afterContextSet)=\"afterContextSet($event)\"\n                   (beforeContextSet)=\"beforeContextSet($event)\">\n\n            <div class=\"ui-g-12 \" [ngClass]=\"portletWidth(layout.name)\">\n                <p-panel [header]=\"labelForContext(layout.name)\">\n                    <m-include-component></m-include-component>\n                </p-panel>\n            </div>\n        </m-context>\n    </div>\n</div>\n\n<div id=\"m-content\">\n    <div class=\"ui-g m-dashboard\">\n        <!-- top -->\n        <div class=\"ui-g-12\">\n            <div class=\"ui-g \">\n                <m-context *ngFor=\"let layout of topLayouts()\"\n                           [layout]=\"layout.name\" (afterContextSet)=\"afterContextSet($event)\"\n                           (beforeContextSet)=\"beforeContextSet($event)\">\n\n                    <div class=\"ui-g-12 \" [ngClass]=\"portletWidth(layout.name)\">\n                        <p-panel [header]=\"labelForContext(layout.name)\" [toggleable]=\"false\">\n                            <m-include-component></m-include-component>\n                        </p-panel>\n                    </div>\n                </m-context>\n            </div>\n        </div>\n\n        <!-- bottom -->\n        <div class=\"ui-g-12\">\n            <div class=\"ui-g \">\n                <m-context *ngFor=\"let layout of bottomLayouts()\"\n                           [layout]=\"layout.name\" (afterContextSet)=\"afterContextSet($event)\"\n                           (beforeContextSet)=\"beforeContextSet($event)\">\n\n                    <div class=\"ui-g-12 \" [ngClass]=\"portletWidth(layout.name)\">\n                        <p-panel [header]=\"labelForContext(layout.name)\" [toggleable]=\"false\">\n                            <m-include-component></m-include-component>\n                        </p-panel>\n                    </div>\n                </m-context>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n\n",
                    styles: ["#m-toc{position:relative;float:left;z-index:99;width:15em;padding:.5em;box-shadow:6px 0 10px -4px rgba(0,0,0,.3)}#m-content{float:left;padding-top:1em;padding-left:1em;height:auto}#m-toggle-bar{box-sizing:border-box;border-bottom:1px solid #dde3e6;overflow:hidden;display:none;border-radius:5px;padding:.5em;width:2em;height:2.3em}#m-toggle-bar:focus,#m-toggle-bar:hover{background-color:#ececec}#m-toggle-bar:after{content:'';display:block;clear:both}.m-dashbord-name{font-weight:600}.ui-g{display:block}@media screen and (max-width:64em){#m-toc{display:none;overflow-y:auto;z-index:999}#m-toc.active{display:block}#m-toggle-bar{display:block;position:relative;z-index:1000;margin-right:1em}}"]
                },] },
    ];
    /** @nocollapse */
    MetaDashboardLayoutComponent.ctorParameters = function () { return [
        { type: MetaContextComponent },
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] }
    ]; };
    return MetaDashboardLayoutComponent;
}(MetaLayout));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * MetaSection renders list of sections defined by \@trait inside WidgetsRules. It uses layouts to
 * structure the list.
 *
 * ```
 *  layout {
 * \@trait=Sections { visible:true; component:MetaSectionsComponent }
 *  }
 *
 * ```
 *
 * and can be used as :
 *
 * ```
 *     layout=RfxDetailLayout#Sections {
 *
 * \@layout=Header#Form {
 *             trait:labelsOnTop;
 *             zonePath:Header;
 *
 *             bindings: {
 *                 description:$object.header.description;
 *             }
 *         }
 * \@layout=LineItems {
 *             component:RfxLineItemsComponent;
 *             bindings: {
 *                 rfxEvent:$object;
 *             }
 *         }
 * \@layout=Participants {
 *             component:RfxParticipantsComponent;
 *             bindings: {
 *                 rfxEvent:$object;
 *             }
 *         }
 *     }
 *
 *
 *     class=RfxEventHeader {
 *         zNone => *;
 *         Header.zLeft => requester => region => needBy;
 *     }
 * ```
 * In above example we have first section with Form where RfxEventHeader sends its fields
 * and several other sections with custom component.
 *
 *
 */
var MetaSectionsComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MetaSectionsComponent, _super);
    function MetaSectionsComponent(_metaContext, env) {
        var _this = _super.call(this, _metaContext, env) || this;
        _this._metaContext = _metaContext;
        _this.env = env;
        _this.sectionOperations = {};
        _this.onCompleteSubscriptions = {};
        return _this;
    }
    /**
     * @return {?}
     */
    MetaSectionsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        this.allLayouts.forEach(function (value) {
            _this.sectionOperations[value.name] = 'view';
        });
    };
    /**
     * @return {?}
     */
    MetaSectionsComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngDoCheck.call(this);
    };
    /**
     * @return {?}
     */
    MetaSectionsComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.sections = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"])(this.viewSections.toArray());
    };
    /**
     * Action handler to broadcast event outside so it can be handled by the application
     *
     */
    /**
     * Action handler to broadcast event outside so it can be handled by the application
     *
     * @param {?} name
     * @param {?} sectionIndex
     * @param {?} cnxName
     * @param {?} event
     * @return {?}
     */
    MetaSectionsComponent.prototype.onAction = /**
     * Action handler to broadcast event outside so it can be handled by the application
     *
     * @param {?} name
     * @param {?} sectionIndex
     * @param {?} cnxName
     * @param {?} event
     * @return {?}
     */
    function (name, sectionIndex, cnxName, event) {
        var _this = this;
        var /** @type {?} */ section = this.sections[sectionIndex];
        if (this.env.hasValue('parent-cnx')) {
            var /** @type {?} */ cnx = this.env.getValue('parent-cnx');
            cnx.onAction.emit(new MetaUIActionEvent(section, name, cnxName, event));
        }
        if (name === 'onEdit' && section.editState && section.editMode === 'default') {
            this.sectionOperations[cnxName] = 'edit';
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.onCompleteSubscriptions[cnxName])) {
                section.onEditingComplete.subscribe(function (value) {
                    return _this.sectionOperations[cnxName] = 'view';
                });
                this.onCompleteSubscriptions[cnxName] = section;
            }
        }
    };
    /**
     *
     * Retrieves a property from the current context
     *
     */
    /**
     *
     * Retrieves a property from the current context
     *
     * @param {?} propName
     * @param {?} cnxName
     * @param {?} defaultVal
     * @return {?}
     */
    MetaSectionsComponent.prototype.sectionProp = /**
     *
     * Retrieves a property from the current context
     *
     * @param {?} propName
     * @param {?} cnxName
     * @param {?} defaultVal
     * @return {?}
     */
    function (propName, cnxName, defaultVal) {
        var /** @type {?} */ lContext = this.contextMap.get(cnxName);
        return (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(lContext) && Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(lContext.propertyForKey(propName))) ?
            lContext.propertyForKey(propName) : defaultVal;
    };
    /**
     * @return {?}
     */
    MetaSectionsComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngOnDestroy.call(this);
        this.allLayouts.forEach(function (value) {
            if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isPresent"])(_this.onCompleteSubscriptions[value.name])) {
                _this.onCompleteSubscriptions[value.name].onEditingComplete.unsubscribe();
            }
        });
    };
    MetaSectionsComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"], args: [{
                    template: "<div class=\"meta-sections\">\n\n    <m-context *ngFor=\"let layout of allLayouts; let i = index\" [layout]=\"layout.name\"\n               [operation]=\"sectionOperations[layout.name]\"\n               (afterContextSet)=\"afterContextSet($event)\"\n               (beforeContextSet)=\"beforeContextSet($event)\">\n\n        <aw-section [title]=\"sectionProp('title', layout.name, null)\"\n                    [description]=\"sectionProp('description', layout.name, null)\"\n                    [opened]=\"sectionProp('opened', layout.name, true)\"\n                    [actionIcon]=\"sectionProp('actionIcon', layout.name, 'icon-edit')\"\n                    [editable]=\"sectionProp('canEdit', layout.name, false)\"\n                    [editMode]=\"sectionProp('editMode', layout.name, 'default')\"\n                    [disableClose]=\"sectionProp('disableClose', layout.name, false)\"\n                    (onEdit)=\"onAction('onEdit', i, layout.name, $event)\"\n                    (onSaveAction)=\"onAction('onSaveAction', i, layout.name, $event)\"\n                    (onCancelAction)=\"onAction('onCancelAction', i, layout.name, $event)\">\n\n            <m-include-component></m-include-component>\n        </aw-section>\n\n    </m-context>\n</div>\n",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    MetaSectionsComponent.ctorParameters = function () { return [
        { type: MetaContextComponent },
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] }
    ]; };
    MetaSectionsComponent.propDecorators = {
        viewSections: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewChildren"], args: [_aribaui_components__WEBPACK_IMPORTED_MODULE_3__["SectionComponent"],] }]
    };
    return MetaSectionsComponent;
}(MetaLayout));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Just like MetaContentPage this components renders meta context details but embedded as some
 * inline component. Not a page with page level buttons
 *
 *
 * Todo: We dont really need this component we we in the future extends MetaIncludeComponent to
 * support awcontentElement:
 *
 * ```
 *  {
 *      component:MetaContextComponent;
 *      bindings: {
 *          object:$value;
 *          layout:Inspect;
 *          operation:view;
 *          awcontentElement:MetaIncludeComponnetDirective;
 *      }
 *
 *  }
 *
 *  ```
 *
 *  This would instantiate right meta context just like this class.
 */
var MetaObjectDetailComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MetaObjectDetailComponent, _super);
    function MetaObjectDetailComponent(env) {
        var _this = _super.call(this, env) || this;
        _this.env = env;
        /**
         * For the detail view we always use read only content
         */
        _this.operation = 'view';
        /**
         * Default layout
         *
         */
        _this.layout = 'Inspect';
        return _this;
    }
    /**
     * @return {?}
     */
    MetaObjectDetailComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isBlank"])(this.object) || !Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_1__["isStringMap"])(this.object)) {
            throw new Error('Cannot render primitive values as object details!');
        }
    };
    MetaObjectDetailComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"], args: [{
                    selector: 'm-content-detail',
                    template: "<m-context [pushNewContext]=\"true\" [object]=\"object\" [operation]=\"operation\"\n           [layout]=\"layout\" group=\"ObjectDetail\">\n\n    <div class=\"w-object-detail\">\n        <m-include-component></m-include-component>\n    </div>\n\n</m-context>\n",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    MetaObjectDetailComponent.ctorParameters = function () { return [
        { type: _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["Environment"] }
    ]; };
    MetaObjectDetailComponent.propDecorators = {
        object: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
        operation: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
        layout: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }]
    };
    return MetaObjectDetailComponent;
}(_aribaui_components__WEBPACK_IMPORTED_MODULE_3__["BaseComponent"]));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AWMetaLayoutModule = /** @class */ (function () {
    function AWMetaLayoutModule() {
    }
    AWMetaLayoutModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["NgModule"], args: [{
                    declarations: [
                        MetaIncludeComponentDirective,
                        MetaFormComponent,
                        MetaFormTableComponent,
                        MetaFormRowComponent,
                        NoMetaComponent,
                        MetaContentPageComponent,
                        MetaElementListComponent,
                        MetaActionListComponent,
                        MetaHomePageComponent,
                        MetaDashboardLayoutComponent,
                        MetaSectionsComponent,
                        MetaObjectDetailComponent,
                    ],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_5__["ReactiveFormsModule"],
                        AWMetaCoreModule,
                        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["AribaCoreModule"],
                        _aribaui_components__WEBPACK_IMPORTED_MODULE_3__["AribaComponentsModule"]
                    ],
                    entryComponents: [
                        MetaFormComponent,
                        MetaFormTableComponent,
                        MetaFormRowComponent,
                        NoMetaComponent,
                        MetaContentPageComponent,
                        MetaContentPageComponent,
                        MetaElementListComponent,
                        MetaActionListComponent,
                        MetaHomePageComponent,
                        MetaDashboardLayoutComponent,
                        MetaSectionsComponent,
                        MetaObjectDetailComponent
                    ],
                    exports: [
                        MetaIncludeComponentDirective,
                        MetaFormComponent,
                        MetaFormTableComponent,
                        MetaFormRowComponent,
                        NoMetaComponent,
                        MetaContentPageComponent,
                        MetaContentPageComponent,
                        MetaElementListComponent,
                        MetaActionListComponent,
                        MetaHomePageComponent,
                        MetaDashboardLayoutComponent,
                        MetaSectionsComponent,
                        _angular_forms__WEBPACK_IMPORTED_MODULE_5__["ReactiveFormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormsModule"],
                        _aribaui_core__WEBPACK_IMPORTED_MODULE_1__["AribaCoreModule"],
                        _aribaui_components__WEBPACK_IMPORTED_MODULE_3__["AribaComponentsModule"],
                        MetaObjectDetailComponent
                    ],
                    providers: []
                },] },
    ];
    return AWMetaLayoutModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var sysMetaComponents = /*#__PURE__*/Object.freeze({
    ACTIVE_CNTX: ACTIVE_CNTX,
    MetaContextComponent: MetaContextComponent,
    MetaUIActionEvent: MetaUIActionEvent,
    AWMetaLayoutModule: AWMetaLayoutModule,
    MetaContentPageComponent: MetaContentPageComponent,
    MetaFormComponent: MetaFormComponent,
    MetaFormRowComponent: MetaFormRowComponent,
    MetaFormTableComponent: MetaFormTableComponent,
    NoMetaComponent: NoMetaComponent,
    MetaIncludeComponentDirective: MetaIncludeComponentDirective,
    MetaBaseComponent: MetaBaseComponent,
    MetaElementListComponent: MetaElementListComponent,
    MetaActionListComponent: MetaActionListComponent,
    MetaHomePageComponent: MetaHomePageComponent,
    MetaDashboardLayoutComponent: MetaDashboardLayoutComponent,
    MetaSectionsComponent: MetaSectionsComponent,
    MetaObjectDetailComponent: MetaObjectDetailComponent
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ routes = [
    { path: 'context', component: MetaContentPageComponent }
];
var AribaMetaUIRoutingModule = /** @class */ (function () {
    function AribaMetaUIRoutingModule() {
    }
    AribaMetaUIRoutingModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["NgModule"], args: [{
                    imports: [
                        _angular_router__WEBPACK_IMPORTED_MODULE_7__["RouterModule"].forChild(routes)
                    ],
                    exports: [_angular_router__WEBPACK_IMPORTED_MODULE_7__["RouterModule"]],
                    providers: []
                },] },
    ];
    return AribaMetaUIRoutingModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * This module contains everything needs to dynamically generated UI based on metaRules
 * Since we are using primeNG, check AribaComponent if its already imported so you dont have
 * import it again.
 *
 */
var AribaMetaUIModule = /** @class */ (function () {
    function AribaMetaUIModule() {
    }
    AribaMetaUIModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["NgModule"], args: [{
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"],
                        AribaMetaUIRoutingModule,
                        AWMetaCoreModule,
                        AWMetaLayoutModule
                    ],
                    exports: [
                        AWMetaCoreModule,
                        AWMetaLayoutModule
                    ],
                    providers: [
                        {
                            'provide': _angular_core__WEBPACK_IMPORTED_MODULE_4__["APP_INITIALIZER"],
                            'useFactory': initMetaUI,
                            'deps': [_angular_core__WEBPACK_IMPORTED_MODULE_4__["Injector"]],
                            'multi': true,
                        },
                    ],
                },] },
    ];
    /** @nocollapse */
    AribaMetaUIModule.ctorParameters = function () { return []; };
    return AribaMetaUIModule;
}());
/**
 *
 * Entry factory method that initialize The METAUI layer and here we load WidgetsRules.oss as well
 * as Persistence Rules.
 *
 * @param {?} injector
 * @return {?}
 */
function initMetaUI(injector) {
    var /** @type {?} */ initFce = function init(inj) {
        var /** @type {?} */ promise = new Promise(function (resolve) {
            var /** @type {?} */ metaUI = UIMeta.getInstance();
            // access services lazily when they are needed and initialized as workaround for
            // https://github.com/angular/angular/issues/16853
            metaUI.injector = inj;
            metaUI.registerLoader(new RuleLoaderService());
            metaUI.loadDefaultRuleFiles(sysMetaComponents);
            resolve(true);
        });
        return promise;
    };
    return initFce.bind(initFce, injector);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */



//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./$$_lazy_route_resource lazy recursive":
/*!******************************************************!*\
  !*** ./$$_lazy_route_resource lazy namespace object ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function webpackEmptyAsyncContext(req) {
	// Here Promise.resolve().then() is used instead of new Promise() to prevent
	// uncaught exception popping up in devtools
	return Promise.resolve().then(function() {
		var e = new Error('Cannot find module "' + req + '".');
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	});
}
webpackEmptyAsyncContext.keys = function() { return []; };
webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
module.exports = webpackEmptyAsyncContext;
webpackEmptyAsyncContext.id = "./$$_lazy_route_resource lazy recursive";

/***/ }),

/***/ "./src/app/app-routing.module.ts":
/*!***************************************!*\
  !*** ./src/app/app-routing.module.ts ***!
  \***************************************/
/*! exports provided: ModuleRoutes, AppRoutingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModuleRoutes", function() { return ModuleRoutes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppRoutingModule", function() { return AppRoutingModule; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "../../node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _html_way_form_html_way_form_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./html-way-form/html-way-form.component */ "./src/app/html-way-form/html-way-form.component.ts");
/* harmony import */ var _metaui_way_form_metaui_way_form_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./metaui-way-form/metaui-way-form.component */ "./src/app/metaui-way-form/metaui-way-form.component.ts");
/* harmony import */ var _metaui_way_form2_metaui_way_form2_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./metaui-way-form2/metaui-way-form2.component */ "./src/app/metaui-way-form2/metaui-way-form2.component.ts");
/* harmony import */ var _component_way_form_component_way_form_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./component-way-form/component-way-form.component */ "./src/app/component-way-form/component-way-form.component.ts");
/* harmony import */ var _metaui_way_module_metaui_way_module_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./metaui-way-module/metaui-way-module.component */ "./src/app/metaui-way-module/metaui-way-module.component.ts");
/* harmony import */ var _metaui_way_module_product_content_product_content_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./metaui-way-module/product-content/product-content.component */ "./src/app/metaui-way-module/product-content/product-content.component.ts");
/* harmony import */ var _aribaui_metaui__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @aribaui/metaui */ "../../dist/@aribaui/metaui/fesm5/aribaui-metaui.js");
/* harmony import */ var _metaui_way_module_sources_sources_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./metaui-way-module/sources/sources.component */ "./src/app/metaui-way-module/sources/sources.component.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};










var ModuleRoutes = [
    {
        path: '', redirectTo: '/html', pathMatch: 'full'
    },
    { path: 'html', component: _html_way_form_html_way_form_component__WEBPACK_IMPORTED_MODULE_2__["HtmlWayFormComponent"] },
    { path: 'component', component: _component_way_form_component_way_form_component__WEBPACK_IMPORTED_MODULE_5__["ComponentWayFormComponent"] },
    { path: 'metaui', component: _metaui_way_form_metaui_way_form_component__WEBPACK_IMPORTED_MODULE_3__["MetauiWayFormComponent"] },
    { path: 'metaui2', component: _metaui_way_form2_metaui_way_form2_component__WEBPACK_IMPORTED_MODULE_4__["MetauiWayForm2Component"] },
    {
        path: 'module', component: _metaui_way_module_metaui_way_module_component__WEBPACK_IMPORTED_MODULE_6__["MetauiWayModuleComponent"],
        children: [
            { path: 'home', component: _aribaui_metaui__WEBPACK_IMPORTED_MODULE_8__["MetaHomePageComponent"] },
            { path: 'products', component: _metaui_way_module_product_content_product_content_component__WEBPACK_IMPORTED_MODULE_7__["ProductContentComponent"] },
            { path: 'sources', component: _metaui_way_module_sources_sources_component__WEBPACK_IMPORTED_MODULE_9__["SourcesComponent"] }
        ]
    }
];
var AppRoutingModule = /** @class */ (function () {
    function AppRoutingModule() {
    }
    AppRoutingModule = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"])({
            imports: [
                _angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterModule"].forRoot(ModuleRoutes)
            ],
            exports: [_angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterModule"]],
            providers: []
        })
    ], AppRoutingModule);
    return AppRoutingModule;
}());



/***/ }),

/***/ "./src/app/app.component.html":
/*!************************************!*\
  !*** ./src/app/app.component.html ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<aw-object-page-wrapper\n    [title]=\"'UI Evolution'\"\n    [currentState]=\"currState\"\n    [objectStates]=\"states\"\n    [objectStatusLabel]=\"'Current page'\"\n    [objectStatus]=\"statusName[currentIndex]\">\n\n    <aw-page-actions>\n\n    </aw-page-actions>\n\n    <ng-template #pageActions>\n        <aw-page-actions>\n            <aw-button [style]=\"'secondary'\" (action)=\"prev()\">Previous</aw-button>\n            <aw-button [style]=\"'primary'\" (action)=\"next()\">Next</aw-button>\n        </aw-page-actions>\n    </ng-template>\n\n    <aw-page-content>\n        <router-outlet></router-outlet>\n    </aw-page-content>\n\n</aw-object-page-wrapper>\n"

/***/ }),

/***/ "./src/app/app.component.scss":
/*!************************************!*\
  !*** ./src/app/app.component.scss ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".title {\n  font-size: 30px;\n  font-weight: bold; }\n\n.nav-buttons {\n  padding-top: 15px;\n  float: right; }\n\n.evoImg {\n  position: fixed;\n  right: 55px;\n  top: 0px;\n  width: auto;\n  height: 150px; }\n"

/***/ }),

/***/ "./src/app/app.component.ts":
/*!**********************************!*\
  !*** ./src/app/app.component.ts ***!
  \**********************************/
/*! exports provided: AppComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppComponent", function() { return AppComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _aribaui_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aribaui/components */ "../../dist/@aribaui/components/fesm5/aribaui-components.js");
/* harmony import */ var _dymamic_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dymamic-components */ "./src/app/dymamic-components.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "../../node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _aribaui_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aribaui/core */ "../../dist/@aribaui/core/fesm5/aribaui-core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var AppComponent = /** @class */ (function () {
    function AppComponent(componentRegistry, router, notifications) {
        this.router = router;
        this.notifications = notifications;
        this.states = ['html', 'component', 'metaui', 'metaui2', 'module'];
        this.statusName = ['basic html', 'with component', 'basic metaui', 'metaUI stack',
            'modules'];
        this.currState = 'html';
        this.evolutions = ['/html', '/component', '/metaui', '/metaui2', '/module'];
        this.currentIndex = 0;
        componentRegistry.registerTypes(_dymamic_components__WEBPACK_IMPORTED_MODULE_2__);
        this.currRoute = this.evolutions[0];
        this.notifications.subscribe('app:error', function (error) {
            console.log('App Error: ', error);
        });
    }
    AppComponent.prototype.ngOnInit = function () {
    };
    AppComponent.prototype.next = function () {
        this.currentIndex++;
        if (this.currentIndex > this.evolutions.length - 1) {
            this.currentIndex = 0;
        }
        this.currRoute = this.evolutions[this.currentIndex];
        this.currState = this.currRoute.substring(1);
        this.router.navigate([this.currRoute]);
    };
    AppComponent.prototype.prev = function () {
        this.currentIndex--;
        if (this.currentIndex < 0) {
            this.currentIndex = this.evolutions.length - 1;
        }
        this.currRoute = this.evolutions[this.currentIndex];
        this.currState = this.currRoute.substring(1);
        this.router.navigate([this.currRoute]);
    };
    AppComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-root',
            template: __webpack_require__(/*! ./app.component.html */ "./src/app/app.component.html"),
            styles: [__webpack_require__(/*! ./app.component.scss */ "./src/app/app.component.scss")]
        }),
        __metadata("design:paramtypes", [_aribaui_components__WEBPACK_IMPORTED_MODULE_1__["ComponentRegistry"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"],
            _aribaui_core__WEBPACK_IMPORTED_MODULE_4__["Notifications"]])
    ], AppComponent);
    return AppComponent;
}());



/***/ }),

/***/ "./src/app/app.module.ts":
/*!*******************************!*\
  !*** ./src/app/app.module.ts ***!
  \*******************************/
/*! exports provided: AppModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppModule", function() { return AppModule; });
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/platform-browser */ "../../node_modules/@angular/platform-browser/fesm5/platform-browser.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "../../node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _app_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app.component */ "./src/app/app.component.ts");
/* harmony import */ var _aribaui_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aribaui/core */ "../../dist/@aribaui/core/fesm5/aribaui-core.js");
/* harmony import */ var _aribaui_metaui__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @aribaui/metaui */ "../../dist/@aribaui/metaui/fesm5/aribaui-metaui.js");
/* harmony import */ var _aribaui_components__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @aribaui/components */ "../../dist/@aribaui/components/fesm5/aribaui-components.js");
/* harmony import */ var _html_way_form_html_way_form_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./html-way-form/html-way-form.component */ "./src/app/html-way-form/html-way-form.component.ts");
/* harmony import */ var _component_way_form_component_way_form_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./component-way-form/component-way-form.component */ "./src/app/component-way-form/component-way-form.component.ts");
/* harmony import */ var _metaui_way_form_metaui_way_form_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./metaui-way-form/metaui-way-form.component */ "./src/app/metaui-way-form/metaui-way-form.component.ts");
/* harmony import */ var _metaui_way_form2_metaui_way_form2_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./metaui-way-form2/metaui-way-form2.component */ "./src/app/metaui-way-form2/metaui-way-form2.component.ts");
/* harmony import */ var _app_routing_module__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./app-routing.module */ "./src/app/app-routing.module.ts");
/* harmony import */ var _metaui_way_module_metaui_way_module_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./metaui-way-module/metaui-way-module.component */ "./src/app/metaui-way-module/metaui-way-module.component.ts");
/* harmony import */ var _metaui_way_module_sales_graph_sales_graph_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./metaui-way-module/sales-graph/sales-graph.component */ "./src/app/metaui-way-module/sales-graph/sales-graph.component.ts");
/* harmony import */ var _metaui_way_module_product_content_product_content_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./metaui-way-module/product-content/product-content.component */ "./src/app/metaui-way-module/product-content/product-content.component.ts");
/* harmony import */ var _metaui_way_module_sources_sources_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./metaui-way-module/sources/sources.component */ "./src/app/metaui-way-module/sources/sources.component.ts");
/* harmony import */ var _user_rules__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./user-rules */ "./src/app/user-rules.ts");
/* harmony import */ var primeng_panel__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! primeng/panel */ "../../node_modules/primeng/panel.js");
/* harmony import */ var primeng_panel__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(primeng_panel__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var primeng_primeng__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! primeng/primeng */ "../../node_modules/primeng/primeng.js");
/* harmony import */ var primeng_primeng__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(primeng_primeng__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @angular/platform-browser/animations */ "../../node_modules/@angular/platform-browser/fesm5/animations.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




















var AppModule = /** @class */ (function () {
    function AppModule(appConfig) {
        // mandatory - you need to register user's defined rules and types since there is no
        // introspection in js
        this.appConfig = appConfig;
        var rules = appConfig.get('metaui.rules.user-rules') || [];
        rules.push(_user_rules__WEBPACK_IMPORTED_MODULE_16__);
        appConfig.set('metaui.rules.user-rules', rules);
    }
    AppModule = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
            declarations: [
                _app_component__WEBPACK_IMPORTED_MODULE_3__["AppComponent"],
                _html_way_form_html_way_form_component__WEBPACK_IMPORTED_MODULE_7__["HtmlWayFormComponent"],
                _component_way_form_component_way_form_component__WEBPACK_IMPORTED_MODULE_8__["ComponentWayFormComponent"],
                _metaui_way_form_metaui_way_form_component__WEBPACK_IMPORTED_MODULE_9__["MetauiWayFormComponent"],
                _metaui_way_form2_metaui_way_form2_component__WEBPACK_IMPORTED_MODULE_10__["MetauiWayForm2Component"],
                _metaui_way_module_metaui_way_module_component__WEBPACK_IMPORTED_MODULE_12__["MetauiWayModuleComponent"],
                _metaui_way_module_sales_graph_sales_graph_component__WEBPACK_IMPORTED_MODULE_13__["SalesGraphComponent"],
                _metaui_way_module_product_content_product_content_component__WEBPACK_IMPORTED_MODULE_14__["ProductContentComponent"],
                _metaui_way_module_sources_sources_component__WEBPACK_IMPORTED_MODULE_15__["SourcesComponent"]
            ],
            imports: [
                _app_routing_module__WEBPACK_IMPORTED_MODULE_11__["AppRoutingModule"],
                _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_19__["BrowserAnimationsModule"],
                _aribaui_core__WEBPACK_IMPORTED_MODULE_4__["AribaCoreModule"].forRoot({}),
                _aribaui_components__WEBPACK_IMPORTED_MODULE_6__["AribaComponentsModule"].forRoot(),
                primeng_primeng__WEBPACK_IMPORTED_MODULE_18__["CodeHighlighterModule"],
                _aribaui_components__WEBPACK_IMPORTED_MODULE_6__["AribaComponentsModule"],
                _aribaui_metaui__WEBPACK_IMPORTED_MODULE_5__["AribaMetaUIModule"],
                _angular_platform_browser__WEBPACK_IMPORTED_MODULE_0__["BrowserModule"],
                _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                _angular_forms__WEBPACK_IMPORTED_MODULE_2__["ReactiveFormsModule"],
                primeng_panel__WEBPACK_IMPORTED_MODULE_17__["PanelModule"]
            ],
            entryComponents: [
                _html_way_form_html_way_form_component__WEBPACK_IMPORTED_MODULE_7__["HtmlWayFormComponent"],
                _component_way_form_component_way_form_component__WEBPACK_IMPORTED_MODULE_8__["ComponentWayFormComponent"],
                _metaui_way_form_metaui_way_form_component__WEBPACK_IMPORTED_MODULE_9__["MetauiWayFormComponent"],
                _metaui_way_form2_metaui_way_form2_component__WEBPACK_IMPORTED_MODULE_10__["MetauiWayForm2Component"],
                _metaui_way_module_metaui_way_module_component__WEBPACK_IMPORTED_MODULE_12__["MetauiWayModuleComponent"],
                _metaui_way_module_sales_graph_sales_graph_component__WEBPACK_IMPORTED_MODULE_13__["SalesGraphComponent"],
                _metaui_way_module_product_content_product_content_component__WEBPACK_IMPORTED_MODULE_14__["ProductContentComponent"],
                _metaui_way_module_sources_sources_component__WEBPACK_IMPORTED_MODULE_15__["SourcesComponent"]
            ],
            providers: [],
            bootstrap: [_app_component__WEBPACK_IMPORTED_MODULE_3__["AppComponent"]]
        }),
        __metadata("design:paramtypes", [_aribaui_core__WEBPACK_IMPORTED_MODULE_4__["AppConfig"]])
    ], AppModule);
    return AppModule;
}());



/***/ }),

/***/ "./src/app/component-way-form/component-way-form.component.html":
/*!**********************************************************************!*\
  !*** ./src/app/component-way-form/component-way-form.component.html ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n<p-panel header=\"My First Component Form\" [toggleable]=\"false\">\n\n    <aw-form-table>\n        <aw-form-row [label]=\"'First Name'\">\n            <aw-input-field [type]=\"'string'\" [name]=\"'firstName'\"\n                            [(ngModel)]=\"userObject.firstName\"></aw-input-field>\n        </aw-form-row>\n\n        <aw-form-row [label]=\"'Last Name'\">\n            <aw-input-field [type]=\"'string'\" [name]=\"'lastName'\"\n                            [(ngModel)]=\"userObject.lastName\"></aw-input-field>\n        </aw-form-row>\n\n        <aw-form-row [label]=\"'Age'\">\n            <aw-input-field [type]=\"'number'\" [name]=\"'age'\"\n                            [(ngModel)]=\"userObject.age\"></aw-input-field>\n        </aw-form-row>\n\n        <aw-form-row [label]=\"'Department'\">\n            <aw-input-field [type]=\"'string'\" [name]=\"'departmetn'\"\n                            [(ngModel)]=\"userObject.department\"></aw-input-field>\n        </aw-form-row>\n\n        <aw-form-row [label]=\"'Email'\">\n            <aw-input-field [type]=\"'string'\" [name]=\"'email'\"\n                            [(ngModel)]=\"userObject.email\"></aw-input-field>\n        </aw-form-row>\n    </aw-form-table>\n\n\n</p-panel>\n\n\n<pre>\n    <code class=\"language-markup\" pCode>\n     &lt;w-form-table&gt;\n        &lt;w-form-row [label]=\"'First Name'\"&gt;\n            &lt;w-input-field [type]=\"'string'\" [name]=\"'firstName'\"\n                           [(ngModel)]=\"userObject.firstName\"&gt;&lt;/w-input-field&gt;\n        &lt;/w-form-row&gt;\n\n        &lt;w-form-row [label]=\"'Last Name'\"&gt;\n            &lt;w-input-field [type]=\"'string'\" [name]=\"'lastName'\"\n                           [(ngModel)]=\"userObject.lastName\"&gt;&lt;/w-input-field&gt;\n        &lt;/w-form-row&gt;\n\n        &lt;w-form-row [label]=\"'Age'\"&gt;\n            &lt;w-input-field [type]=\"'number'\" [name]=\"'age'\"\n                           [(ngModel)]=\"userObject.age\"&gt;&lt;/w-input-field&gt;\n        &lt;/w-form-row&gt;\n\n        &lt;w-form-row [label]=\"'Department'\"&gt;\n            &lt;w-input-field [type]=\"'string'\" [name]=\"'departmetn'\"\n                           [(ngModel)]=\"userObject.department\"&gt;&lt;/w-input-field&gt;\n        &lt;/w-form-row&gt;\n\n        &lt;w-form-row [label]=\"'Email'\"&gt;\n            &lt;w-input-field [type]=\"'string'\" [name]=\"'email'\"\n                           [(ngModel)]=\"userObject.email\"&gt;&lt;/w-input-field&gt;\n        &lt;/w-form-row&gt;\n    &lt;/w-form-table&gt;\n\n    </code>\n</pre>\n"

/***/ }),

/***/ "./src/app/component-way-form/component-way-form.component.scss":
/*!**********************************************************************!*\
  !*** ./src/app/component-way-form/component-way-form.component.scss ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/component-way-form/component-way-form.component.ts":
/*!********************************************************************!*\
  !*** ./src/app/component-way-form/component-way-form.component.ts ***!
  \********************************************************************/
/*! exports provided: ComponentWayFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentWayFormComponent", function() { return ComponentWayFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _model_user__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/user */ "./src/app/model/user.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var ComponentWayFormComponent = /** @class */ (function () {
    function ComponentWayFormComponent() {
    }
    ComponentWayFormComponent.prototype.ngOnInit = function () {
        this.userObject = new _model_user__WEBPACK_IMPORTED_MODULE_1__["User"]('Peter', 'Pan', 8, 'BEST', 'peter@neverland.com');
    };
    ComponentWayFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-component-way-form',
            template: __webpack_require__(/*! ./component-way-form.component.html */ "./src/app/component-way-form/component-way-form.component.html"),
            styles: [__webpack_require__(/*! ./component-way-form.component.scss */ "./src/app/component-way-form/component-way-form.component.scss")]
        }),
        __metadata("design:paramtypes", [])
    ], ComponentWayFormComponent);
    return ComponentWayFormComponent;
}());



/***/ }),

/***/ "./src/app/dymamic-components.ts":
/*!***************************************!*\
  !*** ./src/app/dymamic-components.ts ***!
  \***************************************/
/*! exports provided: ComponentWayFormComponent, MetauiWayFormComponent, HtmlWayFormComponent, MetauiWayForm2Component, MetauiWayModuleComponent, SalesGraphComponent, ProductContentComponent, SourcesComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _component_way_form_component_way_form_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component-way-form/component-way-form.component */ "./src/app/component-way-form/component-way-form.component.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ComponentWayFormComponent", function() { return _component_way_form_component_way_form_component__WEBPACK_IMPORTED_MODULE_0__["ComponentWayFormComponent"]; });

/* harmony import */ var _metaui_way_form_metaui_way_form_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./metaui-way-form/metaui-way-form.component */ "./src/app/metaui-way-form/metaui-way-form.component.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MetauiWayFormComponent", function() { return _metaui_way_form_metaui_way_form_component__WEBPACK_IMPORTED_MODULE_1__["MetauiWayFormComponent"]; });

/* harmony import */ var _html_way_form_html_way_form_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./html-way-form/html-way-form.component */ "./src/app/html-way-form/html-way-form.component.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HtmlWayFormComponent", function() { return _html_way_form_html_way_form_component__WEBPACK_IMPORTED_MODULE_2__["HtmlWayFormComponent"]; });

/* harmony import */ var _metaui_way_form2_metaui_way_form2_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./metaui-way-form2/metaui-way-form2.component */ "./src/app/metaui-way-form2/metaui-way-form2.component.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MetauiWayForm2Component", function() { return _metaui_way_form2_metaui_way_form2_component__WEBPACK_IMPORTED_MODULE_3__["MetauiWayForm2Component"]; });

/* harmony import */ var _metaui_way_module_metaui_way_module_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./metaui-way-module/metaui-way-module.component */ "./src/app/metaui-way-module/metaui-way-module.component.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MetauiWayModuleComponent", function() { return _metaui_way_module_metaui_way_module_component__WEBPACK_IMPORTED_MODULE_4__["MetauiWayModuleComponent"]; });

/* harmony import */ var _metaui_way_module_sales_graph_sales_graph_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./metaui-way-module/sales-graph/sales-graph.component */ "./src/app/metaui-way-module/sales-graph/sales-graph.component.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SalesGraphComponent", function() { return _metaui_way_module_sales_graph_sales_graph_component__WEBPACK_IMPORTED_MODULE_5__["SalesGraphComponent"]; });

/* harmony import */ var _metaui_way_module_product_content_product_content_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./metaui-way-module/product-content/product-content.component */ "./src/app/metaui-way-module/product-content/product-content.component.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ProductContentComponent", function() { return _metaui_way_module_product_content_product_content_component__WEBPACK_IMPORTED_MODULE_6__["ProductContentComponent"]; });

/* harmony import */ var _metaui_way_module_sources_sources_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./metaui-way-module/sources/sources.component */ "./src/app/metaui-way-module/sources/sources.component.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SourcesComponent", function() { return _metaui_way_module_sources_sources_component__WEBPACK_IMPORTED_MODULE_7__["SourcesComponent"]; });











/***/ }),

/***/ "./src/app/html-way-form/html-way-form.component.html":
/*!************************************************************!*\
  !*** ./src/app/html-way-form/html-way-form.component.html ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"ui-panel ui-widget ui-widget-content ui-corner-all\">\n    <div class=\"ui-panel-titlebar ui-widget-header ui-helper-clearfix ui-corner-all\">\n        <span class=\"ui-panel-title\">My First Pure HTML Page</span>\n    </div>\n    <div class=\"ui-panel-content-wrapper\">\n        <div class=\"ui-panel-content ui-widget-content\">\n\n            <form class=\"w-form-table ui-g ui-fluid\" novalidate>\n\n                <div class=\"ui-g-12 ui-g-nopad\">\n                    <div class=\"ui-g\">\n                        <div class=\"ui-g-12\">\n                            <div class=\"w-form-row ui-g\">\n\n                                <div class=\"control-label ui-g-12 ui-md-3\">\n                                    <label>First Name:</label>\n                                </div>\n                                <div class=\"ui-g-12 ui-md-6\">\n\n                                    <input pInputText\n                                           name=\"firstName\"\n                                           [(ngModel)]=\"userObject.firstName\"\n                                           type=\"text\"\n                                           class=\"w-text-field\"\n                                           placeholder=\"First Name\">\n\n                                    <div class=\"ui-g\">\n                                        <small *ngIf=\"hasErrors()\"\n                                               class=\"ui-g-12 ui-message ui-messages-error ui-corner-all\">\n                                            {{ errorMsg }}\n                                        </small>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"w-form-row ui-g\">\n\n                                <div class=\"control-label ui-g-12 ui-md-3\">\n                                    <label>Last Name:</label>\n                                </div>\n                                <div class=\"ui-g-12 ui-md-6\">\n\n                                    <input pInputText\n                                           name=\"lastName\"\n                                           [(ngModel)]=\"userObject.lastName\"\n                                           type=\"text\"\n                                           class=\"w-text-field\"\n                                           placeholder=\"Last Name\">\n\n                                    <div class=\"ui-g\">\n                                        <small *ngIf=\"hasErrors()\"\n                                               class=\"ui-g-12 ui-message ui-messages-error ui-corner-all\">\n                                            {{ errorMsg }}\n                                        </small>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"w-form-row ui-g\">\n\n                                <div class=\"control-label ui-g-12 ui-md-3\">\n                                    <label>Age: </label>\n                                </div>\n                                <div class=\"ui-g-12 ui-md-6\">\n\n                                    <input pInputText\n                                           name=\"age\"\n                                           [(ngModel)]=\"userObject.age\"\n                                           class=\"w-text-field\"\n                                           placeholder=\"Last Name\">\n\n                                    <div class=\"ui-g\">\n                                        <small *ngIf=\"hasErrors()\"\n                                               class=\"ui-g-12 ui-message ui-messages-error ui-corner-all\">\n                                            {{ errorMsg }}\n                                        </small>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"w-form-row ui-g\">\n\n                                <div class=\"control-label ui-g-12 ui-md-3\">\n                                    <label>Department: </label>\n                                </div>\n                                <div class=\"ui-g-12 ui-md-6\">\n\n                                    <input pInputText\n                                           name=\"department\"\n                                           [(ngModel)]=\"userObject.department\"\n                                           type=\"text\"\n                                           class=\"w-text-field\"\n                                           placeholder=\"Last Name\">\n\n                                    <div class=\"ui-g\">\n                                        <small *ngIf=\"hasErrors()\"\n                                               class=\"ui-g-12 ui-message ui-messages-error ui-corner-all\">\n                                            {{ errorMsg }}\n                                        </small>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"w-form-row ui-g\">\n\n                                <div class=\"control-label ui-g-12 ui-md-3\">\n                                    <label>Email: </label>\n                                </div>\n                                <div class=\"ui-g-12 ui-md-6\">\n\n                                    <input pInputText\n                                           name=\"email\"\n                                           [(ngModel)]=\"userObject.email\"\n                                           type=\"text\"\n                                           class=\"w-text-field\"\n                                           placeholder=\"Last Name\">\n\n                                    <div class=\"ui-g\">\n                                        <small *ngIf=\"hasErrors()\"\n                                               class=\"ui-g-12 ui-message ui-messages-error ui-corner-all\">\n                                            {{ errorMsg }}\n                                        </small>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>\n\n\n<pre>\n    <code class=\"language-markup\" pCode>\n        &lt;div class=\"ui-panel ui-widget ui-widget-content ui-corner-all\"&gt;\n                &lt;div class=\"ui-panel-titlebar ui-widget-header ui-helper-clearfix ui-corner-all\"&gt;\n                    &lt;span class=\"ui-panel-title\"&gt;My First Pure HTML Page&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;div class=\"ui-panel-content-wrapper\"&gt;\n                    &lt;div class=\"ui-panel-content ui-widget-content\"&gt;\n\n                        &lt;form class=\"w-form-table ui-g ui-fluid\" novalidate&gt;\n\n                            &lt;div class=\"ui-g-12 ui-g-nopad\"&gt;\n                                &lt;div class=\"ui-g\"&gt;\n                                    &lt;div class=\"ui-g-12\"&gt;\n                                        &lt;div class=\"w-form-row ui-g\"&gt;\n\n                                            &lt;div class=\"control-label ui-g-12 ui-md-3\"&gt;\n                                                &lt;label&gt;First Name:&lt;/label&gt;\n                                            &lt;/div&gt;\n                                            &lt;div class=\"ui-g-12 ui-md-6\"&gt;\n\n                                                &lt;input pInputText\n                                                       name=\"firstName\"\n                                                       [(ngModel)]=\"userObject.firstName\"\n                                                       type=\"text\"\n                                                       class=\"w-text-field\"\n                                                       placeholder=\"First Name\"&gt;\n\n                                                &lt;div class=\"ui-g\"&gt;\n                                                    &lt;small *ngIf=\"hasErrors()\"\n                                                           class=\"ui-g-12 ui-message ui-messages-error ui-corner-all\"&gt;\n\n                                                    &lt;/small&gt;\n                                                &lt;/div&gt;\n                                            &lt;/div&gt;\n                                        &lt;/div&gt;\n\n                                        &lt;div class=\"w-form-row ui-g\"&gt;\n\n                                            &lt;div class=\"control-label ui-g-12 ui-md-3\"&gt;\n                                                &lt;label&gt;Last Name:&lt;/label&gt;\n                                            &lt;/div&gt;\n                                            &lt;div class=\"ui-g-12 ui-md-6\"&gt;\n\n                                                &lt;input pInputText\n                                                       name=\"lastName\"\n                                                       [(ngModel)]=\"userObject.lastName\"\n                                                       type=\"text\"\n                                                       class=\"w-text-field\"\n                                                       placeholder=\"Last Name\"&gt;\n\n                                                &lt;div class=\"ui-g\"&gt;\n                                                    &lt;small *ngIf=\"hasErrors()\"\n                                                           class=\"ui-g-12 ui-message ui-messages-error ui-corner-all\"&gt;\n        <!--{{ errorMsg }}-->\n                                                    &lt;/small&gt;\n                                                &lt;/div&gt;\n                                            &lt;/div&gt;\n                                        &lt;/div&gt;\n\n                                        &lt;div class=\"w-form-row ui-g\"&gt;\n\n                                            &lt;div class=\"control-label ui-g-12 ui-md-3\"&gt;\n                                                &lt;label&gt;Age: &lt;/label&gt;\n                                            &lt;/div&gt;\n                                            &lt;div class=\"ui-g-12 ui-md-6\"&gt;\n\n                                                &lt;input pInputText\n                                                       name=\"age\"\n                                                       [(ngModel)]=\"userObject.age\"\n                                                       class=\"w-text-field\"\n                                                       placeholder=\"Last Name\"&gt;\n\n                                                &lt;div class=\"ui-g\"&gt;\n                                                    &lt;small *ngIf=\"hasErrors()\"\n                                                           class=\"ui-g-12 ui-message ui-messages-error ui-corner-all\"&gt;\n                                                    &lt;/small&gt;\n                                                &lt;/div&gt;\n                                            &lt;/div&gt;\n                                        &lt;/div&gt;\n\n                                        &lt;div class=\"w-form-row ui-g\"&gt;\n\n                                            &lt;div class=\"control-label ui-g-12 ui-md-3\"&gt;\n                                                &lt;label&gt;Department: &lt;/label&gt;\n                                            &lt;/div&gt;\n                                            &lt;div class=\"ui-g-12 ui-md-6\"&gt;\n\n                                                &lt;input pInputText\n                                                       name=\"department\"\n                                                       [(ngModel)]=\"userObject.department\"\n                                                       type=\"text\"\n                                                       class=\"w-text-field\"\n                                                       placeholder=\"Last Name\"&gt;\n\n                                                &lt;div class=\"ui-g\"&gt;\n                                                    &lt;small *ngIf=\"hasErrors()\"\n                                                           class=\"ui-g-12 ui-message ui-messages-error ui-corner-all\"&gt;\n                                                    &lt;/small&gt;\n                                                &lt;/div&gt;\n                                            &lt;/div&gt;\n                                        &lt;/div&gt;\n\n                                        &lt;div class=\"w-form-row ui-g\"&gt;\n\n                                            &lt;div class=\"control-label ui-g-12 ui-md-3\"&gt;\n                                                &lt;label&gt;Email: &lt;/label&gt;\n                                            &lt;/div&gt;\n                                            &lt;div class=\"ui-g-12 ui-md-6\"&gt;\n\n                                                &lt;input pInputText\n                                                       name=\"email\"\n                                                       [(ngModel)]=\"userObject.email\"\n                                                       type=\"text\"\n                                                       class=\"w-text-field\"\n                                                       placeholder=\"Last Name\"&gt;\n\n                                                &lt;div class=\"ui-g\"&gt;\n                                                    &lt;small *ngIf=\"hasErrors()\"\n                                                           class=\"ui-g-12 ui-message ui-messages-error ui-corner-all\"&gt;\n                                                    &lt;/small&gt;\n                                                &lt;/div&gt;\n                                            &lt;/div&gt;\n                                        &lt;/div&gt;\n                                    &lt;/div&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                        &lt;/form&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n    </code>\n</pre>\n\n\n\n\n\n"

/***/ }),

/***/ "./src/app/html-way-form/html-way-form.component.scss":
/*!************************************************************!*\
  !*** ./src/app/html-way-form/html-way-form.component.scss ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/html-way-form/html-way-form.component.ts":
/*!**********************************************************!*\
  !*** ./src/app/html-way-form/html-way-form.component.ts ***!
  \**********************************************************/
/*! exports provided: HtmlWayFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HtmlWayFormComponent", function() { return HtmlWayFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _model_user__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/user */ "./src/app/model/user.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var HtmlWayFormComponent = /** @class */ (function () {
    function HtmlWayFormComponent() {
        this.errorMsg = '';
    }
    HtmlWayFormComponent.prototype.ngOnInit = function () {
        this.userObject = new _model_user__WEBPACK_IMPORTED_MODULE_1__["User"]('Peter', 'Pan', 8, 'BEST', 'peter@neverland.com');
    };
    HtmlWayFormComponent.prototype.hasErrors = function () {
        return false;
    };
    HtmlWayFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-html-way-form',
            template: __webpack_require__(/*! ./html-way-form.component.html */ "./src/app/html-way-form/html-way-form.component.html"),
            styles: [__webpack_require__(/*! ./html-way-form.component.scss */ "./src/app/html-way-form/html-way-form.component.scss")]
        }),
        __metadata("design:paramtypes", [])
    ], HtmlWayFormComponent);
    return HtmlWayFormComponent;
}());



/***/ }),

/***/ "./src/app/metaui-way-form/metaui-way-form.component.html":
/*!****************************************************************!*\
  !*** ./src/app/metaui-way-form/metaui-way-form.component.html ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-panel header=\"My First MetaUI\" [toggleable]=\"false\">\n\n\n    <m-context [object]=\"userObject\" operation=\"edit\" layout=\"Inspect\">\n        <m-include-component></m-include-component>\n    </m-context>\n\n</p-panel>\n\n\n<div class=\"ui-g\">\n    <div class=\"ui-g-12 ui-md-6\">\n<pre>\n<code class=\"language-markup\" pCode>\n&lt;m-context [object]=\"userObject\" operation=\"edit\"\n    layout=\"Inspect\"&gt;\n    &lt;m-include-component&gt;&lt;/m-include-component&gt;\n&lt;/m-context&gt;\n</code>\n</pre>\n    </div>\n    <div class=\"ui-g-12 ui-md-6\">\n<pre>\n<code class=\"language-typescript\" pCode>\n\nclass=User &#123;\n    zLeft => firstName => lastName => age => department;\n&#125;\n\n\n</code>\n</pre>\n\n    </div>\n</div>\n\n\n\n\n"

/***/ }),

/***/ "./src/app/metaui-way-form/metaui-way-form.component.scss":
/*!****************************************************************!*\
  !*** ./src/app/metaui-way-form/metaui-way-form.component.scss ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/metaui-way-form/metaui-way-form.component.ts":
/*!**************************************************************!*\
  !*** ./src/app/metaui-way-form/metaui-way-form.component.ts ***!
  \**************************************************************/
/*! exports provided: MetauiWayFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetauiWayFormComponent", function() { return MetauiWayFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _model_user__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/user */ "./src/app/model/user.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var MetauiWayFormComponent = /** @class */ (function () {
    function MetauiWayFormComponent() {
    }
    MetauiWayFormComponent.prototype.ngOnInit = function () {
        this.userObject = new _model_user__WEBPACK_IMPORTED_MODULE_1__["User"]('Peter', 'Pan', 8, 'BEST', 'peter@neverland.com');
    };
    MetauiWayFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-metaui-way-form',
            template: __webpack_require__(/*! ./metaui-way-form.component.html */ "./src/app/metaui-way-form/metaui-way-form.component.html"),
            styles: [__webpack_require__(/*! ./metaui-way-form.component.scss */ "./src/app/metaui-way-form/metaui-way-form.component.scss")]
        }),
        __metadata("design:paramtypes", [])
    ], MetauiWayFormComponent);
    return MetauiWayFormComponent;
}());



/***/ }),

/***/ "./src/app/metaui-way-form2/metaui-way-form2.component.html":
/*!******************************************************************!*\
  !*** ./src/app/metaui-way-form2/metaui-way-form2.component.html ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-panel header=\"MetaUI with custom layout and actions. 2 stacked layouts and two actions. \" [toggleable]=\"false\">\n\n    <m-context [object]=\"user\" operation=\"edit\" layout=\"Inspect2\">\n        <m-include-component></m-include-component>\n    </m-context>\n\n</p-panel>\n\n\n<div class=\"ui-g\">\n    <div class=\"ui-g-12 ui-md-6\">\n<pre>\n<code class=\"language-markup\" pCode>\n&lt;m-context [object]=\"userObject\" operation=\"edit\"\n    layout=\"Inspect2\"&gt;\n    &lt;m-include-component&gt;&lt;/m-include-component&gt;\n&lt;/m-context&gt;\n</code>\n</pre>\n    </div>\n    <div class=\"ui-g-12 ui-md-6\">\n<pre>\n<code class=\"language-typescript\" pCode>\nlayout=Inspect2&#35;Stack &#123;\n    &#64;layout=MenuTop&#35;ActionButtons &#123;  &#125;\n\n   &#64;layout=First&#35;Form &#123;  &#125;\n\n&#125;\n\nobject &#64;action=update  &#123;\n     actionResults:$&#123; object.firstName = \"Mr.\" +  object.firstName &#125;;\n     visible: $&#123; properties.editing &#125;;\n&#125;\n\n\nobject &#64;action=Save  &#123;\n     label: \"My Save\";\n     actionResults:$&#123; object.firstName = \"Ms.\" +  object.firstName &#125;;\n     visible: $&#123; properties.editing &#125;;\n     buttonStyle:info;\n&#125;\n\n</code>\n</pre>\n\n    </div>\n</div>\n\n\n\n\n\n\n"

/***/ }),

/***/ "./src/app/metaui-way-form2/metaui-way-form2.component.scss":
/*!******************************************************************!*\
  !*** ./src/app/metaui-way-form2/metaui-way-form2.component.scss ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/metaui-way-form2/metaui-way-form2.component.ts":
/*!****************************************************************!*\
  !*** ./src/app/metaui-way-form2/metaui-way-form2.component.ts ***!
  \****************************************************************/
/*! exports provided: MetauiWayForm2Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetauiWayForm2Component", function() { return MetauiWayForm2Component; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _model_user__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/user */ "./src/app/model/user.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var MetauiWayForm2Component = /** @class */ (function () {
    function MetauiWayForm2Component() {
    }
    MetauiWayForm2Component.prototype.ngOnInit = function () {
        this.user = new _model_user__WEBPACK_IMPORTED_MODULE_1__["User"]('Peter', 'Pan', 8, 'BEST', 'peter@neverland.com');
    };
    MetauiWayForm2Component = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-metaui-way-form2',
            template: __webpack_require__(/*! ./metaui-way-form2.component.html */ "./src/app/metaui-way-form2/metaui-way-form2.component.html"),
            styles: [__webpack_require__(/*! ./metaui-way-form2.component.scss */ "./src/app/metaui-way-form2/metaui-way-form2.component.scss")]
        }),
        __metadata("design:paramtypes", [])
    ], MetauiWayForm2Component);
    return MetauiWayForm2Component;
}());



/***/ }),

/***/ "./src/app/metaui-way-module/metaui-way-module.component.html":
/*!********************************************************************!*\
  !*** ./src/app/metaui-way-module/metaui-way-module.component.html ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"meta-demo-page\">\n    <p-tabMenu [model]=\"items\"></p-tabMenu>\n\n\n    <div class=\"module-content\">\n        <router-outlet></router-outlet>\n    </div>\n\n</div>\n"

/***/ }),

/***/ "./src/app/metaui-way-module/metaui-way-module.component.scss":
/*!********************************************************************!*\
  !*** ./src/app/metaui-way-module/metaui-way-module.component.scss ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "::ng-deep .ui-tabmenu {\n  background-color: transparent;\n  border-top-width: 0;\n  border-left-width: 0;\n  border-right-width: 0; }\n\n::ng-deep .ui-tabmenu-nav {\n  border-width: 0;\n  background-color: transparent; }\n"

/***/ }),

/***/ "./src/app/metaui-way-module/metaui-way-module.component.ts":
/*!******************************************************************!*\
  !*** ./src/app/metaui-way-module/metaui-way-module.component.ts ***!
  \******************************************************************/
/*! exports provided: MetauiWayModuleComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetauiWayModuleComponent", function() { return MetauiWayModuleComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _aribaui_metaui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aribaui/metaui */ "../../dist/@aribaui/metaui/fesm5/aribaui-metaui.js");
/* harmony import */ var _aribaui_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aribaui/core */ "../../dist/@aribaui/core/fesm5/aribaui-core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "../../node_modules/@angular/router/fesm5/router.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var MetauiWayModuleComponent = /** @class */ (function () {
    function MetauiWayModuleComponent(rs, activatedRoute) {
        this.rs = rs;
        this.activatedRoute = activatedRoute;
        this.tabName = 'Home';
    }
    MetauiWayModuleComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.items = [];
        var uiMeta = _aribaui_metaui__WEBPACK_IMPORTED_MODULE_1__["UIMeta"].getInstance();
        this._moduleInfo = uiMeta.computeModuleInfo();
        if (Object(_aribaui_core__WEBPACK_IMPORTED_MODULE_2__["isPresent"])(this._moduleInfo) && this._moduleInfo.modules.length > 0) {
            this._moduleInfo.modules.forEach(function (module) {
                var item = {
                    label: uiMeta.currentModuleLabel(module.name),
                    moduleName: module.name,
                    routePath: "/" + module.name.toLowerCase(),
                    command: function (event) {
                        _this.tabChanged(event);
                    }
                };
                _this.items.push(item);
            });
            this._selectedModule = this._moduleInfo.modules[0];
            uiMeta.gotoModule(this._selectedModule, "/" + this.activatedRoute.snapshot.url
                .map(function (segment) { return segment.path; }).join('/'));
        }
    };
    MetauiWayModuleComponent.prototype.tabChanged = function (event) {
        this.tabName = event.item.label;
        this._selectedModule = this._moduleInfo.moduleByNames.get(event.item.moduleName);
        var uiMeta = _aribaui_metaui__WEBPACK_IMPORTED_MODULE_1__["UIMeta"].getInstance();
        uiMeta.gotoModule(this._selectedModule, "/" + this.activatedRoute.snapshot.url.map(function (segment) { return segment.path; }).join('/'));
    };
    MetauiWayModuleComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'metaui-way-module',
            template: __webpack_require__(/*! ./metaui-way-module.component.html */ "./src/app/metaui-way-module/metaui-way-module.component.html"),
            styles: [__webpack_require__(/*! ./metaui-way-module.component.scss */ "./src/app/metaui-way-module/metaui-way-module.component.scss")]
        }),
        __metadata("design:paramtypes", [_aribaui_core__WEBPACK_IMPORTED_MODULE_2__["RoutingService"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"]])
    ], MetauiWayModuleComponent);
    return MetauiWayModuleComponent;
}());



/***/ }),

/***/ "./src/app/metaui-way-module/product-content/product-content.component.ts":
/*!********************************************************************************!*\
  !*** ./src/app/metaui-way-module/product-content/product-content.component.ts ***!
  \********************************************************************************/
/*! exports provided: ProductContentComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProductContentComponent", function() { return ProductContentComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var ProductContentComponent = /** @class */ (function () {
    function ProductContentComponent() {
    }
    ProductContentComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'product-content',
            template: "<h3>This is my Custom Product Page</h3>\n\n    <p>\n        This page has only simple H3 and paragraphs that has only some coppied text from\n        news server.\n    </p>\n\n\n    <p>\n        Whereas this seems to be promising, this approach suffers from drawbacks and isn\u2019t the\n        recommended one by the Angular team. The main drawback is that it prevents us from\n        using offline compile to precompile component templates. Using a custom decorator\n        for components also prevents external tools from detecting that they are actually\n        components.\n        In this article, we will describe another approach based on the component composition\n        based on components and attribute directives. We will deal with the way to implement\n        it, its advantages and limitations.\n    </p>\n\n    "
        })
    ], ProductContentComponent);
    return ProductContentComponent;
}());



/***/ }),

/***/ "./src/app/metaui-way-module/sales-graph/sales-graph.component.scss":
/*!**************************************************************************!*\
  !*** ./src/app/metaui-way-module/sales-graph/sales-graph.component.scss ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".module-content {\n  padding: 10px; }\n"

/***/ }),

/***/ "./src/app/metaui-way-module/sales-graph/sales-graph.component.ts":
/*!************************************************************************!*\
  !*** ./src/app/metaui-way-module/sales-graph/sales-graph.component.ts ***!
  \************************************************************************/
/*! exports provided: SalesGraphComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SalesGraphComponent", function() { return SalesGraphComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _aribaui_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aribaui/components */ "../../dist/@aribaui/components/fesm5/aribaui-components.js");
/* harmony import */ var _aribaui_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aribaui/core */ "../../dist/@aribaui/core/fesm5/aribaui-core.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var SalesGraphComponent = /** @class */ (function (_super) {
    __extends(SalesGraphComponent, _super);
    function SalesGraphComponent(env) {
        var _this = _super.call(this, env) || this;
        _this.env = env;
        return _this;
    }
    SalesGraphComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            template: "<img src=\"assets/images/sales.png\" width=\"100%\"/> ",
            styles: [__webpack_require__(/*! ./sales-graph.component.scss */ "./src/app/metaui-way-module/sales-graph/sales-graph.component.scss")]
        }),
        __metadata("design:paramtypes", [_aribaui_core__WEBPACK_IMPORTED_MODULE_2__["Environment"]])
    ], SalesGraphComponent);
    return SalesGraphComponent;
}(_aribaui_components__WEBPACK_IMPORTED_MODULE_1__["BaseComponent"]));



/***/ }),

/***/ "./src/app/metaui-way-module/sources/sources.component.html":
/*!******************************************************************!*\
  !*** ./src/app/metaui-way-module/sources/sources.component.html ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<pre>\n<code class=\"language-typescript\" pCode>\n@module=Home &#123;\n    label:\"My Home\";\n    pageTitle:\"You are now on Homepage\";\n\n    @layout=Today &#123;\n       after:zTop;\n       label: \"Sales Graph\";\n       component:SalesGraphComponent;\n    &#125;\n\n    @layout=Sport &#123;\n       after:Today;\n       label: \"Sport today!\";\n       component:StringComponent;\n       bindings:&#123;value:\" ...... \" &#125;\n    &#125;\n\n\n     @layout=Tech &#123;\n           after:Sport;\n           label: \"Tech News\";\n           component:StringComponent;\n           bindings:&#123;value:\" ...... \" &#125;\n     &#125;\n\n     @layout=MessageBoard &#123;\n        after:zBottom;\n        label: \"Message Board\";\n        component:StringComponent;\n        portletWidth:large\n        bindings:&#123;value:\" ...... \" &#125;\n     &#125;\n\n&#125;\n\n\n\n@module=Products &#123;\n    pageTitle:\"You are now on Products\";\n    homePage:ProductContentComponent;\n&#125;\n\n\n@module=Sources &#123;\n    label:\"Sources for Module\";\n    homePage:SourcesComponent;\n\n&#125;\n</code>\n</pre>\n"

/***/ }),

/***/ "./src/app/metaui-way-module/sources/sources.component.scss":
/*!******************************************************************!*\
  !*** ./src/app/metaui-way-module/sources/sources.component.scss ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/metaui-way-module/sources/sources.component.ts":
/*!****************************************************************!*\
  !*** ./src/app/metaui-way-module/sources/sources.component.ts ***!
  \****************************************************************/
/*! exports provided: SourcesComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SourcesComponent", function() { return SourcesComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _aribaui_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aribaui/components */ "../../dist/@aribaui/components/fesm5/aribaui-components.js");
/* harmony import */ var _aribaui_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aribaui/core */ "../../dist/@aribaui/core/fesm5/aribaui-core.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var SourcesComponent = /** @class */ (function (_super) {
    __extends(SourcesComponent, _super);
    function SourcesComponent(env) {
        var _this = _super.call(this, env) || this;
        _this.env = env;
        return _this;
    }
    SourcesComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            template: __webpack_require__(/*! ./sources.component.html */ "./src/app/metaui-way-module/sources/sources.component.html"),
            styles: [__webpack_require__(/*! ./sources.component.scss */ "./src/app/metaui-way-module/sources/sources.component.scss")]
        }),
        __metadata("design:paramtypes", [_aribaui_core__WEBPACK_IMPORTED_MODULE_2__["Environment"]])
    ], SourcesComponent);
    return SourcesComponent;
}(_aribaui_components__WEBPACK_IMPORTED_MODULE_1__["BaseComponent"]));



/***/ }),

/***/ "./src/app/model/user.ts":
/*!*******************************!*\
  !*** ./src/app/model/user.ts ***!
  \*******************************/
/*! exports provided: User */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "User", function() { return User; });
var User = /** @class */ (function () {
    function User(firstName, lastName, age, department, email) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
        this.department = department;
        this.email = email;
    }
    User.prototype.identity = function () {
        return this.email;
    };
    /**
     *  $proto - to help out with object introspection
     *
     */
    User.prototype.$proto = function () {
        return new User('a', 'b', 1, 'c', 'd');
    };
    User.prototype.className = function () {
        return 'User';
    };
    User.prototype.getTypes = function () {
        return {};
    };
    return User;
}());



/***/ }),

/***/ "./src/app/rules/index.ts":
/*!********************************!*\
  !*** ./src/app/rules/index.ts ***!
  \********************************/
/*! exports provided: ApplicationRule, UserRule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ts_ApplicationOSS__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ts/ApplicationOSS */ "./src/app/rules/ts/ApplicationOSS.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ApplicationRule", function() { return _ts_ApplicationOSS__WEBPACK_IMPORTED_MODULE_0__["ApplicationRule"]; });

/* harmony import */ var _ts_UserOSS__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ts/UserOSS */ "./src/app/rules/ts/UserOSS.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UserRule", function() { return _ts_UserOSS__WEBPACK_IMPORTED_MODULE_1__["UserRule"]; });





/***/ }),

/***/ "./src/app/rules/ts/ApplicationOSS.ts":
/*!********************************************!*\
  !*** ./src/app/rules/ts/ApplicationOSS.ts ***!
  \********************************************/
/*! exports provided: ApplicationRule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationRule", function() { return ApplicationRule; });
/**
 *  This is generated file. Do not edit !!
 *
 *  @formatter:off
 *
 */
/* tslint:disable */
var ApplicationRule = {
    oss: [
        {
            '_selectors': [
                {
                    '_key': 'module',
                    '_value': 'Home',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'pageTitle': 'You are now on Homepage',
                'label': 'My Home'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'module',
                    '_value': 'Home',
                    '_isDecl': true
                },
                {
                    '_key': 'layout',
                    '_value': 'Today',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'component': 'SalesGraphComponent',
                'after': 'zTop',
                'label': 'Sales Graph'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'module',
                    '_value': 'Home',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'module',
                    '_value': 'Home',
                    '_isDecl': true
                },
                {
                    '_key': 'layout',
                    '_value': 'Sport',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'component': 'StringComponent',
                'bindings': {
                    'value': 'The Texas Tech quarterback <br/><br/><br/><br/><br/><br/><br/><br/>\n                        off a long day of measuring and team interviews and psychological testing '
                },
                'after': 'Today',
                'label': 'Sport today!'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'module',
                    '_value': 'Home',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'module',
                    '_value': 'Home',
                    '_isDecl': true
                },
                {
                    '_key': 'layout',
                    '_value': 'Tech',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'component': 'StringComponent',
                'bindings': {
                    'value': 'The most positive trend here is the addition of sensors to <br/><br/><br/><br/><br/>\n                        <br/><br/> don’t secure their phones well or at all '
                },
                'after': 'Sport',
                'label': 'Tech News'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'module',
                    '_value': 'Home',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'module',
                    '_value': 'Home',
                    '_isDecl': true
                },
                {
                    '_key': 'layout',
                    '_value': 'MessageBoard',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'component': 'StringComponent',
                'portletWidth': 'large',
                'bindings': {
                    'value': '<b>Message from PR</b><br/>\n                    The most positive trend here is the addition of sensors to even low-end Android phones that unlock the device after\n                    detecting the user’s fingerprint. <br/> Why? Too many people don’t secure their phones well or at all '
                },
                'after': 'zBottom',
                'label': 'Message Board'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'module',
                    '_value': 'Home',
                    '_isDecl': true
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'module',
                    '_value': 'Products',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'pageTitle': 'You are now on Products',
                'homePage': 'ProductContentComponent'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'module',
                    '_value': 'Sources',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'label': 'Sources for Module',
                'homePage': 'SourcesComponent'
            },
            '_rank': 0
        }
    ]
};
/* tslint:disable */
/**
 *  @formatter:on
 *
 */


/***/ }),

/***/ "./src/app/rules/ts/UserOSS.ts":
/*!*************************************!*\
  !*** ./src/app/rules/ts/UserOSS.ts ***!
  \*************************************/
/*! exports provided: UserRule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserRule", function() { return UserRule; });
/**
 *  This is generated file. Do not edit !!
 *
 *  @formatter:off
 *
 */
/* tslint:disable */
var UserRule = {
    oss: [
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': 'User',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': 'User',
                    '_isDecl': false
                },
                {
                    '_key': 'field',
                    '_value': '*',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'after': 'zNone'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': 'User',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': 'User',
                    '_isDecl': false
                },
                {
                    '_key': 'field',
                    '_value': 'firstName',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'after': 'zLeft'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': 'User',
                    '_isDecl': false
                },
                {
                    '_key': 'field',
                    '_value': 'lastName',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'after': 'firstName'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': 'User',
                    '_isDecl': false
                },
                {
                    '_key': 'field',
                    '_value': 'age',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'after': 'lastName'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': 'User',
                    '_isDecl': false
                },
                {
                    '_key': 'field',
                    '_value': 'department',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'after': 'age'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'class',
                    '_value': 'User',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': 'Inspect2',
                    '_isDecl': false
                }
            ],
            '_properties': {
                'trait': 'Stack'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': 'Inspect2',
                    '_isDecl': false
                },
                {
                    '_key': 'layout',
                    '_value': 'MenuTop',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'trait': 'ActionButtons'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': 'Inspect2',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': 'Inspect2',
                    '_isDecl': false
                },
                {
                    '_key': 'layout',
                    '_value': 'First',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'trait': 'Form'
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'layout',
                    '_value': 'Inspect2',
                    '_isDecl': false
                }
            ],
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'object',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'action',
                    '_value': 'update',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'visible': {
                    't': 'Expr',
                    'v': 'properties.editing'
                },
                'actionResults': {
                    't': 'Expr',
                    'v': 'object.firstName = ("Mr." + object.firstName)'
                }
            },
            '_rank': 0
        },
        {
            '_selectors': [
                {
                    '_key': 'object',
                    '_value': '*',
                    '_isDecl': false
                },
                {
                    '_key': 'action',
                    '_value': 'Save',
                    '_isDecl': true
                }
            ],
            '_properties': {
                'visible': {
                    't': 'Expr',
                    'v': 'properties.editing'
                },
                'buttonStyle': 'info',
                'actionResults': {
                    't': 'Expr',
                    'v': 'object.firstName = ("Ms." + object.firstName)'
                },
                'label': 'My Save'
            },
            '_rank': 0
        }
    ]
};
/* tslint:disable */
/**
 *  @formatter:on
 *
 */


/***/ }),

/***/ "./src/app/user-rules.ts":
/*!*******************************!*\
  !*** ./src/app/user-rules.ts ***!
  \*******************************/
/*! exports provided: ApplicationRule, UserRule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _rules__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rules */ "./src/app/rules/index.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ApplicationRule", function() { return _rules__WEBPACK_IMPORTED_MODULE_0__["ApplicationRule"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UserRule", function() { return _rules__WEBPACK_IMPORTED_MODULE_0__["UserRule"]; });




/***/ }),

/***/ "./src/environments/environment.ts":
/*!*****************************************!*\
  !*** ./src/environments/environment.ts ***!
  \*****************************************/
/*! exports provided: environment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "environment", function() { return environment; });
// This file can be replaced during build by using the `fileReplacements` array.
// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.
var environment = {
    production: false
};
/*
 * In development mode, to ignore zone related error stack frames such as
 * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can
 * import the following file, but please comment it out in production mode
 * because it will have performance impact when throw error
 */
// import 'zone.js/dist/zone-error';  // Included with Angular CLI.


/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser-dynamic */ "../../node_modules/@angular/platform-browser-dynamic/fesm5/platform-browser-dynamic.js");
/* harmony import */ var _app_app_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app/app.module */ "./src/app/app.module.ts");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./environments/environment */ "./src/environments/environment.ts");




if (_environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].production) {
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["enableProdMode"])();
}
Object(_angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__["platformBrowserDynamic"])().bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_2__["AppModule"])
    .catch(function (err) { return console.log(err); });


/***/ }),

/***/ 0:
/*!***************************!*\
  !*** multi ./src/main.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/i304804/Documents/ariba/projects/Open Source/MetaUI/modules/metaui-evolution/src/main.ts */"./src/main.ts");


/***/ })

},[[0,"runtime","vendor"]]]);
//# sourceMappingURL=main.js.map