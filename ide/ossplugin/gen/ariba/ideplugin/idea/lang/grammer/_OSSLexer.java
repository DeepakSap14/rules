/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

/*
    Copyright 1996-2008 Ariba, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    $Id:$
*/

package ariba.ideplugin.idea.lang.grammer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static ariba.ideplugin.idea.lang.grammer.psi.OSSTypes.*;

@SuppressWarnings({"ALL"})


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>OSSLexer.flex</tt>
 */
public class _OSSLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\4\2\1\22\0\1\2\1\43\1\13\1\36\1\10\2\0\1\14\1\37\1\40\1\5"+
    "\1\30\1\22\1\30\1\15\1\3\1\20\7\21\2\7\1\33\1\32\1\0\1\34\1\41\1\0\1\35\1"+
    "\24\1\74\1\103\1\31\1\27\1\106\1\105\1\25\1\111\1\6\1\54\1\76\1\6\1\73\1\57"+
    "\1\100\1\6\1\72\1\110\1\77\2\6\1\104\1\23\2\6\1\16\1\0\1\17\1\0\1\101\1\0"+
    "\1\46\1\64\1\44\1\50\1\26\1\63\1\65\1\56\1\51\1\67\1\6\1\45\1\66\1\62\1\61"+
    "\1\52\1\6\1\55\1\47\1\60\1\71\1\70\1\102\1\107\1\53\1\75\1\11\1\0\1\12\1\42"+
    "\6\0\1\4\242\0\2\4\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\1"+
    "\1\6\1\7\2\1\1\10\1\11\1\12\1\5\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\21\4\1\25\1\26\1\27\1\30\2\5\1\0"+
    "\1\30\1\31\4\0\1\32\1\0\1\33\1\30\1\0"+
    "\2\5\1\0\1\34\34\4\1\26\1\30\1\0\1\35"+
    "\1\36\1\0\1\30\1\5\35\4\1\26\1\0\33\4"+
    "\1\37\1\4\1\0\1\40\2\4\1\41\1\4\1\42"+
    "\7\4\1\43\3\4\1\44\7\4\1\45\1\4\1\46"+
    "\2\4\1\47\1\50\10\4\1\51\1\4\1\52\1\4"+
    "\1\53\3\4\1\54\20\4\1\55\1\4\1\56\6\4"+
    "\1\57\2\4\1\60\3\4\1\61\5\4\1\62\7\4"+
    "\1\63\1\64\7\4\1\65\26\4\1\66\1\67\2\4"+
    "\1\70\1\4\1\71\2\4\1\72\7\4\1\73\4\4"+
    "\1\74\1\4\1\75\1\76\2\4\1\77\2\4\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[321];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\112\0\u0128\0\u0172\0\u01bc"+
    "\0\112\0\112\0\u0206\0\u0250\0\u029a\0\112\0\112\0\u02e4"+
    "\0\112\0\112\0\112\0\u032e\0\112\0\112\0\112\0\112"+
    "\0\112\0\112\0\u0378\0\u03c2\0\u040c\0\u0456\0\u04a0\0\u04ea"+
    "\0\u0534\0\u057e\0\u05c8\0\u0612\0\u065c\0\u06a6\0\u06f0\0\u073a"+
    "\0\u0784\0\u07ce\0\u0818\0\u0862\0\u08ac\0\u08f6\0\u0940\0\u098a"+
    "\0\112\0\u098a\0\112\0\u09d4\0\u0a1e\0\u0a68\0\u0ab2\0\u0206"+
    "\0\112\0\u0250\0\112\0\u0afc\0\u0b46\0\u0b90\0\u0bda\0\u0c24"+
    "\0\112\0\u0c6e\0\u0cb8\0\u0d02\0\u0d4c\0\u0d96\0\u0de0\0\u0e2a"+
    "\0\u0e74\0\u0ebe\0\u0f08\0\u0f52\0\u0f9c\0\u0fe6\0\u1030\0\u107a"+
    "\0\u10c4\0\u110e\0\u1158\0\u11a2\0\u11ec\0\u1236\0\u1280\0\u12ca"+
    "\0\u1314\0\u135e\0\u13a8\0\u13f2\0\u143c\0\u1486\0\u14d0\0\u151a"+
    "\0\112\0\112\0\u1564\0\u098a\0\u15ae\0\u15f8\0\u1642\0\u168c"+
    "\0\u16d6\0\u1720\0\u176a\0\u17b4\0\u17fe\0\u1848\0\u1892\0\u18dc"+
    "\0\u1926\0\u1970\0\u19ba\0\u1a04\0\u1a4e\0\u1a98\0\u1ae2\0\u1b2c"+
    "\0\u1b76\0\u1bc0\0\u1c0a\0\u1c54\0\u1c9e\0\u1ce8\0\u1d32\0\u1d7c"+
    "\0\u1dc6\0\u1e10\0\112\0\u1e5a\0\u1ea4\0\u1eee\0\u1f38\0\u1f82"+
    "\0\u1fcc\0\u2016\0\u2060\0\u20aa\0\u20f4\0\u213e\0\u2188\0\u21d2"+
    "\0\u221c\0\u2266\0\u22b0\0\u22fa\0\u2344\0\u238e\0\u23d8\0\u2422"+
    "\0\u246c\0\u24b6\0\u2500\0\u254a\0\u2594\0\u25de\0\u2628\0\u0128"+
    "\0\u2672\0\u26bc\0\u0128\0\u2706\0\u2750\0\u0128\0\u279a\0\u0128"+
    "\0\u27e4\0\u282e\0\u2878\0\u28c2\0\u290c\0\u2956\0\u29a0\0\u0128"+
    "\0\u29ea\0\u2a34\0\u2a7e\0\u0128\0\u2ac8\0\u2b12\0\u2b5c\0\u2ba6"+
    "\0\u2bf0\0\u2c3a\0\u2c84\0\u0128\0\u2cce\0\u0128\0\u2d18\0\u2d62"+
    "\0\u0128\0\u2dac\0\u2df6\0\u2e40\0\u2e8a\0\u2ed4\0\u2f1e\0\u2f68"+
    "\0\u2fb2\0\u2ffc\0\u0128\0\u3046\0\u0128\0\u3090\0\u30da\0\u3124"+
    "\0\u316e\0\u31b8\0\u0128\0\u3202\0\u324c\0\u3296\0\u32e0\0\u332a"+
    "\0\u3374\0\u33be\0\u3408\0\u3452\0\u349c\0\u34e6\0\u3530\0\u357a"+
    "\0\u35c4\0\u360e\0\u3658\0\u0128\0\u36a2\0\u0128\0\u36ec\0\u3736"+
    "\0\u3780\0\u37ca\0\u3814\0\u385e\0\u0128\0\u38a8\0\u38f2\0\u0128"+
    "\0\u393c\0\u3986\0\u39d0\0\u0128\0\u3a1a\0\u3a64\0\u3aae\0\u3af8"+
    "\0\u3b42\0\u0128\0\u3b8c\0\u3bd6\0\u3c20\0\u3c6a\0\u3cb4\0\u3cfe"+
    "\0\u3d48\0\u0128\0\u0128\0\u3d92\0\u3ddc\0\u3e26\0\u3e70\0\u3eba"+
    "\0\u3f04\0\u3f4e\0\u0128\0\u3f98\0\u3fe2\0\u402c\0\u4076\0\u40c0"+
    "\0\u410a\0\u4154\0\u419e\0\u41e8\0\u4232\0\u427c\0\u42c6\0\u4310"+
    "\0\u435a\0\u43a4\0\u43ee\0\u4438\0\u4482\0\u44cc\0\u4516\0\u4560"+
    "\0\u45aa\0\u0128\0\u0128\0\u45f4\0\u463e\0\u0128\0\u4688\0\u0128"+
    "\0\u46d2\0\u471c\0\u0128\0\u4766\0\u47b0\0\u47fa\0\u4844\0\u488e"+
    "\0\u48d8\0\u4922\0\u0128\0\u496c\0\u49b6\0\u4a00\0\u4a4a\0\u0128"+
    "\0\u4a94\0\u0128\0\u0128\0\u4ade\0\u4b28\0\u0128\0\u4b72\0\u4bbc"+
    "\0\u0128";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[321];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\7\1\21\5\6\1\2\1\6\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\2\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\6\1\40\3\6\1\41"+
    "\1\6\1\42\1\43\1\44\1\45\1\46\1\6\1\47"+
    "\1\6\1\50\1\51\3\6\1\52\4\6\1\53\7\6"+
    "\113\0\2\3\112\0\1\54\1\0\1\55\112\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\5\6\1\0"+
    "\1\6\12\0\46\6\7\0\1\7\5\0\1\57\2\0"+
    "\2\7\1\60\2\0\1\61\2\62\1\0\1\63\13\0"+
    "\1\61\2\0\1\63\5\0\1\61\4\0\2\63\7\0"+
    "\1\63\1\0\1\61\7\0\1\63\11\0\1\64\1\0"+
    "\1\65\1\66\4\0\1\67\4\0\5\64\1\0\1\64"+
    "\12\0\46\64\13\70\1\71\76\70\14\72\1\73\75\72"+
    "\7\0\1\74\10\0\2\74\77\0\1\75\5\0\1\57"+
    "\2\0\2\76\1\77\1\100\1\0\1\61\2\62\1\0"+
    "\1\63\13\0\1\61\2\0\1\63\5\0\1\61\4\0"+
    "\2\63\7\0\1\63\1\0\1\61\7\0\1\63\1\100"+
    "\43\0\1\101\56\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\5\6\1\0\1\6\12\0\1\6\1\102"+
    "\13\6\1\103\30\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\5\6\1\0\1\6\12\0\2\6"+
    "\1\104\43\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\5\6\1\0\1\6\12\0\1\105\16\6"+
    "\1\106\26\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\3\6\1\107\1\6\1\0\1\6\12\0"+
    "\46\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\5\6\1\110\40\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\2\6\1\111\12\6\1\112"+
    "\30\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\15\6\1\113\30\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\3\6\1\114\1\6\1\0\1\6\12\0\11\6\1\115"+
    "\34\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\6\6\1\116\11\6"+
    "\1\117\25\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\3\6\1\120\1\6\1\0\1\6\12\0"+
    "\46\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\5\6\1\121\40\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\3\6\1\122\1\6\1\0\1\6\12\0\5\6\1\123"+
    "\40\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\15\6\1\124\30\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\2\6\1\125\2\6\1\126"+
    "\40\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\3\6\1\127\42\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\26\6\1\130\1\131\1\132"+
    "\1\6\1\133\1\134\12\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\5\6\1\0\1\6\12\0"+
    "\11\6\1\135\34\6\1\54\1\0\2\54\1\0\105\54"+
    "\5\55\1\136\104\55\6\0\3\56\4\0\1\56\2\0"+
    "\2\56\1\0\5\56\1\0\1\56\12\0\46\56\7\0"+
    "\1\57\10\0\2\57\77\0\1\137\10\0\2\137\1\140"+
    "\5\0\1\140\67\0\2\64\5\0\1\64\2\0\2\64"+
    "\1\0\5\64\1\0\1\64\12\0\46\64\11\0\1\66"+
    "\100\0\12\66\1\141\77\66\6\0\2\67\7\0\1\142"+
    "\2\67\1\0\5\67\1\0\1\67\12\0\46\67\7\0"+
    "\1\74\10\0\2\74\1\63\3\0\1\143\2\0\1\63"+
    "\16\0\1\63\12\0\2\63\7\0\1\63\11\0\1\63"+
    "\12\0\1\75\5\0\1\57\2\0\2\75\1\144\3\0"+
    "\2\62\1\0\1\63\16\0\1\63\12\0\2\63\7\0"+
    "\1\63\11\0\1\63\12\0\1\75\5\0\1\57\2\0"+
    "\2\76\1\60\2\0\1\61\2\62\1\0\1\63\13\0"+
    "\1\61\2\0\1\63\5\0\1\61\4\0\2\63\7\0"+
    "\1\63\1\0\1\61\7\0\1\63\12\0\1\145\10\0"+
    "\3\145\1\0\1\145\1\0\2\145\1\140\1\145\12\0"+
    "\1\145\1\0\1\145\1\0\1\145\12\0\2\145\7\0"+
    "\1\145\6\0\1\145\2\0\1\145\12\0\1\145\10\0"+
    "\3\145\1\0\1\145\1\0\2\145\1\0\1\145\12\0"+
    "\1\145\1\0\1\145\1\0\1\145\12\0\2\145\7\0"+
    "\1\145\6\0\1\145\2\0\1\145\11\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\2\6\1\146\43\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\5\6\1\0\1\6\12\0"+
    "\22\6\1\147\23\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\5\6\1\0\1\6\12\0\7\6"+
    "\1\150\10\6\1\151\25\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\5\6\1\0\1\6\12\0"+
    "\14\6\1\152\31\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\5\6\1\0\1\6\12\0\14\6"+
    "\1\153\31\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\5\6\1\0\1\6\12\0\2\6\1\154"+
    "\43\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\3\6\1\155\42\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\21\6\1\156\24\6\6\0"+
    "\2\6\1\56\4\0\1\56\2\0\2\6\1\0\5\6"+
    "\1\0\1\6\12\0\11\6\1\157\34\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\5\6\1\0"+
    "\1\6\12\0\22\6\1\160\23\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\43\6\1\161\2\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\5\6\1\0\1\6\12\0"+
    "\2\6\1\162\43\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\3\6\1\163\1\6\1\0\1\6"+
    "\12\0\46\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\5\6\1\0\1\6\12\0\23\6\1\164"+
    "\22\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\3\6\1\165\1\6\1\0\1\6\12\0\46\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\3\6\1\166\1\6\1\0\1\6\12\0\46\6\6\0"+
    "\2\6\1\56\4\0\1\56\2\0\2\6\1\0\5\6"+
    "\1\0\1\6\12\0\17\6\1\167\26\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\5\6\1\0"+
    "\1\6\12\0\16\6\1\170\27\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\4\6\1\171\41\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\5\6\1\0\1\6\12\0"+
    "\1\6\1\172\44\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\5\6\1\0\1\6\12\0\3\6"+
    "\1\173\42\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\3\6\1\174\1\6\1\0\1\6\12\0"+
    "\46\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\5\6\1\175\40\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\15\6\1\176\30\6\6\0"+
    "\2\6\1\56\4\0\1\56\2\0\2\6\1\0\5\6"+
    "\1\0\1\6\12\0\15\6\1\177\30\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\3\6\1\200"+
    "\1\6\1\0\1\6\12\0\46\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\15\6\1\201\30\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\5\6\1\0\1\6\12\0"+
    "\2\6\1\202\43\6\3\55\1\203\1\55\1\136\104\55"+
    "\7\0\1\137\10\0\2\137\1\63\6\0\1\63\16\0"+
    "\1\63\12\0\2\63\7\0\1\63\11\0\1\63\12\0"+
    "\1\137\10\0\2\137\112\0\1\204\76\0\1\145\10\0"+
    "\3\145\1\0\1\145\1\61\2\145\1\0\1\145\12\0"+
    "\1\145\1\61\1\145\1\0\1\145\5\0\1\61\4\0"+
    "\2\145\7\0\1\145\1\0\1\61\4\0\1\145\2\0"+
    "\1\145\11\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\3\6\1\205\42\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\6\6\1\206\37\6\6\0"+
    "\2\6\1\56\4\0\1\56\2\0\2\6\1\0\5\6"+
    "\1\0\1\6\12\0\15\6\1\207\30\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\3\6\1\210"+
    "\1\6\1\0\1\6\12\0\46\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\5\6\1\211\40\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\3\6\1\212\1\6\1\0"+
    "\1\6\12\0\46\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\5\6\1\0\1\6\12\0\11\6"+
    "\1\213\34\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\5\6\1\0\1\6\12\0\6\6\1\214"+
    "\37\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\3\6\1\215\1\6\1\0\1\6\12\0\46\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\14\6\1\216\31\6\6\0"+
    "\2\6\1\56\4\0\1\56\2\0\2\6\1\0\3\6"+
    "\1\217\1\6\1\0\1\6\12\0\46\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\5\6\1\0"+
    "\1\6\12\0\14\6\1\220\31\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\5\6\1\221\40\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\5\6\1\0\1\6\12\0"+
    "\11\6\1\222\34\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\3\6\1\223\1\6\1\0\1\6"+
    "\12\0\46\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\5\6\1\0\1\6\12\0\4\6\1\224"+
    "\41\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\1\6\1\225\44\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\15\6\1\226\30\6\6\0"+
    "\2\6\1\56\4\0\1\56\2\0\2\6\1\0\5\6"+
    "\1\0\1\6\12\0\4\6\1\227\41\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\5\6\1\0"+
    "\1\6\12\0\25\6\1\230\20\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\25\6\1\231\20\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\5\6\1\0\1\6\12\0"+
    "\5\6\1\232\40\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\5\6\1\0\1\6\12\0\33\6"+
    "\1\233\12\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\5\6\1\0\1\6\12\0\21\6\1\234"+
    "\24\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\16\6\1\235\27\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\14\6\1\236\31\6\6\0"+
    "\2\6\1\56\4\0\1\56\2\0\2\6\1\0\5\6"+
    "\1\0\1\6\12\0\17\6\1\237\26\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\5\6\1\0"+
    "\1\6\12\0\6\6\1\240\37\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\6\6\1\241\37\6\27\0\1\242\70\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\5\6\1\0"+
    "\1\6\12\0\3\6\1\243\42\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\15\6\1\244\30\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\5\6\1\0\1\6\12\0"+
    "\25\6\1\245\20\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\5\6\1\0\1\6\12\0\1\6"+
    "\1\246\44\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\5\6\1\0\1\6\12\0\15\6\1\247"+
    "\30\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\11\6\1\250\34\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\1\251\45\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\5\6\1\0"+
    "\1\6\12\0\1\6\1\252\44\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\27\6\1\253\1\254\15\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\1\6\1\255\44\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\5\6\1\0\1\6\12\0"+
    "\34\6\1\256\11\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\5\6\1\0\1\6\12\0\44\6"+
    "\1\257\1\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\5\6\1\0\1\6\12\0\14\6\1\260"+
    "\31\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\2\6\1\261\43\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\1\262\45\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\5\6\1\0"+
    "\1\6\12\0\3\6\1\263\42\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\4\6\1\264\41\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\5\6\1\0\1\6\12\0"+
    "\11\6\1\265\34\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\5\6\1\0\1\6\12\0\5\6"+
    "\1\266\40\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\5\6\1\0\1\6\12\0\1\6\1\267"+
    "\44\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\3\6\1\270\1\6\1\0\1\6\12\0\46\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\20\6\1\271\25\6\6\0"+
    "\2\6\1\56\4\0\1\56\2\0\2\6\1\0\3\6"+
    "\1\272\1\6\1\0\1\6\12\0\46\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\5\6\1\0"+
    "\1\6\12\0\12\6\1\273\33\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\3\6\1\274\1\6"+
    "\1\0\1\6\12\0\46\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\5\6\1\0\1\6\12\0"+
    "\14\6\1\275\31\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\5\6\1\0\1\6\12\0\14\6"+
    "\1\276\31\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\5\6\1\0\1\6\12\0\6\6\1\277"+
    "\37\6\17\0\1\62\100\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\5\6\1\0\1\6\12\0\16\6"+
    "\1\300\27\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\5\6\1\0\1\6\12\0\14\6\1\301"+
    "\31\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\16\6\1\302\27\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\12\6\1\303\33\6\6\0"+
    "\2\6\1\56\4\0\1\56\2\0\2\6\1\0\5\6"+
    "\1\0\1\6\12\0\2\6\1\304\43\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\5\6\1\0"+
    "\1\6\12\0\2\6\1\305\43\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\5\6\1\306\40\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\3\6\1\307\1\6\1\0"+
    "\1\6\12\0\46\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\5\6\1\0\1\6\12\0\2\6"+
    "\1\310\43\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\3\6\1\311\1\6\1\0\1\6\12\0"+
    "\46\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\14\6\1\312\31\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\14\6\1\313\31\6\6\0"+
    "\2\6\1\56\4\0\1\56\2\0\2\6\1\0\5\6"+
    "\1\0\1\6\12\0\42\6\1\314\3\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\3\6\1\315"+
    "\1\6\1\0\1\6\12\0\46\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\16\6\1\316\27\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\3\6\1\317\1\6\1\0"+
    "\1\6\12\0\46\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\5\6\1\0\1\6\12\0\26\6"+
    "\1\320\17\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\5\6\1\0\1\6\12\0\1\6\1\321"+
    "\44\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\43\6\1\322\2\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\14\6\1\323\31\6\6\0"+
    "\2\6\1\56\4\0\1\56\2\0\2\6\1\0\5\6"+
    "\1\0\1\6\12\0\15\6\1\324\30\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\3\6\1\325"+
    "\1\6\1\0\1\6\12\0\46\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\3\6\1\326\1\6"+
    "\1\0\1\6\12\0\46\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\5\6\1\0\1\6\12\0"+
    "\26\6\1\327\17\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\5\6\1\0\1\6\12\0\13\6"+
    "\1\330\32\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\5\6\1\0\1\6\12\0\7\6\1\331"+
    "\36\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\22\6\1\332\23\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\16\6\1\333\27\6\6\0"+
    "\2\6\1\56\4\0\1\56\2\0\2\6\1\0\5\6"+
    "\1\0\1\6\12\0\14\6\1\334\31\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\5\6\1\0"+
    "\1\6\12\0\21\6\1\335\24\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\2\6\1\336\43\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\5\6\1\0\1\6\12\0"+
    "\5\6\1\337\40\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\5\6\1\0\1\6\12\0\15\6"+
    "\1\340\30\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\5\6\1\0\1\6\12\0\21\6\1\341"+
    "\24\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\35\6\1\342\10\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\3\6\1\343\1\6\1\0\1\6\12\0\46\6\6\0"+
    "\2\6\1\56\4\0\1\56\2\0\2\6\1\0\3\6"+
    "\1\344\1\6\1\0\1\6\12\0\46\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\5\6\1\0"+
    "\1\6\12\0\14\6\1\345\31\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\22\6\1\346\23\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\5\6\1\0\1\6\12\0"+
    "\11\6\1\347\34\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\5\6\1\0\1\6\12\0\16\6"+
    "\1\350\27\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\3\6\1\351\1\6\1\0\1\6\12\0"+
    "\46\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\6\6\1\352\37\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\10\6\1\353\30\6\1\354"+
    "\4\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\3\6\1\355\1\6\1\0\1\6\12\0\46\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\4\6\1\356\41\6\6\0"+
    "\2\6\1\56\4\0\1\56\2\0\2\6\1\0\5\6"+
    "\1\0\1\6\12\0\40\6\1\357\5\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\3\6\1\360"+
    "\1\6\1\0\1\6\12\0\46\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\11\6\1\361\34\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\5\6\1\0\1\6\12\0"+
    "\15\6\1\362\30\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\5\6\1\0\1\6\12\0\11\6"+
    "\1\363\34\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\5\6\1\0\1\6\12\0\3\6\1\364"+
    "\42\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\14\6\1\365\31\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\4\6\1\366\41\6\6\0"+
    "\2\6\1\56\4\0\1\56\2\0\2\6\1\0\5\6"+
    "\1\0\1\6\12\0\45\6\1\367\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\30\6\1\370\6\6\1\371\6\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\5\6\1\0"+
    "\1\6\12\0\14\6\1\372\31\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\3\6\1\373\42\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\3\6\1\374\1\6\1\0"+
    "\1\6\12\0\46\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\3\6\1\375\1\6\1\0\1\6"+
    "\12\0\46\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\5\6\1\0\1\6\12\0\11\6\1\376"+
    "\34\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\5\6\1\377\40\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\11\6\1\u0100\34\6\6\0"+
    "\2\6\1\56\4\0\1\56\2\0\2\6\1\0\5\6"+
    "\1\0\1\6\12\0\1\u0101\45\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\16\6\1\u0102\27\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\5\6\1\0\1\6\12\0"+
    "\22\6\1\u0103\23\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\5\6\1\0\1\6\12\0\11\6"+
    "\1\u0104\34\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\5\6\1\0\1\6\12\0\5\6\1\u0105"+
    "\40\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\16\6\1\u0106\27\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\5\6\1\u0107\40\6\6\0"+
    "\2\6\1\56\4\0\1\56\2\0\2\6\1\0\5\6"+
    "\1\0\1\6\12\0\15\6\1\u0108\30\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\5\6\1\0"+
    "\1\6\12\0\25\6\1\u0109\20\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\11\6\1\u010a\34\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\5\6\1\0\1\6\12\0"+
    "\7\6\1\u010b\36\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\5\6\1\0\1\6\12\0\15\6"+
    "\1\u010c\30\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\5\6\1\0\1\6\12\0\16\6\1\u010d"+
    "\27\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\2\6\1\u010e\43\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\12\6\1\u010f\33\6\6\0"+
    "\2\6\1\56\4\0\1\56\2\0\2\6\1\0\5\6"+
    "\1\0\1\6\12\0\2\6\1\u0110\43\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\5\6\1\0"+
    "\1\6\12\0\11\6\1\u0111\34\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\4\6\1\u0112\41\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\5\6\1\0\1\6\12\0"+
    "\16\6\1\u0113\27\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\5\6\1\0\1\6\12\0\22\6"+
    "\1\u0114\23\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\5\6\1\0\1\6\12\0\1\6\1\u0115"+
    "\44\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\2\6\1\u0116\43\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\25\6\1\u0117\20\6\6\0"+
    "\2\6\1\56\4\0\1\56\2\0\2\6\1\0\5\6"+
    "\1\0\1\6\12\0\21\6\1\u0118\24\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\5\6\1\0"+
    "\1\6\12\0\6\6\1\u0119\37\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\44\6\1\u011a\1\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\5\6\1\0\1\6\12\0"+
    "\5\6\1\u011b\40\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\3\6\1\u011c\1\6\1\0\1\6"+
    "\12\0\46\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\3\6\1\u011d\1\6\1\0\1\6\12\0"+
    "\46\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\4\6\1\u011e\41\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\6\6\1\u011f\37\6\6\0"+
    "\2\6\1\56\4\0\1\56\2\0\2\6\1\0\5\6"+
    "\1\0\1\6\12\0\14\6\1\u0120\31\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\5\6\1\0"+
    "\1\6\12\0\14\6\1\u0121\31\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\6\6\1\u0122\37\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\5\6\1\0\1\6\12\0"+
    "\3\6\1\u0123\42\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\5\6\1\0\1\6\12\0\6\6"+
    "\1\u0124\37\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\5\6\1\0\1\6\12\0\25\6\1\u0125"+
    "\20\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\14\6\1\u0126\31\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\1\u0127\45\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\5\6\1\0"+
    "\1\6\12\0\43\6\1\u0128\2\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\5\6\1\u0129\40\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\5\6\1\0\1\6\12\0"+
    "\15\6\1\u012a\30\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\5\6\1\0\1\6\12\0\3\6"+
    "\1\u012b\42\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\5\6\1\0\1\6\12\0\5\6\1\u012c"+
    "\40\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\3\6\1\u012d\1\6\1\0\1\6\12\0\46\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\6\6\1\u012e\37\6\6\0"+
    "\2\6\1\56\4\0\1\56\2\0\2\6\1\0\5\6"+
    "\1\0\1\6\12\0\14\6\1\u012f\31\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\5\6\1\0"+
    "\1\6\12\0\16\6\1\u0130\27\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\16\6\1\u0131\27\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\5\6\1\0\1\6\12\0"+
    "\15\6\1\u0132\30\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\5\6\1\0\1\6\12\0\11\6"+
    "\1\u0133\34\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\5\6\1\0\1\6\12\0\6\6\1\u0134"+
    "\37\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\15\6\1\u0135\30\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\21\6\1\u0136\24\6\6\0"+
    "\2\6\1\56\4\0\1\56\2\0\2\6\1\0\3\6"+
    "\1\u0137\1\6\1\0\1\6\12\0\46\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\5\6\1\0"+
    "\1\6\12\0\16\6\1\u0138\27\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\15\6\1\u0139\30\6\6\0\2\6\1\56\4\0"+
    "\1\56\2\0\2\6\1\0\5\6\1\0\1\6\12\0"+
    "\11\6\1\u013a\34\6\6\0\2\6\1\56\4\0\1\56"+
    "\2\0\2\6\1\0\5\6\1\0\1\6\12\0\3\6"+
    "\1\u013b\42\6\6\0\2\6\1\56\4\0\1\56\2\0"+
    "\2\6\1\0\5\6\1\0\1\6\12\0\16\6\1\u013c"+
    "\27\6\6\0\2\6\1\56\4\0\1\56\2\0\2\6"+
    "\1\0\5\6\1\0\1\6\12\0\11\6\1\u013d\34\6"+
    "\6\0\2\6\1\56\4\0\1\56\2\0\2\6\1\0"+
    "\5\6\1\0\1\6\12\0\14\6\1\u013e\31\6\6\0"+
    "\2\6\1\56\4\0\1\56\2\0\2\6\1\0\5\6"+
    "\1\0\1\6\12\0\14\6\1\u013f\31\6\6\0\2\6"+
    "\1\56\4\0\1\56\2\0\2\6\1\0\3\6\1\u0140"+
    "\1\6\1\0\1\6\12\0\46\6\6\0\2\6\1\56"+
    "\4\0\1\56\2\0\2\6\1\0\5\6\1\0\1\6"+
    "\12\0\4\6\1\u0141\41\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19462];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\2\11\3\1\2\11"+
    "\1\1\3\11\1\1\6\11\26\1\1\11\1\0\1\11"+
    "\1\1\4\0\1\11\1\0\1\11\1\1\1\0\2\1"+
    "\1\0\1\11\36\1\1\0\2\11\1\0\37\1\1\11"+
    "\1\0\35\1\1\0\237\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[321];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _OSSLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _OSSLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 65: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 66: break;
          case 3: 
            { return STAR;
            }
          case 67: break;
          case 4: 
            { return IDENTIFIER;
            }
          case 68: break;
          case 5: 
            { return INT_LITERAL;
            }
          case 69: break;
          case 6: 
            { return LEFT_BRACE;
            }
          case 70: break;
          case 7: 
            { return RIGHT_BRACE;
            }
          case 71: break;
          case 8: 
            { return DOT;
            }
          case 72: break;
          case 9: 
            { return LEFT_BRACKET;
            }
          case 73: break;
          case 10: 
            { return RIGHT_BRACKET;
            }
          case 74: break;
          case 11: 
            { return COMA;
            }
          case 75: break;
          case 12: 
            { return SEMI;
            }
          case 76: break;
          case 13: 
            { return COLON;
            }
          case 77: break;
          case 14: 
            { return OP_EQ;
            }
          case 78: break;
          case 15: 
            { return AT;
            }
          case 79: break;
          case 16: 
            { return HASH;
            }
          case 80: break;
          case 17: 
            { return LEFT_PARENTH;
            }
          case 81: break;
          case 18: 
            { return RIGHT_PARENTH;
            }
          case 82: break;
          case 19: 
            { return NEGATE;
            }
          case 83: break;
          case 20: 
            { return EXCL_MARK;
            }
          case 84: break;
          case 21: 
            { return LINE_COMMENT;
            }
          case 85: break;
          case 22: 
            { return BLOCK_COMMENT;
            }
          case 86: break;
          case 23: 
            { return KEY_PATH;
            }
          case 87: break;
          case 24: 
            { return FLT_LITERAL;
            }
          case 88: break;
          case 25: 
            { return DYN_FIELDPATHBINDING;
            }
          case 89: break;
          case 26: 
            { return STRING_LITERAL;
            }
          case 90: break;
          case 27: 
            { return SQ_STRING_LITERAL;
            }
          case 91: break;
          case 28: 
            { return NEXT;
            }
          case 92: break;
          case 29: 
            { return EXPR_LITERAL;
            }
          case 93: break;
          case 30: 
            { return LOCALIZATION_KEY;
            }
          case 94: break;
          case 31: 
            { return KW_ZTOP;
            }
          case 95: break;
          case 32: 
            { return KW_CLASS;
            }
          case 96: break;
          case 33: 
            { return KW_LABEL;
            }
          case 97: break;
          case 34: 
            { return KW_AFTER;
            }
          case 98: break;
          case 35: 
            { return KW_TRAIT;
            }
          case 99: break;
          case 36: 
            { return KW_FIELD;
            }
          case 100: break;
          case 37: 
            { return KW_ZNONE;
            }
          case 101: break;
          case 38: 
            { return KW_ZLEFT;
            }
          case 102: break;
          case 39: 
            { return KW_LAYOUT;
            }
          case 103: break;
          case 40: 
            { return KW_ACTION;
            }
          case 104: break;
          case 41: 
            { return KW_OBJECT;
            }
          case 105: break;
          case 42: 
            { return KW_BEFORE;
            }
          case 106: break;
          case 43: 
            { return KW_MODULE;
            }
          case 107: break;
          case 44: 
            { return KW_ZRIGHT;
            }
          case 108: break;
          case 45: 
            { return KW_VISIBLE;
            }
          case 109: break;
          case 46: 
            { return KW_ZBOTTOM;
            }
          case 110: break;
          case 47: 
            { return KW_PAGENAME;
            }
          case 111: break;
          case 48: 
            { return KW_HOMEPAGE;
            }
          case 112: break;
          case 49: 
            { return KW_BINDINGS;
            }
          case 113: break;
          case 50: 
            { return KW_COMPONENT;
            }
          case 114: break;
          case 51: 
            { return KW_OPERATION;
            }
          case 115: break;
          case 52: 
            { return KW_NEEDSFORM;
            }
          case 116: break;
          case 53: 
            { return KW_DISPLAYKEY;
            }
          case 117: break;
          case 54: 
            { return KW_DISPLAYGROUP;
            }
          case 118: break;
          case 55: 
            { return KW_PAGEBINDINGS;
            }
          case 119: break;
          case 56: 
            { return KW_MODULE_TRAIT;
            }
          case 120: break;
          case 57: 
            { return KW_USETEXTINDEX;
            }
          case 121: break;
          case 58: 
            { return KW_ACTIONRESULTS;
            }
          case 122: break;
          case 59: 
            { return KW_PORTLETWRAPPER;
            }
          case 123: break;
          case 60: 
            { return KW_SEARCHOPERATION;
            }
          case 124: break;
          case 61: 
            { return KW_VALUEREDIRECTOR;
            }
          case 125: break;
          case 62: 
            { return KW_WRAPPERBINDINGS;
            }
          case 126: break;
          case 63: 
            { return KW_WRAPPERCOMPONENT;
            }
          case 127: break;
          case 64: 
            { return KW_TEXTSEARCHSUPPORTED;
            }
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
